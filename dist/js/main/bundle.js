/******/ (function(modules) { // webpackBootstrap
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdate"];
/******/ 	this["webpackHotUpdate"] = 
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		head.appendChild(script);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
/******/ 		if(typeof XMLHttpRequest === "undefined")
/******/ 			return callback(new Error("No browser support"));
/******/ 		try {
/******/ 			var request = new XMLHttpRequest();
/******/ 			var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 			request.open("GET", requestPath, true);
/******/ 			request.timeout = 10000;
/******/ 			request.send(null);
/******/ 		} catch(err) {
/******/ 			return callback(err);
/******/ 		}
/******/ 		request.onreadystatechange = function() {
/******/ 			if(request.readyState !== 4) return;
/******/ 			if(request.status === 0) {
/******/ 				// timeout
/******/ 				callback(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 			} else if(request.status === 404) {
/******/ 				// no update available
/******/ 				callback();
/******/ 			} else if(request.status !== 200 && request.status !== 304) {
/******/ 				// other failure
/******/ 				callback(new Error("Manifest request to " + requestPath + " failed."));
/******/ 			} else {
/******/ 				// success
/******/ 				try {
/******/ 					var update = JSON.parse(request.responseText);
/******/ 				} catch(e) {
/******/ 					callback(e);
/******/ 					return;
/******/ 				}
/******/ 				callback(null, update);
/******/ 			}
/******/ 		};
/******/ 	}

/******/ 	
/******/ 	
/******/ 	// Copied from https://github.com/facebook/react/blob/bef45b0/src/shared/utils/canDefineProperty.js
/******/ 	var canDefineProperty = false;
/******/ 	try {
/******/ 		Object.defineProperty({}, "x", {
/******/ 			get: function() {}
/******/ 		});
/******/ 		canDefineProperty = true;
/******/ 	} catch(x) {
/******/ 		// IE will fail on defineProperty
/******/ 	}
/******/ 	
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "db7eef1202ff41d77f8e"; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					if(me.children.indexOf(request) < 0)
/******/ 						me.children.push(request);
/******/ 				} else hotCurrentParents = [moduleId];
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {
/******/ 				if(canDefineProperty) {
/******/ 					Object.defineProperty(fn, name, (function(name) {
/******/ 						return {
/******/ 							configurable: true,
/******/ 							enumerable: true,
/******/ 							get: function() {
/******/ 								return __webpack_require__[name];
/******/ 							},
/******/ 							set: function(value) {
/******/ 								__webpack_require__[name] = value;
/******/ 							}
/******/ 						};
/******/ 					}(name)));
/******/ 				} else {
/******/ 					fn[name] = __webpack_require__[name];
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		function ensure(chunkId, callback) {
/******/ 			if(hotStatus === "ready")
/******/ 				hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			__webpack_require__.e(chunkId, function() {
/******/ 				try {
/******/ 					callback.call(null, fn);
/******/ 				} finally {
/******/ 					finishChunkLoading();
/******/ 				}
/******/ 	
/******/ 				function finishChunkLoading() {
/******/ 					hotChunksLoading--;
/******/ 					if(hotStatus === "prepare") {
/******/ 						if(!hotWaitingFilesMap[chunkId]) {
/******/ 							hotEnsureUpdateChunk(chunkId);
/******/ 						}
/******/ 						if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 							hotUpdateDownloaded();
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		}
/******/ 		if(canDefineProperty) {
/******/ 			Object.defineProperty(fn, "e", {
/******/ 				enumerable: true,
/******/ 				value: ensure
/******/ 			});
/******/ 		} else {
/******/ 			fn.e = ensure;
/******/ 		}
/******/ 		return fn;
/******/ 	}
/******/ 	
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 	
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback;
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback;
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "number")
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 				else
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		return hot;
/******/ 	}
/******/ 	
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/ 	
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/ 	
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailibleFilesMap = {};
/******/ 	var hotCallback;
/******/ 	
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/ 	
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/ 	
/******/ 	function hotCheck(apply, callback) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		if(typeof apply === "function") {
/******/ 			hotApplyOnUpdate = false;
/******/ 			callback = apply;
/******/ 		} else {
/******/ 			hotApplyOnUpdate = apply;
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 		hotSetStatus("check");
/******/ 		hotDownloadManifest(function(err, update) {
/******/ 			if(err) return callback(err);
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				callback(null, null);
/******/ 				return;
/******/ 			}
/******/ 	
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotAvailibleFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			for(var i = 0; i < update.c.length; i++)
/******/ 				hotAvailibleFilesMap[update.c[i]] = true;
/******/ 			hotUpdateNewHash = update.h;
/******/ 	
/******/ 			hotSetStatus("prepare");
/******/ 			hotCallback = callback;
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 0;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailibleFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var callback = hotCallback;
/******/ 		hotCallback = null;
/******/ 		if(!callback) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			hotApply(hotApplyOnUpdate, callback);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			callback(null, outdatedModules);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotApply(options, callback) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		if(typeof options === "function") {
/******/ 			callback = options;
/******/ 			options = {};
/******/ 		} else if(options && typeof options === "object") {
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		} else {
/******/ 			options = {};
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 	
/******/ 		function getAffectedStuff(module) {
/******/ 			var outdatedModules = [module];
/******/ 			var outdatedDependencies = {};
/******/ 	
/******/ 			var queue = outdatedModules.slice();
/******/ 			while(queue.length > 0) {
/******/ 				var moduleId = queue.pop();
/******/ 				var module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return new Error("Aborted because of self decline: " + moduleId);
/******/ 				}
/******/ 				if(moduleId === 0) {
/******/ 					return;
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return new Error("Aborted because of declined dependency: " + moduleId + " in " + parentId);
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push(parentId);
/******/ 				}
/******/ 			}
/******/ 	
/******/ 			return [outdatedModules, outdatedDependencies];
/******/ 		}
/******/ 	
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				var moduleId = toModuleId(id);
/******/ 				var result = getAffectedStuff(moduleId);
/******/ 				if(!result) {
/******/ 					if(options.ignoreUnaccepted)
/******/ 						continue;
/******/ 					hotSetStatus("abort");
/******/ 					return callback(new Error("Aborted because " + moduleId + " is not accepted"));
/******/ 				}
/******/ 				if(result instanceof Error) {
/******/ 					hotSetStatus("abort");
/******/ 					return callback(result);
/******/ 				}
/******/ 				appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 				addAllToSet(outdatedModules, result[0]);
/******/ 				for(var moduleId in result[1]) {
/******/ 					if(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {
/******/ 						if(!outdatedDependencies[moduleId])
/******/ 							outdatedDependencies[moduleId] = [];
/******/ 						addAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(var i = 0; i < outdatedModules.length; i++) {
/******/ 			var moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/ 	
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			var moduleId = queue.pop();
/******/ 			var module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/ 	
/******/ 			var data = {};
/******/ 	
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(var j = 0; j < disposeHandlers.length; j++) {
/******/ 				var cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/ 	
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/ 	
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/ 	
/******/ 			// remove "parents" references from all children
/******/ 			for(var j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				var idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// remove outdated dependency from module children
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				for(var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 					var dependency = moduleOutdatedDependencies[j];
/******/ 					var idx = module.children.indexOf(dependency);
/******/ 					if(idx >= 0) module.children.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/ 	
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/ 	
/******/ 		// insert new code
/******/ 		for(var moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				var callbacks = [];
/******/ 				for(var i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 					var dependency = moduleOutdatedDependencies[i];
/******/ 					var cb = module.hot._acceptedDependencies[dependency];
/******/ 					if(callbacks.indexOf(cb) >= 0) continue;
/******/ 					callbacks.push(cb);
/******/ 				}
/******/ 				for(var i = 0; i < callbacks.length; i++) {
/******/ 					var cb = callbacks[i];
/******/ 					try {
/******/ 						cb(outdatedDependencies);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Load self accepted modules
/******/ 		for(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			var moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else if(!error)
/******/ 					error = err;
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return callback(error);
/******/ 		}
/******/ 	
/******/ 		hotSetStatus("idle");
/******/ 		callback(null, outdatedModules);
/******/ 	}

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: hotCurrentParents,
/******/ 			children: []
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:8080/dist/js/main/";

/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };

/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(0)(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(3);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*globals window __webpack_hash__ */
	if(true) {
		var lastData;
		var upToDate = function upToDate() {
			return lastData.indexOf(__webpack_require__.h()) >= 0;
		};
		var check = function check() {
			module.hot.check(true, function(err, updatedModules) {
				if(err) {
					if(module.hot.status() in {
							abort: 1,
							fail: 1
						}) {
						console.warn("[HMR] Cannot apply update. Need to do a full reload!");
						console.warn("[HMR] " + err.stack || err.message);
						window.location.reload();
					} else {
						console.warn("[HMR] Update failed: " + err.stack || err.message);
					}
					return;
				}

				if(!updatedModules) {
					console.warn("[HMR] Cannot find update. Need to do a full reload!");
					console.warn("[HMR] (Probably because of restarting the webpack-dev-server)");
					window.location.reload();
					return;
				}

				if(!upToDate()) {
					check();
				}

				__webpack_require__(2)(updatedModules, updatedModules);

				if(upToDate()) {
					console.log("[HMR] App is up to date.");
				}

			});
		};
		var addEventListener = window.addEventListener ? function(eventName, listener) {
			window.addEventListener(eventName, listener, false);
		} : function(eventName, listener) {
			window.attachEvent("on" + eventName, listener);
		};
		addEventListener("message", function(event) {
			if(typeof event.data === "string" && event.data.indexOf("webpackHotUpdate") === 0) {
				lastData = event.data;
				if(!upToDate() && module.hot.status() === "idle") {
					console.log("[HMR] Checking for updates on the server...");
					check();
				}
			}
		});
		console.log("[HMR] Waiting for update signal from WDS...");
	} else {
		throw new Error("[HMR] Hot Module Replacement is disabled.");
	}


/***/ },
/* 2 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(updatedModules, renewedModules) {
		var unacceptedModules = updatedModules.filter(function(moduleId) {
			return renewedModules && renewedModules.indexOf(moduleId) < 0;
		});

		if(unacceptedModules.length > 0) {
			console.warn("[HMR] The following modules couldn't be hot updated: (They would need a full reload!)");
			unacceptedModules.forEach(function(moduleId) {
				console.warn("[HMR]  - " + moduleId);
			});
		}

		if(!renewedModules || renewedModules.length === 0) {
			console.log("[HMR] Nothing hot updated.");
		} else {
			console.log("[HMR] Updated modules:");
			renewedModules.forEach(function(moduleId) {
				console.log("[HMR]  - " + moduleId);
			});
		}
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	__webpack_require__(4);

	__webpack_require__(6);

	__webpack_require__(19);

	__webpack_require__(20);

	__webpack_require__(22);

	__webpack_require__(25);

	var _index = __webpack_require__(26);

	var _index2 = _interopRequireDefault(_index);

	var _components = __webpack_require__(48);

	var _components2 = _interopRequireDefault(_components);

	var _service = __webpack_require__(122);

	var _service2 = _interopRequireDefault(_service);

	var _filter = __webpack_require__(124);

	var _filter2 = _interopRequireDefault(_filter);

	var _directive = __webpack_require__(126);

	var _directive2 = _interopRequireDefault(_directive);

	var _public_var = __webpack_require__(67);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	//公共初始化

	/**
	 * scm module 的angular 基础配置
	 * @type {angular.Module}
	 */
	//filter 等其他组件
	//组件工厂

	/**
	 * 引入页面需要用到的组件
	 */
	/**
	 * @author jiaoju.wu
	 * es6 模块化方法，引入 页面需要的js文件
	 */
	var scm_web = angular.module("scm", [_service2.default.name, _filter2.default.name, _directive2.default.name, _components2.default.name, 'ui.router', 'ui.bootstrap', 'ui.select']);
	/**
	 * scm web 路由层的配置
	 */
	//filter 等其他组件
	//service 等其他组件
	//主页组件
	scm_web.config(function ($stateProvider, $locationProvider) {
	    var states = [{
	        name: 'hello',
	        url: '/hello',
	        component: 'scmTable',
	        resolve: {
	            option: function option() {
	                var href = _public_var.publicVar.OMS004Interface.get,
	                    //table获取数据的url
	                option = { // 配置option
	                    href: href, // url
	                    lang: "zh-cn", // 国际化
	                    title: "业务类型关联业务行类型列表", // 小框的title名称
	                    param: _public_var.publicVar.param,
	                    gridOption: { //图表配置
	                        paginationPageSizes: [10, 20, 30], //分页的显示
	                        paginationPageSize: 10, //每页显示数量
	                        // enableCellEditOnFocus : true,                                               //是否允许编辑
	                        enableGridMenu: true, //是否打开grid 工具
	                        multiSelect: true, //是否允许选择行
	                        enableSelectAll: false, //是否允许全选
	                        useExternalPagination: true, //是否本地分页
	                        // enableFullRowSelection : true,

	                        enableFooterTotalSelected: false, // 是否显示选中的总数，默认为true, 如果显示，showGridFooter 必须为true
	                        showGridFooter: false,
	                        enableRowHeaderSelection: true, //是否显示选中checkbox框 ,默认为true
	                        enableRowSelection: true, // 行选择是否可用，默认为true;
	                        enableSelectionBatchEvent: true, //默认true
	                        isRowSelectable: function isRowSelectable(row) {
	                            //GridRow
	                            if (row.entity.GID > 45) {
	                                row.grid.api.selection.selectRow(row.entity); // 选中行
	                            }
	                        },
	                        modifierKeysToMultiSelect: false, //默认false,为true时只能 按ctrl或shift键进行多选, multiSelect 必须为true;
	                        noUnselect: false, //默认false,选中后是否可以取消选中

	                        selectionRowHeaderWidth: 30, //默认30 ，设置选择列的宽度；
	                        // enableFullRowSelection : true,
	                        columnDefs: [//grid 显示的配置

	                        { name: 'ENABLE', enableCellEdit: false, displayName: '启用/禁用', enableColumnMenu: false }, { name: 'TENANT_ID', enableCellEdit: false, displayName: '租户ID', enableColumnMenu: false }, { name: 'BUSINESS_TYPE_NAME', enableCellEdit: false, displayName: '业务类型', enableColumnMenu: false }, { name: 'LINE_TYPE_NAME', enableCellEdit: false, displayName: '业务行类型', enableColumnMenu: false }, { name: 'UPDATE_TIME', enableCellEdit: false, displayName: '更新时间', enableColumnMenu: false }, { name: 'UPDATE_PERSON', enableCellEdit: false, displayName: '更新人员', enableColumnMenu: false }, { name: 'CREATE_TIME', enableCellEdit: false, displayName: '创建时间', enableColumnMenu: false }, { name: 'CREATE_PERSON', enableCellEdit: false, displayName: '创建人', enableColumnMenu: false }]
	                    }
	                };
	                return option;
	            },
	            selectbox: function selectbox() {
	                var selectbox = [{
	                    "id": "BUSINESS_TYPE_NAME",
	                    "text": "业务类型",
	                    "selected": true
	                }, {
	                    "id": "LINE_TYPE_NAME",
	                    "text": "业务行类型"
	                }];
	                return selectbox;
	            }
	        }
	    }, {
	        name: 'getCustomer', //配置名称
	        url: '/getCustomer', //请求路径
	        component: 'scmTable', //对应组件
	        resolve: { //配置传参
	            option: function option() {
	                var href = "http://10.99.2.61/SCMC/CRM/CUSTOMER/getCustomer",
	                    //table获取数据的url
	                option = { // 配置option
	                    href: href, // url
	                    lang: "zh-cn", // 国际化
	                    title: "客户信息列表", // 小框的title名称
	                    param: _public_var.publicVar.param,
	                    gridOption: { //图表配置
	                        paginationPageSizes: [10, 20, 30], //分页的显示
	                        paginationPageSize: 10, //每页显示数量
	                        // enableCellEditOnFocus : true,                                               //是否允许编辑
	                        enableGridMenu: true, //是否打开grid 工具
	                        multiSelect: true, //是否允许选择行
	                        enableSelectAll: false, //是否允许全选
	                        useExternalPagination: true, //是否本地分页
	                        // enableFullRowSelection : true,

	                        enableFooterTotalSelected: false, // 是否显示选中的总数，默认为true, 如果显示，showGridFooter 必须为true
	                        showGridFooter: false,
	                        enableRowHeaderSelection: true, //是否显示选中checkbox框 ,默认为true
	                        enableRowSelection: true, // 行选择是否可用，默认为true;
	                        enableSelectionBatchEvent: true, //默认true
	                        isRowSelectable: function isRowSelectable(row) {
	                            //GridRow
	                            if (row.entity.GID > 45) {
	                                row.grid.api.selection.selectRow(row.entity); // 选中行
	                            }
	                        },
	                        modifierKeysToMultiSelect: false, //默认false,为true时只能 按ctrl或shift键进行多选, multiSelect 必须为true;
	                        noUnselect: false, //默认false,选中后是否可以取消选中

	                        selectionRowHeaderWidth: 30, //默认30 ，设置选择列的宽度；
	                        // enableFullRowSelection : true,
	                        columnDefs: [//grid 显示的配置
	                        { name: 'GID', enableCellEdit: false, displayName: "编号", enableColumnMenu: false }, { name: 'AREA', enableCellEdit: false, displayName: '地区', enableColumnMenu: false }, { name: 'CUSTOMER_CODE', enableCellEdit: false, displayName: '客户代码', enableColumnMenu: false }, { name: 'NAME_CN', enableCellEdit: false, displayName: '客户名称', enableColumnMenu: false }, { name: 'NAME_EN', enableCellEdit: false, displayName: '英文名称', enableColumnMenu: false }, { name: 'CUSTOMER_TYPE_NAME', enableCellEdit: false, displayName: '企业类型', enableColumnMenu: false }, { name: 'TRADE_NAME', enableCellEdit: false, displayName: '行业', enableColumnMenu: false }, { name: 'CONTACTS', enableCellEdit: false, displayName: '联系人', enableColumnMenu: false }, { name: 'TEL', enableCellEdit: false, displayName: '联系电话', enableColumnMenu: false }, { name: 'ADDRESS', enableCellEdit: false, displayName: '注册地址', enableColumnMenu: false }, { name: 'CUSTOMER_STATUS_NAME', enableCellEdit: false, displayName: '状态', enableColumnMenu: false }, { name: 'IMPORTANCE_DEGREE', enableCellEdit: false, displayName: '客户重要度', enableColumnMenu: false }, { name: 'INVOICE_TYPE_NAME', enableCellEdit: false, displayName: '发票种类', enableColumnMenu: false }, { name: 'PUR_MAN_TEL', enableCellEdit: false, displayName: '销售手机号码', enableColumnMenu: false }]
	                    }
	                };
	                return option;
	            },
	            selectbox: function selectbox() {
	                var selectbox = [{
	                    "id": "CUSTOMER_CODE",
	                    "text": "客户编码2",
	                    "selected": true
	                }, {
	                    "id": "NAME_CN",
	                    "text": "客户名称"
	                }];
	                return selectbox;
	            }
	        }
	    }];

	    states.forEach(function (state) {
	        $stateProvider.state(state);
	    });

	    $locationProvider.html5Mode(true);
	});

	/*scm_web.config(['$stateProvider', '$urlRouterProvider',
	    function($stateProvider, $urlRouterProvider) {
	        $stateProvider.state("index",{
	            url:"/index",
	            templateUrl:"table.html"
	        }).state("hello",{
	            url:"/hello",
	            controller:'hellowcontroller',
	            templateUrl:"../Web/src/js/components/tableComponent/hello.html"
	        }).state("getCustomer",{
	            url:"/getCustomer",
	            controller :'mycontroller',
	            templateUrl:"../Web/src/js/components/tableComponent/table.html"
	        });
	        $urlRouterProvider.otherwise("/index");
	    }
	]);*/

	/*
	scm_web.config(function ($stateProvider, $urlRouterProvider) {
	    $urlRouterProvider.when("", "/index");
	    $stateProvider.state("index", {
	        url: "/index",
	        views: {
	            "": {
	                templateUrl:"../Web/src/js/components/tableComponent/hello.html"
	            },
	            "hello": {
	                controller:'hellowcontroller',
	                templateUrl:"../Web/src/js/components/tableComponent/hello.html"
	            },
	            "getCustomer": {
	                controller :'mycontroller',
	                templateUrl:"../Web/src/js/components/tableComponent/table.html"
	            }
	        }
	    })
	});
	scm_web.controller('mycontroller',function($scope,$stateParams){
	    $scope.title='Tom' ;

	});
	scm_web.controller('hellowcontroller',function($scope,$stateParams){
	    $scope.title='hello' ;

	});*/
	/**
	 * 主页面的组件配置
	 */
	scm_web.component('app', _index2.default);

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(5);
	module.exports = 'ui.select';


/***/ },
/* 5 */
/***/ function(module, exports) {

	/*!
	 * ui-select
	 * http://github.com/angular-ui/ui-select
	 * Version: 0.19.5 - 2016-10-24T23:13:59.434Z
	 * License: MIT
	 */


	(function () { 
	"use strict";
	var KEY = {
	    TAB: 9,
	    ENTER: 13,
	    ESC: 27,
	    SPACE: 32,
	    LEFT: 37,
	    UP: 38,
	    RIGHT: 39,
	    DOWN: 40,
	    SHIFT: 16,
	    CTRL: 17,
	    ALT: 18,
	    PAGE_UP: 33,
	    PAGE_DOWN: 34,
	    HOME: 36,
	    END: 35,
	    BACKSPACE: 8,
	    DELETE: 46,
	    COMMAND: 91,

	    MAP: { 91 : "COMMAND", 8 : "BACKSPACE" , 9 : "TAB" , 13 : "ENTER" , 16 : "SHIFT" , 17 : "CTRL" , 18 : "ALT" , 19 : "PAUSEBREAK" , 20 : "CAPSLOCK" , 27 : "ESC" , 32 : "SPACE" , 33 : "PAGE_UP", 34 : "PAGE_DOWN" , 35 : "END" , 36 : "HOME" , 37 : "LEFT" , 38 : "UP" , 39 : "RIGHT" , 40 : "DOWN" , 43 : "+" , 44 : "PRINTSCREEN" , 45 : "INSERT" , 46 : "DELETE", 48 : "0" , 49 : "1" , 50 : "2" , 51 : "3" , 52 : "4" , 53 : "5" , 54 : "6" , 55 : "7" , 56 : "8" , 57 : "9" , 59 : ";", 61 : "=" , 65 : "A" , 66 : "B" , 67 : "C" , 68 : "D" , 69 : "E" , 70 : "F" , 71 : "G" , 72 : "H" , 73 : "I" , 74 : "J" , 75 : "K" , 76 : "L", 77 : "M" , 78 : "N" , 79 : "O" , 80 : "P" , 81 : "Q" , 82 : "R" , 83 : "S" , 84 : "T" , 85 : "U" , 86 : "V" , 87 : "W" , 88 : "X" , 89 : "Y" , 90 : "Z", 96 : "0" , 97 : "1" , 98 : "2" , 99 : "3" , 100 : "4" , 101 : "5" , 102 : "6" , 103 : "7" , 104 : "8" , 105 : "9", 106 : "*" , 107 : "+" , 109 : "-" , 110 : "." , 111 : "/", 112 : "F1" , 113 : "F2" , 114 : "F3" , 115 : "F4" , 116 : "F5" , 117 : "F6" , 118 : "F7" , 119 : "F8" , 120 : "F9" , 121 : "F10" , 122 : "F11" , 123 : "F12", 144 : "NUMLOCK" , 145 : "SCROLLLOCK" , 186 : ";" , 187 : "=" , 188 : "," , 189 : "-" , 190 : "." , 191 : "/" , 192 : "`" , 219 : "[" , 220 : "\\" , 221 : "]" , 222 : "'"
	    },

	    isControl: function (e) {
	        var k = e.which;
	        switch (k) {
	        case KEY.COMMAND:
	        case KEY.SHIFT:
	        case KEY.CTRL:
	        case KEY.ALT:
	            return true;
	        }

	        if (e.metaKey || e.ctrlKey || e.altKey) return true;

	        return false;
	    },
	    isFunctionKey: function (k) {
	        k = k.which ? k.which : k;
	        return k >= 112 && k <= 123;
	    },
	    isVerticalMovement: function (k){
	      return ~[KEY.UP, KEY.DOWN].indexOf(k);
	    },
	    isHorizontalMovement: function (k){
	      return ~[KEY.LEFT,KEY.RIGHT,KEY.BACKSPACE,KEY.DELETE].indexOf(k);
	    },
	    toSeparator: function (k) {
	      var sep = {ENTER:"\n",TAB:"\t",SPACE:" "}[k];
	      if (sep) return sep;
	      // return undefined for special keys other than enter, tab or space.
	      // no way to use them to cut strings.
	      return KEY[k] ? undefined : k;
	    }
	  };

	/**
	 * Add querySelectorAll() to jqLite.
	 *
	 * jqLite find() is limited to lookups by tag name.
	 * TODO This will change with future versions of AngularJS, to be removed when this happens
	 *
	 * See jqLite.find - why not use querySelectorAll? https://github.com/angular/angular.js/issues/3586
	 * See feat(jqLite): use querySelectorAll instead of getElementsByTagName in jqLite.find https://github.com/angular/angular.js/pull/3598
	 */
	if (angular.element.prototype.querySelectorAll === undefined) {
	  angular.element.prototype.querySelectorAll = function(selector) {
	    return angular.element(this[0].querySelectorAll(selector));
	  };
	}

	/**
	 * Add closest() to jqLite.
	 */
	if (angular.element.prototype.closest === undefined) {
	  angular.element.prototype.closest = function( selector) {
	    var elem = this[0];
	    var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;

	    while (elem) {
	      if (matchesSelector.bind(elem)(selector)) {
	        return elem;
	      } else {
	        elem = elem.parentElement;
	      }
	    }
	    return false;
	  };
	}

	var latestId = 0;

	var uis = angular.module('ui.select', [])

	.constant('uiSelectConfig', {
	  theme: 'bootstrap',
	  searchEnabled: true,
	  sortable: false,
	  placeholder: '', // Empty by default, like HTML tag <select>
	  refreshDelay: 1000, // In milliseconds
	  closeOnSelect: true,
	  skipFocusser: false,
	  dropdownPosition: 'auto',
	  removeSelected: true,
	  resetSearchInput: true,
	  generateId: function() {
	    return latestId++;
	  },
	  appendToBody: false,
	  spinnerEnabled: false,
	  spinnerClass: 'glyphicon-refresh ui-select-spin'
	})

	// See Rename minErr and make it accessible from outside https://github.com/angular/angular.js/issues/6913
	.service('uiSelectMinErr', function() {
	  var minErr = angular.$$minErr('ui.select');
	  return function() {
	    var error = minErr.apply(this, arguments);
	    var message = error.message.replace(new RegExp('\nhttp://errors.angularjs.org/.*'), '');
	    return new Error(message);
	  };
	})

	// Recreates old behavior of ng-transclude. Used internally.
	.directive('uisTranscludeAppend', function () {
	  return {
	    link: function (scope, element, attrs, ctrl, transclude) {
	        transclude(scope, function (clone) {
	          element.append(clone);
	        });
	      }
	    };
	})

	/**
	 * Highlights text that matches $select.search.
	 *
	 * Taken from AngularUI Bootstrap Typeahead
	 * See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L340
	 */
	.filter('highlight', function() {
	  function escapeRegexp(queryToEscape) {
	    return ('' + queryToEscape).replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
	  }

	  return function(matchItem, query) {
	    return query && matchItem ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<span class="ui-select-highlight">$&</span>') : matchItem;
	  };
	})

	/**
	 * A read-only equivalent of jQuery's offset function: http://api.jquery.com/offset/
	 *
	 * Taken from AngularUI Bootstrap Position:
	 * See https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js#L70
	 */
	.factory('uisOffset',
	  ['$document', '$window',
	  function ($document, $window) {

	  return function(element) {
	    var boundingClientRect = element[0].getBoundingClientRect();
	    return {
	      width: boundingClientRect.width || element.prop('offsetWidth'),
	      height: boundingClientRect.height || element.prop('offsetHeight'),
	      top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
	      left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
	    };
	  };
	}]);

	uis.directive('uiSelectChoices',
	  ['uiSelectConfig', 'uisRepeatParser', 'uiSelectMinErr', '$compile', '$window',
	  function(uiSelectConfig, RepeatParser, uiSelectMinErr, $compile, $window) {

	  return {
	    restrict: 'EA',
	    require: '^uiSelect',
	    replace: true,
	    transclude: true,
	    templateUrl: function(tElement) {
	      // Needed so the uiSelect can detect the transcluded content
	      tElement.addClass('ui-select-choices');

	      // Gets theme attribute from parent (ui-select)
	      var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
	      return theme + '/choices.tpl.html';
	    },

	    compile: function(tElement, tAttrs) {

	      if (!tAttrs.repeat) throw uiSelectMinErr('repeat', "Expected 'repeat' expression.");

	      // var repeat = RepeatParser.parse(attrs.repeat);
	      var groupByExp = tAttrs.groupBy;
	      var groupFilterExp = tAttrs.groupFilter;

	      if (groupByExp) {
	        var groups = tElement.querySelectorAll('.ui-select-choices-group');
	        if (groups.length !== 1) throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-group but got '{0}'.", groups.length);
	        groups.attr('ng-repeat', RepeatParser.getGroupNgRepeatExpression());
	      }

	      var parserResult = RepeatParser.parse(tAttrs.repeat);

	      var choices = tElement.querySelectorAll('.ui-select-choices-row');
	      if (choices.length !== 1) {
	        throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row but got '{0}'.", choices.length);
	      }

	      choices.attr('ng-repeat', parserResult.repeatExpression(groupByExp))
	             .attr('ng-if', '$select.open'); //Prevent unnecessary watches when dropdown is closed
	    

	      var rowsInner = tElement.querySelectorAll('.ui-select-choices-row-inner');
	      if (rowsInner.length !== 1) {
	        throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row-inner but got '{0}'.", rowsInner.length);
	      }
	      rowsInner.attr('uis-transclude-append', ''); //Adding uisTranscludeAppend directive to row element after choices element has ngRepeat

	      // If IE8 then need to target rowsInner to apply the ng-click attr as choices will not capture the event. 
	      var clickTarget = $window.document.addEventListener ? choices : rowsInner;
	      clickTarget.attr('ng-click', '$select.select(' + parserResult.itemName + ',$select.skipFocusser,$event)');
	      
	      return function link(scope, element, attrs, $select) {

	       
	        $select.parseRepeatAttr(attrs.repeat, groupByExp, groupFilterExp); //Result ready at $select.parserResult

	        $select.disableChoiceExpression = attrs.uiDisableChoice;
	        $select.onHighlightCallback = attrs.onHighlight;

	        $select.dropdownPosition = attrs.position ? attrs.position.toLowerCase() : uiSelectConfig.dropdownPosition;        

	        scope.$on('$destroy', function() {
	          choices.remove();
	        });

	        scope.$watch('$select.search', function(newValue) {
	          if(newValue && !$select.open && $select.multiple) $select.activate(false, true);
	          $select.activeIndex = $select.tagging.isActivated ? -1 : 0;
	          if (!attrs.minimumInputLength || $select.search.length >= attrs.minimumInputLength) {
	            $select.refresh(attrs.refresh);
	          } else {
	            $select.items = [];
	          }
	        });

	        attrs.$observe('refreshDelay', function() {
	          // $eval() is needed otherwise we get a string instead of a number
	          var refreshDelay = scope.$eval(attrs.refreshDelay);
	          $select.refreshDelay = refreshDelay !== undefined ? refreshDelay : uiSelectConfig.refreshDelay;
	        });

	        scope.$watch('$select.open', function(open) {
	          if (open) {
	            tElement.attr('role', 'listbox');
	          } else {
	            tElement.removeAttr('role');
	          }
	        });
	      };
	    }
	  };
	}]);

	/**
	 * Contains ui-select "intelligence".
	 *
	 * The goal is to limit dependency on the DOM whenever possible and
	 * put as much logic in the controller (instead of the link functions) as possible so it can be easily tested.
	 */
	uis.controller('uiSelectCtrl',
	  ['$scope', '$element', '$timeout', '$filter', '$$uisDebounce', 'uisRepeatParser', 'uiSelectMinErr', 'uiSelectConfig', '$parse', '$injector', '$window',
	  function($scope, $element, $timeout, $filter, $$uisDebounce, RepeatParser, uiSelectMinErr, uiSelectConfig, $parse, $injector, $window) {

	  var ctrl = this;

	  var EMPTY_SEARCH = '';

	  ctrl.placeholder = uiSelectConfig.placeholder;
	  ctrl.searchEnabled = uiSelectConfig.searchEnabled;
	  ctrl.sortable = uiSelectConfig.sortable;
	  ctrl.refreshDelay = uiSelectConfig.refreshDelay;
	  ctrl.paste = uiSelectConfig.paste;
	  ctrl.resetSearchInput = uiSelectConfig.resetSearchInput;
	  ctrl.refreshing = false;
	  ctrl.spinnerEnabled = uiSelectConfig.spinnerEnabled;
	  ctrl.spinnerClass = uiSelectConfig.spinnerClass;

	  ctrl.removeSelected = uiSelectConfig.removeSelected; //If selected item(s) should be removed from dropdown list
	  ctrl.closeOnSelect = true; //Initialized inside uiSelect directive link function
	  ctrl.skipFocusser = false; //Set to true to avoid returning focus to ctrl when item is selected
	  ctrl.search = EMPTY_SEARCH;

	  ctrl.activeIndex = 0; //Dropdown of choices
	  ctrl.items = []; //All available choices

	  ctrl.open = false;
	  ctrl.focus = false;
	  ctrl.disabled = false;
	  ctrl.selected = undefined;

	  ctrl.dropdownPosition = 'auto';

	  ctrl.focusser = undefined; //Reference to input element used to handle focus events
	  ctrl.multiple = undefined; // Initialized inside uiSelect directive link function
	  ctrl.disableChoiceExpression = undefined; // Initialized inside uiSelectChoices directive link function
	  ctrl.tagging = {isActivated: false, fct: undefined};
	  ctrl.taggingTokens = {isActivated: false, tokens: undefined};
	  ctrl.lockChoiceExpression = undefined; // Initialized inside uiSelectMatch directive link function
	  ctrl.clickTriggeredSelect = false;
	  ctrl.$filter = $filter;
	  ctrl.$element = $element;

	  // Use $injector to check for $animate and store a reference to it
	  ctrl.$animate = (function () {
	    try {
	      return $injector.get('$animate');
	    } catch (err) {
	      // $animate does not exist
	      return null;
	    }
	  })();

	  ctrl.searchInput = $element.querySelectorAll('input.ui-select-search');
	  if (ctrl.searchInput.length !== 1) {
	    throw uiSelectMinErr('searchInput', "Expected 1 input.ui-select-search but got '{0}'.", ctrl.searchInput.length);
	  }

	  ctrl.isEmpty = function() {
	    return angular.isUndefined(ctrl.selected) || ctrl.selected === null || ctrl.selected === '' || (ctrl.multiple && ctrl.selected.length === 0);
	  };

	  function _findIndex(collection, predicate, thisArg){
	    if (collection.findIndex){
	      return collection.findIndex(predicate, thisArg);
	    } else {
	      var list = Object(collection);
	      var length = list.length >>> 0;
	      var value;

	      for (var i = 0; i < length; i++) {
	        value = list[i];
	        if (predicate.call(thisArg, value, i, list)) {
	          return i;
	        }
	      }
	      return -1;
	    }
	  }

	  // Most of the time the user does not want to empty the search input when in typeahead mode
	  function _resetSearchInput() {
	    if (ctrl.resetSearchInput) {
	      ctrl.search = EMPTY_SEARCH;
	      //reset activeIndex
	      if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {
	        ctrl.activeIndex = _findIndex(ctrl.items, function(item){
	          return angular.equals(this, item);
	        }, ctrl.selected);
	      }
	    }
	  }

	    function _groupsFilter(groups, groupNames) {
	      var i, j, result = [];
	      for(i = 0; i < groupNames.length ;i++){
	        for(j = 0; j < groups.length ;j++){
	          if(groups[j].name == [groupNames[i]]){
	            result.push(groups[j]);
	          }
	        }
	      }
	      return result;
	    }

	  // When the user clicks on ui-select, displays the dropdown list
	  ctrl.activate = function(initSearchValue, avoidReset) {
	    if (!ctrl.disabled  && !ctrl.open) {
	      if(!avoidReset) _resetSearchInput();

	      $scope.$broadcast('uis:activate');

	      ctrl.open = true;

	      ctrl.activeIndex = ctrl.activeIndex >= ctrl.items.length ? 0 : ctrl.activeIndex;

	      // ensure that the index is set to zero for tagging variants
	      // that where first option is auto-selected
	      if ( ctrl.activeIndex === -1 && ctrl.taggingLabel !== false ) {
	        ctrl.activeIndex = 0;
	      }

	      var container = $element.querySelectorAll('.ui-select-choices-content');
	      var searchInput = $element.querySelectorAll('.ui-select-search');
	      if (ctrl.$animate && ctrl.$animate.on && ctrl.$animate.enabled(container[0])) {
	        var animateHandler = function(elem, phase) {
	          if (phase === 'start' && ctrl.items.length === 0) {
	            // Only focus input after the animation has finished
	            ctrl.$animate.off('removeClass', searchInput[0], animateHandler);
	            $timeout(function () {
	              ctrl.focusSearchInput(initSearchValue);
	            });
	          } else if (phase === 'close') {
	            // Only focus input after the animation has finished
	            ctrl.$animate.off('enter', container[0], animateHandler);
	            $timeout(function () {
	              ctrl.focusSearchInput(initSearchValue);
	            });
	          }
	        };

	        if (ctrl.items.length > 0) {
	          ctrl.$animate.on('enter', container[0], animateHandler);
	        } else {
	          ctrl.$animate.on('removeClass', searchInput[0], animateHandler);
	        }
	      } else {
	        $timeout(function () {
	          ctrl.focusSearchInput(initSearchValue);
	          if(!ctrl.tagging.isActivated && ctrl.items.length > 1) {
	            _ensureHighlightVisible();
	          }
	        });
	      }
	    }
	    else if (ctrl.open && !ctrl.searchEnabled) {
	      // Close the selection if we don't have search enabled, and we click on the select again
	      ctrl.close();
	    }
	  };

	  ctrl.focusSearchInput = function (initSearchValue) {
	    ctrl.search = initSearchValue || ctrl.search;
	    ctrl.searchInput[0].focus();
	  };

	  ctrl.findGroupByName = function(name) {
	    return ctrl.groups && ctrl.groups.filter(function(group) {
	      return group.name === name;
	    })[0];
	  };

	  ctrl.parseRepeatAttr = function(repeatAttr, groupByExp, groupFilterExp) {
	    function updateGroups(items) {
	      var groupFn = $scope.$eval(groupByExp);
	      ctrl.groups = [];
	      angular.forEach(items, function(item) {
	        var groupName = angular.isFunction(groupFn) ? groupFn(item) : item[groupFn];
	        var group = ctrl.findGroupByName(groupName);
	        if(group) {
	          group.items.push(item);
	        }
	        else {
	          ctrl.groups.push({name: groupName, items: [item]});
	        }
	      });
	      if(groupFilterExp){
	        var groupFilterFn = $scope.$eval(groupFilterExp);
	        if( angular.isFunction(groupFilterFn)){
	          ctrl.groups = groupFilterFn(ctrl.groups);
	        } else if(angular.isArray(groupFilterFn)){
	          ctrl.groups = _groupsFilter(ctrl.groups, groupFilterFn);
	        }
	      }
	      ctrl.items = [];
	      ctrl.groups.forEach(function(group) {
	        ctrl.items = ctrl.items.concat(group.items);
	      });
	    }

	    function setPlainItems(items) {
	      ctrl.items = items;
	    }

	    ctrl.setItemsFn = groupByExp ? updateGroups : setPlainItems;

	    ctrl.parserResult = RepeatParser.parse(repeatAttr);

	    ctrl.isGrouped = !!groupByExp;
	    ctrl.itemProperty = ctrl.parserResult.itemName;

	    //If collection is an Object, convert it to Array

	    var originalSource = ctrl.parserResult.source;

	    //When an object is used as source, we better create an array and use it as 'source'
	    var createArrayFromObject = function(){
	      var origSrc = originalSource($scope);
	      $scope.$uisSource = Object.keys(origSrc).map(function(v){
	        var result = {};
	        result[ctrl.parserResult.keyName] = v;
	        result.value = origSrc[v];
	        return result;
	      });
	    };

	    if (ctrl.parserResult.keyName){ // Check for (key,value) syntax
	      createArrayFromObject();
	      ctrl.parserResult.source = $parse('$uisSource' + ctrl.parserResult.filters);
	      $scope.$watch(originalSource, function(newVal, oldVal){
	        if (newVal !== oldVal) createArrayFromObject();
	      }, true);
	    }

	    ctrl.refreshItems = function (data){
	      data = data || ctrl.parserResult.source($scope);
	      var selectedItems = ctrl.selected;
	      //TODO should implement for single mode removeSelected
	      if (ctrl.isEmpty() || (angular.isArray(selectedItems) && !selectedItems.length) || !ctrl.multiple || !ctrl.removeSelected) {
	        ctrl.setItemsFn(data);
	      }else{
	        if ( data !== undefined && data !== null ) {
	          var filteredItems = data.filter(function(i) {
	            return angular.isArray(selectedItems) ? selectedItems.every(function(selectedItem) {
	              return !angular.equals(i, selectedItem);
	            }) : !angular.equals(i, selectedItems);
	          });
	          ctrl.setItemsFn(filteredItems);
	        }
	      }
	      if (ctrl.dropdownPosition === 'auto' || ctrl.dropdownPosition === 'up'){
	        $scope.calculateDropdownPos();
	      }

	      $scope.$broadcast('uis:refresh');
	    };

	    // See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L259
	    $scope.$watchCollection(ctrl.parserResult.source, function(items) {
	      if (items === undefined || items === null) {
	        // If the user specifies undefined or null => reset the collection
	        // Special case: items can be undefined if the user did not initialized the collection on the scope
	        // i.e $scope.addresses = [] is missing
	        ctrl.items = [];
	      } else {
	        if (!angular.isArray(items)) {
	          throw uiSelectMinErr('items', "Expected an array but got '{0}'.", items);
	        } else {
	          //Remove already selected items (ex: while searching)
	          //TODO Should add a test
	          ctrl.refreshItems(items);

	          //update the view value with fresh data from items, if there is a valid model value
	          if(angular.isDefined(ctrl.ngModel.$modelValue)) {
	            ctrl.ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
	          }
	        }
	      }
	    });

	  };

	  var _refreshDelayPromise;

	  /**
	   * Typeahead mode: lets the user refresh the collection using his own function.
	   *
	   * See Expose $select.search for external / remote filtering https://github.com/angular-ui/ui-select/pull/31
	   */
	  ctrl.refresh = function(refreshAttr) {
	    if (refreshAttr !== undefined) {
	      // Debounce
	      // See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L155
	      // FYI AngularStrap typeahead does not have debouncing: https://github.com/mgcrea/angular-strap/blob/v2.0.0-rc.4/src/typeahead/typeahead.js#L177
	      if (_refreshDelayPromise) {
	        $timeout.cancel(_refreshDelayPromise);
	      }
	      _refreshDelayPromise = $timeout(function() {
	        var refreshPromise =  $scope.$eval(refreshAttr);
	        if (refreshPromise && angular.isFunction(refreshPromise.then) && !ctrl.refreshing) {
	          ctrl.refreshing = true;
	          refreshPromise.then(function() {
	            ctrl.refreshing = false;
	          });
	      }}, ctrl.refreshDelay);
	    }
	  };

	  ctrl.isActive = function(itemScope) {
	    if ( !ctrl.open ) {
	      return false;
	    }
	    var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);
	    var isActive =  itemIndex == ctrl.activeIndex;

	    if ( !isActive || itemIndex < 0 ) {
	      return false;
	    }

	    if (isActive && !angular.isUndefined(ctrl.onHighlightCallback)) {
	      itemScope.$eval(ctrl.onHighlightCallback);
	    }

	    return isActive;
	  };

	  var _isItemSelected = function (item) {
	    return (ctrl.selected && angular.isArray(ctrl.selected) &&
	        ctrl.selected.filter(function (selection) { return angular.equals(selection, item); }).length > 0);
	  };

	  var disabledItems = [];

	  function _updateItemDisabled(item, isDisabled) {
	    var disabledItemIndex = disabledItems.indexOf(item);
	    if (isDisabled && disabledItemIndex === -1) {
	      disabledItems.push(item);
	    }

	    if (!isDisabled && disabledItemIndex > -1) {
	      disabledItems.splice(disabledItemIndex, 1);
	    }
	  }

	  function _isItemDisabled(item) {
	    return disabledItems.indexOf(item) > -1;
	  }

	  ctrl.isDisabled = function(itemScope) {

	    if (!ctrl.open) return;

	    var item = itemScope[ctrl.itemProperty];
	    var itemIndex = ctrl.items.indexOf(item);
	    var isDisabled = false;

	    if (itemIndex >= 0 && (angular.isDefined(ctrl.disableChoiceExpression) || ctrl.multiple)) {

	      if (item.isTag) return false;

	      if (ctrl.multiple) {
	        isDisabled = _isItemSelected(item);
	      }

	      if (!isDisabled && angular.isDefined(ctrl.disableChoiceExpression)) {
	        isDisabled = !!(itemScope.$eval(ctrl.disableChoiceExpression));
	      }

	      _updateItemDisabled(item, isDisabled);
	    }

	    return isDisabled;
	  };


	  // When the user selects an item with ENTER or clicks the dropdown
	  ctrl.select = function(item, skipFocusser, $event) {
	    if (item === undefined || !_isItemDisabled(item)) {

	      if ( ! ctrl.items && ! ctrl.search && ! ctrl.tagging.isActivated) return;

	      if (!item || !_isItemDisabled(item)) {
	        // if click is made on existing item, prevent from tagging, ctrl.search does not matter
	        ctrl.clickTriggeredSelect = false;
	        if($event && ($event.type === 'click' || $event.type === 'touchend') && item)
	          ctrl.clickTriggeredSelect = true;

	        if(ctrl.tagging.isActivated && ctrl.clickTriggeredSelect === false) {
	          // if taggingLabel is disabled and item is undefined we pull from ctrl.search
	          if ( ctrl.taggingLabel === false ) {
	            if ( ctrl.activeIndex < 0 ) {
	              if (item === undefined) {
	                item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search;
	              }
	              if (!item || angular.equals( ctrl.items[0], item ) ) {
	                return;
	              }
	            } else {
	              // keyboard nav happened first, user selected from dropdown
	              item = ctrl.items[ctrl.activeIndex];
	            }
	          } else {
	            // tagging always operates at index zero, taggingLabel === false pushes
	            // the ctrl.search value without having it injected
	            if ( ctrl.activeIndex === 0 ) {
	              // ctrl.tagging pushes items to ctrl.items, so we only have empty val
	              // for `item` if it is a detected duplicate
	              if ( item === undefined ) return;

	              // create new item on the fly if we don't already have one;
	              // use tagging function if we have one
	              if ( ctrl.tagging.fct !== undefined && typeof item === 'string' ) {
	                item = ctrl.tagging.fct(item);
	                if (!item) return;
	              // if item type is 'string', apply the tagging label
	              } else if ( typeof item === 'string' ) {
	                // trim the trailing space
	                item = item.replace(ctrl.taggingLabel,'').trim();
	              }
	            }
	          }
	          // search ctrl.selected for dupes potentially caused by tagging and return early if found
	          if (_isItemSelected(item)) {
	            ctrl.close(skipFocusser);
	            return;
	          }
	        }        
	        _resetSearchInput();
	        $scope.$broadcast('uis:select', item);

	        var locals = {};
	        locals[ctrl.parserResult.itemName] = item;

	        $timeout(function(){
	          ctrl.onSelectCallback($scope, {
	            $item: item,
	            $model: ctrl.parserResult.modelMapper($scope, locals)
	          });
	        });

	        if (ctrl.closeOnSelect) {
	          ctrl.close(skipFocusser);
	        }
	      }
	    }
	  };

	  // Closes the dropdown
	  ctrl.close = function(skipFocusser) {
	    if (!ctrl.open) return;
	    if (ctrl.ngModel && ctrl.ngModel.$setTouched) ctrl.ngModel.$setTouched();
	    ctrl.open = false;
	    _resetSearchInput();
	    $scope.$broadcast('uis:close', skipFocusser);

	  };

	  ctrl.setFocus = function(){
	    if (!ctrl.focus) ctrl.focusInput[0].focus();
	  };

	  ctrl.clear = function($event) {
	    ctrl.select(undefined);
	    $event.stopPropagation();
	    $timeout(function() {
	      ctrl.focusser[0].focus();
	    }, 0, false);
	  };

	  // Toggle dropdown
	  ctrl.toggle = function(e) {
	    if (ctrl.open) {
	      ctrl.close();
	      e.preventDefault();
	      e.stopPropagation();
	    } else {
	      ctrl.activate();
	    }
	  };

	  // Set default function for locked choices - avoids unnecessary
	  // logic if functionality is not being used
	  ctrl.isLocked = function () {
	    return false;
	  };

	  $scope.$watch(function () {
	    return angular.isDefined(ctrl.lockChoiceExpression) && ctrl.lockChoiceExpression !== "";
	  }, _initaliseLockedChoices);

	  function _initaliseLockedChoices(doInitalise) {
	    if(!doInitalise) return;

	    var lockedItems = [];

	    function _updateItemLocked(item, isLocked) {
	      var lockedItemIndex = lockedItems.indexOf(item);
	      if (isLocked && lockedItemIndex === -1) {
	        lockedItems.push(item);
	        }

	      if (!isLocked && lockedItemIndex > -1) {
	        lockedItems.splice(lockedItemIndex, 0);
	      }
	    }

	    function _isItemlocked(item) {
	      return lockedItems.indexOf(item) > -1;
	    }

	    ctrl.isLocked = function (itemScope, itemIndex) {
	      var isLocked = false,
	          item = ctrl.selected[itemIndex];

	      if(item) {
	        if (itemScope) {
	          isLocked = !!(itemScope.$eval(ctrl.lockChoiceExpression));
	          _updateItemLocked(item, isLocked);
	        } else {
	          isLocked = _isItemlocked(item);
	        }
	      }

	      return isLocked;
	    };
	  }


	  var sizeWatch = null;
	  var updaterScheduled = false;
	  ctrl.sizeSearchInput = function() {

	    var input = ctrl.searchInput[0],
	        container = ctrl.searchInput.parent().parent()[0],
	        calculateContainerWidth = function() {
	          // Return the container width only if the search input is visible
	          return container.clientWidth * !!input.offsetParent;
	        },
	        updateIfVisible = function(containerWidth) {
	          if (containerWidth === 0) {
	            return false;
	          }
	          var inputWidth = containerWidth - input.offsetLeft - 10;
	          if (inputWidth < 50) inputWidth = containerWidth;
	          ctrl.searchInput.css('width', inputWidth+'px');
	          return true;
	        };

	    ctrl.searchInput.css('width', '10px');
	    $timeout(function() { //Give tags time to render correctly
	      if (sizeWatch === null && !updateIfVisible(calculateContainerWidth())) {
	        sizeWatch = $scope.$watch(function() {
	          if (!updaterScheduled) {
	            updaterScheduled = true;
	            $scope.$$postDigest(function() {
	              updaterScheduled = false;
	              if (updateIfVisible(calculateContainerWidth())) {
	                sizeWatch();
	                sizeWatch = null;
	              }
	            });
	          }
	        }, angular.noop);
	      }
	    });
	  };

	  function _handleDropDownSelection(key) {
	    var processed = true;
	    switch (key) {
	      case KEY.DOWN:
	        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
	        else if (ctrl.activeIndex < ctrl.items.length - 1) { ctrl.activeIndex++; }
	        break;
	      case KEY.UP:
	        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
	        else if (ctrl.activeIndex > 0 || (ctrl.search.length === 0 && ctrl.tagging.isActivated && ctrl.activeIndex > -1)) { ctrl.activeIndex--; }
	        break;
	      case KEY.TAB:
	        if (!ctrl.multiple || ctrl.open) ctrl.select(ctrl.items[ctrl.activeIndex], true);
	        break;
	      case KEY.ENTER:
	        if(ctrl.open && (ctrl.tagging.isActivated || ctrl.activeIndex >= 0)){
	          ctrl.select(ctrl.items[ctrl.activeIndex], ctrl.skipFocusser); // Make sure at least one dropdown item is highlighted before adding if not in tagging mode
	        } else {
	          ctrl.activate(false, true); //In case its the search input in 'multiple' mode
	        }
	        break;
	      case KEY.ESC:
	        ctrl.close();
	        break;
	      default:
	        processed = false;
	    }
	    return processed;
	  }

	  // Bind to keyboard shortcuts
	  ctrl.searchInput.on('keydown', function(e) {

	    var key = e.which;

	    if (~[KEY.ENTER,KEY.ESC].indexOf(key)){
	      e.preventDefault();
	      e.stopPropagation();
	    }

	    $scope.$apply(function() {

	      var tagged = false;

	      if (ctrl.items.length > 0 || ctrl.tagging.isActivated) {
	        if(!_handleDropDownSelection(key) && !ctrl.searchEnabled) {
	          e.preventDefault();
	          e.stopPropagation();
	        }
	        if ( ctrl.taggingTokens.isActivated ) {
	          for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {
	            if ( ctrl.taggingTokens.tokens[i] === KEY.MAP[e.keyCode] ) {
	              // make sure there is a new value to push via tagging
	              if ( ctrl.search.length > 0 ) {
	                tagged = true;
	              }
	            }
	          }
	          if ( tagged ) {
	            $timeout(function() {
	              ctrl.searchInput.triggerHandler('tagged');
	              var newItem = ctrl.search.replace(KEY.MAP[e.keyCode],'').trim();
	              if ( ctrl.tagging.fct ) {
	                newItem = ctrl.tagging.fct( newItem );
	              }
	              if (newItem) ctrl.select(newItem, true);
	            });
	          }
	        }
	      }

	    });

	    if(KEY.isVerticalMovement(key) && ctrl.items.length > 0){
	      _ensureHighlightVisible();
	    }

	    if (key === KEY.ENTER || key === KEY.ESC) {
	      e.preventDefault();
	      e.stopPropagation();
	    }

	  });

	  ctrl.searchInput.on('paste', function (e) {
	    var data;

	    if (window.clipboardData && window.clipboardData.getData) { // IE
	      data = window.clipboardData.getData('Text');
	    } else {
	      data = (e.originalEvent || e).clipboardData.getData('text/plain');
	    }

	    // Prepend the current input field text to the paste buffer.
	    data = ctrl.search + data;

	    if (data && data.length > 0) {
	      // If tagging try to split by tokens and add items
	      if (ctrl.taggingTokens.isActivated) {
	        var items = [];
	        for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {  // split by first token that is contained in data
	          var separator = KEY.toSeparator(ctrl.taggingTokens.tokens[i]) || ctrl.taggingTokens.tokens[i];
	          if (data.indexOf(separator) > -1) {
	            items = data.split(separator);
	            break;  // only split by one token
	          }
	        }
	        if (items.length === 0) {
	          items = [data];
	        }
	        var oldsearch = ctrl.search;
	        angular.forEach(items, function (item) {
	          var newItem = ctrl.tagging.fct ? ctrl.tagging.fct(item) : item;
	          if (newItem) {
	            ctrl.select(newItem, true);
	          }
	        });
	        ctrl.search = oldsearch || EMPTY_SEARCH;
	        e.preventDefault();
	        e.stopPropagation();
	      } else if (ctrl.paste) {
	        ctrl.paste(data);
	        ctrl.search = EMPTY_SEARCH;
	        e.preventDefault();
	        e.stopPropagation();
	      }
	    }
	  });

	  ctrl.searchInput.on('tagged', function() {
	    $timeout(function() {
	      _resetSearchInput();
	    });
	  });

	  // See https://github.com/ivaynberg/select2/blob/3.4.6/select2.js#L1431
	  function _ensureHighlightVisible() {
	    var container = $element.querySelectorAll('.ui-select-choices-content');
	    var choices = container.querySelectorAll('.ui-select-choices-row');
	    if (choices.length < 1) {
	      throw uiSelectMinErr('choices', "Expected multiple .ui-select-choices-row but got '{0}'.", choices.length);
	    }

	    if (ctrl.activeIndex < 0) {
	      return;
	    }

	    var highlighted = choices[ctrl.activeIndex];
	    var posY = highlighted.offsetTop + highlighted.clientHeight - container[0].scrollTop;
	    var height = container[0].offsetHeight;

	    if (posY > height) {
	      container[0].scrollTop += posY - height;
	    } else if (posY < highlighted.clientHeight) {
	      if (ctrl.isGrouped && ctrl.activeIndex === 0)
	        container[0].scrollTop = 0; //To make group header visible when going all the way up
	      else
	        container[0].scrollTop -= highlighted.clientHeight - posY;
	    }
	  }

	  var onResize = $$uisDebounce(function() {
	    ctrl.sizeSearchInput();
	  }, 50);

	  angular.element($window).bind('resize', onResize);

	  $scope.$on('$destroy', function() {
	    ctrl.searchInput.off('keyup keydown tagged blur paste');
	    angular.element($window).off('resize', onResize);
	  });

	  $scope.$watch('$select.activeIndex', function(activeIndex) {
	    if (activeIndex)
	      $element.find('input').attr(
	        'aria-activedescendant',
	        'ui-select-choices-row-' + ctrl.generatedId + '-' + activeIndex);
	  });

	  $scope.$watch('$select.open', function(open) {
	    if (!open)
	      $element.find('input').removeAttr('aria-activedescendant');
	  });
	}]);

	uis.directive('uiSelect',
	  ['$document', 'uiSelectConfig', 'uiSelectMinErr', 'uisOffset', '$compile', '$parse', '$timeout',
	  function($document, uiSelectConfig, uiSelectMinErr, uisOffset, $compile, $parse, $timeout) {

	  return {
	    restrict: 'EA',
	    templateUrl: function(tElement, tAttrs) {
	      var theme = tAttrs.theme || uiSelectConfig.theme;
	      return theme + (angular.isDefined(tAttrs.multiple) ? '/select-multiple.tpl.html' : '/select.tpl.html');
	    },
	    replace: true,
	    transclude: true,
	    require: ['uiSelect', '^ngModel'],
	    scope: true,

	    controller: 'uiSelectCtrl',
	    controllerAs: '$select',
	    compile: function(tElement, tAttrs) {

	      // Allow setting ngClass on uiSelect
	      var match = /{(.*)}\s*{(.*)}/.exec(tAttrs.ngClass);
	      if(match) {
	        var combined = '{'+ match[1] +', '+ match[2] +'}';
	        tAttrs.ngClass = combined;
	        tElement.attr('ng-class', combined);
	      }

	      //Multiple or Single depending if multiple attribute presence
	      if (angular.isDefined(tAttrs.multiple))
	        tElement.append('<ui-select-multiple/>').removeAttr('multiple');
	      else
	        tElement.append('<ui-select-single/>');

	      if (tAttrs.inputId)
	        tElement.querySelectorAll('input.ui-select-search')[0].id = tAttrs.inputId;

	      return function(scope, element, attrs, ctrls, transcludeFn) {

	        var $select = ctrls[0];
	        var ngModel = ctrls[1];

	        $select.generatedId = uiSelectConfig.generateId();
	        $select.baseTitle = attrs.title || 'Select box';
	        $select.focusserTitle = $select.baseTitle + ' focus';
	        $select.focusserId = 'focusser-' + $select.generatedId;

	        $select.closeOnSelect = function() {
	          if (angular.isDefined(attrs.closeOnSelect)) {
	            return $parse(attrs.closeOnSelect)();
	          } else {
	            return uiSelectConfig.closeOnSelect;
	          }
	        }();

	        scope.$watch('skipFocusser', function() {
	            var skipFocusser = scope.$eval(attrs.skipFocusser);
	            $select.skipFocusser = skipFocusser !== undefined ? skipFocusser : uiSelectConfig.skipFocusser;
	        });

	        $select.onSelectCallback = $parse(attrs.onSelect);
	        $select.onRemoveCallback = $parse(attrs.onRemove);

	        //Set reference to ngModel from uiSelectCtrl
	        $select.ngModel = ngModel;

	        $select.choiceGrouped = function(group){
	          return $select.isGrouped && group && group.name;
	        };

	        if(attrs.tabindex){
	          attrs.$observe('tabindex', function(value) {
	            $select.focusInput.attr('tabindex', value);
	            element.removeAttr('tabindex');
	          });
	        }

	        scope.$watch(function () { return scope.$eval(attrs.searchEnabled); }, function(newVal) {
	          $select.searchEnabled = newVal !== undefined ? newVal : uiSelectConfig.searchEnabled;
	        });

	        scope.$watch('sortable', function() {
	            var sortable = scope.$eval(attrs.sortable);
	            $select.sortable = sortable !== undefined ? sortable : uiSelectConfig.sortable;
	        });

	        attrs.$observe('limit', function() {
	          //Limit the number of selections allowed
	          $select.limit = (angular.isDefined(attrs.limit)) ? parseInt(attrs.limit, 10) : undefined;
	        });

	        scope.$watch('removeSelected', function() {
	            var removeSelected = scope.$eval(attrs.removeSelected);
	            $select.removeSelected = removeSelected !== undefined ? removeSelected : uiSelectConfig.removeSelected;
	        });

	        attrs.$observe('disabled', function() {
	          // No need to use $eval() (thanks to ng-disabled) since we already get a boolean instead of a string
	          $select.disabled = attrs.disabled !== undefined ? attrs.disabled : false;
	        });

	        attrs.$observe('resetSearchInput', function() {
	          // $eval() is needed otherwise we get a string instead of a boolean
	          var resetSearchInput = scope.$eval(attrs.resetSearchInput);
	          $select.resetSearchInput = resetSearchInput !== undefined ? resetSearchInput : true;
	        });

	        attrs.$observe('paste', function() {
	          $select.paste = scope.$eval(attrs.paste);
	        });

	        attrs.$observe('tagging', function() {
	          if(attrs.tagging !== undefined)
	          {
	            // $eval() is needed otherwise we get a string instead of a boolean
	            var taggingEval = scope.$eval(attrs.tagging);
	            $select.tagging = {isActivated: true, fct: taggingEval !== true ? taggingEval : undefined};
	          }
	          else
	          {
	            $select.tagging = {isActivated: false, fct: undefined};
	          }
	        });

	        attrs.$observe('taggingLabel', function() {
	          if(attrs.tagging !== undefined )
	          {
	            // check eval for FALSE, in this case, we disable the labels
	            // associated with tagging
	            if ( attrs.taggingLabel === 'false' ) {
	              $select.taggingLabel = false;
	            }
	            else
	            {
	              $select.taggingLabel = attrs.taggingLabel !== undefined ? attrs.taggingLabel : '(new)';
	            }
	          }
	        });

	        attrs.$observe('taggingTokens', function() {
	          if (attrs.tagging !== undefined) {
	            var tokens = attrs.taggingTokens !== undefined ? attrs.taggingTokens.split('|') : [',','ENTER'];
	            $select.taggingTokens = {isActivated: true, tokens: tokens };
	          }
	        });

	        attrs.$observe('spinnerEnabled', function() {
	          // $eval() is needed otherwise we get a string instead of a boolean
	          var spinnerEnabled = scope.$eval(attrs.spinnerEnabled);
	          $select.spinnerEnabled = spinnerEnabled !== undefined ? spinnerEnabled : uiSelectConfig.spinnerEnabled;
	        });

	        attrs.$observe('spinnerClass', function() {
	          var spinnerClass = attrs.spinnerClass;
	          $select.spinnerClass = spinnerClass !== undefined ? attrs.spinnerClass : uiSelectConfig.spinnerClass;
	        });

	        //Automatically gets focus when loaded
	        if (angular.isDefined(attrs.autofocus)){
	          $timeout(function(){
	            $select.setFocus();
	          });
	        }

	        //Gets focus based on scope event name (e.g. focus-on='SomeEventName')
	        if (angular.isDefined(attrs.focusOn)){
	          scope.$on(attrs.focusOn, function() {
	              $timeout(function(){
	                $select.setFocus();
	              });
	          });
	        }

	        function onDocumentClick(e) {
	          if (!$select.open) return; //Skip it if dropdown is close

	          var contains = false;

	          if (window.jQuery) {
	            // Firefox 3.6 does not support element.contains()
	            // See Node.contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains
	            contains = window.jQuery.contains(element[0], e.target);
	          } else {
	            contains = element[0].contains(e.target);
	          }

	          if (!contains && !$select.clickTriggeredSelect) {
	            var skipFocusser;
	            if (!$select.skipFocusser) {
	              //Will lose focus only with certain targets
	              var focusableControls = ['input','button','textarea','select'];
	              var targetController = angular.element(e.target).controller('uiSelect'); //To check if target is other ui-select
	              skipFocusser = targetController && targetController !== $select; //To check if target is other ui-select
	              if (!skipFocusser) skipFocusser =  ~focusableControls.indexOf(e.target.tagName.toLowerCase()); //Check if target is input, button or textarea
	            } else {
	              skipFocusser = true;
	            }
	            $select.close(skipFocusser);
	            scope.$digest();
	          }
	          $select.clickTriggeredSelect = false;
	        }

	        // See Click everywhere but here event http://stackoverflow.com/questions/12931369
	        $document.on('click', onDocumentClick);

	        scope.$on('$destroy', function() {
	          $document.off('click', onDocumentClick);
	        });

	        // Move transcluded elements to their correct position in main template
	        transcludeFn(scope, function(clone) {
	          // See Transclude in AngularJS http://blog.omkarpatil.com/2012/11/transclude-in-angularjs.html

	          // One day jqLite will be replaced by jQuery and we will be able to write:
	          // var transcludedElement = clone.filter('.my-class')
	          // instead of creating a hackish DOM element:
	          var transcluded = angular.element('<div>').append(clone);

	          var transcludedMatch = transcluded.querySelectorAll('.ui-select-match');
	          transcludedMatch.removeAttr('ui-select-match'); //To avoid loop in case directive as attr
	          transcludedMatch.removeAttr('data-ui-select-match'); // Properly handle HTML5 data-attributes
	          if (transcludedMatch.length !== 1) {
	            throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-match but got '{0}'.", transcludedMatch.length);
	          }
	          element.querySelectorAll('.ui-select-match').replaceWith(transcludedMatch);

	          var transcludedChoices = transcluded.querySelectorAll('.ui-select-choices');
	          transcludedChoices.removeAttr('ui-select-choices'); //To avoid loop in case directive as attr
	          transcludedChoices.removeAttr('data-ui-select-choices'); // Properly handle HTML5 data-attributes
	          if (transcludedChoices.length !== 1) {
	            throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-choices but got '{0}'.", transcludedChoices.length);
	          }
	          element.querySelectorAll('.ui-select-choices').replaceWith(transcludedChoices);

	          var transcludedNoChoice = transcluded.querySelectorAll('.ui-select-no-choice');
	          transcludedNoChoice.removeAttr('ui-select-no-choice'); //To avoid loop in case directive as attr
	          transcludedNoChoice.removeAttr('data-ui-select-no-choice'); // Properly handle HTML5 data-attributes
	          if (transcludedNoChoice.length == 1) {
	            element.querySelectorAll('.ui-select-no-choice').replaceWith(transcludedNoChoice);
	          }
	        });

	        // Support for appending the select field to the body when its open
	        var appendToBody = scope.$eval(attrs.appendToBody);
	        if (appendToBody !== undefined ? appendToBody : uiSelectConfig.appendToBody) {
	          scope.$watch('$select.open', function(isOpen) {
	            if (isOpen) {
	              positionDropdown();
	            } else {
	              resetDropdown();
	            }
	          });

	          // Move the dropdown back to its original location when the scope is destroyed. Otherwise
	          // it might stick around when the user routes away or the select field is otherwise removed
	          scope.$on('$destroy', function() {
	            resetDropdown();
	          });
	        }

	        // Hold on to a reference to the .ui-select-container element for appendToBody support
	        var placeholder = null,
	            originalWidth = '';

	        function positionDropdown() {
	          // Remember the absolute position of the element
	          var offset = uisOffset(element);

	          // Clone the element into a placeholder element to take its original place in the DOM
	          placeholder = angular.element('<div class="ui-select-placeholder"></div>');
	          placeholder[0].style.width = offset.width + 'px';
	          placeholder[0].style.height = offset.height + 'px';
	          element.after(placeholder);

	          // Remember the original value of the element width inline style, so it can be restored
	          // when the dropdown is closed
	          originalWidth = element[0].style.width;

	          // Now move the actual dropdown element to the end of the body
	          $document.find('body').append(element);

	          element[0].style.position = 'absolute';
	          element[0].style.left = offset.left + 'px';
	          element[0].style.top = offset.top + 'px';
	          element[0].style.width = offset.width + 'px';
	        }

	        function resetDropdown() {
	          if (placeholder === null) {
	            // The dropdown has not actually been display yet, so there's nothing to reset
	            return;
	          }

	          // Move the dropdown element back to its original location in the DOM
	          placeholder.replaceWith(element);
	          placeholder = null;

	          element[0].style.position = '';
	          element[0].style.left = '';
	          element[0].style.top = '';
	          element[0].style.width = originalWidth;

	          // Set focus back on to the moved element
	          $select.setFocus();
	        }

	        // Hold on to a reference to the .ui-select-dropdown element for direction support.
	        var dropdown = null,
	            directionUpClassName = 'direction-up';

	        // Support changing the direction of the dropdown if there isn't enough space to render it.
	        scope.$watch('$select.open', function() {

	          if ($select.dropdownPosition === 'auto' || $select.dropdownPosition === 'up'){
	            scope.calculateDropdownPos();
	          }

	        });

	        var setDropdownPosUp = function(offset, offsetDropdown){

	          offset = offset || uisOffset(element);
	          offsetDropdown = offsetDropdown || uisOffset(dropdown);

	          dropdown[0].style.position = 'absolute';
	          dropdown[0].style.top = (offsetDropdown.height * -1) + 'px';
	          element.addClass(directionUpClassName);

	        };

	        var setDropdownPosDown = function(offset, offsetDropdown){

	          element.removeClass(directionUpClassName);

	          offset = offset || uisOffset(element);
	          offsetDropdown = offsetDropdown || uisOffset(dropdown);

	          dropdown[0].style.position = '';
	          dropdown[0].style.top = '';

	        };

	        var calculateDropdownPosAfterAnimation = function() {
	          // Delay positioning the dropdown until all choices have been added so its height is correct.
	          $timeout(function() {
	            if ($select.dropdownPosition === 'up') {
	              //Go UP
	              setDropdownPosUp();
	            } else {
	              //AUTO
	              element.removeClass(directionUpClassName);

	              var offset = uisOffset(element);
	              var offsetDropdown = uisOffset(dropdown);

	              //https://code.google.com/p/chromium/issues/detail?id=342307#c4
	              var scrollTop = $document[0].documentElement.scrollTop || $document[0].body.scrollTop; //To make it cross browser (blink, webkit, IE, Firefox).

	              // Determine if the direction of the dropdown needs to be changed.
	              if (offset.top + offset.height + offsetDropdown.height > scrollTop + $document[0].documentElement.clientHeight) {
	                //Go UP
	                setDropdownPosUp(offset, offsetDropdown);
	              }else{
	                //Go DOWN
	                setDropdownPosDown(offset, offsetDropdown);
	              }
	            }

	            // Display the dropdown once it has been positioned.
	            dropdown[0].style.opacity = 1;
	          });
	        };

	        var opened = false;
	        
	        scope.calculateDropdownPos = function() {
	          if ($select.open) {
	            dropdown = angular.element(element).querySelectorAll('.ui-select-dropdown');

	            if (dropdown.length === 0) {
	              return;
	            }

	           // Hide the dropdown so there is no flicker until $timeout is done executing.
	           if ($select.search === '' && !opened) {
	              dropdown[0].style.opacity = 0;
	              opened = true;
	           }

	            if (!uisOffset(dropdown).height && $select.$animate && $select.$animate.on && $select.$animate.enabled(dropdown)) {
	              var needsCalculated = true;

	              $select.$animate.on('enter', dropdown, function (elem, phase) {
	                if (phase === 'close' && needsCalculated) {
	                  calculateDropdownPosAfterAnimation();
	                  needsCalculated = false;
	                }
	              });
	            } else {
	              calculateDropdownPosAfterAnimation();
	            }
	          } else {
	            if (dropdown === null || dropdown.length === 0) {
	              return;
	            }

	            // Reset the position of the dropdown.
	            dropdown[0].style.opacity = 0;
	            dropdown[0].style.position = '';
	            dropdown[0].style.top = '';
	            element.removeClass(directionUpClassName);
	          }
	        };
	      };
	    }
	  };
	}]);

	uis.directive('uiSelectMatch', ['uiSelectConfig', function(uiSelectConfig) {
	  return {
	    restrict: 'EA',
	    require: '^uiSelect',
	    replace: true,
	    transclude: true,
	    templateUrl: function(tElement) {
	      // Needed so the uiSelect can detect the transcluded content
	      tElement.addClass('ui-select-match');

	      var parent = tElement.parent();
	      // Gets theme attribute from parent (ui-select)
	      var theme = getAttribute(parent, 'theme') || uiSelectConfig.theme;
	      var multi = angular.isDefined(getAttribute(parent, 'multiple'));

	      return theme + (multi ? '/match-multiple.tpl.html' : '/match.tpl.html');      
	    },
	    link: function(scope, element, attrs, $select) {
	      $select.lockChoiceExpression = attrs.uiLockChoice;
	      attrs.$observe('placeholder', function(placeholder) {
	        $select.placeholder = placeholder !== undefined ? placeholder : uiSelectConfig.placeholder;
	      });

	      function setAllowClear(allow) {
	        $select.allowClear = (angular.isDefined(allow)) ? (allow === '') ? true : (allow.toLowerCase() === 'true') : false;
	      }

	      attrs.$observe('allowClear', setAllowClear);
	      setAllowClear(attrs.allowClear);

	      if($select.multiple){
	        $select.sizeSearchInput();
	      }

	    }
	  };

	  function getAttribute(elem, attribute) {
	    if (elem[0].hasAttribute(attribute))
	      return elem.attr(attribute);

	    if (elem[0].hasAttribute('data-' + attribute))
	      return elem.attr('data-' + attribute);

	    if (elem[0].hasAttribute('x-' + attribute))
	      return elem.attr('x-' + attribute);
	  }
	}]);

	uis.directive('uiSelectMultiple', ['uiSelectMinErr','$timeout', function(uiSelectMinErr, $timeout) {
	  return {
	    restrict: 'EA',
	    require: ['^uiSelect', '^ngModel'],

	    controller: ['$scope','$timeout', function($scope, $timeout){

	      var ctrl = this,
	          $select = $scope.$select,
	          ngModel;

	      if (angular.isUndefined($select.selected))
	        $select.selected = [];

	      //Wait for link fn to inject it
	      $scope.$evalAsync(function(){ ngModel = $scope.ngModel; });

	      ctrl.activeMatchIndex = -1;

	      ctrl.updateModel = function(){
	        ngModel.$setViewValue(Date.now()); //Set timestamp as a unique string to force changes
	        ctrl.refreshComponent();
	      };

	      ctrl.refreshComponent = function(){
	        //Remove already selected items
	        //e.g. When user clicks on a selection, the selected array changes and
	        //the dropdown should remove that item
	        if($select.refreshItems){
	          $select.refreshItems();
	        }
	        if($select.sizeSearchInput){
	          $select.sizeSearchInput();
	        }
	      };

	      // Remove item from multiple select
	      ctrl.removeChoice = function(index){

	        // if the choice is locked, don't remove it
	        if($select.isLocked(null, index)) return false;

	        var removedChoice = $select.selected[index];

	        var locals = {};
	        locals[$select.parserResult.itemName] = removedChoice;

	        $select.selected.splice(index, 1);
	        ctrl.activeMatchIndex = -1;
	        $select.sizeSearchInput();

	        // Give some time for scope propagation.
	        $timeout(function(){
	          $select.onRemoveCallback($scope, {
	            $item: removedChoice,
	            $model: $select.parserResult.modelMapper($scope, locals)
	          });
	        });

	        ctrl.updateModel();

	        return true;
	      };

	      ctrl.getPlaceholder = function(){
	        //Refactor single?
	        if($select.selected && $select.selected.length) return;
	        return $select.placeholder;
	      };


	    }],
	    controllerAs: '$selectMultiple',

	    link: function(scope, element, attrs, ctrls) {

	      var $select = ctrls[0];
	      var ngModel = scope.ngModel = ctrls[1];
	      var $selectMultiple = scope.$selectMultiple;

	      //$select.selected = raw selected objects (ignoring any property binding)

	      $select.multiple = true;

	      //Input that will handle focus
	      $select.focusInput = $select.searchInput;

	      //Properly check for empty if set to multiple
	      ngModel.$isEmpty = function(value) {
	        return !value || value.length === 0;
	      };

	      //From view --> model
	      ngModel.$parsers.unshift(function () {
	        var locals = {},
	            result,
	            resultMultiple = [];
	        for (var j = $select.selected.length - 1; j >= 0; j--) {
	          locals = {};
	          locals[$select.parserResult.itemName] = $select.selected[j];
	          result = $select.parserResult.modelMapper(scope, locals);
	          resultMultiple.unshift(result);
	        }
	        return resultMultiple;
	      });

	      // From model --> view
	      ngModel.$formatters.unshift(function (inputValue) {
	        var data = $select.parserResult && $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
	            locals = {},
	            result;
	        if (!data) return inputValue;
	        var resultMultiple = [];
	        var checkFnMultiple = function(list, value){
	          if (!list || !list.length) return;
	          for (var p = list.length - 1; p >= 0; p--) {
	            locals[$select.parserResult.itemName] = list[p];
	            result = $select.parserResult.modelMapper(scope, locals);
	            if($select.parserResult.trackByExp){
	                var propsItemNameMatches = /(\w*)\./.exec($select.parserResult.trackByExp);
	                var matches = /\.([^\s]+)/.exec($select.parserResult.trackByExp);
	                if(propsItemNameMatches && propsItemNameMatches.length > 0 && propsItemNameMatches[1] == $select.parserResult.itemName){
	                  if(matches && matches.length>0 && result[matches[1]] == value[matches[1]]){
	                      resultMultiple.unshift(list[p]);
	                      return true;
	                  }
	                }
	            }
	            if (angular.equals(result,value)){
	              resultMultiple.unshift(list[p]);
	              return true;
	            }
	          }
	          return false;
	        };
	        if (!inputValue) return resultMultiple; //If ngModel was undefined
	        for (var k = inputValue.length - 1; k >= 0; k--) {
	          //Check model array of currently selected items
	          if (!checkFnMultiple($select.selected, inputValue[k])){
	            //Check model array of all items available
	            if (!checkFnMultiple(data, inputValue[k])){
	              //If not found on previous lists, just add it directly to resultMultiple
	              resultMultiple.unshift(inputValue[k]);
	            }
	          }
	        }
	        return resultMultiple;
	      });

	      //Watch for external model changes
	      scope.$watchCollection(function(){ return ngModel.$modelValue; }, function(newValue, oldValue) {
	        if (oldValue != newValue){
	          //update the view value with fresh data from items, if there is a valid model value
	          if(angular.isDefined(ngModel.$modelValue)) {
	            ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
	          }
	          $selectMultiple.refreshComponent();
	        }
	      });

	      ngModel.$render = function() {
	        // Make sure that model value is array
	        if(!angular.isArray(ngModel.$viewValue)){
	          // Have tolerance for null or undefined values
	          if(angular.isUndefined(ngModel.$viewValue) || ngModel.$viewValue === null){
	            ngModel.$viewValue = [];
	          } else {
	            throw uiSelectMinErr('multiarr', "Expected model value to be array but got '{0}'", ngModel.$viewValue);
	          }
	        }
	        $select.selected = ngModel.$viewValue;
	        $selectMultiple.refreshComponent();
	        scope.$evalAsync(); //To force $digest
	      };

	      scope.$on('uis:select', function (event, item) {
	        if($select.selected.length >= $select.limit) {
	          return;
	        }
	        $select.selected.push(item);
	        $selectMultiple.updateModel();
	      });

	      scope.$on('uis:activate', function () {
	        $selectMultiple.activeMatchIndex = -1;
	      });

	      scope.$watch('$select.disabled', function(newValue, oldValue) {
	        // As the search input field may now become visible, it may be necessary to recompute its size
	        if (oldValue && !newValue) $select.sizeSearchInput();
	      });

	      $select.searchInput.on('keydown', function(e) {
	        var key = e.which;
	        scope.$apply(function() {
	          var processed = false;
	          // var tagged = false; //Checkme
	          if(KEY.isHorizontalMovement(key)){
	            processed = _handleMatchSelection(key);
	          }
	          if (processed  && key != KEY.TAB) {
	            //TODO Check si el tab selecciona aun correctamente
	            //Crear test
	            e.preventDefault();
	            e.stopPropagation();
	          }
	        });
	      });
	      function _getCaretPosition(el) {
	        if(angular.isNumber(el.selectionStart)) return el.selectionStart;
	        // selectionStart is not supported in IE8 and we don't want hacky workarounds so we compromise
	        else return el.value.length;
	      }
	      // Handles selected options in "multiple" mode
	      function _handleMatchSelection(key){
	        var caretPosition = _getCaretPosition($select.searchInput[0]),
	            length = $select.selected.length,
	            // none  = -1,
	            first = 0,
	            last  = length-1,
	            curr  = $selectMultiple.activeMatchIndex,
	            next  = $selectMultiple.activeMatchIndex+1,
	            prev  = $selectMultiple.activeMatchIndex-1,
	            newIndex = curr;

	        if(caretPosition > 0 || ($select.search.length && key == KEY.RIGHT)) return false;

	        $select.close();

	        function getNewActiveMatchIndex(){
	          switch(key){
	            case KEY.LEFT:
	              // Select previous/first item
	              if(~$selectMultiple.activeMatchIndex) return prev;
	              // Select last item
	              else return last;
	              break;
	            case KEY.RIGHT:
	              // Open drop-down
	              if(!~$selectMultiple.activeMatchIndex || curr === last){
	                $select.activate();
	                return false;
	              }
	              // Select next/last item
	              else return next;
	              break;
	            case KEY.BACKSPACE:
	              // Remove selected item and select previous/first
	              if(~$selectMultiple.activeMatchIndex){
	                if($selectMultiple.removeChoice(curr)) {
	                  return prev;
	                } else {
	                  return curr;
	                }
	                
	              } else {
	                // If nothing yet selected, select last item
	                return last;  
	              }              
	              break;
	            case KEY.DELETE:
	              // Remove selected item and select next item
	              if(~$selectMultiple.activeMatchIndex){
	                $selectMultiple.removeChoice($selectMultiple.activeMatchIndex);
	                return curr;
	              }
	              else return false;
	          }
	        }

	        newIndex = getNewActiveMatchIndex();

	        if(!$select.selected.length || newIndex === false) $selectMultiple.activeMatchIndex = -1;
	        else $selectMultiple.activeMatchIndex = Math.min(last,Math.max(first,newIndex));

	        return true;
	      }

	      $select.searchInput.on('keyup', function(e) {

	        if ( ! KEY.isVerticalMovement(e.which) ) {
	          scope.$evalAsync( function () {
	            $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
	          });
	        }
	        // Push a "create new" item into array if there is a search string
	        if ( $select.tagging.isActivated && $select.search.length > 0 ) {

	          // return early with these keys
	          if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || KEY.isVerticalMovement(e.which) ) {
	            return;
	          }
	          // always reset the activeIndex to the first item when tagging
	          $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
	          // taggingLabel === false bypasses all of this
	          if ($select.taggingLabel === false) return;

	          var items = angular.copy( $select.items );
	          var stashArr = angular.copy( $select.items );
	          var newItem;
	          var item;
	          var hasTag = false;
	          var dupeIndex = -1;
	          var tagItems;
	          var tagItem;

	          // case for object tagging via transform `$select.tagging.fct` function
	          if ( $select.tagging.fct !== undefined) {
	            tagItems = $select.$filter('filter')(items,{'isTag': true});
	            if ( tagItems.length > 0 ) {
	              tagItem = tagItems[0];
	            }
	            // remove the first element, if it has the `isTag` prop we generate a new one with each keyup, shaving the previous
	            if ( items.length > 0 && tagItem ) {
	              hasTag = true;
	              items = items.slice(1,items.length);
	              stashArr = stashArr.slice(1,stashArr.length);
	            }
	            newItem = $select.tagging.fct($select.search);
	            // verify the new tag doesn't match the value of a possible selection choice or an already selected item.
	            if (
	              stashArr.some(function (origItem) {
	                 return angular.equals(origItem, newItem);
	              }) ||
	              $select.selected.some(function (origItem) {
	                return angular.equals(origItem, newItem);
	              })
	            ) {
	              scope.$evalAsync(function () {
	                $select.activeIndex = 0;
	                $select.items = items;
	              });
	              return;
	            }
	            if (newItem) newItem.isTag = true;
	          // handle newItem string and stripping dupes in tagging string context
	          } else {
	            // find any tagging items already in the $select.items array and store them
	            tagItems = $select.$filter('filter')(items,function (item) {
	              return item.match($select.taggingLabel);
	            });
	            if ( tagItems.length > 0 ) {
	              tagItem = tagItems[0];
	            }
	            item = items[0];
	            // remove existing tag item if found (should only ever be one tag item)
	            if ( item !== undefined && items.length > 0 && tagItem ) {
	              hasTag = true;
	              items = items.slice(1,items.length);
	              stashArr = stashArr.slice(1,stashArr.length);
	            }
	            newItem = $select.search+' '+$select.taggingLabel;
	            if ( _findApproxDupe($select.selected, $select.search) > -1 ) {
	              return;
	            }
	            // verify the the tag doesn't match the value of an existing item from
	            // the searched data set or the items already selected
	            if ( _findCaseInsensitiveDupe(stashArr.concat($select.selected)) ) {
	              // if there is a tag from prev iteration, strip it / queue the change
	              // and return early
	              if ( hasTag ) {
	                items = stashArr;
	                scope.$evalAsync( function () {
	                  $select.activeIndex = 0;
	                  $select.items = items;
	                });
	              }
	              return;
	            }
	            if ( _findCaseInsensitiveDupe(stashArr) ) {
	              // if there is a tag from prev iteration, strip it
	              if ( hasTag ) {
	                $select.items = stashArr.slice(1,stashArr.length);
	              }
	              return;
	            }
	          }
	          if ( hasTag ) dupeIndex = _findApproxDupe($select.selected, newItem);
	          // dupe found, shave the first item
	          if ( dupeIndex > -1 ) {
	            items = items.slice(dupeIndex+1,items.length-1);
	          } else {
	            items = [];
	            if (newItem) items.push(newItem);
	            items = items.concat(stashArr);
	          }
	          scope.$evalAsync( function () {
	            $select.activeIndex = 0;
	            $select.items = items;

	            if ($select.isGrouped) {
	              // update item references in groups, so that indexOf will work after angular.copy
	              var itemsWithoutTag = newItem ? items.slice(1) : items;
	              $select.setItemsFn(itemsWithoutTag);
	              if (newItem) {
	                // add tag item as a new group
	                $select.items.unshift(newItem);
	                $select.groups.unshift({name: '', items: [newItem], tagging: true});
	              }
	            }
	          });
	        }
	      });
	      function _findCaseInsensitiveDupe(arr) {
	        if ( arr === undefined || $select.search === undefined ) {
	          return false;
	        }
	        var hasDupe = arr.filter( function (origItem) {
	          if ( $select.search.toUpperCase() === undefined || origItem === undefined ) {
	            return false;
	          }
	          return origItem.toUpperCase() === $select.search.toUpperCase();
	        }).length > 0;

	        return hasDupe;
	      }
	      function _findApproxDupe(haystack, needle) {
	        var dupeIndex = -1;
	        if(angular.isArray(haystack)) {
	          var tempArr = angular.copy(haystack);
	          for (var i = 0; i <tempArr.length; i++) {
	            // handle the simple string version of tagging
	            if ( $select.tagging.fct === undefined ) {
	              // search the array for the match
	              if ( tempArr[i]+' '+$select.taggingLabel === needle ) {
	              dupeIndex = i;
	              }
	            // handle the object tagging implementation
	            } else {
	              var mockObj = tempArr[i];
	              if (angular.isObject(mockObj)) {
	                mockObj.isTag = true;
	              }
	              if ( angular.equals(mockObj, needle) ) {
	                dupeIndex = i;
	              }
	            }
	          }
	        }
	        return dupeIndex;
	      }

	      $select.searchInput.on('blur', function() {
	        $timeout(function() {
	          $selectMultiple.activeMatchIndex = -1;
	        });
	      });

	    }
	  };
	}]);

	uis.directive('uiSelectNoChoice',
	    ['uiSelectConfig', function (uiSelectConfig) {
	        return {
	            restrict: 'EA',
	            require: '^uiSelect',
	            replace: true,
	            transclude: true,
	            templateUrl: function (tElement) {
	                // Needed so the uiSelect can detect the transcluded content
	                tElement.addClass('ui-select-no-choice');
	      
	                // Gets theme attribute from parent (ui-select)
	                var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
	                return theme + '/no-choice.tpl.html';
	            }
	        };
	    }]);

	uis.directive('uiSelectSingle', ['$timeout','$compile', function($timeout, $compile) {
	  return {
	    restrict: 'EA',
	    require: ['^uiSelect', '^ngModel'],
	    link: function(scope, element, attrs, ctrls) {

	      var $select = ctrls[0];
	      var ngModel = ctrls[1];

	      //From view --> model
	      ngModel.$parsers.unshift(function (inputValue) {
	        var locals = {},
	            result;
	        locals[$select.parserResult.itemName] = inputValue;
	        result = $select.parserResult.modelMapper(scope, locals);
	        return result;
	      });

	      //From model --> view
	      ngModel.$formatters.unshift(function (inputValue) {
	        var data = $select.parserResult && $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
	            locals = {},
	            result;
	        if (data){
	          var checkFnSingle = function(d){
	            locals[$select.parserResult.itemName] = d;
	            result = $select.parserResult.modelMapper(scope, locals);
	            return result === inputValue;
	          };
	          //If possible pass same object stored in $select.selected
	          if ($select.selected && checkFnSingle($select.selected)) {
	            return $select.selected;
	          }
	          for (var i = data.length - 1; i >= 0; i--) {
	            if (checkFnSingle(data[i])) return data[i];
	          }
	        }
	        return inputValue;
	      });

	      //Update viewValue if model change
	      scope.$watch('$select.selected', function(newValue) {
	        if (ngModel.$viewValue !== newValue) {
	          ngModel.$setViewValue(newValue);
	        }
	      });

	      ngModel.$render = function() {
	        $select.selected = ngModel.$viewValue;
	      };

	      scope.$on('uis:select', function (event, item) {
	        $select.selected = item;
	      });

	      scope.$on('uis:close', function (event, skipFocusser) {
	        $timeout(function(){
	          $select.focusser.prop('disabled', false);
	          if (!skipFocusser) $select.focusser[0].focus();
	        },0,false);
	      });

	      scope.$on('uis:activate', function () {
	        focusser.prop('disabled', true); //Will reactivate it on .close()
	      });

	      //Idea from: https://github.com/ivaynberg/select2/blob/79b5bf6db918d7560bdd959109b7bcfb47edaf43/select2.js#L1954
	      var focusser = angular.element("<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />");
	      $compile(focusser)(scope);
	      $select.focusser = focusser;

	      //Input that will handle focus
	      $select.focusInput = focusser;

	      element.parent().append(focusser);
	      focusser.bind("focus", function(){
	        scope.$evalAsync(function(){
	          $select.focus = true;
	        });
	      });
	      focusser.bind("blur", function(){
	        scope.$evalAsync(function(){
	          $select.focus = false;
	        });
	      });
	      focusser.bind("keydown", function(e){

	        if (e.which === KEY.BACKSPACE) {
	          e.preventDefault();
	          e.stopPropagation();
	          $select.select(undefined);
	          scope.$apply();
	          return;
	        }

	        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
	          return;
	        }

	        if (e.which == KEY.DOWN  || e.which == KEY.UP || e.which == KEY.ENTER || e.which == KEY.SPACE){
	          e.preventDefault();
	          e.stopPropagation();
	          $select.activate();
	        }

	        scope.$digest();
	      });

	      focusser.bind("keyup input", function(e){

	        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || e.which == KEY.ENTER || e.which === KEY.BACKSPACE) {
	          return;
	        }

	        $select.activate(focusser.val()); //User pressed some regular key, so we pass it to the search input
	        focusser.val('');
	        scope.$digest();

	      });


	    }
	  };
	}]);

	// Make multiple matches sortable
	uis.directive('uiSelectSort', ['$timeout', 'uiSelectConfig', 'uiSelectMinErr', function($timeout, uiSelectConfig, uiSelectMinErr) {
	  return {
	    require: ['^^uiSelect', '^ngModel'],
	    link: function(scope, element, attrs, ctrls) {
	      if (scope[attrs.uiSelectSort] === null) {
	        throw uiSelectMinErr('sort', 'Expected a list to sort');
	      }

	      var $select = ctrls[0];
	      var $ngModel = ctrls[1];

	      var options = angular.extend({
	          axis: 'horizontal'
	        },
	        scope.$eval(attrs.uiSelectSortOptions));

	      var axis = options.axis;
	      var draggingClassName = 'dragging';
	      var droppingClassName = 'dropping';
	      var droppingBeforeClassName = 'dropping-before';
	      var droppingAfterClassName = 'dropping-after';

	      scope.$watch(function(){
	        return $select.sortable;
	      }, function(newValue){
	        if (newValue) {
	          element.attr('draggable', true);
	        } else {
	          element.removeAttr('draggable');
	        }
	      });

	      element.on('dragstart', function(event) {
	        element.addClass(draggingClassName);

	        (event.dataTransfer || event.originalEvent.dataTransfer).setData('text', scope.$index.toString());
	      });

	      element.on('dragend', function() {
	        removeClass(draggingClassName);
	      });

	      var move = function(from, to) {
	        /*jshint validthis: true */
	        this.splice(to, 0, this.splice(from, 1)[0]);
	      };

	      var removeClass = function(className) {
	        angular.forEach($select.$element.querySelectorAll('.' + className), function(el){
	          angular.element(el).removeClass(className);
	        });
	      };

	      var dragOverHandler = function(event) {
	        event.preventDefault();

	        var offset = axis === 'vertical' ? event.offsetY || event.layerY || (event.originalEvent ? event.originalEvent.offsetY : 0) : event.offsetX || event.layerX || (event.originalEvent ? event.originalEvent.offsetX : 0);

	        if (offset < (this[axis === 'vertical' ? 'offsetHeight' : 'offsetWidth'] / 2)) {
	          removeClass(droppingAfterClassName);
	          element.addClass(droppingBeforeClassName);

	        } else {
	          removeClass(droppingBeforeClassName);
	          element.addClass(droppingAfterClassName);
	        }
	      };

	      var dropTimeout;

	      var dropHandler = function(event) {
	        event.preventDefault();

	        var droppedItemIndex = parseInt((event.dataTransfer || event.originalEvent.dataTransfer).getData('text'), 10);

	        // prevent event firing multiple times in firefox
	        $timeout.cancel(dropTimeout);
	        dropTimeout = $timeout(function() {
	          _dropHandler(droppedItemIndex);
	        }, 20);
	      };

	      var _dropHandler = function(droppedItemIndex) {
	        var theList = scope.$eval(attrs.uiSelectSort);
	        var itemToMove = theList[droppedItemIndex];
	        var newIndex = null;

	        if (element.hasClass(droppingBeforeClassName)) {
	          if (droppedItemIndex < scope.$index) {
	            newIndex = scope.$index - 1;
	          } else {
	            newIndex = scope.$index;
	          }
	        } else {
	          if (droppedItemIndex < scope.$index) {
	            newIndex = scope.$index;
	          } else {
	            newIndex = scope.$index + 1;
	          }
	        }

	        move.apply(theList, [droppedItemIndex, newIndex]);

	        $ngModel.$setViewValue(Date.now());

	        scope.$apply(function() {
	          scope.$emit('uiSelectSort:change', {
	            array: theList,
	            item: itemToMove,
	            from: droppedItemIndex,
	            to: newIndex
	          });
	        });

	        removeClass(droppingClassName);
	        removeClass(droppingBeforeClassName);
	        removeClass(droppingAfterClassName);

	        element.off('drop', dropHandler);
	      };

	      element.on('dragenter', function() {
	        if (element.hasClass(draggingClassName)) {
	          return;
	        }

	        element.addClass(droppingClassName);

	        element.on('dragover', dragOverHandler);
	        element.on('drop', dropHandler);
	      });

	      element.on('dragleave', function(event) {
	        if (event.target != element) {
	          return;
	        }

	        removeClass(droppingClassName);
	        removeClass(droppingBeforeClassName);
	        removeClass(droppingAfterClassName);

	        element.off('dragover', dragOverHandler);
	        element.off('drop', dropHandler);
	      });
	    }
	  };
	}]);

	/**
	 * Debounces functions
	 *
	 * Taken from UI Bootstrap $$debounce source code
	 * See https://github.com/angular-ui/bootstrap/blob/master/src/debounce/debounce.js
	 *
	 */
	uis.factory('$$uisDebounce', ['$timeout', function($timeout) {
	  return function(callback, debounceTime) {
	    var timeoutPromise;

	    return function() {
	      var self = this;
	      var args = Array.prototype.slice.call(arguments);
	      if (timeoutPromise) {
	        $timeout.cancel(timeoutPromise);
	      }

	      timeoutPromise = $timeout(function() {
	        callback.apply(self, args);
	      }, debounceTime);
	    };
	  };
	}]);

	uis.directive('uisOpenClose', ['$parse', '$timeout', function ($parse, $timeout) {
	  return {
	    restrict: 'A',
	    require: 'uiSelect',
	    link: function (scope, element, attrs, $select) {
	      $select.onOpenCloseCallback = $parse(attrs.uisOpenClose);

	      scope.$watch('$select.open', function (isOpen, previousState) {
	        if (isOpen !== previousState) {
	          $timeout(function () {
	            $select.onOpenCloseCallback(scope, {
	              isOpen: isOpen
	            });
	          });
	        }
	      });
	    }
	  };
	}]);

	/**
	 * Parses "repeat" attribute.
	 *
	 * Taken from AngularJS ngRepeat source code
	 * See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L211
	 *
	 * Original discussion about parsing "repeat" attribute instead of fully relying on ng-repeat:
	 * https://github.com/angular-ui/ui-select/commit/5dd63ad#commitcomment-5504697
	 */

	uis.service('uisRepeatParser', ['uiSelectMinErr','$parse', function(uiSelectMinErr, $parse) {
	  var self = this;

	  /**
	   * Example:
	   * expression = "address in addresses | filter: {street: $select.search} track by $index"
	   * itemName = "address",
	   * source = "addresses | filter: {street: $select.search}",
	   * trackByExp = "$index",
	   */
	  self.parse = function(expression) {


	    var match;
	    //var isObjectCollection = /\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)/.test(expression);
	    // If an array is used as collection

	    // if (isObjectCollection){
	    // 000000000000000000000000000000111111111000000000000000222222222222220033333333333333333333330000444444444444444444000000000000000055555555555000000000000000000000066666666600000000
	    match = expression.match(/^\s*(?:([\s\S]+?)\s+as\s+)?(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(\s*[\s\S]+?)?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

	    // 1 Alias
	    // 2 Item
	    // 3 Key on (key,value)
	    // 4 Value on (key,value)
	    // 5 Source expression (including filters)
	    // 6 Track by

	    if (!match) {
	      throw uiSelectMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
	              expression);
	    }
	    
	    var source = match[5], 
	        filters = '';

	    // When using (key,value) ui-select requires filters to be extracted, since the object
	    // is converted to an array for $select.items 
	    // (in which case the filters need to be reapplied)
	    if (match[3]) {
	      // Remove any enclosing parenthesis
	      source = match[5].replace(/(^\()|(\)$)/g, '');
	      // match all after | but not after ||
	      var filterMatch = match[5].match(/^\s*(?:[\s\S]+?)(?:[^\|]|\|\|)+([\s\S]*)\s*$/);
	      if(filterMatch && filterMatch[1].trim()) {
	        filters = filterMatch[1];
	        source = source.replace(filters, '');
	      }      
	    }

	    return {
	      itemName: match[4] || match[2], // (lhs) Left-hand side,
	      keyName: match[3], //for (key, value) syntax
	      source: $parse(source),
	      filters: filters,
	      trackByExp: match[6],
	      modelMapper: $parse(match[1] || match[4] || match[2]),
	      repeatExpression: function (grouped) {
	        var expression = this.itemName + ' in ' + (grouped ? '$group.items' : '$select.items');
	        if (this.trackByExp) {
	          expression += ' track by ' + this.trackByExp;
	        }
	        return expression;
	      } 
	    };

	  };

	  self.getGroupNgRepeatExpression = function() {
	    return '$group in $select.groups track by $group.name';
	  };

	}]);

	}());
	angular.module("ui.select").run(["$templateCache", function($templateCache) {$templateCache.put("bootstrap/choices.tpl.html","<ul class=\"ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu\" ng-show=\"$select.open && $select.items.length > 0\"><li class=\"ui-select-choices-group\" id=\"ui-select-choices-{{ $select.generatedId }}\"><div class=\"divider\" ng-show=\"$select.isGrouped && $index > 0\"></div><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label dropdown-header\" ng-bind=\"$group.name\"></div><div ng-attr-id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\" role=\"option\"><span class=\"ui-select-choices-row-inner\"></span></div></li></ul>");
	$templateCache.put("bootstrap/match-multiple.tpl.html","<span class=\"ui-select-match\"><span ng-repeat=\"$item in $select.selected track by $index\"><span class=\"ui-select-match-item btn btn-default btn-xs\" tabindex=\"-1\" type=\"button\" ng-disabled=\"$select.disabled\" ng-click=\"$selectMultiple.activeMatchIndex = $index;\" ng-class=\"{\'btn-primary\':$selectMultiple.activeMatchIndex === $index, \'select-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span class=\"close ui-select-match-close\" ng-hide=\"$select.disabled\" ng-click=\"$selectMultiple.removeChoice($index)\">&nbsp;&times;</span> <span uis-transclude-append=\"\"></span></span></span></span>");
	$templateCache.put("bootstrap/match.tpl.html","<div class=\"ui-select-match\" ng-hide=\"$select.open && $select.searchEnabled\" ng-disabled=\"$select.disabled\" ng-class=\"{\'btn-default-focus\':$select.focus}\"><span tabindex=\"-1\" class=\"btn btn-default form-control ui-select-toggle\" aria-label=\"{{ $select.baseTitle }} activate\" ng-disabled=\"$select.disabled\" ng-click=\"$select.activate()\" style=\"outline: 0;\"><span ng-show=\"$select.isEmpty()\" class=\"ui-select-placeholder text-muted\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"ui-select-match-text pull-left\" ng-class=\"{\'ui-select-allow-clear\': $select.allowClear && !$select.isEmpty()}\" ng-transclude=\"\"></span> <i class=\"caret pull-right\" ng-click=\"$select.toggle($event)\"></i> <a ng-show=\"$select.allowClear && !$select.isEmpty() && ($select.disabled !== true)\" aria-label=\"{{ $select.baseTitle }} clear\" style=\"margin-right: 10px\" ng-click=\"$select.clear($event)\" class=\"btn btn-xs btn-link pull-right\"><i class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></i></a></span></div>");
	$templateCache.put("bootstrap/no-choice.tpl.html","<ul class=\"ui-select-no-choice dropdown-menu\" ng-show=\"$select.items.length == 0\"><li ng-transclude=\"\"></li></ul>");
	$templateCache.put("bootstrap/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control\" ng-class=\"{open: $select.open}\"><div><div class=\"ui-select-match\"></div><input type=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" class=\"ui-select-search input-xs\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-click=\"$select.activate()\" ng-model=\"$select.search\" role=\"combobox\" aria-expanded=\"{{$select.open}}\" aria-label=\"{{$select.baseTitle}}\" ng-class=\"{\'spinner\': $select.refreshing}\" ondrop=\"return false;\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");
	$templateCache.put("bootstrap/select.tpl.html","<div class=\"ui-select-container ui-select-bootstrap dropdown\" ng-class=\"{open: $select.open}\"><div class=\"ui-select-match\"></div><span ng-show=\"$select.open && $select.refreshing && $select.spinnerEnabled\" class=\"ui-select-refreshing {{$select.spinnerClass}}\"></span> <input type=\"search\" autocomplete=\"off\" tabindex=\"-1\" aria-expanded=\"true\" aria-label=\"{{ $select.baseTitle }}\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" class=\"form-control ui-select-search\" ng-class=\"{ \'ui-select-search-hidden\' : !$select.searchEnabled }\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-show=\"$select.open\"><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");
	$templateCache.put("select2/choices.tpl.html","<ul tabindex=\"-1\" class=\"ui-select-choices ui-select-choices-content select2-results\"><li class=\"ui-select-choices-group\" ng-class=\"{\'select2-result-with-children\': $select.choiceGrouped($group) }\"><div ng-show=\"$select.choiceGrouped($group)\" class=\"ui-select-choices-group-label select2-result-label\" ng-bind=\"$group.name\"></div><ul id=\"ui-select-choices-{{ $select.generatedId }}\" ng-class=\"{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }\"><li role=\"option\" ng-attr-id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}\"><div class=\"select2-result-label ui-select-choices-row-inner\"></div></li></ul></li></ul>");
	$templateCache.put("select2/match-multiple.tpl.html","<span class=\"ui-select-match\"><li class=\"ui-select-match-item select2-search-choice\" ng-repeat=\"$item in $select.selected track by $index\" ng-class=\"{\'select2-search-choice-focus\':$selectMultiple.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span uis-transclude-append=\"\"></span> <a href=\"javascript:;\" class=\"ui-select-match-close select2-search-choice-close\" ng-click=\"$selectMultiple.removeChoice($index)\" tabindex=\"-1\"></a></li></span>");
	$templateCache.put("select2/match.tpl.html","<a class=\"select2-choice ui-select-match\" ng-class=\"{\'select2-default\': $select.isEmpty()}\" ng-click=\"$select.toggle($event)\" aria-label=\"{{ $select.baseTitle }} select\"><span ng-show=\"$select.isEmpty()\" class=\"select2-chosen\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"select2-chosen\" ng-transclude=\"\"></span> <abbr ng-if=\"$select.allowClear && !$select.isEmpty()\" class=\"select2-search-choice-close\" ng-click=\"$select.clear($event)\"></abbr> <span class=\"select2-arrow ui-select-toggle\"><b></b></span></a>");
	$templateCache.put("select2/no-choice.tpl.html","<div class=\"ui-select-no-choice dropdown\" ng-show=\"$select.items.length == 0\"><div class=\"dropdown-content\"><div data-selectable=\"\" ng-transclude=\"\"></div></div></div>");
	$templateCache.put("select2/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple select2 select2-container select2-container-multi\" ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled}\"><ul class=\"select2-choices\"><span class=\"ui-select-match\"></span><li class=\"select2-search-field\"><input type=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" class=\"select2-input ui-select-search\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-hide=\"$select.disabled\" ng-model=\"$select.search\" ng-click=\"$select.activate()\" style=\"width: 34px;\" ondrop=\"return false;\"></li></ul><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open || $select.items.length === 0}\"><div class=\"ui-select-choices\"></div></div></div>");
	$templateCache.put("select2/select.tpl.html","<div class=\"ui-select-container select2 select2-container\" ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled, \'select2-container-active\': $select.focus, \'select2-allowclear\': $select.allowClear && !$select.isEmpty()}\"><div class=\"ui-select-match\"></div><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open}\"><div class=\"search-container\" ng-class=\"{\'ui-select-search-hidden\':!$select.searchEnabled, \'select2-search\':$select.searchEnabled}\"><input type=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" ng-class=\"{\'select2-active\': $select.refreshing}\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" class=\"ui-select-search select2-input\" ng-model=\"$select.search\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div></div>");
	$templateCache.put("selectize/choices.tpl.html","<div ng-show=\"$select.open\" class=\"ui-select-choices ui-select-dropdown selectize-dropdown\" ng-class=\"{\'single\': !$select.multiple, \'multi\': $select.multiple}\"><div class=\"ui-select-choices-content selectize-dropdown-content\"><div class=\"ui-select-choices-group optgroup\"><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label optgroup-header\" ng-bind=\"$group.name\"></div><div role=\"option\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\"><div class=\"option ui-select-choices-row-inner\" data-selectable=\"\"></div></div></div></div></div>");
	$templateCache.put("selectize/match-multiple.tpl.html","<div class=\"ui-select-match\" data-value=\"\" ng-repeat=\"$item in $select.selected track by $index\" ng-click=\"$selectMultiple.activeMatchIndex = $index;\" ng-class=\"{\'active\':$selectMultiple.activeMatchIndex === $index}\" ui-select-sort=\"$select.selected\"><span class=\"ui-select-match-item\" ng-class=\"{\'select-locked\':$select.isLocked(this, $index)}\"><span uis-transclude-append=\"\"></span> <span class=\"remove ui-select-match-close\" ng-hide=\"$select.disabled\" ng-click=\"$selectMultiple.removeChoice($index)\">&times;</span></span></div>");
	$templateCache.put("selectize/match.tpl.html","<div ng-hide=\"$select.searchEnabled && ($select.open || $select.isEmpty())\" class=\"ui-select-match\"><span ng-show=\"!$select.searchEnabled && ($select.isEmpty() || $select.open)\" class=\"ui-select-placeholder text-muted\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty() || $select.open\" ng-transclude=\"\"></span></div>");
	$templateCache.put("selectize/no-choice.tpl.html","<div class=\"ui-select-no-choice selectize-dropdown\" ng-show=\"$select.items.length == 0\"><div class=\"selectize-dropdown-content\"><div data-selectable=\"\" ng-transclude=\"\"></div></div></div>");
	$templateCache.put("selectize/select-multiple.tpl.html","<div class=\"ui-select-container selectize-control multi plugin-remove_button\" ng-class=\"{\'open\': $select.open}\"><div class=\"selectize-input\" ng-class=\"{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}\" ng-click=\"$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()\"><div class=\"ui-select-match\"></div><input type=\"search\" autocomplete=\"off\" tabindex=\"-1\" class=\"ui-select-search\" ng-class=\"{\'ui-select-search-hidden\':!$select.searchEnabled}\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-model=\"$select.search\" ng-disabled=\"$select.disabled\" aria-expanded=\"{{$select.open}}\" aria-label=\"{{ $select.baseTitle }}\" ondrop=\"return false;\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");
	$templateCache.put("selectize/select.tpl.html","<div class=\"ui-select-container selectize-control single\" ng-class=\"{\'open\': $select.open}\"><div class=\"selectize-input\" ng-class=\"{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}\" ng-click=\"$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()\"><div class=\"ui-select-match\"></div><input type=\"search\" autocomplete=\"off\" tabindex=\"-1\" class=\"ui-select-search ui-select-toggle\" ng-class=\"{\'ui-select-search-hidden\':!$select.searchEnabled}\" ng-click=\"$select.toggle($event)\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-hide=\"!$select.isEmpty() && !$select.open\" ng-disabled=\"$select.disabled\" aria-label=\"{{ $select.baseTitle }}\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");}]);

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
	__webpack_require__(7)
	__webpack_require__(8)
	__webpack_require__(9)
	__webpack_require__(10)
	__webpack_require__(11)
	__webpack_require__(12)
	__webpack_require__(13)
	__webpack_require__(14)
	__webpack_require__(15)
	__webpack_require__(16)
	__webpack_require__(17)
	__webpack_require__(18)

/***/ },
/* 7 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: transition.js v3.3.7
	 * http://getbootstrap.com/javascript/#transitions
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
	  // ============================================================

	  function transitionEnd() {
	    var el = document.createElement('bootstrap')

	    var transEndEventNames = {
	      WebkitTransition : 'webkitTransitionEnd',
	      MozTransition    : 'transitionend',
	      OTransition      : 'oTransitionEnd otransitionend',
	      transition       : 'transitionend'
	    }

	    for (var name in transEndEventNames) {
	      if (el.style[name] !== undefined) {
	        return { end: transEndEventNames[name] }
	      }
	    }

	    return false // explicit for ie8 (  ._.)
	  }

	  // http://blog.alexmaccaw.com/css-transitions
	  $.fn.emulateTransitionEnd = function (duration) {
	    var called = false
	    var $el = this
	    $(this).one('bsTransitionEnd', function () { called = true })
	    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
	    setTimeout(callback, duration)
	    return this
	  }

	  $(function () {
	    $.support.transition = transitionEnd()

	    if (!$.support.transition) return

	    $.event.special.bsTransitionEnd = {
	      bindType: $.support.transition.end,
	      delegateType: $.support.transition.end,
	      handle: function (e) {
	        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
	      }
	    }
	  })

	}(jQuery);


/***/ },
/* 8 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: alert.js v3.3.7
	 * http://getbootstrap.com/javascript/#alerts
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // ALERT CLASS DEFINITION
	  // ======================

	  var dismiss = '[data-dismiss="alert"]'
	  var Alert   = function (el) {
	    $(el).on('click', dismiss, this.close)
	  }

	  Alert.VERSION = '3.3.7'

	  Alert.TRANSITION_DURATION = 150

	  Alert.prototype.close = function (e) {
	    var $this    = $(this)
	    var selector = $this.attr('data-target')

	    if (!selector) {
	      selector = $this.attr('href')
	      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
	    }

	    var $parent = $(selector === '#' ? [] : selector)

	    if (e) e.preventDefault()

	    if (!$parent.length) {
	      $parent = $this.closest('.alert')
	    }

	    $parent.trigger(e = $.Event('close.bs.alert'))

	    if (e.isDefaultPrevented()) return

	    $parent.removeClass('in')

	    function removeElement() {
	      // detach from parent, fire event then clean up data
	      $parent.detach().trigger('closed.bs.alert').remove()
	    }

	    $.support.transition && $parent.hasClass('fade') ?
	      $parent
	        .one('bsTransitionEnd', removeElement)
	        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
	      removeElement()
	  }


	  // ALERT PLUGIN DEFINITION
	  // =======================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this)
	      var data  = $this.data('bs.alert')

	      if (!data) $this.data('bs.alert', (data = new Alert(this)))
	      if (typeof option == 'string') data[option].call($this)
	    })
	  }

	  var old = $.fn.alert

	  $.fn.alert             = Plugin
	  $.fn.alert.Constructor = Alert


	  // ALERT NO CONFLICT
	  // =================

	  $.fn.alert.noConflict = function () {
	    $.fn.alert = old
	    return this
	  }


	  // ALERT DATA-API
	  // ==============

	  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

	}(jQuery);


/***/ },
/* 9 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: button.js v3.3.7
	 * http://getbootstrap.com/javascript/#buttons
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // BUTTON PUBLIC CLASS DEFINITION
	  // ==============================

	  var Button = function (element, options) {
	    this.$element  = $(element)
	    this.options   = $.extend({}, Button.DEFAULTS, options)
	    this.isLoading = false
	  }

	  Button.VERSION  = '3.3.7'

	  Button.DEFAULTS = {
	    loadingText: 'loading...'
	  }

	  Button.prototype.setState = function (state) {
	    var d    = 'disabled'
	    var $el  = this.$element
	    var val  = $el.is('input') ? 'val' : 'html'
	    var data = $el.data()

	    state += 'Text'

	    if (data.resetText == null) $el.data('resetText', $el[val]())

	    // push to event loop to allow forms to submit
	    setTimeout($.proxy(function () {
	      $el[val](data[state] == null ? this.options[state] : data[state])

	      if (state == 'loadingText') {
	        this.isLoading = true
	        $el.addClass(d).attr(d, d).prop(d, true)
	      } else if (this.isLoading) {
	        this.isLoading = false
	        $el.removeClass(d).removeAttr(d).prop(d, false)
	      }
	    }, this), 0)
	  }

	  Button.prototype.toggle = function () {
	    var changed = true
	    var $parent = this.$element.closest('[data-toggle="buttons"]')

	    if ($parent.length) {
	      var $input = this.$element.find('input')
	      if ($input.prop('type') == 'radio') {
	        if ($input.prop('checked')) changed = false
	        $parent.find('.active').removeClass('active')
	        this.$element.addClass('active')
	      } else if ($input.prop('type') == 'checkbox') {
	        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
	        this.$element.toggleClass('active')
	      }
	      $input.prop('checked', this.$element.hasClass('active'))
	      if (changed) $input.trigger('change')
	    } else {
	      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
	      this.$element.toggleClass('active')
	    }
	  }


	  // BUTTON PLUGIN DEFINITION
	  // ========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.button')
	      var options = typeof option == 'object' && option

	      if (!data) $this.data('bs.button', (data = new Button(this, options)))

	      if (option == 'toggle') data.toggle()
	      else if (option) data.setState(option)
	    })
	  }

	  var old = $.fn.button

	  $.fn.button             = Plugin
	  $.fn.button.Constructor = Button


	  // BUTTON NO CONFLICT
	  // ==================

	  $.fn.button.noConflict = function () {
	    $.fn.button = old
	    return this
	  }


	  // BUTTON DATA-API
	  // ===============

	  $(document)
	    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
	      var $btn = $(e.target).closest('.btn')
	      Plugin.call($btn, 'toggle')
	      if (!($(e.target).is('input[type="radio"], input[type="checkbox"]'))) {
	        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
	        e.preventDefault()
	        // The target component still receive the focus
	        if ($btn.is('input,button')) $btn.trigger('focus')
	        else $btn.find('input:visible,button:visible').first().trigger('focus')
	      }
	    })
	    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
	      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
	    })

	}(jQuery);


/***/ },
/* 10 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: carousel.js v3.3.7
	 * http://getbootstrap.com/javascript/#carousel
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // CAROUSEL CLASS DEFINITION
	  // =========================

	  var Carousel = function (element, options) {
	    this.$element    = $(element)
	    this.$indicators = this.$element.find('.carousel-indicators')
	    this.options     = options
	    this.paused      = null
	    this.sliding     = null
	    this.interval    = null
	    this.$active     = null
	    this.$items      = null

	    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

	    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
	      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
	      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
	  }

	  Carousel.VERSION  = '3.3.7'

	  Carousel.TRANSITION_DURATION = 600

	  Carousel.DEFAULTS = {
	    interval: 5000,
	    pause: 'hover',
	    wrap: true,
	    keyboard: true
	  }

	  Carousel.prototype.keydown = function (e) {
	    if (/input|textarea/i.test(e.target.tagName)) return
	    switch (e.which) {
	      case 37: this.prev(); break
	      case 39: this.next(); break
	      default: return
	    }

	    e.preventDefault()
	  }

	  Carousel.prototype.cycle = function (e) {
	    e || (this.paused = false)

	    this.interval && clearInterval(this.interval)

	    this.options.interval
	      && !this.paused
	      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

	    return this
	  }

	  Carousel.prototype.getItemIndex = function (item) {
	    this.$items = item.parent().children('.item')
	    return this.$items.index(item || this.$active)
	  }

	  Carousel.prototype.getItemForDirection = function (direction, active) {
	    var activeIndex = this.getItemIndex(active)
	    var willWrap = (direction == 'prev' && activeIndex === 0)
	                || (direction == 'next' && activeIndex == (this.$items.length - 1))
	    if (willWrap && !this.options.wrap) return active
	    var delta = direction == 'prev' ? -1 : 1
	    var itemIndex = (activeIndex + delta) % this.$items.length
	    return this.$items.eq(itemIndex)
	  }

	  Carousel.prototype.to = function (pos) {
	    var that        = this
	    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

	    if (pos > (this.$items.length - 1) || pos < 0) return

	    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
	    if (activeIndex == pos) return this.pause().cycle()

	    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
	  }

	  Carousel.prototype.pause = function (e) {
	    e || (this.paused = true)

	    if (this.$element.find('.next, .prev').length && $.support.transition) {
	      this.$element.trigger($.support.transition.end)
	      this.cycle(true)
	    }

	    this.interval = clearInterval(this.interval)

	    return this
	  }

	  Carousel.prototype.next = function () {
	    if (this.sliding) return
	    return this.slide('next')
	  }

	  Carousel.prototype.prev = function () {
	    if (this.sliding) return
	    return this.slide('prev')
	  }

	  Carousel.prototype.slide = function (type, next) {
	    var $active   = this.$element.find('.item.active')
	    var $next     = next || this.getItemForDirection(type, $active)
	    var isCycling = this.interval
	    var direction = type == 'next' ? 'left' : 'right'
	    var that      = this

	    if ($next.hasClass('active')) return (this.sliding = false)

	    var relatedTarget = $next[0]
	    var slideEvent = $.Event('slide.bs.carousel', {
	      relatedTarget: relatedTarget,
	      direction: direction
	    })
	    this.$element.trigger(slideEvent)
	    if (slideEvent.isDefaultPrevented()) return

	    this.sliding = true

	    isCycling && this.pause()

	    if (this.$indicators.length) {
	      this.$indicators.find('.active').removeClass('active')
	      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
	      $nextIndicator && $nextIndicator.addClass('active')
	    }

	    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
	    if ($.support.transition && this.$element.hasClass('slide')) {
	      $next.addClass(type)
	      $next[0].offsetWidth // force reflow
	      $active.addClass(direction)
	      $next.addClass(direction)
	      $active
	        .one('bsTransitionEnd', function () {
	          $next.removeClass([type, direction].join(' ')).addClass('active')
	          $active.removeClass(['active', direction].join(' '))
	          that.sliding = false
	          setTimeout(function () {
	            that.$element.trigger(slidEvent)
	          }, 0)
	        })
	        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
	    } else {
	      $active.removeClass('active')
	      $next.addClass('active')
	      this.sliding = false
	      this.$element.trigger(slidEvent)
	    }

	    isCycling && this.cycle()

	    return this
	  }


	  // CAROUSEL PLUGIN DEFINITION
	  // ==========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.carousel')
	      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
	      var action  = typeof option == 'string' ? option : options.slide

	      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
	      if (typeof option == 'number') data.to(option)
	      else if (action) data[action]()
	      else if (options.interval) data.pause().cycle()
	    })
	  }

	  var old = $.fn.carousel

	  $.fn.carousel             = Plugin
	  $.fn.carousel.Constructor = Carousel


	  // CAROUSEL NO CONFLICT
	  // ====================

	  $.fn.carousel.noConflict = function () {
	    $.fn.carousel = old
	    return this
	  }


	  // CAROUSEL DATA-API
	  // =================

	  var clickHandler = function (e) {
	    var href
	    var $this   = $(this)
	    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
	    if (!$target.hasClass('carousel')) return
	    var options = $.extend({}, $target.data(), $this.data())
	    var slideIndex = $this.attr('data-slide-to')
	    if (slideIndex) options.interval = false

	    Plugin.call($target, options)

	    if (slideIndex) {
	      $target.data('bs.carousel').to(slideIndex)
	    }

	    e.preventDefault()
	  }

	  $(document)
	    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
	    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

	  $(window).on('load', function () {
	    $('[data-ride="carousel"]').each(function () {
	      var $carousel = $(this)
	      Plugin.call($carousel, $carousel.data())
	    })
	  })

	}(jQuery);


/***/ },
/* 11 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: collapse.js v3.3.7
	 * http://getbootstrap.com/javascript/#collapse
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	/* jshint latedef: false */

	+function ($) {
	  'use strict';

	  // COLLAPSE PUBLIC CLASS DEFINITION
	  // ================================

	  var Collapse = function (element, options) {
	    this.$element      = $(element)
	    this.options       = $.extend({}, Collapse.DEFAULTS, options)
	    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
	                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
	    this.transitioning = null

	    if (this.options.parent) {
	      this.$parent = this.getParent()
	    } else {
	      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
	    }

	    if (this.options.toggle) this.toggle()
	  }

	  Collapse.VERSION  = '3.3.7'

	  Collapse.TRANSITION_DURATION = 350

	  Collapse.DEFAULTS = {
	    toggle: true
	  }

	  Collapse.prototype.dimension = function () {
	    var hasWidth = this.$element.hasClass('width')
	    return hasWidth ? 'width' : 'height'
	  }

	  Collapse.prototype.show = function () {
	    if (this.transitioning || this.$element.hasClass('in')) return

	    var activesData
	    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

	    if (actives && actives.length) {
	      activesData = actives.data('bs.collapse')
	      if (activesData && activesData.transitioning) return
	    }

	    var startEvent = $.Event('show.bs.collapse')
	    this.$element.trigger(startEvent)
	    if (startEvent.isDefaultPrevented()) return

	    if (actives && actives.length) {
	      Plugin.call(actives, 'hide')
	      activesData || actives.data('bs.collapse', null)
	    }

	    var dimension = this.dimension()

	    this.$element
	      .removeClass('collapse')
	      .addClass('collapsing')[dimension](0)
	      .attr('aria-expanded', true)

	    this.$trigger
	      .removeClass('collapsed')
	      .attr('aria-expanded', true)

	    this.transitioning = 1

	    var complete = function () {
	      this.$element
	        .removeClass('collapsing')
	        .addClass('collapse in')[dimension]('')
	      this.transitioning = 0
	      this.$element
	        .trigger('shown.bs.collapse')
	    }

	    if (!$.support.transition) return complete.call(this)

	    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

	    this.$element
	      .one('bsTransitionEnd', $.proxy(complete, this))
	      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
	  }

	  Collapse.prototype.hide = function () {
	    if (this.transitioning || !this.$element.hasClass('in')) return

	    var startEvent = $.Event('hide.bs.collapse')
	    this.$element.trigger(startEvent)
	    if (startEvent.isDefaultPrevented()) return

	    var dimension = this.dimension()

	    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

	    this.$element
	      .addClass('collapsing')
	      .removeClass('collapse in')
	      .attr('aria-expanded', false)

	    this.$trigger
	      .addClass('collapsed')
	      .attr('aria-expanded', false)

	    this.transitioning = 1

	    var complete = function () {
	      this.transitioning = 0
	      this.$element
	        .removeClass('collapsing')
	        .addClass('collapse')
	        .trigger('hidden.bs.collapse')
	    }

	    if (!$.support.transition) return complete.call(this)

	    this.$element
	      [dimension](0)
	      .one('bsTransitionEnd', $.proxy(complete, this))
	      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
	  }

	  Collapse.prototype.toggle = function () {
	    this[this.$element.hasClass('in') ? 'hide' : 'show']()
	  }

	  Collapse.prototype.getParent = function () {
	    return $(this.options.parent)
	      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
	      .each($.proxy(function (i, element) {
	        var $element = $(element)
	        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
	      }, this))
	      .end()
	  }

	  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
	    var isOpen = $element.hasClass('in')

	    $element.attr('aria-expanded', isOpen)
	    $trigger
	      .toggleClass('collapsed', !isOpen)
	      .attr('aria-expanded', isOpen)
	  }

	  function getTargetFromTrigger($trigger) {
	    var href
	    var target = $trigger.attr('data-target')
	      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

	    return $(target)
	  }


	  // COLLAPSE PLUGIN DEFINITION
	  // ==========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.collapse')
	      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

	      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
	      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  var old = $.fn.collapse

	  $.fn.collapse             = Plugin
	  $.fn.collapse.Constructor = Collapse


	  // COLLAPSE NO CONFLICT
	  // ====================

	  $.fn.collapse.noConflict = function () {
	    $.fn.collapse = old
	    return this
	  }


	  // COLLAPSE DATA-API
	  // =================

	  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
	    var $this   = $(this)

	    if (!$this.attr('data-target')) e.preventDefault()

	    var $target = getTargetFromTrigger($this)
	    var data    = $target.data('bs.collapse')
	    var option  = data ? 'toggle' : $this.data()

	    Plugin.call($target, option)
	  })

	}(jQuery);


/***/ },
/* 12 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: dropdown.js v3.3.7
	 * http://getbootstrap.com/javascript/#dropdowns
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // DROPDOWN CLASS DEFINITION
	  // =========================

	  var backdrop = '.dropdown-backdrop'
	  var toggle   = '[data-toggle="dropdown"]'
	  var Dropdown = function (element) {
	    $(element).on('click.bs.dropdown', this.toggle)
	  }

	  Dropdown.VERSION = '3.3.7'

	  function getParent($this) {
	    var selector = $this.attr('data-target')

	    if (!selector) {
	      selector = $this.attr('href')
	      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
	    }

	    var $parent = selector && $(selector)

	    return $parent && $parent.length ? $parent : $this.parent()
	  }

	  function clearMenus(e) {
	    if (e && e.which === 3) return
	    $(backdrop).remove()
	    $(toggle).each(function () {
	      var $this         = $(this)
	      var $parent       = getParent($this)
	      var relatedTarget = { relatedTarget: this }

	      if (!$parent.hasClass('open')) return

	      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

	      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

	      if (e.isDefaultPrevented()) return

	      $this.attr('aria-expanded', 'false')
	      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
	    })
	  }

	  Dropdown.prototype.toggle = function (e) {
	    var $this = $(this)

	    if ($this.is('.disabled, :disabled')) return

	    var $parent  = getParent($this)
	    var isActive = $parent.hasClass('open')

	    clearMenus()

	    if (!isActive) {
	      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
	        // if mobile we use a backdrop because click events don't delegate
	        $(document.createElement('div'))
	          .addClass('dropdown-backdrop')
	          .insertAfter($(this))
	          .on('click', clearMenus)
	      }

	      var relatedTarget = { relatedTarget: this }
	      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

	      if (e.isDefaultPrevented()) return

	      $this
	        .trigger('focus')
	        .attr('aria-expanded', 'true')

	      $parent
	        .toggleClass('open')
	        .trigger($.Event('shown.bs.dropdown', relatedTarget))
	    }

	    return false
	  }

	  Dropdown.prototype.keydown = function (e) {
	    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

	    var $this = $(this)

	    e.preventDefault()
	    e.stopPropagation()

	    if ($this.is('.disabled, :disabled')) return

	    var $parent  = getParent($this)
	    var isActive = $parent.hasClass('open')

	    if (!isActive && e.which != 27 || isActive && e.which == 27) {
	      if (e.which == 27) $parent.find(toggle).trigger('focus')
	      return $this.trigger('click')
	    }

	    var desc = ' li:not(.disabled):visible a'
	    var $items = $parent.find('.dropdown-menu' + desc)

	    if (!$items.length) return

	    var index = $items.index(e.target)

	    if (e.which == 38 && index > 0)                 index--         // up
	    if (e.which == 40 && index < $items.length - 1) index++         // down
	    if (!~index)                                    index = 0

	    $items.eq(index).trigger('focus')
	  }


	  // DROPDOWN PLUGIN DEFINITION
	  // ==========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this)
	      var data  = $this.data('bs.dropdown')

	      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
	      if (typeof option == 'string') data[option].call($this)
	    })
	  }

	  var old = $.fn.dropdown

	  $.fn.dropdown             = Plugin
	  $.fn.dropdown.Constructor = Dropdown


	  // DROPDOWN NO CONFLICT
	  // ====================

	  $.fn.dropdown.noConflict = function () {
	    $.fn.dropdown = old
	    return this
	  }


	  // APPLY TO STANDARD DROPDOWN ELEMENTS
	  // ===================================

	  $(document)
	    .on('click.bs.dropdown.data-api', clearMenus)
	    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
	    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
	    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
	    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

	}(jQuery);


/***/ },
/* 13 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: modal.js v3.3.7
	 * http://getbootstrap.com/javascript/#modals
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // MODAL CLASS DEFINITION
	  // ======================

	  var Modal = function (element, options) {
	    this.options             = options
	    this.$body               = $(document.body)
	    this.$element            = $(element)
	    this.$dialog             = this.$element.find('.modal-dialog')
	    this.$backdrop           = null
	    this.isShown             = null
	    this.originalBodyPad     = null
	    this.scrollbarWidth      = 0
	    this.ignoreBackdropClick = false

	    if (this.options.remote) {
	      this.$element
	        .find('.modal-content')
	        .load(this.options.remote, $.proxy(function () {
	          this.$element.trigger('loaded.bs.modal')
	        }, this))
	    }
	  }

	  Modal.VERSION  = '3.3.7'

	  Modal.TRANSITION_DURATION = 300
	  Modal.BACKDROP_TRANSITION_DURATION = 150

	  Modal.DEFAULTS = {
	    backdrop: true,
	    keyboard: true,
	    show: true
	  }

	  Modal.prototype.toggle = function (_relatedTarget) {
	    return this.isShown ? this.hide() : this.show(_relatedTarget)
	  }

	  Modal.prototype.show = function (_relatedTarget) {
	    var that = this
	    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

	    this.$element.trigger(e)

	    if (this.isShown || e.isDefaultPrevented()) return

	    this.isShown = true

	    this.checkScrollbar()
	    this.setScrollbar()
	    this.$body.addClass('modal-open')

	    this.escape()
	    this.resize()

	    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

	    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
	      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
	        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
	      })
	    })

	    this.backdrop(function () {
	      var transition = $.support.transition && that.$element.hasClass('fade')

	      if (!that.$element.parent().length) {
	        that.$element.appendTo(that.$body) // don't move modals dom position
	      }

	      that.$element
	        .show()
	        .scrollTop(0)

	      that.adjustDialog()

	      if (transition) {
	        that.$element[0].offsetWidth // force reflow
	      }

	      that.$element.addClass('in')

	      that.enforceFocus()

	      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

	      transition ?
	        that.$dialog // wait for modal to slide in
	          .one('bsTransitionEnd', function () {
	            that.$element.trigger('focus').trigger(e)
	          })
	          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
	        that.$element.trigger('focus').trigger(e)
	    })
	  }

	  Modal.prototype.hide = function (e) {
	    if (e) e.preventDefault()

	    e = $.Event('hide.bs.modal')

	    this.$element.trigger(e)

	    if (!this.isShown || e.isDefaultPrevented()) return

	    this.isShown = false

	    this.escape()
	    this.resize()

	    $(document).off('focusin.bs.modal')

	    this.$element
	      .removeClass('in')
	      .off('click.dismiss.bs.modal')
	      .off('mouseup.dismiss.bs.modal')

	    this.$dialog.off('mousedown.dismiss.bs.modal')

	    $.support.transition && this.$element.hasClass('fade') ?
	      this.$element
	        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
	        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
	      this.hideModal()
	  }

	  Modal.prototype.enforceFocus = function () {
	    $(document)
	      .off('focusin.bs.modal') // guard against infinite focus loop
	      .on('focusin.bs.modal', $.proxy(function (e) {
	        if (document !== e.target &&
	            this.$element[0] !== e.target &&
	            !this.$element.has(e.target).length) {
	          this.$element.trigger('focus')
	        }
	      }, this))
	  }

	  Modal.prototype.escape = function () {
	    if (this.isShown && this.options.keyboard) {
	      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
	        e.which == 27 && this.hide()
	      }, this))
	    } else if (!this.isShown) {
	      this.$element.off('keydown.dismiss.bs.modal')
	    }
	  }

	  Modal.prototype.resize = function () {
	    if (this.isShown) {
	      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
	    } else {
	      $(window).off('resize.bs.modal')
	    }
	  }

	  Modal.prototype.hideModal = function () {
	    var that = this
	    this.$element.hide()
	    this.backdrop(function () {
	      that.$body.removeClass('modal-open')
	      that.resetAdjustments()
	      that.resetScrollbar()
	      that.$element.trigger('hidden.bs.modal')
	    })
	  }

	  Modal.prototype.removeBackdrop = function () {
	    this.$backdrop && this.$backdrop.remove()
	    this.$backdrop = null
	  }

	  Modal.prototype.backdrop = function (callback) {
	    var that = this
	    var animate = this.$element.hasClass('fade') ? 'fade' : ''

	    if (this.isShown && this.options.backdrop) {
	      var doAnimate = $.support.transition && animate

	      this.$backdrop = $(document.createElement('div'))
	        .addClass('modal-backdrop ' + animate)
	        .appendTo(this.$body)

	      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
	        if (this.ignoreBackdropClick) {
	          this.ignoreBackdropClick = false
	          return
	        }
	        if (e.target !== e.currentTarget) return
	        this.options.backdrop == 'static'
	          ? this.$element[0].focus()
	          : this.hide()
	      }, this))

	      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

	      this.$backdrop.addClass('in')

	      if (!callback) return

	      doAnimate ?
	        this.$backdrop
	          .one('bsTransitionEnd', callback)
	          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
	        callback()

	    } else if (!this.isShown && this.$backdrop) {
	      this.$backdrop.removeClass('in')

	      var callbackRemove = function () {
	        that.removeBackdrop()
	        callback && callback()
	      }
	      $.support.transition && this.$element.hasClass('fade') ?
	        this.$backdrop
	          .one('bsTransitionEnd', callbackRemove)
	          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
	        callbackRemove()

	    } else if (callback) {
	      callback()
	    }
	  }

	  // these following methods are used to handle overflowing modals

	  Modal.prototype.handleUpdate = function () {
	    this.adjustDialog()
	  }

	  Modal.prototype.adjustDialog = function () {
	    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

	    this.$element.css({
	      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
	      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
	    })
	  }

	  Modal.prototype.resetAdjustments = function () {
	    this.$element.css({
	      paddingLeft: '',
	      paddingRight: ''
	    })
	  }

	  Modal.prototype.checkScrollbar = function () {
	    var fullWindowWidth = window.innerWidth
	    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
	      var documentElementRect = document.documentElement.getBoundingClientRect()
	      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
	    }
	    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
	    this.scrollbarWidth = this.measureScrollbar()
	  }

	  Modal.prototype.setScrollbar = function () {
	    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
	    this.originalBodyPad = document.body.style.paddingRight || ''
	    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
	  }

	  Modal.prototype.resetScrollbar = function () {
	    this.$body.css('padding-right', this.originalBodyPad)
	  }

	  Modal.prototype.measureScrollbar = function () { // thx walsh
	    var scrollDiv = document.createElement('div')
	    scrollDiv.className = 'modal-scrollbar-measure'
	    this.$body.append(scrollDiv)
	    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
	    this.$body[0].removeChild(scrollDiv)
	    return scrollbarWidth
	  }


	  // MODAL PLUGIN DEFINITION
	  // =======================

	  function Plugin(option, _relatedTarget) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.modal')
	      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

	      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
	      if (typeof option == 'string') data[option](_relatedTarget)
	      else if (options.show) data.show(_relatedTarget)
	    })
	  }

	  var old = $.fn.modal

	  $.fn.modal             = Plugin
	  $.fn.modal.Constructor = Modal


	  // MODAL NO CONFLICT
	  // =================

	  $.fn.modal.noConflict = function () {
	    $.fn.modal = old
	    return this
	  }


	  // MODAL DATA-API
	  // ==============

	  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
	    var $this   = $(this)
	    var href    = $this.attr('href')
	    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
	    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

	    if ($this.is('a')) e.preventDefault()

	    $target.one('show.bs.modal', function (showEvent) {
	      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
	      $target.one('hidden.bs.modal', function () {
	        $this.is(':visible') && $this.trigger('focus')
	      })
	    })
	    Plugin.call($target, option, this)
	  })

	}(jQuery);


/***/ },
/* 14 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: tooltip.js v3.3.7
	 * http://getbootstrap.com/javascript/#tooltip
	 * Inspired by the original jQuery.tipsy by Jason Frame
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // TOOLTIP PUBLIC CLASS DEFINITION
	  // ===============================

	  var Tooltip = function (element, options) {
	    this.type       = null
	    this.options    = null
	    this.enabled    = null
	    this.timeout    = null
	    this.hoverState = null
	    this.$element   = null
	    this.inState    = null

	    this.init('tooltip', element, options)
	  }

	  Tooltip.VERSION  = '3.3.7'

	  Tooltip.TRANSITION_DURATION = 150

	  Tooltip.DEFAULTS = {
	    animation: true,
	    placement: 'top',
	    selector: false,
	    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
	    trigger: 'hover focus',
	    title: '',
	    delay: 0,
	    html: false,
	    container: false,
	    viewport: {
	      selector: 'body',
	      padding: 0
	    }
	  }

	  Tooltip.prototype.init = function (type, element, options) {
	    this.enabled   = true
	    this.type      = type
	    this.$element  = $(element)
	    this.options   = this.getOptions(options)
	    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
	    this.inState   = { click: false, hover: false, focus: false }

	    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
	      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
	    }

	    var triggers = this.options.trigger.split(' ')

	    for (var i = triggers.length; i--;) {
	      var trigger = triggers[i]

	      if (trigger == 'click') {
	        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
	      } else if (trigger != 'manual') {
	        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
	        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

	        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
	        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
	      }
	    }

	    this.options.selector ?
	      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
	      this.fixTitle()
	  }

	  Tooltip.prototype.getDefaults = function () {
	    return Tooltip.DEFAULTS
	  }

	  Tooltip.prototype.getOptions = function (options) {
	    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

	    if (options.delay && typeof options.delay == 'number') {
	      options.delay = {
	        show: options.delay,
	        hide: options.delay
	      }
	    }

	    return options
	  }

	  Tooltip.prototype.getDelegateOptions = function () {
	    var options  = {}
	    var defaults = this.getDefaults()

	    this._options && $.each(this._options, function (key, value) {
	      if (defaults[key] != value) options[key] = value
	    })

	    return options
	  }

	  Tooltip.prototype.enter = function (obj) {
	    var self = obj instanceof this.constructor ?
	      obj : $(obj.currentTarget).data('bs.' + this.type)

	    if (!self) {
	      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
	      $(obj.currentTarget).data('bs.' + this.type, self)
	    }

	    if (obj instanceof $.Event) {
	      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
	    }

	    if (self.tip().hasClass('in') || self.hoverState == 'in') {
	      self.hoverState = 'in'
	      return
	    }

	    clearTimeout(self.timeout)

	    self.hoverState = 'in'

	    if (!self.options.delay || !self.options.delay.show) return self.show()

	    self.timeout = setTimeout(function () {
	      if (self.hoverState == 'in') self.show()
	    }, self.options.delay.show)
	  }

	  Tooltip.prototype.isInStateTrue = function () {
	    for (var key in this.inState) {
	      if (this.inState[key]) return true
	    }

	    return false
	  }

	  Tooltip.prototype.leave = function (obj) {
	    var self = obj instanceof this.constructor ?
	      obj : $(obj.currentTarget).data('bs.' + this.type)

	    if (!self) {
	      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
	      $(obj.currentTarget).data('bs.' + this.type, self)
	    }

	    if (obj instanceof $.Event) {
	      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
	    }

	    if (self.isInStateTrue()) return

	    clearTimeout(self.timeout)

	    self.hoverState = 'out'

	    if (!self.options.delay || !self.options.delay.hide) return self.hide()

	    self.timeout = setTimeout(function () {
	      if (self.hoverState == 'out') self.hide()
	    }, self.options.delay.hide)
	  }

	  Tooltip.prototype.show = function () {
	    var e = $.Event('show.bs.' + this.type)

	    if (this.hasContent() && this.enabled) {
	      this.$element.trigger(e)

	      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
	      if (e.isDefaultPrevented() || !inDom) return
	      var that = this

	      var $tip = this.tip()

	      var tipId = this.getUID(this.type)

	      this.setContent()
	      $tip.attr('id', tipId)
	      this.$element.attr('aria-describedby', tipId)

	      if (this.options.animation) $tip.addClass('fade')

	      var placement = typeof this.options.placement == 'function' ?
	        this.options.placement.call(this, $tip[0], this.$element[0]) :
	        this.options.placement

	      var autoToken = /\s?auto?\s?/i
	      var autoPlace = autoToken.test(placement)
	      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

	      $tip
	        .detach()
	        .css({ top: 0, left: 0, display: 'block' })
	        .addClass(placement)
	        .data('bs.' + this.type, this)

	      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
	      this.$element.trigger('inserted.bs.' + this.type)

	      var pos          = this.getPosition()
	      var actualWidth  = $tip[0].offsetWidth
	      var actualHeight = $tip[0].offsetHeight

	      if (autoPlace) {
	        var orgPlacement = placement
	        var viewportDim = this.getPosition(this.$viewport)

	        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
	                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
	                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
	                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
	                    placement

	        $tip
	          .removeClass(orgPlacement)
	          .addClass(placement)
	      }

	      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

	      this.applyPlacement(calculatedOffset, placement)

	      var complete = function () {
	        var prevHoverState = that.hoverState
	        that.$element.trigger('shown.bs.' + that.type)
	        that.hoverState = null

	        if (prevHoverState == 'out') that.leave(that)
	      }

	      $.support.transition && this.$tip.hasClass('fade') ?
	        $tip
	          .one('bsTransitionEnd', complete)
	          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
	        complete()
	    }
	  }

	  Tooltip.prototype.applyPlacement = function (offset, placement) {
	    var $tip   = this.tip()
	    var width  = $tip[0].offsetWidth
	    var height = $tip[0].offsetHeight

	    // manually read margins because getBoundingClientRect includes difference
	    var marginTop = parseInt($tip.css('margin-top'), 10)
	    var marginLeft = parseInt($tip.css('margin-left'), 10)

	    // we must check for NaN for ie 8/9
	    if (isNaN(marginTop))  marginTop  = 0
	    if (isNaN(marginLeft)) marginLeft = 0

	    offset.top  += marginTop
	    offset.left += marginLeft

	    // $.fn.offset doesn't round pixel values
	    // so we use setOffset directly with our own function B-0
	    $.offset.setOffset($tip[0], $.extend({
	      using: function (props) {
	        $tip.css({
	          top: Math.round(props.top),
	          left: Math.round(props.left)
	        })
	      }
	    }, offset), 0)

	    $tip.addClass('in')

	    // check to see if placing tip in new offset caused the tip to resize itself
	    var actualWidth  = $tip[0].offsetWidth
	    var actualHeight = $tip[0].offsetHeight

	    if (placement == 'top' && actualHeight != height) {
	      offset.top = offset.top + height - actualHeight
	    }

	    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

	    if (delta.left) offset.left += delta.left
	    else offset.top += delta.top

	    var isVertical          = /top|bottom/.test(placement)
	    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
	    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

	    $tip.offset(offset)
	    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
	  }

	  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
	    this.arrow()
	      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
	      .css(isVertical ? 'top' : 'left', '')
	  }

	  Tooltip.prototype.setContent = function () {
	    var $tip  = this.tip()
	    var title = this.getTitle()

	    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
	    $tip.removeClass('fade in top bottom left right')
	  }

	  Tooltip.prototype.hide = function (callback) {
	    var that = this
	    var $tip = $(this.$tip)
	    var e    = $.Event('hide.bs.' + this.type)

	    function complete() {
	      if (that.hoverState != 'in') $tip.detach()
	      if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.
	        that.$element
	          .removeAttr('aria-describedby')
	          .trigger('hidden.bs.' + that.type)
	      }
	      callback && callback()
	    }

	    this.$element.trigger(e)

	    if (e.isDefaultPrevented()) return

	    $tip.removeClass('in')

	    $.support.transition && $tip.hasClass('fade') ?
	      $tip
	        .one('bsTransitionEnd', complete)
	        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
	      complete()

	    this.hoverState = null

	    return this
	  }

	  Tooltip.prototype.fixTitle = function () {
	    var $e = this.$element
	    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
	      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
	    }
	  }

	  Tooltip.prototype.hasContent = function () {
	    return this.getTitle()
	  }

	  Tooltip.prototype.getPosition = function ($element) {
	    $element   = $element || this.$element

	    var el     = $element[0]
	    var isBody = el.tagName == 'BODY'

	    var elRect    = el.getBoundingClientRect()
	    if (elRect.width == null) {
	      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
	      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
	    }
	    var isSvg = window.SVGElement && el instanceof window.SVGElement
	    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
	    // See https://github.com/twbs/bootstrap/issues/20280
	    var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())
	    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
	    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

	    return $.extend({}, elRect, scroll, outerDims, elOffset)
	  }

	  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
	    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
	           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
	           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
	        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

	  }

	  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
	    var delta = { top: 0, left: 0 }
	    if (!this.$viewport) return delta

	    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
	    var viewportDimensions = this.getPosition(this.$viewport)

	    if (/right|left/.test(placement)) {
	      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
	      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
	      if (topEdgeOffset < viewportDimensions.top) { // top overflow
	        delta.top = viewportDimensions.top - topEdgeOffset
	      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
	        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
	      }
	    } else {
	      var leftEdgeOffset  = pos.left - viewportPadding
	      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
	      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
	        delta.left = viewportDimensions.left - leftEdgeOffset
	      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
	        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
	      }
	    }

	    return delta
	  }

	  Tooltip.prototype.getTitle = function () {
	    var title
	    var $e = this.$element
	    var o  = this.options

	    title = $e.attr('data-original-title')
	      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

	    return title
	  }

	  Tooltip.prototype.getUID = function (prefix) {
	    do prefix += ~~(Math.random() * 1000000)
	    while (document.getElementById(prefix))
	    return prefix
	  }

	  Tooltip.prototype.tip = function () {
	    if (!this.$tip) {
	      this.$tip = $(this.options.template)
	      if (this.$tip.length != 1) {
	        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
	      }
	    }
	    return this.$tip
	  }

	  Tooltip.prototype.arrow = function () {
	    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
	  }

	  Tooltip.prototype.enable = function () {
	    this.enabled = true
	  }

	  Tooltip.prototype.disable = function () {
	    this.enabled = false
	  }

	  Tooltip.prototype.toggleEnabled = function () {
	    this.enabled = !this.enabled
	  }

	  Tooltip.prototype.toggle = function (e) {
	    var self = this
	    if (e) {
	      self = $(e.currentTarget).data('bs.' + this.type)
	      if (!self) {
	        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
	        $(e.currentTarget).data('bs.' + this.type, self)
	      }
	    }

	    if (e) {
	      self.inState.click = !self.inState.click
	      if (self.isInStateTrue()) self.enter(self)
	      else self.leave(self)
	    } else {
	      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
	    }
	  }

	  Tooltip.prototype.destroy = function () {
	    var that = this
	    clearTimeout(this.timeout)
	    this.hide(function () {
	      that.$element.off('.' + that.type).removeData('bs.' + that.type)
	      if (that.$tip) {
	        that.$tip.detach()
	      }
	      that.$tip = null
	      that.$arrow = null
	      that.$viewport = null
	      that.$element = null
	    })
	  }


	  // TOOLTIP PLUGIN DEFINITION
	  // =========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.tooltip')
	      var options = typeof option == 'object' && option

	      if (!data && /destroy|hide/.test(option)) return
	      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  var old = $.fn.tooltip

	  $.fn.tooltip             = Plugin
	  $.fn.tooltip.Constructor = Tooltip


	  // TOOLTIP NO CONFLICT
	  // ===================

	  $.fn.tooltip.noConflict = function () {
	    $.fn.tooltip = old
	    return this
	  }

	}(jQuery);


/***/ },
/* 15 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: popover.js v3.3.7
	 * http://getbootstrap.com/javascript/#popovers
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // POPOVER PUBLIC CLASS DEFINITION
	  // ===============================

	  var Popover = function (element, options) {
	    this.init('popover', element, options)
	  }

	  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

	  Popover.VERSION  = '3.3.7'

	  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
	    placement: 'right',
	    trigger: 'click',
	    content: '',
	    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
	  })


	  // NOTE: POPOVER EXTENDS tooltip.js
	  // ================================

	  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

	  Popover.prototype.constructor = Popover

	  Popover.prototype.getDefaults = function () {
	    return Popover.DEFAULTS
	  }

	  Popover.prototype.setContent = function () {
	    var $tip    = this.tip()
	    var title   = this.getTitle()
	    var content = this.getContent()

	    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
	    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
	      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
	    ](content)

	    $tip.removeClass('fade top bottom left right in')

	    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
	    // this manually by checking the contents.
	    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
	  }

	  Popover.prototype.hasContent = function () {
	    return this.getTitle() || this.getContent()
	  }

	  Popover.prototype.getContent = function () {
	    var $e = this.$element
	    var o  = this.options

	    return $e.attr('data-content')
	      || (typeof o.content == 'function' ?
	            o.content.call($e[0]) :
	            o.content)
	  }

	  Popover.prototype.arrow = function () {
	    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
	  }


	  // POPOVER PLUGIN DEFINITION
	  // =========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.popover')
	      var options = typeof option == 'object' && option

	      if (!data && /destroy|hide/.test(option)) return
	      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  var old = $.fn.popover

	  $.fn.popover             = Plugin
	  $.fn.popover.Constructor = Popover


	  // POPOVER NO CONFLICT
	  // ===================

	  $.fn.popover.noConflict = function () {
	    $.fn.popover = old
	    return this
	  }

	}(jQuery);


/***/ },
/* 16 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: scrollspy.js v3.3.7
	 * http://getbootstrap.com/javascript/#scrollspy
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // SCROLLSPY CLASS DEFINITION
	  // ==========================

	  function ScrollSpy(element, options) {
	    this.$body          = $(document.body)
	    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
	    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
	    this.selector       = (this.options.target || '') + ' .nav li > a'
	    this.offsets        = []
	    this.targets        = []
	    this.activeTarget   = null
	    this.scrollHeight   = 0

	    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
	    this.refresh()
	    this.process()
	  }

	  ScrollSpy.VERSION  = '3.3.7'

	  ScrollSpy.DEFAULTS = {
	    offset: 10
	  }

	  ScrollSpy.prototype.getScrollHeight = function () {
	    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
	  }

	  ScrollSpy.prototype.refresh = function () {
	    var that          = this
	    var offsetMethod  = 'offset'
	    var offsetBase    = 0

	    this.offsets      = []
	    this.targets      = []
	    this.scrollHeight = this.getScrollHeight()

	    if (!$.isWindow(this.$scrollElement[0])) {
	      offsetMethod = 'position'
	      offsetBase   = this.$scrollElement.scrollTop()
	    }

	    this.$body
	      .find(this.selector)
	      .map(function () {
	        var $el   = $(this)
	        var href  = $el.data('target') || $el.attr('href')
	        var $href = /^#./.test(href) && $(href)

	        return ($href
	          && $href.length
	          && $href.is(':visible')
	          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
	      })
	      .sort(function (a, b) { return a[0] - b[0] })
	      .each(function () {
	        that.offsets.push(this[0])
	        that.targets.push(this[1])
	      })
	  }

	  ScrollSpy.prototype.process = function () {
	    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
	    var scrollHeight = this.getScrollHeight()
	    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
	    var offsets      = this.offsets
	    var targets      = this.targets
	    var activeTarget = this.activeTarget
	    var i

	    if (this.scrollHeight != scrollHeight) {
	      this.refresh()
	    }

	    if (scrollTop >= maxScroll) {
	      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
	    }

	    if (activeTarget && scrollTop < offsets[0]) {
	      this.activeTarget = null
	      return this.clear()
	    }

	    for (i = offsets.length; i--;) {
	      activeTarget != targets[i]
	        && scrollTop >= offsets[i]
	        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
	        && this.activate(targets[i])
	    }
	  }

	  ScrollSpy.prototype.activate = function (target) {
	    this.activeTarget = target

	    this.clear()

	    var selector = this.selector +
	      '[data-target="' + target + '"],' +
	      this.selector + '[href="' + target + '"]'

	    var active = $(selector)
	      .parents('li')
	      .addClass('active')

	    if (active.parent('.dropdown-menu').length) {
	      active = active
	        .closest('li.dropdown')
	        .addClass('active')
	    }

	    active.trigger('activate.bs.scrollspy')
	  }

	  ScrollSpy.prototype.clear = function () {
	    $(this.selector)
	      .parentsUntil(this.options.target, '.active')
	      .removeClass('active')
	  }


	  // SCROLLSPY PLUGIN DEFINITION
	  // ===========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.scrollspy')
	      var options = typeof option == 'object' && option

	      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  var old = $.fn.scrollspy

	  $.fn.scrollspy             = Plugin
	  $.fn.scrollspy.Constructor = ScrollSpy


	  // SCROLLSPY NO CONFLICT
	  // =====================

	  $.fn.scrollspy.noConflict = function () {
	    $.fn.scrollspy = old
	    return this
	  }


	  // SCROLLSPY DATA-API
	  // ==================

	  $(window).on('load.bs.scrollspy.data-api', function () {
	    $('[data-spy="scroll"]').each(function () {
	      var $spy = $(this)
	      Plugin.call($spy, $spy.data())
	    })
	  })

	}(jQuery);


/***/ },
/* 17 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: tab.js v3.3.7
	 * http://getbootstrap.com/javascript/#tabs
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // TAB CLASS DEFINITION
	  // ====================

	  var Tab = function (element) {
	    // jscs:disable requireDollarBeforejQueryAssignment
	    this.element = $(element)
	    // jscs:enable requireDollarBeforejQueryAssignment
	  }

	  Tab.VERSION = '3.3.7'

	  Tab.TRANSITION_DURATION = 150

	  Tab.prototype.show = function () {
	    var $this    = this.element
	    var $ul      = $this.closest('ul:not(.dropdown-menu)')
	    var selector = $this.data('target')

	    if (!selector) {
	      selector = $this.attr('href')
	      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
	    }

	    if ($this.parent('li').hasClass('active')) return

	    var $previous = $ul.find('.active:last a')
	    var hideEvent = $.Event('hide.bs.tab', {
	      relatedTarget: $this[0]
	    })
	    var showEvent = $.Event('show.bs.tab', {
	      relatedTarget: $previous[0]
	    })

	    $previous.trigger(hideEvent)
	    $this.trigger(showEvent)

	    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

	    var $target = $(selector)

	    this.activate($this.closest('li'), $ul)
	    this.activate($target, $target.parent(), function () {
	      $previous.trigger({
	        type: 'hidden.bs.tab',
	        relatedTarget: $this[0]
	      })
	      $this.trigger({
	        type: 'shown.bs.tab',
	        relatedTarget: $previous[0]
	      })
	    })
	  }

	  Tab.prototype.activate = function (element, container, callback) {
	    var $active    = container.find('> .active')
	    var transition = callback
	      && $.support.transition
	      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

	    function next() {
	      $active
	        .removeClass('active')
	        .find('> .dropdown-menu > .active')
	          .removeClass('active')
	        .end()
	        .find('[data-toggle="tab"]')
	          .attr('aria-expanded', false)

	      element
	        .addClass('active')
	        .find('[data-toggle="tab"]')
	          .attr('aria-expanded', true)

	      if (transition) {
	        element[0].offsetWidth // reflow for transition
	        element.addClass('in')
	      } else {
	        element.removeClass('fade')
	      }

	      if (element.parent('.dropdown-menu').length) {
	        element
	          .closest('li.dropdown')
	            .addClass('active')
	          .end()
	          .find('[data-toggle="tab"]')
	            .attr('aria-expanded', true)
	      }

	      callback && callback()
	    }

	    $active.length && transition ?
	      $active
	        .one('bsTransitionEnd', next)
	        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
	      next()

	    $active.removeClass('in')
	  }


	  // TAB PLUGIN DEFINITION
	  // =====================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this)
	      var data  = $this.data('bs.tab')

	      if (!data) $this.data('bs.tab', (data = new Tab(this)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  var old = $.fn.tab

	  $.fn.tab             = Plugin
	  $.fn.tab.Constructor = Tab


	  // TAB NO CONFLICT
	  // ===============

	  $.fn.tab.noConflict = function () {
	    $.fn.tab = old
	    return this
	  }


	  // TAB DATA-API
	  // ============

	  var clickHandler = function (e) {
	    e.preventDefault()
	    Plugin.call($(this), 'show')
	  }

	  $(document)
	    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
	    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

	}(jQuery);


/***/ },
/* 18 */
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: affix.js v3.3.7
	 * http://getbootstrap.com/javascript/#affix
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // AFFIX CLASS DEFINITION
	  // ======================

	  var Affix = function (element, options) {
	    this.options = $.extend({}, Affix.DEFAULTS, options)

	    this.$target = $(this.options.target)
	      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
	      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

	    this.$element     = $(element)
	    this.affixed      = null
	    this.unpin        = null
	    this.pinnedOffset = null

	    this.checkPosition()
	  }

	  Affix.VERSION  = '3.3.7'

	  Affix.RESET    = 'affix affix-top affix-bottom'

	  Affix.DEFAULTS = {
	    offset: 0,
	    target: window
	  }

	  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
	    var scrollTop    = this.$target.scrollTop()
	    var position     = this.$element.offset()
	    var targetHeight = this.$target.height()

	    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

	    if (this.affixed == 'bottom') {
	      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
	      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
	    }

	    var initializing   = this.affixed == null
	    var colliderTop    = initializing ? scrollTop : position.top
	    var colliderHeight = initializing ? targetHeight : height

	    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
	    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

	    return false
	  }

	  Affix.prototype.getPinnedOffset = function () {
	    if (this.pinnedOffset) return this.pinnedOffset
	    this.$element.removeClass(Affix.RESET).addClass('affix')
	    var scrollTop = this.$target.scrollTop()
	    var position  = this.$element.offset()
	    return (this.pinnedOffset = position.top - scrollTop)
	  }

	  Affix.prototype.checkPositionWithEventLoop = function () {
	    setTimeout($.proxy(this.checkPosition, this), 1)
	  }

	  Affix.prototype.checkPosition = function () {
	    if (!this.$element.is(':visible')) return

	    var height       = this.$element.height()
	    var offset       = this.options.offset
	    var offsetTop    = offset.top
	    var offsetBottom = offset.bottom
	    var scrollHeight = Math.max($(document).height(), $(document.body).height())

	    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
	    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
	    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

	    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

	    if (this.affixed != affix) {
	      if (this.unpin != null) this.$element.css('top', '')

	      var affixType = 'affix' + (affix ? '-' + affix : '')
	      var e         = $.Event(affixType + '.bs.affix')

	      this.$element.trigger(e)

	      if (e.isDefaultPrevented()) return

	      this.affixed = affix
	      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

	      this.$element
	        .removeClass(Affix.RESET)
	        .addClass(affixType)
	        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
	    }

	    if (affix == 'bottom') {
	      this.$element.offset({
	        top: scrollHeight - height - offsetBottom
	      })
	    }
	  }


	  // AFFIX PLUGIN DEFINITION
	  // =======================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.affix')
	      var options = typeof option == 'object' && option

	      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  var old = $.fn.affix

	  $.fn.affix             = Plugin
	  $.fn.affix.Constructor = Affix


	  // AFFIX NO CONFLICT
	  // =================

	  $.fn.affix.noConflict = function () {
	    $.fn.affix = old
	    return this
	  }


	  // AFFIX DATA-API
	  // ==============

	  $(window).on('load', function () {
	    $('[data-spy="affix"]').each(function () {
	      var $spy = $(this)
	      var data = $spy.data()

	      data.offset = data.offset || {}

	      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
	      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

	      Plugin.call($spy, data)
	    })
	  })

	}(jQuery);


/***/ },
/* 19 */
/***/ function(module, exports) {

	/*!
	 * ui-grid - v3.2.9 - 2016-09-21
	 * Copyright (c) 2016 ; License: MIT 
	 */

	(function () {
	  'use strict';
	  angular.module('ui.grid.i18n', []);
	  angular.module('ui.grid', ['ui.grid.i18n']);
	})();
	(function () {
	  'use strict';

	  /**
	   * @ngdoc object
	   * @name ui.grid.service:uiGridConstants
	   * @description Constants for use across many grid features
	   *
	   */


	  angular.module('ui.grid').constant('uiGridConstants', {
	    LOG_DEBUG_MESSAGES: true,
	    LOG_WARN_MESSAGES: true,
	    LOG_ERROR_MESSAGES: true,
	    CUSTOM_FILTERS: /CUSTOM_FILTERS/g,
	    COL_FIELD: /COL_FIELD/g,
	    MODEL_COL_FIELD: /MODEL_COL_FIELD/g,
	    TOOLTIP: /title=\"TOOLTIP\"/g,
	    DISPLAY_CELL_TEMPLATE: /DISPLAY_CELL_TEMPLATE/g,
	    TEMPLATE_REGEXP: /<.+>/,
	    FUNC_REGEXP: /(\([^)]*\))?$/,
	    DOT_REGEXP: /\./g,
	    APOS_REGEXP: /'/g,
	    BRACKET_REGEXP: /^(.*)((?:\s*\[\s*\d+\s*\]\s*)|(?:\s*\[\s*"(?:[^"\\]|\\.)*"\s*\]\s*)|(?:\s*\[\s*'(?:[^'\\]|\\.)*'\s*\]\s*))(.*)$/,
	    COL_CLASS_PREFIX: 'ui-grid-col',
	    ENTITY_BINDING: '$$this',
	    events: {
	      GRID_SCROLL: 'uiGridScroll',
	      COLUMN_MENU_SHOWN: 'uiGridColMenuShown',
	      ITEM_DRAGGING: 'uiGridItemDragStart', // For any item being dragged
	      COLUMN_HEADER_CLICK: 'uiGridColumnHeaderClick'
	    },
	    // copied from http://www.lsauer.com/2011/08/javascript-keymap-keycodes-in-json.html
	    keymap: {
	      TAB: 9,
	      STRG: 17,
	      CAPSLOCK: 20,
	      CTRL: 17,
	      CTRLRIGHT: 18,
	      CTRLR: 18,
	      SHIFT: 16,
	      RETURN: 13,
	      ENTER: 13,
	      BACKSPACE: 8,
	      BCKSP: 8,
	      ALT: 18,
	      ALTR: 17,
	      ALTRIGHT: 17,
	      SPACE: 32,
	      WIN: 91,
	      MAC: 91,
	      FN: null,
	      PG_UP: 33,
	      PG_DOWN: 34,
	      UP: 38,
	      DOWN: 40,
	      LEFT: 37,
	      RIGHT: 39,
	      ESC: 27,
	      DEL: 46,
	      F1: 112,
	      F2: 113,
	      F3: 114,
	      F4: 115,
	      F5: 116,
	      F6: 117,
	      F7: 118,
	      F8: 119,
	      F9: 120,
	      F10: 121,
	      F11: 122,
	      F12: 123
	    },
	     /**
	     * @ngdoc object
	     * @name ASC
	     * @propertyOf ui.grid.service:uiGridConstants
	     * @description Used in {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort} and
	     * {@link ui.grid.class:GridOptions.columnDef#properties_sortDirectionCycle columnDef.sortDirectionCycle}
	     * to configure the sorting direction of the column
	     */
	    ASC: 'asc',
	     /**
	     * @ngdoc object
	     * @name DESC
	     * @propertyOf ui.grid.service:uiGridConstants
	     * @description Used in {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort} and
	     * {@link ui.grid.class:GridOptions.columnDef#properties_sortDirectionCycle columnDef.sortDirectionCycle}
	     * to configure the sorting direction of the column
	     */
	    DESC: 'desc',


	     /**
	     * @ngdoc object
	     * @name filter
	     * @propertyOf ui.grid.service:uiGridConstants
	     * @description Used in {@link ui.grid.class:GridOptions.columnDef#properties_filter columnDef.filter}
	     * to configure filtering on the column
	     *
	     * `SELECT` and `INPUT` are used with the `type` property of the filter, the rest are used to specify
	     * one of the built-in conditions.
	     *
	     * Available `condition` options are:
	     * - `uiGridConstants.filter.STARTS_WITH`
	     * - `uiGridConstants.filter.ENDS_WITH`
	     * - `uiGridConstants.filter.CONTAINS`
	     * - `uiGridConstants.filter.GREATER_THAN`
	     * - `uiGridConstants.filter.GREATER_THAN_OR_EQUAL`
	     * - `uiGridConstants.filter.LESS_THAN`
	     * - `uiGridConstants.filter.LESS_THAN_OR_EQUAL`
	     * - `uiGridConstants.filter.NOT_EQUAL`
	     * - `uiGridConstants.filter.STARTS_WITH`
	     *
	     *
	     * Available `type` options are:
	     * - `uiGridConstants.filter.SELECT` - use a dropdown box for the cell header filter field
	     * - `uiGridConstants.filter.INPUT` - use a text box for the cell header filter field
	     */
	    filter: {
	      STARTS_WITH: 2,
	      ENDS_WITH: 4,
	      EXACT: 8,
	      CONTAINS: 16,
	      GREATER_THAN: 32,
	      GREATER_THAN_OR_EQUAL: 64,
	      LESS_THAN: 128,
	      LESS_THAN_OR_EQUAL: 256,
	      NOT_EQUAL: 512,
	      SELECT: 'select',
	      INPUT: 'input'
	    },

	    /**
	     * @ngdoc object
	     * @name aggregationTypes
	     * @propertyOf ui.grid.service:uiGridConstants
	     * @description Used in {@link ui.grid.class:GridOptions.columnDef#properties_aggregationType columnDef.aggregationType}
	     * to specify the type of built-in aggregation the column should use.
	     *
	     * Available options are:
	     * - `uiGridConstants.aggregationTypes.sum` - add the values in this column to produce the aggregated value
	     * - `uiGridConstants.aggregationTypes.count` - count the number of rows to produce the aggregated value
	     * - `uiGridConstants.aggregationTypes.avg` - average the values in this column to produce the aggregated value
	     * - `uiGridConstants.aggregationTypes.min` - use the minimum value in this column as the aggregated value
	     * - `uiGridConstants.aggregationTypes.max` - use the maximum value in this column as the aggregated value
	     */
	    aggregationTypes: {
	      sum: 2,
	      count: 4,
	      avg: 8,
	      min: 16,
	      max: 32
	    },

	    // TODO(c0bra): Create full list of these somehow. NOTE: do any allow a space before or after them?
	    CURRENCY_SYMBOLS: ['ƒ', '$', '£', '$', '¤', '¥', '៛', '₩', '₱', '฿', '₫'],

	    /**
	     * @ngdoc object
	     * @name scrollDirection
	     * @propertyOf ui.grid.service:uiGridConstants
	     * @description Set on {@link ui.grid.class:Grid#properties_scrollDirection Grid.scrollDirection},
	     * to indicate the direction the grid is currently scrolling in
	     *
	     * Available options are:
	     * - `uiGridConstants.scrollDirection.UP` - set when the grid is scrolling up
	     * - `uiGridConstants.scrollDirection.DOWN` - set when the grid is scrolling down
	     * - `uiGridConstants.scrollDirection.LEFT` - set when the grid is scrolling left
	     * - `uiGridConstants.scrollDirection.RIGHT` - set when the grid is scrolling right
	     * - `uiGridConstants.scrollDirection.NONE` - set when the grid is not scrolling, this is the default
	     */
	    scrollDirection: {
	      UP: 'up',
	      DOWN: 'down',
	      LEFT: 'left',
	      RIGHT: 'right',
	      NONE: 'none'

	    },

	    /**
	     * @ngdoc object
	     * @name dataChange
	     * @propertyOf ui.grid.service:uiGridConstants
	     * @description Used with {@link ui.grid.core.api:PublicApi#methods_notifyDataChange PublicApi.notifyDataChange},
	     * {@link ui.grid.class:Grid#methods_callDataChangeCallbacks Grid.callDataChangeCallbacks},
	     * and {@link ui.grid.class:Grid#methods_registerDataChangeCallback Grid.registerDataChangeCallback}
	     * to specify the type of the event(s).
	     *
	     * Available options are:
	     * - `uiGridConstants.dataChange.ALL` - listeners fired on any of these events, fires listeners on all events.
	     * - `uiGridConstants.dataChange.EDIT` - fired when the data in a cell is edited
	     * - `uiGridConstants.dataChange.ROW` - fired when a row is added or removed
	     * - `uiGridConstants.dataChange.COLUMN` - fired when the column definitions are modified
	     * - `uiGridConstants.dataChange.OPTIONS` - fired when the grid options are modified
	     */
	    dataChange: {
	      ALL: 'all',
	      EDIT: 'edit',
	      ROW: 'row',
	      COLUMN: 'column',
	      OPTIONS: 'options'
	    },

	    /**
	     * @ngdoc object
	     * @name scrollbars
	     * @propertyOf ui.grid.service:uiGridConstants
	     * @description Used with {@link ui.grid.class:GridOptions#properties_enableHorizontalScrollbar GridOptions.enableHorizontalScrollbar}
	     * and {@link ui.grid.class:GridOptions#properties_enableVerticalScrollbar GridOptions.enableVerticalScrollbar}
	     * to specify the scrollbar policy for that direction.
	     *
	     * Available options are:
	     * - `uiGridConstants.scrollbars.NEVER` - never show scrollbars in this direction
	     * - `uiGridConstants.scrollbars.ALWAYS` - always show scrollbars in this direction
	     */

	    scrollbars: {
	      NEVER: 0,
	      ALWAYS: 1
	      //WHEN_NEEDED: 2
	    }
	  });

	})();

	angular.module('ui.grid').directive('uiGridCell', ['$compile', '$parse', 'gridUtil', 'uiGridConstants', function ($compile, $parse, gridUtil, uiGridConstants) {
	  var uiGridCell = {
	    priority: 0,
	    scope: false,
	    require: '?^uiGrid',
	    compile: function() {
	      return {
	        pre: function($scope, $elm, $attrs, uiGridCtrl) {
	          function compileTemplate() {
	            var compiledElementFn = $scope.col.compiledElementFn;

	            compiledElementFn($scope, function(clonedElement, scope) {
	              $elm.append(clonedElement);
	            });
	          }

	          // If the grid controller is present, use it to get the compiled cell template function
	          if (uiGridCtrl && $scope.col.compiledElementFn) {
	             compileTemplate();
	          }
	          // No controller, compile the element manually (for unit tests)
	          else {
	            if ( uiGridCtrl && !$scope.col.compiledElementFn ){
	              // gridUtil.logError('Render has been called before precompile.  Please log a ui-grid issue');  

	              $scope.col.getCompiledElementFn()
	                .then(function (compiledElementFn) {
	                  compiledElementFn($scope, function(clonedElement, scope) {
	                    $elm.append(clonedElement);
	                  });
	                });
	            }
	            else {
	              var html = $scope.col.cellTemplate
	                .replace(uiGridConstants.MODEL_COL_FIELD, 'row.entity.' + gridUtil.preEval($scope.col.field))
	                .replace(uiGridConstants.COL_FIELD, 'grid.getCellValue(row, col)');

	              var cellElement = $compile(html)($scope);
	              $elm.append(cellElement);
	            }
	          }
	        },
	        post: function($scope, $elm, $attrs, uiGridCtrl) {
	          var initColClass = $scope.col.getColClass(false);
	          $elm.addClass(initColClass);

	          var classAdded;
	          var updateClass = function( grid ){
	            var contents = $elm;
	            if ( classAdded ){
	              contents.removeClass( classAdded );
	              classAdded = null;
	            }

	            if (angular.isFunction($scope.col.cellClass)) {
	              classAdded = $scope.col.cellClass($scope.grid, $scope.row, $scope.col, $scope.rowRenderIndex, $scope.colRenderIndex);
	            }
	            else {
	              classAdded = $scope.col.cellClass;
	            }
	            contents.addClass(classAdded);
	          };

	          if ($scope.col.cellClass) {
	            updateClass();
	          }
	          
	          // Register a data change watch that would get triggered whenever someone edits a cell or modifies column defs
	          var dataChangeDereg = $scope.grid.registerDataChangeCallback( updateClass, [uiGridConstants.dataChange.COLUMN, uiGridConstants.dataChange.EDIT]);
	          
	          // watch the col and row to see if they change - which would indicate that we've scrolled or sorted or otherwise
	          // changed the row/col that this cell relates to, and we need to re-evaluate cell classes and maybe other things
	          var cellChangeFunction = function( n, o ){
	            if ( n !== o ) {
	              if ( classAdded || $scope.col.cellClass ){
	                updateClass();
	              }

	              // See if the column's internal class has changed
	              var newColClass = $scope.col.getColClass(false);
	              if (newColClass !== initColClass) {
	                $elm.removeClass(initColClass);
	                $elm.addClass(newColClass);
	                initColClass = newColClass;
	              }
	            }
	          };

	          // TODO(c0bra): Turn this into a deep array watch
	/*        shouldn't be needed any more given track by col.name
	          var colWatchDereg = $scope.$watch( 'col', cellChangeFunction );
	*/
	          var rowWatchDereg = $scope.$watch( 'row', cellChangeFunction );
	          
	          
	          var deregisterFunction = function() {
	            dataChangeDereg();
	//            colWatchDereg();
	            rowWatchDereg(); 
	          };
	          
	          $scope.$on( '$destroy', deregisterFunction );
	          $elm.on( '$destroy', deregisterFunction );
	        }
	      };
	    }
	  };

	  return uiGridCell;
	}]);


	(function(){

	angular.module('ui.grid')
	.service('uiGridColumnMenuService', [ 'i18nService', 'uiGridConstants', 'gridUtil',
	function ( i18nService, uiGridConstants, gridUtil ) {
	/**
	 *  @ngdoc service
	 *  @name ui.grid.service:uiGridColumnMenuService
	 *
	 *  @description Services for working with column menus, factored out
	 *  to make the code easier to understand
	 */

	  var service = {
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name initialize
	     * @description  Sets defaults, puts a reference to the $scope on
	     * the uiGridController
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     * @param {controller} uiGridCtrl the uiGridController for the grid
	     * we're on
	     *
	     */
	    initialize: function( $scope, uiGridCtrl ){
	      $scope.grid = uiGridCtrl.grid;

	      // Store a reference to this link/controller in the main uiGrid controller
	      // to allow showMenu later
	      uiGridCtrl.columnMenuScope = $scope;

	      // Save whether we're shown or not so the columns can check
	      $scope.menuShown = false;
	    },


	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name setColMenuItemWatch
	     * @description  Setup a watch on $scope.col.menuItems, and update
	     * menuItems based on this.  $scope.col needs to be set by the column
	     * before calling the menu.
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     * @param {controller} uiGridCtrl the uiGridController for the grid
	     * we're on
	     *
	     */
	    setColMenuItemWatch: function ( $scope ){
	      var deregFunction = $scope.$watch('col.menuItems', function (n) {
	        if (typeof(n) !== 'undefined' && n && angular.isArray(n)) {
	          n.forEach(function (item) {
	            if (typeof(item.context) === 'undefined' || !item.context) {
	              item.context = {};
	            }
	            item.context.col = $scope.col;
	          });

	          $scope.menuItems = $scope.defaultMenuItems.concat(n);
	        }
	        else {
	          $scope.menuItems = $scope.defaultMenuItems;
	        }
	      });

	      $scope.$on( '$destroy', deregFunction );
	    },


	    /**
	     * @ngdoc boolean
	     * @name enableSorting
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description (optional) True by default. When enabled, this setting adds sort
	     * widgets to the column header, allowing sorting of the data in the individual column.
	     */
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name sortable
	     * @description  determines whether this column is sortable
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     *
	     */
	    sortable: function( $scope ) {
	      if ( $scope.grid.options.enableSorting && typeof($scope.col) !== 'undefined' && $scope.col && $scope.col.enableSorting) {
	        return true;
	      }
	      else {
	        return false;
	      }
	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name isActiveSort
	     * @description  determines whether the requested sort direction is current active, to
	     * allow highlighting in the menu
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     * @param {string} direction the direction that we'd have selected for us to be active
	     *
	     */
	    isActiveSort: function( $scope, direction ){
	      return (typeof($scope.col) !== 'undefined' && typeof($scope.col.sort) !== 'undefined' &&
	              typeof($scope.col.sort.direction) !== 'undefined' && $scope.col.sort.direction === direction);

	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name suppressRemoveSort
	     * @description  determines whether we should suppress the removeSort option
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     *
	     */
	    suppressRemoveSort: function( $scope ) {
	      if ($scope.col && $scope.col.suppressRemoveSort) {
	        return true;
	      }
	      else {
	        return false;
	      }
	    },


	    /**
	     * @ngdoc boolean
	     * @name enableHiding
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description (optional) True by default. When set to false, this setting prevents a user from hiding the column
	     * using the column menu or the grid menu.
	     */
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name hideable
	     * @description  determines whether a column can be hidden, by checking the enableHiding columnDef option
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     *
	     */
	    hideable: function( $scope ) {
	      if (typeof($scope.col) !== 'undefined' && $scope.col && $scope.col.colDef && $scope.col.colDef.enableHiding === false ) {
	        return false;
	      }
	      else {
	        return true;
	      }
	    },


	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name getDefaultMenuItems
	     * @description  returns the default menu items for a column menu
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     *
	     */
	    getDefaultMenuItems: function( $scope ){
	      return [
	        {
	          title: i18nService.getSafeText('sort.ascending'),
	          icon: 'ui-grid-icon-sort-alt-up',
	          action: function($event) {
	            $event.stopPropagation();
	            $scope.sortColumn($event, uiGridConstants.ASC);
	          },
	          shown: function () {
	            return service.sortable( $scope );
	          },
	          active: function() {
	            return service.isActiveSort( $scope, uiGridConstants.ASC);
	          }
	        },
	        {
	          title: i18nService.getSafeText('sort.descending'),
	          icon: 'ui-grid-icon-sort-alt-down',
	          action: function($event) {
	            $event.stopPropagation();
	            $scope.sortColumn($event, uiGridConstants.DESC);
	          },
	          shown: function() {
	            return service.sortable( $scope );
	          },
	          active: function() {
	            return service.isActiveSort( $scope, uiGridConstants.DESC);
	          }
	        },
	        {
	          title: i18nService.getSafeText('sort.remove'),
	          icon: 'ui-grid-icon-cancel',
	          action: function ($event) {
	            $event.stopPropagation();
	            $scope.unsortColumn();
	          },
	          shown: function() {
	            return service.sortable( $scope ) &&
	                   typeof($scope.col) !== 'undefined' && (typeof($scope.col.sort) !== 'undefined' &&
	                   typeof($scope.col.sort.direction) !== 'undefined') && $scope.col.sort.direction !== null &&
	                  !service.suppressRemoveSort( $scope );
	          }
	        },
	        {
	          title: i18nService.getSafeText('column.hide'),
	          icon: 'ui-grid-icon-cancel',
	          shown: function() {
	            return service.hideable( $scope );
	          },
	          action: function ($event) {
	            $event.stopPropagation();
	            $scope.hideColumn();
	          }
	        }
	      ];
	    },


	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name getColumnElementPosition
	     * @description  gets the position information needed to place the column
	     * menu below the column header
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     * @param {GridCol} column the column we want to position below
	     * @param {element} $columnElement the column element we want to position below
	     * @returns {hash} containing left, top, offset, height, width
	     *
	     */
	    getColumnElementPosition: function( $scope, column, $columnElement ){
	      var positionData = {};
	      positionData.left = $columnElement[0].offsetLeft;
	      positionData.top = $columnElement[0].offsetTop;
	      positionData.parentLeft = $columnElement[0].offsetParent.offsetLeft;

	      // Get the grid scrollLeft
	      positionData.offset = 0;
	      if (column.grid.options.offsetLeft) {
	        positionData.offset = column.grid.options.offsetLeft;
	      }

	      positionData.height = gridUtil.elementHeight($columnElement, true);
	      positionData.width = gridUtil.elementWidth($columnElement, true);

	      return positionData;
	    },


	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name repositionMenu
	     * @description  Reposition the menu below the new column.  If the menu has no child nodes
	     * (i.e. it's not currently visible) then we guess it's width at 100, we'll be called again
	     * later to fix it
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     * @param {GridCol} column the column we want to position below
	     * @param {hash} positionData a hash containing left, top, offset, height, width
	     * @param {element} $elm the column menu element that we want to reposition
	     * @param {element} $columnElement the column element that we want to reposition underneath
	     *
	     */
	    repositionMenu: function( $scope, column, positionData, $elm, $columnElement ) {
	      var menu = $elm[0].querySelectorAll('.ui-grid-menu');

	      // It's possible that the render container of the column we're attaching to is
	      // offset from the grid (i.e. pinned containers), we need to get the difference in the offsetLeft
	      // between the render container and the grid
	      var renderContainerElm = gridUtil.closestElm($columnElement, '.ui-grid-render-container');
	      var renderContainerOffset = renderContainerElm.getBoundingClientRect().left - $scope.grid.element[0].getBoundingClientRect().left;

	      var containerScrollLeft = renderContainerElm.querySelectorAll('.ui-grid-viewport')[0].scrollLeft;

	      // default value the last width for _this_ column, otherwise last width for _any_ column, otherwise default to 170
	      var myWidth = column.lastMenuWidth ? column.lastMenuWidth : ( $scope.lastMenuWidth ? $scope.lastMenuWidth : 170);
	      var paddingRight = column.lastMenuPaddingRight ? column.lastMenuPaddingRight : ( $scope.lastMenuPaddingRight ? $scope.lastMenuPaddingRight : 10);

	      if ( menu.length !== 0 ){
	        var mid = menu[0].querySelectorAll('.ui-grid-menu-mid');
	        if ( mid.length !== 0 && !angular.element(mid).hasClass('ng-hide') ) {
	          myWidth = gridUtil.elementWidth(menu, true);
	          $scope.lastMenuWidth = myWidth;
	          column.lastMenuWidth = myWidth;

	          // TODO(c0bra): use padding-left/padding-right based on document direction (ltr/rtl), place menu on proper side
	          // Get the column menu right padding
	          paddingRight = parseInt(gridUtil.getStyles(angular.element(menu)[0])['paddingRight'], 10);
	          $scope.lastMenuPaddingRight = paddingRight;
	          column.lastMenuPaddingRight = paddingRight;
	        }
	      }

	      var left = positionData.left + renderContainerOffset - containerScrollLeft + positionData.parentLeft + positionData.width - myWidth + paddingRight;
	      if (left < positionData.offset){
	        left = positionData.offset;
	      }

	      $elm.css('left', left + 'px');
	      $elm.css('top', (positionData.top + positionData.height) + 'px');
	    }

	  };

	  return service;
	}])


	.directive('uiGridColumnMenu', ['$timeout', 'gridUtil', 'uiGridConstants', 'uiGridColumnMenuService', '$document',
	function ($timeout, gridUtil, uiGridConstants, uiGridColumnMenuService, $document) {
	/**
	 * @ngdoc directive
	 * @name ui.grid.directive:uiGridColumnMenu
	 * @description  Provides the column menu framework, leverages uiGridMenu underneath
	 *
	 */

	  var uiGridColumnMenu = {
	    priority: 0,
	    scope: true,
	    require: '^uiGrid',
	    templateUrl: 'ui-grid/uiGridColumnMenu',
	    replace: true,
	    link: function ($scope, $elm, $attrs, uiGridCtrl) {
	      uiGridColumnMenuService.initialize( $scope, uiGridCtrl );

	      $scope.defaultMenuItems = uiGridColumnMenuService.getDefaultMenuItems( $scope );

	      // Set the menu items for use with the column menu. The user can later add additional items via the watch
	      $scope.menuItems = $scope.defaultMenuItems;
	      uiGridColumnMenuService.setColMenuItemWatch( $scope );


	      /**
	       * @ngdoc method
	       * @methodOf ui.grid.directive:uiGridColumnMenu
	       * @name showMenu
	       * @description Shows the column menu.  If the menu is already displayed it
	       * calls the menu to ask it to hide (it will animate), then it repositions the menu
	       * to the right place whilst hidden (it will make an assumption on menu width),
	       * then it asks the menu to show (it will animate), then it repositions the menu again
	       * once we can calculate it's size.
	       * @param {GridCol} column the column we want to position below
	       * @param {element} $columnElement the column element we want to position below
	       */
	      $scope.showMenu = function(column, $columnElement, event) {
	        // Swap to this column
	        $scope.col = column;

	        // Get the position information for the column element
	        var colElementPosition = uiGridColumnMenuService.getColumnElementPosition( $scope, column, $columnElement );

	        if ($scope.menuShown) {
	          // we want to hide, then reposition, then show, but we want to wait for animations
	          // we set a variable, and then rely on the menu-hidden event to call the reposition and show
	          $scope.colElement = $columnElement;
	          $scope.colElementPosition = colElementPosition;
	          $scope.hideThenShow = true;

	          $scope.$broadcast('hide-menu', { originalEvent: event });
	        } else {
	          $scope.menuShown = true;
	          uiGridColumnMenuService.repositionMenu( $scope, column, colElementPosition, $elm, $columnElement );

	          $scope.colElement = $columnElement;
	          $scope.colElementPosition = colElementPosition;
	          $scope.$broadcast('show-menu', { originalEvent: event });

	        }
	      };


	      /**
	       * @ngdoc method
	       * @methodOf ui.grid.directive:uiGridColumnMenu
	       * @name hideMenu
	       * @description Hides the column menu.
	       * @param {boolean} broadcastTrigger true if we were triggered by a broadcast
	       * from the menu itself - in which case don't broadcast again as we'll get
	       * an infinite loop
	       */
	      $scope.hideMenu = function( broadcastTrigger ) {
	        $scope.menuShown = false;
	        if ( !broadcastTrigger ){
	          $scope.$broadcast('hide-menu');
	        }
	      };


	      $scope.$on('menu-hidden', function() {
	        if ( $scope.hideThenShow ){
	          delete $scope.hideThenShow;

	          uiGridColumnMenuService.repositionMenu( $scope, $scope.col, $scope.colElementPosition, $elm, $scope.colElement );
	          $scope.$broadcast('show-menu');

	          $scope.menuShown = true;
	        } else {
	          $scope.hideMenu( true );

	          if ($scope.col) {
	            //Focus on the menu button
	            gridUtil.focus.bySelector($document, '.ui-grid-header-cell.' + $scope.col.getColClass()+ ' .ui-grid-column-menu-button', $scope.col.grid, false);
	          }
	        }
	      });

	      $scope.$on('menu-shown', function() {
	        $timeout( function() {
	          uiGridColumnMenuService.repositionMenu( $scope, $scope.col, $scope.colElementPosition, $elm, $scope.colElement );
	          //Focus on the first item
	          gridUtil.focus.bySelector($document, '.ui-grid-menu-items .ui-grid-menu-item', true);
	          delete $scope.colElementPosition;
	          delete $scope.columnElement;
	        }, 200);
	      });


	      /* Column methods */
	      $scope.sortColumn = function (event, dir) {
	        event.stopPropagation();

	        $scope.grid.sortColumn($scope.col, dir, true)
	          .then(function () {
	            $scope.grid.refresh();
	            $scope.hideMenu();
	          });
	      };

	      $scope.unsortColumn = function () {
	        $scope.col.unsort();

	        $scope.grid.refresh();
	        $scope.hideMenu();
	      };

	      //Since we are hiding this column the default hide action will fail so we need to focus somewhere else.
	      var setFocusOnHideColumn = function(){
	        $timeout(function(){
	          // Get the UID of the first
	          var focusToGridMenu = function(){
	            return gridUtil.focus.byId('grid-menu', $scope.grid);
	          };

	          var thisIndex;
	          $scope.grid.columns.some(function(element, index){
	            if (angular.equals(element, $scope.col)) {
	              thisIndex = index;
	              return true;
	            }
	          });

	          var previousVisibleCol;
	          // Try and find the next lower or nearest column to focus on
	          $scope.grid.columns.some(function(element, index){
	            if (!element.visible){
	              return false;
	            } // This columns index is below the current column index
	            else if ( index < thisIndex){
	              previousVisibleCol = element;
	            } // This elements index is above this column index and we haven't found one that is lower
	            else if ( index > thisIndex && !previousVisibleCol) {
	              // This is the next best thing
	              previousVisibleCol = element;
	              // We've found one so use it.
	              return true;
	            } // We've reached an element with an index above this column and the previousVisibleCol variable has been set
	            else if (index > thisIndex && previousVisibleCol) {
	              // We are done.
	              return true;
	            }
	          });
	          // If found then focus on it
	          if (previousVisibleCol){
	            var colClass = previousVisibleCol.getColClass();
	            gridUtil.focus.bySelector($document, '.ui-grid-header-cell.' + colClass+ ' .ui-grid-header-cell-primary-focus', true).then(angular.noop, function(reason){
	              if (reason !== 'canceled'){ // If this is canceled then don't perform the action
	                //The fallback action is to focus on the grid menu
	                return focusToGridMenu();
	              }
	            });
	          } else {
	            // Fallback action to focus on the grid menu
	            focusToGridMenu();
	          }
	        });
	      };

	      $scope.hideColumn = function () {
	        $scope.col.colDef.visible = false;
	        $scope.col.visible = false;

	        $scope.grid.queueGridRefresh();
	        $scope.hideMenu();
	        $scope.grid.api.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
	        $scope.grid.api.core.raise.columnVisibilityChanged( $scope.col );

	        // We are hiding so the default action of focusing on the button that opened this menu will fail.
	        setFocusOnHideColumn();
	      };
	    },



	    controller: ['$scope', function ($scope) {
	      var self = this;

	      $scope.$watch('menuItems', function (n) {
	        self.menuItems = n;
	      });
	    }]
	  };

	  return uiGridColumnMenu;

	}]);

	})();

	(function(){
	  'use strict';

	  angular.module('ui.grid').directive('uiGridFilter', ['$compile', '$templateCache', 'i18nService', 'gridUtil', function ($compile, $templateCache, i18nService, gridUtil) {

	    return {
	      compile: function() {
	        return {
	          pre: function ($scope, $elm, $attrs, controllers) {
	            $scope.col.updateFilters = function( filterable ){
	              $elm.children().remove();
	              if ( filterable ){
	                var template = $scope.col.filterHeaderTemplate;

	                $elm.append($compile(template)($scope));
	              }
	            };

	            $scope.$on( '$destroy', function() {
	              delete $scope.col.updateFilters;
	            });
	          },
	          post: function ($scope, $elm, $attrs, controllers){
	            $scope.aria = i18nService.getSafeText('headerCell.aria');
	            $scope.removeFilter = function(colFilter, index){
	              colFilter.term = null;
	              //Set the focus to the filter input after the action disables the button
	              gridUtil.focus.bySelector($elm, '.ui-grid-filter-input-' + index);
	            };
	          }
	        };
	      }
	    };
	  }]);
	})();

	(function () {
	  'use strict';

	  angular.module('ui.grid').directive('uiGridFooterCell', ['$timeout', 'gridUtil', 'uiGridConstants', '$compile',
	  function ($timeout, gridUtil, uiGridConstants, $compile) {
	    var uiGridFooterCell = {
	      priority: 0,
	      scope: {
	        col: '=',
	        row: '=',
	        renderIndex: '='
	      },
	      replace: true,
	      require: '^uiGrid',
	      compile: function compile(tElement, tAttrs, transclude) {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            var cellFooter = $compile($scope.col.footerCellTemplate)($scope);
	            $elm.append(cellFooter);
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	            //$elm.addClass($scope.col.getColClass(false));
	            $scope.grid = uiGridCtrl.grid;

	            var initColClass = $scope.col.getColClass(false);
	            $elm.addClass(initColClass);

	            // apply any footerCellClass
	            var classAdded;
	            var updateClass = function( grid ){
	              var contents = $elm;
	              if ( classAdded ){
	                contents.removeClass( classAdded );
	                classAdded = null;
	              }
	  
	              if (angular.isFunction($scope.col.footerCellClass)) {
	                classAdded = $scope.col.footerCellClass($scope.grid, $scope.row, $scope.col, $scope.rowRenderIndex, $scope.colRenderIndex);
	              }
	              else {
	                classAdded = $scope.col.footerCellClass;
	              }
	              contents.addClass(classAdded);
	            };
	  
	            if ($scope.col.footerCellClass) {
	              updateClass();
	            }

	            $scope.col.updateAggregationValue();

	            // Watch for column changes so we can alter the col cell class properly
	/* shouldn't be needed any more, given track by col.name
	            $scope.$watch('col', function (n, o) {
	              if (n !== o) {
	                // See if the column's internal class has changed
	                var newColClass = $scope.col.getColClass(false);
	                if (newColClass !== initColClass) {
	                  $elm.removeClass(initColClass);
	                  $elm.addClass(newColClass);
	                  initColClass = newColClass;
	                }
	              }
	            });
	*/


	            // Register a data change watch that would get triggered whenever someone edits a cell or modifies column defs
	            var dataChangeDereg = $scope.grid.registerDataChangeCallback( updateClass, [uiGridConstants.dataChange.COLUMN]);
	            // listen for visible rows change and update aggregation values
	            $scope.grid.api.core.on.rowsRendered( $scope, $scope.col.updateAggregationValue );
	            $scope.grid.api.core.on.rowsRendered( $scope, updateClass );
	            $scope.$on( '$destroy', dataChangeDereg );
	          }
	        };
	      }
	    };

	    return uiGridFooterCell;
	  }]);

	})();

	(function () {
	  'use strict';

	  angular.module('ui.grid').directive('uiGridFooter', ['$templateCache', '$compile', 'uiGridConstants', 'gridUtil', '$timeout', function ($templateCache, $compile, uiGridConstants, gridUtil, $timeout) {

	    return {
	      restrict: 'EA',
	      replace: true,
	      // priority: 1000,
	      require: ['^uiGrid', '^uiGridRenderContainer'],
	      scope: true,
	      compile: function ($elm, $attrs) {
	        return {
	          pre: function ($scope, $elm, $attrs, controllers) {
	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];

	            $scope.grid = uiGridCtrl.grid;
	            $scope.colContainer = containerCtrl.colContainer;

	            containerCtrl.footer = $elm;

	            var footerTemplate = $scope.grid.options.footerTemplate;
	            gridUtil.getTemplate(footerTemplate)
	              .then(function (contents) {
	                var template = angular.element(contents);

	                var newElm = $compile(template)($scope);
	                $elm.append(newElm);

	                if (containerCtrl) {
	                  // Inject a reference to the footer viewport (if it exists) into the grid controller for use in the horizontal scroll handler below
	                  var footerViewport = $elm[0].getElementsByClassName('ui-grid-footer-viewport')[0];

	                  if (footerViewport) {
	                    containerCtrl.footerViewport = footerViewport;
	                  }
	                }
	              });
	          },

	          post: function ($scope, $elm, $attrs, controllers) {
	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];

	            // gridUtil.logDebug('ui-grid-footer link');

	            var grid = uiGridCtrl.grid;

	            // Don't animate footer cells
	            gridUtil.disableAnimations($elm);

	            containerCtrl.footer = $elm;

	            var footerViewport = $elm[0].getElementsByClassName('ui-grid-footer-viewport')[0];
	            if (footerViewport) {
	              containerCtrl.footerViewport = footerViewport;
	            }
	          }
	        };
	      }
	    };
	  }]);

	})();
	(function () {
	  'use strict';

	  angular.module('ui.grid').directive('uiGridGridFooter', ['$templateCache', '$compile', 'uiGridConstants', 'gridUtil', '$timeout', function ($templateCache, $compile, uiGridConstants, gridUtil, $timeout) {

	    return {
	      restrict: 'EA',
	      replace: true,
	      // priority: 1000,
	      require: '^uiGrid',
	      scope: true,
	      compile: function ($elm, $attrs) {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {

	            $scope.grid = uiGridCtrl.grid;



	            var footerTemplate = $scope.grid.options.gridFooterTemplate;
	            gridUtil.getTemplate(footerTemplate)
	              .then(function (contents) {
	                var template = angular.element(contents);

	                var newElm = $compile(template)($scope);
	                $elm.append(newElm);
	              });
	          },

	          post: function ($scope, $elm, $attrs, controllers) {

	          }
	        };
	      }
	    };
	  }]);

	})();
	(function(){
	  'use strict';

	  angular.module('ui.grid').directive('uiGridGroupPanel', ["$compile", "uiGridConstants", "gridUtil", function($compile, uiGridConstants, gridUtil) {
	    var defaultTemplate = 'ui-grid/ui-grid-group-panel';

	    return {
	      restrict: 'EA',
	      replace: true,
	      require: '?^uiGrid',
	      scope: false,
	      compile: function($elm, $attrs) {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            var groupPanelTemplate = $scope.grid.options.groupPanelTemplate  || defaultTemplate;

	             gridUtil.getTemplate(groupPanelTemplate)
	              .then(function (contents) {
	                var template = angular.element(contents);
	                
	                var newElm = $compile(template)($scope);
	                $elm.append(newElm);
	              });
	          },

	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	            $elm.bind('$destroy', function() {
	              // scrollUnbinder();
	            });
	          }
	        };
	      }
	    };
	  }]);

	})();
	(function(){
	  'use strict';

	  angular.module('ui.grid').directive('uiGridHeaderCell', ['$compile', '$timeout', '$window', '$document', 'gridUtil', 'uiGridConstants', 'ScrollEvent', 'i18nService',
	  function ($compile, $timeout, $window, $document, gridUtil, uiGridConstants, ScrollEvent, i18nService) {
	    // Do stuff after mouse has been down this many ms on the header cell
	    var mousedownTimeout = 500;
	    var changeModeTimeout = 500;    // length of time between a touch event and a mouse event being recognised again, and vice versa

	    var uiGridHeaderCell = {
	      priority: 0,
	      scope: {
	        col: '=',
	        row: '=',
	        renderIndex: '='
	      },
	      require: ['^uiGrid', '^uiGridRenderContainer'],
	      replace: true,
	      compile: function() {
	        return {
	          pre: function ($scope, $elm, $attrs) {
	            var cellHeader = $compile($scope.col.headerCellTemplate)($scope);
	            $elm.append(cellHeader);
	          },

	          post: function ($scope, $elm, $attrs, controllers) {
	            var uiGridCtrl = controllers[0];
	            var renderContainerCtrl = controllers[1];

	            $scope.i18n = {
	              headerCell: i18nService.getSafeText('headerCell'),
	              sort: i18nService.getSafeText('sort')
	            };
	            $scope.isSortPriorityVisible = function() {
	              //show sort priority if column is sorted and there is at least one other sorted column
	              return angular.isNumber($scope.col.sort.priority) && $scope.grid.columns.some(function(element, index){
	                  return angular.isNumber(element.sort.priority) && element !== $scope.col;
	                });
	            };
	            $scope.getSortDirectionAriaLabel = function(){
	              var col = $scope.col;
	              //Trying to recreate this sort of thing but it was getting messy having it in the template.
	              //Sort direction {{col.sort.direction == asc ? 'ascending' : ( col.sort.direction == desc ? 'descending':'none')}}. {{col.sort.priority ? {{columnPriorityText}} {{col.sort.priority}} : ''}
	              var sortDirectionText = col.sort.direction === uiGridConstants.ASC ? $scope.i18n.sort.ascending : ( col.sort.direction === uiGridConstants.DESC ? $scope.i18n.sort.descending : $scope.i18n.sort.none);
	              var label = sortDirectionText;

	              if ($scope.isSortPriorityVisible()) {
	                label = label + '. ' + $scope.i18n.headerCell.priority + ' ' + col.sort.priority;
	              }
	              return label;
	            };

	            $scope.grid = uiGridCtrl.grid;

	            $scope.renderContainer = uiGridCtrl.grid.renderContainers[renderContainerCtrl.containerId];

	            var initColClass = $scope.col.getColClass(false);
	            $elm.addClass(initColClass);

	            // Hide the menu by default
	            $scope.menuShown = false;

	            // Put asc and desc sort directions in scope
	            $scope.asc = uiGridConstants.ASC;
	            $scope.desc = uiGridConstants.DESC;

	            // Store a reference to menu element
	            var $colMenu = angular.element( $elm[0].querySelectorAll('.ui-grid-header-cell-menu') );

	            var $contentsElm = angular.element( $elm[0].querySelectorAll('.ui-grid-cell-contents') );


	            // apply any headerCellClass
	            var classAdded;
	            var previousMouseX;

	            // filter watchers
	            var filterDeregisters = [];


	            /*
	             * Our basic approach here for event handlers is that we listen for a down event (mousedown or touchstart).
	             * Once we have a down event, we need to work out whether we have a click, a drag, or a
	             * hold.  A click would sort the grid (if sortable).  A drag would be used by moveable, so
	             * we ignore it.  A hold would open the menu.
	             *
	             * So, on down event, we put in place handlers for move and up events, and a timer.  If the
	             * timer expires before we see a move or up, then we have a long press and hence a column menu open.
	             * If the up happens before the timer, then we have a click, and we sort if the column is sortable.
	             * If a move happens before the timer, then we are doing column move, so we do nothing, the moveable feature
	             * will handle it.
	             *
	             * To deal with touch enabled devices that also have mice, we only create our handlers when
	             * we get the down event, and we create the corresponding handlers - if we're touchstart then
	             * we get touchmove and touchend, if we're mousedown then we get mousemove and mouseup.
	             *
	             * We also suppress the click action whilst this is happening - otherwise after the mouseup there
	             * will be a click event and that can cause the column menu to close
	             *
	             */

	            $scope.downFn = function( event ){
	              event.stopPropagation();

	              if (typeof(event.originalEvent) !== 'undefined' && event.originalEvent !== undefined) {
	                event = event.originalEvent;
	              }

	              // Don't show the menu if it's not the left button
	              if (event.button && event.button !== 0) {
	                return;
	              }
	              previousMouseX = event.pageX;

	              $scope.mousedownStartTime = (new Date()).getTime();
	              $scope.mousedownTimeout = $timeout(function() { }, mousedownTimeout);

	              $scope.mousedownTimeout.then(function () {
	                if ( $scope.colMenu ) {
	                  uiGridCtrl.columnMenuScope.showMenu($scope.col, $elm, event);
	                }
	              });

	              uiGridCtrl.fireEvent(uiGridConstants.events.COLUMN_HEADER_CLICK, {event: event, columnName: $scope.col.colDef.name});

	              $scope.offAllEvents();
	              if ( event.type === 'touchstart'){
	                $document.on('touchend', $scope.upFn);
	                $document.on('touchmove', $scope.moveFn);
	              } else if ( event.type === 'mousedown' ){
	                $document.on('mouseup', $scope.upFn);
	                $document.on('mousemove', $scope.moveFn);
	              }
	            };

	            $scope.upFn = function( event ){
	              event.stopPropagation();
	              $timeout.cancel($scope.mousedownTimeout);
	              $scope.offAllEvents();
	              $scope.onDownEvents(event.type);

	              var mousedownEndTime = (new Date()).getTime();
	              var mousedownTime = mousedownEndTime - $scope.mousedownStartTime;

	              if (mousedownTime > mousedownTimeout) {
	                // long click, handled above with mousedown
	              }
	              else {
	                // short click
	                if ( $scope.sortable ){
	                  $scope.handleClick(event);
	                }
	              }
	            };

	            $scope.moveFn = function( event ){
	              // Chrome is known to fire some bogus move events.
	              var changeValue = event.pageX - previousMouseX;
	              if ( changeValue === 0 ){ return; }

	              // we're a move, so do nothing and leave for column move (if enabled) to take over
	              $timeout.cancel($scope.mousedownTimeout);
	              $scope.offAllEvents();
	              $scope.onDownEvents(event.type);
	            };

	            $scope.clickFn = function ( event ){
	              event.stopPropagation();
	              $contentsElm.off('click', $scope.clickFn);
	            };


	            $scope.offAllEvents = function(){
	              $contentsElm.off('touchstart', $scope.downFn);
	              $contentsElm.off('mousedown', $scope.downFn);

	              $document.off('touchend', $scope.upFn);
	              $document.off('mouseup', $scope.upFn);

	              $document.off('touchmove', $scope.moveFn);
	              $document.off('mousemove', $scope.moveFn);

	              $contentsElm.off('click', $scope.clickFn);
	            };

	            $scope.onDownEvents = function( type ){
	              // If there is a previous event, then wait a while before
	              // activating the other mode - i.e. if the last event was a touch event then
	              // don't enable mouse events for a wee while (500ms or so)
	              // Avoids problems with devices that emulate mouse events when you have touch events

	              switch (type){
	                case 'touchmove':
	                case 'touchend':
	                  $contentsElm.on('click', $scope.clickFn);
	                  $contentsElm.on('touchstart', $scope.downFn);
	                  $timeout(function(){
	                    $contentsElm.on('mousedown', $scope.downFn);
	                  }, changeModeTimeout);
	                  break;
	                case 'mousemove':
	                case 'mouseup':
	                  $contentsElm.on('click', $scope.clickFn);
	                  $contentsElm.on('mousedown', $scope.downFn);
	                  $timeout(function(){
	                    $contentsElm.on('touchstart', $scope.downFn);
	                  }, changeModeTimeout);
	                  break;
	                default:
	                  $contentsElm.on('click', $scope.clickFn);
	                  $contentsElm.on('touchstart', $scope.downFn);
	                  $contentsElm.on('mousedown', $scope.downFn);
	              }
	            };


	            var updateHeaderOptions = function( grid ){
	              var contents = $elm;
	              if ( classAdded ){
	                contents.removeClass( classAdded );
	                classAdded = null;
	              }

	              if (angular.isFunction($scope.col.headerCellClass)) {
	                classAdded = $scope.col.headerCellClass($scope.grid, $scope.row, $scope.col, $scope.rowRenderIndex, $scope.colRenderIndex);
	              }
	              else {
	                classAdded = $scope.col.headerCellClass;
	              }
	              contents.addClass(classAdded);

	              $timeout(function (){
	                var rightMostContainer = $scope.grid.renderContainers['right'] ? $scope.grid.renderContainers['right'] : $scope.grid.renderContainers['body'];
	                $scope.isLastCol = ( $scope.col === rightMostContainer.visibleColumnCache[ rightMostContainer.visibleColumnCache.length - 1 ] );
	              });

	              // Figure out whether this column is sortable or not
	              if (uiGridCtrl.grid.options.enableSorting && $scope.col.enableSorting) {
	                $scope.sortable = true;
	              }
	              else {
	                $scope.sortable = false;
	              }

	              // Figure out whether this column is filterable or not
	              var oldFilterable = $scope.filterable;
	              if (uiGridCtrl.grid.options.enableFiltering && $scope.col.enableFiltering) {
	                $scope.filterable = true;
	              }
	              else {
	                $scope.filterable = false;
	              }

	              if ( oldFilterable !== $scope.filterable){
	                if ( typeof($scope.col.updateFilters) !== 'undefined' ){
	                  $scope.col.updateFilters($scope.filterable);
	                }

	                // if column is filterable add a filter watcher
	                if ($scope.filterable) {
	                  $scope.col.filters.forEach( function(filter, i) {
	                    filterDeregisters.push($scope.$watch('col.filters[' + i + '].term', function(n, o) {
	                      if (n !== o) {
	                        uiGridCtrl.grid.api.core.raise.filterChanged();
	                        uiGridCtrl.grid.api.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
	                        uiGridCtrl.grid.queueGridRefresh();
	                      }
	                    }));
	                  });
	                  $scope.$on('$destroy', function() {
	                    filterDeregisters.forEach( function(filterDeregister) {
	                      filterDeregister();
	                    });
	                  });
	                } else {
	                  filterDeregisters.forEach( function(filterDeregister) {
	                    filterDeregister();
	                  });
	                }

	              }

	              // figure out whether we support column menus
	              if ($scope.col.grid.options && $scope.col.grid.options.enableColumnMenus !== false &&
	                      $scope.col.colDef && $scope.col.colDef.enableColumnMenu !== false){
	                $scope.colMenu = true;
	              } else {
	                $scope.colMenu = false;
	              }

	              /**
	              * @ngdoc property
	              * @name enableColumnMenu
	              * @propertyOf ui.grid.class:GridOptions.columnDef
	              * @description if column menus are enabled, controls the column menus for this specific
	              * column (i.e. if gridOptions.enableColumnMenus, then you can control column menus
	              * using this option. If gridOptions.enableColumnMenus === false then you get no column
	              * menus irrespective of the value of this option ).  Defaults to true.
	              *
	              */
	              /**
	              * @ngdoc property
	              * @name enableColumnMenus
	              * @propertyOf ui.grid.class:GridOptions.columnDef
	              * @description Override for column menus everywhere - if set to false then you get no
	              * column menus.  Defaults to true.
	              *
	              */

	              $scope.offAllEvents();

	              if ($scope.sortable || $scope.colMenu) {
	                $scope.onDownEvents();

	                $scope.$on('$destroy', function () {
	                  $scope.offAllEvents();
	                });
	              }
	            };

	/*
	            $scope.$watch('col', function (n, o) {
	              if (n !== o) {
	                // See if the column's internal class has changed
	                var newColClass = $scope.col.getColClass(false);
	                if (newColClass !== initColClass) {
	                  $elm.removeClass(initColClass);
	                  $elm.addClass(newColClass);
	                  initColClass = newColClass;
	                }
	              }
	            });
	*/
	            updateHeaderOptions();

	            // Register a data change watch that would get triggered whenever someone edits a cell or modifies column defs
	            var dataChangeDereg = $scope.grid.registerDataChangeCallback( updateHeaderOptions, [uiGridConstants.dataChange.COLUMN]);

	            $scope.$on( '$destroy', dataChangeDereg );

	            $scope.handleClick = function(event) {
	              // If the shift key is being held down, add this column to the sort
	              var add = false;
	              if (event.shiftKey) {
	                add = true;
	              }

	              // Sort this column then rebuild the grid's rows
	              uiGridCtrl.grid.sortColumn($scope.col, add)
	                .then(function () {
	                  if (uiGridCtrl.columnMenuScope) { uiGridCtrl.columnMenuScope.hideMenu(); }
	                  uiGridCtrl.grid.refresh();
	                });
	            };


	            $scope.toggleMenu = function(event) {
	              event.stopPropagation();

	              // If the menu is already showing...
	              if (uiGridCtrl.columnMenuScope.menuShown) {
	                // ... and we're the column the menu is on...
	                if (uiGridCtrl.columnMenuScope.col === $scope.col) {
	                  // ... hide it
	                  uiGridCtrl.columnMenuScope.hideMenu();
	                }
	                // ... and we're NOT the column the menu is on
	                else {
	                  // ... move the menu to our column
	                  uiGridCtrl.columnMenuScope.showMenu($scope.col, $elm);
	                }
	              }
	              // If the menu is NOT showing
	              else {
	                // ... show it on our column
	                uiGridCtrl.columnMenuScope.showMenu($scope.col, $elm);
	              }
	            };
	          }
	        };
	      }
	    };

	    return uiGridHeaderCell;
	  }]);

	})();

	(function(){
	  'use strict';

	  angular.module('ui.grid').directive('uiGridHeader', ['$templateCache', '$compile', 'uiGridConstants', 'gridUtil', '$timeout', 'ScrollEvent',
	    function($templateCache, $compile, uiGridConstants, gridUtil, $timeout, ScrollEvent) {
	    var defaultTemplate = 'ui-grid/ui-grid-header';
	    var emptyTemplate = 'ui-grid/ui-grid-no-header';

	    return {
	      restrict: 'EA',
	      // templateUrl: 'ui-grid/ui-grid-header',
	      replace: true,
	      // priority: 1000,
	      require: ['^uiGrid', '^uiGridRenderContainer'],
	      scope: true,
	      compile: function($elm, $attrs) {
	        return {
	          pre: function ($scope, $elm, $attrs, controllers) {
	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];

	            $scope.grid = uiGridCtrl.grid;
	            $scope.colContainer = containerCtrl.colContainer;

	            updateHeaderReferences();
	            
	            var headerTemplate;
	            if (!$scope.grid.options.showHeader) {
	              headerTemplate = emptyTemplate;
	            }
	            else {
	              headerTemplate = ($scope.grid.options.headerTemplate) ? $scope.grid.options.headerTemplate : defaultTemplate;            
	            }

	            gridUtil.getTemplate(headerTemplate)
	              .then(function (contents) {
	                var template = angular.element(contents);
	                
	                var newElm = $compile(template)($scope);
	                $elm.replaceWith(newElm);

	                // And update $elm to be the new element
	                $elm = newElm;

	                updateHeaderReferences();

	                if (containerCtrl) {
	                  // Inject a reference to the header viewport (if it exists) into the grid controller for use in the horizontal scroll handler below
	                  var headerViewport = $elm[0].getElementsByClassName('ui-grid-header-viewport')[0];


	                  if (headerViewport) {
	                    containerCtrl.headerViewport = headerViewport;
	                    angular.element(headerViewport).on('scroll', scrollHandler);
	                    $scope.$on('$destroy', function () {
	                      angular.element(headerViewport).off('scroll', scrollHandler);
	                    });
	                  }
	                }

	                $scope.grid.queueRefresh();
	              });

	            function updateHeaderReferences() {
	              containerCtrl.header = containerCtrl.colContainer.header = $elm;

	              var headerCanvases = $elm[0].getElementsByClassName('ui-grid-header-canvas');

	              if (headerCanvases.length > 0) {
	                containerCtrl.headerCanvas = containerCtrl.colContainer.headerCanvas = headerCanvases[0];
	              }
	              else {
	                containerCtrl.headerCanvas = null;
	              }
	            }

	            function scrollHandler(evt) {
	              if (uiGridCtrl.grid.isScrollingHorizontally) {
	                return;
	              }
	              var newScrollLeft = gridUtil.normalizeScrollLeft(containerCtrl.headerViewport, uiGridCtrl.grid);
	              var horizScrollPercentage = containerCtrl.colContainer.scrollHorizontal(newScrollLeft);

	              var scrollEvent = new ScrollEvent(uiGridCtrl.grid, null, containerCtrl.colContainer, ScrollEvent.Sources.ViewPortScroll);
	              scrollEvent.newScrollLeft = newScrollLeft;
	              if ( horizScrollPercentage > -1 ){
	                scrollEvent.x = { percentage: horizScrollPercentage };
	              }

	              uiGridCtrl.grid.scrollContainers(null, scrollEvent);
	            }
	          },

	          post: function ($scope, $elm, $attrs, controllers) {
	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];

	            // gridUtil.logDebug('ui-grid-header link');

	            var grid = uiGridCtrl.grid;

	            // Don't animate header cells
	            gridUtil.disableAnimations($elm);

	            function updateColumnWidths() {
	              // this styleBuilder always runs after the renderContainer, so we can rely on the column widths
	              // already being populated correctly

	              var columnCache = containerCtrl.colContainer.visibleColumnCache;
	              
	              // Build the CSS
	              // uiGridCtrl.grid.columns.forEach(function (column) {
	              var ret = '';
	              var canvasWidth = 0;
	              columnCache.forEach(function (column) {
	                ret = ret + column.getColClassDefinition();
	                canvasWidth += column.drawnWidth;
	              });

	              containerCtrl.colContainer.canvasWidth = canvasWidth;
	              
	              // Return the styles back to buildStyles which pops them into the `customStyles` scope variable
	              return ret;
	            }
	            
	            containerCtrl.header = $elm;
	            
	            var headerViewport = $elm[0].getElementsByClassName('ui-grid-header-viewport')[0];
	            if (headerViewport) {
	              containerCtrl.headerViewport = headerViewport;
	            }

	            //todo: remove this if by injecting gridCtrl into unit tests
	            if (uiGridCtrl) {
	              uiGridCtrl.grid.registerStyleComputation({
	                priority: 15,
	                func: updateColumnWidths
	              });
	            }
	          }
	        };
	      }
	    };
	  }]);

	})();

	(function(){

	angular.module('ui.grid')
	.service('uiGridGridMenuService', [ 'gridUtil', 'i18nService', 'uiGridConstants', function( gridUtil, i18nService, uiGridConstants ) {
	  /**
	   *  @ngdoc service
	   *  @name ui.grid.gridMenuService
	   *
	   *  @description Methods for working with the grid menu
	   */

	  var service = {
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.gridMenuService
	     * @name initialize
	     * @description Sets up the gridMenu. Most importantly, sets our
	     * scope onto the grid object as grid.gridMenuScope, allowing us
	     * to operate when passed only the grid.  Second most importantly,
	     * we register the 'addToGridMenu' and 'removeFromGridMenu' methods
	     * on the core api.
	     * @param {$scope} $scope the scope of this gridMenu
	     * @param {Grid} grid the grid to which this gridMenu is associated
	     */
	    initialize: function( $scope, grid ){
	      grid.gridMenuScope = $scope;
	      $scope.grid = grid;
	      $scope.registeredMenuItems = [];

	      // not certain this is needed, but would be bad to create a memory leak
	      $scope.$on('$destroy', function() {
	        if ( $scope.grid && $scope.grid.gridMenuScope ){
	          $scope.grid.gridMenuScope = null;
	        }
	        if ( $scope.grid ){
	          $scope.grid = null;
	        }
	        if ( $scope.registeredMenuItems ){
	          $scope.registeredMenuItems = null;
	        }
	      });

	      $scope.registeredMenuItems = [];

	      /**
	       * @ngdoc function
	       * @name addToGridMenu
	       * @methodOf ui.grid.core.api:PublicApi
	       * @description add items to the grid menu.  Used by features
	       * to add their menu items if they are enabled, can also be used by
	       * end users to add menu items.  This method has the advantage of allowing
	       * remove again, which can simplify management of which items are included
	       * in the menu when.  (Noting that in most cases the shown and active functions
	       * provide a better way to handle visibility of menu items)
	       * @param {Grid} grid the grid on which we are acting
	       * @param {array} items menu items in the format as described in the tutorial, with
	       * the added note that if you want to use remove you must also specify an `id` field,
	       * which is provided when you want to remove an item.  The id should be unique.
	       *
	       */
	      grid.api.registerMethod( 'core', 'addToGridMenu', service.addToGridMenu );

	      /**
	       * @ngdoc function
	       * @name removeFromGridMenu
	       * @methodOf ui.grid.core.api:PublicApi
	       * @description Remove an item from the grid menu based on a provided id. Assumes
	       * that the id is unique, removes only the last instance of that id. Does nothing if
	       * the specified id is not found
	       * @param {Grid} grid the grid on which we are acting
	       * @param {string} id the id we'd like to remove from the menu
	       *
	       */
	      grid.api.registerMethod( 'core', 'removeFromGridMenu', service.removeFromGridMenu );
	    },


	    /**
	     * @ngdoc function
	     * @name addToGridMenu
	     * @propertyOf ui.grid.gridMenuService
	     * @description add items to the grid menu.  Used by features
	     * to add their menu items if they are enabled, can also be used by
	     * end users to add menu items.  This method has the advantage of allowing
	     * remove again, which can simplify management of which items are included
	     * in the menu when.  (Noting that in most cases the shown and active functions
	     * provide a better way to handle visibility of menu items)
	     * @param {Grid} grid the grid on which we are acting
	     * @param {array} items menu items in the format as described in the tutorial, with
	     * the added note that if you want to use remove you must also specify an `id` field,
	     * which is provided when you want to remove an item.  The id should be unique.
	     *
	     */
	    addToGridMenu: function( grid, menuItems ) {
	      if ( !angular.isArray( menuItems ) ) {
	        gridUtil.logError( 'addToGridMenu: menuItems must be an array, and is not, not adding any items');
	      } else {
	        if ( grid.gridMenuScope ){
	          grid.gridMenuScope.registeredMenuItems = grid.gridMenuScope.registeredMenuItems ? grid.gridMenuScope.registeredMenuItems : [];
	          grid.gridMenuScope.registeredMenuItems = grid.gridMenuScope.registeredMenuItems.concat( menuItems );
	        } else {
	          gridUtil.logError( 'Asked to addToGridMenu, but gridMenuScope not present.  Timing issue?  Please log issue with ui-grid');
	        }
	      }
	    },


	    /**
	     * @ngdoc function
	     * @name removeFromGridMenu
	     * @methodOf ui.grid.gridMenuService
	     * @description Remove an item from the grid menu based on a provided id.  Assumes
	     * that the id is unique, removes only the last instance of that id.  Does nothing if
	     * the specified id is not found.  If there is no gridMenuScope or registeredMenuItems
	     * then do nothing silently - the desired result is those menu items not be present and they
	     * aren't.
	     * @param {Grid} grid the grid on which we are acting
	     * @param {string} id the id we'd like to remove from the menu
	     *
	     */
	    removeFromGridMenu: function( grid, id ){
	      var foundIndex = -1;

	      if ( grid && grid.gridMenuScope ){
	        grid.gridMenuScope.registeredMenuItems.forEach( function( value, index ) {
	          if ( value.id === id ){
	            if (foundIndex > -1) {
	              gridUtil.logError( 'removeFromGridMenu: found multiple items with the same id, removing only the last' );
	            } else {

	              foundIndex = index;
	            }
	          }
	        });
	      }

	      if ( foundIndex > -1 ){
	        grid.gridMenuScope.registeredMenuItems.splice( foundIndex, 1 );
	      }
	    },


	    /**
	     * @ngdoc array
	     * @name gridMenuCustomItems
	     * @propertyOf ui.grid.class:GridOptions
	     * @description (optional) An array of menu items that should be added to
	     * the gridMenu.  Follow the format documented in the tutorial for column
	     * menu customisation.  The context provided to the action function will
	     * include context.grid.  An alternative if working with dynamic menus is to use the
	     * provided api - core.addToGridMenu and core.removeFromGridMenu, which handles
	     * some of the management of items for you.
	     *
	     */
	    /**
	     * @ngdoc boolean
	     * @name gridMenuShowHideColumns
	     * @propertyOf ui.grid.class:GridOptions
	     * @description true by default, whether the grid menu should allow hide/show
	     * of columns
	     *
	     */
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.gridMenuService
	     * @name getMenuItems
	     * @description Decides the menu items to show in the menu.  This is a
	     * combination of:
	     *
	     * - the default menu items that are always included,
	     * - any menu items that have been provided through the addMenuItem api. These
	     *   are typically added by features within the grid
	     * - any menu items included in grid.options.gridMenuCustomItems.  These can be
	     *   changed dynamically, as they're always recalculated whenever we show the
	     *   menu
	     * @param {$scope} $scope the scope of this gridMenu, from which we can find all
	     * the information that we need
	     * @returns {array} an array of menu items that can be shown
	     */
	    getMenuItems: function( $scope ) {
	      var menuItems = [
	        // this is where we add any menu items we want to always include
	      ];

	      if ( $scope.grid.options.gridMenuCustomItems ){
	        if ( !angular.isArray( $scope.grid.options.gridMenuCustomItems ) ){
	          gridUtil.logError( 'gridOptions.gridMenuCustomItems must be an array, and is not');
	        } else {
	          menuItems = menuItems.concat( $scope.grid.options.gridMenuCustomItems );
	        }
	      }

	      var clearFilters = [{
	        title: i18nService.getSafeText('gridMenu.clearAllFilters'),
	        action: function ($event) {
	          $scope.grid.clearAllFilters(undefined, true, undefined);
	        },
	        shown: function() {
	          return $scope.grid.options.enableFiltering;
	        },
	        order: 100
	      }];
	      menuItems = menuItems.concat( clearFilters );

	      menuItems = menuItems.concat( $scope.registeredMenuItems );

	      if ( $scope.grid.options.gridMenuShowHideColumns !== false ){
	        menuItems = menuItems.concat( service.showHideColumns( $scope ) );
	      }

	      menuItems.sort(function(a, b){
	        return a.order - b.order;
	      });

	      return menuItems;
	    },


	    /**
	     * @ngdoc array
	     * @name gridMenuTitleFilter
	     * @propertyOf ui.grid.class:GridOptions
	     * @description (optional) A function that takes a title string
	     * (usually the col.displayName), and converts it into a display value.  The function
	     * must return either a string or a promise.
	     *
	     * Used for internationalization of the grid menu column names - for angular-translate
	     * you can pass $translate as the function, for i18nService you can pass getSafeText as the
	     * function
	     * @example
	     * <pre>
	     *   gridOptions = {
	     *     gridMenuTitleFilter: $translate
	     *   }
	     * </pre>
	     */
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.gridMenuService
	     * @name showHideColumns
	     * @description Adds two menu items for each of the columns in columnDefs.  One
	     * menu item for hide, one menu item for show.  Each is visible when appropriate
	     * (show when column is not visible, hide when column is visible).  Each toggles
	     * the visible property on the columnDef using toggleColumnVisibility
	     * @param {$scope} $scope of a gridMenu, which contains a reference to the grid
	     */
	    showHideColumns: function( $scope ){
	      var showHideColumns = [];
	      if ( !$scope.grid.options.columnDefs || $scope.grid.options.columnDefs.length === 0 || $scope.grid.columns.length === 0 ) {
	        return showHideColumns;
	      }

	      // add header for columns
	      showHideColumns.push({
	        title: i18nService.getSafeText('gridMenu.columns'),
	        order: 300
	      });

	      $scope.grid.options.gridMenuTitleFilter = $scope.grid.options.gridMenuTitleFilter ? $scope.grid.options.gridMenuTitleFilter : function( title ) { return title; };

	      $scope.grid.options.columnDefs.forEach( function( colDef, index ){
	        if ( colDef.enableHiding !== false ){
	          // add hide menu item - shows an OK icon as we only show when column is already visible
	          var menuItem = {
	            icon: 'ui-grid-icon-ok',
	            action: function($event) {
	              $event.stopPropagation();
	              service.toggleColumnVisibility( this.context.gridCol );
	            },
	            shown: function() {
	              return this.context.gridCol.colDef.visible === true || this.context.gridCol.colDef.visible === undefined;
	            },
	            context: { gridCol: $scope.grid.getColumn(colDef.name || colDef.field) },
	            leaveOpen: true,
	            order: 301 + index * 2
	          };
	          service.setMenuItemTitle( menuItem, colDef, $scope.grid );
	          showHideColumns.push( menuItem );

	          // add show menu item - shows no icon as we only show when column is invisible
	          menuItem = {
	            icon: 'ui-grid-icon-cancel',
	            action: function($event) {
	              $event.stopPropagation();
	              service.toggleColumnVisibility( this.context.gridCol );
	            },
	            shown: function() {
	              return !(this.context.gridCol.colDef.visible === true || this.context.gridCol.colDef.visible === undefined);
	            },
	            context: { gridCol: $scope.grid.getColumn(colDef.name || colDef.field) },
	            leaveOpen: true,
	            order: 301 + index * 2 + 1
	          };
	          service.setMenuItemTitle( menuItem, colDef, $scope.grid );
	          showHideColumns.push( menuItem );
	        }
	      });
	      return showHideColumns;
	    },


	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.gridMenuService
	     * @name setMenuItemTitle
	     * @description Handles the response from gridMenuTitleFilter, adding it directly to the menu
	     * item if it returns a string, otherwise waiting for the promise to resolve or reject then
	     * putting the result into the title
	     * @param {object} menuItem the menuItem we want to put the title on
	     * @param {object} colDef the colDef from which we can get displayName, name or field
	     * @param {Grid} grid the grid, from which we can get the options.gridMenuTitleFilter
	     *
	     */
	    setMenuItemTitle: function( menuItem, colDef, grid ){
	      var title = grid.options.gridMenuTitleFilter( colDef.displayName || gridUtil.readableColumnName(colDef.name) || colDef.field );

	      if ( typeof(title) === 'string' ){
	        menuItem.title = title;
	      } else if ( title.then ){
	        // must be a promise
	        menuItem.title = "";
	        title.then( function( successValue ) {
	          menuItem.title = successValue;
	        }, function( errorValue ) {
	          menuItem.title = errorValue;
	        });
	      } else {
	        gridUtil.logError('Expected gridMenuTitleFilter to return a string or a promise, it has returned neither, bad config');
	        menuItem.title = 'badconfig';
	      }
	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.gridMenuService
	     * @name toggleColumnVisibility
	     * @description Toggles the visibility of an individual column.  Expects to be
	     * provided a context that has on it a gridColumn, which is the column that
	     * we'll operate upon.  We change the visibility, and refresh the grid as appropriate
	     * @param {GridCol} gridCol the column that we want to toggle
	     *
	     */
	    toggleColumnVisibility: function( gridCol ) {
	      gridCol.colDef.visible = !( gridCol.colDef.visible === true || gridCol.colDef.visible === undefined );

	      gridCol.grid.refresh();
	      gridCol.grid.api.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
	      gridCol.grid.api.core.raise.columnVisibilityChanged( gridCol );
	    }
	  };

	  return service;
	}])



	.directive('uiGridMenuButton', ['gridUtil', 'uiGridConstants', 'uiGridGridMenuService', 'i18nService',
	function (gridUtil, uiGridConstants, uiGridGridMenuService, i18nService) {

	  return {
	    priority: 0,
	    scope: true,
	    require: ['^uiGrid'],
	    templateUrl: 'ui-grid/ui-grid-menu-button',
	    replace: true,

	    link: function ($scope, $elm, $attrs, controllers) {
	      var uiGridCtrl = controllers[0];

	      // For the aria label
	      $scope.i18n = {
	        aria: i18nService.getSafeText('gridMenu.aria')
	      };

	      uiGridGridMenuService.initialize($scope, uiGridCtrl.grid);

	      $scope.shown = false;

	      $scope.toggleMenu = function () {
	        if ( $scope.shown ){
	          $scope.$broadcast('hide-menu');
	          $scope.shown = false;
	        } else {
	          $scope.menuItems = uiGridGridMenuService.getMenuItems( $scope );
	          $scope.$broadcast('show-menu');
	          $scope.shown = true;
	        }
	      };

	      $scope.$on('menu-hidden', function() {
	        $scope.shown = false;
	        gridUtil.focus.bySelector($elm, '.ui-grid-icon-container');
	      });
	    }
	  };

	}]);

	})();

	(function(){

	/**
	 * @ngdoc directive
	 * @name ui.grid.directive:uiGridMenu
	 * @element style
	 * @restrict A
	 *
	 * @description
	 * Allows us to interpolate expressions in `<style>` elements. Angular doesn't do this by default as it can/will/might? break in IE8.
	 *
	 * @example
	 <doc:example module="app">
	 <doc:source>
	 <script>
	 var app = angular.module('app', ['ui.grid']);

	 app.controller('MainCtrl', ['$scope', function ($scope) {

	 }]);
	 </script>

	 <div ng-controller="MainCtrl">
	   <div ui-grid-menu shown="true"  ></div>
	 </div>
	 </doc:source>
	 <doc:scenario>
	 </doc:scenario>
	 </doc:example>
	 */
	angular.module('ui.grid')

	.directive('uiGridMenu', ['$compile', '$timeout', '$window', '$document', 'gridUtil', 'uiGridConstants', 'i18nService',
	function ($compile, $timeout, $window, $document, gridUtil, uiGridConstants, i18nService) {
	  var uiGridMenu = {
	    priority: 0,
	    scope: {
	      // shown: '&',
	      menuItems: '=',
	      autoHide: '=?'
	    },
	    require: '?^uiGrid',
	    templateUrl: 'ui-grid/uiGridMenu',
	    replace: false,
	    link: function ($scope, $elm, $attrs, uiGridCtrl) {

	      $scope.dynamicStyles = '';

	      var setupHeightStyle = function(gridHeight) {
	        //menu appears under header row, so substract that height from it's total
	        // additional 20px for general padding
	        var gridMenuMaxHeight = gridHeight - uiGridCtrl.grid.headerHeight - 20;
	        $scope.dynamicStyles = [
	          '.grid' + uiGridCtrl.grid.id + ' .ui-grid-menu-mid {',
	          'max-height: ' + gridMenuMaxHeight + 'px;',
	          '}'
	        ].join(' ');
	      };

	      if (uiGridCtrl) {
	        setupHeightStyle(uiGridCtrl.grid.gridHeight);
	        uiGridCtrl.grid.api.core.on.gridDimensionChanged($scope, function(oldGridHeight, oldGridWidth, newGridHeight, newGridWidth) {
	          setupHeightStyle(newGridHeight);
			});
	      }

	      $scope.i18n = {
	        close: i18nService.getSafeText('columnMenu.close')
	      };

	    // *** Show/Hide functions ******
	      $scope.showMenu = function(event, args) {
	        if ( !$scope.shown ){

	          /*
	           * In order to animate cleanly we remove the ng-if, wait a digest cycle, then
	           * animate the removal of the ng-hide.  We can't successfully (so far as I can tell)
	           * animate removal of the ng-if, as the menu items aren't there yet.  And we don't want
	           * to rely on ng-show only, as that leaves elements in the DOM that are needlessly evaluated
	           * on scroll events.
	           *
	           * Note when testing animation that animations don't run on the tutorials.  When debugging it looks
	           * like they do, but angular has a default $animate provider that is just a stub, and that's what's
	           * being called.  ALso don't be fooled by the fact that your browser has actually loaded the
	           * angular-translate.js, it's not using it.  You need to test animations in an external application.
	           */
	          $scope.shown = true;

	          $timeout( function() {
	            $scope.shownMid = true;
	            $scope.$emit('menu-shown');
	          });
	        } else if ( !$scope.shownMid ) {
	          // we're probably doing a hide then show, so we don't need to wait for ng-if
	          $scope.shownMid = true;
	          $scope.$emit('menu-shown');
	        }

	        var docEventType = 'click';
	        if (args && args.originalEvent && args.originalEvent.type && args.originalEvent.type === 'touchstart') {
	          docEventType = args.originalEvent.type;
	        }

	        // Turn off an existing document click handler
	        angular.element(document).off('click touchstart', applyHideMenu);
	        $elm.off('keyup', checkKeyUp);
	        $elm.off('keydown', checkKeyDown);

	        // Turn on the document click handler, but in a timeout so it doesn't apply to THIS click if there is one
	        $timeout(function() {
	          angular.element(document).on(docEventType, applyHideMenu);
	          $elm.on('keyup', checkKeyUp);
	          $elm.on('keydown', checkKeyDown);

	        });
	        //automatically set the focus to the first button element in the now open menu.
	        gridUtil.focus.bySelector($elm, 'button[type=button]', true);
	      };


	      $scope.hideMenu = function(event) {
	        if ( $scope.shown ){
	          /*
	           * In order to animate cleanly we animate the addition of ng-hide, then use a $timeout to
	           * set the ng-if (shown = false) after the animation runs.  In theory we can cascade off the
	           * callback on the addClass method, but it is very unreliable with unit tests for no discernable reason.
	           *
	           * The user may have clicked on the menu again whilst
	           * we're waiting, so we check that the mid isn't shown before applying the ng-if.
	           */
	          $scope.shownMid = false;
	          $timeout( function() {
	            if ( !$scope.shownMid ){
	              $scope.shown = false;
	              $scope.$emit('menu-hidden');
	            }
	          }, 200);
	        }

	        angular.element(document).off('click touchstart', applyHideMenu);
	        $elm.off('keyup', checkKeyUp);
	        $elm.off('keydown', checkKeyDown);
	      };

	      $scope.$on('hide-menu', function (event, args) {
	        $scope.hideMenu(event, args);
	      });

	      $scope.$on('show-menu', function (event, args) {
	        $scope.showMenu(event, args);
	      });


	    // *** Auto hide when click elsewhere ******
	      var applyHideMenu = function(){
	        if ($scope.shown) {
	          $scope.$apply(function () {
	            $scope.hideMenu();
	          });
	        }
	      };

	      // close menu on ESC and keep tab cyclical
	      var checkKeyUp = function(event) {
	        if (event.keyCode === 27) {
	          $scope.hideMenu();
	        }
	      };

	      var checkKeyDown = function(event) {
	        var setFocus = function(elm) {
	          elm.focus();
	          event.preventDefault();
	          return false;
	        };
	        if (event.keyCode === 9) {
	          var firstMenuItem, lastMenuItem;
	          var menuItemButtons = $elm[0].querySelectorAll('button:not(.ng-hide)');
	          if (menuItemButtons.length > 0) {
	            firstMenuItem = menuItemButtons[0];
	            lastMenuItem = menuItemButtons[menuItemButtons.length - 1];
	            if (event.target === lastMenuItem && !event.shiftKey) {
	              setFocus(firstMenuItem);
	            } else if (event.target === firstMenuItem && event.shiftKey) {
	              setFocus(lastMenuItem);
	            }
	          }
	        }
	      };

	      if (typeof($scope.autoHide) === 'undefined' || $scope.autoHide === undefined) {
	        $scope.autoHide = true;
	      }

	      if ($scope.autoHide) {
	        angular.element($window).on('resize', applyHideMenu);
	      }

	      $scope.$on('$destroy', function () {
	        angular.element(document).off('click touchstart', applyHideMenu);
	      });


	      $scope.$on('$destroy', function() {
	        angular.element($window).off('resize', applyHideMenu);
	      });

	      if (uiGridCtrl) {
	       $scope.$on('$destroy', uiGridCtrl.grid.api.core.on.scrollBegin($scope, applyHideMenu ));
	      }

	      $scope.$on('$destroy', $scope.$on(uiGridConstants.events.ITEM_DRAGGING, applyHideMenu ));
	    }
	  };

	  return uiGridMenu;
	}])

	.directive('uiGridMenuItem', ['gridUtil', '$compile', 'i18nService', function (gridUtil, $compile, i18nService) {
	  var uiGridMenuItem = {
	    priority: 0,
	    scope: {
	      name: '=',
	      active: '=',
	      action: '=',
	      icon: '=',
	      shown: '=',
	      context: '=',
	      templateUrl: '=',
	      leaveOpen: '=',
	      screenReaderOnly: '='
	    },
	    require: ['?^uiGrid'],
	    templateUrl: 'ui-grid/uiGridMenuItem',
	    replace: false,
	    compile: function() {
	      return {
	        pre: function ($scope, $elm) {
	          if ($scope.templateUrl) {
	            gridUtil.getTemplate($scope.templateUrl)
	                .then(function (contents) {
	                  var template = angular.element(contents);

	                  var newElm = $compile(template)($scope);
	                  $elm.replaceWith(newElm);
	                });
	          }
	        },
	        post: function ($scope, $elm, $attrs, controllers) {
	          var uiGridCtrl = controllers[0];

	          // TODO(c0bra): validate that shown and active are functions if they're defined. An exception is already thrown above this though
	          // if (typeof($scope.shown) !== 'undefined' && $scope.shown && typeof($scope.shown) !== 'function') {
	          //   throw new TypeError("$scope.shown is defined but not a function");
	          // }
	          if (typeof($scope.shown) === 'undefined' || $scope.shown === null) {
	            $scope.shown = function() { return true; };
	          }

	          $scope.itemShown = function () {
	            var context = {};
	            if ($scope.context) {
	              context.context = $scope.context;
	            }

	            if (typeof(uiGridCtrl) !== 'undefined' && uiGridCtrl) {
	              context.grid = uiGridCtrl.grid;
	            }

	            return $scope.shown.call(context);
	          };

	          $scope.itemAction = function($event,title) {
	            $event.stopPropagation();

	            if (typeof($scope.action) === 'function') {
	              var context = {};

	              if ($scope.context) {
	                context.context = $scope.context;
	              }

	              // Add the grid to the function call context if the uiGrid controller is present
	              if (typeof(uiGridCtrl) !== 'undefined' && uiGridCtrl) {
	                context.grid = uiGridCtrl.grid;
	              }

	              $scope.action.call(context, $event, title);

	              if ( !$scope.leaveOpen ){
	                $scope.$emit('hide-menu');
	              } else {
	                /*
	                 * XXX: Fix after column refactor
	                 * Ideally the focus would remain on the item.
	                 * However, since there are two menu items that have their 'show' property toggled instead. This is a quick fix.
	                 */
	                gridUtil.focus.bySelector(angular.element(gridUtil.closestElm($elm, ".ui-grid-menu-items")), 'button[type=button]', true);
	              }
	            }
	          };

	          $scope.i18n = i18nService.get();
	        }
	      };
	    }
	  };

	  return uiGridMenuItem;
	}]);

	})();

	(function(){
	  'use strict';
	  /**
	   * @ngdoc overview
	   * @name ui.grid.directive:uiGridOneBind
	   * @summary A group of directives that provide a one time bind to a dom element.
	   * @description A group of directives that provide a one time bind to a dom element.
	   * As one time bindings are not supported in Angular 1.2.* this directive provdes this capability.
	   * This is done to reduce the number of watchers on the dom.
	   * <br/>
	   * <h2>Short Example ({@link ui.grid.directive:uiGridOneBindSrc ui-grid-one-bind-src})</h2>
	   * <pre>
	        <div ng-init="imageName = 'myImageDir.jpg'">
	          <img ui-grid-one-bind-src="imageName"></img>
	        </div>
	     </pre>
	   * Will become:
	   * <pre>
	       <div ng-init="imageName = 'myImageDir.jpg'">
	         <img ui-grid-one-bind-src="imageName" src="myImageDir.jpg"></img>
	       </div>
	     </pre>
	     </br>
	     <h2>Short Example ({@link ui.grid.directive:uiGridOneBindText ui-grid-one-bind-text})</h2>
	   * <pre>
	        <div ng-init="text='Add this text'" ui-grid-one-bind-text="text"></div>
	     </pre>
	   * Will become:
	   * <pre>
	   <div ng-init="text='Add this text'" ui-grid-one-bind-text="text">Add this text</div>
	     </pre>
	     </br>
	   * <b>Note:</b> This behavior is slightly different for the {@link ui.grid.directive:uiGridOneBindIdGrid uiGridOneBindIdGrid}
	   * and {@link ui.grid.directive:uiGridOneBindAriaLabelledbyGrid uiGridOneBindAriaLabelledbyGrid} directives.
	   *
	   */
	  //https://github.com/joshkurz/Black-Belt-AngularJS-Directives/blob/master/directives/Optimization/oneBind.js
	  var oneBinders = angular.module('ui.grid');
	  angular.forEach([
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindSrc
	       * @memberof ui.grid.directive:uiGridOneBind
	       * @element img
	       * @restrict A
	       * @param {String} uiGridOneBindSrc The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the src dom tag.
	       *
	       */
	      {tag: 'Src', method: 'attr'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindText
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindText The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the text dom tag.
	       */
	      {tag: 'Text', method: 'text'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindHref
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindHref The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the href dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Href', method: 'attr'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindClass
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindClass The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @param {Object} uiGridOneBindClass The object that you want to bind. At least one of the values in the object must be something other than null or undefined for the watcher to be removed.
	       *                                    this is to prevent the watcher from being removed before the scope is initialized.
	       * @param {Array} uiGridOneBindClass An array of classes to bind to this element.
	       * @description One time binding for the class dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Class', method: 'addClass'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindHtml
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindHtml The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the html method on a dom element. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Html', method: 'html'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindAlt
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindAlt The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the alt dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Alt', method: 'attr'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindStyle
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindStyle The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the style dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Style', method: 'css'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindValue
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindValue The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the value dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Value', method: 'attr'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindId
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindId The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the value dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Id', method: 'attr'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindIdGrid
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindIdGrid The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the id dom tag.
	       * <h1>Important Note!</h1>
	       * If the id tag passed as a parameter does <b>not</b> contain the grid id as a substring
	       * then the directive will search the scope and the parent controller (if it is a uiGridController) for the grid.id value.
	       * If this value is found then it is appended to the begining of the id tag. If the grid is not found then the directive throws an error.
	       * This is done in order to ensure uniqueness of id tags across the grid.
	       * This is to prevent two grids in the same document having duplicate id tags.
	       */
	      {tag: 'Id', directiveName:'IdGrid', method: 'attr', appendGridId: true},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindTitle
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindTitle The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the title dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Title', method: 'attr'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindAriaLabel
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindAriaLabel The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the aria-label dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       *<br/>
	       * <pre>
	            <div ng-init="text='Add this text'" ui-grid-one-bind-aria-label="text"></div>
	         </pre>
	       * Will become:
	       * <pre>
	            <div ng-init="text='Add this text'" ui-grid-one-bind-aria-label="text" aria-label="Add this text"></div>
	         </pre>
	       */
	      {tag: 'Label', method: 'attr', aria:true},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindAriaLabelledby
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindAriaLabelledby The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the aria-labelledby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       *<br/>
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-labelledby="anId"></div>
	         </pre>
	       * Will become:
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-labelledby="anId" aria-labelledby="gridID32"></div>
	         </pre>
	       */
	      {tag: 'Labelledby', method: 'attr', aria:true},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindAriaLabelledbyGrid
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindAriaLabelledbyGrid The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the aria-labelledby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       * Works somewhat like {@link ui.grid.directive:uiGridOneBindIdGrid} however this one supports a list of ids (seperated by a space) and will dynamically add the
	       * grid id to each one.
	       *<br/>
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-labelledby-grid="anId"></div>
	         </pre>
	       * Will become ([grid.id] will be replaced by the actual grid id):
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-labelledby-grid="anId" aria-labelledby-Grid="[grid.id]-gridID32"></div>
	         </pre>
	       */
	      {tag: 'Labelledby', directiveName:'LabelledbyGrid', appendGridId:true, method: 'attr', aria:true},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindAriaDescribedby
	       * @element ANY
	       * @restrict A
	       * @param {String} uiGridOneBindAriaDescribedby The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the aria-describedby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       *<br/>
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-describedby="anId"></div>
	         </pre>
	       * Will become:
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-describedby="anId" aria-describedby="gridID32"></div>
	         </pre>
	       */
	      {tag: 'Describedby', method: 'attr', aria:true},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindAriaDescribedbyGrid
	       * @element ANY
	       * @restrict A
	       * @param {String} uiGridOneBindAriaDescribedbyGrid The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the aria-labelledby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       * Works somewhat like {@link ui.grid.directive:uiGridOneBindIdGrid} however this one supports a list of ids (seperated by a space) and will dynamically add the
	       * grid id to each one.
	       *<br/>
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-describedby-grid="anId"></div>
	         </pre>
	       * Will become ([grid.id] will be replaced by the actual grid id):
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-describedby-grid="anId" aria-describedby="[grid.id]-gridID32"></div>
	         </pre>
	       */
	      {tag: 'Describedby', directiveName:'DescribedbyGrid', appendGridId:true, method: 'attr', aria:true}],
	    function(v){

	      var baseDirectiveName = 'uiGridOneBind';
	      //If it is an aria tag then append the aria label seperately
	      //This is done because the aria tags are formatted aria-* and the directive name can't have a '-' character in it.
	      //If the diretiveName has to be overridden then it does so here. This is because the tag being modified and the directive sometimes don't match up.
	      var directiveName = (v.aria ? baseDirectiveName + 'Aria' : baseDirectiveName) + (v.directiveName ? v.directiveName : v.tag);
	      oneBinders.directive(directiveName, ['gridUtil', function(gridUtil){
	        return {
	          restrict: 'A',
	          require: ['?uiGrid','?^uiGrid'],
	          link: function(scope, iElement, iAttrs, controllers){
	            /* Appends the grid id to the beginnig of the value. */
	            var appendGridId = function(val){
	              var grid; //Get an instance of the grid if its available
	              //If its available in the scope then we don't need to try to find it elsewhere
	              if (scope.grid) {
	                grid = scope.grid;
	              }
	              //Another possible location to try to find the grid
	              else if (scope.col && scope.col.grid){
	                grid = scope.col.grid;
	              }
	              //Last ditch effort: Search through the provided controllers.
	              else if (!controllers.some( //Go through the controllers till one has the element we need
	                function(controller){
	                  if (controller && controller.grid) {
	                    grid = controller.grid;
	                    return true; //We've found the grid
	                  }
	              })){
	                //We tried our best to find it for you
	                gridUtil.logError("["+directiveName+"] A valid grid could not be found to bind id. Are you using this directive " +
	                                 "within the correct scope? Trying to generate id: [gridID]-" + val);
	                throw new Error("No valid grid could be found");
	              }

	              if (grid){
	                var idRegex = new RegExp(grid.id.toString());
	                //If the grid id hasn't been appended already in the template declaration
	                if (!idRegex.test(val)){
	                  val = grid.id.toString() + '-' + val;
	                }
	              }
	              return val;
	            };

	            // The watch returns a function to remove itself.
	            var rmWatcher = scope.$watch(iAttrs[directiveName], function(newV){
	              if (newV){
	                //If we are trying to add an id element then we also apply the grid id if it isn't already there
	                if (v.appendGridId) {
	                  var newIdString = null;
	                  //Append the id to all of the new ids.
	                  angular.forEach( newV.split(' '), function(s){
	                    newIdString = (newIdString ? (newIdString + ' ') : '') +  appendGridId(s);
	                  });
	                  newV = newIdString;
	                }

	                // Append this newValue to the dom element.
	                switch (v.method) {
	                  case 'attr': //The attr method takes two paraams the tag and the value
	                    if (v.aria) {
	                      //If it is an aria element then append the aria prefix
	                      iElement[v.method]('aria-' + v.tag.toLowerCase(),newV);
	                    } else {
	                      iElement[v.method](v.tag.toLowerCase(),newV);
	                    }
	                    break;
	                  case 'addClass':
	                    //Pulled from https://github.com/Pasvaz/bindonce/blob/master/bindonce.js
	                    if (angular.isObject(newV) && !angular.isArray(newV)) {
	                      var results = [];
	                      var nonNullFound = false; //We don't want to remove the binding unless the key is actually defined
	                      angular.forEach(newV, function (value, index) {
	                        if (value !== null && typeof(value) !== "undefined"){
	                          nonNullFound = true; //A non null value for a key was found so the object must have been initialized
	                          if (value) {results.push(index);}
	                        }
	                      });
	                      //A non null value for a key wasn't found so assume that the scope values haven't been fully initialized
	                      if (!nonNullFound){
	                        return; // If not initialized then the watcher should not be removed yet.
	                      }
	                      newV = results;
	                    }

	                    if (newV) {
	                      iElement.addClass(angular.isArray(newV) ? newV.join(' ') : newV);
	                    } else {
	                      return;
	                    }
	                    break;
	                  default:
	                    iElement[v.method](newV);
	                    break;
	                }

	                //Removes the watcher on itself after the bind
	                rmWatcher();
	              }
	            // True ensures that equality is determined using angular.equals instead of ===
	            }, true); //End rm watchers
	          } //End compile function
	        }; //End directive return
	      } // End directive function
	    ]); //End directive
	  }); // End angular foreach
	})();

	(function () {
	  'use strict';

	  var module = angular.module('ui.grid');

	  module.directive('uiGridRenderContainer', ['$timeout', '$document', 'uiGridConstants', 'gridUtil', 'ScrollEvent',
	    function($timeout, $document, uiGridConstants, gridUtil, ScrollEvent) {
	    return {
	      replace: true,
	      transclude: true,
	      templateUrl: 'ui-grid/uiGridRenderContainer',
	      require: ['^uiGrid', 'uiGridRenderContainer'],
	      scope: {
	        containerId: '=',
	        rowContainerName: '=',
	        colContainerName: '=',
	        bindScrollHorizontal: '=',
	        bindScrollVertical: '=',
	        enableVerticalScrollbar: '=',
	        enableHorizontalScrollbar: '='
	      },
	      controller: 'uiGridRenderContainer as RenderContainer',
	      compile: function () {
	        return {
	          pre: function prelink($scope, $elm, $attrs, controllers) {

	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];
	            var grid = $scope.grid = uiGridCtrl.grid;

	            // Verify that the render container for this element exists
	            if (!$scope.rowContainerName) {
	              throw "No row render container name specified";
	            }
	            if (!$scope.colContainerName) {
	              throw "No column render container name specified";
	            }

	            if (!grid.renderContainers[$scope.rowContainerName]) {
	              throw "Row render container '" + $scope.rowContainerName + "' is not registered.";
	            }
	            if (!grid.renderContainers[$scope.colContainerName]) {
	              throw "Column render container '" + $scope.colContainerName + "' is not registered.";
	            }

	            var rowContainer = $scope.rowContainer = grid.renderContainers[$scope.rowContainerName];
	            var colContainer = $scope.colContainer = grid.renderContainers[$scope.colContainerName];

	            containerCtrl.containerId = $scope.containerId;
	            containerCtrl.rowContainer = rowContainer;
	            containerCtrl.colContainer = colContainer;
	          },
	          post: function postlink($scope, $elm, $attrs, controllers) {

	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];

	            var grid = uiGridCtrl.grid;
	            var rowContainer = containerCtrl.rowContainer;
	            var colContainer = containerCtrl.colContainer;
	            var scrollTop = null;
	            var scrollLeft = null;


	            var renderContainer = grid.renderContainers[$scope.containerId];

	            // Put the container name on this element as a class
	            $elm.addClass('ui-grid-render-container-' + $scope.containerId);

	            // Scroll the render container viewport when the mousewheel is used
	            gridUtil.on.mousewheel($elm, function (event) {
	              var scrollEvent = new ScrollEvent(grid, rowContainer, colContainer, ScrollEvent.Sources.RenderContainerMouseWheel);
	              if (event.deltaY !== 0) {
	                var scrollYAmount = event.deltaY * -1 * event.deltaFactor;

	                scrollTop = containerCtrl.viewport[0].scrollTop;

	                // Get the scroll percentage
	                scrollEvent.verticalScrollLength = rowContainer.getVerticalScrollLength();
	                var scrollYPercentage = (scrollTop + scrollYAmount) / scrollEvent.verticalScrollLength;

	                // If we should be scrolled 100%, make sure the scrollTop matches the maximum scroll length
	                //   Viewports that have "overflow: hidden" don't let the mousewheel scroll all the way to the bottom without this check
	                if (scrollYPercentage >= 1 && scrollTop < scrollEvent.verticalScrollLength) {
	                  containerCtrl.viewport[0].scrollTop = scrollEvent.verticalScrollLength;
	                }

	                // Keep scrollPercentage within the range 0-1.
	                if (scrollYPercentage < 0) { scrollYPercentage = 0; }
	                else if (scrollYPercentage > 1) { scrollYPercentage = 1; }

	                scrollEvent.y = { percentage: scrollYPercentage, pixels: scrollYAmount };
	              }
	              if (event.deltaX !== 0) {
	                var scrollXAmount = event.deltaX * event.deltaFactor;

	                // Get the scroll percentage
	                scrollLeft = gridUtil.normalizeScrollLeft(containerCtrl.viewport, grid);
	                scrollEvent.horizontalScrollLength = (colContainer.getCanvasWidth() - colContainer.getViewportWidth());
	                var scrollXPercentage = (scrollLeft + scrollXAmount) / scrollEvent.horizontalScrollLength;

	                // Keep scrollPercentage within the range 0-1.
	                if (scrollXPercentage < 0) { scrollXPercentage = 0; }
	                else if (scrollXPercentage > 1) { scrollXPercentage = 1; }

	                scrollEvent.x = { percentage: scrollXPercentage, pixels: scrollXAmount };
	              }

	              // Let the parent container scroll if the grid is already at the top/bottom
	              if ((event.deltaY !== 0 && (scrollEvent.atTop(scrollTop) || scrollEvent.atBottom(scrollTop))) ||
	                  (event.deltaX !== 0 && (scrollEvent.atLeft(scrollLeft) || scrollEvent.atRight(scrollLeft)))) {
	                //parent controller scrolls
	              }
	              else {
	                event.preventDefault();
	                event.stopPropagation();
	                scrollEvent.fireThrottledScrollingEvent('', scrollEvent);
	              }

	            });

	            $elm.bind('$destroy', function() {
	              $elm.unbind('keydown');

	              ['touchstart', 'touchmove', 'touchend','keydown', 'wheel', 'mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'].forEach(function (eventName) {
	                $elm.unbind(eventName);
	              });
	            });

	            // TODO(c0bra): Handle resizing the inner canvas based on the number of elements
	            function update() {
	              var ret = '';

	              var canvasWidth = colContainer.canvasWidth;
	              var viewportWidth = colContainer.getViewportWidth();

	              var canvasHeight = rowContainer.getCanvasHeight();

	              //add additional height for scrollbar on left and right container
	              //if ($scope.containerId !== 'body') {
	              //  canvasHeight -= grid.scrollbarHeight;
	              //}

	              var viewportHeight = rowContainer.getViewportHeight();
	              //shorten the height to make room for a scrollbar placeholder
	              if (colContainer.needsHScrollbarPlaceholder()) {
	                viewportHeight -= grid.scrollbarHeight;
	              }

	              var headerViewportWidth,
	                  footerViewportWidth;
	              headerViewportWidth = footerViewportWidth = colContainer.getHeaderViewportWidth();

	              // Set canvas dimensions
	              ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-canvas { width: ' + canvasWidth + 'px; height: ' + canvasHeight + 'px; }';

	              ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-header-canvas { width: ' + (canvasWidth + grid.scrollbarWidth) + 'px; }';

	              if (renderContainer.explicitHeaderCanvasHeight) {
	                ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-header-canvas { height: ' + renderContainer.explicitHeaderCanvasHeight + 'px; }';
	              }
	              else {
	                ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-header-canvas { height: inherit; }';
	              }

	              ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-viewport { width: ' + viewportWidth + 'px; height: ' + viewportHeight + 'px; }';
	              ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-header-viewport { width: ' + headerViewportWidth + 'px; }';

	              ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-footer-canvas { width: ' + (canvasWidth + grid.scrollbarWidth) + 'px; }';
	              ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-footer-viewport { width: ' + footerViewportWidth + 'px; }';

	              return ret;
	            }

	            uiGridCtrl.grid.registerStyleComputation({
	              priority: 6,
	              func: update
	            });
	          }
	        };
	      }
	    };

	  }]);

	  module.controller('uiGridRenderContainer', ['$scope', 'gridUtil', function ($scope, gridUtil) {

	  }]);

	})();

	(function(){
	  'use strict';

	  angular.module('ui.grid').directive('uiGridRow', ['gridUtil', function(gridUtil) {
	    return {
	      replace: true,
	      // priority: 2001,
	      // templateUrl: 'ui-grid/ui-grid-row',
	      require: ['^uiGrid', '^uiGridRenderContainer'],
	      scope: {
	         row: '=uiGridRow',
	         //rowRenderIndex is added to scope to give the true visual index of the row to any directives that need it
	         rowRenderIndex: '='
	      },
	      compile: function() {
	        return {
	          pre: function($scope, $elm, $attrs, controllers) {
	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];

	            var grid = uiGridCtrl.grid;

	            $scope.grid = uiGridCtrl.grid;
	            $scope.colContainer = containerCtrl.colContainer;

	            // Function for attaching the template to this scope
	            var clonedElement, cloneScope;
	            function compileTemplate() {
	              $scope.row.getRowTemplateFn.then(function (compiledElementFn) {
	                // var compiledElementFn = $scope.row.compiledElementFn;

	                // Create a new scope for the contents of this row, so we can destroy it later if need be
	                var newScope = $scope.$new();

	                compiledElementFn(newScope, function (newElm, scope) {
	                  // If we already have a cloned element, we need to remove it and destroy its scope
	                  if (clonedElement) {
	                    clonedElement.remove();
	                    cloneScope.$destroy();
	                  }

	                  // Empty the row and append the new element
	                  $elm.empty().append(newElm);

	                  // Save the new cloned element and scope
	                  clonedElement = newElm;
	                  cloneScope = newScope;
	                });
	              });
	            }

	            // Initially attach the compiled template to this scope
	            compileTemplate();

	            // If the row's compiled element function changes, we need to replace this element's contents with the new compiled template
	            $scope.$watch('row.getRowTemplateFn', function (newFunc, oldFunc) {
	              if (newFunc !== oldFunc) {
	                compileTemplate();
	              }
	            });
	          },
	          post: function($scope, $elm, $attrs, controllers) {

	          }
	        };
	      }
	    };
	  }]);

	})();
	(function(){
	// 'use strict';

	  /**
	   * @ngdoc directive
	   * @name ui.grid.directive:uiGridStyle
	   * @element style
	   * @restrict A
	   *
	   * @description
	   * Allows us to interpolate expressions in `<style>` elements. Angular doesn't do this by default as it can/will/might? break in IE8.
	   *
	   * @example
	   <doc:example module="app">
	   <doc:source>
	   <script>
	   var app = angular.module('app', ['ui.grid']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	          $scope.myStyle = '.blah { border: 1px solid }';
	        }]);
	   </script>

	   <div ng-controller="MainCtrl">
	   <style ui-grid-style>{{ myStyle }}</style>
	   <span class="blah">I am in a box.</span>
	   </div>
	   </doc:source>
	   <doc:scenario>
	      it('should apply the right class to the element', function () {
	        element(by.css('.blah')).getCssValue('border-top-width')
	          .then(function(c) {
	            expect(c).toContain('1px');
	          });
	      });
	   </doc:scenario>
	   </doc:example>
	   */


	  angular.module('ui.grid').directive('uiGridStyle', ['gridUtil', '$interpolate', function(gridUtil, $interpolate) {
	    return {
	      // restrict: 'A',
	      // priority: 1000,
	      // require: '?^uiGrid',
	      link: function($scope, $elm, $attrs, uiGridCtrl) {
	        // gridUtil.logDebug('ui-grid-style link');
	        // if (uiGridCtrl === undefined) {
	        //    gridUtil.logWarn('[ui-grid-style link] uiGridCtrl is undefined!');
	        // }

	        var interpolateFn = $interpolate($elm.text(), true);

	        if (interpolateFn) {
	          $scope.$watch(interpolateFn, function(value) {
	            $elm.text(value);
	          });
	        }

	          // uiGridCtrl.recalcRowStyles = function() {
	          //   var offset = (scope.options.offsetTop || 0) - (scope.options.excessRows * scope.options.rowHeight);
	          //   var rowHeight = scope.options.rowHeight;

	          //   var ret = '';
	          //   var rowStyleCount = uiGridCtrl.minRowsToRender() + (scope.options.excessRows * 2);
	          //   for (var i = 1; i <= rowStyleCount; i++) {
	          //     ret = ret + ' .grid' + scope.gridId + ' .ui-grid-row:nth-child(' + i + ') { top: ' + offset + 'px; }';
	          //     offset = offset + rowHeight;
	          //   }

	          //   scope.rowStyles = ret;
	          // };

	          // uiGridCtrl.styleComputions.push(uiGridCtrl.recalcRowStyles);

	      }
	    };
	  }]);

	})();

	(function(){
	  'use strict';

	  angular.module('ui.grid').directive('uiGridViewport', ['gridUtil','ScrollEvent','uiGridConstants', '$log',
	    function(gridUtil, ScrollEvent, uiGridConstants, $log) {
	      return {
	        replace: true,
	        scope: {},
	        controllerAs: 'Viewport',
	        templateUrl: 'ui-grid/uiGridViewport',
	        require: ['^uiGrid', '^uiGridRenderContainer'],
	        link: function($scope, $elm, $attrs, controllers) {
	          // gridUtil.logDebug('viewport post-link');

	          var uiGridCtrl = controllers[0];
	          var containerCtrl = controllers[1];

	          $scope.containerCtrl = containerCtrl;

	          var rowContainer = containerCtrl.rowContainer;
	          var colContainer = containerCtrl.colContainer;

	          var grid = uiGridCtrl.grid;

	          $scope.grid = uiGridCtrl.grid;

	          // Put the containers in scope so we can get rows and columns from them
	          $scope.rowContainer = containerCtrl.rowContainer;
	          $scope.colContainer = containerCtrl.colContainer;

	          // Register this viewport with its container
	          containerCtrl.viewport = $elm;


	          $elm.on('scroll', scrollHandler);

	          var ignoreScroll = false;

	          function scrollHandler(evt) {
	            //Leaving in this commented code in case it can someday be used
	            //It does improve performance, but because the horizontal scroll is normalized,
	            //  using this code will lead to the column header getting slightly out of line with columns
	            //
	            //if (ignoreScroll && (grid.isScrollingHorizontally || grid.isScrollingHorizontally)) {
	            //  //don't ask for scrollTop if we just set it
	            //  ignoreScroll = false;
	            //  return;
	            //}
	            //ignoreScroll = true;

	            var newScrollTop = $elm[0].scrollTop;
	            var newScrollLeft = gridUtil.normalizeScrollLeft($elm, grid);

	            var vertScrollPercentage = rowContainer.scrollVertical(newScrollTop);
	            var horizScrollPercentage = colContainer.scrollHorizontal(newScrollLeft);

	            var scrollEvent = new ScrollEvent(grid, rowContainer, colContainer, ScrollEvent.Sources.ViewPortScroll);
	            scrollEvent.newScrollLeft = newScrollLeft;
	            scrollEvent.newScrollTop = newScrollTop;
	            if ( horizScrollPercentage > -1 ){
	              scrollEvent.x = { percentage: horizScrollPercentage };
	            }

	            if ( vertScrollPercentage > -1 ){
	              scrollEvent.y = { percentage: vertScrollPercentage };
	            }

	            grid.scrollContainers($scope.$parent.containerId, scrollEvent);
	          }

	          if ($scope.$parent.bindScrollVertical) {
	            grid.addVerticalScrollSync($scope.$parent.containerId, syncVerticalScroll);
	          }

	          if ($scope.$parent.bindScrollHorizontal) {
	            grid.addHorizontalScrollSync($scope.$parent.containerId, syncHorizontalScroll);
	            grid.addHorizontalScrollSync($scope.$parent.containerId + 'header', syncHorizontalHeader);
	            grid.addHorizontalScrollSync($scope.$parent.containerId + 'footer', syncHorizontalFooter);
	          }

	          function syncVerticalScroll(scrollEvent){
	            containerCtrl.prevScrollArgs = scrollEvent;
	            var newScrollTop = scrollEvent.getNewScrollTop(rowContainer,containerCtrl.viewport);
	            $elm[0].scrollTop = newScrollTop;

	          }

	          function syncHorizontalScroll(scrollEvent){
	            containerCtrl.prevScrollArgs = scrollEvent;
	            var newScrollLeft = scrollEvent.getNewScrollLeft(colContainer, containerCtrl.viewport);
	            $elm[0].scrollLeft =  gridUtil.denormalizeScrollLeft(containerCtrl.viewport,newScrollLeft, grid);
	          }

	          function syncHorizontalHeader(scrollEvent){
	            var newScrollLeft = scrollEvent.getNewScrollLeft(colContainer, containerCtrl.viewport);
	            if (containerCtrl.headerViewport) {
	              containerCtrl.headerViewport.scrollLeft = gridUtil.denormalizeScrollLeft(containerCtrl.viewport,newScrollLeft, grid);
	            }
	          }

	          function syncHorizontalFooter(scrollEvent){
	            var newScrollLeft = scrollEvent.getNewScrollLeft(colContainer, containerCtrl.viewport);
	            if (containerCtrl.footerViewport) {
	              containerCtrl.footerViewport.scrollLeft =  gridUtil.denormalizeScrollLeft(containerCtrl.viewport,newScrollLeft, grid);
	            }
	          }


	        },
	        controller: ['$scope', function ($scope) {
	          this.rowStyle = function (index) {
	            var rowContainer = $scope.rowContainer;
	            var colContainer = $scope.colContainer;

	            var styles = {};

	            if (index === 0 && rowContainer.currentTopRow !== 0) {
	              // The row offset-top is just the height of the rows above the current top-most row, which are no longer rendered
	              var hiddenRowWidth = (rowContainer.currentTopRow) * rowContainer.grid.options.rowHeight;

	              // return { 'margin-top': hiddenRowWidth + 'px' };
	              styles['margin-top'] = hiddenRowWidth + 'px';
	            }

	            if (colContainer.currentFirstColumn !== 0) {
	              if (colContainer.grid.isRTL()) {
	                styles['margin-right'] = colContainer.columnOffset + 'px';
	              }
	              else {
	                styles['margin-left'] = colContainer.columnOffset + 'px';
	              }
	            }

	            return styles;
	          };
	        }]
	      };
	    }
	  ]);

	})();

	(function() {

	angular.module('ui.grid')
	.directive('uiGridVisible', function uiGridVisibleAction() {
	  return function ($scope, $elm, $attr) {
	    $scope.$watch($attr.uiGridVisible, function (visible) {
	        // $elm.css('visibility', visible ? 'visible' : 'hidden');
	        $elm[visible ? 'removeClass' : 'addClass']('ui-grid-invisible');
	    });
	  };
	});

	})();
	(function () {
	  'use strict';

	  angular.module('ui.grid').controller('uiGridController', ['$scope', '$element', '$attrs', 'gridUtil', '$q', 'uiGridConstants',
	                    '$templateCache', 'gridClassFactory', '$timeout', '$parse', '$compile',
	    function ($scope, $elm, $attrs, gridUtil, $q, uiGridConstants,
	              $templateCache, gridClassFactory, $timeout, $parse, $compile) {
	      // gridUtil.logDebug('ui-grid controller');

	      var self = this;

	      self.grid = gridClassFactory.createGrid($scope.uiGrid);

	      //assign $scope.$parent if appScope not already assigned
	      self.grid.appScope = self.grid.appScope || $scope.$parent;

	      $elm.addClass('grid' + self.grid.id);
	      self.grid.rtl = gridUtil.getStyles($elm[0])['direction'] === 'rtl';


	      // angular.extend(self.grid.options, );

	      //all properties of grid are available on scope
	      $scope.grid = self.grid;

	      if ($attrs.uiGridColumns) {
	        $attrs.$observe('uiGridColumns', function(value) {
	          self.grid.options.columnDefs = value;
	          self.grid.buildColumns()
	            .then(function(){
	              self.grid.preCompileCellTemplates();

	              self.grid.refreshCanvas(true);
	            });
	        });
	      }


	      // if fastWatch is set we watch only the length and the reference, not every individual object
	      var deregFunctions = [];
	      if (self.grid.options.fastWatch) {
	        self.uiGrid = $scope.uiGrid;
	        if (angular.isString($scope.uiGrid.data)) {
	          deregFunctions.push( $scope.$parent.$watch($scope.uiGrid.data, dataWatchFunction) );
	          deregFunctions.push( $scope.$parent.$watch(function() {
	            if ( self.grid.appScope[$scope.uiGrid.data] ){
	              return self.grid.appScope[$scope.uiGrid.data].length;
	            } else {
	              return undefined;
	            }
	          }, dataWatchFunction) );
	        } else {
	          deregFunctions.push( $scope.$parent.$watch(function() { return $scope.uiGrid.data; }, dataWatchFunction) );
	          deregFunctions.push( $scope.$parent.$watch(function() { return $scope.uiGrid.data.length; }, function(){ dataWatchFunction($scope.uiGrid.data); }) );
	        }
	        deregFunctions.push( $scope.$parent.$watch(function() { return $scope.uiGrid.columnDefs; }, columnDefsWatchFunction) );
	        deregFunctions.push( $scope.$parent.$watch(function() { return $scope.uiGrid.columnDefs.length; }, function(){ columnDefsWatchFunction($scope.uiGrid.columnDefs); }) );
	      } else {
	        if (angular.isString($scope.uiGrid.data)) {
	          deregFunctions.push( $scope.$parent.$watchCollection($scope.uiGrid.data, dataWatchFunction) );
	        } else {
	          deregFunctions.push( $scope.$parent.$watchCollection(function() { return $scope.uiGrid.data; }, dataWatchFunction) );
	        }
	        deregFunctions.push( $scope.$parent.$watchCollection(function() { return $scope.uiGrid.columnDefs; }, columnDefsWatchFunction) );
	      }


	      function columnDefsWatchFunction(n, o) {
	        if (n && n !== o) {
	          self.grid.options.columnDefs = $scope.uiGrid.columnDefs;
	          self.grid.buildColumns({ orderByColumnDefs: true })
	            .then(function(){

	              self.grid.preCompileCellTemplates();

	              self.grid.callDataChangeCallbacks(uiGridConstants.dataChange.COLUMN);
	            });
	        }
	      }

	      var mostRecentData;

	      function dataWatchFunction(newData) {
	        // gridUtil.logDebug('dataWatch fired');
	        var promises = [];

	        if ( self.grid.options.fastWatch ){
	          if (angular.isString($scope.uiGrid.data)) {
	            newData = self.grid.appScope[$scope.uiGrid.data];
	          } else {
	            newData = $scope.uiGrid.data;
	          }
	        }

	        mostRecentData = newData;

	        if (newData) {
	          // columns length is greater than the number of row header columns, which don't count because they're created automatically
	          var hasColumns = self.grid.columns.length > (self.grid.rowHeaderColumns ? self.grid.rowHeaderColumns.length : 0);

	          if (
	            // If we have no columns
	            !hasColumns &&
	            // ... and we don't have a ui-grid-columns attribute, which would define columns for us
	            !$attrs.uiGridColumns &&
	            // ... and we have no pre-defined columns
	            self.grid.options.columnDefs.length === 0 &&
	            // ... but we DO have data
	            newData.length > 0
	          ) {
	            // ... then build the column definitions from the data that we have
	            self.grid.buildColumnDefsFromData(newData);
	          }

	          // If we haven't built columns before and either have some columns defined or some data defined
	          if (!hasColumns && (self.grid.options.columnDefs.length > 0 || newData.length > 0)) {
	            // Build the column set, then pre-compile the column cell templates
	            promises.push(self.grid.buildColumns()
	              .then(function() {
	                self.grid.preCompileCellTemplates();
	              }));
	          }

	          $q.all(promises).then(function() {
	            // use most recent data, rather than the potentially outdated data passed into watcher handler
	            self.grid.modifyRows(mostRecentData)
	              .then(function () {
	                // if (self.viewport) {
	                  self.grid.redrawInPlace(true);
	                // }

	                $scope.$evalAsync(function() {
	                  self.grid.refreshCanvas(true);
	                  self.grid.callDataChangeCallbacks(uiGridConstants.dataChange.ROW);
	                });
	              });
	          });
	        }
	      }

	      var styleWatchDereg = $scope.$watch(function () { return self.grid.styleComputations; }, function() {
	        self.grid.refreshCanvas(true);
	      });

	      $scope.$on('$destroy', function() {
	        deregFunctions.forEach( function( deregFn ){ deregFn(); });
	        styleWatchDereg();
	      });

	      self.fireEvent = function(eventName, args) {
	        // Add the grid to the event arguments if it's not there
	        if (typeof(args) === 'undefined' || args === undefined) {
	          args = {};
	        }

	        if (typeof(args.grid) === 'undefined' || args.grid === undefined) {
	          args.grid = self.grid;
	        }

	        $scope.$broadcast(eventName, args);
	      };

	      self.innerCompile = function innerCompile(elm) {
	        $compile(elm)($scope);
	      };

	    }]);

	/**
	 *  @ngdoc directive
	 *  @name ui.grid.directive:uiGrid
	 *  @element div
	 *  @restrict EA
	 *  @param {Object} uiGrid Options for the grid to use
	 *
	 *  @description Create a very basic grid.
	 *
	 *  @example
	    <example module="app">
	      <file name="app.js">
	        var app = angular.module('app', ['ui.grid']);

	        app.controller('MainCtrl', ['$scope', function ($scope) {
	          $scope.data = [
	            { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	          ];
	        }]);
	      </file>
	      <file name="index.html">
	        <div ng-controller="MainCtrl">
	          <div ui-grid="{ data: data }"></div>
	        </div>
	      </file>
	    </example>
	 */
	angular.module('ui.grid').directive('uiGrid', uiGridDirective);

	uiGridDirective.$inject = ['$compile', '$templateCache', '$timeout', '$window', 'gridUtil', 'uiGridConstants'];
	function uiGridDirective($compile, $templateCache, $timeout, $window, gridUtil, uiGridConstants) {
	  return {
	    templateUrl: 'ui-grid/ui-grid',
	    scope: {
	      uiGrid: '='
	    },
	    replace: true,
	    transclude: true,
	    controller: 'uiGridController',
	    compile: function () {
	      return {
	        post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          var grid = uiGridCtrl.grid;
	          // Initialize scrollbars (TODO: move to controller??)
	          uiGridCtrl.scrollbars = [];
	          grid.element = $elm;


	          // See if the grid has a rendered width, if not, wait a bit and try again
	          var sizeCheckInterval = 100; // ms
	          var maxSizeChecks = 20; // 2 seconds total
	          var sizeChecks = 0;

	          // Setup (event listeners) the grid
	          setup();

	          // And initialize it
	          init();

	          // Mark rendering complete so API events can happen
	          grid.renderingComplete();

	          // If the grid doesn't have size currently, wait for a bit to see if it gets size
	          checkSize();

	          /*-- Methods --*/

	          function checkSize() {
	            // If the grid has no width and we haven't checked more than <maxSizeChecks> times, check again in <sizeCheckInterval> milliseconds
	            if ($elm[0].offsetWidth <= 0 && sizeChecks < maxSizeChecks) {
	              setTimeout(checkSize, sizeCheckInterval);
	              sizeChecks++;
	            }
	            else {
	              $timeout(init);
	            }
	          }

	          // Setup event listeners and watchers
	          function setup() {
	            // Bind to window resize events
	            angular.element($window).on('resize', gridResize);

	            // Unbind from window resize events when the grid is destroyed
	            $elm.on('$destroy', function () {
	              angular.element($window).off('resize', gridResize);
	            });

	            // If we add a left container after render, we need to watch and react
	            $scope.$watch(function () { return grid.hasLeftContainer();}, function (newValue, oldValue) {
	              if (newValue === oldValue) {
	                return;
	              }
	              grid.refreshCanvas(true);
	            });

	            // If we add a right container after render, we need to watch and react
	            $scope.$watch(function () { return grid.hasRightContainer();}, function (newValue, oldValue) {
	              if (newValue === oldValue) {
	                return;
	              }
	              grid.refreshCanvas(true);
	            });
	          }

	          // Initialize the directive
	          function init() {
	            grid.gridWidth = $scope.gridWidth = gridUtil.elementWidth($elm);

	            // Default canvasWidth to the grid width, in case we don't get any column definitions to calculate it from
	            grid.canvasWidth = uiGridCtrl.grid.gridWidth;

	            grid.gridHeight = $scope.gridHeight = gridUtil.elementHeight($elm);

	            // If the grid isn't tall enough to fit a single row, it's kind of useless. Resize it to fit a minimum number of rows
	            if (grid.gridHeight <= grid.options.rowHeight && grid.options.enableMinHeightCheck) {
	              autoAdjustHeight();
	            }

	            // Run initial canvas refresh
	            grid.refreshCanvas(true);
	          }

	          // Set the grid's height ourselves in the case that its height would be unusably small
	          function autoAdjustHeight() {
	            // Figure out the new height
	            var contentHeight = grid.options.minRowsToShow * grid.options.rowHeight;
	            var headerHeight = grid.options.showHeader ? grid.options.headerRowHeight : 0;
	            var footerHeight = grid.calcFooterHeight();

	            var scrollbarHeight = 0;
	            if (grid.options.enableHorizontalScrollbar === uiGridConstants.scrollbars.ALWAYS) {
	              scrollbarHeight = gridUtil.getScrollbarWidth();
	            }

	            var maxNumberOfFilters = 0;
	            // Calculates the maximum number of filters in the columns
	            angular.forEach(grid.options.columnDefs, function(col) {
	              if (col.hasOwnProperty('filter')) {
	                if (maxNumberOfFilters < 1) {
	                    maxNumberOfFilters = 1;
	                }
	              }
	              else if (col.hasOwnProperty('filters')) {
	                if (maxNumberOfFilters < col.filters.length) {
	                    maxNumberOfFilters = col.filters.length;
	                }
	              }
	            });

	            if (grid.options.enableFiltering  && !maxNumberOfFilters) {
	              var allColumnsHaveFilteringTurnedOff = grid.options.columnDefs.length && grid.options.columnDefs.every(function(col) {
	                return col.enableFiltering === false;
	              });

	              if (!allColumnsHaveFilteringTurnedOff) {
	                maxNumberOfFilters = 1;
	              }
	            }

	            var filterHeight = maxNumberOfFilters * headerHeight;

	            var newHeight = headerHeight + contentHeight + footerHeight + scrollbarHeight + filterHeight;

	            $elm.css('height', newHeight + 'px');

	            grid.gridHeight = $scope.gridHeight = gridUtil.elementHeight($elm);
	          }

	          // Resize the grid on window resize events
	          function gridResize($event) {
	            grid.gridWidth = $scope.gridWidth = gridUtil.elementWidth($elm);
	            grid.gridHeight = $scope.gridHeight = gridUtil.elementHeight($elm);

	            grid.refreshCanvas(true);
	          }
	        }
	      };
	    }
	  };
	}

	})();

	(function(){
	  'use strict';

	  // TODO: rename this file to ui-grid-pinned-container.js

	  angular.module('ui.grid').directive('uiGridPinnedContainer', ['gridUtil', function (gridUtil) {
	    return {
	      restrict: 'EA',
	      replace: true,
	      template: '<div class="ui-grid-pinned-container"><div ui-grid-render-container container-id="side" row-container-name="\'body\'" col-container-name="side" bind-scroll-vertical="true" class="{{ side }} ui-grid-render-container-{{ side }}"></div></div>',
	      scope: {
	        side: '=uiGridPinnedContainer'
	      },
	      require: '^uiGrid',
	      compile: function compile() {
	        return {
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	            // gridUtil.logDebug('ui-grid-pinned-container ' + $scope.side + ' link');

	            var grid = uiGridCtrl.grid;

	            var myWidth = 0;

	            $elm.addClass('ui-grid-pinned-container-' + $scope.side);

	            // Monkey-patch the viewport width function
	            if ($scope.side === 'left' || $scope.side === 'right') {
	              grid.renderContainers[$scope.side].getViewportWidth = monkeyPatchedGetViewportWidth;
	            }

	            function monkeyPatchedGetViewportWidth() {
	              /*jshint validthis: true */
	              var self = this;

	              var viewportWidth = 0;
	              self.visibleColumnCache.forEach(function (column) {
	                viewportWidth += column.drawnWidth;
	              });

	              var adjustment = self.getViewportAdjustment();

	              viewportWidth = viewportWidth + adjustment.width;

	              return viewportWidth;
	            }

	            function updateContainerWidth() {
	              if ($scope.side === 'left' || $scope.side === 'right') {
	                var cols = grid.renderContainers[$scope.side].visibleColumnCache;
	                var width = 0;
	                for (var i = 0; i < cols.length; i++) {
	                  var col = cols[i];
	                  width += col.drawnWidth || col.width || 0;
	                }

	                return width;
	              }
	            }

	            function updateContainerDimensions() {
	              var ret = '';

	              // Column containers
	              if ($scope.side === 'left' || $scope.side === 'right') {
	                myWidth = updateContainerWidth();

	                // gridUtil.logDebug('myWidth', myWidth);

	                // TODO(c0bra): Subtract sum of col widths from grid viewport width and update it
	                $elm.attr('style', null);

	             //   var myHeight = grid.renderContainers.body.getViewportHeight(); // + grid.horizontalScrollbarHeight;

	                ret += '.grid' + grid.id + ' .ui-grid-pinned-container-' + $scope.side + ', .grid' + grid.id + ' .ui-grid-pinned-container-' + $scope.side + ' .ui-grid-render-container-' + $scope.side + ' .ui-grid-viewport { width: ' + myWidth + 'px; } ';
	              }

	              return ret;
	            }

	            grid.renderContainers.body.registerViewportAdjuster(function (adjustment) {
	              myWidth = updateContainerWidth();

	              // Subtract our own width
	              adjustment.width -= myWidth;
	              adjustment.side = $scope.side;

	              return adjustment;
	            });

	            // Register style computation to adjust for columns in `side`'s render container
	            grid.registerStyleComputation({
	              priority: 15,
	              func: updateContainerDimensions
	            });
	          }
	        };
	      }
	    };
	  }]);
	})();

	(function(){

	angular.module('ui.grid')
	.factory('Grid', ['$q', '$compile', '$parse', 'gridUtil', 'uiGridConstants', 'GridOptions', 'GridColumn', 'GridRow', 'GridApi', 'rowSorter', 'rowSearcher', 'GridRenderContainer', '$timeout','ScrollEvent',
	    function($q, $compile, $parse, gridUtil, uiGridConstants, GridOptions, GridColumn, GridRow, GridApi, rowSorter, rowSearcher, GridRenderContainer, $timeout, ScrollEvent) {

	  /**
	   * @ngdoc object
	   * @name ui.grid.core.api:PublicApi
	   * @description Public Api for the core grid features
	   *
	   */

	  /**
	   * @ngdoc function
	   * @name ui.grid.class:Grid
	   * @description Grid is the main viewModel.  Any properties or methods needed to maintain state are defined in
	   * this prototype.  One instance of Grid is created per Grid directive instance.
	   * @param {object} options Object map of options to pass into the grid. An 'id' property is expected.
	   */
	  var Grid = function Grid(options) {
	    var self = this;
	    // Get the id out of the options, then remove it
	    if (options !== undefined && typeof(options.id) !== 'undefined' && options.id) {
	      if (!/^[_a-zA-Z0-9-]+$/.test(options.id)) {
	        throw new Error("Grid id '" + options.id + '" is invalid. It must follow CSS selector syntax rules.');
	      }
	    }
	    else {
	      throw new Error('No ID provided. An ID must be given when creating a grid.');
	    }

	    self.id = options.id;
	    delete options.id;

	    // Get default options
	    self.options = GridOptions.initialize( options );

	    /**
	     * @ngdoc object
	     * @name appScope
	     * @propertyOf ui.grid.class:Grid
	     * @description reference to the application scope (the parent scope of the ui-grid element).  Assigned in ui-grid controller
	     * <br/>
	     * use gridOptions.appScopeProvider to override the default assignment of $scope.$parent with any reference
	     */
	    self.appScope = self.options.appScopeProvider;

	    self.headerHeight = self.options.headerRowHeight;


	    /**
	     * @ngdoc object
	     * @name footerHeight
	     * @propertyOf ui.grid.class:Grid
	     * @description returns the total footer height gridFooter + columnFooter
	     */
	    self.footerHeight = self.calcFooterHeight();


	    /**
	     * @ngdoc object
	     * @name columnFooterHeight
	     * @propertyOf ui.grid.class:Grid
	     * @description returns the total column footer height
	     */
	    self.columnFooterHeight = self.calcColumnFooterHeight();

	    self.rtl = false;
	    self.gridHeight = 0;
	    self.gridWidth = 0;
	    self.columnBuilders = [];
	    self.rowBuilders = [];
	    self.rowsProcessors = [];
	    self.columnsProcessors = [];
	    self.styleComputations = [];
	    self.viewportAdjusters = [];
	    self.rowHeaderColumns = [];
	    self.dataChangeCallbacks = {};
	    self.verticalScrollSyncCallBackFns = {};
	    self.horizontalScrollSyncCallBackFns = {};

	    // self.visibleRowCache = [];

	    // Set of 'render' containers for self grid, which can render sets of rows
	    self.renderContainers = {};

	    // Create a
	    self.renderContainers.body = new GridRenderContainer('body', self);

	    self.cellValueGetterCache = {};

	    // Cached function to use with custom row templates
	    self.getRowTemplateFn = null;


	    //representation of the rows on the grid.
	    //these are wrapped references to the actual data rows (options.data)
	    self.rows = [];

	    //represents the columns on the grid
	    self.columns = [];

	    /**
	     * @ngdoc boolean
	     * @name isScrollingVertically
	     * @propertyOf ui.grid.class:Grid
	     * @description set to true when Grid is scrolling vertically. Set to false via debounced method
	     */
	    self.isScrollingVertically = false;

	    /**
	     * @ngdoc boolean
	     * @name isScrollingHorizontally
	     * @propertyOf ui.grid.class:Grid
	     * @description set to true when Grid is scrolling horizontally. Set to false via debounced method
	     */
	    self.isScrollingHorizontally = false;

	    /**
	     * @ngdoc property
	     * @name scrollDirection
	     * @propertyOf ui.grid.class:Grid
	     * @description set one of the {@link ui.grid.service:uiGridConstants#properties_scrollDirection uiGridConstants.scrollDirection}
	     *  values (UP, DOWN, LEFT, RIGHT, NONE), which tells us which direction we are scrolling.
	     * Set to NONE via debounced method
	     */
	    self.scrollDirection = uiGridConstants.scrollDirection.NONE;

	    //if true, grid will not respond to any scroll events
	    self.disableScrolling = false;


	    function vertical (scrollEvent) {
	      self.isScrollingVertically = false;
	      self.api.core.raise.scrollEnd(scrollEvent);
	      self.scrollDirection = uiGridConstants.scrollDirection.NONE;
	    }

	    var debouncedVertical = gridUtil.debounce(vertical, self.options.scrollDebounce);
	    var debouncedVerticalMinDelay = gridUtil.debounce(vertical, 0);

	    function horizontal (scrollEvent) {
	      self.isScrollingHorizontally = false;
	      self.api.core.raise.scrollEnd(scrollEvent);
	      self.scrollDirection = uiGridConstants.scrollDirection.NONE;
	    }

	    var debouncedHorizontal = gridUtil.debounce(horizontal, self.options.scrollDebounce);
	    var debouncedHorizontalMinDelay = gridUtil.debounce(horizontal, 0);


	    /**
	     * @ngdoc function
	     * @name flagScrollingVertically
	     * @methodOf ui.grid.class:Grid
	     * @description sets isScrollingVertically to true and sets it to false in a debounced function
	     */
	    self.flagScrollingVertically = function(scrollEvent) {
	      if (!self.isScrollingVertically && !self.isScrollingHorizontally) {
	        self.api.core.raise.scrollBegin(scrollEvent);
	      }
	      self.isScrollingVertically = true;
	      if (self.options.scrollDebounce === 0 || !scrollEvent.withDelay) {
	        debouncedVerticalMinDelay(scrollEvent);
	      }
	      else {
	        debouncedVertical(scrollEvent);
	      }
	    };

	    /**
	     * @ngdoc function
	     * @name flagScrollingHorizontally
	     * @methodOf ui.grid.class:Grid
	     * @description sets isScrollingHorizontally to true and sets it to false in a debounced function
	     */
	    self.flagScrollingHorizontally = function(scrollEvent) {
	      if (!self.isScrollingVertically && !self.isScrollingHorizontally) {
	        self.api.core.raise.scrollBegin(scrollEvent);
	      }
	      self.isScrollingHorizontally = true;
	      if (self.options.scrollDebounce === 0 || !scrollEvent.withDelay) {
	        debouncedHorizontalMinDelay(scrollEvent);
	      }
	      else {
	        debouncedHorizontal(scrollEvent);
	      }
	    };

	    self.scrollbarHeight = 0;
	    self.scrollbarWidth = 0;
	    if (self.options.enableHorizontalScrollbar === uiGridConstants.scrollbars.ALWAYS) {
	      self.scrollbarHeight = gridUtil.getScrollbarWidth();
	    }

	    if (self.options.enableVerticalScrollbar === uiGridConstants.scrollbars.ALWAYS) {
	      self.scrollbarWidth = gridUtil.getScrollbarWidth();
	    }



	    self.api = new GridApi(self);

	    /**
	     * @ngdoc function
	     * @name refresh
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Refresh the rendered grid on screen.
	     * The refresh method re-runs both the columnProcessors and the
	     * rowProcessors, as well as calling refreshCanvas to update all
	     * the grid sizing.  In general you should prefer to use queueGridRefresh
	     * instead, which is basically a debounced version of refresh.
	     *
	     * If you only want to resize the grid, not regenerate all the rows
	     * and columns, you should consider directly calling refreshCanvas instead.
	     *
	     * @param {boolean} [rowsAltered] Optional flag for refreshing when the number of rows has changed
	     */
	    self.api.registerMethod( 'core', 'refresh', this.refresh );

	    /**
	     * @ngdoc function
	     * @name queueGridRefresh
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Request a refresh of the rendered grid on screen, if multiple
	     * calls to queueGridRefresh are made within a digest cycle only one will execute.
	     * The refresh method re-runs both the columnProcessors and the
	     * rowProcessors, as well as calling refreshCanvas to update all
	     * the grid sizing.  In general you should prefer to use queueGridRefresh
	     * instead, which is basically a debounced version of refresh.
	     *
	     */
	    self.api.registerMethod( 'core', 'queueGridRefresh', this.queueGridRefresh );

	    /**
	     * @ngdoc function
	     * @name refreshRows
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Runs only the rowProcessors, columns remain as they were.
	     * It then calls redrawInPlace and refreshCanvas, which adjust the grid sizing.
	     * @returns {promise} promise that is resolved when render completes?
	     *
	     */
	    self.api.registerMethod( 'core', 'refreshRows', this.refreshRows );

	    /**
	     * @ngdoc function
	     * @name queueRefresh
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Requests execution of refreshCanvas, if multiple requests are made
	     * during a digest cycle only one will run.  RefreshCanvas updates the grid sizing.
	     * @returns {promise} promise that is resolved when render completes?
	     *
	     */
	    self.api.registerMethod( 'core', 'queueRefresh', this.queueRefresh );

	    /**
	     * @ngdoc function
	     * @name handleWindowResize
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Trigger a grid resize, normally this would be picked
	     * up by a watch on window size, but in some circumstances it is necessary
	     * to call this manually
	     * @returns {promise} promise that is resolved when render completes?
	     *
	     */
	    self.api.registerMethod( 'core', 'handleWindowResize', this.handleWindowResize );


	    /**
	     * @ngdoc function
	     * @name addRowHeaderColumn
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description adds a row header column to the grid
	     * @param {object} column def
	     * @param {number} order Determines order of header column on grid.  Lower order means header
	     * is positioned to the left of higher order headers
	     *
	     */
	    self.api.registerMethod( 'core', 'addRowHeaderColumn', this.addRowHeaderColumn );

	    /**
	     * @ngdoc function
	     * @name scrollToIfNecessary
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Scrolls the grid to make a certain row and column combo visible,
	     *   in the case that it is not completely visible on the screen already.
	     * @param {GridRow} gridRow row to make visible
	     * @param {GridCol} gridCol column to make visible
	     * @returns {promise} a promise that is resolved when scrolling is complete
	     *
	     */
	    self.api.registerMethod( 'core', 'scrollToIfNecessary', function(gridRow, gridCol) { return self.scrollToIfNecessary(gridRow, gridCol);} );

	    /**
	     * @ngdoc function
	     * @name scrollTo
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Scroll the grid such that the specified
	     * row and column is in view
	     * @param {object} rowEntity gridOptions.data[] array instance to make visible
	     * @param {object} colDef to make visible
	     * @returns {promise} a promise that is resolved after any scrolling is finished
	     */
	    self.api.registerMethod( 'core', 'scrollTo', function (rowEntity, colDef) { return self.scrollTo(rowEntity, colDef);}  );

	    /**
	     * @ngdoc function
	     * @name registerRowsProcessor
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description
	     * Register a "rows processor" function. When the rows are updated,
	     * the grid calls each registered "rows processor", which has a chance
	     * to alter the set of rows (sorting, etc) as long as the count is not
	     * modified.
	     *
	     * @param {function(renderedRowsToProcess, columns )} processorFunction rows processor function, which
	     * is run in the context of the grid (i.e. this for the function will be the grid), and must
	     * return the updated rows list, which is passed to the next processor in the chain
	     * @param {number} priority the priority of this processor.  In general we try to do them in 100s to leave room
	     * for other people to inject rows processors at intermediate priorities.  Lower priority rowsProcessors run earlier.
	     *
	     * At present allRowsVisible is running at 50, sort manipulations running at 60-65, filter is running at 100,
	     * sort is at 200, grouping and treeview at 400-410, selectable rows at 500, pagination at 900 (pagination will generally want to be last)
	     */
	    self.api.registerMethod( 'core', 'registerRowsProcessor', this.registerRowsProcessor  );

	    /**
	     * @ngdoc function
	     * @name registerColumnsProcessor
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description
	     * Register a "columns processor" function. When the columns are updated,
	     * the grid calls each registered "columns processor", which has a chance
	     * to alter the set of columns as long as the count is not
	     * modified.
	     *
	     * @param {function(renderedColumnsToProcess, rows )} processorFunction columns processor function, which
	     * is run in the context of the grid (i.e. this for the function will be the grid), and must
	     * return the updated columns list, which is passed to the next processor in the chain
	     * @param {number} priority the priority of this processor.  In general we try to do them in 100s to leave room
	     * for other people to inject columns processors at intermediate priorities.  Lower priority columnsProcessors run earlier.
	     *
	     * At present allRowsVisible is running at 50, filter is running at 100, sort is at 200, grouping at 400, selectable rows at 500, pagination at 900 (pagination will generally want to be last)
	     */
	    self.api.registerMethod( 'core', 'registerColumnsProcessor', this.registerColumnsProcessor  );



	    /**
	     * @ngdoc function
	     * @name sortHandleNulls
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description A null handling method that can be used when building custom sort
	     * functions
	     * @example
	     * <pre>
	     *   mySortFn = function(a, b) {
	     *   var nulls = $scope.gridApi.core.sortHandleNulls(a, b);
	     *   if ( nulls !== null ){
	     *     return nulls;
	     *   } else {
	     *     // your code for sorting here
	     *   };
	     * </pre>
	     * @param {object} a sort value a
	     * @param {object} b sort value b
	     * @returns {number} null if there were no nulls/undefineds, otherwise returns
	     * a sort value that should be passed back from the sort function
	     *
	     */
	    self.api.registerMethod( 'core', 'sortHandleNulls', rowSorter.handleNulls );


	    /**
	     * @ngdoc function
	     * @name sortChanged
	     * @methodOf  ui.grid.core.api:PublicApi
	     * @description The sort criteria on one or more columns has
	     * changed.  Provides as parameters the grid and the output of
	     * getColumnSorting, which is an array of gridColumns
	     * that have sorting on them, sorted in priority order.
	     *
	     * @param {$scope} scope The scope of the controller. This is used to deregister this event when the scope is destroyed.
	     * @param {Function} callBack Will be called when the event is emited. The function passes back the grid and an array of
	     * columns with sorts on them, in priority order.
	     *
	     * @example
	     * <pre>
	     *      gridApi.core.on.sortChanged( $scope, function(grid, sortColumns){
	     *        // do something
	     *      });
	     * </pre>
	     */
	    self.api.registerEvent( 'core', 'sortChanged' );

	      /**
	     * @ngdoc function
	     * @name columnVisibilityChanged
	     * @methodOf  ui.grid.core.api:PublicApi
	     * @description The visibility of a column has changed,
	     * the column itself is passed out as a parameter of the event.
	     *
	     * @param {$scope} scope The scope of the controller. This is used to deregister this event when the scope is destroyed.
	     * @param {Function} callBack Will be called when the event is emited. The function passes back the GridCol that has changed.
	     *
	     * @example
	     * <pre>
	     *      gridApi.core.on.columnVisibilityChanged( $scope, function (column) {
	     *        // do something
	     *      } );
	     * </pre>
	     */
	    self.api.registerEvent( 'core', 'columnVisibilityChanged' );

	    /**
	     * @ngdoc method
	     * @name notifyDataChange
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Notify the grid that a data or config change has occurred,
	     * where that change isn't something the grid was otherwise noticing.  This
	     * might be particularly relevant where you've changed values within the data
	     * and you'd like cell classes to be re-evaluated, or changed config within
	     * the columnDef and you'd like headerCellClasses to be re-evaluated.
	     * @param {string} type one of the
	     * {@link ui.grid.service:uiGridConstants#properties_dataChange uiGridConstants.dataChange}
	     * values (ALL, ROW, EDIT, COLUMN), which tells us which refreshes to fire.
	     *
	     */
	    self.api.registerMethod( 'core', 'notifyDataChange', this.notifyDataChange );

	    /**
	     * @ngdoc method
	     * @name clearAllFilters
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Clears all filters and optionally refreshes the visible rows.
	     * @param {object} refreshRows Defaults to true.
	     * @param {object} clearConditions Defaults to false.
	     * @param {object} clearFlags Defaults to false.
	     * @returns {promise} If `refreshRows` is true, returns a promise of the rows refreshing.
	     */
	    self.api.registerMethod('core', 'clearAllFilters', this.clearAllFilters);

	    self.registerDataChangeCallback( self.columnRefreshCallback, [uiGridConstants.dataChange.COLUMN]);
	    self.registerDataChangeCallback( self.processRowsCallback, [uiGridConstants.dataChange.EDIT]);
	    self.registerDataChangeCallback( self.updateFooterHeightCallback, [uiGridConstants.dataChange.OPTIONS]);

	    self.registerStyleComputation({
	      priority: 10,
	      func: self.getFooterStyles
	    });
	  };

	   Grid.prototype.calcFooterHeight = function () {
	     if (!this.hasFooter()) {
	       return 0;
	     }

	     var height = 0;
	     if (this.options.showGridFooter) {
	       height += this.options.gridFooterHeight;
	     }

	     height += this.calcColumnFooterHeight();

	     return height;
	   };

	   Grid.prototype.calcColumnFooterHeight = function () {
	     var height = 0;

	     if (this.options.showColumnFooter) {
	       height += this.options.columnFooterHeight;
	     }

	     return height;
	   };

	   Grid.prototype.getFooterStyles = function () {
	     var style = '.grid' + this.id + ' .ui-grid-footer-aggregates-row { height: ' + this.options.columnFooterHeight + 'px; }';
	     style += ' .grid' + this.id + ' .ui-grid-footer-info { height: ' + this.options.gridFooterHeight + 'px; }';
	     return style;
	   };

	  Grid.prototype.hasFooter = function () {
	   return this.options.showGridFooter || this.options.showColumnFooter;
	  };

	  /**
	   * @ngdoc function
	   * @name isRTL
	   * @methodOf ui.grid.class:Grid
	   * @description Returns true if grid is RightToLeft
	   */
	  Grid.prototype.isRTL = function () {
	    return this.rtl;
	  };


	  /**
	   * @ngdoc function
	   * @name registerColumnBuilder
	   * @methodOf ui.grid.class:Grid
	   * @description When the build creates columns from column definitions, the columnbuilders will be called to add
	   * additional properties to the column.
	   * @param {function(colDef, col, gridOptions)} columnBuilder function to be called
	   */
	  Grid.prototype.registerColumnBuilder = function registerColumnBuilder(columnBuilder) {
	    this.columnBuilders.push(columnBuilder);
	  };

	  /**
	   * @ngdoc function
	   * @name buildColumnDefsFromData
	   * @methodOf ui.grid.class:Grid
	   * @description Populates columnDefs from the provided data
	   * @param {function(colDef, col, gridOptions)} rowBuilder function to be called
	   */
	  Grid.prototype.buildColumnDefsFromData = function (dataRows){
	    this.options.columnDefs =  gridUtil.getColumnsFromData(dataRows, this.options.excludeProperties);
	  };

	  /**
	   * @ngdoc function
	   * @name registerRowBuilder
	   * @methodOf ui.grid.class:Grid
	   * @description When the build creates rows from gridOptions.data, the rowBuilders will be called to add
	   * additional properties to the row.
	   * @param {function(row, gridOptions)} rowBuilder function to be called
	   */
	  Grid.prototype.registerRowBuilder = function registerRowBuilder(rowBuilder) {
	    this.rowBuilders.push(rowBuilder);
	  };


	  /**
	   * @ngdoc function
	   * @name registerDataChangeCallback
	   * @methodOf ui.grid.class:Grid
	   * @description When a data change occurs, the data change callbacks of the specified type
	   * will be called.  The rules are:
	   *
	   * - when the data watch fires, that is considered a ROW change (the data watch only notices
	   *   added or removed rows)
	   * - when the api is called to inform us of a change, the declared type of that change is used
	   * - when a cell edit completes, the EDIT callbacks are triggered
	   * - when the columnDef watch fires, the COLUMN callbacks are triggered
	   * - when the options watch fires, the OPTIONS callbacks are triggered
	   *
	   * For a given event:
	   * - ALL calls ROW, EDIT, COLUMN, OPTIONS and ALL callbacks
	   * - ROW calls ROW and ALL callbacks
	   * - EDIT calls EDIT and ALL callbacks
	   * - COLUMN calls COLUMN and ALL callbacks
	   * - OPTIONS calls OPTIONS and ALL callbacks
	   *
	   * @param {function(grid)} callback function to be called
	   * @param {array} types the types of data change you want to be informed of.  Values from
	   * the {@link ui.grid.service:uiGridConstants#properties_dataChange uiGridConstants.dataChange}
	   *  values ( ALL, EDIT, ROW, COLUMN, OPTIONS ).  Optional and defaults to ALL
	   * @returns {function} deregister function - a function that can be called to deregister this callback
	   */
	  Grid.prototype.registerDataChangeCallback = function registerDataChangeCallback(callback, types, _this) {
	    var uid = gridUtil.nextUid();
	    if ( !types ){
	      types = [uiGridConstants.dataChange.ALL];
	    }
	    if ( !Array.isArray(types)){
	      gridUtil.logError("Expected types to be an array or null in registerDataChangeCallback, value passed was: " + types );
	    }
	    this.dataChangeCallbacks[uid] = { callback: callback, types: types, _this:_this };

	    var self = this;
	    var deregisterFunction = function() {
	      delete self.dataChangeCallbacks[uid];
	    };
	    return deregisterFunction;
	  };

	  /**
	   * @ngdoc function
	   * @name callDataChangeCallbacks
	   * @methodOf ui.grid.class:Grid
	   * @description Calls the callbacks based on the type of data change that
	   * has occurred. Always calls the ALL callbacks, calls the ROW, EDIT, COLUMN and OPTIONS callbacks if the
	   * event type is matching, or if the type is ALL.
	   * @param {string} type the type of event that occurred - one of the
	   * {@link ui.grid.service:uiGridConstants#properties_dataChange uiGridConstants.dataChange}
	   *  values (ALL, ROW, EDIT, COLUMN, OPTIONS)
	   */
	  Grid.prototype.callDataChangeCallbacks = function callDataChangeCallbacks(type, options) {
	    angular.forEach( this.dataChangeCallbacks, function( callback, uid ){
	      if ( callback.types.indexOf( uiGridConstants.dataChange.ALL ) !== -1 ||
	           callback.types.indexOf( type ) !== -1 ||
	           type === uiGridConstants.dataChange.ALL ) {
	        if (callback._this) {
	           callback.callback.apply(callback._this,this);
	        }
	        else {
	          callback.callback( this );
	        }
	      }
	    }, this);
	  };

	  /**
	   * @ngdoc function
	   * @name notifyDataChange
	   * @methodOf ui.grid.class:Grid
	   * @description Notifies us that a data change has occurred, used in the public
	   * api for users to tell us when they've changed data or some other event that
	   * our watches cannot pick up
	   * @param {string} type the type of event that occurred - one of the
	   * uiGridConstants.dataChange values (ALL, ROW, EDIT, COLUMN)
	   */
	  Grid.prototype.notifyDataChange = function notifyDataChange(type) {
	    var constants = uiGridConstants.dataChange;
	    if ( type === constants.ALL ||
	         type === constants.COLUMN ||
	         type === constants.EDIT ||
	         type === constants.ROW ||
	         type === constants.OPTIONS ){
	      this.callDataChangeCallbacks( type );
	    } else {
	      gridUtil.logError("Notified of a data change, but the type was not recognised, so no action taken, type was: " + type);
	    }
	  };


	  /**
	   * @ngdoc function
	   * @name columnRefreshCallback
	   * @methodOf ui.grid.class:Grid
	   * @description refreshes the grid when a column refresh
	   * is notified, which triggers handling of the visible flag.
	   * This is called on uiGridConstants.dataChange.COLUMN, and is
	   * registered as a dataChangeCallback in grid.js
	   * @param {string} name column name
	   */
	  Grid.prototype.columnRefreshCallback = function columnRefreshCallback( grid ){
	    grid.buildColumns();
	    grid.queueGridRefresh();
	  };


	  /**
	   * @ngdoc function
	   * @name processRowsCallback
	   * @methodOf ui.grid.class:Grid
	   * @description calls the row processors, specifically
	   * intended to reset the sorting when an edit is called,
	   * registered as a dataChangeCallback on uiGridConstants.dataChange.EDIT
	   * @param {string} name column name
	   */
	  Grid.prototype.processRowsCallback = function processRowsCallback( grid ){
	    grid.queueGridRefresh();
	  };


	  /**
	   * @ngdoc function
	   * @name updateFooterHeightCallback
	   * @methodOf ui.grid.class:Grid
	   * @description recalculates the footer height,
	   * registered as a dataChangeCallback on uiGridConstants.dataChange.OPTIONS
	   * @param {string} name column name
	   */
	  Grid.prototype.updateFooterHeightCallback = function updateFooterHeightCallback( grid ){
	    grid.footerHeight = grid.calcFooterHeight();
	    grid.columnFooterHeight = grid.calcColumnFooterHeight();
	  };


	  /**
	   * @ngdoc function
	   * @name getColumn
	   * @methodOf ui.grid.class:Grid
	   * @description returns a grid column for the column name
	   * @param {string} name column name
	   */
	  Grid.prototype.getColumn = function getColumn(name) {
	    var columns = this.columns.filter(function (column) {
	      return column.colDef.name === name;
	    });
	    return columns.length > 0 ? columns[0] : null;
	  };

	  /**
	   * @ngdoc function
	   * @name getColDef
	   * @methodOf ui.grid.class:Grid
	   * @description returns a grid colDef for the column name
	   * @param {string} name column.field
	   */
	  Grid.prototype.getColDef = function getColDef(name) {
	    var colDefs = this.options.columnDefs.filter(function (colDef) {
	      return colDef.name === name;
	    });
	    return colDefs.length > 0 ? colDefs[0] : null;
	  };

	  /**
	   * @ngdoc function
	   * @name assignTypes
	   * @methodOf ui.grid.class:Grid
	   * @description uses the first row of data to assign colDef.type for any types not defined.
	   */
	  /**
	   * @ngdoc property
	   * @name type
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description the type of the column, used in sorting.  If not provided then the
	   * grid will guess the type.  Add this only if the grid guessing is not to your
	   * satisfaction.  One of:
	   * - 'string'
	   * - 'boolean'
	   * - 'number'
	   * - 'date'
	   * - 'object'
	   * - 'numberStr'
	   * Note that if you choose date, your dates should be in a javascript date type
	   *
	   */
	  Grid.prototype.assignTypes = function(){
	    var self = this;
	    self.options.columnDefs.forEach(function (colDef, index) {

	      //Assign colDef type if not specified
	      if (!colDef.type) {
	        var col = new GridColumn(colDef, index, self);
	        var firstRow = self.rows.length > 0 ? self.rows[0] : null;
	        if (firstRow) {
	          colDef.type = gridUtil.guessType(self.getCellValue(firstRow, col));
	        }
	        else {
	          colDef.type = 'string';
	        }
	      }
	    });
	  };


	  /**
	   * @ngdoc function
	   * @name isRowHeaderColumn
	   * @methodOf ui.grid.class:Grid
	   * @description returns true if the column is a row Header
	   * @param {object} column column
	   */
	  Grid.prototype.isRowHeaderColumn = function isRowHeaderColumn(column) {
	    return this.rowHeaderColumns.indexOf(column) !== -1;
	  };

	  /**
	  * @ngdoc function
	  * @name addRowHeaderColumn
	  * @methodOf ui.grid.class:Grid
	  * @description adds a row header column to the grid
	  * @param {object} column def
	  */
	  Grid.prototype.addRowHeaderColumn = function addRowHeaderColumn(colDef, order) {
	    var self = this;

	    //default order
	    if (order === undefined) {
	      order = 0;
	    }

	    var rowHeaderCol = new GridColumn(colDef, gridUtil.nextUid(), self);
	    rowHeaderCol.isRowHeader = true;
	    if (self.isRTL()) {
	      self.createRightContainer();
	      rowHeaderCol.renderContainer = 'right';
	    }
	    else {
	      self.createLeftContainer();
	      rowHeaderCol.renderContainer = 'left';
	    }

	    // relies on the default column builder being first in array, as it is instantiated
	    // as part of grid creation
	    self.columnBuilders[0](colDef,rowHeaderCol,self.options)
	      .then(function(){
	        rowHeaderCol.enableFiltering = false;
	        rowHeaderCol.enableSorting = false;
	        rowHeaderCol.enableHiding = false;
	        rowHeaderCol.headerPriority = order;
	        self.rowHeaderColumns.push(rowHeaderCol);
	        self.rowHeaderColumns = self.rowHeaderColumns.sort(function (a, b) {
	          return a.headerPriority - b.headerPriority;
	        });

	        self.buildColumns()
	          .then( function() {
	            self.preCompileCellTemplates();
	            self.queueGridRefresh();
	          });
	      });
	  };

	  /**
	   * @ngdoc function
	   * @name getOnlyDataColumns
	   * @methodOf ui.grid.class:Grid
	   * @description returns all columns except for rowHeader columns
	   */
	  Grid.prototype.getOnlyDataColumns = function getOnlyDataColumns() {
	    var self = this;
	    var cols = [];
	    self.columns.forEach(function (col) {
	      if (self.rowHeaderColumns.indexOf(col) === -1) {
	        cols.push(col);
	      }
	    });
	    return cols;
	  };

	  /**
	   * @ngdoc function
	   * @name buildColumns
	   * @methodOf ui.grid.class:Grid
	   * @description creates GridColumn objects from the columnDefinition.  Calls each registered
	   * columnBuilder to further process the column
	   * @param {object} options  An object contains options to use when building columns
	   *
	   * * **orderByColumnDefs**: defaults to **false**. When true, `buildColumns` will reorder existing columns according to the order within the column definitions.
	   *
	   * @returns {Promise} a promise to load any needed column resources
	   */
	  Grid.prototype.buildColumns = function buildColumns(opts) {
	    var options = {
	      orderByColumnDefs: false
	    };

	    angular.extend(options, opts);

	    // gridUtil.logDebug('buildColumns');
	    var self = this;
	    var builderPromises = [];
	    var headerOffset = self.rowHeaderColumns.length;
	    var i;

	    // Remove any columns for which a columnDef cannot be found
	    // Deliberately don't use forEach, as it doesn't like splice being called in the middle
	    // Also don't cache columns.length, as it will change during this operation
	    for (i = 0; i < self.columns.length; i++){
	      if (!self.getColDef(self.columns[i].name)) {
	        self.columns.splice(i, 1);
	        i--;
	      }
	    }

	    //add row header columns to the grid columns array _after_ columns without columnDefs have been removed
	    //rowHeaderColumns is ordered by priority so insert in reverse
	    for (var j = self.rowHeaderColumns.length - 1; j >= 0; j--) {
	      self.columns.unshift(self.rowHeaderColumns[j]);
	    }



	    // look at each column def, and update column properties to match.  If the column def
	    // doesn't have a column, then splice in a new gridCol
	    self.options.columnDefs.forEach(function (colDef, index) {
	      self.preprocessColDef(colDef);
	      var col = self.getColumn(colDef.name);

	      if (!col) {
	        col = new GridColumn(colDef, gridUtil.nextUid(), self);
	        self.columns.splice(index + headerOffset, 0, col);
	      }
	      else {
	        // tell updateColumnDef that the column was pre-existing
	        col.updateColumnDef(colDef, false);
	      }

	      self.columnBuilders.forEach(function (builder) {
	        builderPromises.push(builder.call(self, colDef, col, self.options));
	      });
	    });

	    /*** Reorder columns if necessary ***/
	    if (!!options.orderByColumnDefs) {
	      // Create a shallow copy of the columns as a cache
	      var columnCache = self.columns.slice(0);

	      // We need to allow for the "row headers" when mapping from the column defs array to the columns array
	      //   If we have a row header in columns[0] and don't account for it   we'll overwrite it with the column in columnDefs[0]

	      // Go through all the column defs, use the shorter of columns length and colDefs.length because if a user has given two columns the same name then
	      // columns will be shorter than columnDefs.  In this situation we'll avoid an error, but the user will still get an unexpected result
	      var len = Math.min(self.options.columnDefs.length, self.columns.length);
	      for (i = 0; i < len; i++) {
	        // If the column at this index has a different name than the column at the same index in the column defs...
	        if (self.columns[i + headerOffset].name !== self.options.columnDefs[i].name) {
	          // Replace the one in the cache with the appropriate column
	          columnCache[i + headerOffset] = self.getColumn(self.options.columnDefs[i].name);
	        }
	        else {
	          // Otherwise just copy over the one from the initial columns
	          columnCache[i + headerOffset] = self.columns[i + headerOffset];
	        }
	      }

	      // Empty out the columns array, non-destructively
	      self.columns.length = 0;

	      // And splice in the updated, ordered columns from the cache
	      Array.prototype.splice.apply(self.columns, [0, 0].concat(columnCache));
	    }

	    return $q.all(builderPromises).then(function(){
	      if (self.rows.length > 0){
	        self.assignTypes();
	      }
	    });
	  };

	  Grid.prototype.preCompileCellTemplate = function(col) {
	    var self = this;
	    var html = col.cellTemplate.replace(uiGridConstants.MODEL_COL_FIELD, self.getQualifiedColField(col));
	    html = html.replace(uiGridConstants.COL_FIELD, 'grid.getCellValue(row, col)');

	    var compiledElementFn = $compile(html);
	    col.compiledElementFn = compiledElementFn;

	    if (col.compiledElementFnDefer) {
	      col.compiledElementFnDefer.resolve(col.compiledElementFn);
	    }
	  };

	/**
	 * @ngdoc function
	 * @name preCompileCellTemplates
	 * @methodOf ui.grid.class:Grid
	 * @description precompiles all cell templates
	 */
	  Grid.prototype.preCompileCellTemplates = function() {
	    var self = this;
	    self.columns.forEach(function (col) {
	      if ( col.cellTemplate ){
	        self.preCompileCellTemplate( col );
	      } else if ( col.cellTemplatePromise ){
	        col.cellTemplatePromise.then( function() {
	          self.preCompileCellTemplate( col );
	        });
	      }
	    });
	  };

	  /**
	   * @ngdoc function
	   * @name getGridQualifiedColField
	   * @methodOf ui.grid.class:Grid
	   * @description Returns the $parse-able accessor for a column within its $scope
	   * @param {GridColumn} col col object
	   */
	  Grid.prototype.getQualifiedColField = function (col) {
	    var base = 'row.entity';
	    if ( col.field === uiGridConstants.ENTITY_BINDING ) {
	      return base;
	    }
	    return gridUtil.preEval(base + '.' + col.field);
	  };

	  /**
	   * @ngdoc function
	   * @name createLeftContainer
	   * @methodOf ui.grid.class:Grid
	   * @description creates the left render container if it doesn't already exist
	   */
	  Grid.prototype.createLeftContainer = function() {
	    if (!this.hasLeftContainer()) {
	      this.renderContainers.left = new GridRenderContainer('left', this, { disableColumnOffset: true });
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name createRightContainer
	   * @methodOf ui.grid.class:Grid
	   * @description creates the right render container if it doesn't already exist
	   */
	  Grid.prototype.createRightContainer = function() {
	    if (!this.hasRightContainer()) {
	      this.renderContainers.right = new GridRenderContainer('right', this, { disableColumnOffset: true });
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name hasLeftContainer
	   * @methodOf ui.grid.class:Grid
	   * @description returns true if leftContainer exists
	   */
	  Grid.prototype.hasLeftContainer = function() {
	    return this.renderContainers.left !== undefined;
	  };

	  /**
	   * @ngdoc function
	   * @name hasRightContainer
	   * @methodOf ui.grid.class:Grid
	   * @description returns true if rightContainer exists
	   */
	  Grid.prototype.hasRightContainer = function() {
	    return this.renderContainers.right !== undefined;
	  };


	      /**
	   * undocumented function
	   * @name preprocessColDef
	   * @methodOf ui.grid.class:Grid
	   * @description defaults the name property from field to maintain backwards compatibility with 2.x
	   * validates that name or field is present
	   */
	  Grid.prototype.preprocessColDef = function preprocessColDef(colDef) {
	    var self = this;

	    if (!colDef.field && !colDef.name) {
	      throw new Error('colDef.name or colDef.field property is required');
	    }

	    //maintain backwards compatibility with 2.x
	    //field was required in 2.x.  now name is required
	    if (colDef.name === undefined && colDef.field !== undefined) {
	      // See if the column name already exists:
	      var newName = colDef.field,
	        counter = 2;
	      while (self.getColumn(newName)) {
	        newName = colDef.field + counter.toString();
	        counter++;
	      }
	      colDef.name = newName;
	    }
	  };

	  // Return a list of items that exist in the `n` array but not the `o` array. Uses optional property accessors passed as third & fourth parameters
	  Grid.prototype.newInN = function newInN(o, n, oAccessor, nAccessor) {
	    var self = this;

	    var t = [];
	    for (var i = 0; i < n.length; i++) {
	      var nV = nAccessor ? n[i][nAccessor] : n[i];

	      var found = false;
	      for (var j = 0; j < o.length; j++) {
	        var oV = oAccessor ? o[j][oAccessor] : o[j];
	        if (self.options.rowEquality(nV, oV)) {
	          found = true;
	          break;
	        }
	      }
	      if (!found) {
	        t.push(nV);
	      }
	    }

	    return t;
	  };

	  /**
	   * @ngdoc function
	   * @name getRow
	   * @methodOf ui.grid.class:Grid
	   * @description returns the GridRow that contains the rowEntity
	   * @param {object} rowEntity the gridOptions.data array element instance
	   * @param {array} rows [optional] the rows to look in - if not provided then
	   * looks in grid.rows
	   */
	  Grid.prototype.getRow = function getRow(rowEntity, lookInRows) {
	    var self = this;

	    lookInRows = typeof(lookInRows) === 'undefined' ? self.rows : lookInRows;

	    var rows = lookInRows.filter(function (row) {
	      return self.options.rowEquality(row.entity, rowEntity);
	    });
	    return rows.length > 0 ? rows[0] : null;
	  };


	  /**
	   * @ngdoc function
	   * @name modifyRows
	   * @methodOf ui.grid.class:Grid
	   * @description creates or removes GridRow objects from the newRawData array.  Calls each registered
	   * rowBuilder to further process the row
	   * @param {array} newRawData Modified set of data
	   *
	   * This method aims to achieve three things:
	   * 1. the resulting rows array is in the same order as the newRawData, we'll call
	   * rowsProcessors immediately after to sort the data anyway
	   * 2. if we have row hashing available, we try to use the rowHash to find the row
	   * 3. no memory leaks - rows that are no longer in newRawData need to be garbage collected
	   *
	   * The basic logic flow makes use of the newRawData, oldRows and oldHash, and creates
	   * the newRows and newHash
	   *
	   * ```
	   * newRawData.forEach newEntity
	   *   if (hashing enabled)
	   *     check oldHash for newEntity
	   *   else
	   *     look for old row directly in oldRows
	   *   if !oldRowFound     // must be a new row
	   *     create newRow
	   *   append to the newRows and add to newHash
	   *   run the processors
	   * ```
	   *
	   * Rows are identified using the hashKey if configured.  If not configured, then rows
	   * are identified using the gridOptions.rowEquality function
	   *
	   * This method is useful when trying to select rows immediately after loading data without
	   * using a $timeout/$interval, e.g.:
	   *
	   *   $scope.gridOptions.data =  someData;
	   *   $scope.gridApi.grid.modifyRows($scope.gridOptions.data);
	   *   $scope.gridApi.selection.selectRow($scope.gridOptions.data[0]);
	   *
	   * OR to persist row selection after data update (e.g. rows selected, new data loaded, want
	   * originally selected rows to be re-selected))
	   */
	  Grid.prototype.modifyRows = function modifyRows(newRawData) {
	    var self = this;
	    var oldRows = self.rows.slice(0);
	    var oldRowHash = self.rowHashMap || self.createRowHashMap();
	    self.rowHashMap = self.createRowHashMap();
	    self.rows.length = 0;

	    newRawData.forEach( function( newEntity, i ) {
	      var newRow;
	      if ( self.options.enableRowHashing ){
	        // if hashing is enabled, then this row will be in the hash if we already know about it
	        newRow = oldRowHash.get( newEntity );
	      } else {
	        // otherwise, manually search the oldRows to see if we can find this row
	        newRow = self.getRow(newEntity, oldRows);
	      }

	      // if we didn't find the row, it must be new, so create it
	      if ( !newRow ){
	        newRow = self.processRowBuilders(new GridRow(newEntity, i, self));
	      }

	      self.rows.push( newRow );
	      self.rowHashMap.put( newEntity, newRow );
	    });

	    self.assignTypes();

	    var p1 = $q.when(self.processRowsProcessors(self.rows))
	      .then(function (renderableRows) {
	        return self.setVisibleRows(renderableRows);
	      });

	    var p2 = $q.when(self.processColumnsProcessors(self.columns))
	      .then(function (renderableColumns) {
	        return self.setVisibleColumns(renderableColumns);
	      });

	    return $q.all([p1, p2]);
	  };


	  /**
	   * Private Undocumented Method
	   * @name addRows
	   * @methodOf ui.grid.class:Grid
	   * @description adds the newRawData array of rows to the grid and calls all registered
	   * rowBuilders. this keyword will reference the grid
	   */
	  Grid.prototype.addRows = function addRows(newRawData) {
	    var self = this;

	    var existingRowCount = self.rows.length;
	    for (var i = 0; i < newRawData.length; i++) {
	      var newRow = self.processRowBuilders(new GridRow(newRawData[i], i + existingRowCount, self));

	      if (self.options.enableRowHashing) {
	        var found = self.rowHashMap.get(newRow.entity);
	        if (found) {
	          found.row = newRow;
	        }
	      }

	      self.rows.push(newRow);
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name processRowBuilders
	   * @methodOf ui.grid.class:Grid
	   * @description processes all RowBuilders for the gridRow
	   * @param {GridRow} gridRow reference to gridRow
	   * @returns {GridRow} the gridRow with all additional behavior added
	   */
	  Grid.prototype.processRowBuilders = function processRowBuilders(gridRow) {
	    var self = this;

	    self.rowBuilders.forEach(function (builder) {
	      builder.call(self, gridRow, self.options);
	    });

	    return gridRow;
	  };

	  /**
	   * @ngdoc function
	   * @name registerStyleComputation
	   * @methodOf ui.grid.class:Grid
	   * @description registered a styleComputation function
	   *
	   * If the function returns a value it will be appended into the grid's `<style>` block
	   * @param {function($scope)} styleComputation function
	   */
	  Grid.prototype.registerStyleComputation = function registerStyleComputation(styleComputationInfo) {
	    this.styleComputations.push(styleComputationInfo);
	  };


	  // NOTE (c0bra): We already have rowBuilders. I think these do exactly the same thing...
	  // Grid.prototype.registerRowFilter = function(filter) {
	  //   // TODO(c0bra): validate filter?

	  //   this.rowFilters.push(filter);
	  // };

	  // Grid.prototype.removeRowFilter = function(filter) {
	  //   var idx = this.rowFilters.indexOf(filter);

	  //   if (typeof(idx) !== 'undefined' && idx !== undefined) {
	  //     this.rowFilters.slice(idx, 1);
	  //   }
	  // };

	  // Grid.prototype.processRowFilters = function(rows) {
	  //   var self = this;
	  //   self.rowFilters.forEach(function (filter) {
	  //     filter.call(self, rows);
	  //   });
	  // };


	  /**
	   * @ngdoc function
	   * @name registerRowsProcessor
	   * @methodOf ui.grid.class:Grid
	   * @description
	   *
	   * Register a "rows processor" function. When the rows are updated,
	   * the grid calls each registered "rows processor", which has a chance
	   * to alter the set of rows (sorting, etc) as long as the count is not
	   * modified.
	   *
	   * @param {function(renderedRowsToProcess, columns )} processorFunction rows processor function, which
	   * is run in the context of the grid (i.e. this for the function will be the grid), and must
	   * return the updated rows list, which is passed to the next processor in the chain
	   * @param {number} priority the priority of this processor.  In general we try to do them in 100s to leave room
	   * for other people to inject rows processors at intermediate priorities.  Lower priority rowsProcessors run earlier.
	   *
	   * At present all rows visible is running at 50, filter is running at 100, sort is at 200, grouping at 400, selectable rows at 500, pagination at 900 (pagination will generally want to be last)
	   *
	   */
	  Grid.prototype.registerRowsProcessor = function registerRowsProcessor(processor, priority) {
	    if (!angular.isFunction(processor)) {
	      throw 'Attempt to register non-function rows processor: ' + processor;
	    }

	    this.rowsProcessors.push({processor: processor, priority: priority});
	    this.rowsProcessors.sort(function sortByPriority( a, b ){
	      return a.priority - b.priority;
	    });
	  };

	  /**
	   * @ngdoc function
	   * @name removeRowsProcessor
	   * @methodOf ui.grid.class:Grid
	   * @param {function(renderableRows)} rows processor function
	   * @description Remove a registered rows processor
	   */
	  Grid.prototype.removeRowsProcessor = function removeRowsProcessor(processor) {
	    var idx = -1;
	    this.rowsProcessors.forEach(function(rowsProcessor, index){
	      if ( rowsProcessor.processor === processor ){
	        idx = index;
	      }
	    });

	    if ( idx !== -1 ) {
	      this.rowsProcessors.splice(idx, 1);
	    }
	  };

	  /**
	   * Private Undocumented Method
	   * @name processRowsProcessors
	   * @methodOf ui.grid.class:Grid
	   * @param {Array[GridRow]} The array of "renderable" rows
	   * @param {Array[GridColumn]} The array of columns
	   * @description Run all the registered rows processors on the array of renderable rows
	   */
	  Grid.prototype.processRowsProcessors = function processRowsProcessors(renderableRows) {
	    var self = this;

	    // Create a shallow copy of the rows so that we can safely sort them without altering the original grid.rows sort order
	    var myRenderableRows = renderableRows.slice(0);

	    // Return myRenderableRows with no processing if we have no rows processors
	    if (self.rowsProcessors.length === 0) {
	      return $q.when(myRenderableRows);
	    }

	    // Counter for iterating through rows processors
	    var i = 0;

	    // Promise for when we're done with all the processors
	    var finished = $q.defer();

	    // This function will call the processor in self.rowsProcessors at index 'i', and then
	    //   when done will call the next processor in the list, using the output from the processor
	    //   at i as the argument for 'renderedRowsToProcess' on the next iteration.
	    //
	    //   If we're at the end of the list of processors, we resolve our 'finished' callback with
	    //   the result.
	    function startProcessor(i, renderedRowsToProcess) {
	      // Get the processor at 'i'
	      var processor = self.rowsProcessors[i].processor;

	      // Call the processor, passing in the rows to process and the current columns
	      //   (note: it's wrapped in $q.when() in case the processor does not return a promise)
	      return $q.when( processor.call(self, renderedRowsToProcess, self.columns) )
	        .then(function handleProcessedRows(processedRows) {
	          // Check for errors
	          if (!processedRows) {
	            throw "Processor at index " + i + " did not return a set of renderable rows";
	          }

	          if (!angular.isArray(processedRows)) {
	            throw "Processor at index " + i + " did not return an array";
	          }

	          // Processor is done, increment the counter
	          i++;

	          // If we're not done with the processors, call the next one
	          if (i <= self.rowsProcessors.length - 1) {
	            return startProcessor(i, processedRows);
	          }
	          // We're done! Resolve the 'finished' promise
	          else {
	            finished.resolve(processedRows);
	          }
	        });
	    }

	    // Start on the first processor
	    startProcessor(0, myRenderableRows);

	    return finished.promise;
	  };

	  Grid.prototype.setVisibleRows = function setVisibleRows(rows) {
	    var self = this;

	    // Reset all the render container row caches
	    for (var i in self.renderContainers) {
	      var container = self.renderContainers[i];

	      container.canvasHeightShouldUpdate = true;

	      if ( typeof(container.visibleRowCache) === 'undefined' ){
	        container.visibleRowCache = [];
	      } else {
	        container.visibleRowCache.length = 0;
	      }
	    }

	    // rows.forEach(function (row) {
	    for (var ri = 0; ri < rows.length; ri++) {
	      var row = rows[ri];

	      var targetContainer = (typeof(row.renderContainer) !== 'undefined' && row.renderContainer) ? row.renderContainer : 'body';

	      // If the row is visible
	      if (row.visible) {
	        self.renderContainers[targetContainer].visibleRowCache.push(row);
	      }
	    }
	    self.api.core.raise.rowsVisibleChanged(this.api);
	    self.api.core.raise.rowsRendered(this.api);
	  };

	  /**
	   * @ngdoc function
	   * @name registerColumnsProcessor
	   * @methodOf ui.grid.class:Grid
	   * @param {function(renderedColumnsToProcess, rows)} columnProcessor column processor function, which
	   * is run in the context of the grid (i.e. this for the function will be the grid), and
	   * which must return an updated renderedColumnsToProcess which can be passed to the next processor
	   * in the chain
	   * @param {number} priority the priority of this processor.  In general we try to do them in 100s to leave room
	   * for other people to inject columns processors at intermediate priorities.  Lower priority columnsProcessors run earlier.
	   *
	   * At present all rows visible is running at 50, filter is running at 100, sort is at 200, grouping at 400, selectable rows at 500, pagination at 900 (pagination will generally want to be last)
	   * @description

	     Register a "columns processor" function. When the columns are updated,
	     the grid calls each registered "columns processor", which has a chance
	     to alter the set of columns, as long as the count is not modified.
	   */
	  Grid.prototype.registerColumnsProcessor = function registerColumnsProcessor(processor, priority) {
	    if (!angular.isFunction(processor)) {
	      throw 'Attempt to register non-function rows processor: ' + processor;
	    }

	    this.columnsProcessors.push({processor: processor, priority: priority});
	    this.columnsProcessors.sort(function sortByPriority( a, b ){
	      return a.priority - b.priority;
	    });
	  };

	  Grid.prototype.removeColumnsProcessor = function removeColumnsProcessor(processor) {
	    var idx = this.columnsProcessors.indexOf(processor);

	    if (typeof(idx) !== 'undefined' && idx !== undefined) {
	      this.columnsProcessors.splice(idx, 1);
	    }
	  };

	  Grid.prototype.processColumnsProcessors = function processColumnsProcessors(renderableColumns) {
	    var self = this;

	    // Create a shallow copy of the rows so that we can safely sort them without altering the original grid.rows sort order
	    var myRenderableColumns = renderableColumns.slice(0);

	    // Return myRenderableRows with no processing if we have no rows processors
	    if (self.columnsProcessors.length === 0) {
	      return $q.when(myRenderableColumns);
	    }

	    // Counter for iterating through rows processors
	    var i = 0;

	    // Promise for when we're done with all the processors
	    var finished = $q.defer();

	    // This function will call the processor in self.rowsProcessors at index 'i', and then
	    //   when done will call the next processor in the list, using the output from the processor
	    //   at i as the argument for 'renderedRowsToProcess' on the next iteration.
	    //
	    //   If we're at the end of the list of processors, we resolve our 'finished' callback with
	    //   the result.
	    function startProcessor(i, renderedColumnsToProcess) {
	      // Get the processor at 'i'
	      var processor = self.columnsProcessors[i].processor;

	      // Call the processor, passing in the rows to process and the current columns
	      //   (note: it's wrapped in $q.when() in case the processor does not return a promise)
	      return $q.when( processor.call(self, renderedColumnsToProcess, self.rows) )
	        .then(function handleProcessedRows(processedColumns) {
	          // Check for errors
	          if (!processedColumns) {
	            throw "Processor at index " + i + " did not return a set of renderable rows";
	          }

	          if (!angular.isArray(processedColumns)) {
	            throw "Processor at index " + i + " did not return an array";
	          }

	          // Processor is done, increment the counter
	          i++;

	          // If we're not done with the processors, call the next one
	          if (i <= self.columnsProcessors.length - 1) {
	            return startProcessor(i, myRenderableColumns);
	          }
	          // We're done! Resolve the 'finished' promise
	          else {
	            finished.resolve(myRenderableColumns);
	          }
	        });
	    }

	    // Start on the first processor
	    startProcessor(0, myRenderableColumns);

	    return finished.promise;
	  };

	  Grid.prototype.setVisibleColumns = function setVisibleColumns(columns) {
	    // gridUtil.logDebug('setVisibleColumns');

	    var self = this;

	    // Reset all the render container row caches
	    for (var i in self.renderContainers) {
	      var container = self.renderContainers[i];

	      container.visibleColumnCache.length = 0;
	    }

	    for (var ci = 0; ci < columns.length; ci++) {
	      var column = columns[ci];

	      // If the column is visible
	      if (column.visible) {
	        // If the column has a container specified
	        if (typeof(column.renderContainer) !== 'undefined' && column.renderContainer) {
	          self.renderContainers[column.renderContainer].visibleColumnCache.push(column);
	        }
	        // If not, put it into the body container
	        else {
	          self.renderContainers.body.visibleColumnCache.push(column);
	        }
	      }
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name handleWindowResize
	   * @methodOf ui.grid.class:Grid
	   * @description Triggered when the browser window resizes; automatically resizes the grid
	   * @returns {Promise} A resolved promise once the window resize has completed.
	   */
	  Grid.prototype.handleWindowResize = function handleWindowResize($event) {
	    var self = this;

	    self.gridWidth = gridUtil.elementWidth(self.element);
	    self.gridHeight = gridUtil.elementHeight(self.element);

	    return self.queueRefresh();
	  };

	  /**
	   * @ngdoc function
	   * @name queueRefresh
	   * @methodOf ui.grid.class:Grid
	   * @description queues a grid refreshCanvas, a way of debouncing all the refreshes we might otherwise issue
	   */
	  Grid.prototype.queueRefresh = function queueRefresh() {
	    var self = this;

	    if (self.refreshCanceller) {
	      $timeout.cancel(self.refreshCanceller);
	    }

	    self.refreshCanceller = $timeout(function () {
	      self.refreshCanvas(true);
	    });

	    self.refreshCanceller.then(function () {
	      self.refreshCanceller = null;
	    });

	    return self.refreshCanceller;
	  };


	  /**
	   * @ngdoc function
	   * @name queueGridRefresh
	   * @methodOf ui.grid.class:Grid
	   * @description queues a grid refresh, a way of debouncing all the refreshes we might otherwise issue
	   */
	  Grid.prototype.queueGridRefresh = function queueGridRefresh() {
	    var self = this;

	    if (self.gridRefreshCanceller) {
	      $timeout.cancel(self.gridRefreshCanceller);
	    }

	    self.gridRefreshCanceller = $timeout(function () {
	      self.refresh(true);
	    });

	    self.gridRefreshCanceller.then(function () {
	      self.gridRefreshCanceller = null;
	    });

	    return self.gridRefreshCanceller;
	  };


	  /**
	   * @ngdoc function
	   * @name updateCanvasHeight
	   * @methodOf ui.grid.class:Grid
	   * @description flags all render containers to update their canvas height
	   */
	  Grid.prototype.updateCanvasHeight = function updateCanvasHeight() {
	    var self = this;

	    for (var containerId in self.renderContainers) {
	      if (self.renderContainers.hasOwnProperty(containerId)) {
	        var container = self.renderContainers[containerId];
	        container.canvasHeightShouldUpdate = true;
	      }
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name buildStyles
	   * @methodOf ui.grid.class:Grid
	   * @description calls each styleComputation function
	   */
	  // TODO: this used to take $scope, but couldn't see that it was used
	  Grid.prototype.buildStyles = function buildStyles() {
	    // gridUtil.logDebug('buildStyles');

	    var self = this;

	    self.customStyles = '';

	    self.styleComputations
	      .sort(function(a, b) {
	        if (a.priority === null) { return 1; }
	        if (b.priority === null) { return -1; }
	        if (a.priority === null && b.priority === null) { return 0; }
	        return a.priority - b.priority;
	      })
	      .forEach(function (compInfo) {
	        // this used to provide $scope as a second parameter, but I couldn't find any
	        // style builders that used it, so removed it as part of moving to grid from controller
	        var ret = compInfo.func.call(self);

	        if (angular.isString(ret)) {
	          self.customStyles += '\n' + ret;
	        }
	      });
	  };


	  Grid.prototype.minColumnsToRender = function minColumnsToRender() {
	    var self = this;
	    var viewport = this.getViewportWidth();

	    var min = 0;
	    var totalWidth = 0;
	    self.columns.forEach(function(col, i) {
	      if (totalWidth < viewport) {
	        totalWidth += col.drawnWidth;
	        min++;
	      }
	      else {
	        var currWidth = 0;
	        for (var j = i; j >= i - min; j--) {
	          currWidth += self.columns[j].drawnWidth;
	        }
	        if (currWidth < viewport) {
	          min++;
	        }
	      }
	    });

	    return min;
	  };

	  Grid.prototype.getBodyHeight = function getBodyHeight() {
	    // Start with the viewportHeight
	    var bodyHeight = this.getViewportHeight();

	    // Add the horizontal scrollbar height if there is one
	    //if (typeof(this.horizontalScrollbarHeight) !== 'undefined' && this.horizontalScrollbarHeight !== undefined && this.horizontalScrollbarHeight > 0) {
	    //  bodyHeight = bodyHeight + this.horizontalScrollbarHeight;
	    //}

	    return bodyHeight;
	  };

	  // NOTE: viewport drawable height is the height of the grid minus the header row height (including any border)
	  // TODO(c0bra): account for footer height
	  Grid.prototype.getViewportHeight = function getViewportHeight() {
	    var self = this;

	    var viewPortHeight = this.gridHeight - this.headerHeight - this.footerHeight;

	    // Account for native horizontal scrollbar, if present
	    //if (typeof(this.horizontalScrollbarHeight) !== 'undefined' && this.horizontalScrollbarHeight !== undefined && this.horizontalScrollbarHeight > 0) {
	    //  viewPortHeight = viewPortHeight - this.horizontalScrollbarHeight;
	    //}

	    var adjustment = self.getViewportAdjustment();

	    viewPortHeight = viewPortHeight + adjustment.height;

	    //gridUtil.logDebug('viewPortHeight', viewPortHeight);

	    return viewPortHeight;
	  };

	  Grid.prototype.getViewportWidth = function getViewportWidth() {
	    var self = this;

	    var viewPortWidth = this.gridWidth;

	    //if (typeof(this.verticalScrollbarWidth) !== 'undefined' && this.verticalScrollbarWidth !== undefined && this.verticalScrollbarWidth > 0) {
	    //  viewPortWidth = viewPortWidth - this.verticalScrollbarWidth;
	    //}

	    var adjustment = self.getViewportAdjustment();

	    viewPortWidth = viewPortWidth + adjustment.width;

	    //gridUtil.logDebug('getviewPortWidth', viewPortWidth);

	    return viewPortWidth;
	  };

	  Grid.prototype.getHeaderViewportWidth = function getHeaderViewportWidth() {
	    var viewPortWidth = this.getViewportWidth();

	    //if (typeof(this.verticalScrollbarWidth) !== 'undefined' && this.verticalScrollbarWidth !== undefined && this.verticalScrollbarWidth > 0) {
	    //  viewPortWidth = viewPortWidth + this.verticalScrollbarWidth;
	    //}

	    return viewPortWidth;
	  };

	  Grid.prototype.addVerticalScrollSync = function (containerId, callBackFn) {
	    this.verticalScrollSyncCallBackFns[containerId] = callBackFn;
	  };

	  Grid.prototype.addHorizontalScrollSync = function (containerId, callBackFn) {
	    this.horizontalScrollSyncCallBackFns[containerId] = callBackFn;
	  };

	/**
	 * Scroll needed containers by calling their ScrollSyncs
	 * @param sourceContainerId the containerId that has already set it's top/left.
	 *         can be empty string which means all containers need to set top/left
	 * @param scrollEvent
	 */
	  Grid.prototype.scrollContainers = function (sourceContainerId, scrollEvent) {

	    if (scrollEvent.y) {
	      //default for no container Id (ex. mousewheel means that all containers must set scrollTop/Left)
	      var verts = ['body','left', 'right'];

	      this.flagScrollingVertically(scrollEvent);

	      if (sourceContainerId === 'body') {
	        verts = ['left', 'right'];
	      }
	      else if (sourceContainerId === 'left') {
	        verts = ['body', 'right'];
	      }
	      else if (sourceContainerId === 'right') {
	        verts = ['body', 'left'];
	      }

	      for (var i = 0; i < verts.length; i++) {
	        var id = verts[i];
	        if (this.verticalScrollSyncCallBackFns[id]) {
	          this.verticalScrollSyncCallBackFns[id](scrollEvent);
	        }
	      }

	    }

	    if (scrollEvent.x) {
	      //default for no container Id (ex. mousewheel means that all containers must set scrollTop/Left)
	      var horizs = ['body','bodyheader', 'bodyfooter'];

	      this.flagScrollingHorizontally(scrollEvent);
	      if (sourceContainerId === 'body') {
	        horizs = ['bodyheader', 'bodyfooter'];
	      }

	      for (var j = 0; j < horizs.length; j++) {
	        var idh = horizs[j];
	        if (this.horizontalScrollSyncCallBackFns[idh]) {
	          this.horizontalScrollSyncCallBackFns[idh](scrollEvent);
	        }
	      }

	    }

	  };

	  Grid.prototype.registerViewportAdjuster = function registerViewportAdjuster(func) {
	    this.viewportAdjusters.push(func);
	  };

	  Grid.prototype.removeViewportAdjuster = function registerViewportAdjuster(func) {
	    var idx = this.viewportAdjusters.indexOf(func);

	    if (typeof(idx) !== 'undefined' && idx !== undefined) {
	      this.viewportAdjusters.splice(idx, 1);
	    }
	  };

	  Grid.prototype.getViewportAdjustment = function getViewportAdjustment() {
	    var self = this;

	    var adjustment = { height: 0, width: 0 };

	    self.viewportAdjusters.forEach(function (func) {
	      adjustment = func.call(this, adjustment);
	    });

	    return adjustment;
	  };

	  Grid.prototype.getVisibleRowCount = function getVisibleRowCount() {
	    // var count = 0;

	    // this.rows.forEach(function (row) {
	    //   if (row.visible) {
	    //     count++;
	    //   }
	    // });

	    // return this.visibleRowCache.length;
	    return this.renderContainers.body.visibleRowCache.length;
	  };

	   Grid.prototype.getVisibleRows = function getVisibleRows() {
	    return this.renderContainers.body.visibleRowCache;
	   };

	  Grid.prototype.getVisibleColumnCount = function getVisibleColumnCount() {
	    // var count = 0;

	    // this.rows.forEach(function (row) {
	    //   if (row.visible) {
	    //     count++;
	    //   }
	    // });

	    // return this.visibleRowCache.length;
	    return this.renderContainers.body.visibleColumnCache.length;
	  };


	  Grid.prototype.searchRows = function searchRows(renderableRows) {
	    return rowSearcher.search(this, renderableRows, this.columns);
	  };

	  Grid.prototype.sortByColumn = function sortByColumn(renderableRows) {
	    return rowSorter.sort(this, renderableRows, this.columns);
	  };

	  /**
	   * @ngdoc function
	   * @name getCellValue
	   * @methodOf ui.grid.class:Grid
	   * @description Gets the value of a cell for a particular row and column
	   * @param {GridRow} row Row to access
	   * @param {GridColumn} col Column to access
	   */
	  Grid.prototype.getCellValue = function getCellValue(row, col){
	    if ( typeof(row.entity[ '$$' + col.uid ]) !== 'undefined' ) {
	      return row.entity[ '$$' + col.uid].rendered;
	    } else if (this.options.flatEntityAccess && typeof(col.field) !== 'undefined' ){
	      return row.entity[col.field];
	    } else {
	      if (!col.cellValueGetterCache) {
	        col.cellValueGetterCache = $parse(row.getEntityQualifiedColField(col));
	      }

	      return col.cellValueGetterCache(row);
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name getCellDisplayValue
	   * @methodOf ui.grid.class:Grid
	   * @description Gets the displayed value of a cell after applying any the `cellFilter`
	   * @param {GridRow} row Row to access
	   * @param {GridColumn} col Column to access
	   */
	  Grid.prototype.getCellDisplayValue = function getCellDisplayValue(row, col) {
	    if ( !col.cellDisplayGetterCache ) {
	      var custom_filter = col.cellFilter ? " | " + col.cellFilter : "";

	      if (typeof(row.entity['$$' + col.uid]) !== 'undefined') {
	        col.cellDisplayGetterCache = $parse(row.entity['$$' + col.uid].rendered + custom_filter);
	      } else if (this.options.flatEntityAccess && typeof(col.field) !== 'undefined') {
	        col.cellDisplayGetterCache = $parse(row.entity[col.field] + custom_filter);
	      } else {
	        col.cellDisplayGetterCache = $parse(row.getEntityQualifiedColField(col) + custom_filter);
	      }
	    }

	    return col.cellDisplayGetterCache(row);
	  };


	  Grid.prototype.getNextColumnSortPriority = function getNextColumnSortPriority() {
	    var self = this,
	        p = 0;

	    self.columns.forEach(function (col) {
	      if (col.sort && col.sort.priority !== undefined && col.sort.priority >= p) {
	        p = col.sort.priority + 1;
	      }
	    });

	    return p;
	  };

	  /**
	   * @ngdoc function
	   * @name resetColumnSorting
	   * @methodOf ui.grid.class:Grid
	   * @description Return the columns that the grid is currently being sorted by
	   * @param {GridColumn} [excludedColumn] Optional GridColumn to exclude from having its sorting reset
	   */
	  Grid.prototype.resetColumnSorting = function resetColumnSorting(excludeCol) {
	    var self = this;

	    self.columns.forEach(function (col) {
	      if (col !== excludeCol && !col.suppressRemoveSort) {
	        col.sort = {};
	      }
	    });
	  };

	  /**
	   * @ngdoc function
	   * @name getColumnSorting
	   * @methodOf ui.grid.class:Grid
	   * @description Return the columns that the grid is currently being sorted by
	   * @returns {Array[GridColumn]} An array of GridColumn objects
	   */
	  Grid.prototype.getColumnSorting = function getColumnSorting() {
	    var self = this;

	    var sortedCols = [], myCols;

	    // Iterate through all the columns, sorted by priority
	    // Make local copy of column list, because sorting is in-place and we do not want to
	    // change the original sequence of columns
	    myCols = self.columns.slice(0);
	    myCols.sort(rowSorter.prioritySort).forEach(function (col) {
	      if (col.sort && typeof(col.sort.direction) !== 'undefined' && col.sort.direction && (col.sort.direction === uiGridConstants.ASC || col.sort.direction === uiGridConstants.DESC)) {
	        sortedCols.push(col);
	      }
	    });

	    return sortedCols;
	  };

	  /**
	   * @ngdoc function
	   * @name sortColumn
	   * @methodOf ui.grid.class:Grid
	   * @description Set the sorting on a given column, optionally resetting any existing sorting on the Grid.
	   * Emits the sortChanged event whenever the sort criteria are changed.
	   * @param {GridColumn} column Column to set the sorting on
	   * @param {uiGridConstants.ASC|uiGridConstants.DESC} [direction] Direction to sort by, either descending or ascending.
	   *   If not provided, the column will iterate through the sort directions
	   *   specified in the {@link ui.grid.class:GridOptions.columnDef#sortDirectionCycle sortDirectionCycle} attribute.
	   * @param {boolean} [add] Add this column to the sorting. If not provided or set to `false`, the Grid will reset any existing sorting and sort
	   *   by this column only
	   * @returns {Promise} A resolved promise that supplies the column.
	   */

	  Grid.prototype.sortColumn = function sortColumn(column, directionOrAdd, add) {
	    var self = this,
	        direction = null;

	    if (typeof(column) === 'undefined' || !column) {
	      throw new Error('No column parameter provided');
	    }

	    // Second argument can either be a direction or whether to add this column to the existing sort.
	    //   If it's a boolean, it's an add, otherwise, it's a direction
	    if (typeof(directionOrAdd) === 'boolean') {
	      add = directionOrAdd;
	    }
	    else {
	      direction = directionOrAdd;
	    }

	    if (!add) {
	      self.resetColumnSorting(column);
	      column.sort.priority = undefined;
	      // Get the actual priority since there may be columns which have suppressRemoveSort set
	      column.sort.priority = self.getNextColumnSortPriority();
	    }
	    else if (column.sort.priority === undefined){
	      column.sort.priority = self.getNextColumnSortPriority();
	    }

	    if (!direction) {
	      // Find the current position in the cycle (or -1).
	      var i = column.sortDirectionCycle.indexOf(column.sort.direction ? column.sort.direction : null);
	      // Proceed to the next position in the cycle (or start at the beginning).
	      i = (i+1) % column.sortDirectionCycle.length;
	      // If suppressRemoveSort is set, and the next position in the cycle would
	      // remove the sort, skip it.
	      if (column.colDef && column.suppressRemoveSort && !column.sortDirectionCycle[i]) {
	        i = (i+1) % column.sortDirectionCycle.length;
	      }

	      if (column.sortDirectionCycle[i]) {
	        column.sort.direction = column.sortDirectionCycle[i];
	      } else {
	        removeSortOfColumn(column, self);
	      }
	    }
	    else {
	      column.sort.direction = direction;
	    }

	    self.api.core.raise.sortChanged( self, self.getColumnSorting() );

	    return $q.when(column);
	  };

	  var removeSortOfColumn = function removeSortOfColumn(column, grid) {
	    //Decrease priority for every col where priority is higher than the removed sort's priority.
	    grid.columns.forEach(function (col) {
	      if (col.sort && col.sort.priority !== undefined && col.sort.priority > column.sort.priority) {
	        col.sort.priority -= 1;
	      }
	    });

	    //Remove sort
	    column.sort = {};
	  };

	  /**
	   * communicate to outside world that we are done with initial rendering
	   */
	  Grid.prototype.renderingComplete = function(){
	    if (angular.isFunction(this.options.onRegisterApi)) {
	      this.options.onRegisterApi(this.api);
	    }
	    this.api.core.raise.renderingComplete( this.api );
	  };

	  Grid.prototype.createRowHashMap = function createRowHashMap() {
	    var self = this;

	    var hashMap = new RowHashMap();
	    hashMap.grid = self;

	    return hashMap;
	  };


	  /**
	   * @ngdoc function
	   * @name refresh
	   * @methodOf ui.grid.class:Grid
	   * @description Refresh the rendered grid on screen.
	   * @param {boolean} [rowsAltered] Optional flag for refreshing when the number of rows has changed.
	   */
	  Grid.prototype.refresh = function refresh(rowsAltered) {
	    var self = this;

	    var p1 = self.processRowsProcessors(self.rows).then(function (renderableRows) {
	      self.setVisibleRows(renderableRows);
	    });

	    var p2 = self.processColumnsProcessors(self.columns).then(function (renderableColumns) {
	      self.setVisibleColumns(renderableColumns);
	    });

	    return $q.all([p1, p2]).then(function () {
	      self.redrawInPlace(rowsAltered);

	      self.refreshCanvas(true);
	    });
	  };

	  /**
	   * @ngdoc function
	   * @name refreshRows
	   * @methodOf ui.grid.class:Grid
	   * @description Refresh the rendered rows on screen?  Note: not functional at present
	   * @returns {promise} promise that is resolved when render completes?
	   *
	   */
	  Grid.prototype.refreshRows = function refreshRows() {
	    var self = this;

	    return self.processRowsProcessors(self.rows)
	      .then(function (renderableRows) {
	        self.setVisibleRows(renderableRows);

	        self.redrawInPlace();

	        self.refreshCanvas( true );
	      });
	  };

	  /**
	   * @ngdoc function
	   * @name refreshCanvas
	   * @methodOf ui.grid.class:Grid
	   * @description Builds all styles and recalculates much of the grid sizing
	   * @param {object} buildStyles optional parameter.  Use TBD
	   * @returns {promise} promise that is resolved when the canvas
	   * has been refreshed
	   *
	   */
	  Grid.prototype.refreshCanvas = function(buildStyles) {
	    var self = this;

	    if (buildStyles) {
	      self.buildStyles();
	    }

	    var p = $q.defer();

	    // Get all the header heights
	    var containerHeadersToRecalc = [];
	    for (var containerId in self.renderContainers) {
	      if (self.renderContainers.hasOwnProperty(containerId)) {
	        var container = self.renderContainers[containerId];

	        // Skip containers that have no canvasWidth set yet
	        if (container.canvasWidth === null || isNaN(container.canvasWidth)) {
	          continue;
	        }

	        if (container.header || container.headerCanvas) {
	          container.explicitHeaderHeight = container.explicitHeaderHeight || null;
	          container.explicitHeaderCanvasHeight = container.explicitHeaderCanvasHeight || null;

	          containerHeadersToRecalc.push(container);
	        }
	      }
	    }

	    /*
	     *
	     * Here we loop through the headers, measuring each element as well as any header "canvas" it has within it.
	     *
	     * If any header is less than the largest header height, it will be resized to that so that we don't have headers
	     * with different heights, which looks like a rendering problem
	     *
	     * We'll do the same thing with the header canvases, and give the header CELLS an explicit height if their canvas
	     * is smaller than the largest canvas height. That was header cells without extra controls like filtering don't
	     * appear shorter than other cells.
	     *
	     */
	    if (containerHeadersToRecalc.length > 0) {
	      // Build the styles without the explicit header heights
	      if (buildStyles) {
	        self.buildStyles();
	      }

	      // Putting in a timeout as it's not calculating after the grid element is rendered and filled out
	      $timeout(function() {
	        // var oldHeaderHeight = self.grid.headerHeight;
	        // self.grid.headerHeight = gridUtil.outerElementHeight(self.header);

	        var rebuildStyles = false;

	        // Get all the header heights
	        var maxHeaderHeight = 0;
	        var maxHeaderCanvasHeight = 0;
	        var i, container;
	        var getHeight = function(oldVal, newVal){
	          if ( oldVal !== newVal){
	            rebuildStyles = true;
	          }
	          return newVal;
	        };
	        for (i = 0; i < containerHeadersToRecalc.length; i++) {
	          container = containerHeadersToRecalc[i];

	          // Skip containers that have no canvasWidth set yet
	          if (container.canvasWidth === null || isNaN(container.canvasWidth)) {
	            continue;
	          }

	          if (container.header) {
	            var headerHeight = container.headerHeight = getHeight(container.headerHeight, parseInt(gridUtil.outerElementHeight(container.header), 10));

	            // Get the "inner" header height, that is the height minus the top and bottom borders, if present. We'll use it to make sure all the headers have a consistent height
	            var topBorder = gridUtil.getBorderSize(container.header, 'top');
	            var bottomBorder = gridUtil.getBorderSize(container.header, 'bottom');
	            var innerHeaderHeight = parseInt(headerHeight - topBorder - bottomBorder, 10);

	            innerHeaderHeight  = innerHeaderHeight < 0 ? 0 : innerHeaderHeight;

	            container.innerHeaderHeight = innerHeaderHeight;

	            // If the header doesn't have an explicit height set, save the largest header height for use later
	            //   Explicit header heights are based off of the max we are calculating here. We never want to base the max on something we're setting explicitly
	            if (!container.explicitHeaderHeight && innerHeaderHeight > maxHeaderHeight) {
	              maxHeaderHeight = innerHeaderHeight;
	            }
	          }

	          if (container.headerCanvas) {
	            var headerCanvasHeight = container.headerCanvasHeight = getHeight(container.headerCanvasHeight, parseInt(gridUtil.outerElementHeight(container.headerCanvas), 10));


	            // If the header doesn't have an explicit canvas height, save the largest header canvas height for use later
	            //   Explicit header heights are based off of the max we are calculating here. We never want to base the max on something we're setting explicitly
	            if (!container.explicitHeaderCanvasHeight && headerCanvasHeight > maxHeaderCanvasHeight) {
	              maxHeaderCanvasHeight = headerCanvasHeight;
	            }
	          }
	        }

	        // Go through all the headers
	        for (i = 0; i < containerHeadersToRecalc.length; i++) {
	          container = containerHeadersToRecalc[i];

	          /* If:
	              1. We have a max header height
	              2. This container has a header height defined
	              3. And either this container has an explicit header height set, OR its header height is less than the max

	              then:

	              Give this container's header an explicit height so it will line up with the tallest header
	          */
	          if (
	            maxHeaderHeight > 0 && typeof(container.headerHeight) !== 'undefined' && container.headerHeight !== null &&
	            (container.explicitHeaderHeight || container.headerHeight < maxHeaderHeight)
	          ) {
	            container.explicitHeaderHeight = getHeight(container.explicitHeaderHeight, maxHeaderHeight);
	          }

	          // Do the same as above except for the header canvas
	          if (
	            maxHeaderCanvasHeight > 0 && typeof(container.headerCanvasHeight) !== 'undefined' && container.headerCanvasHeight !== null &&
	            (container.explicitHeaderCanvasHeight || container.headerCanvasHeight < maxHeaderCanvasHeight)
	          ) {
	            container.explicitHeaderCanvasHeight = getHeight(container.explicitHeaderCanvasHeight, maxHeaderCanvasHeight);
	          }
	        }

	        // Rebuild styles if the header height has changed
	        //   The header height is used in body/viewport calculations and those are then used in other styles so we need it to be available
	        if (buildStyles && rebuildStyles) {
	          self.buildStyles();
	        }

	        p.resolve();
	      });
	    }
	    else {
	      // Timeout still needs to be here to trigger digest after styles have been rebuilt
	      $timeout(function() {
	        p.resolve();
	      });
	    }

	    return p.promise;
	  };


	  /**
	   * @ngdoc function
	   * @name redrawCanvas
	   * @methodOf ui.grid.class:Grid
	   * @description Redraw the rows and columns based on our current scroll position
	   * @param {boolean} [rowsAdded] Optional to indicate rows are added and the scroll percentage must be recalculated
	   *
	   */
	  Grid.prototype.redrawInPlace = function redrawInPlace(rowsAdded) {
	    // gridUtil.logDebug('redrawInPlace');

	    var self = this;

	    for (var i in self.renderContainers) {
	      var container = self.renderContainers[i];

	      // gridUtil.logDebug('redrawing container', i);

	      if (rowsAdded) {
	        container.adjustRows(container.prevScrollTop, null);
	        container.adjustColumns(container.prevScrollLeft, null);
	      }
	      else {
	        container.adjustRows(null, container.prevScrolltopPercentage);
	        container.adjustColumns(null, container.prevScrollleftPercentage);
	      }
	    }
	  };

	    /**
	     * @ngdoc function
	     * @name hasLeftContainerColumns
	     * @methodOf ui.grid.class:Grid
	     * @description returns true if leftContainer has columns
	     */
	    Grid.prototype.hasLeftContainerColumns = function () {
	      return this.hasLeftContainer() && this.renderContainers.left.renderedColumns.length > 0;
	    };

	    /**
	     * @ngdoc function
	     * @name hasRightContainerColumns
	     * @methodOf ui.grid.class:Grid
	     * @description returns true if rightContainer has columns
	     */
	    Grid.prototype.hasRightContainerColumns = function () {
	      return this.hasRightContainer() && this.renderContainers.right.renderedColumns.length > 0;
	    };

	    /**
	     * @ngdoc method
	     * @methodOf  ui.grid.class:Grid
	     * @name scrollToIfNecessary
	     * @description Scrolls the grid to make a certain row and column combo visible,
	     *   in the case that it is not completely visible on the screen already.
	     * @param {GridRow} gridRow row to make visible
	     * @param {GridCol} gridCol column to make visible
	     * @returns {promise} a promise that is resolved when scrolling is complete
	     */
	    Grid.prototype.scrollToIfNecessary = function (gridRow, gridCol) {
	      var self = this;

	      var scrollEvent = new ScrollEvent(self, 'uiGrid.scrollToIfNecessary');

	      // Alias the visible row and column caches
	      var visRowCache = self.renderContainers.body.visibleRowCache;
	      var visColCache = self.renderContainers.body.visibleColumnCache;

	      /*-- Get the top, left, right, and bottom "scrolled" edges of the grid --*/

	      // The top boundary is the current Y scroll position PLUS the header height, because the header can obscure rows when the grid is scrolled downwards
	      var topBound = self.renderContainers.body.prevScrollTop + self.headerHeight;

	      // Don't the let top boundary be less than 0
	      topBound = (topBound < 0) ? 0 : topBound;

	      // The left boundary is the current X scroll position
	      var leftBound = self.renderContainers.body.prevScrollLeft;

	      // The bottom boundary is the current Y scroll position, plus the height of the grid, but minus the header height.
	      //   Basically this is the viewport height added on to the scroll position
	      var bottomBound = self.renderContainers.body.prevScrollTop + self.gridHeight - self.renderContainers.body.headerHeight - self.footerHeight -  self.scrollbarWidth;

	      // If there's a horizontal scrollbar, remove its height from the bottom boundary, otherwise we'll be letting it obscure rows
	      //if (self.horizontalScrollbarHeight) {
	      //  bottomBound = bottomBound - self.horizontalScrollbarHeight;
	      //}

	      // The right position is the current X scroll position minus the grid width
	      var rightBound = self.renderContainers.body.prevScrollLeft + Math.ceil(self.renderContainers.body.getViewportWidth());

	      // If there's a vertical scrollbar, subtract it from the right boundary or we'll allow it to obscure cells
	      //if (self.verticalScrollbarWidth) {
	      //  rightBound = rightBound - self.verticalScrollbarWidth;
	      //}

	      // We were given a row to scroll to
	      if (gridRow !== null) {
	        // This is the index of the row we want to scroll to, within the list of rows that can be visible
	        var seekRowIndex = visRowCache.indexOf(gridRow);

	        // Total vertical scroll length of the grid
	        var scrollLength = (self.renderContainers.body.getCanvasHeight() - self.renderContainers.body.getViewportHeight());

	        // Add the height of the native horizontal scrollbar to the scroll length, if it's there. Otherwise it will mask over the final row
	        //if (self.horizontalScrollbarHeight && self.horizontalScrollbarHeight > 0) {
	        //  scrollLength = scrollLength + self.horizontalScrollbarHeight;
	        //}

	        // This is the minimum amount of pixels we need to scroll vertical in order to see this row.
	        var pixelsToSeeRow = (seekRowIndex * self.options.rowHeight + self.headerHeight);

	        // Don't let the pixels required to see the row be less than zero
	        pixelsToSeeRow = (pixelsToSeeRow < 0) ? 0 : pixelsToSeeRow;

	        var scrollPixels, percentage;

	        // If the scroll position we need to see the row is LESS than the top boundary, i.e. obscured above the top of the self...
	        if (pixelsToSeeRow < topBound) {
	          // Get the different between the top boundary and the required scroll position and subtract it from the current scroll position\
	          //   to get the full position we need
	          scrollPixels = self.renderContainers.body.prevScrollTop - (topBound - pixelsToSeeRow);

	          // Turn the scroll position into a percentage and make it an argument for a scroll event
	          percentage = scrollPixels / scrollLength;
	          scrollEvent.y = { percentage: percentage  };
	        }
	        // Otherwise if the scroll position we need to see the row is MORE than the bottom boundary, i.e. obscured below the bottom of the self...
	        else if (pixelsToSeeRow > bottomBound) {
	          // Get the different between the bottom boundary and the required scroll position and add it to the current scroll position
	          //   to get the full position we need
	          scrollPixels = pixelsToSeeRow - bottomBound + self.renderContainers.body.prevScrollTop;

	          // Turn the scroll position into a percentage and make it an argument for a scroll event
	          percentage = scrollPixels / scrollLength;
	          scrollEvent.y = { percentage: percentage  };
	        }
	      }

	      // We were given a column to scroll to
	      if (gridCol !== null) {
	        // This is the index of the column we want to scroll to, within the list of columns that can be visible
	        var seekColumnIndex = visColCache.indexOf(gridCol);

	        // Total horizontal scroll length of the grid
	        var horizScrollLength = (self.renderContainers.body.getCanvasWidth() - self.renderContainers.body.getViewportWidth());

	        // This is the minimum amount of pixels we need to scroll horizontal in order to see this column
	        var columnLeftEdge = 0;
	        for (var i = 0; i < seekColumnIndex; i++) {
	          var col = visColCache[i];
	          columnLeftEdge += col.drawnWidth;
	        }
	        columnLeftEdge = (columnLeftEdge < 0) ? 0 : columnLeftEdge;

	        var columnRightEdge = columnLeftEdge + gridCol.drawnWidth;

	        // Don't let the pixels required to see the column be less than zero
	        columnRightEdge = (columnRightEdge < 0) ? 0 : columnRightEdge;

	        var horizScrollPixels, horizPercentage;

	        // If the scroll position we need to see the column is LESS than the left boundary, i.e. obscured before the left of the self...
	        if (columnLeftEdge < leftBound) {
	          // Get the different between the left boundary and the required scroll position and subtract it from the current scroll position\
	          //   to get the full position we need
	          horizScrollPixels = self.renderContainers.body.prevScrollLeft - (leftBound - columnLeftEdge);

	          // Turn the scroll position into a percentage and make it an argument for a scroll event
	          horizPercentage = horizScrollPixels / horizScrollLength;
	          horizPercentage = (horizPercentage > 1) ? 1 : horizPercentage;
	          scrollEvent.x = { percentage: horizPercentage  };
	        }
	        // Otherwise if the scroll position we need to see the column is MORE than the right boundary, i.e. obscured after the right of the self...
	        else if (columnRightEdge > rightBound) {
	          // Get the different between the right boundary and the required scroll position and add it to the current scroll position
	          //   to get the full position we need
	          horizScrollPixels = columnRightEdge - rightBound + self.renderContainers.body.prevScrollLeft;

	          // Turn the scroll position into a percentage and make it an argument for a scroll event
	          horizPercentage = horizScrollPixels / horizScrollLength;
	          horizPercentage = (horizPercentage > 1) ? 1 : horizPercentage;
	          scrollEvent.x = { percentage: horizPercentage  };
	        }
	      }

	      var deferred = $q.defer();

	      // If we need to scroll on either the x or y axes, fire a scroll event
	      if (scrollEvent.y || scrollEvent.x) {
	        scrollEvent.withDelay = false;
	        self.scrollContainers('',scrollEvent);
	        var dereg = self.api.core.on.scrollEnd(null,function() {
	          deferred.resolve(scrollEvent);
	          dereg();
	        });
	      }
	      else {
	        deferred.resolve();
	      }

	      return deferred.promise;
	    };

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.class:Grid
	     * @name scrollTo
	     * @description Scroll the grid such that the specified
	     * row and column is in view
	     * @param {object} rowEntity gridOptions.data[] array instance to make visible
	     * @param {object} colDef to make visible
	     * @returns {promise} a promise that is resolved after any scrolling is finished
	     */
	    Grid.prototype.scrollTo = function (rowEntity, colDef) {
	      var gridRow = null, gridCol = null;

	      if (rowEntity !== null && typeof(rowEntity) !== 'undefined' ) {
	        gridRow = this.getRow(rowEntity);
	      }

	      if (colDef !== null && typeof(colDef) !== 'undefined' ) {
	        gridCol = this.getColumn(colDef.name ? colDef.name : colDef.field);
	      }
	      return this.scrollToIfNecessary(gridRow, gridCol);
	    };

	  /**
	   * @ngdoc function
	   * @name clearAllFilters
	   * @methodOf ui.grid.class:Grid
	   * @description Clears all filters and optionally refreshes the visible rows.
	   * @param {object} refreshRows Defaults to true.
	   * @param {object} clearConditions Defaults to false.
	   * @param {object} clearFlags Defaults to false.
	   * @returns {promise} If `refreshRows` is true, returns a promise of the rows refreshing.
	   */
	  Grid.prototype.clearAllFilters = function clearAllFilters(refreshRows, clearConditions, clearFlags) {
	    // Default `refreshRows` to true because it will be the most commonly desired behaviour.
	    if (refreshRows === undefined) {
	      refreshRows = true;
	    }
	    if (clearConditions === undefined) {
	      clearConditions = false;
	    }
	    if (clearFlags === undefined) {
	      clearFlags = false;
	    }

	    this.columns.forEach(function(column) {
	      column.filters.forEach(function(filter) {
	        filter.term = undefined;

	        if (clearConditions) {
	          filter.condition = undefined;
	        }

	        if (clearFlags) {
	          filter.flags = undefined;
	        }
	      });
	    });

	    if (refreshRows) {
	      return this.refreshRows();
	    }
	  };


	      // Blatantly stolen from Angular as it isn't exposed (yet? 2.0?)
	  function RowHashMap() {}

	  RowHashMap.prototype = {
	    /**
	     * Store key value pair
	     * @param key key to store can be any type
	     * @param value value to store can be any type
	     */
	    put: function(key, value) {
	      this[this.grid.options.rowIdentity(key)] = value;
	    },

	    /**
	     * @param key
	     * @returns {Object} the value for the key
	     */
	    get: function(key) {
	      return this[this.grid.options.rowIdentity(key)];
	    },

	    /**
	     * Remove the key/value pair
	     * @param key
	     */
	    remove: function(key) {
	      var value = this[key = this.grid.options.rowIdentity(key)];
	      delete this[key];
	      return value;
	    }
	  };



	  return Grid;

	}]);

	})();

	(function () {

	  angular.module('ui.grid')
	    .factory('GridApi', ['$q', '$rootScope', 'gridUtil', 'uiGridConstants', 'GridRow', 'uiGridGridMenuService',
	      function ($q, $rootScope, gridUtil, uiGridConstants, GridRow, uiGridGridMenuService) {
	        /**
	         * @ngdoc function
	         * @name ui.grid.class:GridApi
	         * @description GridApi provides the ability to register public methods events inside the grid and allow
	         * for other components to use the api via featureName.raise.methodName and featureName.on.eventName(function(args){}.
	         * <br/>
	         * To listen to events, you must add a callback to gridOptions.onRegisterApi
	         * <pre>
	         *   $scope.gridOptions.onRegisterApi = function(gridApi){
	         *      gridApi.cellNav.on.navigate($scope,function(newRowCol, oldRowCol){
	         *          $log.log('navigation event');
	         *      });
	         *   };
	         * </pre>
	         * @param {object} grid grid that owns api
	         */
	        var GridApi = function GridApi(grid) {
	          this.grid = grid;
	          this.listeners = [];

	          /**
	           * @ngdoc function
	           * @name renderingComplete
	           * @methodOf  ui.grid.core.api:PublicApi
	           * @description Rendering is complete, called at the same
	           * time as `onRegisterApi`, but provides a way to obtain
	           * that same event within features without stopping end
	           * users from getting at the onRegisterApi method.
	           *
	           * Included in gridApi so that it's always there - otherwise
	           * there is still a timing problem with when a feature can
	           * call this.
	           *
	           * @param {GridApi} gridApi the grid api, as normally
	           * returned in the onRegisterApi method
	           *
	           * @example
	           * <pre>
	           *      gridApi.core.on.renderingComplete( grid );
	           * </pre>
	           */
	          this.registerEvent( 'core', 'renderingComplete' );

	          /**
	           * @ngdoc event
	           * @name filterChanged
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised after the filter is changed.  The nature
	           * of the watch expression doesn't allow notification of what changed,
	           * so the receiver of this event will need to re-extract the filter
	           * conditions from the columns.
	           *
	           */
	          this.registerEvent( 'core', 'filterChanged' );

	          /**
	           * @ngdoc function
	           * @name setRowInvisible
	           * @methodOf  ui.grid.core.api:PublicApi
	           * @description Sets an override on the row to make it always invisible,
	           * which will override any filtering or other visibility calculations.
	           * If the row is currently visible then sets it to invisible and calls
	           * both grid refresh and emits the rowsVisibleChanged event
	           * @param {object} rowEntity gridOptions.data[] array instance
	           */
	          this.registerMethod( 'core', 'setRowInvisible', GridRow.prototype.setRowInvisible );

	          /**
	           * @ngdoc function
	           * @name clearRowInvisible
	           * @methodOf  ui.grid.core.api:PublicApi
	           * @description Clears any override on visibility for the row so that it returns to
	           * using normal filtering and other visibility calculations.
	           * If the row is currently invisible then sets it to visible and calls
	           * both grid refresh and emits the rowsVisibleChanged event
	           * TODO: if a filter is active then we can't just set it to visible?
	           * @param {object} rowEntity gridOptions.data[] array instance
	           */
	          this.registerMethod( 'core', 'clearRowInvisible', GridRow.prototype.clearRowInvisible );

	          /**
	           * @ngdoc function
	           * @name getVisibleRows
	           * @methodOf  ui.grid.core.api:PublicApi
	           * @description Returns all visible rows
	           * @param {Grid} grid the grid you want to get visible rows from
	           * @returns {array} an array of gridRow
	           */
	          this.registerMethod( 'core', 'getVisibleRows', this.grid.getVisibleRows );

	          /**
	           * @ngdoc event
	           * @name rowsVisibleChanged
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised after the rows that are visible
	           * change.  The filtering is zero-based, so it isn't possible
	           * to say which rows changed (unlike in the selection feature).
	           * We can plausibly know which row was changed when setRowInvisible
	           * is called, but in that situation the user already knows which row
	           * they changed.  When a filter runs we don't know what changed,
	           * and that is the one that would have been useful.
	           *
	           */
	          this.registerEvent( 'core', 'rowsVisibleChanged' );

	          /**
	           * @ngdoc event
	           * @name rowsRendered
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised after the cache of visible rows is changed.
	           */
	          this.registerEvent( 'core', 'rowsRendered' );


	          /**
	           * @ngdoc event
	           * @name scrollBegin
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised when scroll begins.  Is throttled, so won't be raised too frequently
	           */
	          this.registerEvent( 'core', 'scrollBegin' );

	          /**
	           * @ngdoc event
	           * @name scrollEnd
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised when scroll has finished.  Is throttled, so won't be raised too frequently
	           */
	          this.registerEvent( 'core', 'scrollEnd' );

	          /**
	           * @ngdoc event
	           * @name canvasHeightChanged
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised when the canvas height has changed
	           * <br/>
	           * arguments: oldHeight, newHeight
	           */
	          this.registerEvent( 'core', 'canvasHeightChanged');

	          /**
	           * @ngdoc event
	           * @name gridDimensionChanged
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised when the grid dimensions have changed (when autoResize is on)
	           * <br/>
	           * arguments: oldGridHeight, oldGridWidth, newGridHeight, newGridWidth
	           */
	          this.registerEvent( 'core', 'gridDimensionChanged');
	        };

	        /**
	         * @ngdoc function
	         * @name ui.grid.class:suppressEvents
	         * @methodOf ui.grid.class:GridApi
	         * @description Used to execute a function while disabling the specified event listeners.
	         * Disables the listenerFunctions, executes the callbackFn, and then enables
	         * the listenerFunctions again
	         * @param {object} listenerFuncs listenerFunc or array of listenerFuncs to suppress. These must be the same
	         * functions that were used in the .on.eventName method
	         * @param {object} callBackFn function to execute
	         * @example
	         * <pre>
	         *    var navigate = function (newRowCol, oldRowCol){
	         *       //do something on navigate
	         *    }
	         *
	         *    gridApi.cellNav.on.navigate(scope,navigate);
	         *
	         *
	         *    //call the scrollTo event and suppress our navigate listener
	         *    //scrollTo will still raise the event for other listeners
	         *    gridApi.suppressEvents(navigate, function(){
	         *       gridApi.cellNav.scrollTo(aRow, aCol);
	         *    });
	         *
	         * </pre>
	         */
	        GridApi.prototype.suppressEvents = function (listenerFuncs, callBackFn) {
	          var self = this;
	          var listeners = angular.isArray(listenerFuncs) ? listenerFuncs : [listenerFuncs];

	          //find all registered listeners
	          var foundListeners = self.listeners.filter(function(listener) {
	            return listeners.some(function(l) {
	              return listener.handler === l;
	            });
	          });

	          //deregister all the listeners
	          foundListeners.forEach(function(l){
	            l.dereg();
	          });

	          callBackFn();

	          //reregister all the listeners
	          foundListeners.forEach(function(l){
	              l.dereg = registerEventWithAngular(l.eventId, l.handler, self.grid, l._this);
	          });

	        };

	        /**
	         * @ngdoc function
	         * @name registerEvent
	         * @methodOf ui.grid.class:GridApi
	         * @description Registers a new event for the given feature.  The event will get a
	         * .raise and .on prepended to it
	         * <br>
	         * .raise.eventName() - takes no arguments
	         * <br/>
	         * <br/>
	         * .on.eventName(scope, callBackFn, _this)
	         * <br/>
	         * scope - a scope reference to add a deregister call to the scopes .$on('destroy').  Scope is optional and can be a null value,
	         * but in this case you must deregister it yourself via the returned deregister function
	         * <br/>
	         * callBackFn - The function to call
	         * <br/>
	         * _this - optional this context variable for callbackFn. If omitted, grid.api will be used for the context
	         * <br/>
	         * .on.eventName returns a dereg funtion that will remove the listener.  It's not necessary to use it as the listener
	         * will be removed when the scope is destroyed.
	         * @param {string} featureName name of the feature that raises the event
	         * @param {string} eventName  name of the event
	         */
	        GridApi.prototype.registerEvent = function (featureName, eventName) {
	          var self = this;
	          if (!self[featureName]) {
	            self[featureName] = {};
	          }

	          var feature = self[featureName];
	          if (!feature.on) {
	            feature.on = {};
	            feature.raise = {};
	          }

	          var eventId = self.grid.id + featureName + eventName;

	          // gridUtil.logDebug('Creating raise event method ' + featureName + '.raise.' + eventName);
	          feature.raise[eventName] = function () {
	            $rootScope.$emit.apply($rootScope, [eventId].concat(Array.prototype.slice.call(arguments)));
	          };

	          // gridUtil.logDebug('Creating on event method ' + featureName + '.on.' + eventName);
	          feature.on[eventName] = function (scope, handler, _this) {
	            if ( scope !== null && typeof(scope.$on) === 'undefined' ){
	              gridUtil.logError('asked to listen on ' + featureName + '.on.' + eventName + ' but scope wasn\'t passed in the input parameters.  It is legitimate to pass null, but you\'ve passed something else, so you probably forgot to provide scope rather than did it deliberately, not registering');
	              return;
	            }
	            var deregAngularOn = registerEventWithAngular(eventId, handler, self.grid, _this);

	            //track our listener so we can turn off and on
	            var listener = {handler: handler, dereg: deregAngularOn, eventId: eventId, scope: scope, _this:_this};
	            self.listeners.push(listener);

	            var removeListener = function(){
	              listener.dereg();
	              var index = self.listeners.indexOf(listener);
	              self.listeners.splice(index,1);
	            };

	            //destroy tracking when scope is destroyed
	            if (scope) {
	              scope.$on('$destroy', function() {
	                removeListener();
	              });
	            }


	            return removeListener;
	          };
	        };

	        function registerEventWithAngular(eventId, handler, grid, _this) {
	          return $rootScope.$on(eventId, function (event) {
	            var args = Array.prototype.slice.call(arguments);
	            args.splice(0, 1); //remove evt argument
	            handler.apply(_this ? _this : grid.api, args);
	          });
	        }

	        /**
	         * @ngdoc function
	         * @name registerEventsFromObject
	         * @methodOf ui.grid.class:GridApi
	         * @description Registers features and events from a simple objectMap.
	         * eventObjectMap must be in this format (multiple features allowed)
	         * <pre>
	         * {featureName:
	         *        {
	         *          eventNameOne:function(args){},
	         *          eventNameTwo:function(args){}
	         *        }
	         *  }
	         * </pre>
	         * @param {object} eventObjectMap map of feature/event names
	         */
	        GridApi.prototype.registerEventsFromObject = function (eventObjectMap) {
	          var self = this;
	          var features = [];
	          angular.forEach(eventObjectMap, function (featProp, featPropName) {
	            var feature = {name: featPropName, events: []};
	            angular.forEach(featProp, function (prop, propName) {
	              feature.events.push(propName);
	            });
	            features.push(feature);
	          });

	          features.forEach(function (feature) {
	            feature.events.forEach(function (event) {
	              self.registerEvent(feature.name, event);
	            });
	          });

	        };

	        /**
	         * @ngdoc function
	         * @name registerMethod
	         * @methodOf ui.grid.class:GridApi
	         * @description Registers a new event for the given feature
	         * @param {string} featureName name of the feature
	         * @param {string} methodName  name of the method
	         * @param {object} callBackFn function to execute
	         * @param {object} _this binds callBackFn 'this' to _this.  Defaults to gridApi.grid
	         */
	        GridApi.prototype.registerMethod = function (featureName, methodName, callBackFn, _this) {
	          if (!this[featureName]) {
	            this[featureName] = {};
	          }

	          var feature = this[featureName];

	          feature[methodName] = gridUtil.createBoundedWrapper(_this || this.grid, callBackFn);
	        };

	        /**
	         * @ngdoc function
	         * @name registerMethodsFromObject
	         * @methodOf ui.grid.class:GridApi
	         * @description Registers features and methods from a simple objectMap.
	         * eventObjectMap must be in this format (multiple features allowed)
	         * <br>
	         * {featureName:
	         *        {
	         *          methodNameOne:function(args){},
	         *          methodNameTwo:function(args){}
	         *        }
	         * @param {object} eventObjectMap map of feature/event names
	         * @param {object} _this binds this to _this for all functions.  Defaults to gridApi.grid
	         */
	        GridApi.prototype.registerMethodsFromObject = function (methodMap, _this) {
	          var self = this;
	          var features = [];
	          angular.forEach(methodMap, function (featProp, featPropName) {
	            var feature = {name: featPropName, methods: []};
	            angular.forEach(featProp, function (prop, propName) {
	              feature.methods.push({name: propName, fn: prop});
	            });
	            features.push(feature);
	          });

	          features.forEach(function (feature) {
	            feature.methods.forEach(function (method) {
	              self.registerMethod(feature.name, method.name, method.fn, _this);
	            });
	          });

	        };

	        return GridApi;

	      }]);

	})();

	(function(){

	angular.module('ui.grid')
	.factory('GridColumn', ['gridUtil', 'uiGridConstants', 'i18nService', function(gridUtil, uiGridConstants, i18nService) {

	  /**
	   * ******************************************************************************************
	   * PaulL1: Ugly hack here in documentation.  These properties are clearly properties of GridColumn,
	   * and need to be noted as such for those extending and building ui-grid itself.
	   * However, from an end-developer perspective, they interact with all these through columnDefs,
	   * and they really need to be documented there.  I feel like they're relatively static, and
	   * I can't find an elegant way for ngDoc to reference to both....so I've duplicated each
	   * comment block.  Ugh.
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name name
	   * @propertyOf ui.grid.class:GridColumn
	   * @description (mandatory) each column should have a name, although for backward
	   * compatibility with 2.x name can be omitted if field is present
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name name
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description (mandatory) each column should have a name, although for backward
	   * compatibility with 2.x name can be omitted if field is present
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name displayName
	   * @propertyOf ui.grid.class:GridColumn
	   * @description Column name that will be shown in the header.  If displayName is not
	   * provided then one is generated using the name.
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name displayName
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description Column name that will be shown in the header.  If displayName is not
	   * provided then one is generated using the name.
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name field
	   * @propertyOf ui.grid.class:GridColumn
	   * @description field must be provided if you wish to bind to a
	   * property in the data source.  Should be an angular expression that evaluates against grid.options.data
	   * array element.  Can be a complex expression: <code>employee.address.city</code>, or can be a function: <code>employee.getFullAddress()</code>.
	   * See the angular docs on binding expressions.
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name field
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description field must be provided if you wish to bind to a
	   * property in the data source.  Should be an angular expression that evaluates against grid.options.data
	   * array element.  Can be a complex expression: <code>employee.address.city</code>, or can be a function: <code>employee.getFullAddress()</code>.    * See the angular docs on binding expressions.    *
	   */

	  /**
	   * @ngdoc property
	   * @name filter
	   * @propertyOf ui.grid.class:GridColumn
	   * @description Filter on this column.
	   *
	   * Available built-in conditions and types are listed under {@link jui.grid.service:uiGridConstants#properties_filter uiGridOptions.filter}
	   * @example
	   * <pre>{ term: 'text', condition: uiGridConstants.filter.STARTS_WITH, placeholder: 'type to filter...', ariaLabel: 'Filter for text', flags: { caseSensitive: false }, type: uiGridConstants.filter.SELECT, [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ] }</pre>
	   *
	   */

	  /**
	   * @ngdoc object
	   * @name ui.grid.class:GridColumn
	   * @description Represents the viewModel for each column.  Any state or methods needed for a Grid Column
	   * are defined on this prototype
	   * @param {ColumnDef} colDef the column def to associate with this column
	   * @param {number} uid the unique and immutable uid we'd like to allocate to this column
	   * @param {Grid} grid the grid we'd like to create this column in
	   */
	  function GridColumn(colDef, uid, grid) {
	    var self = this;

	    self.grid = grid;
	    self.uid = uid;

	    self.updateColumnDef(colDef, true);

	    self.aggregationValue = undefined;

	    // The footer cell registers to listen for the rowsRendered event, and calls this.  Needed to be
	    // in something with a scope so that the dereg would get called
	    self.updateAggregationValue = function() {

	     // gridUtil.logDebug('getAggregationValue for Column ' + self.colDef.name);

	      /**
	       * @ngdoc property
	       * @name aggregationType
	       * @propertyOf ui.grid.class:GridOptions.columnDef
	       * @description The aggregation that you'd like to show in the columnFooter for this
	       * column.  Valid values are in
	       * {@link ui.grid.service:uiGridConstants#properties_aggregationTypes uiGridConstants.aggregationTypes},
	       * and currently include `uiGridConstants.aggregationTypes.count`,
	       * `uiGridConstants.aggregationTypes.sum`, `uiGridConstants.aggregationTypes.avg`, `uiGridConstants.aggregationTypes.min`,
	       * `uiGridConstants.aggregationTypes.max`.
	       *
	       * You can also provide a function as the aggregation type, in this case your function needs to accept the full
	       * set of visible rows, and return a value that should be shown
	       */
	      if (!self.aggregationType) {
	        self.aggregationValue = undefined;
	        return;
	      }

	      var result = 0;
	      var visibleRows = self.grid.getVisibleRows();

	      var cellValues = function(){
	        var values = [];
	        visibleRows.forEach(function (row) {
	          var cellValue = self.grid.getCellValue(row, self);
	          var cellNumber = Number(cellValue);
	          if (!isNaN(cellNumber)) {
	            values.push(cellNumber);
	          }
	        });
	        return values;
	      };

	      if (angular.isFunction(self.aggregationType)) {
	        self.aggregationValue = self.aggregationType(visibleRows, self);
	      }
	      else if (self.aggregationType === uiGridConstants.aggregationTypes.count) {
	        self.aggregationValue = self.grid.getVisibleRowCount();
	      }
	      else if (self.aggregationType === uiGridConstants.aggregationTypes.sum) {
	        cellValues().forEach(function (value) {
	          result += value;
	        });
	        self.aggregationValue = result;
	      }
	      else if (self.aggregationType === uiGridConstants.aggregationTypes.avg) {
	        cellValues().forEach(function (value) {
	          result += value;
	        });
	        result = result / cellValues().length;
	        self.aggregationValue = result;
	      }
	      else if (self.aggregationType === uiGridConstants.aggregationTypes.min) {
	        self.aggregationValue = Math.min.apply(null, cellValues());
	      }
	      else if (self.aggregationType === uiGridConstants.aggregationTypes.max) {
	        self.aggregationValue = Math.max.apply(null, cellValues());
	      }
	      else {
	        self.aggregationValue = '\u00A0';
	      }
	    };

	//     var throttledUpdateAggregationValue = gridUtil.throttle(updateAggregationValue, self.grid.options.aggregationCalcThrottle, { trailing: true, context: self.name });

	    /**
	     * @ngdoc function
	     * @name getAggregationValue
	     * @methodOf ui.grid.class:GridColumn
	     * @description gets the aggregation value based on the aggregation type for this column.
	     * Debounced using scrollDebounce option setting
	     */
	    this.getAggregationValue =  function() {
	//      if (!self.grid.isScrollingVertically && !self.grid.isScrollingHorizontally) {
	//        throttledUpdateAggregationValue();
	//      }

	      return self.aggregationValue;
	    };
	  }

	  /**
	   * @ngdoc function
	   * @name hideColumn
	   * @methodOf ui.grid.class:GridColumn
	   * @description Hides the column by setting colDef.visible = false
	   */
	  GridColumn.prototype.hideColumn = function() {
	    this.colDef.visible = false;
	  };
	  

	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:GridColumn
	   * @name setPropertyOrDefault
	   * @description Sets a property on the column using the passed in columnDef, and
	   * setting the defaultValue if the value cannot be found on the colDef
	   * @param {ColumnDef} colDef the column def to look in for the property value
	   * @param {string} propName the property name we'd like to set
	   * @param {object} defaultValue the value to use if the colDef doesn't provide the setting
	   */
	  GridColumn.prototype.setPropertyOrDefault = function (colDef, propName, defaultValue) {
	    var self = this;

	    // Use the column definition filter if we were passed it
	    if (typeof(colDef[propName]) !== 'undefined' && colDef[propName]) {
	      self[propName] = colDef[propName];
	    }
	    // Otherwise use our own if it's set
	    else if (typeof(self[propName]) !== 'undefined') {
	      self[propName] = self[propName];
	    }
	    // Default to empty object for the filter
	    else {
	      self[propName] = defaultValue ? defaultValue : {};
	    }
	  };



	  /**
	   * @ngdoc property
	   * @name width
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description sets the column width.  Can be either
	   * a number or a percentage, or an * for auto.
	   * @example
	   * <pre>  $scope.gridOptions.columnDefs = [ { field: 'field1', width: 100},
	   *                                          { field: 'field2', width: '20%'},
	   *                                          { field: 'field3', width: '*' }]; </pre>
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name minWidth
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description sets the minimum column width.  Should be a number.
	   * @example
	   * <pre>  $scope.gridOptions.columnDefs = [ { field: 'field1', minWidth: 100}]; </pre>
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name maxWidth
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description sets the maximum column width.  Should be a number.
	   * @example
	   * <pre>  $scope.gridOptions.columnDefs = [ { field: 'field1', maxWidth: 100}]; </pre>
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name visible
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description sets whether or not the column is visible
	   * </br>Default is true
	   * @example
	   * <pre>  $scope.gridOptions.columnDefs = [
	   *     { field: 'field1', visible: true},
	   *     { field: 'field2', visible: false }
	   *   ]; </pre>
	   *
	   */

	 /**
	  * @ngdoc property
	  * @name sort
	  * @propertyOf ui.grid.class:GridOptions.columnDef
	  * @description An object of sort information, attributes are:
	  *
	  * - direction: values are {@link ui.grid.service:uiGridConstants#properties_ASC uiGridConstants.ASC}
	  *  or {@link ui.grid.service:uiGridConstants#properties_DESC uiGridConstants.DESC}
	  * - ignoreSort: if set to true this sort is ignored (used by tree to manipulate the sort functionality)
	  * - priority: says what order to sort the columns in (lower priority gets sorted first).
	  * @example
	  * <pre>
	  *   $scope.gridOptions.columnDefs = [{
	  *     field: 'field1',
	  *     sort: {
	  *       direction: uiGridConstants.ASC,
	  *       ignoreSort: true,
	  *       priority: 0
	  *      }
	  *   }];
	  * </pre>
	  */


	  /**
	   * @ngdoc property
	   * @name sortingAlgorithm
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description Algorithm to use for sorting this column. Takes 'a' and 'b' parameters
	   * like any normal sorting function with additional 'rowA', 'rowB', and 'direction' parameters
	   * that are the row objects and the current direction of the sort respectively.
	   *
	   */

	  /**
	   * @ngdoc array
	   * @name filters
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description Specify multiple filter fields.
	   * @example
	   * <pre>$scope.gridOptions.columnDefs = [
	   *   {
	   *     field: 'field1', filters: [
	   *       {
	   *         term: 'aa',
	   *         condition: uiGridConstants.filter.STARTS_WITH,
	   *         placeholder: 'starts with...',
	   *         ariaLabel: 'Filter for field1',
	   *         flags: { caseSensitive: false },
	   *         type: uiGridConstants.filter.SELECT,
	   *         selectOptions: [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ]
	   *       },
	   *       {
	   *         condition: uiGridConstants.filter.ENDS_WITH,
	   *         placeholder: 'ends with...'
	   *       }
	   *     ]
	   *   }
	   * ]; </pre>
	   *
	   *
	   */

	  /**
	   * @ngdoc array
	   * @name filters
	   * @propertyOf ui.grid.class:GridColumn
	   * @description Filters for this column. Includes 'term' property bound to filter input elements.
	   * @example
	   * <pre>[
	   *   {
	   *     term: 'foo', // ngModel for <input>
	   *     condition: uiGridConstants.filter.STARTS_WITH,
	   *     placeholder: 'starts with...',
	   *     ariaLabel: 'Filter for foo',
	   *     flags: { caseSensitive: false },
	   *     type: uiGridConstants.filter.SELECT,
	   *     selectOptions: [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ]
	   *   },
	   *   {
	   *     term: 'baz',
	   *     condition: uiGridConstants.filter.ENDS_WITH,
	   *     placeholder: 'ends with...'
	   *   }
	   * ] </pre>
	   *
	   *
	   */

	  /**
	   * @ngdoc array
	   * @name menuItems
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description used to add menu items to a column.  Refer to the tutorial on this
	   * functionality.  A number of settings are supported:
	   *
	   * - title: controls the title that is displayed in the menu
	   * - icon: the icon shown alongside that title
	   * - action: the method to call when the menu is clicked
	   * - shown: a function to evaluate to determine whether or not to show the item
	   * - active: a function to evaluate to determine whether or not the item is currently selected
	   * - context: context to pass to the action function, available in this.context in your handler
	   * - leaveOpen: if set to true, the menu should stay open after the action, defaults to false
	   * @example
	   * <pre>  $scope.gridOptions.columnDefs = [
	   *   { field: 'field1', menuItems: [
	   *     {
	   *       title: 'Outer Scope Alert',
	   *       icon: 'ui-grid-icon-info-circled',
	   *       action: function($event) {
	   *         this.context.blargh(); // $scope.blargh() would work too, this is just an example
	   *       },
	   *       shown: function() { return true; },
	   *       active: function() { return true; },
	   *       context: $scope
	   *     },
	   *     {
	   *       title: 'Grid ID',
	   *       action: function() {
	   *         alert('Grid ID: ' + this.grid.id);
	   *       }
	   *     }
	   *   ] }]; </pre>
	   *
	   */

	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:GridColumn
	   * @name updateColumnDef
	   * @description Moves settings from the columnDef down onto the column,
	   * and sets properties as appropriate
	   * @param {ColumnDef} colDef the column def to look in for the property value
	   * @param {boolean} isNew whether the column is being newly created, if not
	   * we're updating an existing column, and some items such as the sort shouldn't
	   * be copied down
	   */
	  GridColumn.prototype.updateColumnDef = function(colDef, isNew) {
	    var self = this;

	    self.colDef = colDef;

	    if (colDef.name === undefined) {
	      throw new Error('colDef.name is required for column at index ' + self.grid.options.columnDefs.indexOf(colDef));
	    }

	    self.displayName = (colDef.displayName === undefined) ? gridUtil.readableColumnName(colDef.name) : colDef.displayName;

	    if (!angular.isNumber(self.width) || !self.hasCustomWidth || colDef.allowCustomWidthOverride) {
	      var colDefWidth = colDef.width;
	      var parseErrorMsg = "Cannot parse column width '" + colDefWidth + "' for column named '" + colDef.name + "'";
	      self.hasCustomWidth = false;

	      if (!angular.isString(colDefWidth) && !angular.isNumber(colDefWidth)) {
	        self.width = '*';
	      } else if (angular.isString(colDefWidth)) {
	        // See if it ends with a percent
	        if (gridUtil.endsWith(colDefWidth, '%')) {
	          // If so we should be able to parse the non-percent-sign part to a number
	          var percentStr = colDefWidth.replace(/%/g, '');
	          var percent = parseInt(percentStr, 10);
	          if (isNaN(percent)) {
	            throw new Error(parseErrorMsg);
	          }
	          self.width = colDefWidth;
	        }
	        // And see if it's a number string
	        else if (colDefWidth.match(/^(\d+)$/)) {
	          self.width = parseInt(colDefWidth.match(/^(\d+)$/)[1], 10);
	        }
	        // Otherwise it should be a string of asterisks
	        else if (colDefWidth.match(/^\*+$/)) {
	          self.width = colDefWidth;
	        }
	        // No idea, throw an Error
	        else {
	          throw new Error(parseErrorMsg);
	        }
	      }
	      // Is a number, use it as the width
	      else {
	        self.width = colDefWidth;
	      }
	    }

	    ['minWidth', 'maxWidth'].forEach(function (name) {
	      var minOrMaxWidth = colDef[name];
	      var parseErrorMsg = "Cannot parse column " + name + " '" + minOrMaxWidth + "' for column named '" + colDef.name + "'";

	      if (!angular.isString(minOrMaxWidth) && !angular.isNumber(minOrMaxWidth)) {
	        //Sets default minWidth and maxWidth values
	        self[name] = ((name === 'minWidth') ? 30 : 9000);
	      } else if (angular.isString(minOrMaxWidth)) {
	        if (minOrMaxWidth.match(/^(\d+)$/)) {
	          self[name] = parseInt(minOrMaxWidth.match(/^(\d+)$/)[1], 10);
	        } else {
	          throw new Error(parseErrorMsg);
	        }
	      } else {
	        self[name] = minOrMaxWidth;
	      }
	    });

	    //use field if it is defined; name if it is not
	    self.field = (colDef.field === undefined) ? colDef.name : colDef.field;

	    if ( typeof( self.field ) !== 'string' ){
	      gridUtil.logError( 'Field is not a string, this is likely to break the code, Field is: ' + self.field );
	    }

	    self.name = colDef.name;

	    // Use colDef.displayName as long as it's not undefined, otherwise default to the field name
	    self.displayName = (colDef.displayName === undefined) ? gridUtil.readableColumnName(colDef.name) : colDef.displayName;

	    //self.originalIndex = index;

	    self.aggregationType = angular.isDefined(colDef.aggregationType) ? colDef.aggregationType : null;
	    self.footerCellTemplate = angular.isDefined(colDef.footerCellTemplate) ? colDef.footerCellTemplate : null;

	    /**
	     * @ngdoc property
	     * @name cellTooltip
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description Whether or not to show a tooltip when a user hovers over the cell.
	     * If set to false, no tooltip.  If true, the cell value is shown in the tooltip (useful
	     * if you have long values in your cells), if a function then that function is called
	     * passing in the row and the col `cellTooltip( row, col )`, and the return value is shown in the tooltip,
	     * if it is a static string then displays that static string.
	     *
	     * Defaults to false
	     *
	     */
	    if ( typeof(colDef.cellTooltip) === 'undefined' || colDef.cellTooltip === false ) {
	      self.cellTooltip = false;
	    } else if ( colDef.cellTooltip === true ){
	      self.cellTooltip = function(row, col) {
	        return self.grid.getCellValue( row, col );
	      };
	    } else if (typeof(colDef.cellTooltip) === 'function' ){
	      self.cellTooltip = colDef.cellTooltip;
	    } else {
	      self.cellTooltip = function ( row, col ){
	        return col.colDef.cellTooltip;
	      };
	    }

	    /**
	     * @ngdoc property
	     * @name headerTooltip
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description Whether or not to show a tooltip when a user hovers over the header cell.
	     * If set to false, no tooltip.  If true, the displayName is shown in the tooltip (useful
	     * if you have long values in your headers), if a function then that function is called
	     * passing in the row and the col `headerTooltip( col )`, and the return value is shown in the tooltip,
	     * if a static string then shows that static string.
	     *
	     * Defaults to false
	     *
	     */
	    if ( typeof(colDef.headerTooltip) === 'undefined' || colDef.headerTooltip === false ) {
	      self.headerTooltip = false;
	    } else if ( colDef.headerTooltip === true ){
	      self.headerTooltip = function(col) {
	        return col.displayName;
	      };
	    } else if (typeof(colDef.headerTooltip) === 'function' ){
	      self.headerTooltip = colDef.headerTooltip;
	    } else {
	      self.headerTooltip = function ( col ) {
	        return col.colDef.headerTooltip;
	      };
	    }


	    /**
	     * @ngdoc property
	     * @name footerCellClass
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description footerCellClass can be a string specifying the class to append to a cell
	     * or it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name
	     *
	     */
	    self.footerCellClass = colDef.footerCellClass;

	    /**
	     * @ngdoc property
	     * @name cellClass
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description cellClass can be a string specifying the class to append to a cell
	     * or it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name
	     *
	     */
	    self.cellClass = colDef.cellClass;

	    /**
	     * @ngdoc property
	     * @name headerCellClass
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description headerCellClass can be a string specifying the class to append to a cell
	     * or it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name
	     *
	     */
	    self.headerCellClass = colDef.headerCellClass;

	    /**
	     * @ngdoc property
	     * @name cellFilter
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description cellFilter is a filter to apply to the content of each cell
	     * @example
	     * <pre>
	     *   gridOptions.columnDefs[0].cellFilter = 'date'
	     *
	     */
	    self.cellFilter = colDef.cellFilter ? colDef.cellFilter : "";

	    /**
	     * @ngdoc boolean
	     * @name sortCellFiltered
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description (optional) False by default. When `true` uiGrid will apply the cellFilter before
	     * sorting the data. Note that when using this option uiGrid will assume that the displayed value is
	     * a string, and use the {@link ui.grid.class:RowSorter#sortAlpha sortAlpha} `sortFn`. It is possible
	     * to return a non-string value from an angularjs filter, in which case you should define a {@link ui.grid.class:GridOptions.columnDef#sortingAlgorithm sortingAlgorithm}
	     * for the column which hanldes the returned type. You may specify one of the `sortingAlgorithms`
	     * found in the {@link ui.grid.RowSorter rowSorter} service.
	     */
	    self.sortCellFiltered = colDef.sortCellFiltered ? true : false;

	    /**
	     * @ngdoc boolean
	     * @name filterCellFiltered
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description (optional) False by default. When `true` uiGrid will apply the cellFilter before
	     * applying "search" `filters`.
	     */
	    self.filterCellFiltered = colDef.filterCellFiltered ? true : false;

	    /**
	     * @ngdoc property
	     * @name headerCellFilter
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description headerCellFilter is a filter to apply to the content of the column header
	     * @example
	     * <pre>
	     *   gridOptions.columnDefs[0].headerCellFilter = 'translate'
	     *
	     */
	    self.headerCellFilter = colDef.headerCellFilter ? colDef.headerCellFilter : "";

	    /**
	     * @ngdoc property
	     * @name footerCellFilter
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description footerCellFilter is a filter to apply to the content of the column footer
	     * @example
	     * <pre>
	     *   gridOptions.columnDefs[0].footerCellFilter = 'date'
	     *
	     */
	    self.footerCellFilter = colDef.footerCellFilter ? colDef.footerCellFilter : "";

	    self.visible = gridUtil.isNullOrUndefined(colDef.visible) || colDef.visible;

	    self.headerClass = colDef.headerClass;
	    //self.cursor = self.sortable ? 'pointer' : 'default';

	    // Turn on sorting by default
	    self.enableSorting = typeof(colDef.enableSorting) !== 'undefined' ? colDef.enableSorting : true;
	    self.sortingAlgorithm = colDef.sortingAlgorithm;

	    /**
	     * @ngdoc property
	     * @name sortDirectionCycle
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description (optional) An array of {@link ui.grid.service:uiGridConstants#properties_ASC sort directions},
	     * specifying the order that they should cycle through as the user repeatedly clicks on the column heading.
	     * The default is `[null, uiGridConstants.ASC, uiGridConstants.DESC]`. Null
	     * refers to the unsorted state. This does not affect the initial sort
	     * direction; use the {@link ui.grid.class:GridOptions.columnDef#sort sort}
	     * property for that. If
	     * {@link ui.grid.class:GridOptions.columnDef#suppressRemoveSort suppressRemoveSort}
	     * is also set, the unsorted state will be skipped even if it is listed here.
	     * Each direction may not appear in the list more than once (e.g. `[ASC,
	     * DESC, DESC]` is not allowed), and the list may not be empty.
	     */
	    self.sortDirectionCycle = typeof(colDef.sortDirectionCycle) !== 'undefined' ?
	      colDef.sortDirectionCycle :
	      [null, uiGridConstants.ASC, uiGridConstants.DESC];

	    /**
	     * @ngdoc boolean
	     * @name suppressRemoveSort
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description (optional) False by default. When enabled, this setting hides the removeSort option
	     * in the menu, and prevents users from manually removing the sort
	     */
	    if ( typeof(self.suppressRemoveSort) === 'undefined'){
	      self.suppressRemoveSort = typeof(colDef.suppressRemoveSort) !== 'undefined' ? colDef.suppressRemoveSort : false;
	    }

	    /**
	     * @ngdoc property
	     * @name enableFiltering
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description turn off filtering for an individual column, where
	     * you've turned on filtering for the overall grid
	     * @example
	     * <pre>
	     *   gridOptions.columnDefs[0].enableFiltering = false;
	     *
	     */
	    // Turn on filtering by default (it's disabled by default at the Grid level)
	    self.enableFiltering = typeof(colDef.enableFiltering) !== 'undefined' ? colDef.enableFiltering : true;

	    // self.menuItems = colDef.menuItems;
	    self.setPropertyOrDefault(colDef, 'menuItems', []);

	    // Use the column definition sort if we were passed it, but only if this is a newly added column
	    if ( isNew ){
	      self.setPropertyOrDefault(colDef, 'sort');
	    }

	    // Set up default filters array for when one is not provided.
	    //   In other words, this (in column def):
	    //
	    //       filter: { term: 'something', flags: {}, condition: [CONDITION] }
	    //
	    //   is just shorthand for this:
	    //
	    //       filters: [{ term: 'something', flags: {}, condition: [CONDITION] }]
	    //
	    var defaultFilters = [];
	    if (colDef.filter) {
	      defaultFilters.push(colDef.filter);
	    }
	    else if ( colDef.filters ){
	      defaultFilters = colDef.filters;
	    } else {
	      // Add an empty filter definition object, which will
	      // translate to a guessed condition and no pre-populated
	      // value for the filter <input>.
	      defaultFilters.push({});
	    }

	    /**
	     * @ngdoc property
	     * @name filter
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description Specify a single filter field on this column.
	     *
	     * A filter consists of a condition, a term, and a placeholder:
	     *
	     * - condition defines how rows are chosen as matching the filter term. This can be set to
	     * one of the constants in {@link ui.grid.service:uiGridConstants#properties_filter uiGridConstants.filter},
	     * or you can supply a custom filter function
	     * that gets passed the following arguments: [searchTerm, cellValue, row, column].
	     * - term: If set, the filter field will be pre-populated
	     * with this value.
	     * - placeholder: String that will be set to the `<input>.placeholder` attribute.
	     * - ariaLabel: String that will be set to the `<input>.ariaLabel` attribute. This is what is read as a label to screen reader users.
	     * - noTerm: set this to true if you have defined a custom function in condition, and
	     * your custom function doesn't require a term (so it can run even when the term is null)
	     * - rawTerm: set this to true if you have defined a custom function in condition, and
	     * your custom function requires access to the raw unmodified search term that was entered
	     * - flags: only flag currently available is `caseSensitive`, set to false if you don't want
	     * case sensitive matching
	     * - type: defaults to {@link ui.grid.service:uiGridConstants#properties_filter uiGridConstants.filter.INPUT},
	     * which gives a text box.  If set to {@link ui.grid.service:uiGridConstants#properties_filter uiGridConstants.filter.SELECT}
	     * then a select box will be shown with options selectOptions
	     * - selectOptions: options in the format `[ { value: 1, label: 'male' }]`.  No i18n filter is provided, you need
	     * to perform the i18n on the values before you provide them
	     * - disableCancelFilterButton: defaults to false. If set to true then the 'x' button that cancels/clears the filter
	     * will not be shown.
	     * @example
	     * <pre>$scope.gridOptions.columnDefs = [
	     *   {
	     *     field: 'field1',
	     *     filter: {
	     *       term: 'xx',
	     *       condition: uiGridConstants.filter.STARTS_WITH,
	     *       placeholder: 'starts with...',
	     *       ariaLabel: 'Starts with filter for field1',
	     *       flags: { caseSensitive: false },
	     *       type: uiGridConstants.filter.SELECT,
	     *       selectOptions: [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ],
	     *       disableCancelFilterButton: true
	     *     }
	     *   }
	     * ]; </pre>
	     *
	     */

	    /*


	    /*

	      self.filters = [
	        {
	          term: 'search term'
	          condition: uiGridConstants.filter.CONTAINS,
	          placeholder: 'my placeholder',
	          ariaLabel: 'Starts with filter for field1',
	          flags: {
	            caseSensitive: true
	          }
	        }
	      ]

	    */

	    // Only set filter if this is a newly added column, if we're updating an existing
	    // column then we don't want to put the default filter back if the user may have already
	    // removed it.
	    // However, we do want to keep the settings if they change, just not the term
	    if ( isNew ) {
	      self.setPropertyOrDefault(colDef, 'filter');
	      self.setPropertyOrDefault(colDef, 'filters', defaultFilters);
	    } else if ( self.filters.length === defaultFilters.length ) {
	      self.filters.forEach( function( filter, index ){
	        if (typeof(defaultFilters[index].placeholder) !== 'undefined') {
	          filter.placeholder = defaultFilters[index].placeholder;
	        }
	        if (typeof(defaultFilters[index].ariaLabel) !== 'undefined') {
	          filter.ariaLabel = defaultFilters[index].ariaLabel;
	        }
	        if (typeof(defaultFilters[index].flags) !== 'undefined') {
	          filter.flags = defaultFilters[index].flags;
	        }
	        if (typeof(defaultFilters[index].type) !== 'undefined') {
	          filter.type = defaultFilters[index].type;
	        }
	        if (typeof(defaultFilters[index].selectOptions) !== 'undefined') {
	          filter.selectOptions = defaultFilters[index].selectOptions;
	        }
	      });
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name unsort
	   * @methodOf ui.grid.class:GridColumn
	   * @description Removes column from the grid sorting
	   */
	  GridColumn.prototype.unsort = function () {
	    this.sort = {};
	    this.grid.api.core.raise.sortChanged( this.grid, this.grid.getColumnSorting() );
	  };


	  /**
	   * @ngdoc function
	   * @name getColClass
	   * @methodOf ui.grid.class:GridColumn
	   * @description Returns the class name for the column
	   * @param {bool} prefixDot  if true, will return .className instead of className
	   */
	  GridColumn.prototype.getColClass = function (prefixDot) {
	    var cls = uiGridConstants.COL_CLASS_PREFIX + this.uid;

	    return prefixDot ? '.' + cls : cls;
	  };

	    /**
	     * @ngdoc function
	     * @name isPinnedLeft
	     * @methodOf ui.grid.class:GridColumn
	     * @description Returns true if column is in the left render container
	     */
	    GridColumn.prototype.isPinnedLeft = function () {
	      return this.renderContainer === 'left';
	    };

	    /**
	     * @ngdoc function
	     * @name isPinnedRight
	     * @methodOf ui.grid.class:GridColumn
	     * @description Returns true if column is in the right render container
	     */
	    GridColumn.prototype.isPinnedRight = function () {
	      return this.renderContainer === 'right';
	    };


	    /**
	   * @ngdoc function
	   * @name getColClassDefinition
	   * @methodOf ui.grid.class:GridColumn
	   * @description Returns the class definition for th column
	   */
	  GridColumn.prototype.getColClassDefinition = function () {
	    return ' .grid' + this.grid.id + ' ' + this.getColClass(true) + ' { min-width: ' + this.drawnWidth + 'px; max-width: ' + this.drawnWidth + 'px; }';
	  };

	  /**
	   * @ngdoc function
	   * @name getRenderContainer
	   * @methodOf ui.grid.class:GridColumn
	   * @description Returns the render container object that this column belongs to.
	   *
	   * Columns will be default be in the `body` render container if they aren't allocated to one specifically.
	   */
	  GridColumn.prototype.getRenderContainer = function getRenderContainer() {
	    var self = this;

	    var containerId = self.renderContainer;

	    if (containerId === null || containerId === '' || containerId === undefined) {
	      containerId = 'body';
	    }

	    return self.grid.renderContainers[containerId];
	  };

	  /**
	   * @ngdoc function
	   * @name showColumn
	   * @methodOf ui.grid.class:GridColumn
	   * @description Makes the column visible by setting colDef.visible = true
	   */
	  GridColumn.prototype.showColumn = function() {
	      this.colDef.visible = true;
	  };


	  /**
	   * @ngdoc property
	   * @name aggregationHideLabel
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description defaults to false, if set to true hides the label text
	   * in the aggregation footer, so only the value is displayed.
	   *
	   */
	  /**
	   * @ngdoc function
	   * @name getAggregationText
	   * @methodOf ui.grid.class:GridColumn
	   * @description Gets the aggregation label from colDef.aggregationLabel if
	   * specified or by using i18n, including deciding whether or not to display
	   * based on colDef.aggregationHideLabel.
	   *
	   * @param {string} label the i18n lookup value to use for the column label
	   *
	   */
	  GridColumn.prototype.getAggregationText = function () {
	    var self = this;
	    if ( self.colDef.aggregationHideLabel ){
	      return '';
	    }
	    else if ( self.colDef.aggregationLabel ) {
	      return self.colDef.aggregationLabel;
	    }
	    else {
	      switch ( self.colDef.aggregationType ){
	        case uiGridConstants.aggregationTypes.count:
	          return i18nService.getSafeText('aggregation.count');
	        case uiGridConstants.aggregationTypes.sum:
	          return i18nService.getSafeText('aggregation.sum');
	        case uiGridConstants.aggregationTypes.avg:
	          return i18nService.getSafeText('aggregation.avg');
	        case uiGridConstants.aggregationTypes.min:
	          return i18nService.getSafeText('aggregation.min');
	        case uiGridConstants.aggregationTypes.max:
	          return i18nService.getSafeText('aggregation.max');
	        default:
	          return '';
	      }
	    }
	  };

	  GridColumn.prototype.getCellTemplate = function () {
	    var self = this;

	    return self.cellTemplatePromise;
	  };

	  GridColumn.prototype.getCompiledElementFn = function () {
	    var self = this;

	    return self.compiledElementFnDefer.promise;
	  };

	  return GridColumn;
	}]);

	})();

	  (function(){

	angular.module('ui.grid')
	.factory('GridOptions', ['gridUtil','uiGridConstants', function(gridUtil,uiGridConstants) {

	  /**
	   * @ngdoc function
	   * @name ui.grid.class:GridOptions
	   * @description Default GridOptions class.  GridOptions are defined by the application developer and overlaid
	   * over this object.  Setting gridOptions within your controller is the most common method for an application
	   * developer to configure the behaviour of their ui-grid
	   *
	   * @example To define your gridOptions within your controller:
	   * <pre>$scope.gridOptions = {
	   *   data: $scope.myData,
	   *   columnDefs: [
	   *     { name: 'field1', displayName: 'pretty display name' },
	   *     { name: 'field2', visible: false }
	   *  ]
	   * };</pre>
	   *
	   * You can then use this within your html template, when you define your grid:
	   * <pre>&lt;div ui-grid="gridOptions"&gt;&lt;/div&gt;</pre>
	   *
	   * To provide default options for all of the grids within your application, use an angular
	   * decorator to modify the GridOptions factory.
	   * <pre>
	   * app.config(function($provide){
	   *   $provide.decorator('GridOptions',function($delegate){
	   *     var gridOptions;
	   *     gridOptions = angular.copy($delegate);
	   *     gridOptions.initialize = function(options) {
	   *       var initOptions;
	   *       initOptions = $delegate.initialize(options);
	   *       initOptions.enableColumnMenus = false;
	   *       return initOptions;
	   *     };
	   *     return gridOptions;
	   *   });
	   * });
	   * </pre>
	   */
	  return {
	    initialize: function( baseOptions ){
	      /**
	       * @ngdoc function
	       * @name onRegisterApi
	       * @propertyOf ui.grid.class:GridOptions
	       * @description A callback that returns the gridApi once the grid is instantiated, which is
	       * then used to interact with the grid programatically.
	       *
	       * Note that the gridApi.core.renderingComplete event is identical to this
	       * callback, but has the advantage that it can be called from multiple places
	       * if needed
	       *
	       * @example
	       * <pre>
	       *   $scope.gridOptions.onRegisterApi = function ( gridApi ) {
	       *     $scope.gridApi = gridApi;
	       *     $scope.gridApi.selection.selectAllRows( $scope.gridApi.grid );
	       *   };
	       * </pre>
	       *
	       */
	      baseOptions.onRegisterApi = baseOptions.onRegisterApi || angular.noop();

	      /**
	       * @ngdoc object
	       * @name data
	       * @propertyOf ui.grid.class:GridOptions
	       * @description (mandatory) Array of data to be rendered into the grid, providing the data source or data binding for
	       * the grid.
	       *
	       * Most commonly the data is an array of objects, where each object has a number of attributes.
	       * Each attribute automatically becomes a column in your grid.  This array could, for example, be sourced from
	       * an angularJS $resource query request.  The array can also contain complex objects, refer the binding tutorial
	       * for examples of that.
	       *
	       * The most flexible usage is to set your data on $scope:
	       *
	       * `$scope.data = data;`
	       *
	       * And then direct the grid to resolve whatever is in $scope.data:
	       *
	       * `$scope.gridOptions.data = 'data';`
	       *
	       * This is the most flexible approach as it allows you to replace $scope.data whenever you feel like it without
	       * getting pointer issues.
	       *
	       * Alternatively you can directly set the data array:
	       *
	       * `$scope.gridOptions.data = [ ];`
	       * or
	       *
	       * `$http.get('/data/100.json')
	       * .success(function(data) {
	       *   $scope.myData = data;
	       *   $scope.gridOptions.data = $scope.myData;
	       *  });`
	       *
	       * Where you do this, you need to take care in updating the data - you can't just update `$scope.myData` to some other
	       * array, you need to update $scope.gridOptions.data to point to that new array as well.
	       *
	       */
	      baseOptions.data = baseOptions.data || [];

	      /**
	       * @ngdoc array
	       * @name columnDefs
	       * @propertyOf  ui.grid.class:GridOptions
	       * @description Array of columnDef objects.  Only required property is name.
	       * The individual options available in columnDefs are documented in the
	       * {@link ui.grid.class:GridOptions.columnDef columnDef} section
	       * </br>_field property can be used in place of name for backwards compatibility with 2.x_
	       *  @example
	       *
	       * <pre>var columnDefs = [{name:'field1'}, {name:'field2'}];</pre>
	       *
	       */
	      baseOptions.columnDefs = baseOptions.columnDefs || [];

	      /**
	       * @ngdoc object
	       * @name ui.grid.class:GridOptions.columnDef
	       * @description Definition / configuration of an individual column, which would typically be
	       * one of many column definitions within the gridOptions.columnDefs array
	       * @example
	       * <pre>{name:'field1', field: 'field1', filter: { term: 'xxx' }}</pre>
	       *
	       */


	      /**
	       * @ngdoc array
	       * @name excludeProperties
	       * @propertyOf  ui.grid.class:GridOptions
	       * @description Array of property names in data to ignore when auto-generating column names.  Provides the
	       * inverse of columnDefs - columnDefs is a list of columns to include, excludeProperties is a list of columns
	       * to exclude.
	       *
	       * If columnDefs is defined, this will be ignored.
	       *
	       * Defaults to ['$$hashKey']
	       */

	      baseOptions.excludeProperties = baseOptions.excludeProperties || ['$$hashKey'];

	      /**
	       * @ngdoc boolean
	       * @name enableRowHashing
	       * @propertyOf ui.grid.class:GridOptions
	       * @description True by default. When enabled, this setting allows uiGrid to add
	       * `$$hashKey`-type properties (similar to Angular) to elements in the `data` array. This allows
	       * the grid to maintain state while vastly speeding up the process of altering `data` by adding/moving/removing rows.
	       *
	       * Note that this DOES add properties to your data that you may not want, but they are stripped out when using `angular.toJson()`. IF
	       * you do not want this at all you can disable this setting but you will take a performance hit if you are using large numbers of rows
	       * and are altering the data set often.
	       */
	      baseOptions.enableRowHashing = baseOptions.enableRowHashing !== false;

	      /**
	       * @ngdoc function
	       * @name rowIdentity
	       * @methodOf ui.grid.class:GridOptions
	       * @description This function is used to get and, if necessary, set the value uniquely identifying this row (i.e. if an identity is not present it will set one).
	       *
	       * By default it returns the `$$hashKey` property if it exists. If it doesn't it uses gridUtil.nextUid() to generate one
	       */
	      baseOptions.rowIdentity = baseOptions.rowIdentity || function rowIdentity(row) {
	        return gridUtil.hashKey(row);
	      };

	      /**
	       * @ngdoc function
	       * @name getRowIdentity
	       * @methodOf ui.grid.class:GridOptions
	       * @description This function returns the identity value uniquely identifying this row, if one is not present it does not set it.
	       *
	       * By default it returns the `$$hashKey` property but can be overridden to use any property or set of properties you want.
	       */
	      baseOptions.getRowIdentity = baseOptions.getRowIdentity || function getRowIdentity(row) {
	        return row.$$hashKey;
	      };

	      /**
	       * @ngdoc property
	       * @name flatEntityAccess
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Set to true if your columns are all related directly to fields in a flat object structure - i.e.
	       * each of your columns associate directly with a property on each of the entities in your data array.
	       *
	       * In that situation we can avoid all the logic associated with complex binding to functions or to properties of sub-objects,
	       * which can provide a significant speed improvement with large data sets when filtering or sorting.
	       *
	       * By default false
	       */
	      baseOptions.flatEntityAccess = baseOptions.flatEntityAccess === true;

	      /**
	       * @ngdoc property
	       * @name showHeader
	       * @propertyOf ui.grid.class:GridOptions
	       * @description True by default. When set to false, this setting will replace the
	       * standard header template with '<div></div>', resulting in no header being shown.
	       */
	      baseOptions.showHeader = typeof(baseOptions.showHeader) !== "undefined" ? baseOptions.showHeader : true;

	      /* (NOTE): Don't show this in the docs. We only use it internally
	       * @ngdoc property
	       * @name headerRowHeight
	       * @propertyOf ui.grid.class:GridOptions
	       * @description The height of the header in pixels, defaults to 30
	       *
	       */
	      if (!baseOptions.showHeader) {
	        baseOptions.headerRowHeight = 0;
	      }
	      else {
	        baseOptions.headerRowHeight = typeof(baseOptions.headerRowHeight) !== "undefined" ? baseOptions.headerRowHeight : 30;
	      }

	      /**
	       * @ngdoc property
	       * @name rowHeight
	       * @propertyOf ui.grid.class:GridOptions
	       * @description The height of the row in pixels, defaults to 30
	       *
	       */
	      baseOptions.rowHeight = baseOptions.rowHeight || 30;

	      /**
	       * @ngdoc integer
	       * @name minRowsToShow
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Minimum number of rows to show when the grid doesn't have a defined height. Defaults to "10".
	       */
	      baseOptions.minRowsToShow = typeof(baseOptions.minRowsToShow) !== "undefined" ? baseOptions.minRowsToShow : 10;

	      /**
	       * @ngdoc property
	       * @name showGridFooter
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Whether or not to show the footer, defaults to false
	       * The footer display Total Rows and Visible Rows (filtered rows)
	       */
	      baseOptions.showGridFooter = baseOptions.showGridFooter === true;

	      /**
	       * @ngdoc property
	       * @name showColumnFooter
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Whether or not to show the column footer, defaults to false
	       * The column footer displays column aggregates
	       */
	      baseOptions.showColumnFooter = baseOptions.showColumnFooter === true;

	      /**
	       * @ngdoc property
	       * @name columnFooterHeight
	       * @propertyOf ui.grid.class:GridOptions
	       * @description The height of the footer rows (column footer and grid footer) in pixels
	       *
	       */
	      baseOptions.columnFooterHeight = typeof(baseOptions.columnFooterHeight) !== "undefined" ? baseOptions.columnFooterHeight : 30;
	      baseOptions.gridFooterHeight = typeof(baseOptions.gridFooterHeight) !== "undefined" ? baseOptions.gridFooterHeight : 30;

	      baseOptions.columnWidth = typeof(baseOptions.columnWidth) !== "undefined" ? baseOptions.columnWidth : 50;

	      /**
	       * @ngdoc property
	       * @name maxVisibleColumnCount
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Defaults to 200
	       *
	       */
	      baseOptions.maxVisibleColumnCount = typeof(baseOptions.maxVisibleColumnCount) !== "undefined" ? baseOptions.maxVisibleColumnCount : 200;

	      /**
	       * @ngdoc property
	       * @name virtualizationThreshold
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Turn virtualization on when number of data elements goes over this number, defaults to 20
	       */
	      baseOptions.virtualizationThreshold = typeof(baseOptions.virtualizationThreshold) !== "undefined" ? baseOptions.virtualizationThreshold : 20;

	      /**
	       * @ngdoc property
	       * @name columnVirtualizationThreshold
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Turn virtualization on when number of columns goes over this number, defaults to 10
	       */
	      baseOptions.columnVirtualizationThreshold = typeof(baseOptions.columnVirtualizationThreshold) !== "undefined" ? baseOptions.columnVirtualizationThreshold : 10;

	      /**
	       * @ngdoc property
	       * @name excessRows
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Extra rows to to render outside of the viewport, which helps with smoothness of scrolling.
	       * Defaults to 4
	       */
	      baseOptions.excessRows = typeof(baseOptions.excessRows) !== "undefined" ? baseOptions.excessRows : 4;
	      /**
	       * @ngdoc property
	       * @name scrollThreshold
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Defaults to 4
	       */
	      baseOptions.scrollThreshold = typeof(baseOptions.scrollThreshold) !== "undefined" ? baseOptions.scrollThreshold : 4;

	      /**
	       * @ngdoc property
	       * @name excessColumns
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Extra columns to to render outside of the viewport, which helps with smoothness of scrolling.
	       * Defaults to 4
	       */
	      baseOptions.excessColumns = typeof(baseOptions.excessColumns) !== "undefined" ? baseOptions.excessColumns : 4;
	      /**
	       * @ngdoc property
	       * @name horizontalScrollThreshold
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Defaults to 4
	       */
	      baseOptions.horizontalScrollThreshold = typeof(baseOptions.horizontalScrollThreshold) !== "undefined" ? baseOptions.horizontalScrollThreshold : 2;


	      /**
	       * @ngdoc property
	       * @name aggregationCalcThrottle
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Default time in milliseconds to throttle aggregation calcuations, defaults to 500ms
	       */
	      baseOptions.aggregationCalcThrottle = typeof(baseOptions.aggregationCalcThrottle) !== "undefined" ? baseOptions.aggregationCalcThrottle : 500;

	      /**
	       * @ngdoc property
	       * @name wheelScrollThrottle
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Default time in milliseconds to throttle scroll events to, defaults to 70ms
	       */
	      baseOptions.wheelScrollThrottle = typeof(baseOptions.wheelScrollThrottle) !== "undefined" ? baseOptions.wheelScrollThrottle : 70;


	      /**
	       * @ngdoc property
	       * @name scrollDebounce
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Default time in milliseconds to debounce scroll events, defaults to 300ms
	       */
	      baseOptions.scrollDebounce = typeof(baseOptions.scrollDebounce) !== "undefined" ? baseOptions.scrollDebounce : 300;

	      /**
	       * @ngdoc boolean
	       * @name enableSorting
	       * @propertyOf ui.grid.class:GridOptions
	       * @description True by default. When enabled, this setting adds sort
	       * widgets to the column headers, allowing sorting of the data for the entire grid.
	       * Sorting can then be disabled on individual columns using the columnDefs.
	       */
	      baseOptions.enableSorting = baseOptions.enableSorting !== false;

	      /**
	       * @ngdoc boolean
	       * @name enableFiltering
	       * @propertyOf ui.grid.class:GridOptions
	       * @description False by default. When enabled, this setting adds filter
	       * boxes to each column header, allowing filtering within the column for the entire grid.
	       * Filtering can then be disabled on individual columns using the columnDefs.
	       */
	      baseOptions.enableFiltering = baseOptions.enableFiltering === true;

	      /**
	       * @ngdoc boolean
	       * @name enableColumnMenus
	       * @propertyOf ui.grid.class:GridOptions
	       * @description True by default. When enabled, this setting displays a column
	       * menu within each column.
	       */
	      baseOptions.enableColumnMenus = baseOptions.enableColumnMenus !== false;

	      /**
	       * @ngdoc boolean
	       * @name enableVerticalScrollbar
	       * @propertyOf ui.grid.class:GridOptions
	       * @description {@link ui.grid.service:uiGridConstants#properties_scrollbars uiGridConstants.scrollbars.ALWAYS} by default.
	       * This settings controls the vertical scrollbar for the grid.
	       * Supported values: uiGridConstants.scrollbars.ALWAYS, uiGridConstants.scrollbars.NEVER
	       */
	      baseOptions.enableVerticalScrollbar = typeof(baseOptions.enableVerticalScrollbar) !== "undefined" ? baseOptions.enableVerticalScrollbar : uiGridConstants.scrollbars.ALWAYS;

	      /**
	       * @ngdoc boolean
	       * @name enableHorizontalScrollbar
	       * @propertyOf ui.grid.class:GridOptions
	       * @description {@link ui.grid.service:uiGridConstants#properties_scrollbars uiGridConstants.scrollbars.ALWAYS} by default.
	       * This settings controls the horizontal scrollbar for the grid.
	       * Supported values: uiGridConstants.scrollbars.ALWAYS, uiGridConstants.scrollbars.NEVER
	       */
	      baseOptions.enableHorizontalScrollbar = typeof(baseOptions.enableHorizontalScrollbar) !== "undefined" ? baseOptions.enableHorizontalScrollbar : uiGridConstants.scrollbars.ALWAYS;

	      /**
	       * @ngdoc boolean
	       * @name enableMinHeightCheck
	       * @propertyOf ui.grid.class:GridOptions
	       * @description True by default. When enabled, a newly initialized grid will check to see if it is tall enough to display
	       * at least one row of data.  If the grid is not tall enough, it will resize the DOM element to display minRowsToShow number
	       * of rows.
	       */
	       baseOptions.enableMinHeightCheck = baseOptions.enableMinHeightCheck !== false;

	      /**
	       * @ngdoc boolean
	       * @name minimumColumnSize
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Columns can't be smaller than this, defaults to 10 pixels
	       */
	      baseOptions.minimumColumnSize = typeof(baseOptions.minimumColumnSize) !== "undefined" ? baseOptions.minimumColumnSize : 10;

	      /**
	       * @ngdoc function
	       * @name rowEquality
	       * @methodOf ui.grid.class:GridOptions
	       * @description By default, rows are compared using object equality.  This option can be overridden
	       * to compare on any data item property or function
	       * @param {object} entityA First Data Item to compare
	       * @param {object} entityB Second Data Item to compare
	       */
	      baseOptions.rowEquality = baseOptions.rowEquality || function(entityA, entityB) {
	        return entityA === entityB;
	      };

	      /**
	       * @ngdoc string
	       * @name headerTemplate
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Null by default. When provided, this setting uses a custom header
	       * template, rather than the default template. Can be set to either the name of a template file:
	       * <pre>  $scope.gridOptions.headerTemplate = 'header_template.html';</pre>
	       * inline html
	       * <pre>  $scope.gridOptions.headerTemplate = '<div class="ui-grid-top-panel" style="text-align: center">I am a Custom Grid Header</div>'</pre>
	       * or the id of a precompiled template (TBD how to use this).
	       * </br>Refer to the custom header tutorial for more information.
	       * If you want no header at all, you can set to an empty div:
	       * <pre>  $scope.gridOptions.headerTemplate = '<div></div>';</pre>
	       *
	       * If you want to only have a static header, then you can set to static content.  If
	       * you want to tailor the existing column headers, then you should look at the
	       * current 'ui-grid-header.html' template in github as your starting point.
	       *
	       */
	      baseOptions.headerTemplate = baseOptions.headerTemplate || null;

	      /**
	       * @ngdoc string
	       * @name footerTemplate
	       * @propertyOf ui.grid.class:GridOptions
	       * @description (optional) ui-grid/ui-grid-footer by default.  This footer shows the per-column
	       * aggregation totals.
	       * When provided, this setting uses a custom footer template. Can be set to either the name of a template file 'footer_template.html', inline html
	       * <pre>'<div class="ui-grid-bottom-panel" style="text-align: center">I am a Custom Grid Footer</div>'</pre>, or the id
	       * of a precompiled template (TBD how to use this).  Refer to the custom footer tutorial for more information.
	       */
	      baseOptions.footerTemplate = baseOptions.footerTemplate || 'ui-grid/ui-grid-footer';

	      /**
	       * @ngdoc string
	       * @name gridFooterTemplate
	       * @propertyOf ui.grid.class:GridOptions
	       * @description (optional) ui-grid/ui-grid-grid-footer by default. This template by default shows the
	       * total items at the bottom of the grid, and the selected items if selection is enabled.
	       */
	      baseOptions.gridFooterTemplate = baseOptions.gridFooterTemplate || 'ui-grid/ui-grid-grid-footer';

	      /**
	       * @ngdoc string
	       * @name rowTemplate
	       * @propertyOf ui.grid.class:GridOptions
	       * @description 'ui-grid/ui-grid-row' by default. When provided, this setting uses a
	       * custom row template.  Can be set to either the name of a template file:
	       * <pre> $scope.gridOptions.rowTemplate = 'row_template.html';</pre>
	       * inline html
	       * <pre>  $scope.gridOptions.rowTemplate = '<div style="background-color: aquamarine" ng-click="grid.appScope.fnOne(row)" ng-repeat="col in colContainer.renderedColumns track by col.colDef.name" class="ui-grid-cell" ui-grid-cell></div>';</pre>
	       * or the id of a precompiled template (TBD how to use this) can be provided.
	       * </br>Refer to the custom row template tutorial for more information.
	       */
	      baseOptions.rowTemplate = baseOptions.rowTemplate || 'ui-grid/ui-grid-row';

	      /**
	       * @ngdoc object
	       * @name appScopeProvider
	       * @propertyOf ui.grid.class:GridOptions
	       * @description by default, the parent scope of the ui-grid element will be assigned to grid.appScope
	       * this property allows you to assign any reference you want to grid.appScope
	       */
	      baseOptions.appScopeProvider = baseOptions.appScopeProvider || null;

	      return baseOptions;
	    }
	  };


	}]);

	})();

	(function(){

	angular.module('ui.grid')

	  /**
	   * @ngdoc function
	   * @name ui.grid.class:GridRenderContainer
	   * @description The grid has render containers, allowing the ability to have pinned columns.  If the grid
	   * is right-to-left then there may be a right render container, if left-to-right then there may
	   * be a left render container.  There is always a body render container.
	   * @param {string} name The name of the render container ('body', 'left', or 'right')
	   * @param {Grid} grid the grid the render container is in
	   * @param {object} options the render container options
	   */
	.factory('GridRenderContainer', ['gridUtil', 'uiGridConstants', function(gridUtil, uiGridConstants) {
	  function GridRenderContainer(name, grid, options) {
	    var self = this;

	    // if (gridUtil.type(grid) !== 'Grid') {
	    //   throw new Error('Grid argument is not a Grid object');
	    // }

	    self.name = name;

	    self.grid = grid;

	    // self.rowCache = [];
	    // self.columnCache = [];

	    self.visibleRowCache = [];
	    self.visibleColumnCache = [];

	    self.renderedRows = [];
	    self.renderedColumns = [];

	    self.prevScrollTop = 0;
	    self.prevScrolltopPercentage = 0;
	    self.prevRowScrollIndex = 0;

	    self.prevScrollLeft = 0;
	    self.prevScrollleftPercentage = 0;
	    self.prevColumnScrollIndex = 0;

	    self.columnStyles = "";

	    self.viewportAdjusters = [];

	    /**
	     *  @ngdoc boolean
	     *  @name hasHScrollbar
	     *  @propertyOf  ui.grid.class:GridRenderContainer
	     *  @description flag to signal that container has a horizontal scrollbar
	     */
	    self.hasHScrollbar = false;

	    /**
	     *  @ngdoc boolean
	     *  @name hasVScrollbar
	     *  @propertyOf  ui.grid.class:GridRenderContainer
	     *  @description flag to signal that container has a vertical scrollbar
	     */
	    self.hasVScrollbar = false;

	    /**
	     *  @ngdoc boolean
	     *  @name canvasHeightShouldUpdate
	     *  @propertyOf  ui.grid.class:GridRenderContainer
	     *  @description flag to signal that container should recalculate the canvas size
	     */
	    self.canvasHeightShouldUpdate = true;

	    /**
	     *  @ngdoc boolean
	     *  @name canvasHeight
	     *  @propertyOf  ui.grid.class:GridRenderContainer
	     *  @description last calculated canvas height value
	     */
	    self.$$canvasHeight = 0;

	    if (options && angular.isObject(options)) {
	      angular.extend(self, options);
	    }

	    grid.registerStyleComputation({
	      priority: 5,
	      func: function () {
	        self.updateColumnWidths();
	        return self.columnStyles;
	      }
	    });
	  }


	  GridRenderContainer.prototype.reset = function reset() {
	    // this.rowCache.length = 0;
	    // this.columnCache.length = 0;

	    this.visibleColumnCache.length = 0;
	    this.visibleRowCache.length = 0;

	    this.renderedRows.length = 0;
	    this.renderedColumns.length = 0;
	  };

	  // TODO(c0bra): calculate size?? Should this be in a stackable directive?


	  GridRenderContainer.prototype.containsColumn = function (col) {
	     return this.visibleColumnCache.indexOf(col) !== -1;
	  };

	  GridRenderContainer.prototype.minRowsToRender = function minRowsToRender() {
	    var self = this;
	    var minRows = 0;
	    var rowAddedHeight = 0;
	    var viewPortHeight = self.getViewportHeight();
	    for (var i = self.visibleRowCache.length - 1; rowAddedHeight < viewPortHeight && i >= 0; i--) {
	      rowAddedHeight += self.visibleRowCache[i].height;
	      minRows++;
	    }
	    return minRows;
	  };

	  GridRenderContainer.prototype.minColumnsToRender = function minColumnsToRender() {
	    var self = this;
	    var viewportWidth = this.getViewportWidth();

	    var min = 0;
	    var totalWidth = 0;
	    // self.columns.forEach(function(col, i) {
	    for (var i = 0; i < self.visibleColumnCache.length; i++) {
	      var col = self.visibleColumnCache[i];

	      if (totalWidth < viewportWidth) {
	        totalWidth += col.drawnWidth ? col.drawnWidth : 0;
	        min++;
	      }
	      else {
	        var currWidth = 0;
	        for (var j = i; j >= i - min; j--) {
	          currWidth += self.visibleColumnCache[j].drawnWidth ? self.visibleColumnCache[j].drawnWidth : 0;
	        }
	        if (currWidth < viewportWidth) {
	          min++;
	        }
	      }
	    }

	    return min;
	  };

	  GridRenderContainer.prototype.getVisibleRowCount = function getVisibleRowCount() {
	    return this.visibleRowCache.length;
	  };

	  /**
	   * @ngdoc function
	   * @name registerViewportAdjuster
	   * @methodOf ui.grid.class:GridRenderContainer
	   * @description Registers an adjuster to the render container's available width or height.  Adjusters are used
	   * to tell the render container that there is something else consuming space, and to adjust it's size
	   * appropriately.
	   * @param {function} func the adjuster function we want to register
	   */

	  GridRenderContainer.prototype.registerViewportAdjuster = function registerViewportAdjuster(func) {
	    this.viewportAdjusters.push(func);
	  };

	  /**
	   * @ngdoc function
	   * @name removeViewportAdjuster
	   * @methodOf ui.grid.class:GridRenderContainer
	   * @description Removes an adjuster, should be used when your element is destroyed
	   * @param {function} func the adjuster function we want to remove
	   */
	  GridRenderContainer.prototype.removeViewportAdjuster = function removeViewportAdjuster(func) {
	    var idx = this.viewportAdjusters.indexOf(func);

	    if (idx > -1) {
	      this.viewportAdjusters.splice(idx, 1);
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name getViewportAdjustment
	   * @methodOf ui.grid.class:GridRenderContainer
	   * @description Gets the adjustment based on the viewportAdjusters.
	   * @returns {object} a hash of { height: x, width: y }.  Usually the values will be negative
	   */
	  GridRenderContainer.prototype.getViewportAdjustment = function getViewportAdjustment() {
	    var self = this;

	    var adjustment = { height: 0, width: 0 };

	    self.viewportAdjusters.forEach(function (func) {
	      adjustment = func.call(this, adjustment);
	    });

	    return adjustment;
	  };

	  GridRenderContainer.prototype.getMargin = function getMargin(side) {
	    var self = this;

	    var amount = 0;

	    self.viewportAdjusters.forEach(function (func) {
	      var adjustment = func.call(this, { height: 0, width: 0 });

	      if (adjustment.side && adjustment.side === side) {
	        amount += adjustment.width * -1;
	      }
	    });

	    return amount;
	  };

	  GridRenderContainer.prototype.getViewportHeight = function getViewportHeight() {
	    var self = this;

	    var headerHeight = (self.headerHeight) ? self.headerHeight : self.grid.headerHeight;

	    var viewPortHeight = self.grid.gridHeight - headerHeight - self.grid.footerHeight;


	    var adjustment = self.getViewportAdjustment();

	    viewPortHeight = viewPortHeight + adjustment.height;

	    return viewPortHeight;
	  };

	  GridRenderContainer.prototype.getViewportWidth = function getViewportWidth() {
	    var self = this;

	    var viewportWidth = self.grid.gridWidth;

	    //if (typeof(self.grid.verticalScrollbarWidth) !== 'undefined' && self.grid.verticalScrollbarWidth !== undefined && self.grid.verticalScrollbarWidth > 0) {
	    //  viewPortWidth = viewPortWidth - self.grid.verticalScrollbarWidth;
	    //}

	    // var viewportWidth = 0;\
	    // self.visibleColumnCache.forEach(function (column) {
	    //   viewportWidth += column.drawnWidth;
	    // });

	    var adjustment = self.getViewportAdjustment();

	    viewportWidth = viewportWidth + adjustment.width;

	    return viewportWidth;
	  };

	  GridRenderContainer.prototype.getHeaderViewportWidth = function getHeaderViewportWidth() {
	    var self = this;

	    var viewportWidth = this.getViewportWidth();

	    //if (typeof(self.grid.verticalScrollbarWidth) !== 'undefined' && self.grid.verticalScrollbarWidth !== undefined && self.grid.verticalScrollbarWidth > 0) {
	    //  viewPortWidth = viewPortWidth + self.grid.verticalScrollbarWidth;
	    //}

	    // var adjustment = self.getViewportAdjustment();
	    // viewPortWidth = viewPortWidth + adjustment.width;

	    return viewportWidth;
	  };


	  /**
	   * @ngdoc function
	   * @name getCanvasHeight
	   * @methodOf ui.grid.class:GridRenderContainer
	   * @description Returns the total canvas height.   Only recalculates if canvasHeightShouldUpdate = false
	   * @returns {number} total height of all the visible rows in the container
	   */
	  GridRenderContainer.prototype.getCanvasHeight = function getCanvasHeight() {
	    var self = this;

	    if (!self.canvasHeightShouldUpdate) {
	      return self.$$canvasHeight;
	    }

	    var oldCanvasHeight = self.$$canvasHeight;

	    self.$$canvasHeight =  0;

	    self.visibleRowCache.forEach(function(row){
	      self.$$canvasHeight += row.height;
	    });


	    self.canvasHeightShouldUpdate = false;

	    self.grid.api.core.raise.canvasHeightChanged(oldCanvasHeight, self.$$canvasHeight);

	    return self.$$canvasHeight;
	  };

	  GridRenderContainer.prototype.getVerticalScrollLength = function getVerticalScrollLength() {
	    return this.getCanvasHeight() - this.getViewportHeight() + this.grid.scrollbarHeight;
	  };

	  GridRenderContainer.prototype.getHorizontalScrollLength = function getHorizontalScrollLength() {
	    return this.getCanvasWidth() - this.getViewportWidth() + this.grid.scrollbarWidth;
	  };

	  GridRenderContainer.prototype.getCanvasWidth = function getCanvasWidth() {
	    var self = this;

	    var ret = self.canvasWidth;

	    return ret;
	  };

	  GridRenderContainer.prototype.setRenderedRows = function setRenderedRows(newRows) {
	    this.renderedRows.length = newRows.length;
	    for (var i = 0; i < newRows.length; i++) {
	      this.renderedRows[i] = newRows[i];
	    }
	  };

	  GridRenderContainer.prototype.setRenderedColumns = function setRenderedColumns(newColumns) {
	    var self = this;

	    // OLD:
	    this.renderedColumns.length = newColumns.length;
	    for (var i = 0; i < newColumns.length; i++) {
	      this.renderedColumns[i] = newColumns[i];
	    }

	    this.updateColumnOffset();
	  };

	  GridRenderContainer.prototype.updateColumnOffset = function updateColumnOffset() {
	    // Calculate the width of the columns on the left side that are no longer rendered.
	    //  That will be the offset for the columns as we scroll horizontally.
	    var hiddenColumnsWidth = 0;
	    for (var i = 0; i < this.currentFirstColumn; i++) {
	      hiddenColumnsWidth += this.visibleColumnCache[i].drawnWidth;
	    }

	    this.columnOffset = hiddenColumnsWidth;
	  };

	  GridRenderContainer.prototype.scrollVertical = function (newScrollTop) {
	    var vertScrollPercentage = -1;

	    if (newScrollTop !== this.prevScrollTop) {
	      var yDiff = newScrollTop - this.prevScrollTop;

	      if (yDiff > 0 ) { this.grid.scrollDirection = uiGridConstants.scrollDirection.DOWN; }
	      if (yDiff < 0 ) { this.grid.scrollDirection = uiGridConstants.scrollDirection.UP; }

	      var vertScrollLength = this.getVerticalScrollLength();

	      vertScrollPercentage = newScrollTop / vertScrollLength;

	      // console.log('vert', vertScrollPercentage, newScrollTop, vertScrollLength);

	      if (vertScrollPercentage > 1) { vertScrollPercentage = 1; }
	      if (vertScrollPercentage < 0) { vertScrollPercentage = 0; }

	      this.adjustScrollVertical(newScrollTop, vertScrollPercentage);
	      return vertScrollPercentage;
	    }
	  };

	  GridRenderContainer.prototype.scrollHorizontal = function(newScrollLeft){
	    var horizScrollPercentage = -1;

	    // Handle RTL here

	    if (newScrollLeft !== this.prevScrollLeft) {
	      var xDiff = newScrollLeft - this.prevScrollLeft;

	      if (xDiff > 0) { this.grid.scrollDirection = uiGridConstants.scrollDirection.RIGHT; }
	      if (xDiff < 0) { this.grid.scrollDirection = uiGridConstants.scrollDirection.LEFT; }

	      var horizScrollLength = this.getHorizontalScrollLength();
	      if (horizScrollLength !== 0) {
	        horizScrollPercentage = newScrollLeft / horizScrollLength;
	      }
	      else {
	        horizScrollPercentage = 0;
	      }

	      this.adjustScrollHorizontal(newScrollLeft, horizScrollPercentage);
	      return horizScrollPercentage;
	    }
	  };

	  GridRenderContainer.prototype.adjustScrollVertical = function adjustScrollVertical(scrollTop, scrollPercentage, force) {
	    if (this.prevScrollTop === scrollTop && !force) {
	      return;
	    }

	    if (typeof(scrollTop) === 'undefined' || scrollTop === undefined || scrollTop === null) {
	      scrollTop = (this.getCanvasHeight() - this.getViewportHeight()) * scrollPercentage;
	    }

	    this.adjustRows(scrollTop, scrollPercentage, false);

	    this.prevScrollTop = scrollTop;
	    this.prevScrolltopPercentage = scrollPercentage;

	    this.grid.queueRefresh();
	  };

	  GridRenderContainer.prototype.adjustScrollHorizontal = function adjustScrollHorizontal(scrollLeft, scrollPercentage, force) {
	    if (this.prevScrollLeft === scrollLeft && !force) {
	      return;
	    }

	    if (typeof(scrollLeft) === 'undefined' || scrollLeft === undefined || scrollLeft === null) {
	      scrollLeft = (this.getCanvasWidth() - this.getViewportWidth()) * scrollPercentage;
	    }

	    this.adjustColumns(scrollLeft, scrollPercentage);

	    this.prevScrollLeft = scrollLeft;
	    this.prevScrollleftPercentage = scrollPercentage;

	    this.grid.queueRefresh();
	  };

	  GridRenderContainer.prototype.adjustRows = function adjustRows(scrollTop, scrollPercentage, postDataLoaded) {
	    var self = this;

	    var minRows = self.minRowsToRender();

	    var rowCache = self.visibleRowCache;

	    var maxRowIndex = rowCache.length - minRows;

	    // console.log('scroll%1', scrollPercentage);

	    // Calculate the scroll percentage according to the scrollTop location, if no percentage was provided
	    if ((typeof(scrollPercentage) === 'undefined' || scrollPercentage === null) && scrollTop) {
	      scrollPercentage = scrollTop / self.getVerticalScrollLength();
	    }

	    var rowIndex = Math.ceil(Math.min(maxRowIndex, maxRowIndex * scrollPercentage));

	    // console.log('maxRowIndex / scroll%', maxRowIndex, scrollPercentage, rowIndex);

	    // Define a max row index that we can't scroll past
	    if (rowIndex > maxRowIndex) {
	      rowIndex = maxRowIndex;
	    }

	    var newRange = [];
	    if (rowCache.length > self.grid.options.virtualizationThreshold) {
	      if (!(typeof(scrollTop) === 'undefined' || scrollTop === null)) {
	        // Have we hit the threshold going down?
	        if ( !self.grid.suppressParentScrollDown && self.prevScrollTop < scrollTop && rowIndex < self.prevRowScrollIndex + self.grid.options.scrollThreshold && rowIndex < maxRowIndex) {
	          return;
	        }
	        //Have we hit the threshold going up?
	        if ( !self.grid.suppressParentScrollUp && self.prevScrollTop > scrollTop && rowIndex > self.prevRowScrollIndex - self.grid.options.scrollThreshold && rowIndex < maxRowIndex) {
	          return;
	        }
	      }
	      var rangeStart = {};
	      var rangeEnd = {};

	      rangeStart = Math.max(0, rowIndex - self.grid.options.excessRows);
	      rangeEnd = Math.min(rowCache.length, rowIndex + minRows + self.grid.options.excessRows);

	      newRange = [rangeStart, rangeEnd];
	    }
	    else {
	      var maxLen = self.visibleRowCache.length;
	      newRange = [0, Math.max(maxLen, minRows + self.grid.options.excessRows)];
	    }

	    self.updateViewableRowRange(newRange);

	    self.prevRowScrollIndex = rowIndex;
	  };

	  GridRenderContainer.prototype.adjustColumns = function adjustColumns(scrollLeft, scrollPercentage) {
	    var self = this;

	    var minCols = self.minColumnsToRender();

	    var columnCache = self.visibleColumnCache;
	    var maxColumnIndex = columnCache.length - minCols;

	    // Calculate the scroll percentage according to the scrollLeft location, if no percentage was provided
	    if ((typeof(scrollPercentage) === 'undefined' || scrollPercentage === null) && scrollLeft) {
	      scrollPercentage = scrollLeft / self.getHorizontalScrollLength();
	    }

	    var colIndex = Math.ceil(Math.min(maxColumnIndex, maxColumnIndex * scrollPercentage));

	    // Define a max row index that we can't scroll past
	    if (colIndex > maxColumnIndex) {
	      colIndex = maxColumnIndex;
	    }

	    var newRange = [];
	    if (columnCache.length > self.grid.options.columnVirtualizationThreshold && self.getCanvasWidth() > self.getViewportWidth()) {
	      /* Commented the following lines because otherwise the moved column wasn't visible immediately on the new position
	       * in the case of many columns with horizontal scroll, one had to scroll left or right and then return in order to see it
	      // Have we hit the threshold going down?
	      if (self.prevScrollLeft < scrollLeft && colIndex < self.prevColumnScrollIndex + self.grid.options.horizontalScrollThreshold && colIndex < maxColumnIndex) {
	        return;
	      }
	      //Have we hit the threshold going up?
	      if (self.prevScrollLeft > scrollLeft && colIndex > self.prevColumnScrollIndex - self.grid.options.horizontalScrollThreshold && colIndex < maxColumnIndex) {
	        return;
	      }*/

	      var rangeStart = Math.max(0, colIndex - self.grid.options.excessColumns);
	      var rangeEnd = Math.min(columnCache.length, colIndex + minCols + self.grid.options.excessColumns);

	      newRange = [rangeStart, rangeEnd];
	    }
	    else {
	      var maxLen = self.visibleColumnCache.length;

	      newRange = [0, Math.max(maxLen, minCols + self.grid.options.excessColumns)];
	    }

	    self.updateViewableColumnRange(newRange);

	    self.prevColumnScrollIndex = colIndex;
	  };

	  // Method for updating the visible rows
	  GridRenderContainer.prototype.updateViewableRowRange = function updateViewableRowRange(renderedRange) {
	    // Slice out the range of rows from the data
	    // var rowArr = uiGridCtrl.grid.rows.slice(renderedRange[0], renderedRange[1]);
	    var rowArr = this.visibleRowCache.slice(renderedRange[0], renderedRange[1]);

	    // Define the top-most rendered row
	    this.currentTopRow = renderedRange[0];

	    this.setRenderedRows(rowArr);
	  };

	  // Method for updating the visible columns
	  GridRenderContainer.prototype.updateViewableColumnRange = function updateViewableColumnRange(renderedRange) {
	    // Slice out the range of rows from the data
	    // var columnArr = uiGridCtrl.grid.columns.slice(renderedRange[0], renderedRange[1]);
	    var columnArr = this.visibleColumnCache.slice(renderedRange[0], renderedRange[1]);

	    // Define the left-most rendered columns
	    this.currentFirstColumn = renderedRange[0];

	    this.setRenderedColumns(columnArr);
	  };

	  GridRenderContainer.prototype.headerCellWrapperStyle = function () {
	    var self = this;

	    if (self.currentFirstColumn !== 0) {
	      var offset = self.columnOffset;

	      if (self.grid.isRTL()) {
	        return { 'margin-right': offset + 'px' };
	      }
	      else {
	        return { 'margin-left': offset + 'px' };
	      }
	    }

	    return null;
	  };

	    /**
	     *  @ngdoc boolean
	     *  @name updateColumnWidths
	     *  @propertyOf  ui.grid.class:GridRenderContainer
	     *  @description Determine the appropriate column width of each column across all render containers.
	     *
	     *  Column width is easy when each column has a specified width.  When columns are variable width (i.e.
	     *  have an * or % of the viewport) then we try to calculate so that things fit in.  The problem is that
	     *  we have multiple render containers, and we don't want one render container to just take the whole viewport
	     *  when it doesn't need to - we want things to balance out across the render containers.
	     *
	     *  To do this, we use this method to calculate all the renderContainers, recognising that in a given render
	     *  cycle it'll get called once per render container, so it needs to return the same values each time.
	     *
	     *  The constraints on this method are therefore:
	     *  - must return the same value when called multiple times, to do this it needs to rely on properties of the
	     *    columns, but not properties that change when this is called (so it shouldn't rely on drawnWidth)
	     *
	     *  The general logic of this method is:
	     *  - calculate our total available width
	     *  - look at all the columns across all render containers, and work out which have widths and which have
	     *    constraints such as % or * or something else
	     *  - for those with *, count the total number of * we see and add it onto a running total, add this column to an * array
	     *  - for those with a %, allocate the % as a percentage of the viewport, having consideration of min and max
	     *  - for those with manual width (in pixels) we set the drawnWidth to the specified width
	     *  - we end up with an asterisks array still to process
	     *  - we look at our remaining width.  If it's greater than zero, we divide it up among the asterisk columns, then process
	     *    them for min and max width constraints
	     *  - if it's zero or less, we set the asterisk columns to their minimum widths
	     *  - we use parseInt quite a bit, as we try to make all our column widths integers
	     */
	  GridRenderContainer.prototype.updateColumnWidths = function () {
	    var self = this;

	    var asterisksArray = [],
	        asteriskNum = 0,
	        usedWidthSum = 0,
	        ret = '';

	    // Get the width of the viewport
	    var availableWidth = self.grid.getViewportWidth() - self.grid.scrollbarWidth;

	    // get all the columns across all render containers, we have to calculate them all or one render container
	    // could consume the whole viewport
	    var columnCache = [];
	    angular.forEach(self.grid.renderContainers, function( container, name){
	      columnCache = columnCache.concat(container.visibleColumnCache);
	    });

	    // look at each column, process any manual values or %, put the * into an array to look at later
	    columnCache.forEach(function(column, i) {
	      var width = 0;
	      // Skip hidden columns
	      if (!column.visible) { return; }

	      if (angular.isNumber(column.width)) {
	        // pixel width, set to this value
	        width = parseInt(column.width, 10);
	        usedWidthSum = usedWidthSum + width;
	        column.drawnWidth = width;

	      } else if (gridUtil.endsWith(column.width, "%")) {
	        // percentage width, set to percentage of the viewport
	        width = parseInt(parseInt(column.width.replace(/%/g, ''), 10) / 100 * availableWidth);

	        if ( width > column.maxWidth ){
	          width = column.maxWidth;
	        }

	        if ( width < column.minWidth ){
	          width = column.minWidth;
	        }

	        usedWidthSum = usedWidthSum + width;
	        column.drawnWidth = width;
	      } else if (angular.isString(column.width) && column.width.indexOf('*') !== -1) {
	        // is an asterisk column, the gridColumn already checked the string consists only of '****'
	        asteriskNum = asteriskNum + column.width.length;
	        asterisksArray.push(column);
	      }
	    });

	    // Get the remaining width (available width subtracted by the used widths sum)
	    var remainingWidth = availableWidth - usedWidthSum;

	    var i, column, colWidth;

	    if (asterisksArray.length > 0) {
	      // the width that each asterisk value would be assigned (this can be negative)
	      var asteriskVal = remainingWidth / asteriskNum;

	      asterisksArray.forEach(function( column ){
	        var width = parseInt(column.width.length * asteriskVal, 10);

	        if ( width > column.maxWidth ){
	          width = column.maxWidth;
	        }

	        if ( width < column.minWidth ){
	          width = column.minWidth;
	        }

	        usedWidthSum = usedWidthSum + width;
	        column.drawnWidth = width;
	      });
	    }

	    // If the grid width didn't divide evenly into the column widths and we have pixels left over, or our
	    // calculated widths would have the grid narrower than the available space,
	    // dole the remainder out one by one to make everything fit
	    var processColumnUpwards = function(column){
	      if ( column.drawnWidth < column.maxWidth && leftoverWidth > 0) {
	        column.drawnWidth++;
	        usedWidthSum++;
	        leftoverWidth--;
	        columnsToChange = true;
	      }
	    };

	    var leftoverWidth = availableWidth - usedWidthSum;
	    var columnsToChange = true;

	    while (leftoverWidth > 0 && columnsToChange) {
	      columnsToChange = false;
	      asterisksArray.forEach(processColumnUpwards);
	    }

	    // We can end up with too much width even though some columns aren't at their max width, in this situation
	    // we can trim the columns a little
	    var processColumnDownwards = function(column){
	      if ( column.drawnWidth > column.minWidth && excessWidth > 0) {
	        column.drawnWidth--;
	        usedWidthSum--;
	        excessWidth--;
	        columnsToChange = true;
	      }
	    };

	    var excessWidth =  usedWidthSum - availableWidth;
	    columnsToChange = true;

	    while (excessWidth > 0 && columnsToChange) {
	      columnsToChange = false;
	      asterisksArray.forEach(processColumnDownwards);
	    }


	    // all that was across all the renderContainers, now we need to work out what that calculation decided for
	    // our renderContainer
	    var canvasWidth = 0;
	    self.visibleColumnCache.forEach(function(column){
	      if ( column.visible ){
	        canvasWidth = canvasWidth + column.drawnWidth;
	      }
	    });

	    // Build the CSS
	    columnCache.forEach(function (column) {
	      ret = ret + column.getColClassDefinition();
	    });

	    self.canvasWidth = canvasWidth;

	    // Return the styles back to buildStyles which pops them into the `customStyles` scope variable
	    // return ret;

	    // Set this render container's column styles so they can be used in style computation
	    this.columnStyles = ret;
	  };

	  GridRenderContainer.prototype.needsHScrollbarPlaceholder = function () {
	    return this.grid.options.enableHorizontalScrollbar && !this.hasHScrollbar && !this.grid.disableScrolling;
	  };

	  GridRenderContainer.prototype.getViewportStyle = function () {
	    var self = this;
	    var styles = {};

	    self.hasHScrollbar = false;
	    self.hasVScrollbar = false;

	    if (self.grid.disableScrolling) {
	      styles['overflow-x'] = 'hidden';
	      styles['overflow-y'] = 'hidden';
	      return styles;
	    }

	    if (self.name === 'body') {
	      self.hasHScrollbar = self.grid.options.enableHorizontalScrollbar !== uiGridConstants.scrollbars.NEVER;
	      if (!self.grid.isRTL()) {
	        if (!self.grid.hasRightContainerColumns()) {
	          self.hasVScrollbar = self.grid.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER;
	        }
	      }
	      else {
	        if (!self.grid.hasLeftContainerColumns()) {
	          self.hasVScrollbar = self.grid.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER;
	        }
	      }
	    }
	    else if (self.name === 'left') {
	      self.hasVScrollbar = self.grid.isRTL() ? self.grid.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER : false;
	    }
	    else {
	      self.hasVScrollbar = !self.grid.isRTL() ? self.grid.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER : false;
	    }

	    styles['overflow-x'] = self.hasHScrollbar ? 'scroll' : 'hidden';
	    styles['overflow-y'] = self.hasVScrollbar ? 'scroll' : 'hidden';


	    return styles;


	  };

	  return GridRenderContainer;
	}]);

	})();

	(function(){

	angular.module('ui.grid')
	.factory('GridRow', ['gridUtil', 'uiGridConstants', function(gridUtil, uiGridConstants) {

	   /**
	   * @ngdoc function
	   * @name ui.grid.class:GridRow
	   * @description GridRow is the viewModel for one logical row on the grid.  A grid Row is not necessarily a one-to-one
	   * relation to gridOptions.data.
	   * @param {object} entity the array item from GridOptions.data
	   * @param {number} index the current position of the row in the array
	   * @param {Grid} reference to the parent grid
	   */
	  function GridRow(entity, index, grid) {

	     /**
	      *  @ngdoc object
	      *  @name grid
	      *  @propertyOf  ui.grid.class:GridRow
	      *  @description A reference back to the grid
	      */
	     this.grid = grid;

	     /**
	      *  @ngdoc object
	      *  @name entity
	      *  @propertyOf  ui.grid.class:GridRow
	      *  @description A reference to an item in gridOptions.data[]
	      */
	    this.entity = entity;

	     /**
	      *  @ngdoc object
	      *  @name uid
	      *  @propertyOf  ui.grid.class:GridRow
	      *  @description  UniqueId of row
	      */
	     this.uid = gridUtil.nextUid();

	     /**
	      *  @ngdoc object
	      *  @name visible
	      *  @propertyOf  ui.grid.class:GridRow
	      *  @description If true, the row will be rendered
	      */
	    // Default to true
	    this.visible = true;


	    this.$$height = grid.options.rowHeight;

	  }

	    /**
	     *  @ngdoc object
	     *  @name height
	     *  @propertyOf  ui.grid.class:GridRow
	     *  @description height of each individual row. changing the height will flag all
	     *  row renderContainers to recalculate their canvas height
	     */
	    Object.defineProperty(GridRow.prototype, 'height', {
	      get: function() {
	        return this.$$height;
	      },
	      set: function(height) {
	        if (height !== this.$$height) {
	          this.grid.updateCanvasHeight();
	          this.$$height = height;
	        }
	      }
	    });

	  /**
	   * @ngdoc function
	   * @name getQualifiedColField
	   * @methodOf ui.grid.class:GridRow
	   * @description returns the qualified field name as it exists on scope
	   * ie: row.entity.fieldA
	   * @param {GridCol} col column instance
	   * @returns {string} resulting name that can be evaluated on scope
	   */
	    GridRow.prototype.getQualifiedColField = function(col) {
	      return 'row.' + this.getEntityQualifiedColField(col);
	    };

	    /**
	     * @ngdoc function
	     * @name getEntityQualifiedColField
	     * @methodOf ui.grid.class:GridRow
	     * @description returns the qualified field name minus the row path
	     * ie: entity.fieldA
	     * @param {GridCol} col column instance
	     * @returns {string} resulting name that can be evaluated against a row
	     */
	  GridRow.prototype.getEntityQualifiedColField = function(col) {
	    var base = 'entity';
	    if ( col.field === uiGridConstants.ENTITY_BINDING ) {
	      return base;
	    }
	    return gridUtil.preEval(base + '.' + col.field);
	  };
	  
	  
	  /**
	   * @ngdoc function
	   * @name setRowInvisible
	   * @methodOf  ui.grid.class:GridRow
	   * @description Sets an override on the row that forces it to always
	   * be invisible. Emits the rowsVisibleChanged event if it changed the row visibility.
	   * 
	   * This method can be called from the api, passing in the gridRow we want
	   * altered.  It should really work by calling gridRow.setRowInvisible, but that's
	   * not the way I coded it, and too late to change now.  Changed to just call
	   * the internal function row.setThisRowInvisible().
	   * 
	   * @param {GridRow} row the row we want to set to invisible
	   * 
	   */
	  GridRow.prototype.setRowInvisible = function ( row ) {
	    if (row && row.setThisRowInvisible){
	      row.setThisRowInvisible( 'user' );
	    }
	  };
	  
	  
	  /**
	   * @ngdoc function
	   * @name clearRowInvisible
	   * @methodOf  ui.grid.class:GridRow
	   * @description Clears an override on the row that forces it to always
	   * be invisible. Emits the rowsVisibleChanged event if it changed the row visibility.
	   * 
	   * This method can be called from the api, passing in the gridRow we want
	   * altered.  It should really work by calling gridRow.clearRowInvisible, but that's
	   * not the way I coded it, and too late to change now.  Changed to just call
	   * the internal function row.clearThisRowInvisible().
	   * 
	   * @param {GridRow} row the row we want to clear the invisible flag
	   * 
	   */
	  GridRow.prototype.clearRowInvisible = function ( row ) {
	    if (row && row.clearThisRowInvisible){
	      row.clearThisRowInvisible( 'user' );
	    }
	  };
	  
	  
	  /**
	   * @ngdoc function
	   * @name setThisRowInvisible
	   * @methodOf  ui.grid.class:GridRow
	   * @description Sets an override on the row that forces it to always
	   * be invisible. Emits the rowsVisibleChanged event if it changed the row visibility
	   *
	   * @param {string} reason the reason (usually the module) for the row to be invisible.
	   * E.g. grouping, user, filter
	   * @param {boolean} fromRowsProcessor whether we were called from a rowsProcessor, passed through to evaluateRowVisibility
	   */
	  GridRow.prototype.setThisRowInvisible = function ( reason, fromRowsProcessor ) {
	    if ( !this.invisibleReason ){
	      this.invisibleReason = {};
	    }
	    this.invisibleReason[reason] = true;
	    this.evaluateRowVisibility( fromRowsProcessor);
	  };


	  /**
	   * @ngdoc function
	   * @name clearRowInvisible
	   * @methodOf ui.grid.class:GridRow
	   * @description Clears any override on the row visibility, returning it 
	   * to normal visibility calculations.  Emits the rowsVisibleChanged
	   * event
	   * 
	   * @param {string} reason the reason (usually the module) for the row to be invisible.
	   * E.g. grouping, user, filter
	   * @param {boolean} fromRowsProcessor whether we were called from a rowsProcessor, passed through to evaluateRowVisibility
	   */
	  GridRow.prototype.clearThisRowInvisible = function ( reason, fromRowsProcessor ) {
	    if (typeof(this.invisibleReason) !== 'undefined' ) {
	      delete this.invisibleReason[reason];
	    }
	    this.evaluateRowVisibility( fromRowsProcessor );
	  };


	  /**
	   * @ngdoc function
	   * @name evaluateRowVisibility
	   * @methodOf ui.grid.class:GridRow
	   * @description Determines whether the row should be visible based on invisibleReason, 
	   * and if it changes the row visibility, then emits the rowsVisibleChanged event.
	   * 
	   * Queues a grid refresh, but doesn't call it directly to avoid hitting lots of grid refreshes.
	   * @param {boolean} fromRowProcessor if true, then it won't raise events or queue the refresh, the
	   * row processor does that already
	   */
	  GridRow.prototype.evaluateRowVisibility = function ( fromRowProcessor ) {
	    var newVisibility = true;
	    if ( typeof(this.invisibleReason) !== 'undefined' ){
	      angular.forEach(this.invisibleReason, function( value, key ){
	        if ( value ){
	          newVisibility = false;
	        }
	      });
	    }
	    
	    if ( typeof(this.visible) === 'undefined' || this.visible !== newVisibility ){
	      this.visible = newVisibility;
	      if ( !fromRowProcessor ){
	        this.grid.queueGridRefresh();
	        this.grid.api.core.raise.rowsVisibleChanged(this);
	      }
	    }
	  };
	  

	  return GridRow;
	}]);

	})();

	(function(){
	  'use strict';
	  /**
	   * @ngdoc object
	   * @name ui.grid.class:GridRowColumn
	   * @param {GridRow} row The row for this pair
	   * @param {GridColumn} column The column for this pair
	   * @description A row and column pair that represents the intersection of these two entities.
	   * Must be instantiated as a constructor using the `new` keyword.
	   */
	  angular.module('ui.grid')
	  .factory('GridRowColumn', ['$parse', '$filter',
	    function GridRowColumnFactory($parse, $filter){
	      var GridRowColumn = function GridRowColumn(row, col) {
	        if ( !(this instanceof GridRowColumn)){
	          throw "Using GridRowColumn as a function insead of as a constructor. Must be called with `new` keyword";
	        }

	        /**
	         * @ngdoc object
	         * @name row
	         * @propertyOf ui.grid.class:GridRowColumn
	         * @description {@link ui.grid.class:GridRow }
	         */
	        this.row = row;
	        /**
	         * @ngdoc object
	         * @name col
	         * @propertyOf ui.grid.class:GridRowColumn
	         * @description {@link ui.grid.class:GridColumn }
	         */
	        this.col = col;
	      };

	      /**
	       * @ngdoc function
	       * @name getIntersectionValueRaw
	       * @methodOf ui.grid.class:GridRowColumn
	       * @description Gets the intersection of where the row and column meet.
	       * @returns {String|Number|Object} The value from the grid data that this GridRowColumn points too.
	       *          If the column has a cellFilter this will NOT return the filtered value.
	       */
	      GridRowColumn.prototype.getIntersectionValueRaw = function(){
	        var getter = $parse(this.row.getEntityQualifiedColField(this.col));
	        var context = this.row;
	        return getter(context);
	      };
	      return GridRowColumn;
	    }
	  ]);
	})();

	(function () {
	  angular.module('ui.grid')
	    .factory('ScrollEvent', ['gridUtil', function (gridUtil) {

	      /**
	       * @ngdoc function
	       * @name ui.grid.class:ScrollEvent
	       * @description Model for all scrollEvents
	       * @param {Grid} grid that owns the scroll event
	       * @param {GridRenderContainer} sourceRowContainer that owns the scroll event. Can be null
	       * @param {GridRenderContainer} sourceColContainer that owns the scroll event. Can be null
	       * @param {string} source the source of the event - from uiGridConstants.scrollEventSources or a string value of directive/service/factory.functionName
	       */
	      function ScrollEvent(grid, sourceRowContainer, sourceColContainer, source) {
	        var self = this;
	        if (!grid) {
	          throw new Error("grid argument is required");
	        }

	        /**
	         *  @ngdoc object
	         *  @name grid
	         *  @propertyOf  ui.grid.class:ScrollEvent
	         *  @description A reference back to the grid
	         */
	         self.grid = grid;



	        /**
	         *  @ngdoc object
	         *  @name source
	         *  @propertyOf  ui.grid.class:ScrollEvent
	         *  @description the source of the scroll event. limited to values from uiGridConstants.scrollEventSources
	         */
	        self.source = source;


	        /**
	         *  @ngdoc object
	         *  @name noDelay
	         *  @propertyOf  ui.grid.class:ScrollEvent
	         *  @description most scroll events from the mouse or trackpad require delay to operate properly
	         *  set to false to eliminate delay.  Useful for scroll events that the grid causes, such as scrolling to make a row visible.
	         */
	        self.withDelay = true;

	        self.sourceRowContainer = sourceRowContainer;
	        self.sourceColContainer = sourceColContainer;

	        self.newScrollLeft = null;
	        self.newScrollTop = null;
	        self.x = null;
	        self.y = null;

	        self.verticalScrollLength = -9999999;
	        self.horizontalScrollLength = -999999;


	        /**
	         *  @ngdoc function
	         *  @name fireThrottledScrollingEvent
	         *  @methodOf  ui.grid.class:ScrollEvent
	         *  @description fires a throttled event using grid.api.core.raise.scrollEvent
	         */
	        self.fireThrottledScrollingEvent = gridUtil.throttle(function(sourceContainerId) {
	          self.grid.scrollContainers(sourceContainerId, self);
	        }, self.grid.options.wheelScrollThrottle, {trailing: true});

	      }


	      /**
	       *  @ngdoc function
	       *  @name getNewScrollLeft
	       *  @methodOf  ui.grid.class:ScrollEvent
	       *  @description returns newScrollLeft property if available; calculates a new value if it isn't
	       */
	      ScrollEvent.prototype.getNewScrollLeft = function(colContainer, viewport){
	        var self = this;

	        if (!self.newScrollLeft){
	          var scrollWidth = (colContainer.getCanvasWidth() - colContainer.getViewportWidth());

	          var oldScrollLeft = gridUtil.normalizeScrollLeft(viewport, self.grid);

	          var scrollXPercentage;
	          if (typeof(self.x.percentage) !== 'undefined' && self.x.percentage !== undefined) {
	            scrollXPercentage = self.x.percentage;
	          }
	          else if (typeof(self.x.pixels) !== 'undefined' && self.x.pixels !== undefined) {
	            scrollXPercentage = self.x.percentage = (oldScrollLeft + self.x.pixels) / scrollWidth;
	          }
	          else {
	            throw new Error("No percentage or pixel value provided for scroll event X axis");
	          }

	          return Math.max(0, scrollXPercentage * scrollWidth);
	        }

	        return self.newScrollLeft;
	      };


	      /**
	       *  @ngdoc function
	       *  @name getNewScrollTop
	       *  @methodOf  ui.grid.class:ScrollEvent
	       *  @description returns newScrollTop property if available; calculates a new value if it isn't
	       */
	      ScrollEvent.prototype.getNewScrollTop = function(rowContainer, viewport){
	        var self = this;


	        if (!self.newScrollTop){
	          var scrollLength = rowContainer.getVerticalScrollLength();

	          var oldScrollTop = viewport[0].scrollTop;

	          var scrollYPercentage;
	          if (typeof(self.y.percentage) !== 'undefined' && self.y.percentage !== undefined) {
	            scrollYPercentage = self.y.percentage;
	          }
	          else if (typeof(self.y.pixels) !== 'undefined' && self.y.pixels !== undefined) {
	            scrollYPercentage = self.y.percentage = (oldScrollTop + self.y.pixels) / scrollLength;
	          }
	          else {
	            throw new Error("No percentage or pixel value provided for scroll event Y axis");
	          }

	          return Math.max(0, scrollYPercentage * scrollLength);
	        }

	        return self.newScrollTop;
	      };

	      ScrollEvent.prototype.atTop = function(scrollTop) {
	        return (this.y && (this.y.percentage === 0 || this.verticalScrollLength < 0) && scrollTop === 0);
	      };

	      ScrollEvent.prototype.atBottom = function(scrollTop) {
	        return (this.y && (this.y.percentage === 1 || this.verticalScrollLength === 0) && scrollTop > 0);
	      };

	      ScrollEvent.prototype.atLeft = function(scrollLeft) {
	        return (this.x && (this.x.percentage === 0 || this.horizontalScrollLength < 0) && scrollLeft === 0);
	      };

	      ScrollEvent.prototype.atRight = function(scrollLeft) {
	        return (this.x && (this.x.percentage === 1 || this.horizontalScrollLength ===0) && scrollLeft > 0);
	      };


	      ScrollEvent.Sources = {
	        ViewPortScroll: 'ViewPortScroll',
	        RenderContainerMouseWheel: 'RenderContainerMouseWheel',
	        RenderContainerTouchMove: 'RenderContainerTouchMove',
	        Other: 99
	      };

	      return ScrollEvent;
	    }]);



	})();

	(function () {
	  'use strict';
	  /**
	   *  @ngdoc object
	   *  @name ui.grid.service:gridClassFactory
	   *
	   *  @description factory to return dom specific instances of a grid
	   *
	   */
	  angular.module('ui.grid').service('gridClassFactory', ['gridUtil', '$q', '$compile', '$templateCache', 'uiGridConstants', 'Grid', 'GridColumn', 'GridRow',
	    function (gridUtil, $q, $compile, $templateCache, uiGridConstants, Grid, GridColumn, GridRow) {

	      var service = {
	        /**
	         * @ngdoc method
	         * @name createGrid
	         * @methodOf ui.grid.service:gridClassFactory
	         * @description Creates a new grid instance. Each instance will have a unique id
	         * @param {object} options An object map of options to pass into the created grid instance.
	         * @returns {Grid} grid
	         */
	        createGrid : function(options) {
	          options = (typeof(options) !== 'undefined') ? options : {};
	          options.id = gridUtil.newId();
	          var grid = new Grid(options);

	          // NOTE/TODO: rowTemplate should always be defined...
	          if (grid.options.rowTemplate) {
	            var rowTemplateFnPromise = $q.defer();
	            grid.getRowTemplateFn = rowTemplateFnPromise.promise;
	            
	            gridUtil.getTemplate(grid.options.rowTemplate)
	              .then(
	                function (template) {
	                  var rowTemplateFn = $compile(template);
	                  rowTemplateFnPromise.resolve(rowTemplateFn);
	                },
	                function (res) {
	                  // Todo handle response error here?
	                  throw new Error("Couldn't fetch/use row template '" + grid.options.rowTemplate + "'");
	                });
	          }

	          grid.registerColumnBuilder(service.defaultColumnBuilder);

	          // Row builder for custom row templates
	          grid.registerRowBuilder(service.rowTemplateAssigner);

	          // Reset all rows to visible initially
	          grid.registerRowsProcessor(function allRowsVisible(rows) {
	            rows.forEach(function (row) {
	              row.evaluateRowVisibility( true );
	            }, 50);

	            return rows;
	          });

	          grid.registerColumnsProcessor(function applyColumnVisibility(columns) {
	            columns.forEach(function (column) {
	              column.visible = angular.isDefined(column.colDef.visible) ? column.colDef.visible : true;
	            });

	            return columns;
	          }, 50);

	          grid.registerRowsProcessor(grid.searchRows, 100);

	          // Register the default row processor, it sorts rows by selected columns
	          if (grid.options.externalSort && angular.isFunction(grid.options.externalSort)) {
	            grid.registerRowsProcessor(grid.options.externalSort, 200);
	          }
	          else {
	            grid.registerRowsProcessor(grid.sortByColumn, 200);
	          }

	          return grid;
	        },

	        /**
	         * @ngdoc function
	         * @name defaultColumnBuilder
	         * @methodOf ui.grid.service:gridClassFactory
	         * @description Processes designTime column definitions and applies them to col for the
	         *              core grid features
	         * @param {object} colDef reference to column definition
	         * @param {GridColumn} col reference to gridCol
	         * @param {object} gridOptions reference to grid options
	         */
	        defaultColumnBuilder: function (colDef, col, gridOptions) {

	          var templateGetPromises = [];

	          // Abstracts the standard template processing we do for every template type.
	          var processTemplate = function( templateType, providedType, defaultTemplate, filterType, tooltipType ) {
	            if ( !colDef[templateType] ){
	              col[providedType] = defaultTemplate;
	            } else {
	              col[providedType] = colDef[templateType];
	            }
	 
	             templateGetPromises.push(gridUtil.getTemplate(col[providedType])
	                .then(
	                function (template) {
	                  if ( angular.isFunction(template) ) { template = template(); }
	                  var tooltipCall = ( tooltipType === 'cellTooltip' ) ? 'col.cellTooltip(row,col)' : 'col.headerTooltip(col)';
	                  if ( tooltipType && col[tooltipType] === false ){
	                    template = template.replace(uiGridConstants.TOOLTIP, '');
	                  } else if ( tooltipType && col[tooltipType] ){
	                    template = template.replace(uiGridConstants.TOOLTIP, 'title="{{' + tooltipCall + ' CUSTOM_FILTERS }}"');
	                  }

	                  if ( filterType ){
	                    col[templateType] = template.replace(uiGridConstants.CUSTOM_FILTERS, function() {
	                      return col[filterType] ? "|" + col[filterType] : "";
	                    });
	                  } else {
	                    col[templateType] = template;
	                  }
	                },
	                function (res) {
	                  throw new Error("Couldn't fetch/use colDef." + templateType + " '" + colDef[templateType] + "'");
	                })
	            );

	          };


	          /**
	           * @ngdoc property
	           * @name cellTemplate
	           * @propertyOf ui.grid.class:GridOptions.columnDef
	           * @description a custom template for each cell in this column.  The default
	           * is ui-grid/uiGridCell.  If you are using the cellNav feature, this template
	           * must contain a div that can receive focus.
	           *
	           */
	          processTemplate( 'cellTemplate', 'providedCellTemplate', 'ui-grid/uiGridCell', 'cellFilter', 'cellTooltip' );
	          col.cellTemplatePromise = templateGetPromises[0];

	          /**
	           * @ngdoc property
	           * @name headerCellTemplate
	           * @propertyOf ui.grid.class:GridOptions.columnDef
	           * @description a custom template for the header for this column.  The default
	           * is ui-grid/uiGridHeaderCell
	           *
	           */
	          processTemplate( 'headerCellTemplate', 'providedHeaderCellTemplate', 'ui-grid/uiGridHeaderCell', 'headerCellFilter', 'headerTooltip' );

	          /**
	           * @ngdoc property
	           * @name footerCellTemplate
	           * @propertyOf ui.grid.class:GridOptions.columnDef
	           * @description a custom template for the footer for this column.  The default
	           * is ui-grid/uiGridFooterCell
	           *
	           */
	          processTemplate( 'footerCellTemplate', 'providedFooterCellTemplate', 'ui-grid/uiGridFooterCell', 'footerCellFilter' );

	          /**
	           * @ngdoc property
	           * @name filterHeaderTemplate
	           * @propertyOf ui.grid.class:GridOptions.columnDef
	           * @description a custom template for the filter input.  The default is ui-grid/ui-grid-filter
	           *
	           */
	          processTemplate( 'filterHeaderTemplate', 'providedFilterHeaderTemplate', 'ui-grid/ui-grid-filter' );

	          // Create a promise for the compiled element function
	          col.compiledElementFnDefer = $q.defer();

	          return $q.all(templateGetPromises);
	        },
	        

	        rowTemplateAssigner: function rowTemplateAssigner(row) {
	          var grid = this;

	          // Row has no template assigned to it
	          if (!row.rowTemplate) {
	            // Use the default row template from the grid
	            row.rowTemplate = grid.options.rowTemplate;

	            // Use the grid's function for fetching the compiled row template function
	            row.getRowTemplateFn = grid.getRowTemplateFn;
	          }
	          // Row has its own template assigned
	          else {
	            // Create a promise for the compiled row template function
	            var perRowTemplateFnPromise = $q.defer();
	            row.getRowTemplateFn = perRowTemplateFnPromise.promise;

	            // Get the row template
	            gridUtil.getTemplate(row.rowTemplate)
	              .then(function (template) {
	                // Compile the template
	                var rowTemplateFn = $compile(template);
	                
	                // Resolve the compiled template function promise
	                perRowTemplateFnPromise.resolve(rowTemplateFn);
	              },
	              function (res) {
	                // Todo handle response error here?
	                throw new Error("Couldn't fetch/use row template '" + row.rowTemplate + "'");
	              });
	          }

	          return row.getRowTemplateFn;
	        }
	      };

	      //class definitions (moved to separate factories)

	      return service;
	    }]);

	})();

	(function() {

	var module = angular.module('ui.grid');

	function escapeRegExp(str) {
	  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
	}


	/**
	 *  @ngdoc service
	 *  @name ui.grid.service:rowSearcher
	 *
	 *  @description Service for searching/filtering rows based on column value conditions.
	 */
	module.service('rowSearcher', ['gridUtil', 'uiGridConstants', function (gridUtil, uiGridConstants) {
	  var defaultCondition = uiGridConstants.filter.CONTAINS;

	  var rowSearcher = {};

	  /**
	   * @ngdoc function
	   * @name getTerm
	   * @methodOf ui.grid.service:rowSearcher
	   * @description Get the term from a filter
	   * Trims leading and trailing whitespace
	   * @param {object} filter object to use
	   * @returns {object} Parsed term
	   */
	  rowSearcher.getTerm = function getTerm(filter) {
	    if (typeof(filter.term) === 'undefined') { return filter.term; }
	    
	    var term = filter.term;

	    // Strip leading and trailing whitespace if the term is a string
	    if (typeof(term) === 'string') {
	      term = term.trim();
	    }

	    return term;
	  };

	  /**
	   * @ngdoc function
	   * @name stripTerm
	   * @methodOf ui.grid.service:rowSearcher
	   * @description Remove leading and trailing asterisk (*) from the filter's term
	   * @param {object} filter object to use
	   * @returns {uiGridConstants.filter<int>} Value representing the condition constant value
	   */
	  rowSearcher.stripTerm = function stripTerm(filter) {
	    var term = rowSearcher.getTerm(filter);

	    if (typeof(term) === 'string') {
	      return escapeRegExp(term.replace(/(^\*|\*$)/g, ''));
	    }
	    else {
	      return term;
	    }
	  };
	  

	  /**
	   * @ngdoc function
	   * @name guessCondition
	   * @methodOf ui.grid.service:rowSearcher
	   * @description Guess the condition for a filter based on its term
	   * <br>
	   * Defaults to STARTS_WITH. Uses CONTAINS for strings beginning and ending with *s (*bob*).
	   * Uses STARTS_WITH for strings ending with * (bo*). Uses ENDS_WITH for strings starting with * (*ob).
	   * @param {object} filter object to use
	   * @returns {uiGridConstants.filter<int>} Value representing the condition constant value
	   */
	  rowSearcher.guessCondition = function guessCondition(filter) {
	    if (typeof(filter.term) === 'undefined' || !filter.term) {
	      return defaultCondition;
	    }

	    var term = rowSearcher.getTerm(filter);
	    
	    if (/\*/.test(term)) {
	      var regexpFlags = '';
	      if (!filter.flags || !filter.flags.caseSensitive) {
	        regexpFlags += 'i';
	      }

	      var reText = term.replace(/(\\)?\*/g, function ($0, $1) { return $1 ? $0 : '[\\s\\S]*?'; });
	      return new RegExp('^' + reText + '$', regexpFlags);
	    }
	    // Otherwise default to default condition
	    else {
	      return defaultCondition;
	    }
	  };
	  
	  
	  /**
	   * @ngdoc function
	   * @name setupFilters
	   * @methodOf ui.grid.service:rowSearcher
	   * @description For a given columns filters (either col.filters, or [col.filter] can be passed in),
	   * do all the parsing and pre-processing and store that data into a new filters object.  The object
	   * has the condition, the flags, the stripped term, and a parsed reg exp if there was one.
	   * 
	   * We could use a forEach in here, since it's much less performance sensitive, but since we're using 
	   * for loops everywhere else in this module...
	   * 
	   * @param {array} filters the filters from the column (col.filters or [col.filter])
	   * @returns {array} An array of parsed/preprocessed filters
	   */
	  rowSearcher.setupFilters = function setupFilters( filters ){
	    var newFilters = [];
	    
	    var filtersLength = filters.length;
	    for ( var i = 0; i < filtersLength; i++ ){
	      var filter = filters[i];
	      
	      if ( filter.noTerm || !gridUtil.isNullOrUndefined(filter.term) ){
	        var newFilter = {};
	        
	        var regexpFlags = '';
	        if (!filter.flags || !filter.flags.caseSensitive) {
	          regexpFlags += 'i';
	        }
	    
	        if ( !gridUtil.isNullOrUndefined(filter.term) ){
	          // it is possible to have noTerm.
	          if ( filter.rawTerm ){
	            newFilter.term = filter.term;
	          } else {
	            newFilter.term = rowSearcher.stripTerm(filter);
	          }
	        }
	        newFilter.noTerm = filter.noTerm;
	        
	        if ( filter.condition ){
	          newFilter.condition = filter.condition;
	        } else {
	          newFilter.condition = rowSearcher.guessCondition(filter);
	        }

	        newFilter.flags = angular.extend( { caseSensitive: false, date: false }, filter.flags );

	        if (newFilter.condition === uiGridConstants.filter.STARTS_WITH) {
	          newFilter.startswithRE = new RegExp('^' + newFilter.term, regexpFlags);
	        }
	        
	         if (newFilter.condition === uiGridConstants.filter.ENDS_WITH) {
	          newFilter.endswithRE = new RegExp(newFilter.term + '$', regexpFlags);
	        }

	        if (newFilter.condition === uiGridConstants.filter.CONTAINS) {
	          newFilter.containsRE = new RegExp(newFilter.term, regexpFlags);
	        }

	        if (newFilter.condition === uiGridConstants.filter.EXACT) {
	          newFilter.exactRE = new RegExp('^' + newFilter.term + '$', regexpFlags);
	        }
	        
	        newFilters.push(newFilter);
	      }
	    }
	    return newFilters;
	  };
	  

	  /**
	   * @ngdoc function
	   * @name runColumnFilter
	   * @methodOf ui.grid.service:rowSearcher
	   * @description Runs a single pre-parsed filter against a cell, returning true
	   * if the cell matches that one filter.
	   * 
	   * @param {Grid} grid the grid we're working against
	   * @param {GridRow} row the row we're matching against
	   * @param {GridCol} column the column that we're working against
	   * @param {object} filter the specific, preparsed, filter that we want to test
	   * @returns {boolean} true if we match (row stays visible)
	   */
	  rowSearcher.runColumnFilter = function runColumnFilter(grid, row, column, filter) {
	    // Cache typeof condition
	    var conditionType = typeof(filter.condition);

	    // Term to search for.
	    var term = filter.term;

	    // Get the column value for this row
	    var value;
	    if ( column.filterCellFiltered ){
	      value = grid.getCellDisplayValue(row, column);
	    } else {
	      value = grid.getCellValue(row, column);
	    }


	    // If the filter's condition is a RegExp, then use it
	    if (filter.condition instanceof RegExp) {
	      return filter.condition.test(value);
	    }

	    // If the filter's condition is a function, run it
	    if (conditionType === 'function') {
	      return filter.condition(term, value, row, column);
	    }

	    if (filter.startswithRE) {
	      return filter.startswithRE.test(value);
	    }

	    if (filter.endswithRE) {
	      return filter.endswithRE.test(value);
	    }

	    if (filter.containsRE) {
	      return filter.containsRE.test(value);
	    }

	    if (filter.exactRE) {
	      return filter.exactRE.test(value);
	    }

	    if (filter.condition === uiGridConstants.filter.NOT_EQUAL) {
	      var regex = new RegExp('^' + term + '$');
	      return !regex.exec(value);
	    }

	    if (typeof(value) === 'number' && typeof(term) === 'string' ){
	      // if the term has a decimal in it, it comes through as '9\.4', we need to take out the \
	      // the same for negative numbers
	      // TODO: I suspect the right answer is to look at escapeRegExp at the top of this code file, maybe it's not needed?
	      var tempFloat = parseFloat(term.replace(/\\\./,'.').replace(/\\\-/,'-'));
	      if (!isNaN(tempFloat)) {
	        term = tempFloat;
	      }
	    }

	    if (filter.flags.date === true) {
	      value = new Date(value);
	      // If the term has a dash in it, it comes through as '\-' -- we need to take out the '\'.
	      term = new Date(term.replace(/\\/g, ''));
	    }

	    if (filter.condition === uiGridConstants.filter.GREATER_THAN) {
	      return (value > term);
	    }

	    if (filter.condition === uiGridConstants.filter.GREATER_THAN_OR_EQUAL) {
	      return (value >= term);
	    }

	    if (filter.condition === uiGridConstants.filter.LESS_THAN) {
	      return (value < term);
	    }

	    if (filter.condition === uiGridConstants.filter.LESS_THAN_OR_EQUAL) {
	      return (value <= term);
	    }

	    return true;
	  };


	  /**
	   * @ngdoc boolean
	   * @name useExternalFiltering
	   * @propertyOf ui.grid.class:GridOptions
	   * @description False by default. When enabled, this setting suppresses the internal filtering.
	   * All UI logic will still operate, allowing filter conditions to be set and modified.
	   * 
	   * The external filter logic can listen for the `filterChange` event, which fires whenever
	   * a filter has been adjusted.
	   */
	  /**
	   * @ngdoc function
	   * @name searchColumn
	   * @methodOf ui.grid.service:rowSearcher
	   * @description Process provided filters on provided column against a given row. If the row meets 
	   * the conditions on all the filters, return true.
	   * @param {Grid} grid Grid to search in
	   * @param {GridRow} row Row to search on
	   * @param {GridCol} column Column with the filters to use
	   * @param {array} filters array of pre-parsed/preprocessed filters to apply
	   * @returns {boolean} Whether the column matches or not.
	   */
	  rowSearcher.searchColumn = function searchColumn(grid, row, column, filters) {
	    if (grid.options.useExternalFiltering) {
	      return true;
	    }

	    var filtersLength = filters.length;
	    for (var i = 0; i < filtersLength; i++) {
	      var filter = filters[i];

	      if ( !gridUtil.isNullOrUndefined(filter.term) && filter.term !== '' || filter.noTerm ){ 
	        var ret = rowSearcher.runColumnFilter(grid, row, column, filter);
	        if (!ret) {
	          return false;
	        }
	      }
	    }

	    return true;
	  };


	  /**
	   * @ngdoc function
	   * @name search
	   * @methodOf ui.grid.service:rowSearcher
	   * @description Run a search across the given rows and columns, marking any rows that don't 
	   * match the stored col.filters or col.filter as invisible.
	   * @param {Grid} grid Grid instance to search inside
	   * @param {Array[GridRow]} rows GridRows to filter
	   * @param {Array[GridColumn]} columns GridColumns with filters to process
	   */
	  rowSearcher.search = function search(grid, rows, columns) {
	    /*
	     * Added performance optimisations into this code base, as this logic creates deeply nested
	     * loops and is therefore very performance sensitive.  In particular, avoiding forEach as
	     * this impacts some browser optimisers (particularly Chrome), using iterators instead
	     */

	    // Don't do anything if we weren't passed any rows
	    if (!rows) {
	      return;
	    }

	    // don't filter if filtering currently disabled
	    if (!grid.options.enableFiltering){
	      return rows;
	    }

	    // Build list of filters to apply
	    var filterData = [];

	    var colsLength = columns.length;

	    var hasTerm = function( filters ) {
	      var hasTerm = false;

	      filters.forEach( function (filter) {
	        if ( !gridUtil.isNullOrUndefined(filter.term) && filter.term !== '' || filter.noTerm ){
	          hasTerm = true;
	        }
	      });

	      return hasTerm;
	    };

	    for (var i = 0; i < colsLength; i++) {
	      var col = columns[i];

	      if (typeof(col.filters) !== 'undefined' && hasTerm(col.filters) ) {
	        filterData.push( { col: col, filters: rowSearcher.setupFilters(col.filters) } );
	      }
	    }

	    if (filterData.length > 0) {
	      // define functions outside the loop, performance optimisation
	      var foreachRow = function(grid, row, col, filters){
	        if ( row.visible && !rowSearcher.searchColumn(grid, row, col, filters) ) {
	          row.visible = false;
	        }
	      };

	      var foreachFilterCol = function(grid, filterData){
	        var rowsLength = rows.length;
	        for ( var i = 0; i < rowsLength; i++){
	          foreachRow(grid, rows[i], filterData.col, filterData.filters);  
	        }
	      };

	      // nested loop itself - foreachFilterCol, which in turn calls foreachRow
	      var filterDataLength = filterData.length;
	      for ( var j = 0; j < filterDataLength; j++){
	        foreachFilterCol( grid, filterData[j] );  
	      }

	      if (grid.api.core.raise.rowsVisibleChanged) {
	        grid.api.core.raise.rowsVisibleChanged();
	      }

	      // drop any invisible rows
	      // keeping these, as needed with filtering for trees - we have to come back and make parent nodes visible if child nodes are selected in the filter
	      // rows = rows.filter(function(row){ return row.visible; });

	    }

	    return rows;
	  };

	  return rowSearcher;
	}]);

	})();

	(function() {

	var module = angular.module('ui.grid');

	/**
	 * @ngdoc object
	 * @name ui.grid.class:rowSorter
	 * @description rowSorter provides the default sorting mechanisms,
	 * including guessing column types and applying appropriate sort
	 * algorithms
	 *
	 */

	module.service('rowSorter', ['$parse', 'uiGridConstants', function ($parse, uiGridConstants) {
	  var currencyRegexStr =
	    '(' +
	    uiGridConstants.CURRENCY_SYMBOLS
	      .map(function (a) { return '\\' + a; }) // Escape all the currency symbols ($ at least will jack up this regex)
	      .join('|') + // Join all the symbols together with |s
	    ')?';

	  // /^[-+]?[£$¤¥]?[\d,.]+%?$/
	  var numberStrRegex = new RegExp('^[-+]?' + currencyRegexStr + '[\\d,.]+' + currencyRegexStr + '%?$');

	  var rowSorter = {
	    // Cache of sorting functions. Once we create them, we don't want to keep re-doing it
	    //   this takes a piece of data from the cell and tries to determine its type and what sorting
	    //   function to use for it
	    colSortFnCache: {}
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:rowSorter
	   * @name guessSortFn
	   * @description Assigns a sort function to use based on the itemType in the column
	   * @param {string} itemType one of 'number', 'boolean', 'string', 'date', 'object'.  And
	   * error will be thrown for any other type.
	   * @returns {function} a sort function that will sort that type
	   */
	  rowSorter.guessSortFn = function guessSortFn(itemType) {
	    switch (itemType) {
	      case "number":
	        return rowSorter.sortNumber;
	      case "numberStr":
	        return rowSorter.sortNumberStr;
	      case "boolean":
	        return rowSorter.sortBool;
	      case "string":
	        return rowSorter.sortAlpha;
	      case "date":
	        return rowSorter.sortDate;
	      case "object":
	        return rowSorter.basicSort;
	      default:
	        throw new Error('No sorting function found for type:' + itemType);
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:rowSorter
	   * @name handleNulls
	   * @description Sorts nulls and undefined to the bottom (top when
	   * descending).  Called by each of the internal sorters before
	   * attempting to sort.  Note that this method is available on the core api
	   * via gridApi.core.sortHandleNulls
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} null if there were no nulls/undefineds, otherwise returns
	   * a sort value that should be passed back from the sort function
	   */
	  rowSorter.handleNulls = function handleNulls(a, b) {
	    // We want to allow zero values and false values to be evaluated in the sort function
	    if ((!a && a !== 0 && a !== false) || (!b && b !== 0 && b !== false)) {
	      // We want to force nulls and such to the bottom when we sort... which effectively is "greater than"
	      if ((!a && a !== 0 && a !== false) && (!b && b !== 0 && b !== false)) {
	        return 0;
	      }
	      else if (!a && a !== 0 && a !== false) {
	        return 1;
	      }
	      else if (!b && b !== 0 && b !== false) {
	        return -1;
	      }
	    }
	    return null;
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:rowSorter
	   * @name basicSort
	   * @description Sorts any values that provide the < method, including strings
	   * or numbers.  Handles nulls and undefined through calling handleNulls
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.basicSort = function basicSort(a, b) {
	    var nulls = rowSorter.handleNulls(a, b);
	    if ( nulls !== null ){
	      return nulls;
	    } else {
	      if (a === b) {
	        return 0;
	      }
	      if (a < b) {
	        return -1;
	      }
	      return 1;
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:rowSorter
	   * @name sortNumber
	   * @description Sorts numerical values.  Handles nulls and undefined through calling handleNulls
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.sortNumber = function sortNumber(a, b) {
	    var nulls = rowSorter.handleNulls(a, b);
	    if ( nulls !== null ){
	      return nulls;
	    } else {
	      return a - b;
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:rowSorter
	   * @name sortNumberStr
	   * @description Sorts numerical values that are stored in a string (i.e. parses them to numbers first).
	   * Handles nulls and undefined through calling handleNulls
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.sortNumberStr = function sortNumberStr(a, b) {
	    var nulls = rowSorter.handleNulls(a, b);
	    if ( nulls !== null ){
	      return nulls;
	    } else {
	      var numA, // The parsed number form of 'a'
	          numB, // The parsed number form of 'b'
	          badA = false,
	          badB = false;

	      // Try to parse 'a' to a float
	      numA = parseFloat(a.replace(/[^0-9.-]/g, ''));

	      // If 'a' couldn't be parsed to float, flag it as bad
	      if (isNaN(numA)) {
	          badA = true;
	      }

	      // Try to parse 'b' to a float
	      numB = parseFloat(b.replace(/[^0-9.-]/g, ''));

	      // If 'b' couldn't be parsed to float, flag it as bad
	      if (isNaN(numB)) {
	          badB = true;
	      }

	      // We want bad ones to get pushed to the bottom... which effectively is "greater than"
	      if (badA && badB) {
	          return 0;
	      }

	      if (badA) {
	          return 1;
	      }

	      if (badB) {
	          return -1;
	      }

	      return numA - numB;
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:rowSorter
	   * @name sortAlpha
	   * @description Sorts string values. Handles nulls and undefined through calling handleNulls
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.sortAlpha = function sortAlpha(a, b) {
	    var nulls = rowSorter.handleNulls(a, b);
	    if ( nulls !== null ){
	      return nulls;
	    } else {
	      var strA = a.toString().toLowerCase(),
	          strB = b.toString().toLowerCase();

	      return strA === strB ? 0 : strA.localeCompare(strB);
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:rowSorter
	   * @name sortDate
	   * @description Sorts date values. Handles nulls and undefined through calling handleNulls.
	   * Handles date strings by converting to Date object if not already an instance of Date
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.sortDate = function sortDate(a, b) {
	    var nulls = rowSorter.handleNulls(a, b);
	    if ( nulls !== null ){
	      return nulls;
	    } else {
	      if (!(a instanceof Date)) {
	        a = new Date(a);
	      }
	      if (!(b instanceof Date)){
	        b = new Date(b);
	      }
	      var timeA = a.getTime(),
	          timeB = b.getTime();

	      return timeA === timeB ? 0 : (timeA < timeB ? -1 : 1);
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:rowSorter
	   * @name sortBool
	   * @description Sorts boolean values, true is considered larger than false.
	   * Handles nulls and undefined through calling handleNulls
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.sortBool = function sortBool(a, b) {
	    var nulls = rowSorter.handleNulls(a, b);
	    if ( nulls !== null ){
	      return nulls;
	    } else {
	      if (a && b) {
	        return 0;
	      }

	      if (!a && !b) {
	        return 0;
	      }
	      else {
	        return a ? 1 : -1;
	      }
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:rowSorter
	   * @name getSortFn
	   * @description Get the sort function for the column.  Looks first in
	   * rowSorter.colSortFnCache using the column name, failing that it
	   * looks at col.sortingAlgorithm (and puts it in the cache), failing that
	   * it guesses the sort algorithm based on the data type.
	   *
	   * The cache currently seems a bit pointless, as none of the work we do is
	   * processor intensive enough to need caching.  Presumably in future we might
	   * inspect the row data itself to guess the sort function, and in that case
	   * it would make sense to have a cache, the infrastructure is in place to allow
	   * that.
	   *
	   * @param {Grid} grid the grid to consider
	   * @param {GridCol} col the column to find a function for
	   * @param {array} rows an array of grid rows.  Currently unused, but presumably in future
	   * we might inspect the rows themselves to decide what sort of data might be there
	   * @returns {function} the sort function chosen for the column
	   */
	  rowSorter.getSortFn = function getSortFn(grid, col, rows) {
	    var sortFn, item;

	    // See if we already figured out what to use to sort the column and have it in the cache
	    if (rowSorter.colSortFnCache[col.colDef.name]) {
	      sortFn = rowSorter.colSortFnCache[col.colDef.name];
	    }
	    // If the column has its OWN sorting algorithm, use that
	    else if (col.sortingAlgorithm !== undefined) {
	      sortFn = col.sortingAlgorithm;
	      rowSorter.colSortFnCache[col.colDef.name] = col.sortingAlgorithm;
	    }
	    // Always default to sortAlpha when sorting after a cellFilter
	    else if ( col.sortCellFiltered && col.cellFilter ){
	      sortFn = rowSorter.sortAlpha;
	      rowSorter.colSortFnCache[col.colDef.name] = sortFn;
	    }
	    // Try and guess what sort function to use
	    else {
	      // Guess the sort function
	      sortFn = rowSorter.guessSortFn(col.colDef.type);

	      // If we found a sort function, cache it
	      if (sortFn) {
	        rowSorter.colSortFnCache[col.colDef.name] = sortFn;
	      }
	      else {
	        // We assign the alpha sort because anything that is null/undefined will never get passed to
	        // the actual sorting function. It will get caught in our null check and returned to be sorted
	        // down to the bottom
	        sortFn = rowSorter.sortAlpha;
	      }
	    }

	    return sortFn;
	  };



	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:rowSorter
	   * @name prioritySort
	   * @description Used where multiple columns are present in the sort criteria,
	   * we determine which column should take precedence in the sort by sorting
	   * the columns based on their sort.priority
	   *
	   * @param {gridColumn} a column a
	   * @param {gridColumn} b column b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.prioritySort = function (a, b) {
	    // Both columns have a sort priority
	    if (a.sort.priority !== undefined && b.sort.priority !== undefined) {
	      // A is higher priority
	      if (a.sort.priority < b.sort.priority) {
	        return -1;
	      }
	      // Equal
	      else if (a.sort.priority === b.sort.priority) {
	        return 0;
	      }
	      // B is higher
	      else {
	        return 1;
	      }
	    }
	    // Only A has a priority
	    else if (a.sort.priority || a.sort.priority === undefined) {
	      return -1;
	    }
	    // Only B has a priority
	    else if (b.sort.priority || b.sort.priority === undefined) {
	      return 1;
	    }
	    // Neither has a priority
	    else {
	      return 0;
	    }
	  };


	  /**
	   * @ngdoc object
	   * @name useExternalSorting
	   * @propertyOf ui.grid.class:GridOptions
	   * @description Prevents the internal sorting from executing.  Events will
	   * still be fired when the sort changes, and the sort information on
	   * the columns will be updated, allowing an external sorter (for example,
	   * server sorting) to be implemented.  Defaults to false.
	   *
	   */
	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:rowSorter
	   * @name sort
	   * @description sorts the grid
	   * @param {Object} grid the grid itself
	   * @param {array} rows the rows to be sorted
	   * @param {array} columns the columns in which to look
	   * for sort criteria
	   * @returns {array} sorted rows
	   */
	  rowSorter.sort = function rowSorterSort(grid, rows, columns) {
	    // first make sure we are even supposed to do work
	    if (!rows) {
	      return;
	    }

	    if (grid.options.useExternalSorting){
	      return rows;
	    }

	    // Build the list of columns to sort by
	    var sortCols = [];
	    columns.forEach(function (col) {
	      if (col.sort && !col.sort.ignoreSort && col.sort.direction && (col.sort.direction === uiGridConstants.ASC || col.sort.direction === uiGridConstants.DESC)) {
	        sortCols.push(col);
	      }
	    });

	    // Sort the "sort columns" by their sort priority
	    sortCols = sortCols.sort(rowSorter.prioritySort);

	    // Now rows to sort by, maintain original order
	    if (sortCols.length === 0) {
	      return rows;
	    }

	    // Re-usable variables
	    var col, direction;

	    // put a custom index field on each row, used to make a stable sort out of unstable sorts (e.g. Chrome)
	    var setIndex = function( row, idx ){
	      row.entity.$$uiGridIndex = idx;
	    };
	    rows.forEach(setIndex);

	    // IE9-11 HACK.... the 'rows' variable would be empty where we call rowSorter.getSortFn(...) below. We have to use a separate reference
	    // var d = data.slice(0);
	    var r = rows.slice(0);

	    // Now actually sort the data
	    var rowSortFn = function (rowA, rowB) {
	      var tem = 0,
	          idx = 0,
	          sortFn;

	      while (tem === 0 && idx < sortCols.length) {
	        // grab the metadata for the rest of the logic
	        col = sortCols[idx];
	        direction = sortCols[idx].sort.direction;

	        sortFn = rowSorter.getSortFn(grid, col, r);

	        var propA, propB;

	        if ( col.sortCellFiltered ){
	          propA = grid.getCellDisplayValue(rowA, col);
	          propB = grid.getCellDisplayValue(rowB, col);
	        } else {
	          propA = grid.getCellValue(rowA, col);
	          propB = grid.getCellValue(rowB, col);
	        }

	        tem = sortFn(propA, propB, rowA, rowB, direction);

	        idx++;
	      }

	      // Chrome doesn't implement a stable sort function.  If our sort returns 0
	      // (i.e. the items are equal), and we're at the last sort column in the list,
	      // then return the previous order using our custom
	      // index variable
	      if (tem === 0 ) {
	        return rowA.entity.$$uiGridIndex - rowB.entity.$$uiGridIndex;
	      }

	      // Made it this far, we don't have to worry about null & undefined
	      if (direction === uiGridConstants.ASC) {
	        return tem;
	      } else {
	        return 0 - tem;
	      }
	    };

	    var newRows = rows.sort(rowSortFn);

	    // remove the custom index field on each row, used to make a stable sort out of unstable sorts (e.g. Chrome)
	    var clearIndex = function( row, idx ){
	       delete row.entity.$$uiGridIndex;
	    };
	    rows.forEach(clearIndex);

	    return newRows;
	  };

	  return rowSorter;
	}]);

	})();

	(function() {

	var module = angular.module('ui.grid');

	var bindPolyfill;
	if (typeof Function.prototype.bind !== "function") {
	  bindPolyfill = function() {
	    var slice = Array.prototype.slice;
	    return function(context) {
	      var fn = this,
	        args = slice.call(arguments, 1);
	      if (args.length) {
	        return function() {
	          return arguments.length ? fn.apply(context, args.concat(slice.call(arguments))) : fn.apply(context, args);
	        };
	      }
	      return function() {
	        return arguments.length ? fn.apply(context, arguments) : fn.call(context);
	      };
	    };
	  };
	}

	function  getStyles (elem) {
	  var e = elem;
	  if (typeof(e.length) !== 'undefined' && e.length) {
	    e = elem[0];
	  }

	  return e.ownerDocument.defaultView.getComputedStyle(e, null);
	}

	var rnumnonpx = new RegExp( "^(" + (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source + ")(?!px)[a-z%]+$", "i" ),
	    // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	    rdisplayswap = /^(block|none|table(?!-c[ea]).+)/,
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" };

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	  var i = extra === ( isBorderBox ? 'border' : 'content' ) ?
	          // If we already have the right measurement, avoid augmentation
	          4 :
	          // Otherwise initialize for horizontal or vertical properties
	          name === 'width' ? 1 : 0,

	          val = 0;

	  var sides = ['Top', 'Right', 'Bottom', 'Left'];

	  for ( ; i < 4; i += 2 ) {
	    var side = sides[i];
	    // dump('side', side);

	    // both box models exclude margin, so add it if we want it
	    if ( extra === 'margin' ) {
	      var marg = parseFloat(styles[extra + side]);
	      if (!isNaN(marg)) {
	        val += marg;
	      }
	    }
	    // dump('val1', val);

	    if ( isBorderBox ) {
	      // border-box includes padding, so remove it if we want content
	      if ( extra === 'content' ) {
	        var padd = parseFloat(styles['padding' + side]);
	        if (!isNaN(padd)) {
	          val -= padd;
	          // dump('val2', val);
	        }
	      }

	      // at this point, extra isn't border nor margin, so remove border
	      if ( extra !== 'margin' ) {
	        var bordermarg = parseFloat(styles['border' + side + 'Width']);
	        if (!isNaN(bordermarg)) {
	          val -= bordermarg;
	          // dump('val3', val);
	        }
	      }
	    }
	    else {
	      // at this point, extra isn't content, so add padding
	      var nocontentPad = parseFloat(styles['padding' + side]);
	      if (!isNaN(nocontentPad)) {
	        val += nocontentPad;
	        // dump('val4', val);
	      }

	      // at this point, extra isn't content nor padding, so add border
	      if ( extra !== 'padding') {
	        var nocontentnopad = parseFloat(styles['border' + side + 'Width']);
	        if (!isNaN(nocontentnopad)) {
	          val += nocontentnopad;
	          // dump('val5', val);
	        }
	      }
	    }
	  }

	  // dump('augVal', val);

	  return val;
	}

	function getWidthOrHeight( elem, name, extra ) {
	  // Start with offset property, which is equivalent to the border-box value
	  var valueIsBorderBox = true,
	          val, // = name === 'width' ? elem.offsetWidth : elem.offsetHeight,
	          styles = getStyles(elem),
	          isBorderBox = styles['boxSizing'] === 'border-box';

	  // some non-html elements return undefined for offsetWidth, so check for null/undefined
	  // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	  // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	  if ( val <= 0 || val == null ) {
	    // Fall back to computed then uncomputed css if necessary
	    val = styles[name];
	    if ( val < 0 || val == null ) {
	      val = elem.style[ name ];
	    }

	    // Computed unit is not pixels. Stop here and return.
	    if ( rnumnonpx.test(val) ) {
	      return val;
	    }

	    // we need the check for style in case a browser which returns unreliable values
	    // for getComputedStyle silently falls back to the reliable elem.style
	    valueIsBorderBox = isBorderBox &&
	            ( true || val === elem.style[ name ] ); // use 'true' instead of 'support.boxSizingReliable()'

	    // Normalize "", auto, and prepare for extra
	    val = parseFloat( val ) || 0;
	  }

	  // use the active box-sizing model to add/subtract irrelevant styles
	  var ret = ( val +
	    augmentWidthOrHeight(
	      elem,
	      name,
	      extra || ( isBorderBox ? "border" : "content" ),
	      valueIsBorderBox,
	      styles
	    )
	  );

	  // dump('ret', ret, val);
	  return ret;
	}

	function getLineHeight(elm) {
	  elm = angular.element(elm)[0];
	  var parent = elm.parentElement;

	  if (!parent) {
	    parent = document.getElementsByTagName('body')[0];
	  }

	  return parseInt( getStyles(parent).fontSize ) || parseInt( getStyles(elm).fontSize ) || 16;
	}

	var uid = ['0', '0', '0', '0'];
	var uidPrefix = 'uiGrid-';

	/**
	 *  @ngdoc service
	 *  @name ui.grid.service:GridUtil
	 *
	 *  @description Grid utility functions
	 */
	module.service('gridUtil', ['$log', '$window', '$document', '$http', '$templateCache', '$timeout', '$interval', '$injector', '$q', '$interpolate', 'uiGridConstants',
	  function ($log, $window, $document, $http, $templateCache, $timeout, $interval, $injector, $q, $interpolate, uiGridConstants) {
	  var s = {

	    augmentWidthOrHeight: augmentWidthOrHeight,

	    getStyles: getStyles,

	    /**
	     * @ngdoc method
	     * @name createBoundedWrapper
	     * @methodOf ui.grid.service:GridUtil
	     *
	     * @param {object} Object to bind 'this' to
	     * @param {method} Method to bind
	     * @returns {Function} The wrapper that performs the binding
	     *
	     * @description
	     * Binds given method to given object.
	     *
	     * By means of a wrapper, ensures that ``method`` is always bound to
	     * ``object`` regardless of its calling environment.
	     * Iow, inside ``method``, ``this`` always points to ``object``.
	     *
	     * See http://alistapart.com/article/getoutbindingsituations
	     *
	     */
	    createBoundedWrapper: function(object, method) {
	        return function() {
	            return method.apply(object, arguments);
	        };
	    },


	    /**
	     * @ngdoc method
	     * @name readableColumnName
	     * @methodOf ui.grid.service:GridUtil
	     *
	     * @param {string} columnName Column name as a string
	     * @returns {string} Column name appropriately capitalized and split apart
	     *
	       @example
	       <example module="app">
	        <file name="app.js">
	          var app = angular.module('app', ['ui.grid']);

	          app.controller('MainCtrl', ['$scope', 'gridUtil', function ($scope, gridUtil) {
	            $scope.name = 'firstName';
	            $scope.columnName = function(name) {
	              return gridUtil.readableColumnName(name);
	            };
	          }]);
	        </file>
	        <file name="index.html">
	          <div ng-controller="MainCtrl">
	            <strong>Column name:</strong> <input ng-model="name" />
	            <br>
	            <strong>Output:</strong> <span ng-bind="columnName(name)"></span>
	          </div>
	        </file>
	      </example>
	     */
	    readableColumnName: function (columnName) {
	      // Convert underscores to spaces
	      if (typeof(columnName) === 'undefined' || columnName === undefined || columnName === null) { return columnName; }

	      if (typeof(columnName) !== 'string') {
	        columnName = String(columnName);
	      }

	      return columnName.replace(/_+/g, ' ')
	        // Replace a completely all-capsed word with a first-letter-capitalized version
	        .replace(/^[A-Z]+$/, function (match) {
	          return angular.lowercase(angular.uppercase(match.charAt(0)) + match.slice(1));
	        })
	        // Capitalize the first letter of words
	        .replace(/([\w\u00C0-\u017F]+)/g, function (match) {
	          return angular.uppercase(match.charAt(0)) + match.slice(1);
	        })
	        // Put a space in between words that have partial capilizations (i.e. 'firstName' becomes 'First Name')
	        // .replace(/([A-Z]|[A-Z]\w+)([A-Z])/g, "$1 $2");
	        // .replace(/(\w+?|\w)([A-Z])/g, "$1 $2");
	        .replace(/(\w+?(?=[A-Z]))/g, '$1 ');
	    },

	    /**
	     * @ngdoc method
	     * @name getColumnsFromData
	     * @methodOf ui.grid.service:GridUtil
	     * @description Return a list of column names, given a data set
	     *
	     * @param {string} data Data array for grid
	     * @returns {Object} Column definitions with field accessor and column name
	     *
	     * @example
	       <pre>
	         var data = [
	           { firstName: 'Bob', lastName: 'Jones' },
	           { firstName: 'Frank', lastName: 'Smith' }
	         ];

	         var columnDefs = GridUtil.getColumnsFromData(data, excludeProperties);

	         columnDefs == [
	          {
	            field: 'firstName',
	            name: 'First Name'
	          },
	          {
	            field: 'lastName',
	            name: 'Last Name'
	          }
	         ];
	       </pre>
	     */
	    getColumnsFromData: function (data, excludeProperties) {
	      var columnDefs = [];

	      if (!data || typeof(data[0]) === 'undefined' || data[0] === undefined) { return []; }
	      if (angular.isUndefined(excludeProperties)) { excludeProperties = []; }

	      var item = data[0];

	      angular.forEach(item,function (prop, propName) {
	        if ( excludeProperties.indexOf(propName) === -1){
	          columnDefs.push({
	            name: propName
	          });
	        }
	      });

	      return columnDefs;
	    },

	    /**
	     * @ngdoc method
	     * @name newId
	     * @methodOf ui.grid.service:GridUtil
	     * @description Return a unique ID string
	     *
	     * @returns {string} Unique string
	     *
	     * @example
	       <pre>
	        var id = GridUtil.newId();

	        # 1387305700482;
	       </pre>
	     */
	    newId: (function() {
	      var seedId = new Date().getTime();
	      return function() {
	          return seedId += 1;
	      };
	    })(),


	    /**
	     * @ngdoc method
	     * @name getTemplate
	     * @methodOf ui.grid.service:GridUtil
	     * @description Get's template from cache / element / url
	     *
	     * @param {string|element|promise} Either a string representing the template id, a string representing the template url,
	     *   an jQuery/Angualr element, or a promise that returns the template contents to use.
	     * @returns {object} a promise resolving to template contents
	     *
	     * @example
	     <pre>
	     GridUtil.getTemplate(url).then(function (contents) {
	          alert(contents);
	        })
	     </pre>
	     */
	    getTemplate: function (template) {
	      // Try to fetch the template out of the templateCache
	      if ($templateCache.get(template)) {
	        return s.postProcessTemplate($templateCache.get(template));
	      }

	      // See if the template is itself a promise
	      if (angular.isFunction(template.then)) {
	        return template.then(s.postProcessTemplate);
	      }

	      // If the template is an element, return the element
	      try {
	        if (angular.element(template).length > 0) {
	          return $q.when(template).then(s.postProcessTemplate);
	        }
	      }
	      catch (err){
	        //do nothing; not valid html
	      }

	      s.logDebug('fetching url', template);

	      // Default to trying to fetch the template as a url with $http
	      return $http({ method: 'GET', url: template})
	        .then(
	          function (result) {
	            var templateHtml = result.data.trim();
	            //put in templateCache for next call
	            $templateCache.put(template, templateHtml);
	            return templateHtml;
	          },
	          function (err) {
	            throw new Error("Could not get template " + template + ": " + err);
	          }
	        )
	        .then(s.postProcessTemplate);
	    },

	    //
	    postProcessTemplate: function (template) {
	      var startSym = $interpolate.startSymbol(),
	          endSym = $interpolate.endSymbol();

	      // If either of the interpolation symbols have been changed, we need to alter this template
	      if (startSym !== '{{' || endSym !== '}}') {
	        template = template.replace(/\{\{/g, startSym);
	        template = template.replace(/\}\}/g, endSym);
	      }

	      return $q.when(template);
	    },

	    /**
	     * @ngdoc method
	     * @name guessType
	     * @methodOf ui.grid.service:GridUtil
	     * @description guesses the type of an argument
	     *
	     * @param {string/number/bool/object} item variable to examine
	     * @returns {string} one of the following
	     * - 'string'
	     * - 'boolean'
	     * - 'number'
	     * - 'date'
	     * - 'object'
	     */
	    guessType : function (item) {
	      var itemType = typeof(item);

	      // Check for numbers and booleans
	      switch (itemType) {
	        case "number":
	        case "boolean":
	        case "string":
	          return itemType;
	        default:
	          if (angular.isDate(item)) {
	            return "date";
	          }
	          return "object";
	      }
	    },


	  /**
	    * @ngdoc method
	    * @name elementWidth
	    * @methodOf ui.grid.service:GridUtil
	    *
	    * @param {element} element DOM element
	    * @param {string} [extra] Optional modifier for calculation. Use 'margin' to account for margins on element
	    *
	    * @returns {number} Element width in pixels, accounting for any borders, etc.
	    */
	    elementWidth: function (elem) {

	    },

	    /**
	    * @ngdoc method
	    * @name elementHeight
	    * @methodOf ui.grid.service:GridUtil
	    *
	    * @param {element} element DOM element
	    * @param {string} [extra] Optional modifier for calculation. Use 'margin' to account for margins on element
	    *
	    * @returns {number} Element height in pixels, accounting for any borders, etc.
	    */
	    elementHeight: function (elem) {

	    },

	    // Thanks to http://stackoverflow.com/a/13382873/888165
	    getScrollbarWidth: function() {
	        var outer = document.createElement("div");
	        outer.style.visibility = "hidden";
	        outer.style.width = "100px";
	        outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps

	        document.body.appendChild(outer);

	        var widthNoScroll = outer.offsetWidth;
	        // force scrollbars
	        outer.style.overflow = "scroll";

	        // add innerdiv
	        var inner = document.createElement("div");
	        inner.style.width = "100%";
	        outer.appendChild(inner);

	        var widthWithScroll = inner.offsetWidth;

	        // remove divs
	        outer.parentNode.removeChild(outer);

	        return widthNoScroll - widthWithScroll;
	    },

	    swap: function( elem, options, callback, args ) {
	      var ret, name,
	              old = {};

	      // Remember the old values, and insert the new ones
	      for ( name in options ) {
	        old[ name ] = elem.style[ name ];
	        elem.style[ name ] = options[ name ];
	      }

	      ret = callback.apply( elem, args || [] );

	      // Revert the old values
	      for ( name in options ) {
	        elem.style[ name ] = old[ name ];
	      }

	      return ret;
	    },

	    fakeElement: function( elem, options, callback, args ) {
	      var ret, name,
	          newElement = angular.element(elem).clone()[0];

	      for ( name in options ) {
	        newElement.style[ name ] = options[ name ];
	      }

	      angular.element(document.body).append(newElement);

	      ret = callback.call( newElement, newElement );

	      angular.element(newElement).remove();

	      return ret;
	    },

	    /**
	    * @ngdoc method
	    * @name normalizeWheelEvent
	    * @methodOf ui.grid.service:GridUtil
	    *
	    * @param {event} event A mouse wheel event
	    *
	    * @returns {event} A normalized event
	    *
	    * @description
	    * Given an event from this list:
	    *
	    * `wheel, mousewheel, DomMouseScroll, MozMousePixelScroll`
	    *
	    * "normalize" it
	    * so that it stays consistent no matter what browser it comes from (i.e. scale it correctly and make sure the direction is right.)
	    */
	    normalizeWheelEvent: function (event) {
	      // var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];
	      // var toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'];
	      var lowestDelta, lowestDeltaXY;

	      var orgEvent   = event || window.event,
	          args       = [].slice.call(arguments, 1),
	          delta      = 0,
	          deltaX     = 0,
	          deltaY     = 0,
	          absDelta   = 0,
	          absDeltaXY = 0,
	          fn;

	      // event = $.event.fix(orgEvent);
	      // event.type = 'mousewheel';

	      // NOTE: jQuery masks the event and stores it in the event as originalEvent
	      if (orgEvent.originalEvent) {
	        orgEvent = orgEvent.originalEvent;
	      }

	      // Old school scrollwheel delta
	      if ( orgEvent.wheelDelta ) { delta = orgEvent.wheelDelta; }
	      if ( orgEvent.detail )     { delta = orgEvent.detail * -1; }

	      // At a minimum, setup the deltaY to be delta
	      deltaY = delta;

	      // Firefox < 17 related to DOMMouseScroll event
	      if ( orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
	          deltaY = 0;
	          deltaX = delta * -1;
	      }

	      // New school wheel delta (wheel event)
	      if ( orgEvent.deltaY ) {
	          deltaY = orgEvent.deltaY * -1;
	          delta  = deltaY;
	      }
	      if ( orgEvent.deltaX ) {
	          deltaX = orgEvent.deltaX;
	          delta  = deltaX * -1;
	      }

	      // Webkit
	      if ( orgEvent.wheelDeltaY !== undefined ) { deltaY = orgEvent.wheelDeltaY; }
	      if ( orgEvent.wheelDeltaX !== undefined ) { deltaX = orgEvent.wheelDeltaX; }

	      // Look for lowest delta to normalize the delta values
	      absDelta = Math.abs(delta);
	      if ( !lowestDelta || absDelta < lowestDelta ) { lowestDelta = absDelta; }
	      absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX));
	      if ( !lowestDeltaXY || absDeltaXY < lowestDeltaXY ) { lowestDeltaXY = absDeltaXY; }

	      // Get a whole value for the deltas
	      fn     = delta > 0 ? 'floor' : 'ceil';
	      delta  = Math[fn](delta  / lowestDelta);
	      deltaX = Math[fn](deltaX / lowestDeltaXY);
	      deltaY = Math[fn](deltaY / lowestDeltaXY);

	      return {
	        delta: delta,
	        deltaX: deltaX,
	        deltaY: deltaY
	      };
	    },

	    // Stolen from Modernizr
	    // TODO: make this, and everythign that flows from it, robust
	    //http://www.stucox.com/blog/you-cant-detect-a-touchscreen/
	    isTouchEnabled: function() {
	      var bool;

	      if (('ontouchstart' in $window) || $window.DocumentTouch && $document instanceof DocumentTouch) {
	        bool = true;
	      }

	      return bool;
	    },

	    isNullOrUndefined: function(obj) {
	      if (obj === undefined || obj === null) {
	        return true;
	      }
	      return false;
	    },

	    endsWith: function(str, suffix) {
	      if (!str || !suffix || typeof str !== "string") {
	        return false;
	      }
	      return str.indexOf(suffix, str.length - suffix.length) !== -1;
	    },

	    arrayContainsObjectWithProperty: function(array, propertyName, propertyValue) {
	        var found = false;
	        angular.forEach(array, function (object) {
	            if (object[propertyName] === propertyValue) {
	                found = true;
	            }
	        });
	        return found;
	    },

	    //// Shim requestAnimationFrame
	    //requestAnimationFrame: $window.requestAnimationFrame && $window.requestAnimationFrame.bind($window) ||
	    //                       $window.webkitRequestAnimationFrame && $window.webkitRequestAnimationFrame.bind($window) ||
	    //                       function(fn) {
	    //                         return $timeout(fn, 10, false);
	    //                       },

	    numericAndNullSort: function (a, b) {
	      if (a === null) { return 1; }
	      if (b === null) { return -1; }
	      if (a === null && b === null) { return 0; }
	      return a - b;
	    },

	    // Disable ngAnimate animations on an element
	    disableAnimations: function (element) {
	      var $animate;
	      try {
	        $animate = $injector.get('$animate');
	        // See: http://brianhann.com/angular-1-4-breaking-changes-to-be-aware-of/#animate
	        if (angular.version.major > 1 || (angular.version.major === 1 && angular.version.minor >= 4)) {
	          $animate.enabled(element, false);
	        } else {
	          $animate.enabled(false, element);
	        }
	      }
	      catch (e) {}
	    },

	    enableAnimations: function (element) {
	      var $animate;
	      try {
	        $animate = $injector.get('$animate');
	        // See: http://brianhann.com/angular-1-4-breaking-changes-to-be-aware-of/#animate
	        if (angular.version.major > 1 || (angular.version.major === 1 && angular.version.minor >= 4)) {
	          $animate.enabled(element, true);
	        } else {
	          $animate.enabled(true, element);
	        }
	        return $animate;
	      }
	      catch (e) {}
	    },

	    // Blatantly stolen from Angular as it isn't exposed (yet. 2.0 maybe?)
	    nextUid: function nextUid() {
	      var index = uid.length;
	      var digit;

	      while (index) {
	        index--;
	        digit = uid[index].charCodeAt(0);
	        if (digit === 57 /*'9'*/) {
	          uid[index] = 'A';
	          return uidPrefix + uid.join('');
	        }
	        if (digit === 90  /*'Z'*/) {
	          uid[index] = '0';
	        } else {
	          uid[index] = String.fromCharCode(digit + 1);
	          return uidPrefix + uid.join('');
	        }
	      }
	      uid.unshift('0');

	      return uidPrefix + uid.join('');
	    },

	    // Blatantly stolen from Angular as it isn't exposed (yet. 2.0 maybe?)
	    hashKey: function hashKey(obj) {
	      var objType = typeof obj,
	          key;

	      if (objType === 'object' && obj !== null) {
	        if (typeof (key = obj.$$hashKey) === 'function') {
	          // must invoke on object to keep the right this
	          key = obj.$$hashKey();
	        }
	        else if (typeof(obj.$$hashKey) !== 'undefined' && obj.$$hashKey) {
	          key = obj.$$hashKey;
	        }
	        else if (key === undefined) {
	          key = obj.$$hashKey = s.nextUid();
	        }
	      }
	      else {
	        key = obj;
	      }

	      return objType + ':' + key;
	    },

	    resetUids: function () {
	      uid = ['0', '0', '0'];
	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:GridUtil
	     * @name logError
	     * @description wraps the $log method, allowing us to choose different
	     * treatment within ui-grid if we so desired.  At present we only log
	     * error messages if uiGridConstants.LOG_ERROR_MESSAGES is set to true
	     * @param {string} logMessage message to be logged to the console
	     *
	     */
	    logError: function( logMessage ){
	      if ( uiGridConstants.LOG_ERROR_MESSAGES ){
	        $log.error( logMessage );
	      }
	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:GridUtil
	     * @name logWarn
	     * @description wraps the $log method, allowing us to choose different
	     * treatment within ui-grid if we so desired.  At present we only log
	     * warning messages if uiGridConstants.LOG_WARN_MESSAGES is set to true
	     * @param {string} logMessage message to be logged to the console
	     *
	     */
	    logWarn: function( logMessage ){
	      if ( uiGridConstants.LOG_WARN_MESSAGES ){
	        $log.warn( logMessage );
	      }
	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:GridUtil
	     * @name logDebug
	     * @description wraps the $log method, allowing us to choose different
	     * treatment within ui-grid if we so desired.  At present we only log
	     * debug messages if uiGridConstants.LOG_DEBUG_MESSAGES is set to true
	     *
	     */
	    logDebug: function() {
	      if ( uiGridConstants.LOG_DEBUG_MESSAGES ){
	        $log.debug.apply($log, arguments);
	      }
	    }

	  };

	  /**
	   * @ngdoc object
	   * @name focus
	   * @propertyOf ui.grid.service:GridUtil
	   * @description Provies a set of methods to set the document focus inside the grid.
	   * See {@link ui.grid.service:GridUtil.focus} for more information.
	   */

	  /**
	   * @ngdoc object
	   * @name ui.grid.service:GridUtil.focus
	   * @description Provies a set of methods to set the document focus inside the grid.
	   * Timeouts are utilized to ensure that the focus is invoked after any other event has been triggered.
	   * e.g. click events that need to run before the focus or
	   * inputs elements that are in a disabled state but are enabled when those events
	   * are triggered.
	   */
	  s.focus = {
	    queue: [],
	    //http://stackoverflow.com/questions/25596399/set-element-focus-in-angular-way
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:GridUtil.focus
	     * @name byId
	     * @description Sets the focus of the document to the given id value.
	     * If provided with the grid object it will automatically append the grid id.
	     * This is done to encourage unique dom id's as it allows for multiple grids on a
	     * page.
	     * @param {String} id the id of the dom element to set the focus on
	     * @param {Object=} Grid the grid object for this grid instance. See: {@link ui.grid.class:Grid}
	     * @param {Number} Grid.id the unique id for this grid. Already set on an initialized grid object.
	     * @returns {Promise} The `$timeout` promise that will be resolved once focus is set. If another focus is requested before this request is evaluated.
	     * then the promise will fail with the `'canceled'` reason.
	     */
	    byId: function (id, Grid) {
	      this._purgeQueue();
	      var promise = $timeout(function() {
	        var elementID = (Grid && Grid.id ? Grid.id + '-' : '') + id;
	        var element = $window.document.getElementById(elementID);
	        if (element) {
	          element.focus();
	        } else {
	          s.logWarn('[focus.byId] Element id ' + elementID + ' was not found.');
	        }
	      });
	      this.queue.push(promise);
	      return promise;
	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:GridUtil.focus
	     * @name byElement
	     * @description Sets the focus of the document to the given dom element.
	     * @param {(element|angular.element)} element the DOM element to set the focus on
	     * @returns {Promise} The `$timeout` promise that will be resolved once focus is set. If another focus is requested before this request is evaluated.
	     * then the promise will fail with the `'canceled'` reason.
	     */
	    byElement: function(element){
	      if (!angular.isElement(element)){
	        s.logWarn("Trying to focus on an element that isn\'t an element.");
	        return $q.reject('not-element');
	      }
	      element = angular.element(element);
	      this._purgeQueue();
	      var promise = $timeout(function(){
	        if (element){
	          element[0].focus();
	        }
	      });
	      this.queue.push(promise);
	      return promise;
	    },
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:GridUtil.focus
	     * @name bySelector
	     * @description Sets the focus of the document to the given dom element.
	     * @param {(element|angular.element)} parentElement the parent/ancestor of the dom element that you are selecting using the query selector
	     * @param {String} querySelector finds the dom element using the {@link http://www.w3schools.com/jsref/met_document_queryselector.asp querySelector}
	     * @param {boolean} [aSync=false] If true then the selector will be querried inside of a timeout. Otherwise the selector will be querried imidately
	     * then the focus will be called.
	     * @returns {Promise} The `$timeout` promise that will be resolved once focus is set. If another focus is requested before this request is evaluated.
	     * then the promise will fail with the `'canceled'` reason.
	     */
	    bySelector: function(parentElement, querySelector, aSync){
	      var self = this;
	      if (!angular.isElement(parentElement)){
	        throw new Error("The parent element is not an element.");
	      }
	      // Ensure that this is an angular element.
	      // It is fine if this is already an angular element.
	      parentElement = angular.element(parentElement);
	      var focusBySelector = function(){
	        var element = parentElement[0].querySelector(querySelector);
	        return self.byElement(element);
	      };
	      this._purgeQueue();
	      if (aSync){ //Do this asynchronysly
	        var promise = $timeout(focusBySelector);
	        this.queue.push($timeout(focusBySelector));
	        return promise;
	      } else {
	        return focusBySelector();
	      }
	    },
	    _purgeQueue: function(){
	      this.queue.forEach(function(element){
	        $timeout.cancel(element);
	      });
	      this.queue = [];
	    }
	  };


	  ['width', 'height'].forEach(function (name) {
	    var capsName = angular.uppercase(name.charAt(0)) + name.substr(1);
	    s['element' + capsName] = function (elem, extra) {
	      var e = elem;
	      if (e && typeof(e.length) !== 'undefined' && e.length) {
	        e = elem[0];
	      }

	      if (e) {
	        var styles = getStyles(e);
	        return e.offsetWidth === 0 && rdisplayswap.test(styles.display) ?
	                  s.swap(e, cssShow, function() {
	                    return getWidthOrHeight(e, name, extra );
	                  }) :
	                  getWidthOrHeight( e, name, extra );
	      }
	      else {
	        return null;
	      }
	    };

	    s['outerElement' + capsName] = function (elem, margin) {
	      return elem ? s['element' + capsName].call(this, elem, margin ? 'margin' : 'border') : null;
	    };
	  });

	  // http://stackoverflow.com/a/24107550/888165
	  s.closestElm = function closestElm(el, selector) {
	    if (typeof(el.length) !== 'undefined' && el.length) {
	      el = el[0];
	    }

	    var matchesFn;

	    // find vendor prefix
	    ['matches','webkitMatchesSelector','mozMatchesSelector','msMatchesSelector','oMatchesSelector'].some(function(fn) {
	        if (typeof document.body[fn] === 'function') {
	            matchesFn = fn;
	            return true;
	        }
	        return false;
	    });

	    // traverse parents
	    var parent;
	    while (el !== null) {
	      parent = el.parentElement;
	      if (parent !== null && parent[matchesFn](selector)) {
	          return parent;
	      }
	      el = parent;
	    }

	    return null;
	  };

	  s.type = function (obj) {
	    var text = Function.prototype.toString.call(obj.constructor);
	    return text.match(/function (.*?)\(/)[1];
	  };

	  s.getBorderSize = function getBorderSize(elem, borderType) {
	    if (typeof(elem.length) !== 'undefined' && elem.length) {
	      elem = elem[0];
	    }

	    var styles = getStyles(elem);

	    // If a specific border is supplied, like 'top', read the 'borderTop' style property
	    if (borderType) {
	      borderType = 'border' + borderType.charAt(0).toUpperCase() + borderType.slice(1);
	    }
	    else {
	      borderType = 'border';
	    }

	    borderType += 'Width';

	    var val = parseInt(styles[borderType], 10);

	    if (isNaN(val)) {
	      return 0;
	    }
	    else {
	      return val;
	    }
	  };

	  // http://stackoverflow.com/a/22948274/888165
	  // TODO: Opera? Mobile?
	  s.detectBrowser = function detectBrowser() {
	    var userAgent = $window.navigator.userAgent;

	    var browsers = {chrome: /chrome/i, safari: /safari/i, firefox: /firefox/i, ie: /internet explorer|trident\//i};

	    for (var key in browsers) {
	      if (browsers[key].test(userAgent)) {
	        return key;
	      }
	    }

	    return 'unknown';
	  };

	  // Borrowed from https://github.com/othree/jquery.rtl-scroll-type
	  // Determine the scroll "type" this browser is using for RTL
	  s.rtlScrollType = function rtlScrollType() {
	    if (rtlScrollType.type) {
	      return rtlScrollType.type;
	    }

	    var definer = angular.element('<div dir="rtl" style="font-size: 14px; width: 1px; height: 1px; position: absolute; top: -1000px; overflow: scroll">A</div>')[0],
	        type = 'reverse';

	    document.body.appendChild(definer);

	    if (definer.scrollLeft > 0) {
	      type = 'default';
	    }
	    else {
	      definer.scrollLeft = 1;
	      if (definer.scrollLeft === 0) {
	        type = 'negative';
	      }
	    }

	    angular.element(definer).remove();
	    rtlScrollType.type = type;

	    return type;
	  };

	    /**
	     * @ngdoc method
	     * @name normalizeScrollLeft
	     * @methodOf ui.grid.service:GridUtil
	     *
	     * @param {element} element The element to get the `scrollLeft` from.
	     * @param {grid} grid -  grid used to normalize (uses the rtl property)
	     *
	     * @returns {number} A normalized scrollLeft value for the current browser.
	     *
	     * @description
	     * Browsers currently handle RTL in different ways, resulting in inconsistent scrollLeft values. This method normalizes them
	     */
	  s.normalizeScrollLeft = function normalizeScrollLeft(element, grid) {
	    if (typeof(element.length) !== 'undefined' && element.length) {
	      element = element[0];
	    }

	    var scrollLeft = element.scrollLeft;

	    if (grid.isRTL()) {
	      switch (s.rtlScrollType()) {
	        case 'default':
	          return element.scrollWidth - scrollLeft - element.clientWidth;
	        case 'negative':
	          return Math.abs(scrollLeft);
	        case 'reverse':
	          return scrollLeft;
	      }
	    }

	    return scrollLeft;
	  };

	  /**
	  * @ngdoc method
	  * @name denormalizeScrollLeft
	  * @methodOf ui.grid.service:GridUtil
	  *
	  * @param {element} element The element to normalize the `scrollLeft` value for
	  * @param {number} scrollLeft The `scrollLeft` value to denormalize.
	  * @param {grid} grid The grid that owns the scroll event.
	  *
	  * @returns {number} A normalized scrollLeft value for the current browser.
	  *
	  * @description
	  * Browsers currently handle RTL in different ways, resulting in inconsistent scrollLeft values. This method denormalizes a value for the current browser.
	  */
	  s.denormalizeScrollLeft = function denormalizeScrollLeft(element, scrollLeft, grid) {
	    if (typeof(element.length) !== 'undefined' && element.length) {
	      element = element[0];
	    }

	    if (grid.isRTL()) {
	      switch (s.rtlScrollType()) {
	        case 'default':
	          // Get the max scroll for the element
	          var maxScrollLeft = element.scrollWidth - element.clientWidth;

	          // Subtract the current scroll amount from the max scroll
	          return maxScrollLeft - scrollLeft;
	        case 'negative':
	          return scrollLeft * -1;
	        case 'reverse':
	          return scrollLeft;
	      }
	    }

	    return scrollLeft;
	  };

	    /**
	     * @ngdoc method
	     * @name preEval
	     * @methodOf ui.grid.service:GridUtil
	     *
	     * @param {string} path Path to evaluate
	     *
	     * @returns {string} A path that is normalized.
	     *
	     * @description
	     * Takes a field path and converts it to bracket notation to allow for special characters in path
	     * @example
	     * <pre>
	     * gridUtil.preEval('property') == 'property'
	     * gridUtil.preEval('nested.deep.prop-erty') = "nested['deep']['prop-erty']"
	     * </pre>
	     */
	  s.preEval = function (path) {
	    var m = uiGridConstants.BRACKET_REGEXP.exec(path);
	    if (m) {
	      return (m[1] ? s.preEval(m[1]) : m[1]) + m[2] + (m[3] ? s.preEval(m[3]) : m[3]);
	    } else {
	      path = path.replace(uiGridConstants.APOS_REGEXP, '\\\'');
	      var parts = path.split(uiGridConstants.DOT_REGEXP);
	      var preparsed = [parts.shift()];    // first item must be var notation, thus skip
	      angular.forEach(parts, function (part) {
	        preparsed.push(part.replace(uiGridConstants.FUNC_REGEXP, '\']$1'));
	      });
	      return preparsed.join('[\'');
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name debounce
	   * @methodOf ui.grid.service:GridUtil
	   *
	   * @param {function} func function to debounce
	   * @param {number} wait milliseconds to delay
	   * @param {boolean} immediate execute before delay
	   *
	   * @returns {function} A function that can be executed as debounced function
	   *
	   * @description
	   * Copied from https://github.com/shahata/angular-debounce
	   * Takes a function, decorates it to execute only 1 time after multiple calls, and returns the decorated function
	   * @example
	   * <pre>
	   * var debouncedFunc =  gridUtil.debounce(function(){alert('debounced');}, 500);
	   * debouncedFunc();
	   * debouncedFunc();
	   * debouncedFunc();
	   * </pre>
	   */
	  s.debounce =  function (func, wait, immediate) {
	    var timeout, args, context, result;
	    function debounce() {
	      /* jshint validthis:true */
	      context = this;
	      args = arguments;
	      var later = function () {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	        }
	      };
	      var callNow = immediate && !timeout;
	      if (timeout) {
	        $timeout.cancel(timeout);
	      }
	      timeout = $timeout(later, wait, false);
	      if (callNow) {
	        result = func.apply(context, args);
	      }
	      return result;
	    }
	    debounce.cancel = function () {
	      $timeout.cancel(timeout);
	      timeout = null;
	    };
	    return debounce;
	  };

	  /**
	   * @ngdoc method
	   * @name throttle
	   * @methodOf ui.grid.service:GridUtil
	   *
	   * @param {function} func function to throttle
	   * @param {number} wait milliseconds to delay after first trigger
	   * @param {Object} params to use in throttle.
	   *
	   * @returns {function} A function that can be executed as throttled function
	   *
	   * @description
	   * Adapted from debounce function (above)
	   * Potential keys for Params Object are:
	   *    trailing (bool) - whether to trigger after throttle time ends if called multiple times
	   * Updated to use $interval rather than $timeout, as protractor (e2e tests) is able to work with $interval,
	   * but not with $timeout
	   *
	   * Note that when using throttle, you need to use throttle to create a new function upfront, then use the function
	   * return from that call each time you need to call throttle.  If you call throttle itself repeatedly, the lastCall
	   * variable will get overwritten and the throttling won't work
	   *
	   * @example
	   * <pre>
	   * var throttledFunc =  gridUtil.throttle(function(){console.log('throttled');}, 500, {trailing: true});
	   * throttledFunc(); //=> logs throttled
	   * throttledFunc(); //=> queues attempt to log throttled for ~500ms (since trailing param is truthy)
	   * throttledFunc(); //=> updates arguments to keep most-recent request, but does not do anything else.
	   * </pre>
	   */
	  s.throttle = function(func, wait, options){
	    options = options || {};
	    var lastCall = 0, queued = null, context, args;

	    function runFunc(endDate){
	      lastCall = +new Date();
	      func.apply(context, args);
	      $interval(function(){queued = null; }, 0, 1, false);
	    }

	    return function(){
	      /* jshint validthis:true */
	      context = this;
	      args = arguments;
	      if (queued === null){
	        var sinceLast = +new Date() - lastCall;
	        if (sinceLast > wait){
	          runFunc();
	        }
	        else if (options.trailing){
	          queued = $interval(runFunc, wait - sinceLast, 1, false);
	        }
	      }
	    };
	  };

	  s.on = {};
	  s.off = {};
	  s._events = {};

	  s.addOff = function (eventName) {
	    s.off[eventName] = function (elm, fn) {
	      var idx = s._events[eventName].indexOf(fn);
	      if (idx > 0) {
	        s._events[eventName].removeAt(idx);
	      }
	    };
	  };

	  var mouseWheeltoBind = ( 'onwheel' in document || document.documentMode >= 9 ) ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
	      nullLowestDeltaTimeout,
	      lowestDelta;

	  s.on.mousewheel = function (elm, fn) {
	    if (!elm || !fn) { return; }

	    var $elm = angular.element(elm);

	    // Store the line height and page height for this particular element
	    $elm.data('mousewheel-line-height', getLineHeight($elm));
	    $elm.data('mousewheel-page-height', s.elementHeight($elm));
	    if (!$elm.data('mousewheel-callbacks')) { $elm.data('mousewheel-callbacks', {}); }

	    var cbs = $elm.data('mousewheel-callbacks');
	    cbs[fn] = (Function.prototype.bind || bindPolyfill).call(mousewheelHandler, $elm[0], fn);

	    // Bind all the mousew heel events
	    for ( var i = mouseWheeltoBind.length; i; ) {
	      $elm.on(mouseWheeltoBind[--i], cbs[fn]);
	    }
	  };
	  s.off.mousewheel = function (elm, fn) {
	    var $elm = angular.element(elm);

	    var cbs = $elm.data('mousewheel-callbacks');
	    var handler = cbs[fn];

	    if (handler) {
	      for ( var i = mouseWheeltoBind.length; i; ) {
	        $elm.off(mouseWheeltoBind[--i], handler);
	      }
	    }

	    delete cbs[fn];

	    if (Object.keys(cbs).length === 0) {
	      $elm.removeData('mousewheel-line-height');
	      $elm.removeData('mousewheel-page-height');
	      $elm.removeData('mousewheel-callbacks');
	    }
	  };

	  function mousewheelHandler(fn, event) {
	    var $elm = angular.element(this);

	    var delta      = 0,
	        deltaX     = 0,
	        deltaY     = 0,
	        absDelta   = 0,
	        offsetX    = 0,
	        offsetY    = 0;

	    // jQuery masks events
	    if (event.originalEvent) { event = event.originalEvent; }

	    if ( 'detail'      in event ) { deltaY = event.detail * -1;      }
	    if ( 'wheelDelta'  in event ) { deltaY = event.wheelDelta;       }
	    if ( 'wheelDeltaY' in event ) { deltaY = event.wheelDeltaY;      }
	    if ( 'wheelDeltaX' in event ) { deltaX = event.wheelDeltaX * -1; }

	    // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
	    if ( 'axis' in event && event.axis === event.HORIZONTAL_AXIS ) {
	      deltaX = deltaY * -1;
	      deltaY = 0;
	    }

	    // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
	    delta = deltaY === 0 ? deltaX : deltaY;

	    // New school wheel delta (wheel event)
	    if ( 'deltaY' in event ) {
	      deltaY = event.deltaY * -1;
	      delta  = deltaY;
	    }
	    if ( 'deltaX' in event ) {
	      deltaX = event.deltaX;
	      if ( deltaY === 0 ) { delta  = deltaX * -1; }
	    }

	    // No change actually happened, no reason to go any further
	    if ( deltaY === 0 && deltaX === 0 ) { return; }

	    // Need to convert lines and pages to pixels if we aren't already in pixels
	    // There are three delta modes:
	    //   * deltaMode 0 is by pixels, nothing to do
	    //   * deltaMode 1 is by lines
	    //   * deltaMode 2 is by pages
	    if ( event.deltaMode === 1 ) {
	        var lineHeight = $elm.data('mousewheel-line-height');
	        delta  *= lineHeight;
	        deltaY *= lineHeight;
	        deltaX *= lineHeight;
	    }
	    else if ( event.deltaMode === 2 ) {
	        var pageHeight = $elm.data('mousewheel-page-height');
	        delta  *= pageHeight;
	        deltaY *= pageHeight;
	        deltaX *= pageHeight;
	    }

	    // Store lowest absolute delta to normalize the delta values
	    absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

	    if ( !lowestDelta || absDelta < lowestDelta ) {
	      lowestDelta = absDelta;

	      // Adjust older deltas if necessary
	      if ( shouldAdjustOldDeltas(event, absDelta) ) {
	        lowestDelta /= 40;
	      }
	    }

	    // Get a whole, normalized value for the deltas
	    delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
	    deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
	    deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

	    // Normalise offsetX and offsetY properties
	    // if ($elm[0].getBoundingClientRect ) {
	    //   var boundingRect = $(elm)[0].getBoundingClientRect();
	    //   offsetX = event.clientX - boundingRect.left;
	    //   offsetY = event.clientY - boundingRect.top;
	    // }

	    // event.deltaX = deltaX;
	    // event.deltaY = deltaY;
	    // event.deltaFactor = lowestDelta;

	    var newEvent = {
	      originalEvent: event,
	      deltaX: deltaX,
	      deltaY: deltaY,
	      deltaFactor: lowestDelta,
	      preventDefault: function () { event.preventDefault(); },
	      stopPropagation: function () { event.stopPropagation(); }
	    };

	    // Clearout lowestDelta after sometime to better
	    // handle multiple device types that give
	    // a different lowestDelta
	    // Ex: trackpad = 3 and mouse wheel = 120
	    if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
	    nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

	    fn.call($elm[0], newEvent);
	  }

	  function nullLowestDelta() {
	    lowestDelta = null;
	  }

	  function shouldAdjustOldDeltas(orgEvent, absDelta) {
	    // If this is an older event and the delta is divisable by 120,
	    // then we are assuming that the browser is treating this as an
	    // older mouse wheel event and that we should divide the deltas
	    // by 40 to try and get a more usable deltaFactor.
	    // Side note, this actually impacts the reported scroll distance
	    // in older browsers and can cause scrolling to be slower than native.
	    // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
	    return orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
	  }

	  return s;
	}]);

	// Add 'px' to the end of a number string if it doesn't have it already
	module.filter('px', function() {
	  return function(str) {
	    if (str.match(/^[\d\.]+$/)) {
	      return str + 'px';
	    }
	    else {
	      return str;
	    }
	  };
	});

	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      var lang = {
	              aggregate: {
	                  label: 'položky'
	              },
	              groupPanel: {
	                  description: 'Přesuňte záhlaví zde pro vytvoření skupiny dle sloupce.'
	              },
	              search: {
	                  placeholder: 'Hledat...',
	                  showingItems: 'Zobrazuji položky:',
	                  selectedItems: 'Vybrané položky:',
	                  totalItems: 'Celkem položek:',
	                  size: 'Velikost strany:',
	                  first: 'První strana',
	                  next: 'Další strana',
	                  previous: 'Předchozí strana',
	                  last: 'Poslední strana'
	              },
	              menu: {
	                  text: 'Vyberte sloupec:'
	              },
	              sort: {
	                  ascending: 'Seřadit od A-Z',
	                  descending: 'Seřadit od Z-A',
	                  remove: 'Odebrat seřazení'
	              },
	              column: {
	                  hide: 'Schovat sloupec'
	              },
	              aggregation: {
	                  count: 'celkem řádků: ',
	                  sum: 'celkem: ',
	                  avg: 'avg: ',
	                  min: 'min.: ',
	                  max: 'max.: '
	              },
	              pinning: {
	                  pinLeft: 'Zamknout vlevo',
	                  pinRight: 'Zamknout vpravo',
	                  unpin: 'Odemknout'
	              },
	              gridMenu: {
	                  columns: 'Sloupce:',
	                  importerTitle: 'Importovat soubor',
	                  exporterAllAsCsv: 'Exportovat všechna data do csv',
	                  exporterVisibleAsCsv: 'Exportovat viditelná data do csv',
	                  exporterSelectedAsCsv: 'Exportovat vybraná data do csv',
	                  exporterAllAsPdf: 'Exportovat všechna data do pdf',
	                  exporterVisibleAsPdf: 'Exportovat viditelná data do pdf',
	                  exporterSelectedAsPdf: 'Exportovat vybraná data do pdf',
	                  clearAllFilters: 'Odstranit všechny filtry'
	              },
	              importer: {
	                  noHeaders: 'Názvy sloupců se nepodařilo získat, obsahuje soubor záhlaví?',
	                  noObjects: 'Data se nepodařilo zpracovat, obsahuje soubor řádky mimo záhlaví?',
	                  invalidCsv: 'Soubor nelze zpracovat, jedná se o CSV?',
	                  invalidJson: 'Soubor nelze zpracovat, je to JSON?',
	                  jsonNotArray: 'Soubor musí obsahovat json. Ukončuji..'
	              },
	              pagination: {
	                  sizes: 'položek na stránku',
	                  totalItems: 'položek'
	              },
	              grouping: {
	                  group: 'Seskupit',
	                  ungroup: 'Odebrat seskupení',
	                  aggregate_count: 'Agregace: Count',
	                  aggregate_sum: 'Agregace: Sum',
	                  aggregate_max: 'Agregace: Max',
	                  aggregate_min: 'Agregace: Min',
	                  aggregate_avg: 'Agregace: Avg',
	                  aggregate_remove: 'Agregace: Odebrat'
	              }
	          };

	          // support varianty of different czech keys.
	          $delegate.add('cs', lang);
	          $delegate.add('cz', lang);
	          $delegate.add('cs-cz', lang);
	          $delegate.add('cs-CZ', lang);
	      return $delegate;
	    }]);
	  }]);
	})();

	(function(){
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('da', {
	        aggregate:{
	          label: 'artikler'
	        },
	        groupPanel:{
	          description: 'Grupér rækker udfra en kolonne ved at trække dens overskift hertil.'
	        },
	        search:{
	          placeholder: 'Søg...',
	          showingItems: 'Viste rækker:',
	          selectedItems: 'Valgte rækker:',
	          totalItems: 'Rækker totalt:',
	          size: 'Side størrelse:',
	          first: 'Første side',
	          next: 'Næste side',
	          previous: 'Forrige side',
	          last: 'Sidste side'
	        },
	        menu:{
	          text: 'Vælg kolonner:'
	        },
	        sort: {
	          ascending: 'Sorter stigende',
	          descending: 'Sorter faldende',
	          none: 'Sorter ingen',
	          remove: 'Fjern sortering'
	        },
	        column: {
	          hide: 'Skjul kolonne'
	        },
	        aggregation: {
	          count: 'antal rækker: ',
	          sum: 'sum: ',
	          avg: 'gns: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        gridMenu: {
	          columns: 'Kolonner:',
	          importerTitle: 'Importer fil',
	          exporterAllAsCsv: 'Eksporter alle data som csv',
	          exporterVisibleAsCsv: 'Eksporter synlige data som csv',
	          exporterSelectedAsCsv: 'Eksporter markerede data som csv',
	          exporterAllAsPdf: 'Eksporter alle data som pdf',
	          exporterVisibleAsPdf: 'Eksporter synlige data som pdf',
	          exporterSelectedAsPdf: 'Eksporter markerede data som pdf',
	          clearAllFilters: 'Clear all filters'
	        },
	        importer: {
	          noHeaders: 'Column names were unable to be derived, does the file have a header?',
	          noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
	          invalidCsv: 'File was unable to be processed, is it valid CSV?',
	          invalidJson: 'File was unable to be processed, is it valid Json?',
	          jsonNotArray: 'Imported json file must contain an array, aborting.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Gå til første',
	            pageBack: 'Gå tilbage',
	            pageSelected: 'Valgte side',
	            pageForward: 'Gå frem',
	            pageToLast: 'Gå til sidste'
	          },
	          sizes: 'genstande per side',
	          totalItems: 'genstande',
	          through: 'gennem',
	          of: 'af'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function ($provide) {
	    $provide.decorator('i18nService', ['$delegate', function ($delegate) {
	      $delegate.add('de', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filter für Spalte',
	            removeFilter: 'Filter löschen',
	            columnMenuButtonLabel: 'Spaltenmenü'
	          },
	          priority: 'Priorität:',
	          filterLabel: "Filter für Spalte: "
	        },
	        aggregate: {
	          label: 'Eintrag'
	        },
	        groupPanel: {
	          description: 'Ziehen Sie eine Spaltenüberschrift hierhin, um nach dieser Spalte zu gruppieren.'
	        },
	        search: {
	          placeholder: 'Suche...',
	          showingItems: 'Zeige Einträge:',
	          selectedItems: 'Ausgewählte Einträge:',
	          totalItems: 'Einträge gesamt:',
	          size: 'Einträge pro Seite:',
	          first: 'Erste Seite',
	          next: 'Nächste Seite',
	          previous: 'Vorherige Seite',
	          last: 'Letzte Seite'
	        },
	        menu: {
	          text: 'Spalten auswählen:'
	        },
	        sort: {
	          ascending: 'aufsteigend sortieren',
	          descending: 'absteigend sortieren',
	          none: 'keine Sortierung',
	          remove: 'Sortierung zurücksetzen'
	        },
	        column: {
	          hide: 'Spalte ausblenden'
	        },
	        aggregation: {
	          count: 'Zeilen insgesamt: ',
	          sum: 'gesamt: ',
	          avg: 'Durchschnitt: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	            pinLeft: 'Links anheften',
	            pinRight: 'Rechts anheften',
	            unpin: 'Lösen'
	        },
	        columnMenu: {
	          close: 'Schließen'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Tabellenmenü'
	          },
	          columns: 'Spalten:',
	          importerTitle: 'Datei importieren',
	          exporterAllAsCsv: 'Alle Daten als CSV exportieren',
	          exporterVisibleAsCsv: 'sichtbare Daten als CSV exportieren',
	          exporterSelectedAsCsv: 'markierte Daten als CSV exportieren',
	          exporterAllAsPdf: 'Alle Daten als PDF exportieren',
	          exporterVisibleAsPdf: 'sichtbare Daten als PDF exportieren',
	          exporterSelectedAsPdf: 'markierte Daten als PDF exportieren',
	          clearAllFilters: 'Alle Filter zurücksetzen'
	        },
	        importer: {
	          noHeaders: 'Es konnten keine Spaltennamen ermittelt werden. Sind in der Datei Spaltendefinitionen enthalten?',
	          noObjects: 'Es konnten keine Zeileninformationen gelesen werden, Sind in der Datei außer den Spaltendefinitionen auch Daten enthalten?',
	          invalidCsv: 'Die Datei konnte nicht eingelesen werden, ist es eine gültige CSV-Datei?',
	          invalidJson: 'Die Datei konnte nicht eingelesen werden. Enthält sie gültiges JSON?',
	          jsonNotArray: 'Die importierte JSON-Datei muß ein Array enthalten. Breche Import ab.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Zum Anfang',
	            pageBack: 'Seite zurück',
	            pageSelected: 'Ausgwählte Seite',
	            pageForward: 'Seite vor',
	            pageToLast: 'Zum Ende'
	          },
	          sizes: 'Einträge pro Seite',
	          totalItems: 'Einträge',
	          through: 'bis',
	          of: 'von'
	        },
	        grouping: {
	            group: 'Gruppieren',
	            ungroup: 'Gruppierung aufheben',
	            aggregate_count: 'Agg: Anzahl',
	            aggregate_sum: 'Agg: Summe',
	            aggregate_max: 'Agg: Maximum',
	            aggregate_min: 'Agg: Minimum',
	            aggregate_avg: 'Agg: Mittelwert',
	            aggregate_remove: 'Aggregation entfernen'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('en', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filter for column',
	            removeFilter: 'Remove Filter',
	            columnMenuButtonLabel: 'Column Menu'
	          },
	          priority: 'Priority:',
	          filterLabel: "Filter for column: "
	        },
	        aggregate: {
	          label: 'items'
	        },
	        groupPanel: {
	          description: 'Drag a column header here and drop it to group by that column.'
	        },
	        search: {
	          placeholder: 'Search...',
	          showingItems: 'Showing Items:',
	          selectedItems: 'Selected Items:',
	          totalItems: 'Total Items:',
	          size: 'Page Size:',
	          first: 'First Page',
	          next: 'Next Page',
	          previous: 'Previous Page',
	          last: 'Last Page'
	        },
	        menu: {
	          text: 'Choose Columns:'
	        },
	        sort: {
	          ascending: 'Sort Ascending',
	          descending: 'Sort Descending',
	          none: 'Sort None',
	          remove: 'Remove Sort'
	        },
	        column: {
	          hide: 'Hide Column'
	        },
	        aggregation: {
	          count: 'total rows: ',
	          sum: 'total: ',
	          avg: 'avg: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Pin Left',
	          pinRight: 'Pin Right',
	          unpin: 'Unpin'
	        },
	        columnMenu: {
	          close: 'Close'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Grid Menu'
	          },
	          columns: 'Columns:',
	          importerTitle: 'Import file',
	          exporterAllAsCsv: 'Export all data as csv',
	          exporterVisibleAsCsv: 'Export visible data as csv',
	          exporterSelectedAsCsv: 'Export selected data as csv',
	          exporterAllAsPdf: 'Export all data as pdf',
	          exporterVisibleAsPdf: 'Export visible data as pdf',
	          exporterSelectedAsPdf: 'Export selected data as pdf',
	          clearAllFilters: 'Clear all filters'
	        },
	        importer: {
	          noHeaders: 'Column names were unable to be derived, does the file have a header?',
	          noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
	          invalidCsv: 'File was unable to be processed, is it valid CSV?',
	          invalidJson: 'File was unable to be processed, is it valid Json?',
	          jsonNotArray: 'Imported json file must contain an array, aborting.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Page to first',
	            pageBack: 'Page back',
	            pageSelected: 'Selected page',
	            pageForward: 'Page forward',
	            pageToLast: 'Page to last'
	          },
	          sizes: 'items per page',
	          totalItems: 'items',
	          through: 'through',
	          of: 'of'
	        },
	        grouping: {
	          group: 'Group',
	          ungroup: 'Ungroup',
	          aggregate_count: 'Agg: Count',
	          aggregate_sum: 'Agg: Sum',
	          aggregate_max: 'Agg: Max',
	          aggregate_min: 'Agg: Min',
	          aggregate_avg: 'Agg: Avg',
	          aggregate_remove: 'Agg: Remove'
	        },
	        validate: {
	          error: 'Error:',
	          minLength: 'Value should be at least THRESHOLD characters long.',
	          maxLength: 'Value should be at most THRESHOLD characters long.',
	          required: 'A value is needed.'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('es', {
	        aggregate: {
	          label: 'Artículos'
	        },
	        groupPanel: {
	          description: 'Arrastre un encabezado de columna aquí y suéltelo para agrupar por esa columna.'
	        },
	        search: {
	          placeholder: 'Buscar...',
	          showingItems: 'Artículos Mostrados:',
	          selectedItems: 'Artículos Seleccionados:',
	          totalItems: 'Artículos Totales:',
	          size: 'Tamaño de Página:',
	          first: 'Primera Página',
	          next: 'Página Siguiente',
	          previous: 'Página Anterior',
	          last: 'Última Página'
	        },
	        menu: {
	          text: 'Elegir columnas:'
	        },
	        sort: {
	          ascending: 'Orden Ascendente',
	          descending: 'Orden Descendente',
	          remove: 'Sin Ordenar'
	        },
	        column: {
	          hide: 'Ocultar la columna'
	        },
	        aggregation: {
	          count: 'filas totales: ',
	          sum: 'total: ',
	          avg: 'media: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Fijar a la Izquierda',
	          pinRight: 'Fijar a la Derecha',
	          unpin: 'Quitar Fijación'
	        },
	        gridMenu: {
	          columns: 'Columnas:',
	          importerTitle: 'Importar archivo',
	          exporterAllAsCsv: 'Exportar todo como csv',
	          exporterVisibleAsCsv: 'Exportar vista como csv',
	          exporterSelectedAsCsv: 'Exportar selección como csv',
	          exporterAllAsPdf: 'Exportar todo como pdf',
	          exporterVisibleAsPdf: 'Exportar vista como pdf',
	          exporterSelectedAsPdf: 'Exportar selección como pdf',
	          clearAllFilters: 'Limpiar todos los filtros'
	        },
	        importer: {
	          noHeaders: 'No fue posible derivar los nombres de las columnas, ¿tiene encabezados el archivo?',
	          noObjects: 'No fue posible obtener registros, ¿contiene datos el archivo, aparte de los encabezados?',
	          invalidCsv: 'No fue posible procesar el archivo, ¿es un CSV válido?',
	          invalidJson: 'No fue posible procesar el archivo, ¿es un Json válido?',
	          jsonNotArray: 'El archivo json importado debe contener un array, abortando.'
	        },
	        pagination: {
	          sizes: 'registros por página',
	          totalItems: 'registros',
	          of: 'de'
	        },
	        grouping: {
	          group: 'Agrupar',
	          ungroup: 'Desagrupar',
	          aggregate_count: 'Agr: Cont',
	          aggregate_sum: 'Agr: Sum',
	          aggregate_max: 'Agr: Máx',
	          aggregate_min: 'Agr: Min',
	          aggregate_avg: 'Agr: Prom',
	          aggregate_remove: 'Agr: Quitar'
	        }
	      });
	      return $delegate;
	    }]);
	}]);
	})();

	/**
	 * Translated by: R. Salarmehr
	 *                M. Hosseynzade
	 *                Using Vajje.com online dictionary.
	 */
	(function () {
	  angular.module('ui.grid').config(['$provide', function ($provide) {
	    $provide.decorator('i18nService', ['$delegate', function ($delegate) {
	      $delegate.add('fa', {
	        aggregate: {
	          label: 'قلم'
	        },
	        groupPanel: {
	          description: 'عنوان یک ستون را بگیر و به گروهی از آن ستون رها کن.'
	        },
	        search: {
	          placeholder: 'جستجو...',
	          showingItems: 'نمایش اقلام:',
	          selectedItems: 'قلم\u200cهای انتخاب شده:',
	          totalItems: 'مجموع اقلام:',
	          size: 'اندازه\u200cی صفحه:',
	          first: 'اولین صفحه',
	          next: 'صفحه\u200cی\u200cبعدی',
	          previous: 'صفحه\u200cی\u200c قبلی',
	          last: 'آخرین صفحه'
	        },
	        menu: {
	          text: 'ستون\u200cهای انتخابی:'
	        },
	        sort: {
	          ascending: 'ترتیب صعودی',
	          descending: 'ترتیب نزولی',
	          remove: 'حذف مرتب کردن'
	        },
	        column: {
	          hide: 'پنهان\u200cکردن ستون'
	        },
	        aggregation: {
	          count: 'تعداد: ',
	          sum: 'مجموع: ',
	          avg: 'میانگین: ',
	          min: 'کمترین: ',
	          max: 'بیشترین: '
	        },
	        pinning: {
	          pinLeft: 'پین کردن سمت چپ',
	          pinRight: 'پین کردن سمت راست',
	          unpin: 'حذف پین'
	        },
	        gridMenu: {
	          columns: 'ستون\u200cها:',
	          importerTitle: 'وارد کردن فایل',
	          exporterAllAsCsv: 'خروجی تمام داده\u200cها در فایل csv',
	          exporterVisibleAsCsv: 'خروجی داده\u200cهای قابل مشاهده در فایل csv',
	          exporterSelectedAsCsv: 'خروجی داده\u200cهای انتخاب\u200cشده در فایل csv',
	          exporterAllAsPdf: 'خروجی تمام داده\u200cها در فایل pdf',
	          exporterVisibleAsPdf: 'خروجی داده\u200cهای قابل مشاهده در فایل pdf',
	          exporterSelectedAsPdf: 'خروجی داده\u200cهای انتخاب\u200cشده در فایل pdf',
	          clearAllFilters: 'پاک کردن تمام فیلتر'
	        },
	        importer: {
	          noHeaders: 'نام ستون قابل استخراج نیست. آیا فایل عنوان دارد؟',
	          noObjects: 'اشیا قابل استخراج نیستند. آیا به جز عنوان\u200cها در فایل داده وجود دارد؟',
	          invalidCsv: 'فایل قابل پردازش نیست. آیا فرمت  csv  معتبر است؟',
	          invalidJson: 'فایل قابل پردازش نیست. آیا فرمت json   معتبر است؟',
	          jsonNotArray: 'فایل json وارد شده باید حاوی آرایه باشد. عملیات ساقط شد.'
	        },
	        pagination: {
	          sizes: 'اقلام در هر صفحه',
	          totalItems: 'اقلام',
	          of: 'از'
	        },
	        grouping: {
	          group: 'گروه\u200cبندی',
	          ungroup: 'حذف گروه\u200cبندی',
	          aggregate_count: 'Agg: تعداد',
	          aggregate_sum: 'Agg: جمع',
	          aggregate_max: 'Agg: بیشینه',
	          aggregate_min: 'Agg: کمینه',
	          aggregate_avg: 'Agg: میانگین',
	          aggregate_remove: 'Agg: حذف'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('fi', {
	        aggregate: {
	          label: 'rivit'
	        },
	        groupPanel: {
	          description: 'Raahaa ja pudota otsikko tähän ryhmittääksesi sarakkeen mukaan.'
	        },
	        search: {
	          placeholder: 'Hae...',
	          showingItems: 'Näytetään rivejä:',
	          selectedItems: 'Valitut rivit:',
	          totalItems: 'Rivejä yht.:',
	          size: 'Näytä:',
	          first: 'Ensimmäinen sivu',
	          next: 'Seuraava sivu',
	          previous: 'Edellinen sivu',
	          last: 'Viimeinen sivu'
	        },
	        menu: {
	          text: 'Valitse sarakkeet:'
	        },
	        sort: {
	          ascending: 'Järjestä nouseva',
	          descending: 'Järjestä laskeva',
	          remove: 'Poista järjestys'
	        },
	        column: {
	          hide: 'Piilota sarake'
	        },
	        aggregation: {
	          count: 'Rivejä yht.: ',
	          sum: 'Summa: ',
	          avg: 'K.a.: ',
	          min: 'Min: ',
	          max: 'Max: '
	        },
	        pinning: {
	         pinLeft: 'Lukitse vasemmalle',
	          pinRight: 'Lukitse oikealle',
	          unpin: 'Poista lukitus'
	        },
	        gridMenu: {
	          columns: 'Sarakkeet:',
	          importerTitle: 'Tuo tiedosto',
	          exporterAllAsCsv: 'Vie tiedot csv-muodossa',
	          exporterVisibleAsCsv: 'Vie näkyvä tieto csv-muodossa',
	          exporterSelectedAsCsv: 'Vie valittu tieto csv-muodossa',
	          exporterAllAsPdf: 'Vie tiedot pdf-muodossa',
	          exporterVisibleAsPdf: 'Vie näkyvä tieto pdf-muodossa',
	          exporterSelectedAsPdf: 'Vie valittu tieto pdf-muodossa',
	          clearAllFilters: 'Puhdista kaikki suodattimet'
	        },
	        importer: {
	          noHeaders: 'Sarakkeen nimiä ei voitu päätellä, onko tiedostossa otsikkoriviä?',
	          noObjects: 'Tietoja ei voitu lukea, onko tiedostossa muuta kuin otsikkot?',
	          invalidCsv: 'Tiedostoa ei voitu käsitellä, oliko se CSV-muodossa?',
	          invalidJson: 'Tiedostoa ei voitu käsitellä, oliko se JSON-muodossa?',
	          jsonNotArray: 'Tiedosto ei sisältänyt taulukkoa, lopetetaan.'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('fr', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filtre de la colonne',
	            removeFilter: 'Supprimer le filtre',
	            columnMenuButtonLabel: 'Menu de la colonne'
	          },
	          priority: 'Priorité:',
	          filterLabel: "Filtre de la colonne: "
	        },
	        aggregate: {
	          label: 'éléments'
	        },
	        groupPanel: {
	          description: 'Faites glisser une en-tête de colonne ici pour créer un groupe de colonnes.'
	        },
	        search: {
	          placeholder: 'Recherche...',
	          showingItems: 'Affichage des éléments :',
	          selectedItems: 'Éléments sélectionnés :',
	          totalItems: 'Nombre total d\'éléments:',
	          size: 'Taille de page:',
	          first: 'Première page',
	          next: 'Page Suivante',
	          previous: 'Page précédente',
	          last: 'Dernière page'
	        },
	        menu: {
	          text: 'Choisir des colonnes :'
	        },
	        sort: {
	          ascending: 'Trier par ordre croissant',
	          descending: 'Trier par ordre décroissant',
	          none: 'Aucun tri',
	          remove: 'Enlever le tri'
	        },
	        column: {
	          hide: 'Cacher la colonne'
	        },
	        aggregation: {
	          count: 'lignes totales: ',
	          sum: 'total: ',
	          avg: 'moy: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Épingler à gauche',
	          pinRight: 'Épingler à droite',
	          unpin: 'Détacher'
	        },
	        columnMenu: {
	          close: 'Fermer'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Menu du tableau'
	          },
	          columns: 'Colonnes:',
	          importerTitle: 'Importer un fichier',
	          exporterAllAsCsv: 'Exporter toutes les données en CSV',
	          exporterVisibleAsCsv: 'Exporter les données visibles en CSV',
	          exporterSelectedAsCsv: 'Exporter les données sélectionnées en CSV',
	          exporterAllAsPdf: 'Exporter toutes les données en PDF',
	          exporterVisibleAsPdf: 'Exporter les données visibles en PDF',
	          exporterSelectedAsPdf: 'Exporter les données sélectionnées en PDF',
	          clearAllFilters: 'Nettoyez tous les filtres'
	        },
	        importer: {
	          noHeaders: 'Impossible de déterminer le nom des colonnes, le fichier possède-t-il une en-tête ?',
	          noObjects: 'Aucun objet trouvé, le fichier possède-t-il des données autres que l\'en-tête ?',
	          invalidCsv: 'Le fichier n\'a pas pu être traité, le CSV est-il valide ?',
	          invalidJson: 'Le fichier n\'a pas pu être traité, le JSON est-il valide ?',
	          jsonNotArray: 'Le fichier JSON importé doit contenir un tableau, abandon.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Aller à la première page',
	            pageBack: 'Page précédente',
	            pageSelected: 'Page sélectionnée',
	            pageForward: 'Page suivante',
	            pageToLast: 'Aller à la dernière page'
	          },
	          sizes: 'éléments par page',
	          totalItems: 'éléments',
	          through: 'à',
	          of: 'sur'
	        },
	        grouping: {
	          group: 'Grouper',
	          ungroup: 'Dégrouper',
	          aggregate_count: 'Agg: Compter',
	          aggregate_sum: 'Agg: Somme',
	          aggregate_max: 'Agg: Max',
	          aggregate_min: 'Agg: Min',
	          aggregate_avg: 'Agg: Moy',
	          aggregate_remove: 'Agg: Retirer'
	        },
	        validate: {
	          error: 'Erreur:',
	          minLength: 'La valeur doit être supérieure ou égale à THRESHOLD caractères.',
	          maxLength: 'La valeur doit être inférieure ou égale à THRESHOLD caractères.',
	          required: 'Une valeur est nécéssaire.'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function ($provide) {
	    $provide.decorator('i18nService', ['$delegate', function ($delegate) {
	      $delegate.add('he', {
	        aggregate: {
	          label: 'items'
	        },
	        groupPanel: {
	          description: 'גרור עמודה לכאן ושחרר בכדי לקבץ עמודה זו.'
	        },
	        search: {
	          placeholder: 'חפש...',
	          showingItems: 'מציג:',
	          selectedItems: 'סה"כ נבחרו:',
	          totalItems: 'סה"כ רשומות:',
	          size: 'תוצאות בדף:',
	          first: 'דף ראשון',
	          next: 'דף הבא',
	          previous: 'דף קודם',
	          last: 'דף אחרון'
	        },
	        menu: {
	          text: 'בחר עמודות:'
	        },
	        sort: {
	          ascending: 'סדר עולה',
	          descending: 'סדר יורד',
	          remove: 'בטל'
	        },
	        column: {
	          hide: 'טור הסתר'
	        },
	        aggregation: {
	          count: 'total rows: ',
	          sum: 'total: ',
	          avg: 'avg: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        gridMenu: {
	          columns: 'Columns:',
	          importerTitle: 'Import file',
	          exporterAllAsCsv: 'Export all data as csv',
	          exporterVisibleAsCsv: 'Export visible data as csv',
	          exporterSelectedAsCsv: 'Export selected data as csv',
	          exporterAllAsPdf: 'Export all data as pdf',
	          exporterVisibleAsPdf: 'Export visible data as pdf',
	          exporterSelectedAsPdf: 'Export selected data as pdf',
	          clearAllFilters: 'Clean all filters'
	        },
	        importer: {
	          noHeaders: 'Column names were unable to be derived, does the file have a header?',
	          noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
	          invalidCsv: 'File was unable to be processed, is it valid CSV?',
	          invalidJson: 'File was unable to be processed, is it valid Json?',
	          jsonNotArray: 'Imported json file must contain an array, aborting.'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('hy', {
	        aggregate: {
	          label: 'տվյալներ'
	        },
	        groupPanel: {
	          description: 'Ըստ սյան խմբավորելու համար քաշեք և գցեք վերնագիրն այստեղ։'
	        },
	        search: {
	          placeholder: 'Փնտրում...',
	          showingItems: 'Ցուցադրված տվյալներ՝',
	          selectedItems: 'Ընտրված:',
	          totalItems: 'Ընդամենը՝',
	          size: 'Տողերի քանակը էջում՝',
	          first: 'Առաջին էջ',
	          next: 'Հաջորդ էջ',
	          previous: 'Նախորդ էջ',
	          last: 'Վերջին էջ'
	        },
	        menu: {
	          text: 'Ընտրել սյուները:'
	        },
	        sort: {
	          ascending: 'Աճման կարգով',
	          descending: 'Նվազման կարգով',
	          remove: 'Հանել '
	        },
	        column: {
	          hide: 'Թաքցնել սյունը'
	        },
	        aggregation: {
	          count: 'ընդամենը տող՝ ',
	          sum: 'ընդամենը՝ ',
	          avg: 'միջին՝ ',
	          min: 'մին՝ ',
	          max: 'մաքս՝ '
	        },
	        pinning: {
	          pinLeft: 'Կպցնել ձախ կողմում',
	          pinRight: 'Կպցնել աջ կողմում',
	          unpin: 'Արձակել'
	        },
	        gridMenu: {
	          columns: 'Սյուներ:',
	          importerTitle: 'Ներմուծել ֆայլ',
	          exporterAllAsCsv: 'Արտահանել ամբողջը CSV',
	          exporterVisibleAsCsv: 'Արտահանել երևացող տվյալները CSV',
	          exporterSelectedAsCsv: 'Արտահանել ընտրված տվյալները CSV',
	          exporterAllAsPdf: 'Արտահանել PDF',
	          exporterVisibleAsPdf: 'Արտահանել երևացող տվյալները PDF',
	          exporterSelectedAsPdf: 'Արտահանել ընտրված տվյալները PDF',
	          clearAllFilters: 'Մաքրել բոլոր ֆիլտրերը'
	        },
	        importer: {
	          noHeaders: 'Հնարավոր չեղավ որոշել սյան վերնագրերը։ Արդյո՞ք ֆայլը ունի վերնագրեր։',
	          noObjects: 'Հնարավոր չեղավ կարդալ տվյալները։ Արդյո՞ք ֆայլում կան տվյալներ։',
	          invalidCsv: 'Հնարավոր չեղավ մշակել ֆայլը։ Արդյո՞ք այն վավեր CSV է։',
	          invalidJson: 'Հնարավոր չեղավ մշակել ֆայլը։ Արդյո՞ք այն վավեր Json է։',
	          jsonNotArray: 'Ներմուծված json ֆայլը պետք է պարունակի զանգված, կասեցվում է։'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('it', {
	        aggregate: {
	          label: 'elementi'
	        },
	        groupPanel: {
	          description: 'Trascina un\'intestazione all\'interno del gruppo della colonna.'
	        },
	        search: {
	          placeholder: 'Ricerca...',
	          showingItems: 'Mostra:',
	          selectedItems: 'Selezionati:',
	          totalItems: 'Totali:',
	          size: 'Tot Pagine:',
	          first: 'Prima',
	          next: 'Prossima',
	          previous: 'Precedente',
	          last: 'Ultima'
	        },
	        menu: {
	          text: 'Scegli le colonne:'
	        },
	        sort: {
	          ascending: 'Asc.',
	          descending: 'Desc.',
	          remove: 'Annulla ordinamento'
	        },
	        column: {
	          hide: 'Nascondi'
	        },
	        aggregation: {
	          count: 'righe totali: ',
	          sum: 'tot: ',
	          avg: 'media: ',
	          min: 'minimo: ',
	          max: 'massimo: '
	        },
	        pinning: {
	         pinLeft: 'Blocca a sx',
	          pinRight: 'Blocca a dx',
	          unpin: 'Blocca in alto'
	        },
	        gridMenu: {
	          columns: 'Colonne:',
	          importerTitle: 'Importa',
	          exporterAllAsCsv: 'Esporta tutti i dati in CSV',
	          exporterVisibleAsCsv: 'Esporta i dati visibili in CSV',
	          exporterSelectedAsCsv: 'Esporta i dati selezionati in CSV',
	          exporterAllAsPdf: 'Esporta tutti i dati in PDF',
	          exporterVisibleAsPdf: 'Esporta i dati visibili in PDF',
	          exporterSelectedAsPdf: 'Esporta i dati selezionati in PDF',
	          clearAllFilters: 'Pulire tutti i filtri'
	        },
	        importer: {
	          noHeaders: 'Impossibile reperire i nomi delle colonne, sicuro che siano indicati all\'interno del file?',
	          noObjects: 'Impossibile reperire gli oggetti, sicuro che siano indicati all\'interno del file?',
	          invalidCsv: 'Impossibile elaborare il file, sicuro che sia un CSV?',
	          invalidJson: 'Impossibile elaborare il file, sicuro che sia un JSON valido?',
	          jsonNotArray: 'Errore! Il file JSON da importare deve contenere un array.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Prima',
	            pageBack: 'Indietro',
	            pageSelected: 'Pagina selezionata',
	            pageForward: 'Avanti',
	            pageToLast: 'Ultima'
	          },
	          sizes: 'elementi per pagina',
	          totalItems: 'elementi',
	          through: 'a',
	          of: 'di'
	        },
	        grouping: {
	          group: 'Raggruppa',
	          ungroup: 'Separa',
	          aggregate_count: 'Agg: N. Elem.',
	          aggregate_sum: 'Agg: Somma',
	          aggregate_max: 'Agg: Massimo',
	          aggregate_min: 'Agg: Minimo',
	          aggregate_avg: 'Agg: Media',
	          aggregate_remove: 'Agg: Rimuovi'
	        },
	        validate: {
	          error: 'Errore:',
	          minLength: 'Lunghezza minima pari a THRESHOLD caratteri.',
	          maxLength: 'Lunghezza massima pari a THRESHOLD caratteri.',
	          required: 'Necessario inserire un valore.'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function() {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('ja', {
	        aggregate: {
	          label: '項目'
	        },
	        groupPanel: {
	          description: 'ここに列ヘッダをドラッグアンドドロップして、その列でグループ化します。'
	        },
	        search: {
	          placeholder: '検索...',
	          showingItems: '表示中の項目:',
	          selectedItems: '選択した項目:',
	          totalItems: '項目の総数:',
	          size: 'ページサイズ:',
	          first: '最初のページ',
	          next: '次のページ',
	          previous: '前のページ',
	          last: '前のページ'
	        },
	        menu: {
	          text: '列の選択:'
	        },
	        sort: {
	          ascending: '昇順に並べ替え',
	          descending: '降順に並べ替え',
	          remove: '並べ替えの解除'
	        },
	        column: {
	          hide: '列の非表示'
	        },
	        aggregation: {
	          count: '合計行数: ',
	          sum: '合計: ',
	          avg: '平均: ',
	          min: '最小: ',
	          max: '最大: '
	        },
	        pinning: {
	          pinLeft: '左に固定',
	          pinRight: '右に固定',
	          unpin: '固定解除'
	        },
	        gridMenu: {
	          columns: '列:',
	          importerTitle: 'ファイルのインポート',
	          exporterAllAsCsv: 'すべてのデータをCSV形式でエクスポート',
	          exporterVisibleAsCsv: '表示中のデータをCSV形式でエクスポート',
	          exporterSelectedAsCsv: '選択したデータをCSV形式でエクスポート',
	          exporterAllAsPdf: 'すべてのデータをPDF形式でエクスポート',
	          exporterVisibleAsPdf: '表示中のデータをPDF形式でエクスポート',
	          exporterSelectedAsPdf: '選択したデータをPDF形式でエクスポート',
	          clearAllFilters: 'すべてのフィルタを清掃してください'
	        },
	        importer: {
	          noHeaders: '列名を取得できません。ファイルにヘッダが含まれていることを確認してください。',
	          noObjects: 'オブジェクトを取得できません。ファイルにヘッダ以外のデータが含まれていることを確認してください。',
	          invalidCsv: 'ファイルを処理できません。ファイルが有効なCSV形式であることを確認してください。',
	          invalidJson: 'ファイルを処理できません。ファイルが有効なJSON形式であることを確認してください。',
	          jsonNotArray: 'インポートしたJSONファイルには配列が含まれている必要があります。処理を中止します。'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: '最初のページ',
	            pageBack: '前のページ',
	            pageSelected: '現在のページ',
	            pageForward: '次のページ',
	            pageToLast: '最後のページ'
	          },
	          sizes: '項目/ページ',
	          totalItems: '項目',
	          through: 'から',
	          of: '項目/全'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('ko', {
	        aggregate: {
	          label: '아이템'
	        },
	        groupPanel: {
	          description: '컬럼으로 그룹핑하기 위해서는 컬럼 헤더를 끌어 떨어뜨려 주세요.'
	        },
	        search: {
	          placeholder: '검색...',
	          showingItems: '항목 보여주기:',
	          selectedItems: '선택 항목:',
	          totalItems: '전체 항목:',
	          size: '페이지 크기:',
	          first: '첫번째 페이지',
	          next: '다음 페이지',
	          previous: '이전 페이지',
	          last: '마지막 페이지'
	        },
	        menu: {
	          text: '컬럼을 선택하세요:'
	        },
	        sort: {
	          ascending: '오름차순 정렬',
	          descending: '내림차순 정렬',
	          remove: '소팅 제거'
	        },
	        column: {
	          hide: '컬럼 제거'
	        },
	        aggregation: {
	          count: '전체 갯수: ',
	          sum: '전체: ',
	          avg: '평균: ',
	          min: '최소: ',
	          max: '최대: '
	        },
	        pinning: {
	         pinLeft: '왼쪽 핀',
	          pinRight: '오른쪽 핀',
	          unpin: '핀 제거'
	        },
	        gridMenu: {
	          columns: '컬럼:',
	          importerTitle: '파일 가져오기',
	          exporterAllAsCsv: 'csv로 모든 데이터 내보내기',
	          exporterVisibleAsCsv: 'csv로 보이는 데이터 내보내기',
	          exporterSelectedAsCsv: 'csv로 선택된 데이터 내보내기',
	          exporterAllAsPdf: 'pdf로 모든 데이터 내보내기',
	          exporterVisibleAsPdf: 'pdf로 보이는 데이터 내보내기',
	          exporterSelectedAsPdf: 'pdf로 선택 데이터 내보내기',
	          clearAllFilters: '모든 필터를 청소'
	        },
	        importer: {
	          noHeaders: '컬럼명이 지정되어 있지 않습니다. 파일에 헤더가 명시되어 있는지 확인해 주세요.',
	          noObjects: '데이터가 지정되어 있지 않습니다. 데이터가 파일에 있는지 확인해 주세요.',
	          invalidCsv: '파일을 처리할 수 없습니다. 올바른 csv인지 확인해 주세요.',
	          invalidJson: '파일을 처리할 수 없습니다. 올바른 json인지 확인해 주세요.',
	          jsonNotArray: 'json 파일은 배열을 포함해야 합니다.'
	        },
	        pagination: {
	          sizes: '페이지당 항목',
	          totalItems: '전체 항목'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('nl', {
	        aggregate: {
	          label: 'items'
	        },
	        groupPanel: {
	          description: 'Sleep hier een kolomnaam heen om op te groeperen.'
	        },
	        search: {
	          placeholder: 'Zoeken...',
	          showingItems: 'Getoonde items:',
	          selectedItems: 'Geselecteerde items:',
	          totalItems: 'Totaal aantal items:',
	          size: 'Items per pagina:',
	          first: 'Eerste pagina',
	          next: 'Volgende pagina',
	          previous: 'Vorige pagina',
	          last: 'Laatste pagina'
	        },
	        menu: {
	          text: 'Kies kolommen:'
	        },
	        sort: {
	          ascending: 'Sorteer oplopend',
	          descending: 'Sorteer aflopend',
	          remove: 'Verwijder sortering'
	        },
	        column: {
	          hide: 'Verberg kolom'
	        },
	        aggregation: {
	          count: 'Aantal rijen: ',
	          sum: 'Som: ',
	          avg: 'Gemiddelde: ',
	          min: 'Min: ',
	          max: 'Max: '
	        },
	        pinning: {
	          pinLeft: 'Zet links vast',
	          pinRight: 'Zet rechts vast',
	          unpin: 'Maak los'
	        },
	        gridMenu: {
	          columns: 'Kolommen:',
	          importerTitle: 'Importeer bestand',
	          exporterAllAsCsv: 'Exporteer alle data als csv',
	          exporterVisibleAsCsv: 'Exporteer zichtbare data als csv',
	          exporterSelectedAsCsv: 'Exporteer geselecteerde data als csv',
	          exporterAllAsPdf: 'Exporteer alle data als pdf',
	          exporterVisibleAsPdf: 'Exporteer zichtbare data als pdf',
	          exporterSelectedAsPdf: 'Exporteer geselecteerde data als pdf',
	          clearAllFilters: 'Reinig alle filters'
	        },
	        importer: {
	          noHeaders: 'Kolomnamen kunnen niet worden afgeleid. Heeft het bestand een header?',
	          noObjects: 'Objecten kunnen niet worden afgeleid. Bevat het bestand data naast de headers?',
	          invalidCsv: 'Het bestand kan niet verwerkt worden. Is het een valide csv bestand?',
	          invalidJson: 'Het bestand kan niet verwerkt worden. Is het valide json?',
	          jsonNotArray: 'Het json bestand moet een array bevatten. De actie wordt geannuleerd.'
	        },
	        pagination: {
	            sizes: 'items per pagina',
	            totalItems: 'items',
	            of: 'van de'
	        },
	        grouping: {
	            group: 'Groepeer',
	            ungroup: 'Groepering opheffen',
	            aggregate_count: 'Agg: Aantal',
	            aggregate_sum: 'Agg: Som',
	            aggregate_max: 'Agg: Max',
	            aggregate_min: 'Agg: Min',
	            aggregate_avg: 'Agg: Gem',
	            aggregate_remove: 'Agg: Verwijder'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('no', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filter for column',
	            removeFilter: 'Remove Filter',
	            columnMenuButtonLabel: 'Column Menu'
	          },
	          priority: 'Priority:',
	          filterLabel: "Filter for column: "
	        },
	        aggregate: {
	          label: 'items'
	        },
	        groupPanel: {
	          description: 'Drag a column header here and drop it to group by that column.'
	        },
	        search: {
	          placeholder: 'Search...',
	          showingItems: 'Showing Items:',
	          selectedItems: 'Selected Items:',
	          totalItems: 'Total Items:',
	          size: 'Page Size:',
	          first: 'First Page',
	          next: 'Next Page',
	          previous: 'Previous Page',
	          last: 'Last Page'
	        },
	        menu: {
	          text: 'Choose Columns:'
	        },
	        sort: {
	          ascending: 'Sort Ascending',
	          descending: 'Sort Descending',
	          none: 'Sort None',
	          remove: 'Remove Sort'
	        },
	        column: {
	          hide: 'Hide Column'
	        },
	        aggregation: {
	          count: 'total rows: ',
	          sum: 'total: ',
	          avg: 'avg: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Pin Left',
	          pinRight: 'Pin Right',
	          unpin: 'Unpin'
	        },
	        columnMenu: {
	          close: 'Close'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Grid Menu'
	          },
	          columns: 'Kolonner:',
	          importerTitle: 'Importer fil',
	          exporterAllAsCsv: 'Eksporter alle data som csv',
	          exporterVisibleAsCsv: 'Eksporter synlige data som csv',
	          exporterSelectedAsCsv: 'Eksporter utvalgte data som csv',
	          exporterAllAsPdf: 'Eksporter alle data som pdf',
	          exporterVisibleAsPdf: 'Eksporter synlige data som pdf',
	          exporterSelectedAsPdf: 'Eksporter utvalgte data som pdf',
	          clearAllFilters: 'Clear all filters'
	        },
	        importer: {
	          noHeaders: 'Column names were unable to be derived, does the file have a header?',
	          noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
	          invalidCsv: 'File was unable to be processed, is it valid CSV?',
	          invalidJson: 'File was unable to be processed, is it valid Json?',
	          jsonNotArray: 'Imported json file must contain an array, aborting.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Page to first',
	            pageBack: 'Page back',
	            pageSelected: 'Selected page',
	            pageForward: 'Page forward',
	            pageToLast: 'Page to last'
	          },
	          sizes: 'items per page',
	          totalItems: 'items',
	          through: 'through',
	          of: 'of'
	        },
	        grouping: {
	          group: 'Group',
	          ungroup: 'Ungroup',
	          aggregate_count: 'Agg: Count',
	          aggregate_sum: 'Agg: Sum',
	          aggregate_max: 'Agg: Max',
	          aggregate_min: 'Agg: Min',
	          aggregate_avg: 'Agg: Avg',
	          aggregate_remove: 'Agg: Remove'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('pl', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filter dla kolumny',
	            removeFilter: 'Usuń filter',
	            columnMenuButtonLabel: 'Menu kolumny'
	          },
	          priority: 'Prioritet:',
	          filterLabel: "Filtr dla kolumny: "
	        },
	        aggregate: {
	          label: 'pozycji'
	        },
	        groupPanel: {
	          description: 'Przeciągnij nagłówek kolumny tutaj, aby pogrupować według niej.'
	        },
	        search: {
	          placeholder: 'Szukaj...',
	          showingItems: 'Widoczne pozycje:',
	          selectedItems: 'Zaznaczone pozycje:',
	          totalItems: 'Wszystkich pozycji:',
	          size: 'Rozmiar strony:',
	          first: 'Pierwsza strona',
	          next: 'Następna strona',
	          previous: 'Poprzednia strona',
	          last: 'Ostatnia strona'
	        },
	        menu: {
	          text: 'Wybierz kolumny:'
	        },
	        sort: {
	          ascending: 'Sortuj rosnąco',
	          descending: 'Sortuj malejąco',
	          none: 'Brak sortowania',
	          remove: 'Wyłącz sortowanie'
	        },
	        column: {
	          hide: 'Ukryj kolumne'
	        },
	        aggregation: {
	          count: 'Razem pozycji: ',
	            sum: 'Razem: ',
	            avg: 'Średnia: ',
	            min: 'Min: ',
	            max: 'Max: '
	        },
	        pinning: {
	          pinLeft: 'Przypnij do lewej',
	          pinRight: 'Przypnij do prawej',
	          unpin: 'Odepnij'
	        },
	        columnMenu: {
	          close: 'Zamknij'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Menu Grida'
	          },
	          columns: 'Kolumny:',
	          importerTitle: 'Importuj plik',
	          exporterAllAsCsv: 'Eksportuj wszystkie dane do csv',
	          exporterVisibleAsCsv: 'Eksportuj widoczne dane do csv',
	          exporterSelectedAsCsv: 'Eksportuj zaznaczone dane do csv',
	          exporterAllAsPdf: 'Eksportuj wszystkie dane do pdf',
	          exporterVisibleAsPdf: 'Eksportuj widoczne dane do pdf',
	          exporterSelectedAsPdf: 'Eksportuj zaznaczone dane do pdf',
	          clearAllFilters: 'Wyczyść filtry'
	        },
	        importer: {
	          noHeaders: 'Nie udało się wczytać nazw kolumn. Czy plik posiada nagłówek?',
	          noObjects: 'Nie udalo się wczytać pozycji. Czy plik zawiera dane??',
	          invalidCsv: 'Nie udało się przetworzyć pliku, jest to prawidlowy plik CSV??',
	          invalidJson: 'Nie udało się przetworzyć pliku, jest to prawidlowy plik Json?',
	          jsonNotArray: 'Importowany plik json musi zawierać tablicę, importowanie przerwane.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Pierwsza strona',
	            pageBack: 'Poprzednia strona',
	            pageSelected: 'Wybrana strona',
	            pageForward: 'Następna strona',
	            pageToLast: 'Ostatnia strona'
	          },
	          sizes: 'pozycji na stronę',
	          totalItems: 'pozycji',
	          through: 'do',
	          of: 'z'
	        },
	        grouping: {
	          group: 'Grupuj',
	          ungroup: 'Rozgrupuj',
	          aggregate_count: 'Zbiorczo: Razem',
	          aggregate_sum: 'Zbiorczo: Suma',
	          aggregate_max: 'Zbiorczo: Max',
	          aggregate_min: 'Zbiorczo: Min',
	          aggregate_avg: 'Zbiorczo: Średnia',
	          aggregate_remove: 'Zbiorczo: Usuń'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('pt-br', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filtro por coluna',
	            removeFilter: 'Remover filtro',
	            columnMenuButtonLabel: 'Menu coluna'
	          },
	          priority: 'Prioridade:',
	          filterLabel: "Filtro por coluna: "
	        },
	        aggregate: {
	          label: 'itens'
	        },
	        groupPanel: {
	          description: 'Arraste e solte uma coluna aqui para agrupar por essa coluna'
	        },
	        search: {
	          placeholder: 'Procurar...',
	          showingItems: 'Mostrando os Itens:',
	          selectedItems: 'Items Selecionados:',
	          totalItems: 'Total de Itens:',
	          size: 'Tamanho da Página:',
	          first: 'Primeira Página',
	          next: 'Próxima Página',
	          previous: 'Página Anterior',
	          last: 'Última Página'
	        },
	        menu: {
	          text: 'Selecione as colunas:'
	        },
	        sort: {
	          ascending: 'Ordenar Ascendente',
	          descending: 'Ordenar Descendente',
	          none: 'Nenhuma Ordem',
	          remove: 'Remover Ordenação'
	        },
	        column: {
	          hide: 'Esconder coluna'
	        },
	        aggregation: {
	          count: 'total de linhas: ',
	          sum: 'total: ',
	          avg: 'med: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Fixar Esquerda',
	          pinRight: 'Fixar Direita',
	          unpin: 'Desprender'
	        },
	        columnMenu: {
	          close: 'Fechar'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Menu Grid'
	          },
	          columns: 'Colunas:',
	          importerTitle: 'Importar arquivo',
	          exporterAllAsCsv: 'Exportar todos os dados como csv',
	          exporterVisibleAsCsv: 'Exportar dados visíveis como csv',
	          exporterSelectedAsCsv: 'Exportar dados selecionados como csv',
	          exporterAllAsPdf: 'Exportar todos os dados como pdf',
	          exporterVisibleAsPdf: 'Exportar dados visíveis como pdf',
	          exporterSelectedAsPdf: 'Exportar dados selecionados como pdf',
	          clearAllFilters: 'Limpar todos os filtros'
	        },
	        importer: {
	          noHeaders: 'Nomes de colunas não puderam ser derivados. O arquivo tem um cabeçalho?',
	          noObjects: 'Objetos não puderam ser derivados. Havia dados no arquivo, além dos cabeçalhos?',
	          invalidCsv: 'Arquivo não pode ser processado. É um CSV válido?',
	          invalidJson: 'Arquivo não pode ser processado. É um Json válido?',
	          jsonNotArray: 'Arquivo json importado tem que conter um array. Abortando.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Primeira página',
	            pageBack: 'Página anterior',
	            pageSelected: 'Página Selecionada',
	            pageForward: 'Proxima',
	            pageToLast: 'Anterior'
	          },
	          sizes: 'itens por página',
	          totalItems: 'itens',
	          through: 'através dos',
	          of: 'de'
	        },
	        grouping: {
	          group: 'Agrupar',
	          ungroup: 'Desagrupar',
	          aggregate_count: 'Agr: Contar',
	          aggregate_sum: 'Agr: Soma',
	          aggregate_max: 'Agr: Max',
	          aggregate_min: 'Agr: Min',
	          aggregate_avg: 'Agr: Med',
	          aggregate_remove: 'Agr: Remover'
	        }
	      });
	      return $delegate;
	    }]);
	}]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('pt', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filtro por coluna',
	            removeFilter: 'Remover filtro',
	            columnMenuButtonLabel: 'Menu coluna'
	          },
	          priority: 'Prioridade:',
	          filterLabel: "Filtro por coluna: "
	        },
	        aggregate: {
	          label: 'itens'
	        },
	        groupPanel: {
	          description: 'Arraste e solte uma coluna aqui para agrupar por essa coluna'
	        },
	        search: {
	          placeholder: 'Procurar...',
	          showingItems: 'Mostrando os Itens:',
	          selectedItems: 'Itens Selecionados:',
	          totalItems: 'Total de Itens:',
	          size: 'Tamanho da Página:',
	          first: 'Primeira Página',
	          next: 'Próxima Página',
	          previous: 'Página Anterior',
	          last: 'Última Página'
	        },
	        menu: {
	          text: 'Selecione as colunas:'
	        },
	        sort: {
	          ascending: 'Ordenar Ascendente',
	          descending: 'Ordenar Descendente',
	          none: 'Nenhuma Ordem',
	          remove: 'Remover Ordenação'
	        },
	        column: {
	          hide: 'Esconder coluna'
	        },
	        aggregation: {
	          count: 'total de linhas: ',
	          sum: 'total: ',
	          avg: 'med: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Fixar Esquerda',
	          pinRight: 'Fixar Direita',
	          unpin: 'Desprender'
	        },
	        columnMenu: {
	          close: 'Fechar'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Menu Grid'
	          },
	          columns: 'Colunas:',
	          importerTitle: 'Importar ficheiro',
	          exporterAllAsCsv: 'Exportar todos os dados como csv',
	          exporterVisibleAsCsv: 'Exportar dados visíveis como csv',
	          exporterSelectedAsCsv: 'Exportar dados selecionados como csv',
	          exporterAllAsPdf: 'Exportar todos os dados como pdf',
	          exporterVisibleAsPdf: 'Exportar dados visíveis como pdf',
	          exporterSelectedAsPdf: 'Exportar dados selecionados como pdf',
	          clearAllFilters: 'Limpar todos os filtros'
	        },
	        importer: {
	          noHeaders: 'Nomes de colunas não puderam ser derivados. O ficheiro tem um cabeçalho?',
	          noObjects: 'Objetos não puderam ser derivados. Havia dados no ficheiro, além dos cabeçalhos?',
	          invalidCsv: 'Ficheiro não pode ser processado. É um CSV válido?',
	          invalidJson: 'Ficheiro não pode ser processado. É um Json válido?',
	          jsonNotArray: 'Ficheiro json importado tem que conter um array. Interrompendo.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Primeira página',
	            pageBack: 'Página anterior',
	            pageSelected: 'Página Selecionada',
	            pageForward: 'Próxima',
	            pageToLast: 'Anterior'
	          },
	          sizes: 'itens por página',
	          totalItems: 'itens',
	          through: 'através dos',
	          of: 'de'
	        },
	        grouping: {
	          group: 'Agrupar',
	          ungroup: 'Desagrupar',
	          aggregate_count: 'Agr: Contar',
	          aggregate_sum: 'Agr: Soma',
	          aggregate_max: 'Agr: Max',
	          aggregate_min: 'Agr: Min',
	          aggregate_avg: 'Agr: Med',
	          aggregate_remove: 'Agr: Remover'
	        }
	      });
	      return $delegate;
	    }]);
	}]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('ro', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filtru pentru coloana',
	            removeFilter: 'Sterge filtru',
	            columnMenuButtonLabel: 'Column Menu'
	          },
	          priority: 'Prioritate:',
	          filterLabel: "Filtru pentru coloana:"
	        },
	        aggregate: {
	          label: 'Elemente'
	        },
	        groupPanel: {
	          description: 'Trage un cap de coloana aici pentru a grupa elementele dupa coloana respectiva'
	        },
	        search: {
	          placeholder: 'Cauta...',
	          showingItems: 'Arata elementele:',
	          selectedItems: 'Elementele selectate:',
	          totalItems: 'Total elemente:',
	          size: 'Marime pagina:',
	          first: 'Prima pagina',
	          next: 'Pagina urmatoare',
	          previous: 'Pagina anterioara',
	          last: 'Ultima pagina'
	        },
	        menu: {
	          text: 'Alege coloane:'
	        },
	        sort: {
	          ascending: 'Ordoneaza crescator',
	          descending: 'Ordoneaza descrescator',
	          none: 'Fara ordonare',
	          remove: 'Sterge ordonarea'
	        },
	        column: {
	          hide: 'Ascunde coloana'
	        },
	        aggregation: {
	          count: 'total linii: ',
	          sum: 'total: ',
	          avg: 'medie: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Pin la stanga',
	          pinRight: 'Pin la dreapta',
	          unpin: 'Sterge pinul'
	        },
	        columnMenu: {
	          close: 'Inchide'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Grid Menu'
	          },
	          columns: 'Coloane:',
	          importerTitle: 'Incarca fisier',
	          exporterAllAsCsv: 'Exporta toate datele ca csv',
	          exporterVisibleAsCsv: 'Exporta datele vizibile ca csv',
	          exporterSelectedAsCsv: 'Exporta datele selectate ca csv',
	          exporterAllAsPdf: 'Exporta toate datele ca pdf',
	          exporterVisibleAsPdf: 'Exporta datele vizibile ca pdf',
	          exporterSelectedAsPdf: 'Exporta datele selectate ca csv pdf',
	          clearAllFilters: 'Sterge toate filtrele'
	        },
	        importer: {
	          noHeaders: 'Numele coloanelor nu a putut fi incarcat, acest fisier are un header?',
	          noObjects: 'Datele nu au putut fi incarcate, exista date in fisier in afara numelor de coloane?',
	          invalidCsv: 'Fisierul nu a putut fi procesat, ati incarcat un CSV valid ?',
	          invalidJson: 'Fisierul nu a putut fi procesat, ati incarcat un Json valid?',
	          jsonNotArray: 'Json-ul incarcat trebuie sa contina un array, inchidere.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Prima pagina',
	            pageBack: 'O pagina inapoi',
	            pageSelected: 'Pagina selectata',
	            pageForward: 'O pagina inainte',
	            pageToLast: 'Ultima pagina'
	          },
	          sizes: 'Elemente per pagina',
	          totalItems: 'elemente',
	          through: 'prin',
	          of: 'of'
	        },
	        grouping: {
	          group: 'Grupeaza',
	          ungroup: 'Opreste gruparea',
	          aggregate_count: 'Agg: Count',
	          aggregate_sum: 'Agg: Sum',
	          aggregate_max: 'Agg: Max',
	          aggregate_min: 'Agg: Min',
	          aggregate_avg: 'Agg: Avg',
	          aggregate_remove: 'Agg: Remove'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('ru', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Фильтр столбца',
	            removeFilter: 'Удалить фильтр',
	            columnMenuButtonLabel: 'Меню столбца'
	          },
	          priority: 'Приоритет:',
	          filterLabel: "Фильтр столбца: "
	        },
	        aggregate: {
	          label: 'элементы'
	        },
	        groupPanel: {
	          description: 'Для группировки по столбцу перетащите сюда его название.'
	        },
	        search: {
	          placeholder: 'Поиск...',
	          showingItems: 'Показать элементы:',
	          selectedItems: 'Выбранные элементы:',
	          totalItems: 'Всего элементов:',
	          size: 'Размер страницы:',
	          first: 'Первая страница',
	          next: 'Следующая страница',
	          previous: 'Предыдущая страница',
	          last: 'Последняя страница'
	        },
	        menu: {
	          text: 'Выбрать столбцы:'
	        },
	        sort: {
	          ascending: 'По возрастанию',
	          descending: 'По убыванию',
	          none: 'Без сортировки',
	          remove: 'Убрать сортировку'
	        },
	        column: {
	          hide: 'Спрятать столбец'
	        },
	        aggregation: {
	          count: 'всего строк: ',
	          sum: 'итого: ',
	          avg: 'среднее: ',
	          min: 'мин: ',
	          max: 'макс: '
	        },
					pinning: {
						pinLeft: 'Закрепить слева',
						pinRight: 'Закрепить справа',
						unpin: 'Открепить'
					},
	        columnMenu: {
	          close: 'Закрыть'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Меню'
	          },
	          columns: 'Столбцы:',
	          importerTitle: 'Импортировать файл',
	          exporterAllAsCsv: 'Экспортировать всё в CSV',
	          exporterVisibleAsCsv: 'Экспортировать видимые данные в CSV',
	          exporterSelectedAsCsv: 'Экспортировать выбранные данные в CSV',
	          exporterAllAsPdf: 'Экспортировать всё в PDF',
	          exporterVisibleAsPdf: 'Экспортировать видимые данные в PDF',
	          exporterSelectedAsPdf: 'Экспортировать выбранные данные в PDF',
	          clearAllFilters: 'Очистите все фильтры'
	        },
	        importer: {
	          noHeaders: 'Не удалось получить названия столбцов, есть ли в файле заголовок?',
	          noObjects: 'Не удалось получить данные, есть ли в файле строки кроме заголовка?',
	          invalidCsv: 'Не удалось обработать файл, это правильный CSV-файл?',
	          invalidJson: 'Не удалось обработать файл, это правильный JSON?',
	          jsonNotArray: 'Импортируемый JSON-файл должен содержать массив, операция отменена.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Первая страница',
	            pageBack: 'Предыдущая страница',
	            pageSelected: 'Выбранная страница',
	            pageForward: 'Следующая страница',
	            pageToLast: 'Последняя страница'
	          },
	          sizes: 'строк на страницу',
	          totalItems: 'строк',
	          through: 'по',
	          of: 'из'
	        },
	        grouping: {
	          group: 'Группировать',
	          ungroup: 'Разгруппировать',
	          aggregate_count: 'Группировать: Count',
	          aggregate_sum: 'Для группы: Сумма',
	          aggregate_max: 'Для группы: Максимум',
	          aggregate_min: 'Для группы: Минимум',
	          aggregate_avg: 'Для группы: Среднее',
	          aggregate_remove: 'Для группы: Пусто'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('sk', {
	        aggregate: {
	          label: 'items'
	        },
	        groupPanel: {
	          description: 'Pretiahni sem názov stĺpca pre zoskupenie podľa toho stĺpca.'
	        },
	        search: {
	          placeholder: 'Hľadaj...',
	          showingItems: 'Zobrazujem položky:',
	          selectedItems: 'Vybraté položky:',
	          totalItems: 'Počet položiek:',
	          size: 'Počet:',
	          first: 'Prvá strana',
	          next: 'Ďalšia strana',
	          previous: 'Predchádzajúca strana',
	          last: 'Posledná strana'
	        },
	        menu: {
	          text: 'Vyberte stĺpce:'
	        },
	        sort: {
	          ascending: 'Zotriediť vzostupne',
	          descending: 'Zotriediť zostupne',
	          remove: 'Vymazať triedenie'
	        },
	        aggregation: {
	          count: 'total rows: ',
	          sum: 'total: ',
	          avg: 'avg: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        gridMenu: {
	          columns: 'Columns:',
	          importerTitle: 'Import file',
	          exporterAllAsCsv: 'Export all data as csv',
	          exporterVisibleAsCsv: 'Export visible data as csv',
	          exporterSelectedAsCsv: 'Export selected data as csv',
	          exporterAllAsPdf: 'Export all data as pdf',
	          exporterVisibleAsPdf: 'Export visible data as pdf',
	          exporterSelectedAsPdf: 'Export selected data as pdf',
	          clearAllFilters: 'Clear all filters'
	        },
	        importer: {
	          noHeaders: 'Column names were unable to be derived, does the file have a header?',
	          noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
	          invalidCsv: 'File was unable to be processed, is it valid CSV?',
	          invalidJson: 'File was unable to be processed, is it valid Json?',
	          jsonNotArray: 'Imported json file must contain an array, aborting.'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('sv', {
	        aggregate: {
	          label: 'Artiklar'
	        },
	        groupPanel: {
	          description: 'Dra en kolumnrubrik hit och släpp den för att gruppera efter den kolumnen.'
	        },
	        search: {
	          placeholder: 'Sök...',
	          showingItems: 'Visar artiklar:',
	          selectedItems: 'Valda artiklar:',
	          totalItems: 'Antal artiklar:',
	          size: 'Sidstorlek:',
	          first: 'Första sidan',
	          next: 'Nästa sida',
	          previous: 'Föregående sida',
	          last: 'Sista sidan'
	        },
	        menu: {
	          text: 'Välj kolumner:'
	        },
	        sort: {
	          ascending: 'Sortera stigande',
	          descending: 'Sortera fallande',
	          remove: 'Inaktivera sortering'
	        },
	        column: {
	          hide: 'Göm kolumn'
	        },
	        aggregation: {
	          count: 'Antal rader: ',
	          sum: 'Summa: ',
	          avg: 'Genomsnitt: ',
	          min: 'Min: ',
	          max: 'Max: '
	        },
	        pinning: {
	          pinLeft: 'Fäst vänster',
	          pinRight: 'Fäst höger',
	          unpin: 'Lösgör'
	        },
	        gridMenu: {
	          columns: 'Kolumner:',
	          importerTitle: 'Importera fil',
	          exporterAllAsCsv: 'Exportera all data som CSV',
	          exporterVisibleAsCsv: 'Exportera synlig data som CSV',
	          exporterSelectedAsCsv: 'Exportera markerad data som CSV',
	          exporterAllAsPdf: 'Exportera all data som PDF',
	          exporterVisibleAsPdf: 'Exportera synlig data som PDF',
	          exporterSelectedAsPdf: 'Exportera markerad data som PDF',
	          clearAllFilters: 'Rengör alla filter'
	        },
	        importer: {
	          noHeaders: 'Kolumnnamn kunde inte härledas. Har filen ett sidhuvud?',
	          noObjects: 'Objekt kunde inte härledas. Har filen data undantaget sidhuvud?',
	          invalidCsv: 'Filen kunde inte behandlas, är den en giltig CSV?',
	          invalidJson: 'Filen kunde inte behandlas, är den en giltig JSON?',
	          jsonNotArray: 'Importerad JSON-fil måste innehålla ett fält. Import avbruten.'
	        },
	        pagination: {
	          sizes: 'Artiklar per sida',
	          totalItems: 'Artiklar'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('ta', {
	        aggregate: {
	          label: 'உருப்படிகள்'
	        },
	        groupPanel: {
	          description: 'ஒரு பத்தியை குழுவாக அமைக்க அப்பத்தியின் தலைப்பை இங்கே  இழுத்து வரவும் '
	        },
	        search: {
	          placeholder: 'தேடல் ...',
	          showingItems: 'உருப்படிகளை காண்பித்தல்:',
	          selectedItems: 'தேர்ந்தெடுக்கப்பட்ட  உருப்படிகள்:',
	          totalItems: 'மொத்த உருப்படிகள்:',
	          size: 'பக்க அளவு: ',
	          first: 'முதல் பக்கம்',
	          next: 'அடுத்த பக்கம்',
	          previous: 'முந்தைய பக்கம் ',
	          last: 'இறுதி பக்கம்'
	        },
	        menu: {
	          text: 'பத்திகளை தேர்ந்தெடு:'
	        },
	        sort: {
	          ascending: 'மேலிருந்து கீழாக',
	          descending: 'கீழிருந்து மேலாக',
	          remove: 'வரிசையை நீக்கு'
	        },
	        column: {
	          hide: 'பத்தியை மறைத்து வை '
	        },
	        aggregation: {
	          count: 'மொத்த வரிகள்:',
	          sum: 'மொத்தம்: ',
	          avg: 'சராசரி: ',
	          min: 'குறைந்தபட்ச: ',
	          max: 'அதிகபட்ச: '
	        },
	        pinning: {
	         pinLeft: 'இடதுபுறமாக தைக்க ',
	          pinRight: 'வலதுபுறமாக தைக்க',
	          unpin: 'பிரி'
	        },
	        gridMenu: {
	          columns: 'பத்திகள்:',
	          importerTitle: 'கோப்பு : படித்தல்',
	          exporterAllAsCsv: 'எல்லா தரவுகளையும் கோப்பாக்கு: csv',
	          exporterVisibleAsCsv: 'இருக்கும் தரவுகளை கோப்பாக்கு: csv',
	          exporterSelectedAsCsv: 'தேர்ந்தெடுத்த தரவுகளை கோப்பாக்கு: csv',
	          exporterAllAsPdf: 'எல்லா தரவுகளையும் கோப்பாக்கு: pdf',
	          exporterVisibleAsPdf: 'இருக்கும் தரவுகளை கோப்பாக்கு: pdf',
	          exporterSelectedAsPdf: 'தேர்ந்தெடுத்த தரவுகளை கோப்பாக்கு: pdf',
	          clearAllFilters: 'Clear all filters'
	        },
	        importer: {
	          noHeaders: 'பத்தியின் தலைப்புகளை பெற இயலவில்லை, கோப்பிற்கு தலைப்பு உள்ளதா?',
	          noObjects: 'இலக்குகளை உருவாக்க முடியவில்லை, கோப்பில் தலைப்புகளை தவிர தரவு ஏதேனும் உள்ளதா? ',
	          invalidCsv:	'சரிவர நடைமுறை படுத்த இயலவில்லை, கோப்பு சரிதானா? - csv',
	          invalidJson: 'சரிவர நடைமுறை படுத்த இயலவில்லை, கோப்பு சரிதானா? - json',
	          jsonNotArray: 'படித்த கோப்பில் வரிசைகள் உள்ளது, நடைமுறை ரத்து செய் : json'
	        },
	        pagination: {
	          sizes		: 'உருப்படிகள் / பக்கம்',
	          totalItems	: 'உருப்படிகள் '
	        },
	        grouping: {
	          group	: 'குழு',
	          ungroup : 'பிரி',
	          aggregate_count	: 'மதிப்பீட்டு : எண்ணு',
	          aggregate_sum : 'மதிப்பீட்டு : கூட்டல்',
	          aggregate_max	: 'மதிப்பீட்டு : அதிகபட்சம்',
	          aggregate_min	: 'மதிப்பீட்டு : குறைந்தபட்சம்',
	          aggregate_avg	: 'மதிப்பீட்டு : சராசரி',
	          aggregate_remove : 'மதிப்பீட்டு : நீக்கு'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('tr', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Sütun için filtre',
	            removeFilter: 'Filtreyi Kaldır',
	            columnMenuButtonLabel: 'Sütun Menüsü'
	          },
	          priority: 'Öncelik:',
	          filterLabel: "Sütun için filtre: "
	        },
	        aggregate: {
	          label: 'kayıtlar'
	        },
	        groupPanel: {
	          description: 'Sütuna göre gruplamak için sütun başlığını buraya sürükleyin ve bırakın.'
	        },
	        search: {
	          placeholder: 'Arama...',
	          showingItems: 'Gösterilen Kayıt:',
	          selectedItems: 'Seçili Kayıt:',
	          totalItems: 'Toplam Kayıt:',
	          size: 'Sayfa Boyutu:',
	          first: 'İlk Sayfa',
	          next: 'Sonraki Sayfa',
	          previous: 'Önceki Sayfa',
	          last: 'Son Sayfa'
	        },
	        menu: {
	          text: 'Sütunları Seç:'
	        },
	        sort: {
	          ascending: 'Artan Sırada Sırala',
	          descending: 'Azalan Sırada Sırala',
	          none: 'Sıralama Yapma',
	          remove: 'Sıralamayı Kaldır'
	        },
	        column: {
	          hide: 'Sütunu Gizle'
	        },
	        aggregation: {
	          count: 'toplam satır: ',
	          sum: 'toplam: ',
	          avg: 'ort: ',
	          min: 'min: ',
	          max: 'maks: '
	        },
	        pinning: {
	          pinLeft: 'Sola Sabitle',
	          pinRight: 'Sağa Sabitle',
	          unpin: 'Sabitlemeyi Kaldır'
	        },
	        columnMenu: {
	          close: 'Kapat'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Tablo Menü'
	          },
	          columns: 'Sütunlar:',
	          importerTitle: 'Dosya içeri aktar',
	          exporterAllAsCsv: 'Bütün veriyi CSV olarak dışarı aktar',
	          exporterVisibleAsCsv: 'Görünen veriyi CSV olarak dışarı aktar',
	          exporterSelectedAsCsv: 'Seçili veriyi CSV olarak dışarı aktar',
	          exporterAllAsPdf: 'Bütün veriyi PDF olarak dışarı aktar',
	          exporterVisibleAsPdf: 'Görünen veriyi PDF olarak dışarı aktar',
	          exporterSelectedAsPdf: 'Seçili veriyi PDF olarak dışarı aktar',
	          clearAllFilters: 'Bütün filtreleri kaldır'
	        },
	        importer: {
	          noHeaders: 'Sütun isimleri üretilemiyor, dosyanın bir başlığı var mı?',
	          noObjects: 'Nesneler üretilemiyor, dosyada başlıktan başka bir veri var mı?',
	          invalidCsv: 'Dosya işlenemedi, geçerli bir CSV dosyası mı?',
	          invalidJson: 'Dosya işlenemedi, geçerli bir Json dosyası mı?',
	          jsonNotArray: 'Alınan Json dosyasında bir dizi bulunmalıdır, işlem iptal ediliyor.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'İlk sayfaya',
	            pageBack: 'Geri git',
	            pageSelected: 'Seçili sayfa',
	            pageForward: 'İleri git',
	            pageToLast: 'Sona git'
	          },
	          sizes: 'Sayfadaki nesne sayısı',
	          totalItems: 'kayıtlar',
	          through: '', //note(fsw) : turkish dont have this preposition 
	          of: '' //note(fsw) : turkish dont have this preposition
	        },
	        grouping: {
	          group: 'Grupla',
	          ungroup: 'Gruplama',
	          aggregate_count: 'Yekun: Sayı',
	          aggregate_sum: 'Yekun: Toplam',
	          aggregate_max: 'Yekun: Maks',
	          aggregate_min: 'Yekun: Min',
	          aggregate_avg: 'Yekun: Ort',
	          aggregate_remove: 'Yekun: Sil'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();
	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('ua', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Фільтр стовпчика',
	            removeFilter: 'Видалити фільтр',
	            columnMenuButtonLabel: 'Меню ствпчика'
	          },
	          priority: 'Пріоритет:',
	          filterLabel: "Фільтр стовпчика: "
	        },
	        aggregate: {
	          label: 'елементи'
	        },
	        groupPanel: {
	          description: 'Для групування за стовпчиком перетягніть сюди його назву.'
	        },
	        search: {
	          placeholder: 'Пошук...',
	          showingItems: 'Показати елементи:',
	          selectedItems: 'Обрані елементи:',
	          totalItems: 'Усього елементів:',
	          size: 'Розмір сторінки:',
	          first: 'Перша сторінка',
	          next: 'Наступна сторінка',
	          previous: 'Попередня сторінка',
	          last: 'Остання сторінка'
	        },
	        menu: {
	          text: 'Обрати ствпчики:'
	        },
	        sort: {
	          ascending: 'За зростанням',
	          descending: 'За спаданням',
	          none: 'Без сортування',
	          remove: 'Прибрати сортування'
	        },
	        column: {
	          hide: 'Приховати стовпчик'
	        },
	        aggregation: {
	          count: 'усього рядків: ',
	          sum: 'ітого: ',
	          avg: 'середнє: ',
	          min: 'мін: ',
	          max: 'макс: '
	        },
					pinning: {
						pinLeft: 'Закріпити ліворуч',
						pinRight: 'Закріпити праворуч',
						unpin: 'Відкріпити'
					},
	        columnMenu: {
	          close: 'Закрити'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Меню'
	          },
	          columns: 'Стовпчики:',
	          importerTitle: 'Імпортувати файл',
	          exporterAllAsCsv: 'Експортувати все в CSV',
	          exporterVisibleAsCsv: 'Експортувати видимі дані в CSV',
	          exporterSelectedAsCsv: 'Експортувати обрані дані в CSV',
	          exporterAllAsPdf: 'Експортувати все в PDF',
	          exporterVisibleAsPdf: 'Експортувати видимі дані в PDF',
	          exporterSelectedAsPdf: 'Експортувати обрані дані в PDF',
	          clearAllFilters: 'Очистити всі фільтри'
	        },
	        importer: {
	          noHeaders: 'Не вдалося отримати назви стовпчиків, чи є в файлі заголовок?',
	          noObjects: 'Не вдалося отримати дані, чи є в файлі рядки окрім заголовка?',
	          invalidCsv: 'Не вдалося обробити файл, чи це коректний CSV-файл?',
	          invalidJson: 'Не вдалося обробити файл, чи це коректний JSON?',
	          jsonNotArray: 'JSON-файл що імпортується повинен містити масив, операцію скасовано.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Перша сторінка',
	            pageBack: 'Попередня сторінка',
	            pageSelected: 'Обрана сторінка',
	            pageForward: 'Наступна сторінка',
	            pageToLast: 'Остання сторінка'
	          },
	          sizes: 'рядків на сторінку',
	          totalItems: 'рядків',
	          through: 'по',
	          of: 'з'
	        },
	        grouping: {
	          group: 'Групувати',
	          ungroup: 'Розгрупувати',
	          aggregate_count: 'Групувати: Кількість',
	          aggregate_sum: 'Для групи: Сума',
	          aggregate_max: 'Для групи: Максимум',
	          aggregate_min: 'Для групи: Мінімум',
	          aggregate_avg: 'Для групи: Серднє',
	          aggregate_remove: 'Для групи: Пусто'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	/**
	 * @ngdoc overview
	 * @name ui.grid.i18n
	 * @description
	 *
	 *  # ui.grid.i18n
	 * This module provides i18n functions to ui.grid and any application that wants to use it

	 *
	 * <div doc-module-components="ui.grid.i18n"></div>
	 */

	(function () {
	  var DIRECTIVE_ALIASES = ['uiT', 'uiTranslate'];
	  var FILTER_ALIASES = ['t', 'uiTranslate'];

	  var module = angular.module('ui.grid.i18n');


	  /**
	   *  @ngdoc object
	   *  @name ui.grid.i18n.constant:i18nConstants
	   *
	   *  @description constants available in i18n module
	   */
	  module.constant('i18nConstants', {
	    MISSING: '[MISSING]',
	    UPDATE_EVENT: '$uiI18n',

	    LOCALE_DIRECTIVE_ALIAS: 'uiI18n',
	    // default to english
	    DEFAULT_LANG: 'en'
	  });

	//    module.config(['$provide', function($provide) {
	//        $provide.decorator('i18nService', ['$delegate', function($delegate) {}])}]);

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.i18n.service:i18nService
	   *
	   *  @description Services for i18n
	   */
	  module.service('i18nService', ['$log', 'i18nConstants', '$rootScope',
	    function ($log, i18nConstants, $rootScope) {

	      var langCache = {
	        _langs: {},
	        current: null,
	        get: function (lang) {
	          return this._langs[lang.toLowerCase()];
	        },
	        add: function (lang, strings) {
	          var lower = lang.toLowerCase();
	          if (!this._langs[lower]) {
	            this._langs[lower] = {};
	          }
	          angular.extend(this._langs[lower], strings);
	        },
	        getAllLangs: function () {
	          var langs = [];
	          if (!this._langs) {
	            return langs;
	          }

	          for (var key in this._langs) {
	            langs.push(key);
	          }

	          return langs;
	        },
	        setCurrent: function (lang) {
	          this.current = lang.toLowerCase();
	        },
	        getCurrentLang: function () {
	          return this.current;
	        }
	      };

	      var service = {

	        /**
	         * @ngdoc service
	         * @name add
	         * @methodOf ui.grid.i18n.service:i18nService
	         * @description  Adds the languages and strings to the cache. Decorate this service to
	         * add more translation strings
	         * @param {string} lang language to add
	         * @param {object} stringMaps of strings to add grouped by property names
	         * @example
	         * <pre>
	         *      i18nService.add('en', {
	         *         aggregate: {
	         *                 label1: 'items',
	         *                 label2: 'some more items'
	         *                 }
	         *         },
	         *         groupPanel: {
	         *              description: 'Drag a column header here and drop it to group by that column.'
	         *           }
	         *      }
	         * </pre>
	         */
	        add: function (langs, stringMaps) {
	          if (typeof(langs) === 'object') {
	            angular.forEach(langs, function (lang) {
	              if (lang) {
	                langCache.add(lang, stringMaps);
	              }
	            });
	          } else {
	            langCache.add(langs, stringMaps);
	          }
	        },

	        /**
	         * @ngdoc service
	         * @name getAllLangs
	         * @methodOf ui.grid.i18n.service:i18nService
	         * @description  return all currently loaded languages
	         * @returns {array} string
	         */
	        getAllLangs: function () {
	          return langCache.getAllLangs();
	        },

	        /**
	         * @ngdoc service
	         * @name get
	         * @methodOf ui.grid.i18n.service:i18nService
	         * @description  return all currently loaded languages
	         * @param {string} lang to return.  If not specified, returns current language
	         * @returns {object} the translation string maps for the language
	         */
	        get: function (lang) {
	          var language = lang ? lang : service.getCurrentLang();
	          return langCache.get(language);
	        },

	        /**
	         * @ngdoc service
	         * @name getSafeText
	         * @methodOf ui.grid.i18n.service:i18nService
	         * @description  returns the text specified in the path or a Missing text if text is not found
	         * @param {string} path property path to use for retrieving text from string map
	         * @param {string} lang to return.  If not specified, returns current language
	         * @returns {object} the translation for the path
	         * @example
	         * <pre>
	         * i18nService.getSafeText('sort.ascending')
	         * </pre>
	         */
	        getSafeText: function (path, lang) {
	          var language = lang ? lang : service.getCurrentLang();
	          var trans = langCache.get(language);

	          if (!trans) {
	            return i18nConstants.MISSING;
	          }

	          var paths = path.split('.');
	          var current = trans;

	          for (var i = 0; i < paths.length; ++i) {
	            if (current[paths[i]] === undefined || current[paths[i]] === null) {
	              return i18nConstants.MISSING;
	            } else {
	              current = current[paths[i]];
	            }
	          }

	          return current;

	        },

	        /**
	         * @ngdoc service
	         * @name setCurrentLang
	         * @methodOf ui.grid.i18n.service:i18nService
	         * @description sets the current language to use in the application
	         * $broadcasts the Update_Event on the $rootScope
	         * @param {string} lang to set
	         * @example
	         * <pre>
	         * i18nService.setCurrentLang('fr');
	         * </pre>
	         */

	        setCurrentLang: function (lang) {
	          if (lang) {
	            langCache.setCurrent(lang);
	            $rootScope.$broadcast(i18nConstants.UPDATE_EVENT);
	          }
	        },

	        /**
	         * @ngdoc service
	         * @name getCurrentLang
	         * @methodOf ui.grid.i18n.service:i18nService
	         * @description returns the current language used in the application
	         */
	        getCurrentLang: function () {
	          var lang = langCache.getCurrentLang();
	          if (!lang) {
	            lang = i18nConstants.DEFAULT_LANG;
	            langCache.setCurrent(lang);
	          }
	          return lang;
	        }

	      };

	      return service;

	    }]);

	  var localeDirective = function (i18nService, i18nConstants) {
	    return {
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs) {
	            var alias = i18nConstants.LOCALE_DIRECTIVE_ALIAS;
	            // check for watchable property
	            var lang = $scope.$eval($attrs[alias]);
	            if (lang) {
	              $scope.$watch($attrs[alias], function () {
	                i18nService.setCurrentLang(lang);
	              });
	            } else if ($attrs.$$observers) {
	              $attrs.$observe(alias, function () {
	                i18nService.setCurrentLang($attrs[alias] || i18nConstants.DEFAULT_LANG);
	              });
	            }
	          }
	        };
	      }
	    };
	  };

	  module.directive('uiI18n', ['i18nService', 'i18nConstants', localeDirective]);

	  // directive syntax
	  var uitDirective = function ($parse, i18nService, i18nConstants) {
	    return {
	      restrict: 'EA',
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs) {
	            var alias1 = DIRECTIVE_ALIASES[0],
	              alias2 = DIRECTIVE_ALIASES[1];
	            var token = $attrs[alias1] || $attrs[alias2] || $elm.html();
	            var missing = i18nConstants.MISSING + token;
	            var observer;
	            if ($attrs.$$observers) {
	              var prop = $attrs[alias1] ? alias1 : alias2;
	              observer = $attrs.$observe(prop, function (result) {
	                if (result) {
	                  $elm.html($parse(result)(i18nService.getCurrentLang()) || missing);
	                }
	              });
	            }
	            var getter = $parse(token);
	            var listener = $scope.$on(i18nConstants.UPDATE_EVENT, function (evt) {
	              if (observer) {
	                observer($attrs[alias1] || $attrs[alias2]);
	              } else {
	                // set text based on i18n current language
	                $elm.html(getter(i18nService.get()) || missing);
	              }
	            });
	            $scope.$on('$destroy', listener);

	            $elm.html(getter(i18nService.get()) || missing);
	          }
	        };
	      }
	    };
	  };

	  angular.forEach( DIRECTIVE_ALIASES, function ( alias ) {
	    module.directive( alias, ['$parse', 'i18nService', 'i18nConstants', uitDirective] );
	  } );

	  // optional filter syntax
	  var uitFilter = function ($parse, i18nService, i18nConstants) {
	    return function (data) {
	      var getter = $parse(data);
	      // set text based on i18n current language
	      return getter(i18nService.get()) || i18nConstants.MISSING + data;
	    };
	  };

	  angular.forEach( FILTER_ALIASES, function ( alias ) {
	    module.filter( alias, ['$parse', 'i18nService', 'i18nConstants', uitFilter] );
	  } );


	})();
	(function() {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('zh-cn', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: '列过滤器',
	            removeFilter: '移除过滤器',
	            columnMenuButtonLabel: '列菜单'
	          },
	          priority: '优先级:',
	          filterLabel: "列过滤器: "
	        },
	        aggregate: {
	          label: '行'
	        },
	        groupPanel: {
	          description: '拖曳表头到此处进行分组'
	        },
	        search: {
	          placeholder: '查找',
	          showingItems: '已显示行数：',
	          selectedItems: '已选择行数：',
	          totalItems: '总行数：',
	          size: '每页显示行数：',
	          first: '首页',
	          next: '下一页',
	          previous: '上一页',
	          last: '末页'
	        },
	        menu: {
	          text: '选择列：'
	        },
	        sort: {
	          ascending: '升序',
	          descending: '降序',
	          none: '无序',
	          remove: '取消排序'
	        },
	        column: {
	          hide: '隐藏列'
	        },
	        aggregation: {
	          count: '计数：',
	          sum: '求和：',
	          avg: '均值：',
	          min: '最小值：',
	          max: '最大值：'
	        },
	        pinning: {
	          pinLeft: '左侧固定',
	          pinRight: '右侧固定',
	          unpin: '取消固定'
	        },
	        columnMenu: {
	          close: '关闭'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: '表格菜单'
	          },
	          columns: '列：',
	          importerTitle: '导入文件',
	          exporterAllAsCsv: '导出全部数据到CSV',
	          exporterVisibleAsCsv: '导出可见数据到CSV',
	          exporterSelectedAsCsv: '导出已选数据到CSV',
	          exporterAllAsPdf: '导出全部数据到PDF',
	          exporterVisibleAsPdf: '导出可见数据到PDF',
	          exporterSelectedAsPdf: '导出已选数据到PDF',
	          clearAllFilters: '清除所有过滤器'
	        },
	        importer: {
	          noHeaders: '无法获取列名，确定文件包含表头？',
	          noObjects: '无法获取数据，确定文件包含数据？',
	          invalidCsv: '无法处理文件，确定是合法的CSV文件？',
	          invalidJson: '无法处理文件，确定是合法的JSON文件？',
	          jsonNotArray: '导入的文件不是JSON数组！'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: '第一页',
	            pageBack: '上一页',
	            pageSelected: '当前页',
	            pageForward: '下一页',
	            pageToLast: '最后一页'
	          },
	          sizes: '行每页',
	          totalItems: '行',
	          through: '至',
	          of: '共'
	        },
	        grouping: {
	          group: '分组',
	          ungroup: '取消分组',
	          aggregate_count: '合计: 计数',
	          aggregate_sum: '合计: 求和',
	          aggregate_max: '合计: 最大',
	          aggregate_min: '合计: 最小',
	          aggregate_avg: '合计: 平均',
	          aggregate_remove: '合计: 移除'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function() {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('zh-tw', {
	        aggregate: {
	          label: '行'
	        },
	        groupPanel: {
	          description: '拖曳表頭到此處進行分組'
	        },
	        search: {
	          placeholder: '查找',
	          showingItems: '已顯示行數：',
	          selectedItems: '已選擇行數：',
	          totalItems: '總行數：',
	          size: '每頁顯示行數：',
	          first: '首頁',
	          next: '下壹頁',
	          previous: '上壹頁',
	          last: '末頁'
	        },
	        menu: {
	          text: '選擇列：'
	        },
	        sort: {
	          ascending: '升序',
	          descending: '降序',
	          remove: '取消排序'
	        },
	        column: {
	          hide: '隱藏列'
	        },
	        aggregation: {
	          count: '計數：',
	          sum: '求和：',
	          avg: '均值：',
	          min: '最小值：',
	          max: '最大值：'
	        },
	        pinning: {
	          pinLeft: '左側固定',
	          pinRight: '右側固定',
	          unpin: '取消固定'
	        },
	        gridMenu: {
	          columns: '列：',
	          importerTitle: '導入文件',
	          exporterAllAsCsv: '導出全部數據到CSV',
	          exporterVisibleAsCsv: '導出可見數據到CSV',
	          exporterSelectedAsCsv: '導出已選數據到CSV',
	          exporterAllAsPdf: '導出全部數據到PDF',
	          exporterVisibleAsPdf: '導出可見數據到PDF',
	          exporterSelectedAsPdf: '導出已選數據到PDF',
	          clearAllFilters: '清除所有过滤器'
	        },
	        importer: {
	          noHeaders: '無法獲取列名，確定文件包含表頭？',
	          noObjects: '無法獲取數據，確定文件包含數據？',
	          invalidCsv: '無法處理文件，確定是合法的CSV文件？',
	          invalidJson: '無法處理文件，確定是合法的JSON文件？',
	          jsonNotArray: '導入的文件不是JSON數組！'
	        },
	        pagination: {
	          sizes: '行每頁',
	          totalItems: '行'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function() {
	  'use strict';
	  /**
	   *  @ngdoc overview
	   *  @name ui.grid.autoResize
	   *
	   *  @description
	   *
	   *  #ui.grid.autoResize
	   *
	   *  <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
	   *
	   *  This module provides auto-resizing functionality to UI-Grid.
	   */
	  var module = angular.module('ui.grid.autoResize', ['ui.grid']);


	  module.directive('uiGridAutoResize', ['$timeout', 'gridUtil', function ($timeout, gridUtil) {
	    return {
	      require: 'uiGrid',
	      scope: false,
	      link: function ($scope, $elm, $attrs, uiGridCtrl) {
	        var prevGridWidth, prevGridHeight;

	        function getDimensions() {
	          prevGridHeight = gridUtil.elementHeight($elm);
	          prevGridWidth = gridUtil.elementWidth($elm);
	        }

	        // Initialize the dimensions
	        getDimensions();

	        var resizeTimeoutId;
	        function startTimeout() {
	          clearTimeout(resizeTimeoutId);

	          resizeTimeoutId = setTimeout(function () {
	            var newGridHeight = gridUtil.elementHeight($elm);
	            var newGridWidth = gridUtil.elementWidth($elm);

	            if (newGridHeight !== prevGridHeight || newGridWidth !== prevGridWidth) {
	              uiGridCtrl.grid.gridHeight = newGridHeight;
	              uiGridCtrl.grid.gridWidth = newGridWidth;
	              uiGridCtrl.grid.api.core.raise.gridDimensionChanged(prevGridHeight, prevGridWidth, newGridHeight, newGridWidth);

	              $scope.$apply(function () {
	                uiGridCtrl.grid.refresh()
	                  .then(function () {
	                    getDimensions();

	                    startTimeout();
	                  });
	              });
	            }
	            else {
	              startTimeout();
	            }
	          }, 250);
	        }

	        startTimeout();

	        $scope.$on('$destroy', function() {
	          clearTimeout(resizeTimeoutId);
	        });
	      }
	    };
	  }]);
	})();

	(function () {
	  'use strict';

	  /**
	   *  @ngdoc overview
	   *  @name ui.grid.cellNav
	   *
	   *  @description

	      #ui.grid.cellNav

	      <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>

	      This module provides auto-resizing functionality to UI-Grid.
	   */
	  var module = angular.module('ui.grid.cellNav', ['ui.grid']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.cellNav.constant:uiGridCellNavConstants
	   *
	   *  @description constants available in cellNav
	   */
	  module.constant('uiGridCellNavConstants', {
	    FEATURE_NAME: 'gridCellNav',
	    CELL_NAV_EVENT: 'cellNav',
	    direction: {LEFT: 0, RIGHT: 1, UP: 2, DOWN: 3, PG_UP: 4, PG_DOWN: 5},
	    EVENT_TYPE: {
	      KEYDOWN: 0,
	      CLICK: 1,
	      CLEAR: 2
	    }
	  });


	  module.factory('uiGridCellNavFactory', ['gridUtil', 'uiGridConstants', 'uiGridCellNavConstants', 'GridRowColumn', '$q',
	    function (gridUtil, uiGridConstants, uiGridCellNavConstants, GridRowColumn, $q) {
	      /**
	       *  @ngdoc object
	       *  @name ui.grid.cellNav.object:CellNav
	       *  @description returns a CellNav prototype function
	       *  @param {object} rowContainer container for rows
	       *  @param {object} colContainer parent column container
	       *  @param {object} leftColContainer column container to the left of parent
	       *  @param {object} rightColContainer column container to the right of parent
	       */
	      var UiGridCellNav = function UiGridCellNav(rowContainer, colContainer, leftColContainer, rightColContainer) {
	        this.rows = rowContainer.visibleRowCache;
	        this.columns = colContainer.visibleColumnCache;
	        this.leftColumns = leftColContainer ? leftColContainer.visibleColumnCache : [];
	        this.rightColumns = rightColContainer ? rightColContainer.visibleColumnCache : [];
	        this.bodyContainer = rowContainer;
	      };

	      /** returns focusable columns of all containers */
	      UiGridCellNav.prototype.getFocusableCols = function () {
	        var allColumns = this.leftColumns.concat(this.columns, this.rightColumns);

	        return allColumns.filter(function (col) {
	          return col.colDef.allowCellFocus;
	        });
	      };

	      /**
	       *  @ngdoc object
	       *  @name ui.grid.cellNav.api:GridRow
	       *
	       *  @description GridRow settings for cellNav feature, these are available to be
	       *  set only internally (for example, by other features)
	       */

	      /**
	       *  @ngdoc object
	       *  @name allowCellFocus
	       *  @propertyOf  ui.grid.cellNav.api:GridRow
	       *  @description Enable focus on a cell within this row.  If set to false then no cells
	       *  in this row can be focused - group header rows as an example would set this to false.
	       *  <br/>Defaults to true
	       */
	      /** returns focusable rows */
	      UiGridCellNav.prototype.getFocusableRows = function () {
	        return this.rows.filter(function(row) {
	          return row.allowCellFocus !== false;
	        });
	      };

	      UiGridCellNav.prototype.getNextRowCol = function (direction, curRow, curCol) {
	        switch (direction) {
	          case uiGridCellNavConstants.direction.LEFT:
	            return this.getRowColLeft(curRow, curCol);
	          case uiGridCellNavConstants.direction.RIGHT:
	            return this.getRowColRight(curRow, curCol);
	          case uiGridCellNavConstants.direction.UP:
	            return this.getRowColUp(curRow, curCol);
	          case uiGridCellNavConstants.direction.DOWN:
	            return this.getRowColDown(curRow, curCol);
	          case uiGridCellNavConstants.direction.PG_UP:
	            return this.getRowColPageUp(curRow, curCol);
	          case uiGridCellNavConstants.direction.PG_DOWN:
	            return this.getRowColPageDown(curRow, curCol);
	        }

	      };

	      UiGridCellNav.prototype.initializeSelection = function () {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        if (focusableCols.length === 0 || focusableRows.length === 0) {
	          return null;
	        }

	        var curRowIndex = 0;
	        var curColIndex = 0;
	        return new GridRowColumn(focusableRows[0], focusableCols[0]); //return same row
	      };

	      UiGridCellNav.prototype.getRowColLeft = function (curRow, curCol) {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        var curColIndex = focusableCols.indexOf(curCol);
	        var curRowIndex = focusableRows.indexOf(curRow);

	        //could not find column in focusable Columns so set it to 1
	        if (curColIndex === -1) {
	          curColIndex = 1;
	        }

	        var nextColIndex = curColIndex === 0 ? focusableCols.length - 1 : curColIndex - 1;

	        //get column to left
	        if (nextColIndex > curColIndex) {
	          // On the first row
	          // if (curRowIndex === 0 && curColIndex === 0) {
	          //   return null;
	          // }
	          if (curRowIndex === 0) {
	            return new GridRowColumn(curRow, focusableCols[nextColIndex]); //return same row
	          }
	          else {
	            //up one row and far right column
	            return new GridRowColumn(focusableRows[curRowIndex - 1], focusableCols[nextColIndex]);
	          }
	        }
	        else {
	          return new GridRowColumn(curRow, focusableCols[nextColIndex]);
	        }
	      };



	      UiGridCellNav.prototype.getRowColRight = function (curRow, curCol) {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        var curColIndex = focusableCols.indexOf(curCol);
	        var curRowIndex = focusableRows.indexOf(curRow);

	        //could not find column in focusable Columns so set it to 0
	        if (curColIndex === -1) {
	          curColIndex = 0;
	        }
	        var nextColIndex = curColIndex === focusableCols.length - 1 ? 0 : curColIndex + 1;

	        if (nextColIndex < curColIndex) {
	          if (curRowIndex === focusableRows.length - 1) {
	            return new GridRowColumn(curRow, focusableCols[nextColIndex]); //return same row
	          }
	          else {
	            //down one row and far left column
	            return new GridRowColumn(focusableRows[curRowIndex + 1], focusableCols[nextColIndex]);
	          }
	        }
	        else {
	          return new GridRowColumn(curRow, focusableCols[nextColIndex]);
	        }
	      };

	      UiGridCellNav.prototype.getRowColDown = function (curRow, curCol) {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        var curColIndex = focusableCols.indexOf(curCol);
	        var curRowIndex = focusableRows.indexOf(curRow);

	        //could not find column in focusable Columns so set it to 0
	        if (curColIndex === -1) {
	          curColIndex = 0;
	        }

	        if (curRowIndex === focusableRows.length - 1) {
	          return new GridRowColumn(curRow, focusableCols[curColIndex]); //return same row
	        }
	        else {
	          //down one row
	          return new GridRowColumn(focusableRows[curRowIndex + 1], focusableCols[curColIndex]);
	        }
	      };

	      UiGridCellNav.prototype.getRowColPageDown = function (curRow, curCol) {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        var curColIndex = focusableCols.indexOf(curCol);
	        var curRowIndex = focusableRows.indexOf(curRow);

	        //could not find column in focusable Columns so set it to 0
	        if (curColIndex === -1) {
	          curColIndex = 0;
	        }

	        var pageSize = this.bodyContainer.minRowsToRender();
	        if (curRowIndex >= focusableRows.length - pageSize) {
	          return new GridRowColumn(focusableRows[focusableRows.length - 1], focusableCols[curColIndex]); //return last row
	        }
	        else {
	          //down one page
	          return new GridRowColumn(focusableRows[curRowIndex + pageSize], focusableCols[curColIndex]);
	        }
	      };

	      UiGridCellNav.prototype.getRowColUp = function (curRow, curCol) {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        var curColIndex = focusableCols.indexOf(curCol);
	        var curRowIndex = focusableRows.indexOf(curRow);

	        //could not find column in focusable Columns so set it to 0
	        if (curColIndex === -1) {
	          curColIndex = 0;
	        }

	        if (curRowIndex === 0) {
	          return new GridRowColumn(curRow, focusableCols[curColIndex]); //return same row
	        }
	        else {
	          //up one row
	          return new GridRowColumn(focusableRows[curRowIndex - 1], focusableCols[curColIndex]);
	        }
	      };

	      UiGridCellNav.prototype.getRowColPageUp = function (curRow, curCol) {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        var curColIndex = focusableCols.indexOf(curCol);
	        var curRowIndex = focusableRows.indexOf(curRow);

	        //could not find column in focusable Columns so set it to 0
	        if (curColIndex === -1) {
	          curColIndex = 0;
	        }

	        var pageSize = this.bodyContainer.minRowsToRender();
	        if (curRowIndex - pageSize < 0) {
	          return new GridRowColumn(focusableRows[0], focusableCols[curColIndex]); //return first row
	        }
	        else {
	          //up one page
	          return new GridRowColumn(focusableRows[curRowIndex - pageSize], focusableCols[curColIndex]);
	        }
	      };
	      return UiGridCellNav;
	    }]);

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.cellNav.service:uiGridCellNavService
	   *
	   *  @description Services for cell navigation features. If you don't like the key maps we use,
	   *  or the direction cells navigation, override with a service decorator (see angular docs)
	   */
	  module.service('uiGridCellNavService', ['gridUtil', 'uiGridConstants', 'uiGridCellNavConstants', '$q', 'uiGridCellNavFactory', 'GridRowColumn', 'ScrollEvent',
	    function (gridUtil, uiGridConstants, uiGridCellNavConstants, $q, UiGridCellNav, GridRowColumn, ScrollEvent) {

	      var service = {

	        initializeGrid: function (grid) {
	          grid.registerColumnBuilder(service.cellNavColumnBuilder);


	          /**
	           *  @ngdoc object
	           *  @name ui.grid.cellNav:Grid.cellNav
	           * @description cellNav properties added to grid class
	           */
	          grid.cellNav = {};
	          grid.cellNav.lastRowCol = null;
	          grid.cellNav.focusedCells = [];

	          service.defaultGridOptions(grid.options);

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.cellNav.api:PublicApi
	           *
	           *  @description Public Api for cellNav feature
	           */
	          var publicApi = {
	            events: {
	              cellNav: {
	                /**
	                 * @ngdoc event
	                 * @name navigate
	                 * @eventOf  ui.grid.cellNav.api:PublicApi
	                 * @description raised when the active cell is changed
	                 * <pre>
	                 *      gridApi.cellNav.on.navigate(scope,function(newRowcol, oldRowCol){})
	                 * </pre>
	                 * @param {object} newRowCol new position
	                 * @param {object} oldRowCol old position
	                 */
	                navigate: function (newRowCol, oldRowCol) {},
	                /**
	                 * @ngdoc event
	                 * @name viewPortKeyDown
	                 * @eventOf  ui.grid.cellNav.api:PublicApi
	                 * @description  is raised when the viewPort receives a keyDown event. Cells never get focus in uiGrid
	                 * due to the difficulties of setting focus on a cell that is not visible in the viewport.  Use this
	                 * event whenever you need a keydown event on a cell
	                 * <br/>
	                 * @param {object} event keydown event
	                 * @param {object} rowCol current rowCol position
	                 */
	                viewPortKeyDown: function (event, rowCol) {},

	                /**
	                 * @ngdoc event
	                 * @name viewPortKeyPress
	                 * @eventOf  ui.grid.cellNav.api:PublicApi
	                 * @description  is raised when the viewPort receives a keyPress event. Cells never get focus in uiGrid
	                 * due to the difficulties of setting focus on a cell that is not visible in the viewport.  Use this
	                 * event whenever you need a keypress event on a cell
	                 * <br/>
	                 * @param {object} event keypress event
	                 * @param {object} rowCol current rowCol position
	                 */
	                viewPortKeyPress: function (event, rowCol) {}
	              }
	            },
	            methods: {
	              cellNav: {
	                /**
	                 * @ngdoc function
	                 * @name scrollToFocus
	                 * @methodOf  ui.grid.cellNav.api:PublicApi
	                 * @description brings the specified row and column into view, and sets focus
	                 * to that cell
	                 * @param {object} rowEntity gridOptions.data[] array instance to make visible and set focus
	                 * @param {object} colDef to make visible and set focus
	                 * @returns {promise} a promise that is resolved after any scrolling is finished
	                 */
	                scrollToFocus: function (rowEntity, colDef) {
	                  return service.scrollToFocus(grid, rowEntity, colDef);
	                },

	                /**
	                 * @ngdoc function
	                 * @name getFocusedCell
	                 * @methodOf  ui.grid.cellNav.api:PublicApi
	                 * @description returns the current (or last if Grid does not have focus) focused row and column
	                 * <br> value is null if no selection has occurred
	                 */
	                getFocusedCell: function () {
	                  return grid.cellNav.lastRowCol;
	                },

	                /**
	                 * @ngdoc function
	                 * @name getCurrentSelection
	                 * @methodOf  ui.grid.cellNav.api:PublicApi
	                 * @description returns an array containing the current selection
	                 * <br> array is empty if no selection has occurred
	                 */
	                getCurrentSelection: function () {
	                  return grid.cellNav.focusedCells;
	                },

	                /**
	                 * @ngdoc function
	                 * @name rowColSelectIndex
	                 * @methodOf  ui.grid.cellNav.api:PublicApi
	                 * @description returns the index in the order in which the GridRowColumn was selected, returns -1 if the GridRowColumn
	                 * isn't selected
	                 * @param {object} rowCol the rowCol to evaluate
	                 */
	                rowColSelectIndex: function (rowCol) {
	                  //return gridUtil.arrayContainsObjectWithProperty(grid.cellNav.focusedCells, 'col.uid', rowCol.col.uid) &&
	                  var index = -1;
	                  for (var i = 0; i < grid.cellNav.focusedCells.length; i++) {
	                    if (grid.cellNav.focusedCells[i].col.uid === rowCol.col.uid &&
	                      grid.cellNav.focusedCells[i].row.uid === rowCol.row.uid) {
	                      index = i;
	                      break;
	                    }
	                  }
	                  return index;
	                }
	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);

	          grid.api.registerMethodsFromObject(publicApi.methods);

	        },

	        defaultGridOptions: function (gridOptions) {
	          /**
	           *  @ngdoc object
	           *  @name ui.grid.cellNav.api:GridOptions
	           *
	           *  @description GridOptions for cellNav feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	          /**
	           *  @ngdoc object
	           *  @name modifierKeysToMultiSelectCells
	           *  @propertyOf  ui.grid.cellNav.api:GridOptions
	           *  @description Enable multiple cell selection only when using the ctrlKey or shiftKey.
	           *  <br/>Defaults to false
	           */
	          gridOptions.modifierKeysToMultiSelectCells = gridOptions.modifierKeysToMultiSelectCells === true;

	        },

	        /**
	         * @ngdoc service
	         * @name decorateRenderContainers
	         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
	         * @description  decorates grid renderContainers with cellNav functions
	         */
	        decorateRenderContainers: function (grid) {

	          var rightContainer = grid.hasRightContainer() ? grid.renderContainers.right : null;
	          var leftContainer = grid.hasLeftContainer() ? grid.renderContainers.left : null;

	          if (leftContainer !== null) {
	            grid.renderContainers.left.cellNav = new UiGridCellNav(grid.renderContainers.body, leftContainer, rightContainer, grid.renderContainers.body);
	          }
	          if (rightContainer !== null) {
	            grid.renderContainers.right.cellNav = new UiGridCellNav(grid.renderContainers.body, rightContainer, grid.renderContainers.body, leftContainer);
	          }

	          grid.renderContainers.body.cellNav = new UiGridCellNav(grid.renderContainers.body, grid.renderContainers.body, leftContainer, rightContainer);
	        },

	        /**
	         * @ngdoc service
	         * @name getDirection
	         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
	         * @description  determines which direction to for a given keyDown event
	         * @returns {uiGridCellNavConstants.direction} direction
	         */
	        getDirection: function (evt) {
	          if (evt.keyCode === uiGridConstants.keymap.LEFT ||
	            (evt.keyCode === uiGridConstants.keymap.TAB && evt.shiftKey)) {
	            return uiGridCellNavConstants.direction.LEFT;
	          }
	          if (evt.keyCode === uiGridConstants.keymap.RIGHT ||
	            evt.keyCode === uiGridConstants.keymap.TAB) {
	            return uiGridCellNavConstants.direction.RIGHT;
	          }

	          if (evt.keyCode === uiGridConstants.keymap.UP ||
	            (evt.keyCode === uiGridConstants.keymap.ENTER && evt.shiftKey) ) {
	            return uiGridCellNavConstants.direction.UP;
	          }

	          if (evt.keyCode === uiGridConstants.keymap.PG_UP){
	            return uiGridCellNavConstants.direction.PG_UP;
	          }

	          if (evt.keyCode === uiGridConstants.keymap.DOWN ||
	            evt.keyCode === uiGridConstants.keymap.ENTER && !(evt.ctrlKey || evt.altKey)) {
	            return uiGridCellNavConstants.direction.DOWN;
	          }

	          if (evt.keyCode === uiGridConstants.keymap.PG_DOWN){
	            return uiGridCellNavConstants.direction.PG_DOWN;
	          }

	          return null;
	        },

	        /**
	         * @ngdoc service
	         * @name cellNavColumnBuilder
	         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
	         * @description columnBuilder function that adds cell navigation properties to grid column
	         * @returns {promise} promise that will load any needed templates when resolved
	         */
	        cellNavColumnBuilder: function (colDef, col, gridOptions) {
	          var promises = [];

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.cellNav.api:ColumnDef
	           *
	           *  @description Column Definitions for cellNav feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	           */

	          /**
	           *  @ngdoc object
	           *  @name allowCellFocus
	           *  @propertyOf  ui.grid.cellNav.api:ColumnDef
	           *  @description Enable focus on a cell within this column.
	           *  <br/>Defaults to true
	           */
	          colDef.allowCellFocus = colDef.allowCellFocus === undefined ? true : colDef.allowCellFocus;

	          return $q.all(promises);
	        },

	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
	         * @name scrollToFocus
	         * @description Scroll the grid such that the specified
	         * row and column is in view, and set focus to the cell in that row and column
	         * @param {Grid} grid the grid you'd like to act upon, usually available
	         * from gridApi.grid
	         * @param {object} rowEntity gridOptions.data[] array instance to make visible and set focus to
	         * @param {object} colDef to make visible and set focus to
	         * @returns {promise} a promise that is resolved after any scrolling is finished
	         */
	        scrollToFocus: function (grid, rowEntity, colDef) {
	          var gridRow = null, gridCol = null;

	          if (typeof(rowEntity) !== 'undefined' && rowEntity !== null) {
	            gridRow = grid.getRow(rowEntity);
	          }

	          if (typeof(colDef) !== 'undefined' && colDef !== null) {
	            gridCol = grid.getColumn(colDef.name ? colDef.name : colDef.field);
	          }
	          return grid.api.core.scrollToIfNecessary(gridRow, gridCol).then(function () {
	            var rowCol = { row: gridRow, col: gridCol };

	            // Broadcast the navigation
	            if (gridRow !== null && gridCol !== null) {
	              grid.cellNav.broadcastCellNav(rowCol);
	            }
	          });



	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
	         * @name getLeftWidth
	         * @description Get the current drawn width of the columns in the
	         * grid up to the numbered column, and add an apportionment for the
	         * column that we're on.  So if we are on column 0, we want to scroll
	         * 0% (i.e. exclude this column from calc).  If we're on the last column
	         * we want to scroll to 100% (i.e. include this column in the calc). So
	         * we include (thisColIndex / totalNumberCols) % of this column width
	         * @param {Grid} grid the grid you'd like to act upon, usually available
	         * from gridApi.grid
	         * @param {gridCol} upToCol the column to total up to and including
	         */
	        getLeftWidth: function (grid, upToCol) {
	          var width = 0;

	          if (!upToCol) {
	            return width;
	          }

	          var lastIndex = grid.renderContainers.body.visibleColumnCache.indexOf( upToCol );

	          // total column widths up-to but not including the passed in column
	          grid.renderContainers.body.visibleColumnCache.forEach( function( col, index ) {
	            if ( index < lastIndex ){
	              width += col.drawnWidth;
	            }
	          });

	          // pro-rata the final column based on % of total columns.
	          var percentage = lastIndex === 0 ? 0 : (lastIndex + 1) / grid.renderContainers.body.visibleColumnCache.length;
	          width += upToCol.drawnWidth * percentage;

	          return width;
	        }
	      };

	      return service;
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.cellNav.directive:uiCellNav
	   *  @element div
	   *  @restrict EA
	   *
	   *  @description Adds cell navigation features to the grid columns
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.cellNav']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name'},
	        {name: 'title'}
	      ];
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-cellnav></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridCellnav', ['gridUtil', 'uiGridCellNavService', 'uiGridCellNavConstants', 'uiGridConstants', 'GridRowColumn', '$timeout', '$compile',
	    function (gridUtil, uiGridCellNavService, uiGridCellNavConstants, uiGridConstants, GridRowColumn, $timeout, $compile) {
	      return {
	        replace: true,
	        priority: -150,
	        require: '^uiGrid',
	        scope: false,
	        controller: function () {},
	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	              var _scope = $scope;

	              var grid = uiGridCtrl.grid;
	              uiGridCellNavService.initializeGrid(grid);

	              uiGridCtrl.cellNav = {};

	              //Ensure that the object has all of the methods we expect it to
	              uiGridCtrl.cellNav.makeRowCol = function (obj) {
	                if (!(obj instanceof GridRowColumn)) {
	                  obj = new GridRowColumn(obj.row, obj.col);
	                }
	                return obj;
	              };

	              uiGridCtrl.cellNav.getActiveCell = function () {
	                var elms = $elm[0].getElementsByClassName('ui-grid-cell-focus');
	                if (elms.length > 0){
	                  return elms[0];
	                }

	                return undefined;
	              };

	              uiGridCtrl.cellNav.broadcastCellNav = grid.cellNav.broadcastCellNav = function (newRowCol, modifierDown, originEvt) {
	                modifierDown = !(modifierDown === undefined || !modifierDown);

	                newRowCol = uiGridCtrl.cellNav.makeRowCol(newRowCol);

	                uiGridCtrl.cellNav.broadcastFocus(newRowCol, modifierDown, originEvt);
	                _scope.$broadcast(uiGridCellNavConstants.CELL_NAV_EVENT, newRowCol, modifierDown, originEvt);
	              };

	              uiGridCtrl.cellNav.clearFocus = grid.cellNav.clearFocus = function () {
	                grid.cellNav.focusedCells = [];
	                _scope.$broadcast(uiGridCellNavConstants.CELL_NAV_EVENT);
	              };

	              uiGridCtrl.cellNav.broadcastFocus = function (rowCol, modifierDown, originEvt) {
	                modifierDown = !(modifierDown === undefined || !modifierDown);

	                rowCol = uiGridCtrl.cellNav.makeRowCol(rowCol);

	                var row = rowCol.row,
	                  col = rowCol.col;

	                var rowColSelectIndex = uiGridCtrl.grid.api.cellNav.rowColSelectIndex(rowCol);

	                if (grid.cellNav.lastRowCol === null || rowColSelectIndex === -1) {
	                  var newRowCol = new GridRowColumn(row, col);

	                  if (grid.cellNav.lastRowCol === null || grid.cellNav.lastRowCol.row !== newRowCol.row || grid.cellNav.lastRowCol.col !== newRowCol.col){
	                    grid.api.cellNav.raise.navigate(newRowCol, grid.cellNav.lastRowCol);
	                    grid.cellNav.lastRowCol = newRowCol;  
	                  }
	                  if (uiGridCtrl.grid.options.modifierKeysToMultiSelectCells && modifierDown) {
	                    grid.cellNav.focusedCells.push(rowCol);
	                  } else {
	                    grid.cellNav.focusedCells = [rowCol];
	                  }
	                } else if (grid.options.modifierKeysToMultiSelectCells && modifierDown &&
	                  rowColSelectIndex >= 0) {

	                  grid.cellNav.focusedCells.splice(rowColSelectIndex, 1);
	                }
	              };

	              uiGridCtrl.cellNav.handleKeyDown = function (evt) {
	                var direction = uiGridCellNavService.getDirection(evt);
	                if (direction === null) {
	                  return null;
	                }

	                var containerId = 'body';
	                if (evt.uiGridTargetRenderContainerId) {
	                  containerId = evt.uiGridTargetRenderContainerId;
	                }

	                // Get the last-focused row+col combo
	                var lastRowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
	                if (lastRowCol) {
	                  // Figure out which new row+combo we're navigating to
	                  var rowCol = uiGridCtrl.grid.renderContainers[containerId].cellNav.getNextRowCol(direction, lastRowCol.row, lastRowCol.col);
	                  var focusableCols = uiGridCtrl.grid.renderContainers[containerId].cellNav.getFocusableCols();
	                  var rowColSelectIndex = uiGridCtrl.grid.api.cellNav.rowColSelectIndex(rowCol);
	                  // Shift+tab on top-left cell should exit cellnav on render container
	                  if (
	                    // Navigating left
	                    direction === uiGridCellNavConstants.direction.LEFT &&
	                    // New col is last col (i.e. wrap around)
	                    rowCol.col === focusableCols[focusableCols.length - 1] &&
	                    // Staying on same row, which means we're at first row
	                    rowCol.row === lastRowCol.row &&
	                    evt.keyCode === uiGridConstants.keymap.TAB &&
	                    evt.shiftKey
	                  ) {
	                    grid.cellNav.focusedCells.splice(rowColSelectIndex, 1);
	                    uiGridCtrl.cellNav.clearFocus();
	                    return true;
	                  }
	                  // Tab on bottom-right cell should exit cellnav on render container
	                  else if (
	                    direction === uiGridCellNavConstants.direction.RIGHT &&
	                    // New col is first col (i.e. wrap around)
	                    rowCol.col === focusableCols[0] &&
	                    // Staying on same row, which means we're at first row
	                    rowCol.row === lastRowCol.row &&
	                    evt.keyCode === uiGridConstants.keymap.TAB &&
	                    !evt.shiftKey
	                  ) {
	                    grid.cellNav.focusedCells.splice(rowColSelectIndex, 1);
	                    uiGridCtrl.cellNav.clearFocus();
	                    return true;
	                  }

	                  // Scroll to the new cell, if it's not completely visible within the render container's viewport
	                  grid.scrollToIfNecessary(rowCol.row, rowCol.col).then(function () {
	                    uiGridCtrl.cellNav.broadcastCellNav(rowCol);
	                  });


	                  evt.stopPropagation();
	                  evt.preventDefault();

	                  return false;
	                }
	              };
	            },
	            post: function ($scope, $elm, $attrs, uiGridCtrl) {
	              var _scope = $scope;
	              var grid = uiGridCtrl.grid;

	              function addAriaLiveRegion(){
	                // Thanks to google docs for the inspiration behind how to do this
	                // XXX: Why is this entire mess nessasary?
	                // Because browsers take a lot of coercing to get them to read out live regions
	                //http://www.paciellogroup.com/blog/2012/06/html5-accessibility-chops-aria-rolealert-browser-support/
	                var ariaNotifierDomElt = '<div ' +
	                                           'id="' + grid.id +'-aria-speakable" ' +
	                                           'class="ui-grid-a11y-ariascreenreader-speakable ui-grid-offscreen" ' +
	                                           'aria-live="assertive" ' +
	                                           'role="region" ' +
	                                           'aria-atomic="true" ' +
	                                           'aria-hidden="false" ' +
	                                           'aria-relevant="additions" ' +
	                                           '>' +
	                                           '&nbsp;' +
	                                         '</div>';

	                var ariaNotifier = $compile(ariaNotifierDomElt)($scope);
	                $elm.prepend(ariaNotifier);
	                $scope.$on(uiGridCellNavConstants.CELL_NAV_EVENT, function (evt, rowCol, modifierDown, originEvt) {
	                  /*
	                   * If the cell nav event was because of a focus event then we don't want to
	                   * change the notifier text.
	                   * Reasoning: Voice Over fires a focus events when moving arround the grid.
	                   * If the screen reader is handing the grid nav properly then we don't need to
	                   * use the alert to notify the user of the movement.
	                   * In all other cases we do want a notification event.
	                   */
	                  if (originEvt && originEvt.type === 'focus'){return;}

	                  function setNotifyText(text){
	                    if (text === ariaNotifier.text()){return;}
	                    ariaNotifier[0].style.clip = 'rect(0px,0px,0px,0px)';
	                    /*
	                     * This is how google docs handles clearing the div. Seems to work better than setting the text of the div to ''
	                     */
	                    ariaNotifier[0].innerHTML = "";
	                    ariaNotifier[0].style.visibility = 'hidden';
	                    ariaNotifier[0].style.visibility = 'visible';
	                    if (text !== ''){
	                      ariaNotifier[0].style.clip = 'auto';
	                      /*
	                       * The space after the text is something that google docs does.
	                       */
	                      ariaNotifier[0].appendChild(document.createTextNode(text + " "));
	                      ariaNotifier[0].style.visibility = 'hidden';
	                      ariaNotifier[0].style.visibility = 'visible';
	                    }
	                  }

	                  var values = [];
	                  var currentSelection = grid.api.cellNav.getCurrentSelection();
	                  for (var i = 0; i < currentSelection.length; i++) {
	                    values.push(grid.getCellDisplayValue(currentSelection[i].row, currentSelection[i].col));
	                  }
	                  var cellText = values.toString();
	                  setNotifyText(cellText);

	                });
	              }
	              addAriaLiveRegion();
	            }
	          };
	        }
	      };
	    }]);

	  module.directive('uiGridRenderContainer', ['$timeout', '$document', 'gridUtil', 'uiGridConstants', 'uiGridCellNavService', '$compile','uiGridCellNavConstants',
	    function ($timeout, $document, gridUtil, uiGridConstants, uiGridCellNavService, $compile, uiGridCellNavConstants) {
	      return {
	        replace: true,
	        priority: -99999, //this needs to run very last
	        require: ['^uiGrid', 'uiGridRenderContainer', '?^uiGridCellnav'],
	        scope: false,
	        compile: function () {
	          return {
	            post: function ($scope, $elm, $attrs, controllers) {
	              var uiGridCtrl = controllers[0],
	                 renderContainerCtrl = controllers[1],
	                 uiGridCellnavCtrl = controllers[2];

	              // Skip attaching cell-nav specific logic if the directive is not attached above us
	              if (!uiGridCtrl.grid.api.cellNav) { return; }

	              var containerId = renderContainerCtrl.containerId;

	              var grid = uiGridCtrl.grid;

	              //run each time a render container is created
	              uiGridCellNavService.decorateRenderContainers(grid);

	              // focusser only created for body
	              if (containerId !== 'body') {
	                return;
	              }



	              if (uiGridCtrl.grid.options.modifierKeysToMultiSelectCells){
	                $elm.attr('aria-multiselectable', true);
	              } else {
	                $elm.attr('aria-multiselectable', false);
	              }

	              //add an element with no dimensions that can be used to set focus and capture keystrokes
	              var focuser = $compile('<div class="ui-grid-focuser" role="region" aria-live="assertive" aria-atomic="false" tabindex="0" aria-controls="' + grid.id +'-aria-speakable '+ grid.id + '-grid-container' +'" aria-owns="' + grid.id + '-grid-container' + '"></div>')($scope);
	              $elm.append(focuser);

	              focuser.on('focus', function (evt) {
	                evt.uiGridTargetRenderContainerId = containerId;
	                var rowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
	                if (rowCol === null) {
	                  rowCol = uiGridCtrl.grid.renderContainers[containerId].cellNav.getNextRowCol(uiGridCellNavConstants.direction.DOWN, null, null);
	                  if (rowCol.row && rowCol.col) {
	                    uiGridCtrl.cellNav.broadcastCellNav(rowCol);
	                  }
	                }
	              });

	              uiGridCellnavCtrl.setAriaActivedescendant = function(id){
	                $elm.attr('aria-activedescendant', id);
	              };

	              uiGridCellnavCtrl.removeAriaActivedescendant = function(id){
	                if ($elm.attr('aria-activedescendant') === id){
	                  $elm.attr('aria-activedescendant', '');
	                }
	              };


	              uiGridCtrl.focus = function () {
	                gridUtil.focus.byElement(focuser[0]);
	                //allow for first time grid focus
	              };

	              var viewPortKeyDownWasRaisedForRowCol = null;
	              // Bind to keydown events in the render container
	              focuser.on('keydown', function (evt) {
	                evt.uiGridTargetRenderContainerId = containerId;
	                var rowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
	                var result = uiGridCtrl.cellNav.handleKeyDown(evt);
	                if (result === null) {
	                  uiGridCtrl.grid.api.cellNav.raise.viewPortKeyDown(evt, rowCol);
	                  viewPortKeyDownWasRaisedForRowCol = rowCol;
	                }
	              });
	              //Bind to keypress events in the render container
	              //keypress events are needed by edit function so the key press
	              //that initiated an edit is not lost
	              //must fire the event in a timeout so the editor can
	              //initialize and subscribe to the event on another event loop
	              focuser.on('keypress', function (evt) {
	                if (viewPortKeyDownWasRaisedForRowCol) {
	                  $timeout(function () {
	                    uiGridCtrl.grid.api.cellNav.raise.viewPortKeyPress(evt, viewPortKeyDownWasRaisedForRowCol);
	                  },4);

	                  viewPortKeyDownWasRaisedForRowCol = null;
	                }
	              });

	              $scope.$on('$destroy', function(){
	                //Remove all event handlers associated with this focuser.
	                focuser.off();
	              });

	            }
	          };
	        }
	      };
	    }]);

	  module.directive('uiGridViewport', ['$timeout', '$document', 'gridUtil', 'uiGridConstants', 'uiGridCellNavService', 'uiGridCellNavConstants','$log','$compile',
	    function ($timeout, $document, gridUtil, uiGridConstants, uiGridCellNavService, uiGridCellNavConstants, $log, $compile) {
	      return {
	        replace: true,
	        priority: -99999, //this needs to run very last
	        require: ['^uiGrid', '^uiGridRenderContainer', '?^uiGridCellnav'],
	        scope: false,
	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            },
	            post: function ($scope, $elm, $attrs, controllers) {
	              var uiGridCtrl = controllers[0],
	                renderContainerCtrl = controllers[1];

	              // Skip attaching cell-nav specific logic if the directive is not attached above us
	              if (!uiGridCtrl.grid.api.cellNav) { return; }

	              var containerId = renderContainerCtrl.containerId;
	              //no need to process for other containers
	              if (containerId !== 'body') {
	                return;
	              }

	              var grid = uiGridCtrl.grid;

	              grid.api.core.on.scrollBegin($scope, function (args) {

	                // Skip if there's no currently-focused cell
	                var lastRowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
	                if (lastRowCol === null) {
	                  return;
	                }

	                //if not in my container, move on
	                //todo: worry about horiz scroll
	                if (!renderContainerCtrl.colContainer.containsColumn(lastRowCol.col)) {
	                  return;
	                }

	                uiGridCtrl.cellNav.clearFocus();

	              });

	              grid.api.core.on.scrollEnd($scope, function (args) {
	                // Skip if there's no currently-focused cell
	                var lastRowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
	                if (lastRowCol === null) {
	                  return;
	                }

	                //if not in my container, move on
	                //todo: worry about horiz scroll
	                if (!renderContainerCtrl.colContainer.containsColumn(lastRowCol.col)) {
	                  return;
	                }

	                uiGridCtrl.cellNav.broadcastCellNav(lastRowCol);

	              });

	              grid.api.cellNav.on.navigate($scope, function () {
	                //focus again because it can be lost
	                 uiGridCtrl.focus();
	              });

	            }
	          };
	        }
	      };
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.cellNav.directive:uiGridCell
	   *  @element div
	   *  @restrict A
	   *  @description Stacks on top of ui.grid.uiGridCell to provide cell navigation
	   */
	  module.directive('uiGridCell', ['$timeout', '$document', 'uiGridCellNavService', 'gridUtil', 'uiGridCellNavConstants', 'uiGridConstants', 'GridRowColumn',
	    function ($timeout, $document, uiGridCellNavService, gridUtil, uiGridCellNavConstants, uiGridConstants, GridRowColumn) {
	      return {
	        priority: -150, // run after default uiGridCell directive and ui.grid.edit uiGridCell
	        restrict: 'A',
	        require: ['^uiGrid', '?^uiGridCellnav'],
	        scope: false,
	        link: function ($scope, $elm, $attrs, controllers) {
	          var uiGridCtrl = controllers[0],
	              uiGridCellnavCtrl = controllers[1];
	          // Skip attaching cell-nav specific logic if the directive is not attached above us
	          if (!uiGridCtrl.grid.api.cellNav) { return; }

	          if (!$scope.col.colDef.allowCellFocus) {
	            return;
	          }

	          //Convinience local variables
	          var grid = uiGridCtrl.grid;
	          $scope.focused = false;

	          // Make this cell focusable but only with javascript/a mouse click
	          $elm.attr('tabindex', -1);

	          // When a cell is clicked, broadcast a cellNav event saying that this row+col combo is now focused
	          $elm.find('div').on('click', function (evt) {
	            uiGridCtrl.cellNav.broadcastCellNav(new GridRowColumn($scope.row, $scope.col), evt.ctrlKey || evt.metaKey, evt);

	            evt.stopPropagation();
	            $scope.$apply();
	          });


	          /*
	           * XXX Hack for screen readers.
	           * This allows the grid to focus using only the screen reader cursor.
	           * Since the focus event doesn't include key press information we can't use it
	           * as our primary source of the event.
	           */
	          $elm.on('mousedown', preventMouseDown);

	          //turn on and off for edit events
	          if (uiGridCtrl.grid.api.edit) {
	            uiGridCtrl.grid.api.edit.on.beginCellEdit($scope, function () {
	              $elm.off('mousedown', preventMouseDown);
	            });

	            uiGridCtrl.grid.api.edit.on.afterCellEdit($scope, function () {
	              $elm.on('mousedown', preventMouseDown);
	            });

	            uiGridCtrl.grid.api.edit.on.cancelCellEdit($scope, function () {
	              $elm.on('mousedown', preventMouseDown);
	            });
	          }

	          function preventMouseDown(evt) {
	            //Prevents the foucus event from firing if the click event is already going to fire.
	            //If both events fire it will cause bouncing behavior.
	            evt.preventDefault();
	          }

	          //You can only focus on elements with a tabindex value
	          $elm.on('focus', function (evt) {
	            uiGridCtrl.cellNav.broadcastCellNav(new GridRowColumn($scope.row, $scope.col), false, evt);
	            evt.stopPropagation();
	            $scope.$apply();
	          });

	          // This event is fired for all cells.  If the cell matches, then focus is set
	          $scope.$on(uiGridCellNavConstants.CELL_NAV_EVENT, function (evt, rowCol, modifierDown) {
	            var isFocused = grid.cellNav.focusedCells.some(function(focusedRowCol, index){
	              return (focusedRowCol.row === $scope.row && focusedRowCol.col === $scope.col);
	            });
	            if (isFocused){
	              setFocused();
	            } else {
	              clearFocus();
	            }
	          });

	          function setFocused() {
	            if (!$scope.focused){
	              var div = $elm.find('div');
	              div.addClass('ui-grid-cell-focus');
	              $elm.attr('aria-selected', true);
	              uiGridCellnavCtrl.setAriaActivedescendant($elm.attr('id'));
	              $scope.focused = true;
	            }
	          }

	          function clearFocus() {
	            if ($scope.focused){
	              var div = $elm.find('div');
	              div.removeClass('ui-grid-cell-focus');
	              $elm.attr('aria-selected', false);
	              uiGridCellnavCtrl.removeAriaActivedescendant($elm.attr('id'));
	              $scope.focused = false;
	            }
	          }

	          $scope.$on('$destroy', function () {
	            //.off withouth paramaters removes all handlers
	            $elm.find('div').off();
	            $elm.off();
	          });
	        }
	      };
	    }]);

	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.edit
	   * @description
	   *
	   * # ui.grid.edit
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module provides cell editing capability to ui.grid. The goal was to emulate keying data in a spreadsheet via
	   * a keyboard.
	   * <br/>
	   * <br/>
	   * To really get the full spreadsheet-like data entry, the ui.grid.cellNav module should be used. This will allow the
	   * user to key data and then tab, arrow, or enter to the cells beside or below.
	   *
	   * <div doc-module-components="ui.grid.edit"></div>
	   */

	  var module = angular.module('ui.grid.edit', ['ui.grid']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.edit.constant:uiGridEditConstants
	   *
	   *  @description constants available in edit module
	   */
	  module.constant('uiGridEditConstants', {
	    EDITABLE_CELL_TEMPLATE: /EDITABLE_CELL_TEMPLATE/g,
	    //must be lowercase because template bulder converts to lower
	    EDITABLE_CELL_DIRECTIVE: /editable_cell_directive/g,
	    events: {
	      BEGIN_CELL_EDIT: 'uiGridEventBeginCellEdit',
	      END_CELL_EDIT: 'uiGridEventEndCellEdit',
	      CANCEL_CELL_EDIT: 'uiGridEventCancelCellEdit'
	    }
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.edit.service:uiGridEditService
	   *
	   *  @description Services for editing features
	   */
	  module.service('uiGridEditService', ['$q', 'uiGridConstants', 'gridUtil',
	    function ($q, uiGridConstants, gridUtil) {

	      var service = {

	        initializeGrid: function (grid) {

	          service.defaultGridOptions(grid.options);

	          grid.registerColumnBuilder(service.editColumnBuilder);
	          grid.edit = {};

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.edit.api:PublicApi
	           *
	           *  @description Public Api for edit feature
	           */
	          var publicApi = {
	            events: {
	              edit: {
	                /**
	                 * @ngdoc event
	                 * @name afterCellEdit
	                 * @eventOf  ui.grid.edit.api:PublicApi
	                 * @description raised when cell editing is complete
	                 * <pre>
	                 *      gridApi.edit.on.afterCellEdit(scope,function(rowEntity, colDef){})
	                 * </pre>
	                 * @param {object} rowEntity the options.data element that was edited
	                 * @param {object} colDef the column that was edited
	                 * @param {object} newValue new value
	                 * @param {object} oldValue old value
	                 */
	                afterCellEdit: function (rowEntity, colDef, newValue, oldValue) {
	                },
	                /**
	                 * @ngdoc event
	                 * @name beginCellEdit
	                 * @eventOf  ui.grid.edit.api:PublicApi
	                 * @description raised when cell editing starts on a cell
	                 * <pre>
	                 *      gridApi.edit.on.beginCellEdit(scope,function(rowEntity, colDef){})
	                 * </pre>
	                 * @param {object} rowEntity the options.data element that was edited
	                 * @param {object} colDef the column that was edited
	                 * @param {object} triggerEvent the event that triggered the edit.  Useful to prevent losing keystrokes on some
	                 *                 complex editors
	                 */
	                beginCellEdit: function (rowEntity, colDef, triggerEvent) {
	                },
	                /**
	                 * @ngdoc event
	                 * @name cancelCellEdit
	                 * @eventOf  ui.grid.edit.api:PublicApi
	                 * @description raised when cell editing is cancelled on a cell
	                 * <pre>
	                 *      gridApi.edit.on.cancelCellEdit(scope,function(rowEntity, colDef){})
	                 * </pre>
	                 * @param {object} rowEntity the options.data element that was edited
	                 * @param {object} colDef the column that was edited
	                 */
	                cancelCellEdit: function (rowEntity, colDef) {
	                }
	              }
	            },
	            methods: {
	              edit: { }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);
	          //grid.api.registerMethodsFromObject(publicApi.methods);

	        },

	        defaultGridOptions: function (gridOptions) {

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.edit.api:GridOptions
	           *
	           *  @description Options for configuring the edit feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	          /**
	           *  @ngdoc object
	           *  @name enableCellEdit
	           *  @propertyOf  ui.grid.edit.api:GridOptions
	           *  @description If defined, sets the default value for the editable flag on each individual colDefs
	           *  if their individual enableCellEdit configuration is not defined. Defaults to undefined.
	           */

	          /**
	           *  @ngdoc object
	           *  @name cellEditableCondition
	           *  @propertyOf  ui.grid.edit.api:GridOptions
	           *  @description If specified, either a value or function to be used by all columns before editing.
	           *  If falsy, then editing of cell is not allowed.
	           *  @example
	           *  <pre>
	           *  function($scope){
	           *    //use $scope.row.entity and $scope.col.colDef to determine if editing is allowed
	           *    return true;
	           *  }
	           *  </pre>
	           */
	          gridOptions.cellEditableCondition = gridOptions.cellEditableCondition === undefined ? true : gridOptions.cellEditableCondition;

	          /**
	           *  @ngdoc object
	           *  @name editableCellTemplate
	           *  @propertyOf  ui.grid.edit.api:GridOptions
	           *  @description If specified, cellTemplate to use as the editor for all columns.
	           *  <br/> defaults to 'ui-grid/cellTextEditor'
	           */

	          /**
	           *  @ngdoc object
	           *  @name enableCellEditOnFocus
	           *  @propertyOf  ui.grid.edit.api:GridOptions
	           *  @description If true, then editor is invoked as soon as cell receives focus. Default false.
	           *  <br/>_requires cellNav feature and the edit feature to be enabled_
	           */
	            //enableCellEditOnFocus can only be used if cellnav module is used
	          gridOptions.enableCellEditOnFocus = gridOptions.enableCellEditOnFocus === undefined ? false : gridOptions.enableCellEditOnFocus;
	        },

	        /**
	         * @ngdoc service
	         * @name editColumnBuilder
	         * @methodOf ui.grid.edit.service:uiGridEditService
	         * @description columnBuilder function that adds edit properties to grid column
	         * @returns {promise} promise that will load any needed templates when resolved
	         */
	        editColumnBuilder: function (colDef, col, gridOptions) {

	          var promises = [];

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.edit.api:ColumnDef
	           *
	           *  @description Column Definition for edit feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	           */

	          /**
	           *  @ngdoc object
	           *  @name enableCellEdit
	           *  @propertyOf  ui.grid.edit.api:ColumnDef
	           *  @description enable editing on column
	           */
	          colDef.enableCellEdit = colDef.enableCellEdit === undefined ? (gridOptions.enableCellEdit === undefined ?
	            (colDef.type !== 'object') : gridOptions.enableCellEdit) : colDef.enableCellEdit;

	          /**
	           *  @ngdoc object
	           *  @name cellEditableCondition
	           *  @propertyOf  ui.grid.edit.api:ColumnDef
	           *  @description If specified, either a value or function evaluated before editing cell.  If falsy, then editing of cell is not allowed.
	           *  @example
	           *  <pre>
	           *  function($scope){
	           *    //use $scope.row.entity and $scope.col.colDef to determine if editing is allowed
	           *    return true;
	           *  }
	           *  </pre>
	           */
	          colDef.cellEditableCondition = colDef.cellEditableCondition === undefined ? gridOptions.cellEditableCondition :  colDef.cellEditableCondition;

	          /**
	           *  @ngdoc object
	           *  @name editableCellTemplate
	           *  @propertyOf  ui.grid.edit.api:ColumnDef
	           *  @description cell template to be used when editing this column. Can be Url or text template
	           *  <br/>Defaults to gridOptions.editableCellTemplate
	           */
	          if (colDef.enableCellEdit) {
	            colDef.editableCellTemplate = colDef.editableCellTemplate || gridOptions.editableCellTemplate || 'ui-grid/cellEditor';

	            promises.push(gridUtil.getTemplate(colDef.editableCellTemplate)
	              .then(
	              function (template) {
	                col.editableCellTemplate = template;
	              },
	              function (res) {
	                // Todo handle response error here?
	                throw new Error("Couldn't fetch/use colDef.editableCellTemplate '" + colDef.editableCellTemplate + "'");
	              }));
	          }

	          /**
	           *  @ngdoc object
	           *  @name enableCellEditOnFocus
	           *  @propertyOf  ui.grid.edit.api:ColumnDef
	           *  @requires ui.grid.cellNav
	           *  @description If true, then editor is invoked as soon as cell receives focus. Default false.
	           *  <br>_requires both the cellNav feature and the edit feature to be enabled_
	           */
	            //enableCellEditOnFocus can only be used if cellnav module is used
	          colDef.enableCellEditOnFocus = colDef.enableCellEditOnFocus === undefined ? gridOptions.enableCellEditOnFocus : colDef.enableCellEditOnFocus;


	          /**
	           *  @ngdoc string
	           *  @name editModelField
	           *  @propertyOf  ui.grid.edit.api:ColumnDef
	           *  @description a bindable string value that is used when binding to edit controls instead of colDef.field
	           *  <br/> example: You have a complex property on and object like state:{abbrev:'MS',name:'Mississippi'}.  The
	           *  grid should display state.name in the cell and sort/filter based on the state.name property but the editor
	           *  requires the full state object.
	           *  <br/>colDef.field = 'state.name'
	           *  <br/>colDef.editModelField = 'state'
	           */
	          //colDef.editModelField

	          return $q.all(promises);
	        },

	        /**
	         * @ngdoc service
	         * @name isStartEditKey
	         * @methodOf ui.grid.edit.service:uiGridEditService
	         * @description  Determines if a keypress should start editing.  Decorate this service to override with your
	         * own key events.  See service decorator in angular docs.
	         * @param {Event} evt keydown event
	         * @returns {boolean} true if an edit should start
	         */
	        isStartEditKey: function (evt) {
	          if (evt.metaKey ||
	              evt.keyCode === uiGridConstants.keymap.ESC ||
	              evt.keyCode === uiGridConstants.keymap.SHIFT ||
	              evt.keyCode === uiGridConstants.keymap.CTRL ||
	              evt.keyCode === uiGridConstants.keymap.ALT ||
	              evt.keyCode === uiGridConstants.keymap.WIN ||
	              evt.keyCode === uiGridConstants.keymap.CAPSLOCK ||

	             evt.keyCode === uiGridConstants.keymap.LEFT ||
	            (evt.keyCode === uiGridConstants.keymap.TAB && evt.shiftKey) ||

	            evt.keyCode === uiGridConstants.keymap.RIGHT ||
	            evt.keyCode === uiGridConstants.keymap.TAB ||

	            evt.keyCode === uiGridConstants.keymap.UP ||
	            (evt.keyCode === uiGridConstants.keymap.ENTER && evt.shiftKey) ||

	            evt.keyCode === uiGridConstants.keymap.DOWN ||
	            evt.keyCode === uiGridConstants.keymap.ENTER) {
	            return false;

	          }
	          return true;
	        }


	      };

	      return service;

	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:uiGridEdit
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds editing features to the ui-grid directive.
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.edit']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name', enableCellEdit: true},
	        {name: 'title', enableCellEdit: true}
	      ];
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-edit></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridEdit', ['gridUtil', 'uiGridEditService', function (gridUtil, uiGridEditService) {
	    return {
	      replace: true,
	      priority: 0,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            uiGridEditService.initializeGrid(uiGridCtrl.grid);
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          }
	        };
	      }
	    };
	  }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:uiGridRenderContainer
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds keydown listeners to renderContainer element so we can capture when to begin edits
	   *
	   */
	  module.directive('uiGridViewport', [ 'uiGridEditConstants',
	    function ( uiGridEditConstants) {
	      return {
	        replace: true,
	        priority: -99998, //run before cellNav
	        require: ['^uiGrid', '^uiGridRenderContainer'],
	        scope: false,
	        compile: function () {
	          return {
	            post: function ($scope, $elm, $attrs, controllers) {
	              var uiGridCtrl = controllers[0];

	              // Skip attaching if edit and cellNav is not enabled
	              if (!uiGridCtrl.grid.api.edit || !uiGridCtrl.grid.api.cellNav) { return; }

	              var containerId =  controllers[1].containerId;
	              //no need to process for other containers
	              if (containerId !== 'body') {
	                return;
	              }

	              //refocus on the grid
	              $scope.$on(uiGridEditConstants.events.CANCEL_CELL_EDIT, function () {
	                uiGridCtrl.focus();
	              });
	              $scope.$on(uiGridEditConstants.events.END_CELL_EDIT, function () {
	                uiGridCtrl.focus();
	              });

	            }
	          };
	        }
	      };
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:uiGridCell
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Stacks on top of ui.grid.uiGridCell to provide in-line editing capabilities to the cell
	   *  Editing Actions.
	   *
	   *  Binds edit start events to the uiGridCell element.  When the events fire, the gridCell element is appended
	   *  with the columnDef.editableCellTemplate element ('cellEditor.html' by default).
	   *
	   *  The editableCellTemplate should respond to uiGridEditConstants.events.BEGIN\_CELL\_EDIT angular event
	   *  and do the initial steps needed to edit the cell (setfocus on input element, etc).
	   *
	   *  When the editableCellTemplate recognizes that the editing is ended (blur event, Enter key, etc.)
	   *  it should emit the uiGridEditConstants.events.END\_CELL\_EDIT event.
	   *
	   *  If editableCellTemplate recognizes that the editing has been cancelled (esc key)
	   *  it should emit the uiGridEditConstants.events.CANCEL\_CELL\_EDIT event.  The original value
	   *  will be set back on the model by the uiGridCell directive.
	   *
	   *  Events that invoke editing:
	   *    - dblclick
	   *    - F2 keydown (when using cell selection)
	   *
	   *  Events that end editing:
	   *    - Dependent on the specific editableCellTemplate
	   *    - Standards should be blur and enter keydown
	   *
	   *  Events that cancel editing:
	   *    - Dependent on the specific editableCellTemplate
	   *    - Standards should be Esc keydown
	   *
	   *  Grid Events that end editing:
	   *    - uiGridConstants.events.GRID_SCROLL
	   *
	   */

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.edit.api:GridRow
	   *
	   *  @description GridRow options for edit feature, these are available to be
	   *  set internally only, by other features
	   */

	  /**
	   *  @ngdoc object
	   *  @name enableCellEdit
	   *  @propertyOf  ui.grid.edit.api:GridRow
	   *  @description enable editing on row, grouping for example might disable editing on group header rows
	   */

	  module.directive('uiGridCell',
	    ['$compile', '$injector', '$timeout', 'uiGridConstants', 'uiGridEditConstants', 'gridUtil', '$parse', 'uiGridEditService', '$rootScope', '$q',
	      function ($compile, $injector, $timeout, uiGridConstants, uiGridEditConstants, gridUtil, $parse, uiGridEditService, $rootScope, $q) {
	        var touchstartTimeout = 500;
	        if ($injector.has('uiGridCellNavService')) {
	          var uiGridCellNavService = $injector.get('uiGridCellNavService');
	        }

	        return {
	          priority: -100, // run after default uiGridCell directive
	          restrict: 'A',
	          scope: false,
	          require: '?^uiGrid',
	          link: function ($scope, $elm, $attrs, uiGridCtrl) {
	            var html;
	            var origCellValue;
	            var inEdit = false;
	            var cellModel;
	            var cancelTouchstartTimeout;

	            var editCellScope;

	            if (!$scope.col.colDef.enableCellEdit) {
	              return;
	            }

	            var cellNavNavigateDereg = function() {};
	            var viewPortKeyDownDereg = function() {};


	            var setEditable = function() {
	              if ($scope.col.colDef.enableCellEdit && $scope.row.enableCellEdit !== false) {
	                if (!$scope.beginEditEventsWired) { //prevent multiple attachments
	                  registerBeginEditEvents();
	                }
	              } else {
	                if ($scope.beginEditEventsWired) {
	                  cancelBeginEditEvents();
	                }
	              }
	            };

	            setEditable();

	            var rowWatchDereg = $scope.$watch('row', function (n, o) {
	              if (n !== o) {
	                setEditable();
	              }
	            });


	            $scope.$on( '$destroy', rowWatchDereg );

	            function registerBeginEditEvents() {
	              $elm.on('dblclick', beginEdit);

	              // Add touchstart handling. If the users starts a touch and it doesn't end after X milliseconds, then start the edit
	              $elm.on('touchstart', touchStart);

	              if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {

	                viewPortKeyDownDereg = uiGridCtrl.grid.api.cellNav.on.viewPortKeyDown($scope, function (evt, rowCol) {
	                  if (rowCol === null) {
	                    return;
	                  }

	                  if (rowCol.row === $scope.row && rowCol.col === $scope.col && !$scope.col.colDef.enableCellEditOnFocus) {
	                    //important to do this before scrollToIfNecessary
	                    beginEditKeyDown(evt);
	                  }
	                });

	                cellNavNavigateDereg = uiGridCtrl.grid.api.cellNav.on.navigate($scope, function (newRowCol, oldRowCol) {
	                  if ($scope.col.colDef.enableCellEditOnFocus) {
	                    // Don't begin edit if the cell hasn't changed
	                    if ((!oldRowCol || newRowCol.row !== oldRowCol.row || newRowCol.col !== oldRowCol.col) &&
	                      newRowCol.row === $scope.row && newRowCol.col === $scope.col) {
	                      $timeout(function () {
	                        beginEdit();
	                      });
	                    }
	                  }
	                });
	              }

	              $scope.beginEditEventsWired = true;

	            }

	            function touchStart(event) {
	              // jQuery masks events
	              if (typeof(event.originalEvent) !== 'undefined' && event.originalEvent !== undefined) {
	                event = event.originalEvent;
	              }

	              // Bind touchend handler
	              $elm.on('touchend', touchEnd);

	              // Start a timeout
	              cancelTouchstartTimeout = $timeout(function() { }, touchstartTimeout);

	              // Timeout's done! Start the edit
	              cancelTouchstartTimeout.then(function () {
	                // Use setTimeout to start the edit because beginEdit expects to be outside of $digest
	                setTimeout(beginEdit, 0);

	                // Undbind the touchend handler, we don't need it anymore
	                $elm.off('touchend', touchEnd);
	              });
	            }

	            // Cancel any touchstart timeout
	            function touchEnd(event) {
	              $timeout.cancel(cancelTouchstartTimeout);
	              $elm.off('touchend', touchEnd);
	            }

	            function cancelBeginEditEvents() {
	              $elm.off('dblclick', beginEdit);
	              $elm.off('keydown', beginEditKeyDown);
	              $elm.off('touchstart', touchStart);
	              cellNavNavigateDereg();
	              viewPortKeyDownDereg();
	              $scope.beginEditEventsWired = false;
	            }

	            function beginEditKeyDown(evt) {
	              if (uiGridEditService.isStartEditKey(evt)) {
	                beginEdit(evt);
	              }
	            }

	            function shouldEdit(col, row) {
	              return !row.isSaving &&
	                ( angular.isFunction(col.colDef.cellEditableCondition) ?
	                    col.colDef.cellEditableCondition($scope) :
	                    col.colDef.cellEditableCondition );
	            }


	            function beginEdit(triggerEvent) {
	              //we need to scroll the cell into focus before invoking the editor
	              $scope.grid.api.core.scrollToIfNecessary($scope.row, $scope.col)
	                .then(function () {
	                  beginEditAfterScroll(triggerEvent);
	                });
	            }

	            /**
	             *  @ngdoc property
	             *  @name editDropdownOptionsArray
	             *  @propertyOf ui.grid.edit.api:ColumnDef
	             *  @description an array of values in the format
	             *  [ {id: xxx, value: xxx} ], which is populated
	             *  into the edit dropdown
	             *
	             */
	            /**
	             *  @ngdoc property
	             *  @name editDropdownIdLabel
	             *  @propertyOf ui.grid.edit.api:ColumnDef
	             *  @description the label for the "id" field
	             *  in the editDropdownOptionsArray.  Defaults
	             *  to 'id'
	             *  @example
	             *  <pre>
	             *    $scope.gridOptions = {
	             *      columnDefs: [
	             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
	             *          editDropdownOptionsArray: [{code: 1, status: 'active'}, {code: 2, status: 'inactive'}],
	             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }
	             *      ],
	             *  </pre>
	             *
	             */
	            /**
	             *  @ngdoc property
	             *  @name editDropdownRowEntityOptionsArrayPath
	             *  @propertyOf ui.grid.edit.api:ColumnDef
	             *  @description a path to a property on row.entity containing an
	             *  array of values in the format
	             *  [ {id: xxx, value: xxx} ], which will be used to populate
	             *  the edit dropdown.  This can be used when the dropdown values are dependent on
	             *  the backing row entity.
	             *  If this property is set then editDropdownOptionsArray will be ignored.
	             *  @example
	             *  <pre>
	             *    $scope.gridOptions = {
	             *      columnDefs: [
	             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
	             *          editDropdownRowEntityOptionsArrayPath: 'foo.bars[0].baz',
	             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }
	             *      ],
	             *  </pre>
	             *
	             */
	            /**
	             *  @ngdoc service
	             *  @name editDropdownOptionsFunction
	             *  @methodOf ui.grid.edit.api:ColumnDef
	             *  @description a function returning an array of values in the format
	             *  [ {id: xxx, value: xxx} ], which will be used to populate
	             *  the edit dropdown.  This can be used when the dropdown values are dependent on
	             *  the backing row entity with some kind of algorithm.
	             *  If this property is set then both editDropdownOptionsArray and
	             *  editDropdownRowEntityOptionsArrayPath will be ignored.
	             *  @param {object} rowEntity the options.data element that the returned array refers to
	             *  @param {object} colDef the column that implements this dropdown
	             *  @returns {object} an array of values in the format
	             *  [ {id: xxx, value: xxx} ] used to populate the edit dropdown
	             *  @example
	             *  <pre>
	             *    $scope.gridOptions = {
	             *      columnDefs: [
	             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
	             *          editDropdownOptionsFunction: function(rowEntity, colDef) {
	             *            if (rowEntity.foo === 'bar') {
	             *              return [{id: 'bar1', value: 'BAR 1'},
	             *                      {id: 'bar2', value: 'BAR 2'},
	             *                      {id: 'bar3', value: 'BAR 3'}];
	             *            } else {
	             *              return [{id: 'foo1', value: 'FOO 1'},
	             *                      {id: 'foo2', value: 'FOO 2'}];
	             *            }
	             *          },
	             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }
	             *      ],
	             *  </pre>
	             *
	             */
	            /**
	             *  @ngdoc property
	             *  @name editDropdownValueLabel
	             *  @propertyOf ui.grid.edit.api:ColumnDef
	             *  @description the label for the "value" field
	             *  in the editDropdownOptionsArray.  Defaults
	             *  to 'value'
	             *  @example
	             *  <pre>
	             *    $scope.gridOptions = {
	             *      columnDefs: [
	             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
	             *          editDropdownOptionsArray: [{code: 1, status: 'active'}, {code: 2, status: 'inactive'}],
	             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }
	             *      ],
	             *  </pre>
	             *
	             */
	            /**
	             *  @ngdoc property
	             *  @name editDropdownFilter
	             *  @propertyOf ui.grid.edit.api:ColumnDef
	             *  @description A filter that you would like to apply to the values in the options list
	             *  of the dropdown.  For example if you were using angular-translate you might set this
	             *  to `'translate'`
	             *  @example
	             *  <pre>
	             *    $scope.gridOptions = {
	             *      columnDefs: [
	             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
	             *          editDropdownOptionsArray: [{code: 1, status: 'active'}, {code: 2, status: 'inactive'}],
	             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status', editDropdownFilter: 'translate' }
	             *      ],
	             *  </pre>
	             *
	             */
	            function beginEditAfterScroll(triggerEvent) {
	              // If we are already editing, then just skip this so we don't try editing twice...
	              if (inEdit) {
	                return;
	              }

	              if (!shouldEdit($scope.col, $scope.row)) {
	                return;
	              }

	              var modelField = $scope.row.getQualifiedColField($scope.col);
	              if ($scope.col.colDef.editModelField) {
	                modelField = gridUtil.preEval('row.entity.' + $scope.col.colDef.editModelField);
	              }

	              cellModel = $parse(modelField);

	              //get original value from the cell
	              origCellValue = cellModel($scope);

	              html = $scope.col.editableCellTemplate;
	              html = html.replace(uiGridConstants.MODEL_COL_FIELD, modelField);
	              html = html.replace(uiGridConstants.COL_FIELD, 'grid.getCellValue(row, col)');

	              var optionFilter = $scope.col.colDef.editDropdownFilter ? '|' + $scope.col.colDef.editDropdownFilter : '';
	              html = html.replace(uiGridConstants.CUSTOM_FILTERS, optionFilter);

	              var inputType = 'text';
	              switch ($scope.col.colDef.type){
	                case 'boolean':
	                  inputType = 'checkbox';
	                  break;
	                case 'number':
	                  inputType = 'number';
	                  break;
	                case 'date':
	                  inputType = 'date';
	                  break;
	              }
	              html = html.replace('INPUT_TYPE', inputType);

	              // In order to fill dropdown options we use:
	              // - A function/promise or
	              // - An array inside of row entity if no function exists or
	              // - A single array for the whole column if none of the previous exists.
	              var editDropdownOptionsFunction = $scope.col.colDef.editDropdownOptionsFunction;
	              if (editDropdownOptionsFunction) {
	                $q.when(editDropdownOptionsFunction($scope.row.entity, $scope.col.colDef))
	                        .then(function(result) {
	                  $scope.editDropdownOptionsArray = result;
	                });
	              } else {
	                var editDropdownRowEntityOptionsArrayPath = $scope.col.colDef.editDropdownRowEntityOptionsArrayPath;
	                if (editDropdownRowEntityOptionsArrayPath) {
	                  $scope.editDropdownOptionsArray =  resolveObjectFromPath($scope.row.entity, editDropdownRowEntityOptionsArrayPath);
	                }
	                else {
	                  $scope.editDropdownOptionsArray = $scope.col.colDef.editDropdownOptionsArray;
	                }
	              }
	              $scope.editDropdownIdLabel = $scope.col.colDef.editDropdownIdLabel ? $scope.col.colDef.editDropdownIdLabel : 'id';
	              $scope.editDropdownValueLabel = $scope.col.colDef.editDropdownValueLabel ? $scope.col.colDef.editDropdownValueLabel : 'value';

	              var cellElement;
	              var createEditor = function(){
	                inEdit = true;
	                cancelBeginEditEvents();
	                var cellElement = angular.element(html);
	                $elm.append(cellElement);
	                editCellScope = $scope.$new();
	                $compile(cellElement)(editCellScope);
	                var gridCellContentsEl = angular.element($elm.children()[0]);
	                gridCellContentsEl.addClass('ui-grid-cell-contents-hidden');
	              };
	              if (!$rootScope.$$phase) {
	                $scope.$apply(createEditor);
	              } else {
	                createEditor();
	              }

	              //stop editing when grid is scrolled
	              var deregOnGridScroll = $scope.col.grid.api.core.on.scrollBegin($scope, function () {
	                if ($scope.grid.disableScrolling) {
	                  return;
	                }
	                endEdit();
	                $scope.grid.api.edit.raise.afterCellEdit($scope.row.entity, $scope.col.colDef, cellModel($scope), origCellValue);
	                deregOnGridScroll();
	                deregOnEndCellEdit();
	                deregOnCancelCellEdit();
	              });

	              //end editing
	              var deregOnEndCellEdit = $scope.$on(uiGridEditConstants.events.END_CELL_EDIT, function () {
	                endEdit();
	                $scope.grid.api.edit.raise.afterCellEdit($scope.row.entity, $scope.col.colDef, cellModel($scope), origCellValue);
	                deregOnEndCellEdit();
	                deregOnGridScroll();
	                deregOnCancelCellEdit();
	              });

	              //cancel editing
	              var deregOnCancelCellEdit = $scope.$on(uiGridEditConstants.events.CANCEL_CELL_EDIT, function () {
	                cancelEdit();
	                deregOnCancelCellEdit();
	                deregOnGridScroll();
	                deregOnEndCellEdit();
	              });

	              $scope.$broadcast(uiGridEditConstants.events.BEGIN_CELL_EDIT, triggerEvent);
	              $timeout(function () {
	                //execute in a timeout to give any complex editor templates a cycle to completely render
	                $scope.grid.api.edit.raise.beginCellEdit($scope.row.entity, $scope.col.colDef, triggerEvent);
	              });
	            }

	            function endEdit() {
	              $scope.grid.disableScrolling = false;
	              if (!inEdit) {
	                return;
	              }

	              //sometimes the events can't keep up with the keyboard and grid focus is lost, so always focus
	              //back to grid here. The focus call needs to be before the $destroy and removal of the control,
	              //otherwise ng-model-options of UpdateOn: 'blur' will not work.
	              if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {
	                uiGridCtrl.focus();
	              }

	              var gridCellContentsEl = angular.element($elm.children()[0]);
	              //remove edit element
	              editCellScope.$destroy();
	              var children = $elm.children();
	              for (var i = 1; i < children.length; i++) {
	                angular.element(children[i]).remove();
	              }
	              gridCellContentsEl.removeClass('ui-grid-cell-contents-hidden');
	              inEdit = false;
	              registerBeginEditEvents();
	              $scope.grid.api.core.notifyDataChange( uiGridConstants.dataChange.EDIT );
	            }

	            function cancelEdit() {
	              $scope.grid.disableScrolling = false;
	              if (!inEdit) {
	                return;
	              }
	              cellModel.assign($scope, origCellValue);
	              $scope.$apply();

	              $scope.grid.api.edit.raise.cancelCellEdit($scope.row.entity, $scope.col.colDef);
	              endEdit();
	            }

	            // resolves a string path against the given object
	            // shamelessly borrowed from
	            // http://stackoverflow.com/questions/6491463/accessing-nested-javascript-objects-with-string-key
	            function resolveObjectFromPath(object, path) {
	              path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
	              path = path.replace(/^\./, '');           // strip a leading dot
	              var a = path.split('.');
	              while (a.length) {
	                  var n = a.shift();
	                  if (n in object) {
	                      object = object[n];
	                  } else {
	                      return;
	                  }
	              }
	              return object;
	            }

	          }
	        };
	      }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:uiGridEditor
	   *  @element div
	   *  @restrict A
	   *
	   *  @description input editor directive for editable fields.
	   *  Provides EndEdit and CancelEdit events
	   *
	   *  Events that end editing:
	   *     blur and enter keydown
	   *
	   *  Events that cancel editing:
	   *    - Esc keydown
	   *
	   */
	  module.directive('uiGridEditor',
	    ['gridUtil', 'uiGridConstants', 'uiGridEditConstants','$timeout', 'uiGridEditService',
	      function (gridUtil, uiGridConstants, uiGridEditConstants, $timeout, uiGridEditService) {
	        return {
	          scope: true,
	          require: ['?^uiGrid', '?^uiGridRenderContainer', 'ngModel'],
	          compile: function () {
	            return {
	              pre: function ($scope, $elm, $attrs) {

	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	                var uiGridCtrl, renderContainerCtrl, ngModel;
	                if (controllers[0]) { uiGridCtrl = controllers[0]; }
	                if (controllers[1]) { renderContainerCtrl = controllers[1]; }
	                if (controllers[2]) { ngModel = controllers[2]; }

	                //set focus at start of edit
	                $scope.$on(uiGridEditConstants.events.BEGIN_CELL_EDIT, function (evt,triggerEvent) {
	                  $timeout(function () {
	                    $elm[0].focus();
	                    //only select text if it is not being replaced below in the cellNav viewPortKeyPress
	                    if ($elm[0].select && ($scope.col.colDef.enableCellEditOnFocus || !(uiGridCtrl && uiGridCtrl.grid.api.cellNav))) {
	                      $elm[0].select();
	                    }
	                    else {
	                      //some browsers (Chrome) stupidly, imo, support the w3 standard that number, email, ...
	                      //fields should not allow setSelectionRange.  We ignore the error for those browsers
	                      //https://www.w3.org/Bugs/Public/show_bug.cgi?id=24796
	                      try {
	                        $elm[0].setSelectionRange($elm[0].value.length, $elm[0].value.length);
	                      }
	                      catch (ex) {
	                        //ignore
	                      }
	                    }
	                  });

	                  //set the keystroke that started the edit event
	                  //we must do this because the BeginEdit is done in a different event loop than the intitial
	                  //keydown event
	                  //fire this event for the keypress that is received
	                  if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {
	                    var viewPortKeyDownUnregister = uiGridCtrl.grid.api.cellNav.on.viewPortKeyPress($scope, function (evt, rowCol) {
	                      if (uiGridEditService.isStartEditKey(evt)) {
	                        ngModel.$setViewValue(String.fromCharCode( typeof evt.which === 'number' ? evt.which : evt.keyCode), evt);
	                        ngModel.$render();
	                      }
	                      viewPortKeyDownUnregister();
	                    });
	                  }

	                  $elm.on('blur', function (evt) {
	                    $scope.stopEdit(evt);
	                  });
	                });


	                $scope.deepEdit = false;

	                $scope.stopEdit = function (evt) {
	                  if ($scope.inputForm && !$scope.inputForm.$valid) {
	                    evt.stopPropagation();
	                    $scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);
	                  }
	                  else {
	                    $scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
	                  }
	                  $scope.deepEdit = false;
	                };


	                $elm.on('click', function (evt) {
	                  if ($elm[0].type !== 'checkbox') {
	                    $scope.deepEdit = true;
	                    $timeout(function () {
	                      $scope.grid.disableScrolling = true;
	                    });
	                  }
	                });

	                $elm.on('keydown', function (evt) {
	                  switch (evt.keyCode) {
	                    case uiGridConstants.keymap.ESC:
	                      evt.stopPropagation();
	                      $scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);
	                      break;
	                  }

	                  if ($scope.deepEdit &&
	                    (evt.keyCode === uiGridConstants.keymap.LEFT ||
	                     evt.keyCode === uiGridConstants.keymap.RIGHT ||
	                     evt.keyCode === uiGridConstants.keymap.UP ||
	                     evt.keyCode === uiGridConstants.keymap.DOWN)) {
	                    evt.stopPropagation();
	                  }
	                  // Pass the keydown event off to the cellNav service, if it exists
	                  else if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {
	                    evt.uiGridTargetRenderContainerId = renderContainerCtrl.containerId;
	                    if (uiGridCtrl.cellNav.handleKeyDown(evt) !== null) {
	                      $scope.stopEdit(evt);
	                    }
	                  }
	                  else {
	                    //handle enter and tab for editing not using cellNav
	                    switch (evt.keyCode) {
	                      case uiGridConstants.keymap.ENTER: // Enter (Leave Field)
	                      case uiGridConstants.keymap.TAB:
	                        evt.stopPropagation();
	                        evt.preventDefault();
	                        $scope.stopEdit(evt);
	                        break;
	                    }
	                  }

	                  return true;
	                });
	              }
	            };
	          }
	        };
	      }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:input
	   *  @element input
	   *  @restrict E
	   *
	   *  @description directive to provide binding between input[date] value and ng-model for angular 1.2
	   *  It is similar to input[date] directive of angular 1.3
	   *
	   *  Supported date format for input is 'yyyy-MM-dd'
	   *  The directive will set the $valid property of input element and the enclosing form to false if
	   *  model is invalid date or value of input is entered wrong.
	   *
	   */
	    module.directive('uiGridEditor', ['$filter', function ($filter) {
	      function parseDateString(dateString) {
	        if (typeof(dateString) === 'undefined' || dateString === '') {
	          return null;
	        }
	        var parts = dateString.split('-');
	        if (parts.length !== 3) {
	          return null;
	        }
	        var year = parseInt(parts[0], 10);
	        var month = parseInt(parts[1], 10);
	        var day = parseInt(parts[2], 10);

	        if (month < 1 || year < 1 || day < 1) {
	          return null;
	        }
	        return new Date(year, (month - 1), day);
	      }
	      return {
	        priority: -100, // run after default uiGridEditor directive
	        require: '?ngModel',
	        link: function (scope, element, attrs, ngModel) {

	          if (angular.version.minor === 2 && attrs.type && attrs.type === 'date' && ngModel) {

	            ngModel.$formatters.push(function (modelValue) {
	              ngModel.$setValidity(null,(!modelValue || !isNaN(modelValue.getTime())));
	              return $filter('date')(modelValue, 'yyyy-MM-dd');
	            });

	            ngModel.$parsers.push(function (viewValue) {
	              if (viewValue && viewValue.length > 0) {
	                var dateValue = parseDateString(viewValue);
	                ngModel.$setValidity(null, (dateValue && !isNaN(dateValue.getTime())));
	                return dateValue;
	              }
	              else {
	                ngModel.$setValidity(null, true);
	                return null;
	              }
	            });
	          }
	        }
	      };
	    }]);


	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:uiGridEditDropdown
	   *  @element div
	   *  @restrict A
	   *
	   *  @description dropdown editor for editable fields.
	   *  Provides EndEdit and CancelEdit events
	   *
	   *  Events that end editing:
	   *     blur and enter keydown, and any left/right nav
	   *
	   *  Events that cancel editing:
	   *    - Esc keydown
	   *
	   */
	  module.directive('uiGridEditDropdown',
	    ['uiGridConstants', 'uiGridEditConstants',
	      function (uiGridConstants, uiGridEditConstants) {
	        return {
	          require: ['?^uiGrid', '?^uiGridRenderContainer'],
	          scope: true,
	          compile: function () {
	            return {
	              pre: function ($scope, $elm, $attrs) {

	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	                var uiGridCtrl = controllers[0];
	                var renderContainerCtrl = controllers[1];

	                //set focus at start of edit
	                $scope.$on(uiGridEditConstants.events.BEGIN_CELL_EDIT, function () {
	                  $elm[0].focus();
	                  $elm[0].style.width = ($elm[0].parentElement.offsetWidth - 1) + 'px';
	                  $elm.on('blur', function (evt) {
	                    $scope.stopEdit(evt);
	                  });
	                });


	                $scope.stopEdit = function (evt) {
	                  // no need to validate a dropdown - invalid values shouldn't be
	                  // available in the list
	                  $scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
	                };

	                $elm.on('keydown', function (evt) {
	                  switch (evt.keyCode) {
	                    case uiGridConstants.keymap.ESC:
	                      evt.stopPropagation();
	                      $scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);
	                      break;
	                  }
	                  if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {
	                    evt.uiGridTargetRenderContainerId = renderContainerCtrl.containerId;
	                    if (uiGridCtrl.cellNav.handleKeyDown(evt) !== null) {
	                      $scope.stopEdit(evt);
	                    }
	                  }
	                  else {
	                    //handle enter and tab for editing not using cellNav
	                    switch (evt.keyCode) {
	                      case uiGridConstants.keymap.ENTER: // Enter (Leave Field)
	                      case uiGridConstants.keymap.TAB:
	                        evt.stopPropagation();
	                        evt.preventDefault();
	                        $scope.stopEdit(evt);
	                        break;
	                    }
	                  }
	                  return true;
	                });
	              }
	            };
	          }
	        };
	      }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:uiGridEditFileChooser
	   *  @element div
	   *  @restrict A
	   *
	   *  @description input editor directive for editable fields.
	   *  Provides EndEdit and CancelEdit events
	   *
	   *  Events that end editing:
	   *     blur and enter keydown
	   *
	   *  Events that cancel editing:
	   *    - Esc keydown
	   *
	   */
	  module.directive('uiGridEditFileChooser',
	    ['gridUtil', 'uiGridConstants', 'uiGridEditConstants','$timeout',
	      function (gridUtil, uiGridConstants, uiGridEditConstants, $timeout) {
	        return {
	          scope: true,
	          require: ['?^uiGrid', '?^uiGridRenderContainer'],
	          compile: function () {
	            return {
	              pre: function ($scope, $elm, $attrs) {

	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	                var uiGridCtrl, renderContainerCtrl;
	                if (controllers[0]) { uiGridCtrl = controllers[0]; }
	                if (controllers[1]) { renderContainerCtrl = controllers[1]; }
	                var grid = uiGridCtrl.grid;

	                var handleFileSelect = function( event ){
	                  var target = event.srcElement || event.target;

	                  if (target && target.files && target.files.length > 0) {
	                    /**
	                     *  @ngdoc property
	                     *  @name editFileChooserCallback
	                     *  @propertyOf  ui.grid.edit.api:ColumnDef
	                     *  @description A function that should be called when any files have been chosen
	                     *  by the user.  You should use this to process the files appropriately for your
	                     *  application.
	                     *
	                     *  It passes the gridCol, the gridRow (from which you can get gridRow.entity),
	                     *  and the files.  The files are in the format as returned from the file chooser,
	                     *  an array of files, with each having useful information such as:
	                     *  - `files[0].lastModifiedDate`
	                     *  - `files[0].name`
	                     *  - `files[0].size`  (appears to be in bytes)
	                     *  - `files[0].type`  (MIME type by the looks)
	                     *
	                     *  Typically you would do something with these files - most commonly you would
	                     *  use the filename or read the file itself in.  The example function does both.
	                     *
	                     *  @example
	                     *  <pre>
	                     *  editFileChooserCallBack: function(gridRow, gridCol, files ){
	                     *    // ignore all but the first file, it can only choose one anyway
	                     *    // set the filename into this column
	                     *    gridRow.entity.filename = file[0].name;
	                     *
	                     *    // read the file and set it into a hidden column, which we may do stuff with later
	                     *    var setFile = function(fileContent){
	                     *      gridRow.entity.file = fileContent.currentTarget.result;
	                     *    };
	                     *    var reader = new FileReader();
	                     *    reader.onload = setFile;
	                     *    reader.readAsText( files[0] );
	                     *  }
	                     *  </pre>
	                     */
	                    if ( typeof($scope.col.colDef.editFileChooserCallback) === 'function' ) {
	                      $scope.col.colDef.editFileChooserCallback($scope.row, $scope.col, target.files);
	                    } else {
	                      gridUtil.logError('You need to set colDef.editFileChooserCallback to use the file chooser');
	                    }

	                    target.form.reset();
	                    $scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
	                  } else {
	                    $scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);
	                  }
	                };

	                $elm[0].addEventListener('change', handleFileSelect, false);  // TODO: why the false on the end?  Google

	                $scope.$on(uiGridEditConstants.events.BEGIN_CELL_EDIT, function () {
	                  $elm[0].focus();
	                  $elm[0].select();

	                  $elm.on('blur', function (evt) {
	                    $scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
	                  });
	                });
	              }
	            };
	          }
	        };
	      }]);


	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.expandable
	   * @description
	   *
	   * # ui.grid.expandable
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
	   *
	   * This module provides the ability to create subgrids with the ability to expand a row
	   * to show the subgrid.
	   *
	   * <div doc-module-components="ui.grid.expandable"></div>
	   */
	  var module = angular.module('ui.grid.expandable', ['ui.grid']);

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.expandable.service:uiGridExpandableService
	   *
	   *  @description Services for the expandable grid
	   */
	  module.service('uiGridExpandableService', ['gridUtil', '$compile', function (gridUtil, $compile) {
	    var service = {
	      initializeGrid: function (grid) {

	        grid.expandable = {};
	        grid.expandable.expandedAll = false;

	        /**
	         *  @ngdoc object
	         *  @name enableExpandable
	         *  @propertyOf  ui.grid.expandable.api:GridOptions
	         *  @description Whether or not to use expandable feature, allows you to turn off expandable on specific grids
	         *  within your application, or in specific modes on _this_ grid. Defaults to true.
	         *  @example
	         *  <pre>
	         *    $scope.gridOptions = {
	         *      enableExpandable: false
	         *    }
	         *  </pre>
	         */
	        grid.options.enableExpandable = grid.options.enableExpandable !== false;

	        /**
	         *  @ngdoc object
	         *  @name expandableRowHeight
	         *  @propertyOf  ui.grid.expandable.api:GridOptions
	         *  @description Height in pixels of the expanded subgrid.  Defaults to
	         *  150
	         *  @example
	         *  <pre>
	         *    $scope.gridOptions = {
	         *      expandableRowHeight: 150
	         *    }
	         *  </pre>
	         */
	        grid.options.expandableRowHeight = grid.options.expandableRowHeight || 150;

	        /**
	         *  @ngdoc object
	         *  @name
	         *  @propertyOf  ui.grid.expandable.api:GridOptions
	         *  @description Width in pixels of the expandable column. Defaults to 40
	         *  @example
	         *  <pre>
	         *    $scope.gridOptions = {
	         *      expandableRowHeaderWidth: 40
	         *    }
	         *  </pre>
	         */
	        grid.options.expandableRowHeaderWidth = grid.options.expandableRowHeaderWidth || 40;

	        /**
	         *  @ngdoc object
	         *  @name expandableRowTemplate
	         *  @propertyOf  ui.grid.expandable.api:GridOptions
	         *  @description Mandatory. The template for your expanded row
	         *  @example
	         *  <pre>
	         *    $scope.gridOptions = {
	         *      expandableRowTemplate: 'expandableRowTemplate.html'
	         *    }
	         *  </pre>
	         */
	        if ( grid.options.enableExpandable && !grid.options.expandableRowTemplate ){
	          gridUtil.logError( 'You have not set the expandableRowTemplate, disabling expandable module' );
	          grid.options.enableExpandable = false;
	        }

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.expandable.api:PublicApi
	         *
	         *  @description Public Api for expandable feature
	         */
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.expandable.api:GridRow
	         *
	         *  @description Additional properties added to GridRow when using the expandable module
	         */
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.expandable.api:GridOptions
	         *
	         *  @description Options for configuring the expandable feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         */
	        var publicApi = {
	          events: {
	            expandable: {
	              /**
	               * @ngdoc event
	               * @name rowExpandedStateChanged
	               * @eventOf  ui.grid.expandable.api:PublicApi
	               * @description raised when cell editing is complete
	               * <pre>
	               *      gridApi.expandable.on.rowExpandedStateChanged(scope,function(row){})
	               * </pre>
	               * @param {GridRow} row the row that was expanded
	               */
	              rowExpandedBeforeStateChanged: function(scope,row){
	              },
	              rowExpandedStateChanged: function (scope, row) {
	              }
	            }
	          },

	          methods: {
	            expandable: {
	              /**
	               * @ngdoc method
	               * @name toggleRowExpansion
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description Toggle a specific row
	               * <pre>
	               *      gridApi.expandable.toggleRowExpansion(rowEntity);
	               * </pre>
	               * @param {object} rowEntity the data entity for the row you want to expand
	               */
	              toggleRowExpansion: function (rowEntity) {
	                var row = grid.getRow(rowEntity);
	                if (row !== null) {
	                  service.toggleRowExpansion(grid, row);
	                }
	              },

	              /**
	               * @ngdoc method
	               * @name expandAllRows
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description Expand all subgrids.
	               * <pre>
	               *      gridApi.expandable.expandAllRows();
	               * </pre>
	               */
	              expandAllRows: function() {
	                service.expandAllRows(grid);
	              },

	              /**
	               * @ngdoc method
	               * @name collapseAllRows
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description Collapse all subgrids.
	               * <pre>
	               *      gridApi.expandable.collapseAllRows();
	               * </pre>
	               */
	              collapseAllRows: function() {
	                service.collapseAllRows(grid);
	              },

	              /**
	               * @ngdoc method
	               * @name toggleAllRows
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description Toggle all subgrids.
	               * <pre>
	               *      gridApi.expandable.toggleAllRows();
	               * </pre>
	               */
	              toggleAllRows: function() {
	                service.toggleAllRows(grid);
	              },
	              /**
	               * @ngdoc function
	               * @name expandRow
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description Expand the data row
	               * @param {object} rowEntity gridOptions.data[] array instance
	               */
	              expandRow: function (rowEntity) {
	                var row = grid.getRow(rowEntity);
	                if (row !== null && !row.isExpanded) {
	                  service.toggleRowExpansion(grid, row);
	                }
	              },
	              /**
	               * @ngdoc function
	               * @name collapseRow
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description Collapse the data row
	               * @param {object} rowEntity gridOptions.data[] array instance
	               */
	              collapseRow: function (rowEntity) {
	                var row = grid.getRow(rowEntity);
	                if (row !== null && row.isExpanded) {
	                  service.toggleRowExpansion(grid, row);
	                }
	              },
	              /**
	               * @ngdoc function
	               * @name getExpandedRows
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description returns all expandedRow's entity references
	               */
	              getExpandedRows: function () {
	                return service.getExpandedRows(grid).map(function (gridRow) {
	                  return gridRow.entity;
	                });
	              }
	            }
	          }
	        };
	        grid.api.registerEventsFromObject(publicApi.events);
	        grid.api.registerMethodsFromObject(publicApi.methods);
	      },

	      toggleRowExpansion: function (grid, row) {
	        // trigger the "before change" event. Can change row height dynamically this way.
	        grid.api.expandable.raise.rowExpandedBeforeStateChanged(row);
	        /**
	         *  @ngdoc object
	         *  @name isExpanded
	         *  @propertyOf  ui.grid.expandable.api:GridRow
	         *  @description Whether or not the row is currently expanded.
	         *  @example
	         *  <pre>
	         *    $scope.api.expandable.on.rowExpandedStateChanged($scope, function (row) {
	         *      if (row.isExpanded) {
	         *        //...
	         *      }
	         *    });
	         *  </pre>
	         */
	        row.isExpanded = !row.isExpanded;
	        if (angular.isUndefined(row.expandedRowHeight)){
	          row.expandedRowHeight = grid.options.expandableRowHeight;
	        }

	        if (row.isExpanded) {
	          row.height = row.grid.options.rowHeight + row.expandedRowHeight;
	        }
	        else {
	          row.height = row.grid.options.rowHeight;
	          grid.expandable.expandedAll = false;
	        }
	        grid.api.expandable.raise.rowExpandedStateChanged(row);
	      },

	      expandAllRows: function(grid, $scope) {
	        grid.renderContainers.body.visibleRowCache.forEach( function(row) {
	          if (!row.isExpanded) {
	            service.toggleRowExpansion(grid, row);
	          }
	        });
	        grid.expandable.expandedAll = true;
	        grid.queueGridRefresh();
	      },

	      collapseAllRows: function(grid) {
	        grid.renderContainers.body.visibleRowCache.forEach( function(row) {
	          if (row.isExpanded) {
	            service.toggleRowExpansion(grid, row);
	          }
	        });
	        grid.expandable.expandedAll = false;
	        grid.queueGridRefresh();
	      },

	      toggleAllRows: function(grid) {
	        if (grid.expandable.expandedAll) {
	          service.collapseAllRows(grid);
	        }
	        else {
	          service.expandAllRows(grid);
	        }
	      },

	      getExpandedRows: function (grid) {
	        return grid.rows.filter(function (row) {
	          return row.isExpanded;
	        });
	      }
	    };
	    return service;
	  }]);

	  /**
	   *  @ngdoc object
	   *  @name enableExpandableRowHeader
	   *  @propertyOf  ui.grid.expandable.api:GridOptions
	   *  @description Show a rowHeader to provide the expandable buttons.  If set to false then implies
	   *  you're going to use a custom method for expanding and collapsing the subgrids. Defaults to true.
	   *  @example
	   *  <pre>
	   *    $scope.gridOptions = {
	   *      enableExpandableRowHeader: false
	   *    }
	   *  </pre>
	   */
	  module.directive('uiGridExpandable', ['uiGridExpandableService', '$templateCache',
	    function (uiGridExpandableService, $templateCache) {
	      return {
	        replace: true,
	        priority: 0,
	        require: '^uiGrid',
	        scope: false,
	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	              uiGridExpandableService.initializeGrid(uiGridCtrl.grid);

	              if (!uiGridCtrl.grid.options.enableExpandable) {
	                return;
	              }

	              if (uiGridCtrl.grid.options.enableExpandableRowHeader !== false ) {
	                var expandableRowHeaderColDef = {
	                  name: 'expandableButtons',
	                  displayName: '',
	                  exporterSuppressExport: true,
	                  enableColumnResizing: false,
	                  enableColumnMenu: false,
	                  width: uiGridCtrl.grid.options.expandableRowHeaderWidth || 40
	                };
	                expandableRowHeaderColDef.cellTemplate = $templateCache.get('ui-grid/expandableRowHeader');
	                expandableRowHeaderColDef.headerCellTemplate = $templateCache.get('ui-grid/expandableTopRowHeader');
	                uiGridCtrl.grid.addRowHeaderColumn(expandableRowHeaderColDef, -90);
	              }

	            },
	            post: function ($scope, $elm, $attrs, uiGridCtrl) {
	            }
	          };
	        }
	      };
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.expandable.directive:uiGrid
	   *  @description stacks on the uiGrid directive to register child grid with parent row when child is created
	   */
	  module.directive('uiGrid', ['uiGridExpandableService', '$templateCache',
	    function (uiGridExpandableService, $templateCache) {
	      return {
	        replace: true,
	        priority: 599,
	        require: '^uiGrid',
	        scope: false,
	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {

	              uiGridCtrl.grid.api.core.on.renderingComplete($scope, function() {
	                //if a parent grid row is on the scope, then add the parentRow property to this childGrid
	                if ($scope.row && $scope.row.grid && $scope.row.grid.options && $scope.row.grid.options.enableExpandable) {

	                  /**
	                   *  @ngdoc directive
	                   *  @name ui.grid.expandable.class:Grid
	                   *  @description Additional Grid properties added by expandable module
	                   */

	                  /**
	                   *  @ngdoc object
	                   *  @name parentRow
	                   *  @propertyOf ui.grid.expandable.class:Grid
	                   *  @description reference to the expanded parent row that owns this grid
	                   */
	                  uiGridCtrl.grid.parentRow = $scope.row;

	                  //todo: adjust height on parent row when child grid height changes. we need some sort of gridHeightChanged event
	                 // uiGridCtrl.grid.core.on.canvasHeightChanged($scope, function(oldHeight, newHeight) {
	                 //   uiGridCtrl.grid.parentRow = newHeight;
	                 // });
	                }

	              });
	            },
	            post: function ($scope, $elm, $attrs, uiGridCtrl) {

	            }
	          };
	        }
	      };
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.expandable.directive:uiGridExpandableRow
	   *  @description directive to render the expandable row template
	   */
	  module.directive('uiGridExpandableRow',
	  ['uiGridExpandableService', '$timeout', '$compile', 'uiGridConstants','gridUtil','$interval', '$log',
	    function (uiGridExpandableService, $timeout, $compile, uiGridConstants, gridUtil, $interval, $log) {

	      return {
	        replace: false,
	        priority: 0,
	        scope: false,

	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	              gridUtil.getTemplate($scope.grid.options.expandableRowTemplate).then(
	                function (template) {
	                  if ($scope.grid.options.expandableRowScope) {
	                    /**
	                     *  @ngdoc object
	                     *  @name expandableRowScope
	                     *  @propertyOf  ui.grid.expandable.api:GridOptions
	                     *  @description  Variables of object expandableScope will be available in the scope of the expanded subgrid
	                     *  @example
	                     *  <pre>
	                     *    $scope.gridOptions = {
	                     *      expandableRowScope: expandableScope
	                     *    }
	                     *  </pre>
	                     */
	                    var expandableRowScope = $scope.grid.options.expandableRowScope;
	                    for (var property in expandableRowScope) {
	                      if (expandableRowScope.hasOwnProperty(property)) {
	                        $scope[property] = expandableRowScope[property];
	                      }
	                    }
	                  }
	                  var expandedRowElement = angular.element(template);
	                  $elm.append(expandedRowElement);
	                  expandedRowElement = $compile(expandedRowElement)($scope);
	                  $scope.row.expandedRendered = true;
	              });
	            },

	            post: function ($scope, $elm, $attrs, uiGridCtrl) {
	              $scope.$on('$destroy', function() {
	                $scope.row.expandedRendered = false;
	              });
	            }
	          };
	        }
	      };
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.expandable.directive:uiGridRow
	   *  @description stacks on the uiGridRow directive to add support for expandable rows
	   */
	  module.directive('uiGridRow',
	    ['$compile', 'gridUtil', '$templateCache',
	      function ($compile, gridUtil, $templateCache) {
	        return {
	          priority: -200,
	          scope: false,
	          compile: function ($elm, $attrs) {
	            return {
	              pre: function ($scope, $elm, $attrs, controllers) {

	                if (!$scope.grid.options.enableExpandable) {
	                  return;
	                }

	                $scope.expandableRow = {};

	                $scope.expandableRow.shouldRenderExpand = function () {
	                  var ret = $scope.colContainer.name === 'body' &&  $scope.grid.options.enableExpandable !== false && $scope.row.isExpanded && (!$scope.grid.isScrollingVertically || $scope.row.expandedRendered);
	                  return ret;
	                };

	                $scope.expandableRow.shouldRenderFiller = function () {
	                  var ret = $scope.row.isExpanded && ( $scope.colContainer.name !== 'body' || ($scope.grid.isScrollingVertically && !$scope.row.expandedRendered));
	                  return ret;
	                };

	 /*
	  * Commented out @PaulL1.  This has no purpose that I can see, and causes #2964.  If this code needs to be reinstated for some
	  * reason it needs to use drawnWidth, not width, and needs to check column visibility.  It should really use render container
	  * visible column cache also instead of checking column.renderContainer.
	                  function updateRowContainerWidth() {
	                      var grid = $scope.grid;
	                      var colWidth = 0;
	                      grid.columns.forEach( function (column) {
	                          if (column.renderContainer === 'left') {
	                            colWidth += column.width;
	                          }
	                      });
	                      colWidth = Math.floor(colWidth);
	                      return '.grid' + grid.id + ' .ui-grid-pinned-container-' + $scope.colContainer.name + ', .grid' + grid.id +
	                          ' .ui-grid-pinned-container-' + $scope.colContainer.name + ' .ui-grid-render-container-' + $scope.colContainer.name +
	                          ' .ui-grid-viewport .ui-grid-canvas .ui-grid-row { width: ' + colWidth + 'px; }';
	                  }

	                  if ($scope.colContainer.name === 'left') {
	                      $scope.grid.registerStyleComputation({
	                          priority: 15,
	                          func: updateRowContainerWidth
	                      });
	                  }*/

	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	              }
	            };
	          }
	        };
	      }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.expandable.directive:uiGridViewport
	   *  @description stacks on the uiGridViewport directive to append the expandable row html elements to the
	   *  default gridRow template
	   */
	  module.directive('uiGridViewport',
	    ['$compile', 'gridUtil', '$templateCache',
	      function ($compile, gridUtil, $templateCache) {
	        return {
	          priority: -200,
	          scope: false,
	          compile: function ($elm, $attrs) {

	             //todo: this adds ng-if watchers to each row even if the grid is not using expandable directive
	             //      or options.enableExpandable == false
	             //      The alternative is to compile the template and append to each row in a uiGridRow directive

	            var rowRepeatDiv = angular.element($elm.children().children()[0]);
	            var expandedRowFillerElement = $templateCache.get('ui-grid/expandableScrollFiller');
	            var expandedRowElement = $templateCache.get('ui-grid/expandableRow');
	            rowRepeatDiv.append(expandedRowElement);
	            rowRepeatDiv.append(expandedRowFillerElement);
	            return {
	              pre: function ($scope, $elm, $attrs, controllers) {
	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	              }
	            };
	          }
	        };
	      }]);

	})();

	/* global console */

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.exporter
	   * @description
	   *
	   * # ui.grid.exporter
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module provides the ability to export data from the grid.
	   *
	   * Data can be exported in a range of formats, and all data, visible
	   * data, or selected rows can be exported, with all columns or visible
	   * columns.
	   *
	   * No UI is provided, the caller should provide their own UI/buttons
	   * as appropriate, or enable the gridMenu
	   *
	   * <br/>
	   * <br/>
	   *
	   * <div doc-module-components="ui.grid.exporter"></div>
	   */

	  var module = angular.module('ui.grid.exporter', ['ui.grid']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.exporter.constant:uiGridExporterConstants
	   *
	   *  @description constants available in exporter module
	   */
	  /**
	   * @ngdoc property
	   * @propertyOf ui.grid.exporter.constant:uiGridExporterConstants
	   * @name ALL
	   * @description export all data, including data not visible.  Can
	   * be set for either rowTypes or colTypes
	   */
	  /**
	   * @ngdoc property
	   * @propertyOf ui.grid.exporter.constant:uiGridExporterConstants
	   * @name VISIBLE
	   * @description export only visible data, including data not visible.  Can
	   * be set for either rowTypes or colTypes
	   */
	  /**
	   * @ngdoc property
	   * @propertyOf ui.grid.exporter.constant:uiGridExporterConstants
	   * @name SELECTED
	   * @description export all data, including data not visible.  Can
	   * be set only for rowTypes, selection of only some columns is
	   * not supported
	   */
	  module.constant('uiGridExporterConstants', {
	    featureName: 'exporter',
	    ALL: 'all',
	    VISIBLE: 'visible',
	    SELECTED: 'selected',
	    CSV_CONTENT: 'CSV_CONTENT',
	    BUTTON_LABEL: 'BUTTON_LABEL',
	    FILE_NAME: 'FILE_NAME'
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.exporter.service:uiGridExporterService
	   *
	   *  @description Services for exporter feature
	   */
	  module.service('uiGridExporterService', ['$q', 'uiGridExporterConstants', 'gridUtil', '$compile', '$interval', 'i18nService',
	    function ($q, uiGridExporterConstants, gridUtil, $compile, $interval, i18nService) {

	      var service = {

	        delay: 100,

	        initializeGrid: function (grid) {

	          //add feature namespace and any properties to grid for needed state
	          grid.exporter = {};
	          this.defaultGridOptions(grid.options);

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.exporter.api:PublicApi
	           *
	           *  @description Public Api for exporter feature
	           */
	          var publicApi = {
	            events: {
	              exporter: {
	              }
	            },
	            methods: {
	              exporter: {
	                /**
	                 * @ngdoc function
	                 * @name csvExport
	                 * @methodOf  ui.grid.exporter.api:PublicApi
	                 * @description Exports rows from the grid in csv format,
	                 * the data exported is selected based on the provided options
	                 * @param {string} rowTypes which rows to export, valid values are
	                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	                 * uiGridExporterConstants.SELECTED
	                 * @param {string} colTypes which columns to export, valid values are
	                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE
	                 */
	                csvExport: function (rowTypes, colTypes) {
	                  service.csvExport(grid, rowTypes, colTypes);
	                },
	                /**
	                 * @ngdoc function
	                 * @name pdfExport
	                 * @methodOf  ui.grid.exporter.api:PublicApi
	                 * @description Exports rows from the grid in pdf format,
	                 * the data exported is selected based on the provided options
	                 * Note that this function has a dependency on pdfMake, all
	                 * going well this has been installed for you.
	                 * The resulting pdf opens in a new browser window.
	                 * @param {string} rowTypes which rows to export, valid values are
	                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	                 * uiGridExporterConstants.SELECTED
	                 * @param {string} colTypes which columns to export, valid values are
	                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE
	                 */
	                pdfExport: function (rowTypes, colTypes) {
	                  service.pdfExport(grid, rowTypes, colTypes);
	                }
	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);

	          grid.api.registerMethodsFromObject(publicApi.methods);

	          if (grid.api.core.addToGridMenu){
	            service.addToMenu( grid );
	          } else {
	            // order of registration is not guaranteed, register in a little while
	            $interval( function() {
	              if (grid.api.core.addToGridMenu){
	                service.addToMenu( grid );
	              }
	            }, this.delay, 1);
	          }

	        },

	        defaultGridOptions: function (gridOptions) {
	          //default option to true unless it was explicitly set to false
	          /**
	           * @ngdoc object
	           * @name ui.grid.exporter.api:GridOptions
	           *
	           * @description GridOptions for exporter feature, these are available to be
	           * set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */
	          /**
	           * @ngdoc object
	           * @name ui.grid.exporter.api:ColumnDef
	           * @description ColumnDef settings for exporter
	           */
	          /**
	           * @ngdoc object
	           * @name exporterSuppressMenu
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description Don't show the export menu button, implying the user
	           * will roll their own UI for calling the exporter
	           * <br/>Defaults to false
	           */
	          gridOptions.exporterSuppressMenu = gridOptions.exporterSuppressMenu === true;
	          /**
	           * @ngdoc object
	           * @name exporterMenuLabel
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The text to show on the exporter menu button
	           * link
	           * <br/>Defaults to 'Export'
	           */
	          gridOptions.exporterMenuLabel = gridOptions.exporterMenuLabel ? gridOptions.exporterMenuLabel : 'Export';
	          /**
	           * @ngdoc object
	           * @name exporterSuppressColumns
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description Columns that should not be exported.  The selectionRowHeader is already automatically
	           * suppressed, but if you had a button column or some other "system" column that shouldn't be shown in the
	           * output then add it in this list.  You should provide an array of column names.
	           * <br/>Defaults to: []
	           * <pre>
	           *   gridOptions.exporterSuppressColumns = [ 'buttons' ];
	           * </pre>
	           */
	          gridOptions.exporterSuppressColumns = gridOptions.exporterSuppressColumns ? gridOptions.exporterSuppressColumns : [];
	          /**
	           * @ngdoc object
	           * @name exporterCsvColumnSeparator
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The character to use as column separator
	           * link
	           * <br/>Defaults to ','
	           */
	          gridOptions.exporterCsvColumnSeparator = gridOptions.exporterCsvColumnSeparator ? gridOptions.exporterCsvColumnSeparator : ',';
	          /**
	           * @ngdoc object
	           * @name exporterCsvFilename
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The default filename to use when saving the downloaded csv.
	           * This will only work in some browsers.
	           * <br/>Defaults to 'download.csv'
	           */
	          gridOptions.exporterCsvFilename = gridOptions.exporterCsvFilename ? gridOptions.exporterCsvFilename : 'download.csv';
	          /**
	           * @ngdoc object
	           * @name exporterPdfFilename
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The default filename to use when saving the downloaded pdf, only used in IE (other browsers open pdfs in a new window)
	           * <br/>Defaults to 'download.pdf'
	           */
	          gridOptions.exporterPdfFilename = gridOptions.exporterPdfFilename ? gridOptions.exporterPdfFilename : 'download.pdf';
	          /**
	           * @ngdoc object
	           * @name exporterOlderExcelCompatibility
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description Some versions of excel don't like the utf-16 BOM on the front, and it comes
	           * through as ï»¿ in the first column header.  Setting this option to false will suppress this, at the
	           * expense of proper utf-16 handling in applications that do recognise the BOM
	           * <br/>Defaults to false
	           */
	          gridOptions.exporterOlderExcelCompatibility = gridOptions.exporterOlderExcelCompatibility === true;
	          /**
	           * @ngdoc object
	           * @name exporterPdfDefaultStyle
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The default style in pdfMake format
	           * <br/>Defaults to:
	           * <pre>
	           *   {
	           *     fontSize: 11
	           *   }
	           * </pre>
	           */
	          gridOptions.exporterPdfDefaultStyle = gridOptions.exporterPdfDefaultStyle ? gridOptions.exporterPdfDefaultStyle : { fontSize: 11 };
	          /**
	           * @ngdoc object
	           * @name exporterPdfTableStyle
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The table style in pdfMake format
	           * <br/>Defaults to:
	           * <pre>
	           *   {
	           *     margin: [0, 5, 0, 15]
	           *   }
	           * </pre>
	           */
	          gridOptions.exporterPdfTableStyle = gridOptions.exporterPdfTableStyle ? gridOptions.exporterPdfTableStyle : { margin: [0, 5, 0, 15] };
	          /**
	           * @ngdoc object
	           * @name exporterPdfTableHeaderStyle
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The tableHeader style in pdfMake format
	           * <br/>Defaults to:
	           * <pre>
	           *   {
	           *     bold: true,
	           *     fontSize: 12,
	           *     color: 'black'
	           *   }
	           * </pre>
	           */
	          gridOptions.exporterPdfTableHeaderStyle = gridOptions.exporterPdfTableHeaderStyle ? gridOptions.exporterPdfTableHeaderStyle : { bold: true, fontSize: 12, color: 'black' };
	          /**
	           * @ngdoc object
	           * @name exporterPdfHeader
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The header section for pdf exports.  Can be
	           * simple text:
	           * <pre>
	           *   gridOptions.exporterPdfHeader = 'My Header';
	           * </pre>
	           * Can be a more complex object in pdfMake format:
	           * <pre>
	           *   gridOptions.exporterPdfHeader = {
	           *     columns: [
	           *       'Left part',
	           *       { text: 'Right part', alignment: 'right' }
	           *     ]
	           *   };
	           * </pre>
	           * Or can be a function, allowing page numbers and the like
	           * <pre>
	           *   gridOptions.exporterPdfHeader: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; };
	           * </pre>
	           */
	          gridOptions.exporterPdfHeader = gridOptions.exporterPdfHeader ? gridOptions.exporterPdfHeader : null;
	          /**
	           * @ngdoc object
	           * @name exporterPdfFooter
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The header section for pdf exports.  Can be
	           * simple text:
	           * <pre>
	           *   gridOptions.exporterPdfFooter = 'My Footer';
	           * </pre>
	           * Can be a more complex object in pdfMake format:
	           * <pre>
	           *   gridOptions.exporterPdfFooter = {
	           *     columns: [
	           *       'Left part',
	           *       { text: 'Right part', alignment: 'right' }
	           *     ]
	           *   };
	           * </pre>
	           * Or can be a function, allowing page numbers and the like
	           * <pre>
	           *   gridOptions.exporterPdfFooter: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; };
	           * </pre>
	           */
	          gridOptions.exporterPdfFooter = gridOptions.exporterPdfFooter ? gridOptions.exporterPdfFooter : null;
	          /**
	           * @ngdoc object
	           * @name exporterPdfOrientation
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The orientation, should be a valid pdfMake value,
	           * 'landscape' or 'portrait'
	           * <br/>Defaults to landscape
	           */
	          gridOptions.exporterPdfOrientation = gridOptions.exporterPdfOrientation ? gridOptions.exporterPdfOrientation : 'landscape';
	          /**
	           * @ngdoc object
	           * @name exporterPdfPageSize
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The orientation, should be a valid pdfMake
	           * paper size, usually 'A4' or 'LETTER'
	           * {@link https://github.com/bpampuch/pdfmake/blob/master/src/standardPageSizes.js pdfMake page sizes}
	           * <br/>Defaults to A4
	           */
	          gridOptions.exporterPdfPageSize = gridOptions.exporterPdfPageSize ? gridOptions.exporterPdfPageSize : 'A4';
	          /**
	           * @ngdoc object
	           * @name exporterPdfMaxGridWidth
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The maxium grid width - the current grid width
	           * will be scaled to match this, with any fixed width columns
	           * being adjusted accordingly.
	           * <br/>Defaults to 720 (for A4 landscape), use 670 for LETTER
	           */
	          gridOptions.exporterPdfMaxGridWidth = gridOptions.exporterPdfMaxGridWidth ? gridOptions.exporterPdfMaxGridWidth : 720;
	          /**
	           * @ngdoc object
	           * @name exporterPdfTableLayout
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description A tableLayout in pdfMake format,
	           * controls gridlines and the like.  We use the default
	           * layout usually.
	           * <br/>Defaults to null, which means no layout
	           */

	          /**
	           * @ngdoc object
	           * @name exporterMenuAllData
	           * @porpertyOf  ui.grid.exporter.api:GridOptions
	           * @description Add export all data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.
	           */
	          gridOptions.exporterMenuAllData = gridOptions.exporterMenuAllData !== undefined ? gridOptions.exporterMenuAllData : true;

	          /**
	           * @ngdoc object
	           * @name exporterMenuVisibleData
	           * @porpertyOf  ui.grid.exporter.api:GridOptions
	           * @description Add export visible data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.
	           */
	          gridOptions.exporterMenuVisibleData = gridOptions.exporterMenuVisibleData !== undefined ? gridOptions.exporterMenuVisibleData : true;

	          /**
	           * @ngdoc object
	           * @name exporterMenuSelectedData
	           * @porpertyOf  ui.grid.exporter.api:GridOptions
	           * @description Add export selected data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.
	           */
	          gridOptions.exporterMenuSelectedData = gridOptions.exporterMenuSelectedData !== undefined ? gridOptions.exporterMenuSelectedData : true;

	          /**
	           * @ngdoc object
	           * @name exporterMenuCsv
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description Add csv export menu items to the ui-grid grid menu, if it's present.  Defaults to true.
	           */
	          gridOptions.exporterMenuCsv = gridOptions.exporterMenuCsv !== undefined ? gridOptions.exporterMenuCsv : true;

	          /**
	           * @ngdoc object
	           * @name exporterMenuPdf
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description Add pdf export menu items to the ui-grid grid menu, if it's present.  Defaults to true.
	           */
	          gridOptions.exporterMenuPdf = gridOptions.exporterMenuPdf !== undefined ? gridOptions.exporterMenuPdf : true;

	          /**
	           * @ngdoc object
	           * @name exporterPdfCustomFormatter
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description A custom callback routine that changes the pdf document, adding any
	           * custom styling or content that is supported by pdfMake.  Takes in the complete docDefinition, and
	           * must return an updated docDefinition ready for pdfMake.
	           * @example
	           * In this example we add a style to the style array, so that we can use it in our
	           * footer definition.
	           * <pre>
	           *   gridOptions.exporterPdfCustomFormatter = function ( docDefinition ) {
	           *     docDefinition.styles.footerStyle = { bold: true, fontSize: 10 };
	           *     return docDefinition;
	           *   }
	           *
	           *   gridOptions.exporterPdfFooter = { text: 'My footer', style: 'footerStyle' }
	           * </pre>
	           */
	          gridOptions.exporterPdfCustomFormatter = ( gridOptions.exporterPdfCustomFormatter && typeof( gridOptions.exporterPdfCustomFormatter ) === 'function' ) ? gridOptions.exporterPdfCustomFormatter : function ( docDef ) { return docDef; };

	          /**
	           * @ngdoc object
	           * @name exporterHeaderFilterUseName
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description Defaults to false, which leads to `displayName` being passed into the headerFilter.
	           * If set to true, then will pass `name` instead.
	           *
	           *
	           * @example
	           * <pre>
	           *   gridOptions.exporterHeaderFilterUseName = true;
	           * </pre>
	           */
	          gridOptions.exporterHeaderFilterUseName = gridOptions.exporterHeaderFilterUseName === true;

	          /**
	           * @ngdoc object
	           * @name exporterHeaderFilter
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description A function to apply to the header displayNames before exporting.  Useful for internationalisation,
	           * for example if you were using angular-translate you'd set this to `$translate.instant`.  Note that this
	           * call must be synchronous, it cannot be a call that returns a promise.
	           *
	           * Behaviour can be changed to pass in `name` instead of `displayName` through use of `exporterHeaderFilterUseName: true`.
	           *
	           * @example
	           * <pre>
	           *   gridOptions.exporterHeaderFilter = function( displayName ){ return 'col: ' + name; };
	           * </pre>
	           * OR
	           * <pre>
	           *   gridOptions.exporterHeaderFilter = $translate.instant;
	           * </pre>
	           */

	          /**
	           * @ngdoc function
	           * @name exporterFieldCallback
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description A function to call for each field before exporting it.  Allows
	           * massaging of raw data into a display format, for example if you have applied
	           * filters to convert codes into decodes, or you require
	           * a specific date format in the exported content.
	           *
	           * The method is called once for each field exported, and provides the grid, the
	           * gridCol and the GridRow for you to use as context in massaging the data.
	           *
	           * @param {Grid} grid provides the grid in case you have need of it
	           * @param {GridRow} row the row from which the data comes
	           * @param {GridCol} col the column from which the data comes
	           * @param {object} value the value for your massaging
	           * @returns {object} you must return the massaged value ready for exporting
	           *
	           * @example
	           * <pre>
	           *   gridOptions.exporterFieldCallback = function ( grid, row, col, value ){
	           *     if ( col.name === 'status' ){
	           *       value = decodeStatus( value );
	           *     }
	           *     return value;
	           *   }
	           * </pre>
	           */
	          gridOptions.exporterFieldCallback = gridOptions.exporterFieldCallback ? gridOptions.exporterFieldCallback : function( grid, row, col, value ) { return value; };

	          /**
	           * @ngdoc function
	           * @name exporterAllDataFn
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description This promise is needed when exporting all rows,
	           * and the data need to be provided by server side. Default is null.
	           * @returns {Promise} a promise to load all data from server
	           *
	           * @example
	           * <pre>
	           *   gridOptions.exporterAllDataFn = function () {
	           *     return $http.get('/data/100.json')
	           *   }
	           * </pre>
	           */
	          gridOptions.exporterAllDataFn = gridOptions.exporterAllDataFn ? gridOptions.exporterAllDataFn : null;

	          /**
	           * @ngdoc function
	           * @name exporterAllDataPromise
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description DEPRECATED - exporterAllDataFn used to be
	           * called this, but it wasn't a promise, it was a function that returned
	           * a promise.  Deprecated, but supported for backward compatibility, use
	           * exporterAllDataFn instead.
	           * @returns {Promise} a promise to load all data from server
	           *
	           * @example
	           * <pre>
	           *   gridOptions.exporterAllDataFn = function () {
	           *     return $http.get('/data/100.json')
	           *   }
	           * </pre>
	           */
	          if ( gridOptions.exporterAllDataFn == null && gridOptions.exporterAllDataPromise ) {
	            gridOptions.exporterAllDataFn = gridOptions.exporterAllDataPromise;
	          }
	        },


	        /**
	         * @ngdoc function
	         * @name addToMenu
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Adds export items to the grid menu,
	         * allowing the user to select export options
	         * @param {Grid} grid the grid from which data should be exported
	         */
	        addToMenu: function ( grid ) {
	          grid.api.core.addToGridMenu( grid, [
	            {
	              title: i18nService.getSafeText('gridMenu.exporterAllAsCsv'),
	              action: function ($event) {
	                this.grid.api.exporter.csvExport( uiGridExporterConstants.ALL, uiGridExporterConstants.ALL );
	              },
	              shown: function() {
	                return this.grid.options.exporterMenuCsv && this.grid.options.exporterMenuAllData;
	              },
	              order: 200
	            },
	            {
	              title: i18nService.getSafeText('gridMenu.exporterVisibleAsCsv'),
	              action: function ($event) {
	                this.grid.api.exporter.csvExport( uiGridExporterConstants.VISIBLE, uiGridExporterConstants.VISIBLE );
	              },
	              shown: function() {
	                return this.grid.options.exporterMenuCsv && this.grid.options.exporterMenuVisibleData;
	              },
	              order: 201
	            },
	            {
	              title: i18nService.getSafeText('gridMenu.exporterSelectedAsCsv'),
	              action: function ($event) {
	                this.grid.api.exporter.csvExport( uiGridExporterConstants.SELECTED, uiGridExporterConstants.VISIBLE );
	              },
	              shown: function() {
	                return this.grid.options.exporterMenuCsv && this.grid.options.exporterMenuSelectedData &&
	                       ( this.grid.api.selection && this.grid.api.selection.getSelectedRows().length > 0 );
	              },
	              order: 202
	            },
	            {
	              title: i18nService.getSafeText('gridMenu.exporterAllAsPdf'),
	              action: function ($event) {
	                this.grid.api.exporter.pdfExport( uiGridExporterConstants.ALL, uiGridExporterConstants.ALL );
	              },
	              shown: function() {
	                return this.grid.options.exporterMenuPdf && this.grid.options.exporterMenuAllData;
	              },
	              order: 203
	            },
	            {
	              title: i18nService.getSafeText('gridMenu.exporterVisibleAsPdf'),
	              action: function ($event) {
	                this.grid.api.exporter.pdfExport( uiGridExporterConstants.VISIBLE, uiGridExporterConstants.VISIBLE );
	              },
	              shown: function() {
	                return this.grid.options.exporterMenuPdf && this.grid.options.exporterMenuVisibleData;
	              },
	              order: 204
	            },
	            {
	              title: i18nService.getSafeText('gridMenu.exporterSelectedAsPdf'),
	              action: function ($event) {
	                this.grid.api.exporter.pdfExport( uiGridExporterConstants.SELECTED, uiGridExporterConstants.VISIBLE );
	              },
	              shown: function() {
	                return this.grid.options.exporterMenuPdf && this.grid.options.exporterMenuSelectedData &&
	                       ( this.grid.api.selection && this.grid.api.selection.getSelectedRows().length > 0 );
	              },
	              order: 205
	            }
	          ]);
	        },


	        /**
	         * @ngdoc function
	         * @name csvExport
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Exports rows from the grid in csv format,
	         * the data exported is selected based on the provided options
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {string} rowTypes which rows to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         * @param {string} colTypes which columns to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         */
	        csvExport: function (grid, rowTypes, colTypes) {
	          var self = this;
	          this.loadAllDataIfNeeded(grid, rowTypes, colTypes).then(function() {
	            var exportColumnHeaders = grid.options.showHeader ? self.getColumnHeaders(grid, colTypes) : [];
	            var exportData = self.getData(grid, rowTypes, colTypes);
	            var csvContent = self.formatAsCsv(exportColumnHeaders, exportData, grid.options.exporterCsvColumnSeparator);

	            self.downloadFile (grid.options.exporterCsvFilename, csvContent, grid.options.exporterCsvColumnSeparator, grid.options.exporterOlderExcelCompatibility);
	          });
	        },

	        /**
	         * @ngdoc function
	         * @name loadAllDataIfNeeded
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description When using server side pagination, use exporterAllDataFn to
	         * load all data before continuing processing.
	         * When using client side pagination, return a resolved promise so processing
	         * continues immediately
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {string} rowTypes which rows to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         * @param {string} colTypes which columns to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         */
	        loadAllDataIfNeeded: function (grid, rowTypes, colTypes) {
	          if ( rowTypes === uiGridExporterConstants.ALL && grid.rows.length !== grid.options.totalItems && grid.options.exporterAllDataFn) {
	            return grid.options.exporterAllDataFn()
	              .then(function() {
	                grid.modifyRows(grid.options.data);
	              });
	          } else {
	            var deferred = $q.defer();
	            deferred.resolve();
	            return deferred.promise;
	          }
	        },

	        /**
	         * @ngdoc property
	         * @propertyOf ui.grid.exporter.api:ColumnDef
	         * @name exporterSuppressExport
	         * @description Suppresses export for this column.  Used by selection and expandable.
	         */

	        /**
	         * @ngdoc function
	         * @name getColumnHeaders
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Gets the column headers from the grid to use
	         * as a title row for the exported file, all headers have
	         * headerCellFilters applied as appropriate.
	         *
	         * Column headers are an array of objects, each object has
	         * name, displayName, width and align attributes.  Only name is
	         * used for csv, all attributes are used for pdf.
	         *
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {string} colTypes which columns to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         */
	        getColumnHeaders: function (grid, colTypes) {
	          var headers = [];
	          var columns;

	          if ( colTypes === uiGridExporterConstants.ALL ){
	            columns = grid.columns;
	          } else {
	            var leftColumns = grid.renderContainers.left ? grid.renderContainers.left.visibleColumnCache.filter( function( column ){ return column.visible; } ) : [];
	            var bodyColumns = grid.renderContainers.body ? grid.renderContainers.body.visibleColumnCache.filter( function( column ){ return column.visible; } ) : [];
	            var rightColumns = grid.renderContainers.right ? grid.renderContainers.right.visibleColumnCache.filter( function( column ){ return column.visible; } ) : [];

	            columns = leftColumns.concat(bodyColumns,rightColumns);
	          }

	          columns.forEach( function( gridCol, index ) {
	            if ( gridCol.colDef.exporterSuppressExport !== true &&
	                 grid.options.exporterSuppressColumns.indexOf( gridCol.name ) === -1 ){
	              headers.push({
	                name: gridCol.field,
	                displayName: grid.options.exporterHeaderFilter ? ( grid.options.exporterHeaderFilterUseName ? grid.options.exporterHeaderFilter(gridCol.name) : grid.options.exporterHeaderFilter(gridCol.displayName) ) : gridCol.displayName,
	                width: gridCol.drawnWidth ? gridCol.drawnWidth : gridCol.width,
	                align: gridCol.colDef.type === 'number' ? 'right' : 'left'
	              });
	            }
	          });

	          return headers;
	        },


	        /**
	         * @ngdoc property
	         * @propertyOf ui.grid.exporter.api:ColumnDef
	         * @name exporterPdfAlign
	         * @description the alignment you'd like for this specific column when
	         * exported into a pdf.  Can be 'left', 'right', 'center' or any other
	         * valid pdfMake alignment option.
	         */


	        /**
	         * @ngdoc object
	         * @name ui.grid.exporter.api:GridRow
	         * @description GridRow settings for exporter
	         */
	        /**
	         * @ngdoc object
	         * @name exporterEnableExporting
	         * @propertyOf  ui.grid.exporter.api:GridRow
	         * @description If set to false, then don't export this row, notwithstanding visible or
	         * other settings
	         * <br/>Defaults to true
	         */

	        /**
	         * @ngdoc function
	         * @name getData
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Gets data from the grid based on the provided options,
	         * all cells have cellFilters applied as appropriate.  Any rows marked
	         * `exporterEnableExporting: false` will not be exported
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {string} rowTypes which rows to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         * @param {string} colTypes which columns to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         * @param {boolean} applyCellFilters whether or not to get the display value or the raw value of the data
	         */
	        getData: function (grid, rowTypes, colTypes, applyCellFilters) {
	          var data = [];
	          var rows;
	          var columns;

	          switch ( rowTypes ) {
	            case uiGridExporterConstants.ALL:
	              rows = grid.rows;
	              break;
	            case uiGridExporterConstants.VISIBLE:
	              rows = grid.getVisibleRows();
	              break;
	            case uiGridExporterConstants.SELECTED:
	              if ( grid.api.selection ){
	                rows = grid.api.selection.getSelectedGridRows();
	              } else {
	                gridUtil.logError('selection feature must be enabled to allow selected rows to be exported');
	              }
	              break;
	          }

	          if ( colTypes === uiGridExporterConstants.ALL ){
	            columns = grid.columns;
	          } else {
	            var leftColumns = grid.renderContainers.left ? grid.renderContainers.left.visibleColumnCache.filter( function( column ){ return column.visible; } ) : [];
	            var bodyColumns = grid.renderContainers.body ? grid.renderContainers.body.visibleColumnCache.filter( function( column ){ return column.visible; } ) : [];
	            var rightColumns = grid.renderContainers.right ? grid.renderContainers.right.visibleColumnCache.filter( function( column ){ return column.visible; } ) : [];

	            columns = leftColumns.concat(bodyColumns,rightColumns);
	          }

	          rows.forEach( function( row, index ) {

	            if (row.exporterEnableExporting !== false) {
	              var extractedRow = [];


	              columns.forEach( function( gridCol, index ) {
	              if ( (gridCol.visible || colTypes === uiGridExporterConstants.ALL ) &&
	                   gridCol.colDef.exporterSuppressExport !== true &&
	                   grid.options.exporterSuppressColumns.indexOf( gridCol.name ) === -1 ){
	                  var cellValue = applyCellFilters ? grid.getCellDisplayValue( row, gridCol ) : grid.getCellValue( row, gridCol );
	                  var extractedField = { value: grid.options.exporterFieldCallback( grid, row, gridCol, cellValue ) };
	                  if ( gridCol.colDef.exporterPdfAlign ) {
	                    extractedField.alignment = gridCol.colDef.exporterPdfAlign;
	                  }
	                  extractedRow.push(extractedField);
	                }
	              });

	              data.push(extractedRow);
	            }
	          });

	          return data;
	        },


	        /**
	         * @ngdoc function
	         * @name formatAsCsv
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Formats the column headers and data as a CSV,
	         * and sends that data to the user
	         * @param {array} exportColumnHeaders an array of column headers,
	         * where each header is an object with name, width and maybe alignment
	         * @param {array} exportData an array of rows, where each row is
	         * an array of column data
	         * @param {string} separator a string that represents the separator to be used in the csv file
	         * @returns {string} csv the formatted csv as a string
	         */
	        formatAsCsv: function (exportColumnHeaders, exportData, separator) {
	          var self = this;

	          var bareHeaders = exportColumnHeaders.map(function(header){return { value: header.displayName };});

	          var csv = bareHeaders.length > 0 ? (self.formatRowAsCsv(this, separator)(bareHeaders) + '\n') : '';

	          csv += exportData.map(this.formatRowAsCsv(this, separator)).join('\n');

	          return csv;
	        },

	        /**
	         * @ngdoc function
	         * @name formatRowAsCsv
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Renders a single field as a csv field, including
	         * quotes around the value
	         * @param {exporterService} exporter pass in exporter
	         * @param {array} row the row to be turned into a csv string
	         * @returns {string} a csv-ified version of the row
	         */
	        formatRowAsCsv: function (exporter, separator) {
	          return function (row) {
	            return row.map(exporter.formatFieldAsCsv).join(separator);
	          };
	        },

	        /**
	         * @ngdoc function
	         * @name formatFieldAsCsv
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Renders a single field as a csv field, including
	         * quotes around the value
	         * @param {field} field the field to be turned into a csv string,
	         * may be of any type
	         * @returns {string} a csv-ified version of the field
	         */
	        formatFieldAsCsv: function (field) {
	          if (field.value == null) { // we want to catch anything null-ish, hence just == not ===
	            return '';
	          }
	          if (typeof(field.value) === 'number') {
	            return field.value;
	          }
	          if (typeof(field.value) === 'boolean') {
	            return (field.value ? 'TRUE' : 'FALSE') ;
	          }
	          if (typeof(field.value) === 'string') {
	            return '"' + field.value.replace(/"/g,'""') + '"';
	          }

	          return JSON.stringify(field.value);
	        },


	        /**
	         * @ngdoc function
	         * @name isIE
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Checks whether current browser is IE and returns it's version if it is
	        */
	        isIE: function () {
	          var match = navigator.userAgent.search(/(?:Edge|MSIE|Trident\/.*; rv:)/);
	          var isIE = false;

	          if (match !== -1) {
	            isIE = true;
	          }

	          return isIE;
	        },


	        /**
	         * @ngdoc function
	         * @name downloadFile
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Triggers download of a csv file.  Logic provided
	         * by @cssensei (from his colleagues at https://github.com/ifeelgoods) in issue #2391
	         * @param {string} fileName the filename we'd like our file to be
	         * given
	         * @param {string} csvContent the csv content that we'd like to
	         * download as a file
	         * @param {boolean} exporterOlderExcelCompatibility whether or not we put a utf-16 BOM on the from (\uFEFF)
	         */
	        downloadFile: function (fileName, csvContent, columnSeparator, exporterOlderExcelCompatibility) {
	          var D = document;
	          var a = D.createElement('a');
	          var strMimeType = 'application/octet-stream;charset=utf-8';
	          var rawFile;
	          var ieVersion = this.isIE();

	          // IE10+
	          if (navigator.msSaveBlob) {
	            return navigator.msSaveOrOpenBlob(
	              new Blob(
	                [exporterOlderExcelCompatibility ? "\uFEFF" : '', csvContent],
	                { type: strMimeType } ),
	              fileName
	            );
	          }

	          if (ieVersion) {
	            var frame = D.createElement('iframe');
	            document.body.appendChild(frame);

	            frame.contentWindow.document.open('text/html', 'replace');
	            frame.contentWindow.document.write('sep=' + columnSeparator + '\r\n' + csvContent);
	            frame.contentWindow.document.close();
	            frame.contentWindow.focus();
	            frame.contentWindow.document.execCommand('SaveAs', true, fileName);

	            document.body.removeChild(frame);
	            return true;
	          }

	          //html5 A[download]
	          if ('download' in a) {
	            var blob = new Blob(
	              [exporterOlderExcelCompatibility ? "\uFEFF" : '', csvContent],
	              { type: strMimeType }
	            );
	            rawFile = URL.createObjectURL(blob);
	            a.setAttribute('download', fileName);
	          } else {
	            rawFile = 'data:' + strMimeType + ',' + encodeURIComponent(csvContent);
	            a.setAttribute('target', '_blank');
	          }

	          a.href = rawFile;
	          a.setAttribute('style', 'display:none;');
	          D.body.appendChild(a);
	          setTimeout(function() {
	            if (a.click) {
	              a.click();
	              // Workaround for Safari 5
	            } else if (document.createEvent) {
	              var eventObj = document.createEvent('MouseEvents');
	              eventObj.initEvent('click', true, true);
	              a.dispatchEvent(eventObj);
	            }
	            D.body.removeChild(a);

	          }, this.delay);
	        },

	        /**
	         * @ngdoc function
	         * @name pdfExport
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Exports rows from the grid in pdf format,
	         * the data exported is selected based on the provided options.
	         * Note that this function has a dependency on pdfMake, which must
	         * be installed.  The resulting pdf opens in a new
	         * browser window.
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {string} rowTypes which rows to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         * @param {string} colTypes which columns to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         */
	        pdfExport: function (grid, rowTypes, colTypes) {
	          var self = this;
	          this.loadAllDataIfNeeded(grid, rowTypes, colTypes).then(function () {
	            var exportColumnHeaders = self.getColumnHeaders(grid, colTypes);
	            var exportData = self.getData(grid, rowTypes, colTypes);
	            var docDefinition = self.prepareAsPdf(grid, exportColumnHeaders, exportData);

	            if (self.isIE() || navigator.appVersion.indexOf("Edge") !== -1) {
	              self.downloadPDF(grid.options.exporterPdfFilename, docDefinition);
	            } else {
	              pdfMake.createPdf(docDefinition).open();
	            }
	          });
	        },


	        /**
	         * @ngdoc function
	         * @name downloadPdf
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Generates and retrieves the pdf as a blob, then downloads
	         * it as a file.  Only used in IE, in all other browsers we use the native
	         * pdfMake.open function to just open the PDF
	         * @param {string} fileName the filename to give to the pdf, can be set
	         * through exporterPdfFilename
	         * @param {object} docDefinition a pdf docDefinition that we can generate
	         * and get a blob from
	         */
	        downloadPDF: function (fileName, docDefinition) {
	          var D = document;
	          var a = D.createElement('a');
	          var strMimeType = 'application/octet-stream;charset=utf-8';
	          var rawFile;
	          var ieVersion;

	          ieVersion = this.isIE(); // This is now a boolean value
	          var doc = pdfMake.createPdf(docDefinition);
	          var blob;

	          doc.getBuffer( function (buffer) {
	            blob = new Blob([buffer]);

	            // IE10+
	            if (navigator.msSaveBlob) {
	              return navigator.msSaveBlob(
	                blob, fileName
	              );
	            }

	            // Previously:  && ieVersion < 10
	            // ieVersion now returns a boolean for the
	            // sake of sanity. We just check `msSaveBlob` first.
	            if (ieVersion) {
	              var frame = D.createElement('iframe');
	              document.body.appendChild(frame);

	              frame.contentWindow.document.open("text/html", "replace");
	              frame.contentWindow.document.write(blob);
	              frame.contentWindow.document.close();
	              frame.contentWindow.focus();
	              frame.contentWindow.document.execCommand('SaveAs', true, fileName);

	              document.body.removeChild(frame);
	              return true;
	            }
	          });
	        },


	        /**
	         * @ngdoc function
	         * @name renderAsPdf
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Renders the data into a pdf, and opens that pdf.
	         *
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {array} exportColumnHeaders an array of column headers,
	         * where each header is an object with name, width and maybe alignment
	         * @param {array} exportData an array of rows, where each row is
	         * an array of column data
	         * @returns {object} a pdfMake format document definition, ready
	         * for generation
	         */
	        prepareAsPdf: function(grid, exportColumnHeaders, exportData) {
	          var headerWidths = this.calculatePdfHeaderWidths( grid, exportColumnHeaders );

	          var headerColumns = exportColumnHeaders.map( function( header ) {
	            return { text: header.displayName, style: 'tableHeader' };
	          });

	          var stringData = exportData.map(this.formatRowAsPdf(this));

	          var allData = [headerColumns].concat(stringData);

	          var docDefinition = {
	            pageOrientation: grid.options.exporterPdfOrientation,
	            pageSize: grid.options.exporterPdfPageSize,
	            content: [{
	              style: 'tableStyle',
	              table: {
	                headerRows: 1,
	                widths: headerWidths,
	                body: allData
	              }
	            }],
	            styles: {
	              tableStyle: grid.options.exporterPdfTableStyle,
	              tableHeader: grid.options.exporterPdfTableHeaderStyle
	            },
	            defaultStyle: grid.options.exporterPdfDefaultStyle
	          };

	          if ( grid.options.exporterPdfLayout ){
	            docDefinition.layout = grid.options.exporterPdfLayout;
	          }

	          if ( grid.options.exporterPdfHeader ){
	            docDefinition.header = grid.options.exporterPdfHeader;
	          }

	          if ( grid.options.exporterPdfFooter ){
	            docDefinition.footer = grid.options.exporterPdfFooter;
	          }

	          if ( grid.options.exporterPdfCustomFormatter ){
	            docDefinition = grid.options.exporterPdfCustomFormatter( docDefinition );
	          }
	          return docDefinition;

	        },


	        /**
	         * @ngdoc function
	         * @name calculatePdfHeaderWidths
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Determines the column widths base on the
	         * widths we got from the grid.  If the column is drawn
	         * then we have a drawnWidth.  If the column is not visible
	         * then we have '*', 'x%' or a width.  When columns are
	         * not visible they don't contribute to the overall gridWidth,
	         * so we need to adjust to allow for extra columns
	         *
	         * Our basic heuristic is to take the current gridWidth, plus
	         * numeric columns and call this the base gridwidth.
	         *
	         * To that we add 100 for any '*' column, and x% of the base gridWidth
	         * for any column that is a %
	         *
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {array} exportHeaders array of header information
	         * @returns {object} an array of header widths
	         */
	        calculatePdfHeaderWidths: function ( grid, exportHeaders ) {
	          var baseGridWidth = 0;
	          exportHeaders.forEach( function(value){
	            if (typeof(value.width) === 'number'){
	              baseGridWidth += value.width;
	            }
	          });

	          var extraColumns = 0;
	          exportHeaders.forEach( function(value){
	            if (value.width === '*'){
	              extraColumns += 100;
	            }
	            if (typeof(value.width) === 'string' && value.width.match(/(\d)*%/)) {
	              var percent = parseInt(value.width.match(/(\d)*%/)[0]);

	              value.width = baseGridWidth * percent / 100;
	              extraColumns += value.width;
	            }
	          });

	          var gridWidth = baseGridWidth + extraColumns;

	          return exportHeaders.map(function( header ) {
	            return header.width === '*' ? header.width : header.width * grid.options.exporterPdfMaxGridWidth / gridWidth;
	          });

	        },

	        /**
	         * @ngdoc function
	         * @name formatRowAsPdf
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Renders a row in a format consumable by PDF,
	         * mainly meaning casting everything to a string
	         * @param {exporterService} exporter pass in exporter
	         * @param {array} row the row to be turned into a csv string
	         * @returns {string} a csv-ified version of the row
	         */
	        formatRowAsPdf: function ( exporter ) {
	          return function( row ) {
	            return row.map(exporter.formatFieldAsPdfString);
	          };
	        },


	        /**
	         * @ngdoc function
	         * @name formatFieldAsCsv
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Renders a single field as a pdf-able field, which
	         * is different from a csv field only in that strings don't have quotes
	         * around them
	         * @param {field} field the field to be turned into a pdf string,
	         * may be of any type
	         * @returns {string} a string-ified version of the field
	         */
	        formatFieldAsPdfString: function (field) {
	          var returnVal;
	          if (field.value == null) { // we want to catch anything null-ish, hence just == not ===
	            returnVal = '';
	          } else if (typeof(field.value) === 'number') {
	            returnVal = field.value.toString();
	          } else if (typeof(field.value) === 'boolean') {
	            returnVal = (field.value ? 'TRUE' : 'FALSE') ;
	          } else if (typeof(field.value) === 'string') {
	            returnVal = field.value.replace(/"/g,'""');
	          } else {
	            returnVal = JSON.stringify(field.value).replace(/^"/,'').replace(/"$/,'');
	          }

	          if (field.alignment && typeof(field.alignment) === 'string' ){
	            returnVal = { text: returnVal, alignment: field.alignment };
	          }

	          return returnVal;
	        }
	      };

	      return service;

	    }
	  ]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.exporter.directive:uiGridExporter
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds exporter features to grid
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.exporter']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.gridOptions = {
	        enableGridMenu: true,
	        exporterMenuCsv: false,
	        columnDefs: [
	          {name: 'name', enableCellEdit: true},
	          {name: 'title', enableCellEdit: true}
	        ],
	        data: $scope.data
	      };
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="gridOptions" ui-grid-exporter></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridExporter', ['uiGridExporterConstants', 'uiGridExporterService', 'gridUtil', '$compile',
	    function (uiGridExporterConstants, uiGridExporterService, gridUtil, $compile) {
	      return {
	        replace: true,
	        priority: 0,
	        require: '^uiGrid',
	        scope: false,
	        link: function ($scope, $elm, $attrs, uiGridCtrl) {
	          uiGridExporterService.initializeGrid(uiGridCtrl.grid);
	          uiGridCtrl.grid.exporter.$scope = $scope;
	        }
	      };
	    }
	  ]);
	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.grouping
	   * @description
	   *
	   * # ui.grid.grouping
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
	   *
	   * This module provides grouping of rows based on the data in them, similar
	   * in concept to excel grouping.  You can group multiple columns, resulting in
	   * nested grouping.
	   *
	   * In concept this feature is similar to sorting + grid footer/aggregation, it
	   * sorts the data based on the grouped columns, then creates group rows that
	   * reflect a break in the data.  Each of those group rows can have aggregations for
	   * the data within that group.
	   *
	   * This feature leverages treeBase to provide the tree functionality itself,
	   * the key thing this feature does therefore is to set treeLevels on the rows
	   * and insert the group headers.
	   *
	   * Design information:
	   * -------------------
	   *
	   * Each column will get new menu items - group by, and aggregate by.  Group by
	   * will cause this column to be sorted (if not already), and will move this column
	   * to the front of the sorted columns (i.e. grouped columns take precedence over
	   * sorted columns).  It will respect the sort order already set if there is one,
	   * and it will allow the sorting logic to change that sort order, it just forces
	   * the column to the front of the sorting.  You can group by multiple columns, the
	   * logic will add this column to the sorting after any already grouped columns.
	   *
	   * Once a grouping is defined, grouping logic is added to the rowsProcessors.  This
	   * will process the rows, identifying a break in the data value, and inserting a grouping row.
	   * Grouping rows have specific attributes on them:
	   *
	   *  - internalRow = true: tells us that this isn't a real row, so we can ignore it
	   *    from any processing that it looking at core data rows.  This is used by the core
	   *    logic (or will be one day), as it's not grouping specific
	   *  - groupHeader = true: tells us this is a groupHeader.  This is used by the grouping logic
	   *    to know if this is a groupHeader row or not
	   *
	   * Since the logic is baked into the rowsProcessors, it should get triggered whenever
	   * row order or filtering or anything like that is changed.  In order to avoid the row instantiation
	   * time, and to preserve state across invocations, we hold a cache of the rows that we created
	   * last time, and we use them again this time if we can.
	   *
	   * By default rows are collapsed, which means all data rows have their visible property
	   * set to false, and only level 0 group rows are set to visible.
	   *
	   * <br/>
	   * <br/>
	   *
	   * <div doc-module-components="ui.grid.grouping"></div>
	   */

	  var module = angular.module('ui.grid.grouping', ['ui.grid', 'ui.grid.treeBase']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.grouping.constant:uiGridGroupingConstants
	   *
	   *  @description constants available in grouping module, this includes
	   *  all the constants declared in the treeBase module (these are manually copied
	   *  as there isn't an easy way to include constants in another constants file, and
	   *  we don't want to make users include treeBase)
	   *
	   */
	  module.constant('uiGridGroupingConstants', {
	    featureName: "grouping",
	    rowHeaderColName: 'treeBaseRowHeaderCol',
	    EXPANDED: 'expanded',
	    COLLAPSED: 'collapsed',
	    aggregation: {
	      COUNT: 'count',
	      SUM: 'sum',
	      MAX: 'max',
	      MIN: 'min',
	      AVG: 'avg'
	    }
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.grouping.service:uiGridGroupingService
	   *
	   *  @description Services for grouping features
	   */
	  module.service('uiGridGroupingService', ['$q', 'uiGridGroupingConstants', 'gridUtil', 'rowSorter', 'GridRow', 'gridClassFactory', 'i18nService', 'uiGridConstants', 'uiGridTreeBaseService',
	  function ($q, uiGridGroupingConstants, gridUtil, rowSorter, GridRow, gridClassFactory, i18nService, uiGridConstants, uiGridTreeBaseService) {

	    var service = {

	      initializeGrid: function (grid, $scope) {
	        uiGridTreeBaseService.initializeGrid( grid, $scope );

	        //add feature namespace and any properties to grid for needed
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.grouping.grid:grouping
	         *
	         *  @description Grid properties and functions added for grouping
	         */
	        grid.grouping = {};

	        /**
	         *  @ngdoc property
	         *  @propertyOf ui.grid.grouping.grid:grouping
	         *  @name groupHeaderCache
	         *
	         *  @description Cache that holds the group header rows we created last time, we'll
	         *  reuse these next time, not least because they hold our expanded states.
	         *
	         *  We need to take care with these that they don't become a memory leak, we
	         *  create a new cache each time using the values from the old cache.  This works
	         *  so long as we're creating group rows for invisible rows as well.
	         *
	         *  The cache is a nested hash, indexed on the value we grouped by.  So if we
	         *  grouped by gender then age, we'd maybe have something like:
	         *  ```
	         *    {
	         *      male: {
	         *        row: <pointer to the old row>,
	         *        children: {
	         *          22: { row: <pointer to the old row> },
	         *          31: { row: <pointer to the old row> }
	         *      },
	         *      female: {
	         *        row: <pointer to the old row>,
	         *        children: {
	         *          28: { row: <pointer to the old row> },
	         *          55: { row: <pointer to the old row> }
	         *      }
	         *    }
	         *  ```
	         *
	         *  We create new rows for any missing rows, this means that they come in as collapsed.
	         *
	         */
	        grid.grouping.groupHeaderCache = {};

	        service.defaultGridOptions(grid.options);

	        grid.registerRowsProcessor(service.groupRows, 400);

	        grid.registerColumnBuilder( service.groupingColumnBuilder);

	        grid.registerColumnsProcessor(service.groupingColumnProcessor, 400);

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.grouping.api:PublicApi
	         *
	         *  @description Public Api for grouping feature
	         */
	        var publicApi = {
	          events: {
	            grouping: {
	              /**
	               * @ngdoc event
	               * @eventOf ui.grid.grouping.api:PublicApi
	               * @name aggregationChanged
	               * @description raised whenever aggregation is changed, added or removed from a column
	               *
	               * <pre>
	               *      gridApi.grouping.on.aggregationChanged(scope,function(col){})
	               * </pre>
	               * @param {gridCol} col the column which on which aggregation changed. The aggregation
	               * type is available as `col.treeAggregation.type`
	               */
	              aggregationChanged: {},
	              /**
	               * @ngdoc event
	               * @eventOf ui.grid.grouping.api:PublicApi
	               * @name groupingChanged
	               * @description raised whenever the grouped columns changes
	               *
	               * <pre>
	               *      gridApi.grouping.on.groupingChanged(scope,function(col){})
	               * </pre>
	               * @param {gridCol} col the column which on which grouping changed. The new grouping is
	               * available as `col.grouping`
	               */
	              groupingChanged: {}
	            }
	          },
	          methods: {
	            grouping: {
	              /**
	               * @ngdoc function
	               * @name getGrouping
	               * @methodOf  ui.grid.grouping.api:PublicApi
	               * @description Get the grouping configuration for this grid,
	               * used by the saveState feature.  Adds expandedState to the information
	               * provided by the internal getGrouping, and removes any aggregations that have a source
	               * of grouping (i.e. will be automatically reapplied when we regroup the column)
	               * Returned grouping is an object
	               *   `{ grouping: groupArray, treeAggregations: aggregateArray, expandedState: hash }`
	               * where grouping contains an array of objects:
	               *   `{ field: column.field, colName: column.name, groupPriority: column.grouping.groupPriority }`
	               * and aggregations contains an array of objects:
	               *   `{ field: column.field, colName: column.name, aggregation: column.grouping.aggregation }`
	               * and expandedState is a hash of the currently expanded nodes
	               *
	               * The groupArray will be sorted by groupPriority.
	               *
	               * @param {boolean} getExpanded whether or not to return the expanded state
	               * @returns {object} grouping configuration
	               */
	              getGrouping: function ( getExpanded ) {
	                var grouping = service.getGrouping(grid);

	                grouping.grouping.forEach( function( group ) {
	                  group.colName = group.col.name;
	                  delete group.col;
	                });

	                grouping.aggregations.forEach( function( aggregation ) {
	                  aggregation.colName = aggregation.col.name;
	                  delete aggregation.col;
	                });

	                grouping.aggregations = grouping.aggregations.filter( function( aggregation ){
	                  return !aggregation.aggregation.source || aggregation.aggregation.source !== 'grouping';
	                });

	                if ( getExpanded ){
	                  grouping.rowExpandedStates = service.getRowExpandedStates( grid.grouping.groupingHeaderCache );
	                }

	                return grouping;
	              },

	              /**
	               * @ngdoc function
	               * @name setGrouping
	               * @methodOf  ui.grid.grouping.api:PublicApi
	               * @description Set the grouping configuration for this grid,
	               * used by the saveState feature, but can also be used by any
	               * user to specify a combined grouping and aggregation configuration
	               * @param {object} config the config you want to apply, in the format
	               * provided out by getGrouping
	               */
	              setGrouping: function ( config ) {
	                service.setGrouping(grid, config);
	              },

	              /**
	               * @ngdoc function
	               * @name groupColumn
	               * @methodOf  ui.grid.grouping.api:PublicApi
	               * @description Adds this column to the existing grouping, at the end of the priority order.
	               * If the column doesn't have a sort, adds one, by default ASC
	               *
	               * This column will move to the left of any non-group columns, the
	               * move is handled in a columnProcessor, so gets called as part of refresh
	               *
	               * @param {string} columnName the name of the column we want to group
	               */
	              groupColumn: function( columnName ) {
	                var column = grid.getColumn(columnName);
	                service.groupColumn(grid, column);
	              },

	              /**
	               * @ngdoc function
	               * @name ungroupColumn
	               * @methodOf  ui.grid.grouping.api:PublicApi
	               * @description Removes the groupPriority from this column.  If the
	               * column was previously aggregated the aggregation will come back.
	               * The sort will remain.
	               *
	               * This column will move to the right of any other group columns, the
	               * move is handled in a columnProcessor, so gets called as part of refresh
	               *
	               * @param {string} columnName the name of the column we want to ungroup
	               */
	              ungroupColumn: function( columnName ) {
	                var column = grid.getColumn(columnName);
	                service.ungroupColumn(grid, column);
	              },

	              /**
	               * @ngdoc function
	               * @name clearGrouping
	               * @methodOf  ui.grid.grouping.api:PublicApi
	               * @description Clear any grouped columns and any aggregations.  Doesn't remove sorting,
	               * as we don't know whether that sorting was added by grouping or was there beforehand
	               *
	               */
	              clearGrouping: function() {
	                service.clearGrouping(grid);
	              },

	              /**
	               * @ngdoc function
	               * @name aggregateColumn
	               * @methodOf  ui.grid.grouping.api:PublicApi
	               * @description Sets the aggregation type on a column, if the
	               * column is currently grouped then it removes the grouping first.
	               * If the aggregationDef is null then will result in the aggregation
	               * being removed
	               *
	               * @param {string} columnName the column we want to aggregate
	               * @param {string} or {function} aggregationDef one of the recognised types
	               * from uiGridGroupingConstants or a custom aggregation function.
	               * @param {string} aggregationLabel (optional) The label to use for this aggregation.
	               */
	              aggregateColumn: function( columnName, aggregationDef, aggregationLabel){
	                var column = grid.getColumn(columnName);
	                service.aggregateColumn( grid, column, aggregationDef, aggregationLabel);
	              }

	            }
	          }
	        };

	        grid.api.registerEventsFromObject(publicApi.events);

	        grid.api.registerMethodsFromObject(publicApi.methods);

	        grid.api.core.on.sortChanged( $scope, service.tidyPriorities);

	      },

	      defaultGridOptions: function (gridOptions) {
	        //default option to true unless it was explicitly set to false
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.grouping.api:GridOptions
	         *
	         *  @description GridOptions for grouping feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         */

	        /**
	         *  @ngdoc object
	         *  @name enableGrouping
	         *  @propertyOf  ui.grid.grouping.api:GridOptions
	         *  @description Enable row grouping for entire grid.
	         *  <br/>Defaults to true
	         */
	        gridOptions.enableGrouping = gridOptions.enableGrouping !== false;

	        /**
	         *  @ngdoc object
	         *  @name groupingShowCounts
	         *  @propertyOf  ui.grid.grouping.api:GridOptions
	         *  @description shows counts on the groupHeader rows. Not that if you are using a cellFilter or a
	         *  sortingAlgorithm which relies on a specific format or data type, showing counts may cause that
	         *  to break, since the group header rows will always be a string with groupingShowCounts enabled.
	         *  <br/>Defaults to true except on columns of type 'date'
	         */
	        gridOptions.groupingShowCounts = gridOptions.groupingShowCounts !== false;

	        /**
	         *  @ngdoc object
	         *  @name groupingNullLabel
	         *  @propertyOf  ui.grid.grouping.api:GridOptions
	         *  @description The string to use for the grouping header row label on rows which contain a null or undefined value in the grouped column.
	         *  <br/>Defaults to "Null"
	         */
	        gridOptions.groupingNullLabel = typeof(gridOptions.groupingNullLabel) === 'undefined' ? 'Null' : gridOptions.groupingNullLabel;

	        /**
	         *  @ngdoc object
	         *  @name enableGroupHeaderSelection
	         *  @propertyOf  ui.grid.grouping.api:GridOptions
	         *  @description Allows group header rows to be selected.
	         *  <br/>Defaults to false
	         */
	        gridOptions.enableGroupHeaderSelection = gridOptions.enableGroupHeaderSelection === true;
	      },


	      /**
	       * @ngdoc function
	       * @name groupingColumnBuilder
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Sets the grouping defaults based on the columnDefs
	       *
	       * @param {object} colDef columnDef we're basing on
	       * @param {GridCol} col the column we're to update
	       * @param {object} gridOptions the options we should use
	       * @returns {promise} promise for the builder - actually we do it all inline so it's immediately resolved
	       */
	      groupingColumnBuilder: function (colDef, col, gridOptions) {
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.grouping.api:ColumnDef
	         *
	         *  @description ColumnDef for grouping feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	         */

	        /**
	         *  @ngdoc object
	         *  @name enableGrouping
	         *  @propertyOf  ui.grid.grouping.api:ColumnDef
	         *  @description Enable grouping on this column
	         *  <br/>Defaults to true.
	         */
	        if (colDef.enableGrouping === false){
	          return;
	        }

	        /**
	         *  @ngdoc object
	         *  @name grouping
	         *  @propertyOf  ui.grid.grouping.api:ColumnDef
	         *  @description Set the grouping for a column.  Format is:
	         *  ```
	         *    {
	         *      groupPriority: <number, starts at 0, if less than 0 or undefined then we're aggregating in this column>
	         *    }
	         *  ```
	         *
	         *  **Note that aggregation used to be included in grouping, but is now separately set on the column via treeAggregation
	         *  setting in treeBase**
	         *
	         *  We group in the priority order given, this will also put these columns to the high order of the sort irrespective
	         *  of the sort priority given them.  If there is no sort defined then we sort ascending, if there is a sort defined then
	         *  we use that sort.
	         *
	         *  If the groupPriority is undefined or less than 0, then we expect to be aggregating, and we look at the
	         *  aggregation types to determine what sort of aggregation we can do.  Values are in the constants file, but
	         *  include SUM, COUNT, MAX, MIN
	         *
	         *  groupPriorities should generally be sequential, if they're not then the next time getGrouping is called
	         *  we'll renumber them to be sequential.
	         *  <br/>Defaults to undefined.
	         */

	        if ( typeof(col.grouping) === 'undefined' && typeof(colDef.grouping) !== 'undefined') {
	          col.grouping = angular.copy(colDef.grouping);
	          if ( typeof(col.grouping.groupPriority) !== 'undefined' && col.grouping.groupPriority > -1 ){
	            col.treeAggregationFn = uiGridTreeBaseService.nativeAggregations()[uiGridGroupingConstants.aggregation.COUNT].aggregationFn;
	            col.treeAggregationFinalizerFn = service.groupedFinalizerFn;
	          }
	        } else if (typeof(col.grouping) === 'undefined'){
	          col.grouping = {};
	        }

	        if (typeof(col.grouping) !== 'undefined' && typeof(col.grouping.groupPriority) !== 'undefined' && col.grouping.groupPriority >= 0){
	          col.suppressRemoveSort = true;
	        }

	        var groupColumn = {
	          name: 'ui.grid.grouping.group',
	          title: i18nService.get().grouping.group,
	          icon: 'ui-grid-icon-indent-right',
	          shown: function () {
	            return typeof(this.context.col.grouping) === 'undefined' ||
	                   typeof(this.context.col.grouping.groupPriority) === 'undefined' ||
	                   this.context.col.grouping.groupPriority < 0;
	          },
	          action: function () {
	            service.groupColumn( this.context.col.grid, this.context.col );
	          }
	        };

	        var ungroupColumn = {
	          name: 'ui.grid.grouping.ungroup',
	          title: i18nService.get().grouping.ungroup,
	          icon: 'ui-grid-icon-indent-left',
	          shown: function () {
	            return typeof(this.context.col.grouping) !== 'undefined' &&
	                   typeof(this.context.col.grouping.groupPriority) !== 'undefined' &&
	                   this.context.col.grouping.groupPriority >= 0;
	          },
	          action: function () {
	            service.ungroupColumn( this.context.col.grid, this.context.col );
	          }
	        };

	        var aggregateRemove = {
	          name: 'ui.grid.grouping.aggregateRemove',
	          title: i18nService.get().grouping.aggregate_remove,
	          shown: function () {
	            return typeof(this.context.col.treeAggregationFn) !== 'undefined';
	          },
	          action: function () {
	            service.aggregateColumn( this.context.col.grid, this.context.col, null);
	          }
	        };

	        // generic adder for the aggregation menus, which follow a pattern
	        var addAggregationMenu = function(type, title){
	          title = title || i18nService.get().grouping['aggregate_' + type] || type;
	          var menuItem = {
	            name: 'ui.grid.grouping.aggregate' + type,
	            title: title,
	            shown: function () {
	              return typeof(this.context.col.treeAggregation) === 'undefined' ||
	                     typeof(this.context.col.treeAggregation.type) === 'undefined' ||
	                     this.context.col.treeAggregation.type !== type;
	            },
	            action: function () {
	              service.aggregateColumn( this.context.col.grid, this.context.col, type);
	            }
	          };

	          if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.grouping.aggregate' + type)) {
	            col.menuItems.push(menuItem);
	          }
	        };

	        /**
	         *  @ngdoc object
	         *  @name groupingShowGroupingMenu
	         *  @propertyOf  ui.grid.grouping.api:ColumnDef
	         *  @description Show the grouping (group and ungroup items) menu on this column
	         *  <br/>Defaults to true.
	         */
	        if ( col.colDef.groupingShowGroupingMenu !== false ){
	          if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.grouping.group')) {
	            col.menuItems.push(groupColumn);
	          }

	          if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.grouping.ungroup')) {
	            col.menuItems.push(ungroupColumn);
	          }
	        }


	        /**
	         *  @ngdoc object
	         *  @name groupingShowAggregationMenu
	         *  @propertyOf  ui.grid.grouping.api:ColumnDef
	         *  @description Show the aggregation menu on this column
	         *  <br/>Defaults to true.
	         */
	        if ( col.colDef.groupingShowAggregationMenu !== false ){
	          angular.forEach(uiGridTreeBaseService.nativeAggregations(), function(aggregationDef, name){
	            addAggregationMenu(name);
	          });
	          angular.forEach(gridOptions.treeCustomAggregations, function(aggregationDef, name){
	            addAggregationMenu(name, aggregationDef.menuTitle);
	          });

	          if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.grouping.aggregateRemove')) {
	            col.menuItems.push(aggregateRemove);
	          }
	        }
	      },




	      /**
	       * @ngdoc function
	       * @name groupingColumnProcessor
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Moves the columns around based on which are grouped
	       *
	       * @param {array} columns the columns to consider rendering
	       * @param {array} rows the grid rows, which we don't use but are passed to us
	       * @returns {array} updated columns array
	       */
	      groupingColumnProcessor: function( columns, rows ) {
	        var grid = this;

	        columns = service.moveGroupColumns(this, columns, rows);
	        return columns;
	      },

	      /**
	       * @ngdoc function
	       * @name groupedFinalizerFn
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Used on group columns to display the rendered value and optionally
	       * display the count of rows.
	       *
	       * @param {aggregation} the aggregation entity for a grouped column
	       */
	      groupedFinalizerFn: function( aggregation ){
	        var col = this;

	        if ( typeof(aggregation.groupVal) !== 'undefined') {
	          aggregation.rendered = aggregation.groupVal;
	          if ( col.grid.options.groupingShowCounts && col.colDef.type !== 'date' ){
	            aggregation.rendered += (' (' + aggregation.value + ')');
	          }
	        } else {
	          aggregation.rendered = null;
	        }
	      },

	      /**
	       * @ngdoc function
	       * @name moveGroupColumns
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Moves the column order so that the grouped columns are lined up
	       * to the left (well, unless you're RTL, then it's the right).  By doing this in
	       * the columnsProcessor, we make it transient - when the column is ungrouped it'll
	       * go back to where it was.
	       *
	       * Does nothing if the option `moveGroupColumns` is set to false.
	       *
	       * @param {Grid} grid grid object
	       * @param {array} columns the columns that we should process/move
	       * @param {array} rows the grid rows
	       * @returns {array} updated columns
	       */
	      moveGroupColumns: function( grid, columns, rows ){
	        if ( grid.options.moveGroupColumns === false){
	          return columns;
	        }

	        columns.forEach( function(column, index){
	          // position used to make stable sort in moveGroupColumns
	          column.groupingPosition = index;
	        });

	        columns.sort(function(a, b){
	          var a_group, b_group;
	          if (a.isRowHeader){
	            a_group = a.headerPriority;
	          }
	          else if ( typeof(a.grouping) === 'undefined' || typeof(a.grouping.groupPriority) === 'undefined' || a.grouping.groupPriority < 0){
	            a_group = null;
	          } else {
	            a_group = a.grouping.groupPriority;
	          }

	          if (b.isRowHeader){
	            b_group = b.headerPriority;
	          }
	          else if ( typeof(b.grouping) === 'undefined' || typeof(b.grouping.groupPriority) === 'undefined' || b.grouping.groupPriority < 0){
	            b_group = null;
	          } else {
	            b_group = b.grouping.groupPriority;
	          }

	          // groups get sorted to the top
	          if ( a_group !== null && b_group === null) { return -1; }
	          if ( b_group !== null && a_group === null) { return 1; }
	          if ( a_group !== null && b_group !== null) {return a_group - b_group; }

	          return a.groupingPosition - b.groupingPosition;
	        });

	        columns.forEach( function(column, index) {
	          delete column.groupingPosition;
	        });

	        return columns;
	      },


	      /**
	       * @ngdoc function
	       * @name groupColumn
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Adds this column to the existing grouping, at the end of the priority order.
	       * If the column doesn't have a sort, adds one, by default ASC
	       *
	       * This column will move to the left of any non-group columns, the
	       * move is handled in a columnProcessor, so gets called as part of refresh
	       *
	       * @param {Grid} grid grid object
	       * @param {GridCol} column the column we want to group
	       */
	      groupColumn: function( grid, column){
	        if ( typeof(column.grouping) === 'undefined' ){
	          column.grouping = {};
	        }

	        // set the group priority to the next number in the hierarchy
	        var existingGrouping = service.getGrouping( grid );
	        column.grouping.groupPriority = existingGrouping.grouping.length;

	        // add sort if not present
	        if ( !column.sort ){
	          column.sort = { direction: uiGridConstants.ASC };
	        } else if ( typeof(column.sort.direction) === 'undefined' || column.sort.direction === null ){
	          column.sort.direction = uiGridConstants.ASC;
	        }

	        column.treeAggregation = { type: uiGridGroupingConstants.aggregation.COUNT, source: 'grouping' };
	        column.treeAggregationFn = uiGridTreeBaseService.nativeAggregations()[uiGridGroupingConstants.aggregation.COUNT].aggregationFn;
	        column.treeAggregationFinalizerFn = service.groupedFinalizerFn;

	        grid.api.grouping.raise.groupingChanged(column);
	        // This indirectly calls service.tidyPriorities( grid );
	        grid.api.core.raise.sortChanged(grid, grid.getColumnSorting());

	        grid.queueGridRefresh();
	      },


	       /**
	       * @ngdoc function
	       * @name ungroupColumn
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Removes the groupPriority from this column.  If the
	       * column was previously aggregated the aggregation will come back.
	       * The sort will remain.
	       *
	       * This column will move to the right of any other group columns, the
	       * move is handled in a columnProcessor, so gets called as part of refresh
	       *
	       * @param {Grid} grid grid object
	       * @param {GridCol} column the column we want to ungroup
	       */
	      ungroupColumn: function( grid, column){
	        if ( typeof(column.grouping) === 'undefined' ){
	          return;
	        }

	        delete column.grouping.groupPriority;
	        delete column.treeAggregation;
	        delete column.customTreeAggregationFinalizer;

	        service.tidyPriorities( grid );

	        grid.api.grouping.raise.groupingChanged(column);

	        grid.queueGridRefresh();
	      },

	      /**
	       * @ngdoc function
	       * @name aggregateColumn
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Sets the aggregation type on a column, if the
	       * column is currently grouped then it removes the grouping first.
	       *
	       * @param {Grid} grid grid object
	       * @param {GridCol} column the column we want to aggregate
	       * @param {string} one of the recognised types from uiGridGroupingConstants or one of the custom aggregations from gridOptions
	       */
	      aggregateColumn: function( grid, column, aggregationType){

	        if (typeof(column.grouping) !== 'undefined' && typeof(column.grouping.groupPriority) !== 'undefined' && column.grouping.groupPriority >= 0){
	          service.ungroupColumn( grid, column );
	        }

	        var aggregationDef = {};
	        if ( typeof(grid.options.treeCustomAggregations[aggregationType]) !== 'undefined' ){
	          aggregationDef = grid.options.treeCustomAggregations[aggregationType];
	        } else if ( typeof(uiGridTreeBaseService.nativeAggregations()[aggregationType]) !== 'undefined' ){
	          aggregationDef = uiGridTreeBaseService.nativeAggregations()[aggregationType];
	        }

	        column.treeAggregation = { type: aggregationType, label:  i18nService.get().aggregation[aggregationDef.label] || aggregationDef.label };
	        column.treeAggregationFn = aggregationDef.aggregationFn;
	        column.treeAggregationFinalizerFn = aggregationDef.finalizerFn;

	        grid.api.grouping.raise.aggregationChanged(column);

	        grid.queueGridRefresh();
	      },


	      /**
	       * @ngdoc function
	       * @name setGrouping
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Set the grouping based on a config object, used by the save state feature
	       * (more specifically, by the restore function in that feature )
	       *
	       * @param {Grid} grid grid object
	       * @param {object} config the config we want to set, same format as that returned by getGrouping
	       */
	      setGrouping: function ( grid, config ){
	        if ( typeof(config) === 'undefined' ){
	          return;
	        }

	        // first remove any existing grouping
	        service.clearGrouping(grid);

	        if ( config.grouping && config.grouping.length && config.grouping.length > 0 ){
	          config.grouping.forEach( function( group ) {
	            var col = grid.getColumn(group.colName);

	            if ( col ) {
	              service.groupColumn( grid, col );
	            }
	          });
	        }

	        if ( config.aggregations && config.aggregations.length ){
	          config.aggregations.forEach( function( aggregation ) {
	            var col = grid.getColumn(aggregation.colName);

	            if ( col ) {
	              service.aggregateColumn( grid, col, aggregation.aggregation.type );
	            }
	          });
	        }

	        if ( config.rowExpandedStates ){
	          service.applyRowExpandedStates( grid.grouping.groupingHeaderCache, config.rowExpandedStates );
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name clearGrouping
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Clear any grouped columns and any aggregations.  Doesn't remove sorting,
	       * as we don't know whether that sorting was added by grouping or was there beforehand
	       *
	       * @param {Grid} grid grid object
	       */
	      clearGrouping: function( grid ) {
	        var currentGrouping = service.getGrouping(grid);

	        if ( currentGrouping.grouping.length > 0 ){
	          currentGrouping.grouping.forEach( function( group ) {
	            if (!group.col){
	              // should have a group.colName if there's no col
	              group.col = grid.getColumn(group.colName);
	            }
	            service.ungroupColumn(grid, group.col);
	          });
	        }

	        if ( currentGrouping.aggregations.length > 0 ){
	          currentGrouping.aggregations.forEach( function( aggregation ){
	            if (!aggregation.col){
	              // should have a group.colName if there's no col
	              aggregation.col = grid.getColumn(aggregation.colName);
	            }
	            service.aggregateColumn(grid, aggregation.col, null);
	          });
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name tidyPriorities
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Renumbers groupPriority and sortPriority such that
	       * groupPriority is contiguous, and sortPriority either matches
	       * groupPriority (for group columns), and otherwise is contiguous and
	       * higher than groupPriority.
	       *
	       * @param {Grid} grid grid object
	       */
	      tidyPriorities: function( grid ){
	        // if we're called from sortChanged, grid is in this, not passed as param, the param can be a column or undefined
	        if ( ( typeof(grid) === 'undefined' || typeof(grid.grid) !== 'undefined' ) && typeof(this.grid) !== 'undefined' ) {
	          grid = this.grid;
	        }

	        var groupArray = [];
	        var sortArray = [];

	        grid.columns.forEach( function(column, index){
	          if ( typeof(column.grouping) !== 'undefined' && typeof(column.grouping.groupPriority) !== 'undefined' && column.grouping.groupPriority >= 0){
	            groupArray.push(column);
	          } else if ( typeof(column.sort) !== 'undefined' && typeof(column.sort.priority) !== 'undefined' && column.sort.priority >= 0){
	            sortArray.push(column);
	          }
	        });

	        groupArray.sort(function(a, b){ return a.grouping.groupPriority - b.grouping.groupPriority; });
	        groupArray.forEach( function(column, index){
	          column.grouping.groupPriority = index;
	          column.suppressRemoveSort = true;
	          if ( typeof(column.sort) === 'undefined'){
	            column.sort = {};
	          }
	          column.sort.priority = index;
	        });

	        var i = groupArray.length;
	        sortArray.sort(function(a, b){ return a.sort.priority - b.sort.priority; });
	        sortArray.forEach( function(column, index){
	          column.sort.priority = i;
	          column.suppressRemoveSort = column.colDef.suppressRemoveSort;
	          i++;
	        });
	      },


	      /**
	       * @ngdoc function
	       * @name groupRows
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description The rowProcessor that creates the groupHeaders (i.e. does
	       * the actual grouping).
	       *
	       * Assumes it is always called after the sorting processor, guaranteed by the priority setting
	       *
	       * Processes all the rows in order, inserting a groupHeader row whenever there is a change
	       * in value of a grouped row, based on the sortAlgorithm used for the column.  The group header row
	       * is looked up in the groupHeaderCache, and used from there if there is one. The entity is reset
	       * to {} if one is found.
	       *
	       * As it processes it maintains a `processingState` array. This records, for each level of grouping we're
	       * working with, the following information:
	       * ```
	       *   {
	       *     fieldName: name,
	       *     col: col,
	       *     initialised: boolean,
	       *     currentValue: value,
	       *     currentRow: gridRow,
	       *   }
	       * ```
	       * We look for changes in the currentValue at any of the levels.  Where we find a change we:
	       *
	       * - create a new groupHeader row in the array
	       *
	       * @param {array} renderableRows the rows we want to process, usually the output from the previous rowProcessor
	       * @returns {array} the updated rows, including our new group rows
	       */
	      groupRows: function( renderableRows ) {
	        if (renderableRows.length === 0){
	          return renderableRows;
	        }

	        var grid = this;
	        grid.grouping.oldGroupingHeaderCache = grid.grouping.groupingHeaderCache || {};
	        grid.grouping.groupingHeaderCache = {};

	        var processingState = service.initialiseProcessingState( grid );

	        // processes each of the fields we are grouping by, checks if the value has changed and inserts a groupHeader
	        // Broken out as shouldn't create functions in a loop.
	        var updateProcessingState = function( groupFieldState, stateIndex ) {
	          var fieldValue = grid.getCellValue(row, groupFieldState.col);

	          // look for change of value - and insert a header
	          if ( !groupFieldState.initialised || rowSorter.getSortFn(grid, groupFieldState.col, renderableRows)(fieldValue, groupFieldState.currentValue) !== 0 ){
	            service.insertGroupHeader( grid, renderableRows, i, processingState, stateIndex );
	            i++;
	          }
	        };

	        // use a for loop because it's tolerant of the array length changing whilst we go - we can
	        // manipulate the iterator when we insert groupHeader rows
	        for (var i = 0; i < renderableRows.length; i++ ){
	          var row = renderableRows[i];

	          if ( row.visible ){
	            processingState.forEach( updateProcessingState );
	          }
	        }

	        delete grid.grouping.oldGroupingHeaderCache;
	        return renderableRows;
	      },


	      /**
	       * @ngdoc function
	       * @name initialiseProcessingState
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Creates the processing state array that is used
	       * for groupRows.
	       *
	       * @param {Grid} grid grid object
	       * @returns {array} an array in the format described in the groupRows method,
	       * initialised with blank values
	       */
	      initialiseProcessingState: function( grid ){
	        var processingState = [];
	        var columnSettings = service.getGrouping( grid );

	        columnSettings.grouping.forEach( function( groupItem, index){
	          processingState.push({
	            fieldName: groupItem.field,
	            col: groupItem.col,
	            initialised: false,
	            currentValue: null,
	            currentRow: null
	          });
	        });

	        return processingState;
	      },


	      /**
	       * @ngdoc function
	       * @name getGrouping
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Get the grouping settings from the columns.  As a side effect
	       * this always renumbers the grouping starting at 0
	       * @param {Grid} grid grid object
	       * @returns {array} an array of the group fields, in order of priority
	       */
	      getGrouping: function( grid ){
	        var groupArray = [];
	        var aggregateArray = [];

	        // get all the grouping
	        grid.columns.forEach( function(column, columnIndex){
	          if ( column.grouping ){
	            if ( typeof(column.grouping.groupPriority) !== 'undefined' && column.grouping.groupPriority >= 0){
	              groupArray.push({ field: column.field, col: column, groupPriority: column.grouping.groupPriority, grouping: column.grouping });
	            }
	          }
	          if ( column.treeAggregation && column.treeAggregation.type ){
	            aggregateArray.push({ field: column.field, col: column, aggregation: column.treeAggregation });
	          }
	        });

	        // sort grouping into priority order
	        groupArray.sort( function(a, b){
	          return a.groupPriority - b.groupPriority;
	        });

	        // renumber the priority in case it was somewhat messed up, then remove the grouping reference
	        groupArray.forEach( function( group, index) {
	          group.grouping.groupPriority = index;
	          group.groupPriority = index;
	          delete group.grouping;
	        });

	        return { grouping: groupArray, aggregations: aggregateArray };
	      },


	      /**
	       * @ngdoc function
	       * @name insertGroupHeader
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Create a group header row, and link it to the various configuration
	       * items that we use.
	       *
	       * Look for the row in the oldGroupingHeaderCache, write the row into the new groupingHeaderCache.
	       *
	       * @param {Grid} grid grid object
	       * @param {array} renderableRows the rows that we are processing
	       * @param {number} rowIndex the row we were up to processing
	       * @param {array} processingState the current processing state
	       * @param {number} stateIndex the processing state item that we were on when we triggered a new group header -
	       * i.e. the column that we want to create a header for
	       */
	      insertGroupHeader: function( grid, renderableRows, rowIndex, processingState, stateIndex ) {
	        // set the value that caused the end of a group into the header row and the processing state
	        var fieldName = processingState[stateIndex].fieldName;
	        var col = processingState[stateIndex].col;

	        var newValue = grid.getCellValue(renderableRows[rowIndex], col);
	        var newDisplayValue = newValue;
	        if ( typeof(newValue) === 'undefined' || newValue === null ) {
	          newDisplayValue = grid.options.groupingNullLabel;
	        }

	        var getKeyAsValueForCacheMap = function(key) {
	          if (angular.isObject(key)) {
	              return JSON.stringify(key);
	          } else {
	              return key;
	          }
	        };

	        var cacheItem = grid.grouping.oldGroupingHeaderCache;
	        for ( var i = 0; i < stateIndex; i++ ){
	          if ( cacheItem && cacheItem[getKeyAsValueForCacheMap(processingState[i].currentValue)] ){
	            cacheItem = cacheItem[getKeyAsValueForCacheMap(processingState[i].currentValue)].children;
	          }
	        }

	        var headerRow;
	        if ( cacheItem && cacheItem[getKeyAsValueForCacheMap(newValue)]){
	          headerRow = cacheItem[getKeyAsValueForCacheMap(newValue)].row;
	          headerRow.entity = {};
	        } else {
	          headerRow = new GridRow( {}, null, grid );
	          gridClassFactory.rowTemplateAssigner.call(grid, headerRow);
	        }

	        headerRow.entity['$$' + processingState[stateIndex].col.uid] = { groupVal: newDisplayValue };
	        headerRow.treeLevel = stateIndex;
	        headerRow.groupHeader = true;
	        headerRow.internalRow = true;
	        headerRow.enableCellEdit = false;
	        headerRow.enableSelection = grid.options.enableGroupHeaderSelection;
	        processingState[stateIndex].initialised = true;
	        processingState[stateIndex].currentValue = newValue;
	        processingState[stateIndex].currentRow = headerRow;

	        // set all processing states below this one to not be initialised - change of this state
	        // means all those need to start again
	        service.finaliseProcessingState( processingState, stateIndex + 1);

	        // insert our new header row
	        renderableRows.splice(rowIndex, 0, headerRow);

	        // add our new header row to the cache
	        cacheItem = grid.grouping.groupingHeaderCache;
	        for ( i = 0; i < stateIndex; i++ ){
	          cacheItem = cacheItem[getKeyAsValueForCacheMap(processingState[i].currentValue)].children;
	        }
	        cacheItem[getKeyAsValueForCacheMap(newValue)] = { row: headerRow, children: {} };
	      },


	      /**
	       * @ngdoc function
	       * @name finaliseProcessingState
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Set all processing states lower than the one that had a break in value to
	       * no longer be initialised.  Render the counts into the entity ready for display.
	       *
	       * @param {Grid} grid grid object
	       * @param {array} processingState the current processing state
	       * @param {number} stateIndex the processing state item that we were on when we triggered a new group header, all
	       * processing states after this need to be finalised
	       */
	      finaliseProcessingState: function( processingState, stateIndex ){
	        for ( var i = stateIndex; i < processingState.length; i++){
	          processingState[i].initialised = false;
	          processingState[i].currentRow = null;
	          processingState[i].currentValue = null;
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name getRowExpandedStates
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Extract the groupHeaderCache hash, pulling out only the states.
	       *
	       * The example below shows a grid that is grouped by gender then age
	       *
	       * <pre>
	       *   {
	       *     male: {
	       *       state: 'expanded',
	       *       children: {
	       *         22: { state: 'expanded' },
	       *         30: { state: 'collapsed' }
	       *       }
	       *     },
	       *     female: {
	       *       state: 'expanded',
	       *       children: {
	       *         28: { state: 'expanded' },
	       *         55: { state: 'collapsed' }
	       *       }
	       *     }
	       *   }
	       * </pre>
	       *
	       * @param {Grid} grid grid object
	       * @returns {hash} the expanded states as a hash
	       */
	      getRowExpandedStates: function(treeChildren){
	        if ( typeof(treeChildren) === 'undefined' ){
	          return {};
	        }

	        var newChildren = {};

	        angular.forEach( treeChildren, function( value, key ){
	          newChildren[key] = { state: value.row.treeNode.state };
	          if ( value.children ){
	            newChildren[key].children = service.getRowExpandedStates( value.children );
	          } else {
	            newChildren[key].children = {};
	          }
	        });

	        return newChildren;
	      },


	      /**
	       * @ngdoc function
	       * @name applyRowExpandedStates
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Take a hash in the format as created by getRowExpandedStates,
	       * and apply it to the grid.grouping.groupHeaderCache.
	       *
	       * Takes a treeSubset, and applies to a treeSubset - so can be called
	       * recursively.
	       *
	       * @param {object} currentNode can be grid.grouping.groupHeaderCache, or any of
	       * the children of that hash
	       * @returns {hash} expandedStates can be the full expanded states, or children
	       * of that expanded states (which hopefully matches the subset of the groupHeaderCache)
	       */
	      applyRowExpandedStates: function( currentNode, expandedStates ){
	        if ( typeof(expandedStates) === 'undefined' ){
	          return;
	        }

	        angular.forEach(expandedStates, function( value, key ) {
	          if ( currentNode[key] ){
	            currentNode[key].row.treeNode.state = value.state;

	            if (value.children && currentNode[key].children){
	              service.applyRowExpandedStates( currentNode[key].children, value.children );
	            }
	          }
	        });
	      }


	    };

	    return service;

	  }]);


	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.grouping.directive:uiGridGrouping
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds grouping features to grid
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.grouping']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name', enableCellEdit: true},
	        {name: 'title', enableCellEdit: true}
	      ];

	      $scope.gridOptions = { columnDefs: $scope.columnDefs, data: $scope.data };
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="gridOptions" ui-grid-grouping></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridGrouping', ['uiGridGroupingConstants', 'uiGridGroupingService', '$templateCache',
	  function (uiGridGroupingConstants, uiGridGroupingService, $templateCache) {
	    return {
	      replace: true,
	      priority: 0,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            if (uiGridCtrl.grid.options.enableGrouping !== false){
	              uiGridGroupingService.initializeGrid(uiGridCtrl.grid, $scope);
	            }
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          }
	        };
	      }
	    };
	  }]);

	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.importer
	   * @description
	   *
	   * # ui.grid.importer
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module provides the ability to import data into the grid. It
	   * uses the column defs to work out which data belongs in which column,
	   * and creates entities from a configured class (typically a $resource).
	   *
	   * If the rowEdit feature is enabled, it also calls save on those newly
	   * created objects, and then displays any errors in the imported data.
	   *
	   * Currently the importer imports only CSV and json files, although provision has been
	   * made to process other file formats, and these can be added over time.
	   *
	   * For json files, the properties within each object in the json must match the column names
	   * (to put it another way, the importer doesn't process the json, it just copies the objects
	   * within the json into a new instance of the specified object type)
	   *
	   * For CSV import, the default column identification relies on each column in the
	   * header row matching a column.name or column.displayName. Optionally, a column identification
	   * callback can be used.  This allows matching using other attributes, which is particularly
	   * useful if your application has internationalised column headings (i.e. the headings that
	   * the user sees don't match the column names).
	   *
	   * The importer makes use of the grid menu as the UI for requesting an
	   * import.
	   *
	   * <div ui-grid-importer></div>
	   */

	  var module = angular.module('ui.grid.importer', ['ui.grid']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.importer.constant:uiGridImporterConstants
	   *
	   *  @description constants available in importer module
	   */

	  module.constant('uiGridImporterConstants', {
	    featureName: 'importer'
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.importer.service:uiGridImporterService
	   *
	   *  @description Services for importer feature
	   */
	  module.service('uiGridImporterService', ['$q', 'uiGridConstants', 'uiGridImporterConstants', 'gridUtil', '$compile', '$interval', 'i18nService', '$window',
	    function ($q, uiGridConstants, uiGridImporterConstants, gridUtil, $compile, $interval, i18nService, $window) {

	      var service = {

	        initializeGrid: function ($scope, grid) {

	          //add feature namespace and any properties to grid for needed state
	          grid.importer = {
	            $scope: $scope
	          };

	          this.defaultGridOptions(grid.options);

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.importer.api:PublicApi
	           *
	           *  @description Public Api for importer feature
	           */
	          var publicApi = {
	            events: {
	              importer: {
	              }
	            },
	            methods: {
	              importer: {
	                /**
	                 * @ngdoc function
	                 * @name importFile
	                 * @methodOf  ui.grid.importer.api:PublicApi
	                 * @description Imports a file into the grid using the file object
	                 * provided.  Bypasses the grid menu
	                 * @param {File} fileObject the file we want to import, as a javascript
	                 * File object
	                 */
	                importFile: function ( fileObject ) {
	                  service.importThisFile( grid, fileObject );
	                }
	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);

	          grid.api.registerMethodsFromObject(publicApi.methods);

	          if ( grid.options.enableImporter && grid.options.importerShowMenu ){
	            if ( grid.api.core.addToGridMenu ){
	              service.addToMenu( grid );
	            } else {
	              // order of registration is not guaranteed, register in a little while
	              $interval( function() {
	                if (grid.api.core.addToGridMenu){
	                  service.addToMenu( grid );
	                }
	              }, 100, 1);
	            }
	          }
	        },


	        defaultGridOptions: function (gridOptions) {
	          //default option to true unless it was explicitly set to false
	          /**
	           * @ngdoc object
	           * @name ui.grid.importer.api:GridOptions
	           *
	           * @description GridOptions for importer feature, these are available to be
	           * set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	          /**
	           * @ngdoc property
	           * @propertyOf ui.grid.importer.api:GridOptions
	           * @name enableImporter
	           * @description Whether or not importer is enabled.  Automatically set
	           * to false if the user's browser does not support the required fileApi.
	           * Otherwise defaults to true.
	           *
	           */
	          if (gridOptions.enableImporter  || gridOptions.enableImporter === undefined) {
	            if ( !($window.hasOwnProperty('File') && $window.hasOwnProperty('FileReader') && $window.hasOwnProperty('FileList') && $window.hasOwnProperty('Blob')) ) {
	              gridUtil.logError('The File APIs are not fully supported in this browser, grid importer cannot be used.');
	              gridOptions.enableImporter = false;
	            } else {
	              gridOptions.enableImporter = true;
	            }
	          } else {
	            gridOptions.enableImporter = false;
	          }

	          /**
	           * @ngdoc method
	           * @name importerProcessHeaders
	           * @methodOf ui.grid.importer.api:GridOptions
	           * @description A callback function that will process headers using custom
	           * logic.  Set this callback function if the headers that your user will provide in their
	           * import file don't necessarily match the grid header or field names.  This might commonly
	           * occur where your application is internationalised, and therefore the field names
	           * that the user recognises are in a different language than the field names that
	           * ui-grid knows about.
	           *
	           * Defaults to the internal `processHeaders` method, which seeks to match using both
	           * displayName and column.name.  Any non-matching columns are discarded.
	           *
	           * Your callback routine should respond by processing the header array, and returning an array
	           * of matching column names.  A null value in any given position means "don't import this column"
	           *
	           * <pre>
	           *      gridOptions.importerProcessHeaders: function( headerArray ) {
	           *        var myHeaderColumns = [];
	           *        var thisCol;
	           *        headerArray.forEach( function( value, index ) {
	           *          thisCol = mySpecialLookupFunction( value );
	           *          myHeaderColumns.push( thisCol.name );
	           *        });
	           *
	           *        return myHeaderCols;
	           *      })
	           * </pre>
	           * @param {Grid} grid the grid we're importing into
	           * @param {array} headerArray an array of the text from the first row of the csv file,
	           * which you need to match to column.names
	           * @returns {array} array of matching column names, in the same order as the headerArray
	           *
	           */
	          gridOptions.importerProcessHeaders = gridOptions.importerProcessHeaders || service.processHeaders;

	          /**
	           * @ngdoc method
	           * @name importerHeaderFilter
	           * @methodOf ui.grid.importer.api:GridOptions
	           * @description A callback function that will filter (usually translate) a single
	           * header.  Used when you want to match the passed in column names to the column
	           * displayName after the header filter.
	           *
	           * Your callback routine needs to return the filtered header value.
	           * <pre>
	           *      gridOptions.importerHeaderFilter: function( displayName ) {
	           *        return $translate.instant( displayName );
	           *      })
	           * </pre>
	           *
	           * or:
	           * <pre>
	           *      gridOptions.importerHeaderFilter: $translate.instant
	           * </pre>
	           * @param {string} displayName the displayName that we'd like to translate
	           * @returns {string} the translated name
	           *
	           */
	          gridOptions.importerHeaderFilter = gridOptions.importerHeaderFilter || function( displayName ) { return displayName; };

	          /**
	           * @ngdoc method
	           * @name importerErrorCallback
	           * @methodOf ui.grid.importer.api:GridOptions
	           * @description A callback function that provides custom error handling, rather
	           * than the standard grid behaviour of an alert box and a console message.  You
	           * might use this to internationalise the console log messages, or to write to a
	           * custom logging routine that returned errors to the server.
	           *
	           * <pre>
	           *      gridOptions.importerErrorCallback: function( grid, errorKey, consoleMessage, context ) {
	           *        myUserDisplayRoutine( errorKey );
	           *        myLoggingRoutine( consoleMessage, context );
	           *      })
	           * </pre>
	           * @param {Grid} grid the grid we're importing into, may be useful if you're positioning messages
	           * in some way
	           * @param {string} errorKey one of the i18n keys the importer can return - importer.noHeaders,
	           * importer.noObjects, importer.invalidCsv, importer.invalidJson, importer.jsonNotArray
	           * @param {string} consoleMessage the English console message that importer would have written
	           * @param {object} context the context data that importer would have appended to that console message,
	           * often the file content itself or the element that is in error
	           *
	           */
	          if ( !gridOptions.importerErrorCallback ||  typeof(gridOptions.importerErrorCallback) !== 'function' ){
	            delete gridOptions.importerErrorCallback;
	          }

	          /**
	           * @ngdoc method
	           * @name importerDataAddCallback
	           * @methodOf ui.grid.importer.api:GridOptions
	           * @description A mandatory callback function that adds data to the source data array.  The grid
	           * generally doesn't add rows to the source data array, it is tidier to handle this through a user
	           * callback.
	           *
	           * <pre>
	           *      gridOptions.importerDataAddCallback: function( grid, newObjects ) {
	           *        $scope.myData = $scope.myData.concat( newObjects );
	           *      })
	           * </pre>
	           * @param {Grid} grid the grid we're importing into, may be useful in some way
	           * @param {array} newObjects an array of new objects that you should add to your data
	           *
	           */
	          if ( gridOptions.enableImporter === true && !gridOptions.importerDataAddCallback ) {
	            gridUtil.logError("You have not set an importerDataAddCallback, importer is disabled");
	            gridOptions.enableImporter = false;
	          }

	          /**
	           * @ngdoc object
	           * @name importerNewObject
	           * @propertyOf  ui.grid.importer.api:GridOptions
	           * @description An object on which we call `new` to create each new row before inserting it into
	           * the data array.  Typically this would be a $resource entity, which means that if you're using
	           * the rowEdit feature, you can directly call save on this entity when the save event is triggered.
	           *
	           * Defaults to a vanilla javascript object
	           *
	           * @example
	           * <pre>
	           *   gridOptions.importerNewObject = MyRes;
	           * </pre>
	           *
	           */

	          /**
	           * @ngdoc property
	           * @propertyOf ui.grid.importer.api:GridOptions
	           * @name importerShowMenu
	           * @description Whether or not to show an item in the grid menu.  Defaults to true.
	           *
	           */
	          gridOptions.importerShowMenu = gridOptions.importerShowMenu !== false;

	          /**
	           * @ngdoc method
	           * @methodOf ui.grid.importer.api:GridOptions
	           * @name importerObjectCallback
	           * @description A callback that massages the data for each object.  For example,
	           * you might have data stored as a code value, but display the decode.  This callback
	           * can be used to change the decoded value back into a code.  Defaults to doing nothing.
	           * @param {Grid} grid in case you need it
	           * @param {object} newObject the new object as importer has created it, modify it
	           * then return the modified version
	           * @returns {object} the modified object
	           * @example
	           * <pre>
	           *   gridOptions.importerObjectCallback = function ( grid, newObject ) {
	           *     switch newObject.status {
	           *       case 'Active':
	           *         newObject.status = 1;
	           *         break;
	           *       case 'Inactive':
	           *         newObject.status = 2;
	           *         break;
	           *     }
	           *     return newObject;
	           *   };
	           * </pre>
	           */
	          gridOptions.importerObjectCallback = gridOptions.importerObjectCallback || function( grid, newObject ) { return newObject; };
	        },


	        /**
	         * @ngdoc function
	         * @name addToMenu
	         * @methodOf  ui.grid.importer.service:uiGridImporterService
	         * @description Adds import menu item to the grid menu,
	         * allowing the user to request import of a file
	         * @param {Grid} grid the grid into which data should be imported
	         */
	        addToMenu: function ( grid ) {
	          grid.api.core.addToGridMenu( grid, [
	            {
	              title: i18nService.getSafeText('gridMenu.importerTitle'),
	              order: 150
	            },
	            {
	              templateUrl: 'ui-grid/importerMenuItemContainer',
	              action: function ($event) {
	                this.grid.api.importer.importAFile( grid );
	              },
	              order: 151
	            }
	          ]);
	        },


	        /**
	         * @ngdoc function
	         * @name importThisFile
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Imports the provided file into the grid using the file object
	         * provided.  Bypasses the grid menu
	         * @param {Grid} grid the grid we're importing into
	         * @param {File} fileObject the file we want to import, as returned from the File
	         * javascript object
	         */
	        importThisFile: function ( grid, fileObject ) {
	          if (!fileObject){
	            gridUtil.logError( 'No file object provided to importThisFile, should be impossible, aborting');
	            return;
	          }

	          var reader = new FileReader();

	          switch ( fileObject.type ){
	            case 'application/json':
	              reader.onload = service.importJsonClosure( grid );
	              break;
	            default:
	              reader.onload = service.importCsvClosure( grid );
	              break;
	          }

	          reader.readAsText( fileObject );
	        },


	        /**
	         * @ngdoc function
	         * @name importJson
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Creates a function that imports a json file into the grid.
	         * The json data is imported into new objects of type `gridOptions.importerNewObject`,
	         * and if the rowEdit feature is enabled the rows are marked as dirty
	         * @param {Grid} grid the grid we want to import into
	         * @param {FileObject} importFile the file that we want to import, as
	         * a FileObject
	         */
	        importJsonClosure: function( grid ) {
	          return function( importFile ){
	            var newObjects = [];
	            var newObject;

	            var importArray = service.parseJson( grid, importFile );
	            if (importArray === null){
	              return;
	            }
	            importArray.forEach(  function( value, index ) {
	              newObject = service.newObject( grid );
	              angular.extend( newObject, value );
	              newObject = grid.options.importerObjectCallback( grid, newObject );
	              newObjects.push( newObject );
	            });

	            service.addObjects( grid, newObjects );

	          };
	        },


	        /**
	         * @ngdoc function
	         * @name parseJson
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Parses a json file, returns the parsed data.
	         * Displays an error if file doesn't parse
	         * @param {Grid} grid the grid that we want to import into
	         * @param {FileObject} importFile the file that we want to import, as
	         * a FileObject
	         * @returns {array} array of objects from the imported json
	         */
	        parseJson: function( grid, importFile ){
	          var loadedObjects;
	          try {
	            loadedObjects = JSON.parse( importFile.target.result );
	          } catch (e) {
	            service.alertError( grid, 'importer.invalidJson', 'File could not be processed, is it valid json? Content was: ', importFile.target.result );
	            return;
	          }

	          if ( !Array.isArray( loadedObjects ) ){
	            service.alertError( grid, 'importer.jsonNotarray', 'Import failed, file is not an array, file was: ', importFile.target.result );
	            return [];
	          } else {
	            return loadedObjects;
	          }
	        },



	        /**
	         * @ngdoc function
	         * @name importCsvClosure
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Creates a function that imports a csv file into the grid
	         * (allowing it to be used in the reader.onload event)
	         * @param {Grid} grid the grid that we want to import into
	         * @param {FileObject} importFile the file that we want to import, as
	         * a file object
	         */
	        importCsvClosure: function( grid ) {
	          return function( importFile ){
	            var importArray = service.parseCsv( importFile );
	            if ( !importArray || importArray.length < 1 ){
	              service.alertError( grid, 'importer.invalidCsv', 'File could not be processed, is it valid csv? Content was: ', importFile.target.result );
	              return;
	            }

	            var newObjects = service.createCsvObjects( grid, importArray );
	            if ( !newObjects || newObjects.length === 0 ){
	              service.alertError( grid, 'importer.noObjects', 'Objects were not able to be derived, content was: ', importFile.target.result );
	              return;
	            }

	            service.addObjects( grid, newObjects );
	          };
	        },


	        /**
	         * @ngdoc function
	         * @name parseCsv
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Parses a csv file into an array of arrays, with the first
	         * array being the headers, and the remaining arrays being the data.
	         * The logic for this comes from https://github.com/thetalecrafter/excel.js/blob/master/src/csv.js,
	         * which is noted as being under the MIT license.  The code is modified to pass the jscs yoda condition
	         * checker
	         * @param {FileObject} importFile the file that we want to import, as a
	         * file object
	         */
	        parseCsv: function( importFile ) {
	          var csv = importFile.target.result;

	          // use the CSV-JS library to parse
	          return CSV.parse(csv);
	        },


	        /**
	         * @ngdoc function
	         * @name createCsvObjects
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Converts an array of arrays (representing the csv file)
	         * into a set of objects.  Uses the provided `gridOptions.importerNewObject`
	         * to create the objects, and maps the header row into the individual columns
	         * using either `gridOptions.importerProcessHeaders`, or by using a native method
	         * of matching to either the displayName, column name or column field of
	         * the columns in the column defs.  The resulting objects will have attributes
	         * that are named based on the column.field or column.name, in that order.
	         * @param {Grid} grid the grid that we want to import into
	         * @param {Array} importArray the data that we want to import, as an array
	         */
	        createCsvObjects: function( grid, importArray ){
	          // pull off header row and turn into headers
	          var headerMapping = grid.options.importerProcessHeaders( grid, importArray.shift() );
	          if ( !headerMapping || headerMapping.length === 0 ){
	            service.alertError( grid, 'importer.noHeaders', 'Column names could not be derived, content was: ', importArray );
	            return [];
	          }

	          var newObjects = [];
	          var newObject;
	          importArray.forEach( function( row, index ) {
	            newObject = service.newObject( grid );
	            if ( row !== null ){
	              row.forEach( function( field, index ){
	                if ( headerMapping[index] !== null ){
	                  newObject[ headerMapping[index] ] = field;
	                }
	              });
	            }
	            newObject = grid.options.importerObjectCallback( grid, newObject );
	            newObjects.push( newObject );
	          });

	          return newObjects;
	        },


	        /**
	         * @ngdoc function
	         * @name processHeaders
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Determines the columns that the header row from
	         * a csv (or other) file represents.
	         * @param {Grid} grid the grid we're importing into
	         * @param {array} headerRow the header row that we wish to match against
	         * the column definitions
	         * @returns {array} an array of the attribute names that should be used
	         * for that column, based on matching the headers or creating the headers
	         *
	         */
	        processHeaders: function( grid, headerRow ) {
	          var headers = [];
	          if ( !grid.options.columnDefs || grid.options.columnDefs.length === 0 ){
	            // we are going to create new columnDefs for all these columns, so just remove
	            // spaces from the names to create fields
	            headerRow.forEach( function( value, index ) {
	              headers.push( value.replace( /[^0-9a-zA-Z\-_]/g, '_' ) );
	            });
	            return headers;
	          } else {
	            var lookupHash = service.flattenColumnDefs( grid, grid.options.columnDefs );
	            headerRow.forEach(  function( value, index ) {
	              if ( lookupHash[value] ) {
	                headers.push( lookupHash[value] );
	              } else if ( lookupHash[ value.toLowerCase() ] ) {
	                headers.push( lookupHash[ value.toLowerCase() ] );
	              } else {
	                headers.push( null );
	              }
	            });
	            return headers;
	          }
	        },


	        /**
	         * @name flattenColumnDefs
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Runs through the column defs and creates a hash of
	         * the displayName, name and field, and of each of those values forced to lower case,
	         * with each pointing to the field or name
	         * (whichever is present).  Used to lookup column headers and decide what
	         * attribute name to give to the resulting field.
	         * @param {Grid} grid the grid we're importing into
	         * @param {array} columnDefs the columnDefs that we should flatten
	         * @returns {hash} the flattened version of the column def information, allowing
	         * us to look up a value by `flattenedHash[ headerValue ]`
	         */
	        flattenColumnDefs: function( grid, columnDefs ){
	          var flattenedHash = {};
	          columnDefs.forEach(  function( columnDef, index) {
	            if ( columnDef.name ){
	              flattenedHash[ columnDef.name ] = columnDef.field || columnDef.name;
	              flattenedHash[ columnDef.name.toLowerCase() ] = columnDef.field || columnDef.name;
	            }

	            if ( columnDef.field ){
	              flattenedHash[ columnDef.field ] = columnDef.field || columnDef.name;
	              flattenedHash[ columnDef.field.toLowerCase() ] = columnDef.field || columnDef.name;
	            }

	            if ( columnDef.displayName ){
	              flattenedHash[ columnDef.displayName ] = columnDef.field || columnDef.name;
	              flattenedHash[ columnDef.displayName.toLowerCase() ] = columnDef.field || columnDef.name;
	            }

	            if ( columnDef.displayName && grid.options.importerHeaderFilter ){
	              flattenedHash[ grid.options.importerHeaderFilter(columnDef.displayName) ] = columnDef.field || columnDef.name;
	              flattenedHash[ grid.options.importerHeaderFilter(columnDef.displayName).toLowerCase() ] = columnDef.field || columnDef.name;
	            }
	          });

	          return flattenedHash;
	        },


	        /**
	         * @ngdoc function
	         * @name addObjects
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Inserts our new objects into the grid data, and
	         * sets the rows to dirty if the rowEdit feature is being used
	         *
	         * Does this by registering a watch on dataChanges, which essentially
	         * is waiting on the result of the grid data watch, and downstream processing.
	         *
	         * When the callback is called, it deregisters itself - we don't want to run
	         * again next time data is added.
	         *
	         * If we never get called, we deregister on destroy.
	         *
	         * @param {Grid} grid the grid we're importing into
	         * @param {array} newObjects the objects we want to insert into the grid data
	         * @returns {object} the new object
	         */
	        addObjects: function( grid, newObjects, $scope ){
	          if ( grid.api.rowEdit ){
	            var dataChangeDereg = grid.registerDataChangeCallback( function() {
	              grid.api.rowEdit.setRowsDirty( newObjects );
	              dataChangeDereg();
	            }, [uiGridConstants.dataChange.ROW] );

	            grid.importer.$scope.$on( '$destroy', dataChangeDereg );
	          }

	          grid.importer.$scope.$apply( grid.options.importerDataAddCallback( grid, newObjects ) );

	        },


	        /**
	         * @ngdoc function
	         * @name newObject
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Makes a new object based on `gridOptions.importerNewObject`,
	         * or based on an empty object if not present
	         * @param {Grid} grid the grid we're importing into
	         * @returns {object} the new object
	         */
	        newObject: function( grid ){
	          if ( typeof(grid.options) !== "undefined" && typeof(grid.options.importerNewObject) !== "undefined" ){
	            return new grid.options.importerNewObject();
	          } else {
	            return {};
	          }
	        },


	        /**
	         * @ngdoc function
	         * @name alertError
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Provides an internationalised user alert for the failure,
	         * and logs a console message including diagnostic content.
	         * Optionally, if the the `gridOptions.importerErrorCallback` routine
	         * is defined, then calls that instead, allowing user specified error routines
	         * @param {Grid} grid the grid we're importing into
	         * @param {array} headerRow the header row that we wish to match against
	         * the column definitions
	         */
	        alertError: function( grid, alertI18nToken, consoleMessage, context ){
	          if ( grid.options.importerErrorCallback ){
	            grid.options.importerErrorCallback( grid, alertI18nToken, consoleMessage, context );
	          } else {
	            $window.alert(i18nService.getSafeText( alertI18nToken ));
	            gridUtil.logError(consoleMessage + context );
	          }
	        }
	      };

	      return service;

	    }
	  ]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.importer.directive:uiGridImporter
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds importer features to grid
	   *
	   */
	  module.directive('uiGridImporter', ['uiGridImporterConstants', 'uiGridImporterService', 'gridUtil', '$compile',
	    function (uiGridImporterConstants, uiGridImporterService, gridUtil, $compile) {
	      return {
	        replace: true,
	        priority: 0,
	        require: '^uiGrid',
	        scope: false,
	        link: function ($scope, $elm, $attrs, uiGridCtrl) {
	          uiGridImporterService.initializeGrid($scope, uiGridCtrl.grid);
	        }
	      };
	    }
	  ]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.importer.directive:uiGridImporterMenuItem
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Handles the processing from the importer menu item - once a file is
	   *  selected
	   *
	   */
	  module.directive('uiGridImporterMenuItem', ['uiGridImporterConstants', 'uiGridImporterService', 'gridUtil', '$compile',
	    function (uiGridImporterConstants, uiGridImporterService, gridUtil, $compile) {
	      return {
	        replace: true,
	        priority: 0,
	        require: '^uiGrid',
	        scope: false,
	        templateUrl: 'ui-grid/importerMenuItem',
	        link: function ($scope, $elm, $attrs, uiGridCtrl) {
	          var handleFileSelect = function( event ){
	            var target = event.srcElement || event.target;

	            if (target && target.files && target.files.length === 1) {
	              var fileObject = target.files[0];
	              uiGridImporterService.importThisFile( grid, fileObject );
	              target.form.reset();
	            }
	          };

	          var fileChooser = $elm[0].querySelectorAll('.ui-grid-importer-file-chooser');
	          var grid = uiGridCtrl.grid;

	          if ( fileChooser.length !== 1 ){
	            gridUtil.logError('Found > 1 or < 1 file choosers within the menu item, error, cannot continue');
	          } else {
	            fileChooser[0].addEventListener('change', handleFileSelect, false);  // TODO: why the false on the end?  Google
	          }
	        }
	      };
	    }
	  ]);
	})();

	(function() {
	  'use strict';
	  /**
	   *  @ngdoc overview
	   *  @name ui.grid.infiniteScroll
	   *
	   *  @description
	   *
	   * #ui.grid.infiniteScroll
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
	   *
	   * This module provides infinite scroll functionality to ui-grid
	   *
	   */
	  var module = angular.module('ui.grid.infiniteScroll', ['ui.grid']);
	  /**
	   *  @ngdoc service
	   *  @name ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	   *
	   *  @description Service for infinite scroll features
	   */
	  module.service('uiGridInfiniteScrollService', ['gridUtil', '$compile', '$timeout', 'uiGridConstants', 'ScrollEvent', '$q', function (gridUtil, $compile, $timeout, uiGridConstants, ScrollEvent, $q) {

	    var service = {

	      /**
	       * @ngdoc function
	       * @name initializeGrid
	       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	       * @description This method register events and methods into grid public API
	       */

	      initializeGrid: function(grid, $scope) {
	        service.defaultGridOptions(grid.options);

	        if (!grid.options.enableInfiniteScroll){
	          return;
	        }

	        grid.infiniteScroll = { dataLoading: false };
	        service.setScrollDirections( grid, grid.options.infiniteScrollUp, grid.options.infiniteScrollDown );
	          grid.api.core.on.scrollEnd($scope, service.handleScroll);

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.infiniteScroll.api:PublicAPI
	         *
	         *  @description Public API for infinite scroll feature
	         */
	        var publicApi = {
	          events: {
	            infiniteScroll: {

	              /**
	               * @ngdoc event
	               * @name needLoadMoreData
	               * @eventOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description This event fires when scroll reaches bottom percentage of grid
	               * and needs to load data
	               */

	              needLoadMoreData: function ($scope, fn) {
	              },

	              /**
	               * @ngdoc event
	               * @name needLoadMoreDataTop
	               * @eventOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description This event fires when scroll reaches top percentage of grid
	               * and needs to load data
	               */

	              needLoadMoreDataTop: function ($scope, fn) {
	              }
	            }
	          },
	          methods: {
	            infiniteScroll: {

	              /**
	               * @ngdoc function
	               * @name dataLoaded
	               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description Call this function when you have loaded the additional data
	               * requested.  You should set scrollUp and scrollDown to indicate
	               * whether there are still more pages in each direction.
	               *
	               * If you call dataLoaded without first calling `saveScrollPercentage` then we will
	               * scroll the user to the start of the newly loaded data, which usually gives a smooth scroll
	               * experience, but can give a jumpy experience with large `infiniteScrollRowsFromEnd` values, and
	               * on variable speed internet connections.  Using `saveScrollPercentage` as demonstrated in the tutorial
	               * should give a smoother scrolling experience for users.
	               *
	               * See infinite_scroll tutorial for example of usage
	               * @param {boolean} scrollUp if set to false flags that there are no more pages upwards, so don't fire
	               * any more infinite scroll events upward
	               * @param {boolean} scrollDown if set to false flags that there are no more pages downwards, so don't
	               * fire any more infinite scroll events downward
	               * @returns {promise} a promise that is resolved when the grid scrolling is fully adjusted.  If you're
	               * planning to remove pages, you should wait on this promise first, or you'll break the scroll positioning
	               */
	              dataLoaded: function( scrollUp, scrollDown ) {
	                service.setScrollDirections(grid, scrollUp, scrollDown);

	                var promise = service.adjustScroll(grid).then(function() {
	                  grid.infiniteScroll.dataLoading = false;
	                });

	                return promise;
	              },

	              /**
	               * @ngdoc function
	               * @name resetScroll
	               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description Call this function when you have taken some action that makes the current
	               * scroll position invalid.  For example, if you're using external sorting and you've resorted
	               * then you might reset the scroll, or if you've otherwise substantially changed the data, perhaps
	               * you've reused an existing grid for a new data set
	               *
	               * You must tell us whether there is data upwards or downwards after the reset
	               *
	               * @param {boolean} scrollUp flag that there are pages upwards, fire
	               * infinite scroll events upward
	               * @param {boolean} scrollDown flag that there are pages downwards, so
	               * fire infinite scroll events downward
	               * @returns {promise} promise that is resolved when the scroll reset is complete
	               */
	              resetScroll: function( scrollUp, scrollDown ) {
	                service.setScrollDirections( grid, scrollUp, scrollDown);

	                return service.adjustInfiniteScrollPosition(grid, 0);
	              },


	              /**
	               * @ngdoc function
	               * @name saveScrollPercentage
	               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description Saves the scroll percentage and number of visible rows before you adjust the data,
	               * used if you're subsequently going to call `dataRemovedTop` or `dataRemovedBottom`
	               */
	              saveScrollPercentage: function() {
	                grid.infiniteScroll.prevScrollTop = grid.renderContainers.body.prevScrollTop;
	                grid.infiniteScroll.previousVisibleRows = grid.getVisibleRowCount();
	              },


	              /**
	               * @ngdoc function
	               * @name dataRemovedTop
	               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description Adjusts the scroll position after you've removed data at the top
	               * @param {boolean} scrollUp flag that there are pages upwards, fire
	               * infinite scroll events upward
	               * @param {boolean} scrollDown flag that there are pages downwards, so
	               * fire infinite scroll events downward
	               */
	              dataRemovedTop: function( scrollUp, scrollDown ) {
	                service.dataRemovedTop( grid, scrollUp, scrollDown );
	              },

	              /**
	               * @ngdoc function
	               * @name dataRemovedBottom
	               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description Adjusts the scroll position after you've removed data at the bottom
	               * @param {boolean} scrollUp flag that there are pages upwards, fire
	               * infinite scroll events upward
	               * @param {boolean} scrollDown flag that there are pages downwards, so
	               * fire infinite scroll events downward
	               */
	              dataRemovedBottom: function( scrollUp, scrollDown ) {
	                service.dataRemovedBottom( grid, scrollUp, scrollDown );
	              },

	              /**
	               * @ngdoc function
	               * @name setScrollDirections
	               * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	               * @description Sets the scrollUp and scrollDown flags, handling nulls and undefined,
	               * and also sets the grid.suppressParentScroll
	               * @param {boolean} scrollUp whether there are pages available up - defaults to false
	               * @param {boolean} scrollDown whether there are pages available down - defaults to true
	               */
	              setScrollDirections:  function ( scrollUp, scrollDown ) {
	                service.setScrollDirections( grid, scrollUp, scrollDown );
	              }

	            }
	          }
	        };
	        grid.api.registerEventsFromObject(publicApi.events);
	        grid.api.registerMethodsFromObject(publicApi.methods);
	      },


	      defaultGridOptions: function (gridOptions) {
	        //default option to true unless it was explicitly set to false
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.infiniteScroll.api:GridOptions
	         *
	         *  @description GridOptions for infinite scroll feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         */

	        /**
	         *  @ngdoc object
	         *  @name enableInfiniteScroll
	         *  @propertyOf  ui.grid.infiniteScroll.api:GridOptions
	         *  @description Enable infinite scrolling for this grid
	         *  <br/>Defaults to true
	         */
	        gridOptions.enableInfiniteScroll = gridOptions.enableInfiniteScroll !== false;

	        /**
	         * @ngdoc property
	         * @name infiniteScrollRowsFromEnd
	         * @propertyOf ui.grid.class:GridOptions
	         * @description This setting controls how close to the end of the dataset a user gets before
	         * more data is requested by the infinite scroll, whether scrolling up or down.  This allows you to
	         * 'prefetch' rows before the user actually runs out of scrolling.
	         *
	         * Note that if you set this value too high it may give jumpy scrolling behaviour, if you're getting
	         * this behaviour you could use the `saveScrollPercentageMethod` right before loading your data, and we'll
	         * preserve that scroll position
	         *
	         * <br> Defaults to 20
	         */
	        gridOptions.infiniteScrollRowsFromEnd = gridOptions.infiniteScrollRowsFromEnd || 20;

	        /**
	         * @ngdoc property
	         * @name infiniteScrollUp
	         * @propertyOf ui.grid.class:GridOptions
	         * @description Whether you allow infinite scroll up, implying that the first page of data
	         * you have displayed is in the middle of your data set.  If set to true then we trigger the
	         * needMoreDataTop event when the user hits the top of the scrollbar.
	         * <br> Defaults to false
	         */
	        gridOptions.infiniteScrollUp = gridOptions.infiniteScrollUp === true;

	        /**
	         * @ngdoc property
	         * @name infiniteScrollDown
	         * @propertyOf ui.grid.class:GridOptions
	         * @description Whether you allow infinite scroll down, implying that the first page of data
	         * you have displayed is in the middle of your data set.  If set to true then we trigger the
	         * needMoreData event when the user hits the bottom of the scrollbar.
	         * <br> Defaults to true
	         */
	        gridOptions.infiniteScrollDown = gridOptions.infiniteScrollDown !== false;
	      },


	      /**
	       * @ngdoc function
	       * @name setScrollDirections
	       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	       * @description Sets the scrollUp and scrollDown flags, handling nulls and undefined,
	       * and also sets the grid.suppressParentScroll
	       * @param {grid} grid the grid we're operating on
	       * @param {boolean} scrollUp whether there are pages available up - defaults to false
	       * @param {boolean} scrollDown whether there are pages available down - defaults to true
	       */
	      setScrollDirections:  function ( grid, scrollUp, scrollDown ) {
	        grid.infiniteScroll.scrollUp = ( scrollUp === true );
	        grid.suppressParentScrollUp = ( scrollUp === true );

	        grid.infiniteScroll.scrollDown = ( scrollDown !== false);
	        grid.suppressParentScrollDown = ( scrollDown !== false);
	      },


	      /**
	       * @ngdoc function
	       * @name handleScroll
	       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	       * @description Called whenever the grid scrolls, determines whether the scroll should
	       * trigger an infinite scroll request for more data
	       * @param {object} args the args from the event
	       */
	      handleScroll:  function (args) {
	        // don't request data if already waiting for data, or if source is coming from ui.grid.adjustInfiniteScrollPosition() function
	        if ( args.grid.infiniteScroll && args.grid.infiniteScroll.dataLoading || args.source === 'ui.grid.adjustInfiniteScrollPosition' ){
	          return;
	        }

	        if (args.y) {

	          // If the user is scrolling very quickly all the way to the top/bottom, the scroll handler can get confused
	          // about the direction. First we check if they've gone all the way, and data always is loaded in this case.
	          if (args.y.percentage === 0) {
	            args.grid.scrollDirection = uiGridConstants.scrollDirection.UP;
	            service.loadData(args.grid);
	          } else if (args.y.percentage === 1) {
	            args.grid.scrollDirection = uiGridConstants.scrollDirection.DOWN;
	            service.loadData(args.grid);
	          } else { // Scroll position is somewhere in between top/bottom, so determine whether it's far enough to load more data.
	            var percentage;
	            var targetPercentage = args.grid.options.infiniteScrollRowsFromEnd / args.grid.renderContainers.body.visibleRowCache.length;
	            if (args.grid.scrollDirection === uiGridConstants.scrollDirection.UP ) {
	              percentage = args.y.percentage;
	              if (percentage <= targetPercentage){
	                service.loadData(args.grid);
	              }
	            } else if (args.grid.scrollDirection === uiGridConstants.scrollDirection.DOWN) {
	              percentage = 1 - args.y.percentage;
	              if (percentage <= targetPercentage){
	                service.loadData(args.grid);
	              }
	            }
	          }
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name loadData
	       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	       * @description This function fires 'needLoadMoreData' or 'needLoadMoreDataTop' event based on scrollDirection
	       * and whether there are more pages upwards or downwards.  It also stores the number of rows that we had previously,
	       * and clears out any saved scroll position so that we know whether or not the user calls `saveScrollPercentage`
	       * @param {Grid} grid the grid we're working on
	       */
	      loadData: function (grid) {
	        // save number of currently visible rows to calculate new scroll position later - we know that we want
	        // to be at approximately the row we're currently at
	        grid.infiniteScroll.previousVisibleRows = grid.renderContainers.body.visibleRowCache.length;
	        grid.infiniteScroll.direction = grid.scrollDirection;
	        delete grid.infiniteScroll.prevScrollTop;

	        if (grid.scrollDirection === uiGridConstants.scrollDirection.UP && grid.infiniteScroll.scrollUp ) {
	          grid.infiniteScroll.dataLoading = true;
	          grid.api.infiniteScroll.raise.needLoadMoreDataTop();
	        } else if (grid.scrollDirection === uiGridConstants.scrollDirection.DOWN && grid.infiniteScroll.scrollDown ) {
	          grid.infiniteScroll.dataLoading = true;
	          grid.api.infiniteScroll.raise.needLoadMoreData();
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name adjustScroll
	       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	       * @description Once we are informed that data has been loaded, adjust the scroll position to account for that
	       * addition and to make things look clean.
	       *
	       * If we're scrolling up we scroll to the first row of the old data set -
	       * so we're assuming that you would have gotten to the top of the grid (from the 20% need more data trigger) by
	       * the time the data comes back.  If we're scrolling down we scoll to the last row of the old data set - so we're
	       * assuming that you would have gotten to the bottom of the grid (from the 80% need more data trigger) by the time
	       * the data comes back.
	       *
	       * Neither of these are good assumptions, but making this a smoother experience really requires
	       * that trigger to not be a percentage, and to be much closer to the end of the data (say, 5 rows off the end).  Even then
	       * it'd be better still to actually run into the end.  But if the data takes a while to come back, they may have scrolled
	       * somewhere else in the mean-time, in which case they'll get a jump back to the new data.  Anyway, this will do for
	       * now, until someone wants to do better.
	       * @param {Grid} grid the grid we're working on
	       * @returns {promise} a promise that is resolved when scrolling has finished
	       */
	      adjustScroll: function(grid){
	        var promise = $q.defer();
	        $timeout(function () {
	          var newPercentage, viewportHeight, rowHeight, newVisibleRows, oldTop, newTop;

	          viewportHeight = grid.getViewportHeight() + grid.headerHeight - grid.renderContainers.body.headerHeight - grid.scrollbarHeight;
	          rowHeight = grid.options.rowHeight;

	          if ( grid.infiniteScroll.direction === undefined ){
	            // called from initialize, tweak our scroll up a little
	            service.adjustInfiniteScrollPosition(grid, 0);
	          }

	          newVisibleRows = grid.getVisibleRowCount();

	          // in case not enough data is loaded to enable scroller - load more data
	          var canvasHeight = rowHeight * newVisibleRows;
	          if (grid.infiniteScroll.scrollDown && (viewportHeight > canvasHeight)) {
	            grid.api.infiniteScroll.raise.needLoadMoreData();
	          }

	          if ( grid.infiniteScroll.direction === uiGridConstants.scrollDirection.UP ){
	            oldTop = grid.infiniteScroll.prevScrollTop || 0;
	            newTop = oldTop + (newVisibleRows - grid.infiniteScroll.previousVisibleRows)*rowHeight;
	            service.adjustInfiniteScrollPosition(grid, newTop);
	            $timeout( function() {
	              promise.resolve();
	            });
	          }

	          if ( grid.infiniteScroll.direction === uiGridConstants.scrollDirection.DOWN ){
	            newTop = grid.infiniteScroll.prevScrollTop || (grid.infiniteScroll.previousVisibleRows*rowHeight - viewportHeight);
	            service.adjustInfiniteScrollPosition(grid, newTop);
	            $timeout( function() {
	              promise.resolve();
	            });
	          }
	        }, 0);

	        return promise.promise;
	      },


	      /**
	       * @ngdoc function
	       * @name adjustInfiniteScrollPosition
	       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	       * @description This function fires 'needLoadMoreData' or 'needLoadMoreDataTop' event based on scrollDirection
	       * @param {Grid} grid the grid we're working on
	       * @param {number} scrollTop the position through the grid that we want to scroll to
	       * @returns {promise} a promise that is resolved when the scrolling finishes
	       */
	      adjustInfiniteScrollPosition: function (grid, scrollTop) {
	        var scrollEvent = new ScrollEvent(grid, null, null, 'ui.grid.adjustInfiniteScrollPosition'),
	          visibleRows = grid.getVisibleRowCount(),
	          viewportHeight = grid.getViewportHeight() + grid.headerHeight - grid.renderContainers.body.headerHeight - grid.scrollbarHeight,
	          rowHeight = grid.options.rowHeight,
	          scrollHeight = visibleRows*rowHeight-viewportHeight;

	        //for infinite scroll, if there are pages upwards then never allow it to be at the zero position so the up button can be active
	        if (scrollTop === 0 && grid.infiniteScroll.scrollUp) {
	          // using pixels results in a relative scroll, hence we have to use percentage
	          scrollEvent.y = {percentage: 1/scrollHeight};
	        }
	        else {
	          scrollEvent.y = {percentage: scrollTop/scrollHeight};
	        }
	        grid.scrollContainers('', scrollEvent);
	      },


	      /**
	       * @ngdoc function
	       * @name dataRemovedTop
	       * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	       * @description Adjusts the scroll position after you've removed data at the top. You should
	       * have called `saveScrollPercentage` before you remove the data, and if you're doing this in
	       * response to a `needMoreData` you should wait until the promise from `loadData` has resolved
	       * before you start removing data
	       * @param {Grid} grid the grid we're working on
	       * @param {boolean} scrollUp flag that there are pages upwards, fire
	       * infinite scroll events upward
	       * @param {boolean} scrollDown flag that there are pages downwards, so
	       * fire infinite scroll events downward
	       * @returns {promise} a promise that is resolved when the scrolling finishes
	       */
	      dataRemovedTop: function( grid, scrollUp, scrollDown ) {
	        var newVisibleRows, oldTop, newTop, rowHeight;
	        service.setScrollDirections( grid, scrollUp, scrollDown );

	        newVisibleRows = grid.renderContainers.body.visibleRowCache.length;
	        oldTop = grid.infiniteScroll.prevScrollTop;
	        rowHeight = grid.options.rowHeight;

	        // since we removed from the top, our new scroll row will be the old scroll row less the number
	        // of rows removed
	        newTop = oldTop - ( grid.infiniteScroll.previousVisibleRows - newVisibleRows )*rowHeight;

	        return service.adjustInfiniteScrollPosition( grid, newTop );
	      },

	      /**
	       * @ngdoc function
	       * @name dataRemovedBottom
	       * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	       * @description Adjusts the scroll position after you've removed data at the bottom.  You should
	       * have called `saveScrollPercentage` before you remove the data, and if you're doing this in
	       * response to a `needMoreData` you should wait until the promise from `loadData` has resolved
	       * before you start removing data
	       * @param {Grid} grid the grid we're working on
	       * @param {boolean} scrollUp flag that there are pages upwards, fire
	       * infinite scroll events upward
	       * @param {boolean} scrollDown flag that there are pages downwards, so
	       * fire infinite scroll events downward
	       */
	      dataRemovedBottom: function( grid, scrollUp, scrollDown ) {
	        var newTop;
	        service.setScrollDirections( grid, scrollUp, scrollDown );

	        newTop = grid.infiniteScroll.prevScrollTop;

	        return service.adjustInfiniteScrollPosition( grid, newTop );
	      }
	    };
	    return service;
	  }]);
	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.infiniteScroll.directive:uiGridInfiniteScroll
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds infinite scroll features to grid
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.infiniteScroll']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Alex', car: 'Toyota' },
	            { name: 'Sam', car: 'Lexus' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name'},
	        {name: 'car'}
	      ];
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-infinite-scroll="20"></div>
	   </div>
	   </file>
	   </example>
	   */

	  module.directive('uiGridInfiniteScroll', ['uiGridInfiniteScrollService',
	    function (uiGridInfiniteScrollService) {
	      return {
	        priority: -200,
	        scope: false,
	        require: '^uiGrid',
	        compile: function($scope, $elm, $attr){
	          return {
	            pre: function($scope, $elm, $attr, uiGridCtrl) {
	              uiGridInfiniteScrollService.initializeGrid(uiGridCtrl.grid, $scope);
	            },
	            post: function($scope, $elm, $attr) {
	            }
	          };
	        }
	      };
	    }]);

	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.moveColumns
	   * @description
	   *
	   * # ui.grid.moveColumns
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
	   *
	   * This module provides column moving capability to ui.grid. It enables to change the position of columns.
	   * <div doc-module-components="ui.grid.moveColumns"></div>
	   */
	  var module = angular.module('ui.grid.moveColumns', ['ui.grid']);

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.moveColumns.service:uiGridMoveColumnService
	   *  @description Service for column moving feature.
	   */
	  module.service('uiGridMoveColumnService', ['$q', '$timeout', '$log', 'ScrollEvent', 'uiGridConstants', 'gridUtil', function ($q, $timeout, $log, ScrollEvent, uiGridConstants, gridUtil) {

	    var service = {
	      initializeGrid: function (grid) {
	        var self = this;
	        this.registerPublicApi(grid);
	        this.defaultGridOptions(grid.options);
	        grid.moveColumns = {orderCache: []}; // Used to cache the order before columns are rebuilt
	        grid.registerColumnBuilder(self.movableColumnBuilder);
	        grid.registerDataChangeCallback(self.verifyColumnOrder, [uiGridConstants.dataChange.COLUMN]);
	      },
	      registerPublicApi: function (grid) {
	        var self = this;
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.moveColumns.api:PublicApi
	         *  @description Public Api for column moving feature.
	         */
	        var publicApi = {
	          events: {
	            /**
	             * @ngdoc event
	             * @name columnPositionChanged
	             * @eventOf  ui.grid.moveColumns.api:PublicApi
	             * @description raised when column is moved
	             * <pre>
	             *      gridApi.colMovable.on.columnPositionChanged(scope,function(colDef, originalPosition, newPosition){})
	             * </pre>
	             * @param {object} colDef the column that was moved
	             * @param {integer} originalPosition of the column
	             * @param {integer} finalPosition of the column
	             */
	            colMovable: {
	              columnPositionChanged: function (colDef, originalPosition, newPosition) {
	              }
	            }
	          },
	          methods: {
	            /**
	             * @ngdoc method
	             * @name moveColumn
	             * @methodOf  ui.grid.moveColumns.api:PublicApi
	             * @description Method can be used to change column position.
	             * <pre>
	             *      gridApi.colMovable.moveColumn(oldPosition, newPosition)
	             * </pre>
	             * @param {integer} originalPosition of the column
	             * @param {integer} finalPosition of the column
	             */
	            colMovable: {
	              moveColumn: function (originalPosition, finalPosition) {
	                var columns = grid.columns;
	                if (!angular.isNumber(originalPosition) || !angular.isNumber(finalPosition)) {
	                  gridUtil.logError('MoveColumn: Please provide valid values for originalPosition and finalPosition');
	                  return;
	                }
	                var nonMovableColumns = 0;
	                for (var i = 0; i < columns.length; i++) {
	                  if ((angular.isDefined(columns[i].colDef.visible) && columns[i].colDef.visible === false) || columns[i].isRowHeader === true) {
	                    nonMovableColumns++;
	                  }
	                }
	                if (originalPosition >= (columns.length - nonMovableColumns) || finalPosition >= (columns.length - nonMovableColumns)) {
	                  gridUtil.logError('MoveColumn: Invalid values for originalPosition, finalPosition');
	                  return;
	                }
	                var findPositionForRenderIndex = function (index) {
	                  var position = index;
	                  for (var i = 0; i <= position; i++) {
	                    if (angular.isDefined(columns[i]) && ((angular.isDefined(columns[i].colDef.visible) && columns[i].colDef.visible === false) || columns[i].isRowHeader === true)) {
	                      position++;
	                    }
	                  }
	                  return position;
	                };
	                self.redrawColumnAtPosition(grid, findPositionForRenderIndex(originalPosition), findPositionForRenderIndex(finalPosition));
	              }
	            }
	          }
	        };
	        grid.api.registerEventsFromObject(publicApi.events);
	        grid.api.registerMethodsFromObject(publicApi.methods);
	      },
	      defaultGridOptions: function (gridOptions) {
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.moveColumns.api:GridOptions
	         *
	         *  @description Options for configuring the move column feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         */
	        /**
	         *  @ngdoc object
	         *  @name enableColumnMoving
	         *  @propertyOf  ui.grid.moveColumns.api:GridOptions
	         *  @description If defined, sets the default value for the colMovable flag on each individual colDefs
	         *  if their individual enableColumnMoving configuration is not defined. Defaults to true.
	         */
	        gridOptions.enableColumnMoving = gridOptions.enableColumnMoving !== false;
	      },
	      movableColumnBuilder: function (colDef, col, gridOptions) {
	        var promises = [];
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.moveColumns.api:ColumnDef
	         *
	         *  @description Column Definition for move column feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	         */
	        /**
	         *  @ngdoc object
	         *  @name enableColumnMoving
	         *  @propertyOf  ui.grid.moveColumns.api:ColumnDef
	         *  @description Enable column moving for the column.
	         */
	        colDef.enableColumnMoving = colDef.enableColumnMoving === undefined ? gridOptions.enableColumnMoving
	          : colDef.enableColumnMoving;
	        return $q.all(promises);
	      },
	      /**
	       * @ngdoc method
	       * @name updateColumnCache
	       * @methodOf  ui.grid.moveColumns
	       * @description Cache the current order of columns, so we can restore them after new columnDefs are defined
	       */
	      updateColumnCache: function(grid){
	        grid.moveColumns.orderCache = grid.getOnlyDataColumns();
	      },
	      /**
	       * @ngdoc method
	       * @name verifyColumnOrder
	       * @methodOf  ui.grid.moveColumns
	       * @description dataChangeCallback which uses the cached column order to restore the column order
	       * when it is reset by altering the columnDefs array.
	       */
	      verifyColumnOrder: function(grid){
	        var headerRowOffset = grid.rowHeaderColumns.length;
	        var newIndex;

	        angular.forEach(grid.moveColumns.orderCache, function(cacheCol, cacheIndex){
	          newIndex = grid.columns.indexOf(cacheCol);
	          if ( newIndex !== -1 && newIndex - headerRowOffset !== cacheIndex ){
	            var column = grid.columns.splice(newIndex, 1)[0];
	            grid.columns.splice(cacheIndex + headerRowOffset, 0, column);
	          }
	        });
	      },
	      redrawColumnAtPosition: function (grid, originalPosition, newPosition) {
	        var columns = grid.columns;

	        if (originalPosition === newPosition) {
	          return;
	        }

	        //check columns in between move-range to make sure they are visible columns
	        var pos = (originalPosition < newPosition) ? originalPosition + 1 : originalPosition - 1;
	        var i0 = Math.min(pos, newPosition);
	        for (i0; i0 <= Math.max(pos, newPosition); i0++) {
	          if (columns[i0].visible) {
	            break;
	          }
	        }
	        if (i0 > Math.max(pos, newPosition)) {
	          //no visible column found, column did not visibly move
	          return;
	        }

	        var originalColumn = columns[originalPosition];
	        if (originalColumn.colDef.enableColumnMoving) {
	          if (originalPosition > newPosition) {
	            for (var i1 = originalPosition; i1 > newPosition; i1--) {
	              columns[i1] = columns[i1 - 1];
	            }
	          }
	          else if (newPosition > originalPosition) {
	            for (var i2 = originalPosition; i2 < newPosition; i2++) {
	              columns[i2] = columns[i2 + 1];
	            }
	          }
	          columns[newPosition] = originalColumn;
	          service.updateColumnCache(grid);
	          grid.queueGridRefresh();
	          $timeout(function () {
	            grid.api.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
	            grid.api.colMovable.raise.columnPositionChanged(originalColumn.colDef, originalPosition, newPosition);
	          });
	        }
	      }
	    };
	    return service;
	  }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.moveColumns.directive:uiGridMoveColumns
	   *  @element div
	   *  @restrict A
	   *  @description Adds column moving features to the ui-grid directive.
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.moveColumns']);
	   app.controller('MainCtrl', ['$scope', function ($scope) {
	        $scope.data = [
	          { name: 'Bob', title: 'CEO', age: 45 },
	          { name: 'Frank', title: 'Lowly Developer', age: 25 },
	          { name: 'Jenny', title: 'Highly Developer', age: 35 }
	        ];
	        $scope.columnDefs = [
	          {name: 'name'},
	          {name: 'title'},
	          {name: 'age'}
	        ];
	      }]);
	   </file>
	   <file name="main.css">
	   .grid {
	      width: 100%;
	      height: 150px;
	    }
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div class="grid" ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-move-columns></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridMoveColumns', ['uiGridMoveColumnService', function (uiGridMoveColumnService) {
	    return {
	      replace: true,
	      priority: 0,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            uiGridMoveColumnService.initializeGrid(uiGridCtrl.grid);
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          }
	        };
	      }
	    };
	  }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.moveColumns.directive:uiGridHeaderCell
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Stacks on top of ui.grid.uiGridHeaderCell to provide capability to be able to move it to reposition column.
	   *
	   *  On receiving mouseDown event headerCell is cloned, now as the mouse moves the cloned header cell also moved in the grid.
	   *  In case the moving cloned header cell reaches the left or right extreme of grid, grid scrolling is triggered (if horizontal scroll exists).
	   *  On mouseUp event column is repositioned at position where mouse is released and cloned header cell is removed.
	   *
	   *  Events that invoke cloning of header cell:
	   *    - mousedown
	   *
	   *  Events that invoke movement of cloned header cell:
	   *    - mousemove
	   *
	   *  Events that invoke repositioning of column:
	   *    - mouseup
	   */
	  module.directive('uiGridHeaderCell', ['$q', 'gridUtil', 'uiGridMoveColumnService', '$document', '$log', 'uiGridConstants', 'ScrollEvent',
	    function ($q, gridUtil, uiGridMoveColumnService, $document, $log, uiGridConstants, ScrollEvent) {
	      return {
	        priority: -10,
	        require: '^uiGrid',
	        compile: function () {
	          return {
	            post: function ($scope, $elm, $attrs, uiGridCtrl) {

	              if ($scope.col.colDef.enableColumnMoving) {

	                /*
	                 * Our general approach to column move is that we listen to a touchstart or mousedown
	                 * event over the column header.  When we hear one, then we wait for a move of the same type
	                 * - if we are a touchstart then we listen for a touchmove, if we are a mousedown we listen for
	                 * a mousemove (i.e. a drag) before we decide that there's a move underway.  If there's never a move,
	                 * and we instead get a mouseup or a touchend, then we just drop out again and do nothing.
	                 *
	                 */
	                var $contentsElm = angular.element( $elm[0].querySelectorAll('.ui-grid-cell-contents') );

	                var gridLeft;
	                var previousMouseX;
	                var totalMouseMovement;
	                var rightMoveLimit;
	                var elmCloned = false;
	                var movingElm;
	                var reducedWidth;
	                var moveOccurred = false;

	                var downFn = function( event ){
	                  //Setting some variables required for calculations.
	                  gridLeft = $scope.grid.element[0].getBoundingClientRect().left;
	                  if ( $scope.grid.hasLeftContainer() ){
	                    gridLeft += $scope.grid.renderContainers.left.header[0].getBoundingClientRect().width;
	                  }

	                  previousMouseX = event.pageX || (event.originalEvent ? event.originalEvent.pageX : 0);
	                  totalMouseMovement = 0;
	                  rightMoveLimit = gridLeft + $scope.grid.getViewportWidth();

	                  if ( event.type === 'mousedown' ){
	                    $document.on('mousemove', moveFn);
	                    $document.on('mouseup', upFn);
	                  } else if ( event.type === 'touchstart' ){
	                    $document.on('touchmove', moveFn);
	                    $document.on('touchend', upFn);
	                  }
	                };

	                var moveFn = function( event ) {
	                  var pageX = event.pageX || (event.originalEvent ? event.originalEvent.pageX : 0);
	                  var changeValue = pageX - previousMouseX;
	                  if ( changeValue === 0 ){ return; }
	                  //Disable text selection in Chrome during column move
	                  document.onselectstart = function() { return false; };

	                  moveOccurred = true;

	                  if (!elmCloned) {
	                    cloneElement();
	                  }
	                  else if (elmCloned) {
	                    moveElement(changeValue);
	                    previousMouseX = pageX;
	                  }
	                };

	                var upFn = function( event ){
	                  //Re-enable text selection after column move
	                  document.onselectstart = null;

	                  //Remove the cloned element on mouse up.
	                  if (movingElm) {
	                    movingElm.remove();
	                    elmCloned = false;
	                  }

	                  offAllEvents();
	                  onDownEvents();

	                  if (!moveOccurred){
	                    return;
	                  }

	                  var columns = $scope.grid.columns;
	                  var columnIndex = 0;
	                  for (var i = 0; i < columns.length; i++) {
	                    if (columns[i].colDef.name !== $scope.col.colDef.name) {
	                      columnIndex++;
	                    }
	                    else {
	                      break;
	                    }
	                  }

	                  var targetIndex;

	                  //Case where column should be moved to a position on its left
	                  if (totalMouseMovement < 0) {
	                    var totalColumnsLeftWidth = 0;
	                    var il;
	                    if ( $scope.grid.isRTL() ){
	                      for (il = columnIndex + 1; il < columns.length; il++) {
	                        if (angular.isUndefined(columns[il].colDef.visible) || columns[il].colDef.visible === true) {
	                          totalColumnsLeftWidth += columns[il].drawnWidth || columns[il].width || columns[il].colDef.width;
	                          if (totalColumnsLeftWidth > Math.abs(totalMouseMovement)) {
	                            uiGridMoveColumnService.redrawColumnAtPosition
	                            ($scope.grid, columnIndex, il - 1);
	                            break;
	                          }
	                        }
	                      }
	                    }
	                    else {
	                      for (il = columnIndex - 1; il >= 0; il--) {
	                        if (angular.isUndefined(columns[il].colDef.visible) || columns[il].colDef.visible === true) {
	                          totalColumnsLeftWidth += columns[il].drawnWidth || columns[il].width || columns[il].colDef.width;
	                          if (totalColumnsLeftWidth > Math.abs(totalMouseMovement)) {
	                            uiGridMoveColumnService.redrawColumnAtPosition
	                            ($scope.grid, columnIndex, il + 1);
	                            break;
	                          }
	                        }
	                      }
	                    }

	                    //Case where column should be moved to beginning (or end in RTL) of the grid.
	                    if (totalColumnsLeftWidth < Math.abs(totalMouseMovement)) {
	                      targetIndex = 0;
	                      if ( $scope.grid.isRTL() ){
	                        targetIndex = columns.length - 1;
	                      }
	                      uiGridMoveColumnService.redrawColumnAtPosition
	                      ($scope.grid, columnIndex, targetIndex);
	                    }
	                  }

	                  //Case where column should be moved to a position on its right
	                  else if (totalMouseMovement > 0) {
	                    var totalColumnsRightWidth = 0;
	                    var ir;
	                    if ( $scope.grid.isRTL() ){
	                      for (ir = columnIndex - 1; ir > 0; ir--) {
	                        if (angular.isUndefined(columns[ir].colDef.visible) || columns[ir].colDef.visible === true) {
	                          totalColumnsRightWidth += columns[ir].drawnWidth || columns[ir].width || columns[ir].colDef.width;
	                          if (totalColumnsRightWidth > totalMouseMovement) {
	                            uiGridMoveColumnService.redrawColumnAtPosition
	                            ($scope.grid, columnIndex, ir);
	                            break;
	                          }
	                        }
	                      }
	                    }
	                    else {
	                      for (ir = columnIndex + 1; ir < columns.length; ir++) {
	                        if (angular.isUndefined(columns[ir].colDef.visible) || columns[ir].colDef.visible === true) {
	                          totalColumnsRightWidth += columns[ir].drawnWidth || columns[ir].width || columns[ir].colDef.width;
	                          if (totalColumnsRightWidth > totalMouseMovement) {
	                            uiGridMoveColumnService.redrawColumnAtPosition
	                            ($scope.grid, columnIndex, ir - 1);
	                            break;
	                          }
	                        }
	                      }
	                    }


	                    //Case where column should be moved to end (or beginning in RTL) of the grid.
	                    if (totalColumnsRightWidth < totalMouseMovement) {
	                      targetIndex = columns.length - 1;
	                      if ( $scope.grid.isRTL() ){
	                        targetIndex = 0;
	                      }
	                      uiGridMoveColumnService.redrawColumnAtPosition
	                      ($scope.grid, columnIndex, targetIndex);
	                    }
	                  }



	                };

	                var onDownEvents = function(){
	                  $contentsElm.on('touchstart', downFn);
	                  $contentsElm.on('mousedown', downFn);
	                };

	                var offAllEvents = function() {
	                  $contentsElm.off('touchstart', downFn);
	                  $contentsElm.off('mousedown', downFn);

	                  $document.off('mousemove', moveFn);
	                  $document.off('touchmove', moveFn);

	                  $document.off('mouseup', upFn);
	                  $document.off('touchend', upFn);
	                };

	                onDownEvents();


	                var cloneElement = function () {
	                  elmCloned = true;

	                  //Cloning header cell and appending to current header cell.
	                  movingElm = $elm.clone();
	                  $elm.parent().append(movingElm);

	                  //Left of cloned element should be aligned to original header cell.
	                  movingElm.addClass('movingColumn');
	                  var movingElementStyles = {};
	                  movingElementStyles.left = $elm[0].offsetLeft + 'px';
	                  var gridRight = $scope.grid.element[0].getBoundingClientRect().right;
	                  var elmRight = $elm[0].getBoundingClientRect().right;
	                  if (elmRight > gridRight) {
	                    reducedWidth = $scope.col.drawnWidth + (gridRight - elmRight);
	                    movingElementStyles.width = reducedWidth + 'px';
	                  }
	                  movingElm.css(movingElementStyles);
	                };

	                var moveElement = function (changeValue) {
	                  //Calculate total column width
	                  var columns = $scope.grid.columns;
	                  var totalColumnWidth = 0;
	                  for (var i = 0; i < columns.length; i++) {
	                    if (angular.isUndefined(columns[i].colDef.visible) || columns[i].colDef.visible === true) {
	                      totalColumnWidth += columns[i].drawnWidth || columns[i].width || columns[i].colDef.width;
	                    }
	                  }

	                  //Calculate new position of left of column
	                  var currentElmLeft = movingElm[0].getBoundingClientRect().left - 1;
	                  var currentElmRight = movingElm[0].getBoundingClientRect().right;
	                  var newElementLeft;

	                  newElementLeft = currentElmLeft - gridLeft + changeValue;
	                  newElementLeft = newElementLeft < rightMoveLimit ? newElementLeft : rightMoveLimit;

	                  //Update css of moving column to adjust to new left value or fire scroll in case column has reached edge of grid
	                  if ((currentElmLeft >= gridLeft || changeValue > 0) && (currentElmRight <= rightMoveLimit || changeValue < 0)) {
	                    movingElm.css({visibility: 'visible', 'left': (movingElm[0].offsetLeft +
	                    (newElementLeft < rightMoveLimit ? changeValue : (rightMoveLimit - currentElmLeft))) + 'px'});
	                  }
	                  else if (totalColumnWidth > Math.ceil(uiGridCtrl.grid.gridWidth)) {
	                    changeValue *= 8;
	                    var scrollEvent = new ScrollEvent($scope.col.grid, null, null, 'uiGridHeaderCell.moveElement');
	                    scrollEvent.x = {pixels: changeValue};
	                    scrollEvent.grid.scrollContainers('',scrollEvent);
	                  }

	                  //Calculate total width of columns on the left of the moving column and the mouse movement
	                  var totalColumnsLeftWidth = 0;
	                  for (var il = 0; il < columns.length; il++) {
	                    if (angular.isUndefined(columns[il].colDef.visible) || columns[il].colDef.visible === true) {
	                      if (columns[il].colDef.name !== $scope.col.colDef.name) {
	                        totalColumnsLeftWidth += columns[il].drawnWidth || columns[il].width || columns[il].colDef.width;
	                      }
	                      else {
	                        break;
	                      }
	                    }
	                  }
	                  if ($scope.newScrollLeft === undefined) {
	                    totalMouseMovement += changeValue;
	                  }
	                  else {
	                    totalMouseMovement = $scope.newScrollLeft + newElementLeft - totalColumnsLeftWidth;
	                  }

	                  //Increase width of moving column, in case the rightmost column was moved and its width was
	                  //decreased because of overflow
	                  if (reducedWidth < $scope.col.drawnWidth) {
	                    reducedWidth += Math.abs(changeValue);
	                    movingElm.css({'width': reducedWidth + 'px'});
	                  }
	                };
	              }
	            }
	          };
	        }
	      };
	    }]);
	})();

	(function() {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.pagination
	   *
	   * @description
	   *
	   * # ui.grid.pagination
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
	   *
	   * This module provides pagination support to ui-grid
	   */
	  var module = angular.module('ui.grid.pagination', ['ng', 'ui.grid']);

	  /**
	   * @ngdoc service
	   * @name ui.grid.pagination.service:uiGridPaginationService
	   *
	   * @description Service for the pagination feature
	   */
	  module.service('uiGridPaginationService', ['gridUtil',
	    function (gridUtil) {
	      var service = {
	        /**
	         * @ngdoc method
	         * @name initializeGrid
	         * @methodOf ui.grid.pagination.service:uiGridPaginationService
	         * @description Attaches the service to a certain grid
	         * @param {Grid} grid The grid we want to work with
	         */
	        initializeGrid: function (grid) {
	          service.defaultGridOptions(grid.options);

	          /**
	          * @ngdoc object
	          * @name ui.grid.pagination.api:PublicAPI
	          *
	          * @description Public API for the pagination feature
	          */
	          var publicApi = {
	            events: {
	              pagination: {
	              /**
	               * @ngdoc event
	               * @name paginationChanged
	               * @eventOf ui.grid.pagination.api:PublicAPI
	               * @description This event fires when the pageSize or currentPage changes
	               * @param {int} currentPage requested page number
	               * @param {int} pageSize requested page size
	               */
	                paginationChanged: function (currentPage, pageSize) { }
	              }
	            },
	            methods: {
	              pagination: {
	                /**
	                 * @ngdoc method
	                 * @name getPage
	                 * @methodOf ui.grid.pagination.api:PublicAPI
	                 * @description Returns the number of the current page
	                 */
	                getPage: function () {
	                  return grid.options.enablePagination ? grid.options.paginationCurrentPage : null;
	                },
	                /**
	                 * @ngdoc method
	                 * @name getTotalPages
	                 * @methodOf ui.grid.pagination.api:PublicAPI
	                 * @description Returns the total number of pages
	                 */
	                getTotalPages: function () {
	                  if (!grid.options.enablePagination) {
	                    return null;
	                  }

	                  return (grid.options.totalItems === 0) ? 1 : Math.ceil(grid.options.totalItems / grid.options.paginationPageSize);
	                },
	                /**
	                 * @ngdoc method
	                 * @name nextPage
	                 * @methodOf ui.grid.pagination.api:PublicAPI
	                 * @description Moves to the next page, if possible
	                 */
	                nextPage: function () {
	                  if (!grid.options.enablePagination) {
	                    return;
	                  }

	                  if (grid.options.totalItems > 0) {
	                    grid.options.paginationCurrentPage = Math.min(
	                      grid.options.paginationCurrentPage + 1,
	                      publicApi.methods.pagination.getTotalPages()
	                    );
	                  } else {
	                    grid.options.paginationCurrentPage++;
	                  }
	                },
	                /**
	                 * @ngdoc method
	                 * @name previousPage
	                 * @methodOf ui.grid.pagination.api:PublicAPI
	                 * @description Moves to the previous page, if we're not on the first page
	                 */
	                previousPage: function () {
	                  if (!grid.options.enablePagination) {
	                    return;
	                  }

	                  grid.options.paginationCurrentPage = Math.max(grid.options.paginationCurrentPage - 1, 1);
	                },
	                /**
	                 * @ngdoc method
	                 * @name seek
	                 * @methodOf ui.grid.pagination.api:PublicAPI
	                 * @description Moves to the requested page
	                 * @param {int} page The number of the page that should be displayed
	                 */
	                seek: function (page) {
	                  if (!grid.options.enablePagination) {
	                    return;
	                  }
	                  if (!angular.isNumber(page) || page < 1) {
	                    throw 'Invalid page number: ' + page;
	                  }

	                  grid.options.paginationCurrentPage = Math.min(page, publicApi.methods.pagination.getTotalPages());
	                }
	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);
	          grid.api.registerMethodsFromObject(publicApi.methods);

	          var processPagination = function( renderableRows ){
	            if (grid.options.useExternalPagination || !grid.options.enablePagination) {
	              return renderableRows;
	            }
	            //client side pagination
	            var pageSize = parseInt(grid.options.paginationPageSize, 10);
	            var currentPage = parseInt(grid.options.paginationCurrentPage, 10);

	            var visibleRows = renderableRows.filter(function (row) { return row.visible; });
	            grid.options.totalItems = visibleRows.length;

	            var firstRow = (currentPage - 1) * pageSize;
	            if (firstRow > visibleRows.length) {
	              currentPage = grid.options.paginationCurrentPage = 1;
	              firstRow = (currentPage - 1) * pageSize;
	            }
	            return visibleRows.slice(firstRow, firstRow + pageSize);
	          };

	          grid.registerRowsProcessor(processPagination, 900 );

	        },
	        defaultGridOptions: function (gridOptions) {
	          /**
	           * @ngdoc object
	           * @name ui.grid.pagination.api:GridOptions
	           *
	           * @description GridOptions for the pagination feature, these are available to be
	           * set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	          /**
	           * @ngdoc property
	           * @name enablePagination
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Enables pagination.  Defaults to true.
	           */
	          gridOptions.enablePagination = gridOptions.enablePagination !== false;
	          /**
	           * @ngdoc property
	           * @name enablePaginationControls
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Enables the paginator at the bottom of the grid. Turn this off if you want to implement your
	           *              own controls outside the grid.
	           */
	          gridOptions.enablePaginationControls = gridOptions.enablePaginationControls !== false;
	          /**
	           * @ngdoc property
	           * @name useExternalPagination
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Disables client side pagination. When true, handle the paginationChanged event and set data
	           *              and totalItems.  Defaults to `false`
	           */
	          gridOptions.useExternalPagination = gridOptions.useExternalPagination === true;
	          /**
	           * @ngdoc property
	           * @name totalItems
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Total number of items, set automatically when using client side pagination, but needs set by user
	           *              for server side pagination
	           */
	          if (gridUtil.isNullOrUndefined(gridOptions.totalItems)) {
	            gridOptions.totalItems = 0;
	          }
	          /**
	           * @ngdoc property
	           * @name paginationPageSizes
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Array of page sizes, defaults to `[250, 500, 1000]`
	           */
	          if (gridUtil.isNullOrUndefined(gridOptions.paginationPageSizes)) {
	            gridOptions.paginationPageSizes = [250, 500, 1000];
	          }
	          /**
	           * @ngdoc property
	           * @name paginationPageSize
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Page size, defaults to the first item in paginationPageSizes, or 0 if paginationPageSizes is empty
	           */
	          if (gridUtil.isNullOrUndefined(gridOptions.paginationPageSize)) {
	            if (gridOptions.paginationPageSizes.length > 0) {
	              gridOptions.paginationPageSize = gridOptions.paginationPageSizes[0];
	            } else {
	              gridOptions.paginationPageSize = 0;
	            }
	          }
	          /**
	           * @ngdoc property
	           * @name paginationCurrentPage
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Current page number, defaults to 1
	           */
	          if (gridUtil.isNullOrUndefined(gridOptions.paginationCurrentPage)) {
	            gridOptions.paginationCurrentPage = 1;
	          }

	          /**
	           * @ngdoc property
	           * @name paginationTemplate
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description A custom template for the pager, defaults to `ui-grid/pagination`
	           */
	          if (gridUtil.isNullOrUndefined(gridOptions.paginationTemplate)) {
	            gridOptions.paginationTemplate = 'ui-grid/pagination';
	          }
	        },
	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.pagination.service:uiGridPaginationService
	         * @name uiGridPaginationService
	         * @description  Raises paginationChanged and calls refresh for client side pagination
	         * @param {Grid} grid the grid for which the pagination changed
	         * @param {int} currentPage requested page number
	         * @param {int} pageSize requested page size
	         */
	        onPaginationChanged: function (grid, currentPage, pageSize) {
	            grid.api.pagination.raise.paginationChanged(currentPage, pageSize);
	            if (!grid.options.useExternalPagination) {
	              grid.queueGridRefresh(); //client side pagination
	            }
	        }
	      };

	      return service;
	    }
	  ]);
	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.pagination.directive:uiGridPagination
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds pagination features to grid
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.pagination']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Alex', car: 'Toyota' },
	        { name: 'Sam', car: 'Lexus' },
	        { name: 'Joe', car: 'Dodge' },
	        { name: 'Bob', car: 'Buick' },
	        { name: 'Cindy', car: 'Ford' },
	        { name: 'Brian', car: 'Audi' },
	        { name: 'Malcom', car: 'Mercedes Benz' },
	        { name: 'Dave', car: 'Ford' },
	        { name: 'Stacey', car: 'Audi' },
	        { name: 'Amy', car: 'Acura' },
	        { name: 'Scott', car: 'Toyota' },
	        { name: 'Ryan', car: 'BMW' },
	      ];

	      $scope.gridOptions = {
	        data: 'data',
	        paginationPageSizes: [5, 10, 25],
	        paginationPageSize: 5,
	        columnDefs: [
	          {name: 'name'},
	          {name: 'car'}
	        ]
	       }
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="gridOptions" ui-grid-pagination></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridPagination', ['gridUtil', 'uiGridPaginationService',
	    function (gridUtil, uiGridPaginationService) {
	      return {
	        priority: -200,
	        scope: false,
	        require: 'uiGrid',
	        link: {
	          pre: function ($scope, $elm, $attr, uiGridCtrl) {
	            uiGridPaginationService.initializeGrid(uiGridCtrl.grid);

	            gridUtil.getTemplate(uiGridCtrl.grid.options.paginationTemplate)
	              .then(function (contents) {
	                var template = angular.element(contents);
	                $elm.append(template);
	                uiGridCtrl.innerCompile(template);
	              });
	          }
	        }
	      };
	    }
	  ]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.pagination.directive:uiGridPager
	   *  @element div
	   *
	   *  @description Panel for handling pagination
	   */
	  module.directive('uiGridPager', ['uiGridPaginationService', 'uiGridConstants', 'gridUtil', 'i18nService',
	    function (uiGridPaginationService, uiGridConstants, gridUtil, i18nService) {
	      return {
	        priority: -200,
	        scope: true,
	        require: '^uiGrid',
	        link: function ($scope, $elm, $attr, uiGridCtrl) {
	          var defaultFocusElementSelector = '.ui-grid-pager-control-input';
	          $scope.aria = i18nService.getSafeText('pagination.aria'); //Returns an object with all of the aria labels

	          $scope.paginationApi = uiGridCtrl.grid.api.pagination;
	          $scope.sizesLabel = i18nService.getSafeText('pagination.sizes');
	          $scope.totalItemsLabel = i18nService.getSafeText('pagination.totalItems');
	          $scope.paginationOf = i18nService.getSafeText('pagination.of');
	          $scope.paginationThrough = i18nService.getSafeText('pagination.through');

	          var options = uiGridCtrl.grid.options;

	          uiGridCtrl.grid.renderContainers.body.registerViewportAdjuster(function (adjustment) {
	            adjustment.height = adjustment.height - gridUtil.elementHeight($elm, "padding");
	            return adjustment;
	          });

	          var dataChangeDereg = uiGridCtrl.grid.registerDataChangeCallback(function (grid) {
	            if (!grid.options.useExternalPagination) {
	              grid.options.totalItems = grid.rows.length;
	            }
	          }, [uiGridConstants.dataChange.ROW]);

	          $scope.$on('$destroy', dataChangeDereg);

	          var setShowing = function () {
	            $scope.showingLow = ((options.paginationCurrentPage - 1) * options.paginationPageSize) + 1;
	            $scope.showingHigh = Math.min(options.paginationCurrentPage * options.paginationPageSize, options.totalItems);
	          };

	          var deregT = $scope.$watch('grid.options.totalItems + grid.options.paginationPageSize', setShowing);

	          var deregP = $scope.$watch('grid.options.paginationCurrentPage + grid.options.paginationPageSize', function (newValues, oldValues) {
	              if (newValues === oldValues || oldValues === undefined) {
	                return;
	              }

	              if (!angular.isNumber(options.paginationCurrentPage) || options.paginationCurrentPage < 1) {
	                options.paginationCurrentPage = 1;
	                return;
	              }

	              if (options.totalItems > 0 && options.paginationCurrentPage > $scope.paginationApi.getTotalPages()) {
	                options.paginationCurrentPage = $scope.paginationApi.getTotalPages();
	                return;
	              }

	              setShowing();
	              uiGridPaginationService.onPaginationChanged($scope.grid, options.paginationCurrentPage, options.paginationPageSize);
	            }
	          );

	          $scope.$on('$destroy', function() {
	            deregT();
	            deregP();
	          });

	          $scope.cantPageForward = function () {
	            if (options.totalItems > 0) {
	              return options.paginationCurrentPage >= $scope.paginationApi.getTotalPages();
	            } else {
	              return options.data.length < 1;
	            }
	          };

	          $scope.cantPageToLast = function () {
	            if (options.totalItems > 0) {
	              return $scope.cantPageForward();
	            } else {
	              return true;
	            }
	          };

	          $scope.cantPageBackward = function () {
	            return options.paginationCurrentPage <= 1;
	          };

	          var focusToInputIf = function(condition){
	            if (condition){
	              gridUtil.focus.bySelector($elm, defaultFocusElementSelector);
	            }
	          };

	          //Takes care of setting focus to the middle element when focus is lost
	          $scope.pageFirstPageClick = function () {
	            $scope.paginationApi.seek(1);
	            focusToInputIf($scope.cantPageBackward());
	          };

	          $scope.pagePreviousPageClick = function () {
	            $scope.paginationApi.previousPage();
	            focusToInputIf($scope.cantPageBackward());
	          };

	          $scope.pageNextPageClick = function () {
	            $scope.paginationApi.nextPage();
	            focusToInputIf($scope.cantPageForward());
	          };

	          $scope.pageLastPageClick = function () {
	            $scope.paginationApi.seek($scope.paginationApi.getTotalPages());
	            focusToInputIf($scope.cantPageToLast());
	          };

	        }
	      };
	    }
	  ]);
	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.pinning
	   * @description
	   *
	   * # ui.grid.pinning
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module provides column pinning to the end user via menu options in the column header
	   *
	   * <div doc-module-components="ui.grid.pinning"></div>
	   */

	  var module = angular.module('ui.grid.pinning', ['ui.grid']);

	  module.constant('uiGridPinningConstants', {
	    container: {
	      LEFT: 'left',
	      RIGHT: 'right',
	      NONE: ''
	    }
	  });

	  module.service('uiGridPinningService', ['gridUtil', 'GridRenderContainer', 'i18nService', 'uiGridPinningConstants', function (gridUtil, GridRenderContainer, i18nService, uiGridPinningConstants) {
	    var service = {

	      initializeGrid: function (grid) {
	        service.defaultGridOptions(grid.options);

	        // Register a column builder to add new menu items for pinning left and right
	        grid.registerColumnBuilder(service.pinningColumnBuilder);

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.pinning.api:PublicApi
	         *
	         *  @description Public Api for pinning feature
	         */
	        var publicApi = {
	          events: {
	            pinning: {
	              /**
	               * @ngdoc event
	               * @name columnPin
	               * @eventOf ui.grid.pinning.api:PublicApi
	               * @description raised when column pin state has changed
	               * <pre>
	               *   gridApi.pinning.on.columnPinned(scope, function(colDef){})
	               * </pre>
	               * @param {object} colDef the column that was changed
	               * @param {string} container the render container the column is in ('left', 'right', '')
	               */
	              columnPinned: function(colDef, container) {
	              }
	            }
	          },
	          methods: {
	            pinning: {
	              /**
	               * @ngdoc function
	               * @name pinColumn
	               * @methodOf ui.grid.pinning.api:PublicApi
	               * @description pin column left, right, or none
	               * <pre>
	               *   gridApi.pinning.pinColumn(col, uiGridPinningConstants.container.LEFT)
	               * </pre>
	               * @param {gridColumn} col the column being pinned
	               * @param {string} container one of the recognised types
	               * from uiGridPinningConstants
	               */
	              pinColumn: function(col, container) {
	                service.pinColumn(grid, col, container);
	              }
	            }
	          }
	        };

	        grid.api.registerEventsFromObject(publicApi.events);
	        grid.api.registerMethodsFromObject(publicApi.methods);
	      },

	      defaultGridOptions: function (gridOptions) {
	        //default option to true unless it was explicitly set to false
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.pinning.api:GridOptions
	         *
	         *  @description GridOptions for pinning feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         */

	        /**
	         *  @ngdoc object
	         *  @name enablePinning
	         *  @propertyOf  ui.grid.pinning.api:GridOptions
	         *  @description Enable pinning for the entire grid.
	         *  <br/>Defaults to true
	         */
	        gridOptions.enablePinning = gridOptions.enablePinning !== false;

	      },

	      pinningColumnBuilder: function (colDef, col, gridOptions) {
	        //default to true unless gridOptions or colDef is explicitly false

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.pinning.api:ColumnDef
	         *
	         *  @description ColumnDef for pinning feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	         */

	        /**
	         *  @ngdoc object
	         *  @name enablePinning
	         *  @propertyOf  ui.grid.pinning.api:ColumnDef
	         *  @description Enable pinning for the individual column.
	         *  <br/>Defaults to true
	         */
	        colDef.enablePinning = colDef.enablePinning === undefined ? gridOptions.enablePinning : colDef.enablePinning;


	        /**
	         *  @ngdoc object
	         *  @name pinnedLeft
	         *  @propertyOf  ui.grid.pinning.api:ColumnDef
	         *  @description Column is pinned left when grid is rendered
	         *  <br/>Defaults to false
	         */

	        /**
	         *  @ngdoc object
	         *  @name pinnedRight
	         *  @propertyOf  ui.grid.pinning.api:ColumnDef
	         *  @description Column is pinned right when grid is rendered
	         *  <br/>Defaults to false
	         */
	        if (colDef.pinnedLeft) {
	          col.renderContainer = 'left';
	          col.grid.createLeftContainer();
	        }
	        else if (colDef.pinnedRight) {
	          col.renderContainer = 'right';
	          col.grid.createRightContainer();
	        }

	        if (!colDef.enablePinning) {
	          return;
	        }

	        var pinColumnLeftAction = {
	          name: 'ui.grid.pinning.pinLeft',
	          title: i18nService.get().pinning.pinLeft,
	          icon: 'ui-grid-icon-left-open',
	          shown: function () {
	            return typeof(this.context.col.renderContainer) === 'undefined' || !this.context.col.renderContainer || this.context.col.renderContainer !== 'left';
	          },
	          action: function () {
	            service.pinColumn(this.context.col.grid, this.context.col, uiGridPinningConstants.container.LEFT);
	          }
	        };

	        var pinColumnRightAction = {
	          name: 'ui.grid.pinning.pinRight',
	          title: i18nService.get().pinning.pinRight,
	          icon: 'ui-grid-icon-right-open',
	          shown: function () {
	            return typeof(this.context.col.renderContainer) === 'undefined' || !this.context.col.renderContainer || this.context.col.renderContainer !== 'right';
	          },
	          action: function () {
	            service.pinColumn(this.context.col.grid, this.context.col, uiGridPinningConstants.container.RIGHT);
	          }
	        };

	        var removePinAction = {
	          name: 'ui.grid.pinning.unpin',
	          title: i18nService.get().pinning.unpin,
	          icon: 'ui-grid-icon-cancel',
	          shown: function () {
	            return typeof(this.context.col.renderContainer) !== 'undefined' && this.context.col.renderContainer !== null && this.context.col.renderContainer !== 'body';
	          },
	          action: function () {
	            service.pinColumn(this.context.col.grid, this.context.col, uiGridPinningConstants.container.NONE);
	          }
	        };

	        if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.pinning.pinLeft')) {
	          col.menuItems.push(pinColumnLeftAction);
	        }
	        if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.pinning.pinRight')) {
	          col.menuItems.push(pinColumnRightAction);
	        }
	        if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.pinning.unpin')) {
	          col.menuItems.push(removePinAction);
	        }
	      },

	      pinColumn: function(grid, col, container) {
	        if (container === uiGridPinningConstants.container.NONE) {
	          col.renderContainer = null;
	          col.colDef.pinnedLeft = col.colDef.pinnedRight = false;
	        }
	        else {
	          col.renderContainer = container;
	          if (container === uiGridPinningConstants.container.LEFT) {
	            grid.createLeftContainer();
	          }
	          else if (container === uiGridPinningConstants.container.RIGHT) {
	            grid.createRightContainer();
	          }
	        }

	        grid.refresh()
	        .then(function() {
	          grid.api.pinning.raise.columnPinned( col.colDef, container );
	        });
	      }
	    };

	    return service;
	  }]);

	  module.directive('uiGridPinning', ['gridUtil', 'uiGridPinningService',
	    function (gridUtil, uiGridPinningService) {
	      return {
	        require: 'uiGrid',
	        scope: false,
	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	              uiGridPinningService.initializeGrid(uiGridCtrl.grid);
	            },
	            post: function ($scope, $elm, $attrs, uiGridCtrl) {
	            }
	          };
	        }
	      };
	    }]);


	})();

	(function(){
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.resizeColumns
	   * @description
	   *
	   * # ui.grid.resizeColumns
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module allows columns to be resized.
	   */
	  var module = angular.module('ui.grid.resizeColumns', ['ui.grid']);

	  module.service('uiGridResizeColumnsService', ['gridUtil', '$q', '$timeout',
	    function (gridUtil, $q, $timeout) {

	      var service = {
	        defaultGridOptions: function(gridOptions){
	          //default option to true unless it was explicitly set to false
	          /**
	           *  @ngdoc object
	           *  @name ui.grid.resizeColumns.api:GridOptions
	           *
	           *  @description GridOptions for resizeColumns feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	          /**
	           *  @ngdoc object
	           *  @name enableColumnResizing
	           *  @propertyOf  ui.grid.resizeColumns.api:GridOptions
	           *  @description Enable column resizing on the entire grid
	           *  <br/>Defaults to true
	           */
	          gridOptions.enableColumnResizing = gridOptions.enableColumnResizing !== false;

	          //legacy support
	          //use old name if it is explicitly false
	          if (gridOptions.enableColumnResize === false){
	            gridOptions.enableColumnResizing = false;
	          }
	        },

	        colResizerColumnBuilder: function (colDef, col, gridOptions) {

	          var promises = [];
	          /**
	           *  @ngdoc object
	           *  @name ui.grid.resizeColumns.api:ColumnDef
	           *
	           *  @description ColumnDef for resizeColumns feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	           */

	          /**
	           *  @ngdoc object
	           *  @name enableColumnResizing
	           *  @propertyOf  ui.grid.resizeColumns.api:ColumnDef
	           *  @description Enable column resizing on an individual column
	           *  <br/>Defaults to GridOptions.enableColumnResizing
	           */
	          //default to true unless gridOptions or colDef is explicitly false
	          colDef.enableColumnResizing = colDef.enableColumnResizing === undefined ? gridOptions.enableColumnResizing : colDef.enableColumnResizing;


	          //legacy support of old option name
	          if (colDef.enableColumnResize === false){
	            colDef.enableColumnResizing = false;
	          }

	          return $q.all(promises);
	        },

	        registerPublicApi: function (grid) {
	            /**
	             *  @ngdoc object
	             *  @name ui.grid.resizeColumns.api:PublicApi
	             *  @description Public Api for column resize feature.
	             */
	            var publicApi = {
	              events: {
	                /**
	                 * @ngdoc event
	                 * @name columnSizeChanged
	                 * @eventOf  ui.grid.resizeColumns.api:PublicApi
	                 * @description raised when column is resized
	                 * <pre>
	                 *      gridApi.colResizable.on.columnSizeChanged(scope,function(colDef, deltaChange){})
	                 * </pre>
	                 * @param {object} colDef the column that was resized
	                 * @param {integer} delta of the column size change
	                 */
	                colResizable: {
	                  columnSizeChanged: function (colDef, deltaChange) {
	                  }
	                }
	              }
	            };
	            grid.api.registerEventsFromObject(publicApi.events);
	        },

	        fireColumnSizeChanged: function (grid, colDef, deltaChange) {
	          $timeout(function () {
	            if ( grid.api.colResizable ){
	              grid.api.colResizable.raise.columnSizeChanged(colDef, deltaChange);
	            } else {
	              gridUtil.logError("The resizeable api is not registered, this may indicate that you've included the module but not added the 'ui-grid-resize-columns' directive to your grid definition.  Cannot raise any events.");
	            }
	          });
	        },

	        // get either this column, or the column next to this column, to resize,
	        // returns the column we're going to resize
	        findTargetCol: function(col, position, rtlMultiplier){
	          var renderContainer = col.getRenderContainer();

	          if (position === 'left') {
	            // Get the column to the left of this one
	            var colIndex = renderContainer.visibleColumnCache.indexOf(col);
	            return renderContainer.visibleColumnCache[colIndex - 1 * rtlMultiplier];
	          } else {
	            return col;
	          }
	        }

	      };

	      return service;

	    }]);


	  /**
	   * @ngdoc directive
	   * @name ui.grid.resizeColumns.directive:uiGridResizeColumns
	   * @element div
	   * @restrict A
	   * @description
	   * Enables resizing for all columns on the grid. If, for some reason, you want to use the ui-grid-resize-columns directive, but not allow column resizing, you can explicitly set the
	   * option to false. This prevents resizing for the entire grid, regardless of individual columnDef options.
	   *
	   * @example
	   <doc:example module="app">
	   <doc:source>
	   <script>
	   var app = angular.module('app', ['ui.grid', 'ui.grid.resizeColumns']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	          $scope.gridOpts = {
	            data: [
	              { "name": "Ethel Price", "gender": "female", "company": "Enersol" },
	              { "name": "Claudine Neal", "gender": "female", "company": "Sealoud" },
	              { "name": "Beryl Rice", "gender": "female", "company": "Velity" },
	              { "name": "Wilder Gonzales", "gender": "male", "company": "Geekko" }
	            ]
	          };
	        }]);
	   </script>

	   <div ng-controller="MainCtrl">
	   <div class="testGrid" ui-grid="gridOpts" ui-grid-resize-columns ></div>
	   </div>
	   </doc:source>
	   <doc:scenario>

	   </doc:scenario>
	   </doc:example>
	   */
	  module.directive('uiGridResizeColumns', ['gridUtil', 'uiGridResizeColumnsService', function (gridUtil, uiGridResizeColumnsService) {
	    return {
	      replace: true,
	      priority: 0,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            uiGridResizeColumnsService.defaultGridOptions(uiGridCtrl.grid.options);
	            uiGridCtrl.grid.registerColumnBuilder( uiGridResizeColumnsService.colResizerColumnBuilder);
	            uiGridResizeColumnsService.registerPublicApi(uiGridCtrl.grid);
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          }
	        };
	      }
	    };
	  }]);

	  // Extend the uiGridHeaderCell directive
	  module.directive('uiGridHeaderCell', ['gridUtil', '$templateCache', '$compile', '$q', 'uiGridResizeColumnsService', 'uiGridConstants', '$timeout', function (gridUtil, $templateCache, $compile, $q, uiGridResizeColumnsService, uiGridConstants, $timeout) {
	    return {
	      // Run after the original uiGridHeaderCell
	      priority: -10,
	      require: '^uiGrid',
	      // scope: false,
	      compile: function() {
	        return {
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	            var grid = uiGridCtrl.grid;

	            if (grid.options.enableColumnResizing) {
	              var columnResizerElm = $templateCache.get('ui-grid/columnResizer');

	              var rtlMultiplier = 1;
	              //when in RTL mode reverse the direction using the rtlMultiplier and change the position to left
	              if (grid.isRTL()) {
	                $scope.position = 'left';
	                rtlMultiplier = -1;
	              }

	              var displayResizers = function(){

	                // remove any existing resizers.
	                var resizers = $elm[0].getElementsByClassName('ui-grid-column-resizer');
	                for ( var i = 0; i < resizers.length; i++ ){
	                  angular.element(resizers[i]).remove();
	                }

	                // get the target column for the left resizer
	                var otherCol = uiGridResizeColumnsService.findTargetCol($scope.col, 'left', rtlMultiplier);
	                var renderContainer = $scope.col.getRenderContainer();

	                // Don't append the left resizer if this is the first column or the column to the left of this one has resizing disabled
	                if (otherCol && renderContainer.visibleColumnCache.indexOf($scope.col) !== 0 && otherCol.colDef.enableColumnResizing !== false) {
	                  var resizerLeft = angular.element(columnResizerElm).clone();
	                  resizerLeft.attr('position', 'left');

	                  $elm.prepend(resizerLeft);
	                  $compile(resizerLeft)($scope);
	                }

	                // Don't append the right resizer if this column has resizing disabled
	                if ($scope.col.colDef.enableColumnResizing !== false) {
	                  var resizerRight = angular.element(columnResizerElm).clone();
	                  resizerRight.attr('position', 'right');

	                  $elm.append(resizerRight);
	                  $compile(resizerRight)($scope);
	                }
	              };

	              displayResizers();

	              var waitDisplay = function(){
	                $timeout(displayResizers);
	              };

	              var dataChangeDereg = grid.registerDataChangeCallback( waitDisplay, [uiGridConstants.dataChange.COLUMN] );

	              $scope.$on( '$destroy', dataChangeDereg );
	            }
	          }
	        };
	      }
	    };
	  }]);



	  /**
	   * @ngdoc directive
	   * @name ui.grid.resizeColumns.directive:uiGridColumnResizer
	   * @element div
	   * @restrict A
	   *
	   * @description
	   * Draggable handle that controls column resizing.
	   *
	   * @example
	   <doc:example module="app">
	     <doc:source>
	       <script>
	        var app = angular.module('app', ['ui.grid', 'ui.grid.resizeColumns']);

	        app.controller('MainCtrl', ['$scope', function ($scope) {
	          $scope.gridOpts = {
	            enableColumnResizing: true,
	            data: [
	              { "name": "Ethel Price", "gender": "female", "company": "Enersol" },
	              { "name": "Claudine Neal", "gender": "female", "company": "Sealoud" },
	              { "name": "Beryl Rice", "gender": "female", "company": "Velity" },
	              { "name": "Wilder Gonzales", "gender": "male", "company": "Geekko" }
	            ]
	          };
	        }]);
	       </script>

	       <div ng-controller="MainCtrl">
	        <div class="testGrid" ui-grid="gridOpts"></div>
	       </div>
	     </doc:source>
	     <doc:scenario>
	      // TODO: e2e specs?

	      // TODO: post-resize a horizontal scroll event should be fired
	     </doc:scenario>
	   </doc:example>
	   */
	  module.directive('uiGridColumnResizer', ['$document', 'gridUtil', 'uiGridConstants', 'uiGridResizeColumnsService', function ($document, gridUtil, uiGridConstants, uiGridResizeColumnsService) {
	    var resizeOverlay = angular.element('<div class="ui-grid-resize-overlay"></div>');

	    var resizer = {
	      priority: 0,
	      scope: {
	        col: '=',
	        position: '@',
	        renderIndex: '='
	      },
	      require: '?^uiGrid',
	      link: function ($scope, $elm, $attrs, uiGridCtrl) {
	        var startX = 0,
	            x = 0,
	            gridLeft = 0,
	            rtlMultiplier = 1;

	        //when in RTL mode reverse the direction using the rtlMultiplier and change the position to left
	        if (uiGridCtrl.grid.isRTL()) {
	          $scope.position = 'left';
	          rtlMultiplier = -1;
	        }

	        if ($scope.position === 'left') {
	          $elm.addClass('left');
	        }
	        else if ($scope.position === 'right') {
	          $elm.addClass('right');
	        }

	        // Refresh the grid canvas
	        //   takes an argument representing the diff along the X-axis that the resize had
	        function refreshCanvas(xDiff) {
	          // Then refresh the grid canvas, rebuilding the styles so that the scrollbar updates its size
	          uiGridCtrl.grid.refreshCanvas(true).then( function() {
	            uiGridCtrl.grid.queueGridRefresh();
	          });
	        }

	        // Check that the requested width isn't wider than the maxWidth, or narrower than the minWidth
	        // Returns the new recommended with, after constraints applied
	        function constrainWidth(col, width){
	          var newWidth = width;

	          // If the new width would be less than the column's allowably minimum width, don't allow it
	          if (col.minWidth && newWidth < col.minWidth) {
	            newWidth = col.minWidth;
	          }
	          else if (col.maxWidth && newWidth > col.maxWidth) {
	            newWidth = col.maxWidth;
	          }

	          return newWidth;
	        }


	        /*
	         * Our approach to event handling aims to deal with both touch devices and mouse devices
	         * We register down handlers on both touch and mouse.  When a touchstart or mousedown event
	         * occurs, we register the corresponding touchmove/touchend, or mousemove/mouseend events.
	         *
	         * This way we can listen for both without worrying about the fact many touch devices also emulate
	         * mouse events - basically whichever one we hear first is what we'll go with.
	         */
	        function moveFunction(event, args) {
	          if (event.originalEvent) { event = event.originalEvent; }
	          event.preventDefault();

	          x = (event.targetTouches ? event.targetTouches[0] : event).clientX - gridLeft;

	          if (x < 0) { x = 0; }
	          else if (x > uiGridCtrl.grid.gridWidth) { x = uiGridCtrl.grid.gridWidth; }

	          var col = uiGridResizeColumnsService.findTargetCol($scope.col, $scope.position, rtlMultiplier);

	          // Don't resize if it's disabled on this column
	          if (col.colDef.enableColumnResizing === false) {
	            return;
	          }

	          if (!uiGridCtrl.grid.element.hasClass('column-resizing')) {
	            uiGridCtrl.grid.element.addClass('column-resizing');
	          }

	          // Get the diff along the X axis
	          var xDiff = x - startX;

	          // Get the width that this mouse would give the column
	          var newWidth = parseInt(col.drawnWidth + xDiff * rtlMultiplier, 10);

	          // check we're not outside the allowable bounds for this column
	          x = x + ( constrainWidth(col, newWidth) - newWidth ) * rtlMultiplier;

	          resizeOverlay.css({ left: x + 'px' });

	          uiGridCtrl.fireEvent(uiGridConstants.events.ITEM_DRAGGING);
	        }


	        function upFunction(event, args) {
	          if (event.originalEvent) { event = event.originalEvent; }
	          event.preventDefault();

	          uiGridCtrl.grid.element.removeClass('column-resizing');

	          resizeOverlay.remove();

	          // Resize the column
	          x = (event.changedTouches ? event.changedTouches[0] : event).clientX - gridLeft;
	          var xDiff = x - startX;

	          if (xDiff === 0) {
	            // no movement, so just reset event handlers, including turning back on both
	            // down events - we turned one off when this event started
	            offAllEvents();
	            onDownEvents();
	            return;
	          }

	          var col = uiGridResizeColumnsService.findTargetCol($scope.col, $scope.position, rtlMultiplier);

	          // Don't resize if it's disabled on this column
	          if (col.colDef.enableColumnResizing === false) {
	            return;
	          }

	          // Get the new width
	          var newWidth = parseInt(col.drawnWidth + xDiff * rtlMultiplier, 10);

	          // check we're not outside the allowable bounds for this column
	          col.width = constrainWidth(col, newWidth);
	          col.hasCustomWidth = true;

	          refreshCanvas(xDiff);

	          uiGridResizeColumnsService.fireColumnSizeChanged(uiGridCtrl.grid, col.colDef, xDiff);

	          // stop listening of up and move events - wait for next down
	          // reset the down events - we will have turned one off when this event started
	          offAllEvents();
	          onDownEvents();
	        }


	        var downFunction = function(event, args) {
	          if (event.originalEvent) { event = event.originalEvent; }
	          event.stopPropagation();

	          // Get the left offset of the grid
	          // gridLeft = uiGridCtrl.grid.element[0].offsetLeft;
	          gridLeft = uiGridCtrl.grid.element[0].getBoundingClientRect().left;

	          // Get the starting X position, which is the X coordinate of the click minus the grid's offset
	          startX = (event.targetTouches ? event.targetTouches[0] : event).clientX - gridLeft;

	          // Append the resizer overlay
	          uiGridCtrl.grid.element.append(resizeOverlay);

	          // Place the resizer overlay at the start position
	          resizeOverlay.css({ left: startX });

	          // Add handlers for move and up events - if we were mousedown then we listen for mousemove and mouseup, if
	          // we were touchdown then we listen for touchmove and touchup.  Also remove the handler for the equivalent
	          // down event - so if we're touchdown, then remove the mousedown handler until this event is over, if we're
	          // mousedown then remove the touchdown handler until this event is over, this avoids processing duplicate events
	          if ( event.type === 'touchstart' ){
	            $document.on('touchend', upFunction);
	            $document.on('touchmove', moveFunction);
	            $elm.off('mousedown', downFunction);
	          } else {
	            $document.on('mouseup', upFunction);
	            $document.on('mousemove', moveFunction);
	            $elm.off('touchstart', downFunction);
	          }
	        };

	        var onDownEvents = function() {
	          $elm.on('mousedown', downFunction);
	          $elm.on('touchstart', downFunction);
	        };

	        var offAllEvents = function() {
	          $document.off('mouseup', upFunction);
	          $document.off('touchend', upFunction);
	          $document.off('mousemove', moveFunction);
	          $document.off('touchmove', moveFunction);
	          $elm.off('mousedown', downFunction);
	          $elm.off('touchstart', downFunction);
	        };

	        onDownEvents();


	        // On doubleclick, resize to fit all rendered cells
	        var dblClickFn = function(event, args){
	          event.stopPropagation();

	          var col = uiGridResizeColumnsService.findTargetCol($scope.col, $scope.position, rtlMultiplier);

	          // Don't resize if it's disabled on this column
	          if (col.colDef.enableColumnResizing === false) {
	            return;
	          }

	          // Go through the rendered rows and find out the max size for the data in this column
	          var maxWidth = 0;
	          var xDiff = 0;

	          // Get the parent render container element
	          var renderContainerElm = gridUtil.closestElm($elm, '.ui-grid-render-container');

	          // Get the cell contents so we measure correctly. For the header cell we have to account for the sort icon and the menu buttons, if present
	          var cells = renderContainerElm.querySelectorAll('.' + uiGridConstants.COL_CLASS_PREFIX + col.uid + ' .ui-grid-cell-contents');
	          Array.prototype.forEach.call(cells, function (cell) {
	              // Get the cell width
	              // gridUtil.logDebug('width', gridUtil.elementWidth(cell));

	              // Account for the menu button if it exists
	              var menuButton;
	              if (angular.element(cell).parent().hasClass('ui-grid-header-cell')) {
	                menuButton = angular.element(cell).parent()[0].querySelectorAll('.ui-grid-column-menu-button');
	              }

	              gridUtil.fakeElement(cell, {}, function(newElm) {
	                // Make the element float since it's a div and can expand to fill its container
	                var e = angular.element(newElm);
	                e.attr('style', 'float: left');

	                var width = gridUtil.elementWidth(e);

	                if (menuButton) {
	                  var menuButtonWidth = gridUtil.elementWidth(menuButton);
	                  width = width + menuButtonWidth;
	                }

	                if (width > maxWidth) {
	                  maxWidth = width;
	                  xDiff = maxWidth - width;
	                }
	              });
	            });

	          // check we're not outside the allowable bounds for this column
	          col.width = constrainWidth(col, maxWidth);
	          col.hasCustomWidth = true;

	          refreshCanvas(xDiff);

	          uiGridResizeColumnsService.fireColumnSizeChanged(uiGridCtrl.grid, col.colDef, xDiff);        };
	        $elm.on('dblclick', dblClickFn);

	        $elm.on('$destroy', function() {
	          $elm.off('dblclick', dblClickFn);
	          offAllEvents();
	        });
	      }
	    };

	    return resizer;
	  }]);

	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.rowEdit
	   * @description
	   *
	   * # ui.grid.rowEdit
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module extends the edit feature to provide tracking and saving of rows
	   * of data.  The tutorial provides more information on how this feature is best
	   * used {@link tutorial/205_row_editable here}.
	   * <br/>
	   * This feature depends on usage of the ui-grid-edit feature, and also benefits
	   * from use of ui-grid-cellNav to provide the full spreadsheet-like editing
	   * experience
	   *
	   */

	  var module = angular.module('ui.grid.rowEdit', ['ui.grid', 'ui.grid.edit', 'ui.grid.cellNav']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.rowEdit.constant:uiGridRowEditConstants
	   *
	   *  @description constants available in row edit module
	   */
	  module.constant('uiGridRowEditConstants', {
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.rowEdit.service:uiGridRowEditService
	   *
	   *  @description Services for row editing features
	   */
	  module.service('uiGridRowEditService', ['$interval', '$q', 'uiGridConstants', 'uiGridRowEditConstants', 'gridUtil',
	    function ($interval, $q, uiGridConstants, uiGridRowEditConstants, gridUtil) {

	      var service = {

	        initializeGrid: function (scope, grid) {
	          /**
	           *  @ngdoc object
	           *  @name ui.grid.rowEdit.api:PublicApi
	           *
	           *  @description Public Api for rowEdit feature
	           */

	          grid.rowEdit = {};

	          var publicApi = {
	            events: {
	              rowEdit: {
	                /**
	                 * @ngdoc event
	                 * @eventOf ui.grid.rowEdit.api:PublicApi
	                 * @name saveRow
	                 * @description raised when a row is ready for saving.  Once your
	                 * row has saved you may need to use angular.extend to update the
	                 * data entity with any changed data from your save (for example,
	                 * lock version information if you're using optimistic locking,
	                 * or last update time/user information).
	                 *
	                 * Your method should call setSavePromise somewhere in the body before
	                 * returning control.  The feature will then wait, with the gridRow greyed out
	                 * whilst this promise is being resolved.
	                 *
	                 * <pre>
	                 *      gridApi.rowEdit.on.saveRow(scope,function(rowEntity){})
	                 * </pre>
	                 * and somewhere within the event handler:
	                 * <pre>
	                 *      gridApi.rowEdit.setSavePromise( rowEntity, savePromise)
	                 * </pre>
	                 * @param {object} rowEntity the options.data element that was edited
	                 * @returns {promise} Your saveRow method should return a promise, the
	                 * promise should either be resolved (implying successful save), or
	                 * rejected (implying an error).
	                 */
	                saveRow: function (rowEntity) {
	                }
	              }
	            },
	            methods: {
	              rowEdit: {
	                /**
	                 * @ngdoc method
	                 * @methodOf ui.grid.rowEdit.api:PublicApi
	                 * @name setSavePromise
	                 * @description Sets the promise associated with the row save, mandatory that
	                 * the saveRow event handler calls this method somewhere before returning.
	                 * <pre>
	                 *      gridApi.rowEdit.setSavePromise(rowEntity, savePromise)
	                 * </pre>
	                 * @param {object} rowEntity a data row from the grid for which a save has
	                 * been initiated
	                 * @param {promise} savePromise the promise that will be resolved when the
	                 * save is successful, or rejected if the save fails
	                 *
	                 */
	                setSavePromise: function ( rowEntity, savePromise) {
	                  service.setSavePromise(grid, rowEntity, savePromise);
	                },
	                /**
	                 * @ngdoc method
	                 * @methodOf ui.grid.rowEdit.api:PublicApi
	                 * @name getDirtyRows
	                 * @description Returns all currently dirty rows
	                 * <pre>
	                 *      gridApi.rowEdit.getDirtyRows(grid)
	                 * </pre>
	                 * @returns {array} An array of gridRows that are currently dirty
	                 *
	                 */
	                getDirtyRows: function () {
	                  return grid.rowEdit.dirtyRows ? grid.rowEdit.dirtyRows : [];
	                },
	                /**
	                 * @ngdoc method
	                 * @methodOf ui.grid.rowEdit.api:PublicApi
	                 * @name getErrorRows
	                 * @description Returns all currently errored rows
	                 * <pre>
	                 *      gridApi.rowEdit.getErrorRows(grid)
	                 * </pre>
	                 * @returns {array} An array of gridRows that are currently in error
	                 *
	                 */
	                getErrorRows: function () {
	                  return grid.rowEdit.errorRows ? grid.rowEdit.errorRows : [];
	                },
	                /**
	                 * @ngdoc method
	                 * @methodOf ui.grid.rowEdit.api:PublicApi
	                 * @name flushDirtyRows
	                 * @description Triggers a save event for all currently dirty rows, could
	                 * be used where user presses a save button or navigates away from the page
	                 * <pre>
	                 *      gridApi.rowEdit.flushDirtyRows(grid)
	                 * </pre>
	                 * @returns {promise} a promise that represents the aggregate of all
	                 * of the individual save promises - i.e. it will be resolved when all
	                 * the individual save promises have been resolved.
	                 *
	                 */
	                flushDirtyRows: function () {
	                  return service.flushDirtyRows(grid);
	                },

	                /**
	                 * @ngdoc method
	                 * @methodOf ui.grid.rowEdit.api:PublicApi
	                 * @name setRowsDirty
	                 * @description Sets each of the rows passed in dataRows
	                 * to be dirty.  note that if you have only just inserted the
	                 * rows into your data you will need to wait for a $digest cycle
	                 * before the gridRows are present - so often you would wrap this
	                 * call in a $interval or $timeout
	                 * <pre>
	                 *      $interval( function() {
	                 *        gridApi.rowEdit.setRowsDirty(myDataRows);
	                 *      }, 0, 1);
	                 * </pre>
	                 * @param {array} dataRows the data entities for which the gridRows
	                 * should be set dirty.
	                 *
	                 */
	                setRowsDirty: function ( dataRows) {
	                  service.setRowsDirty(grid, dataRows);
	                },

	                /**
	                 * @ngdoc method
	                 * @methodOf ui.grid.rowEdit.api:PublicApi
	                 * @name setRowsClean
	                 * @description Sets each of the rows passed in dataRows
	                 * to be clean, removing them from the dirty cache and the error cache,
	                 * and clearing the error flag and the dirty flag
	                 * <pre>
	                 *      var gridRows = $scope.gridApi.rowEdit.getDirtyRows();
	                 *      var dataRows = gridRows.map( function( gridRow ) { return gridRow.entity; });
	                 *      $scope.gridApi.rowEdit.setRowsClean( dataRows );
	                 * </pre>
	                 * @param {array} dataRows the data entities for which the gridRows
	                 * should be set clean.
	                 *
	                 */
	                setRowsClean: function ( dataRows) {
	                  service.setRowsClean(grid, dataRows);
	                }
	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);
	          grid.api.registerMethodsFromObject(publicApi.methods);

	          grid.api.core.on.renderingComplete( scope, function ( gridApi ) {
	            grid.api.edit.on.afterCellEdit( scope, service.endEditCell );
	            grid.api.edit.on.beginCellEdit( scope, service.beginEditCell );
	            grid.api.edit.on.cancelCellEdit( scope, service.cancelEditCell );

	            if ( grid.api.cellNav ) {
	              grid.api.cellNav.on.navigate( scope, service.navigate );
	            }
	          });

	        },

	        defaultGridOptions: function (gridOptions) {

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.rowEdit.api:GridOptions
	           *
	           *  @description Options for configuring the rowEdit feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name saveRow
	         * @description  Returns a function that saves the specified row from the grid,
	         * and returns a promise
	         * @param {object} grid the grid for which dirty rows should be flushed
	         * @param {GridRow} gridRow the row that should be saved
	         * @returns {function} the saveRow function returns a function.  That function
	         * in turn, when called, returns a promise relating to the save callback
	         */
	        saveRow: function ( grid, gridRow ) {
	          var self = this;

	          return function() {
	            gridRow.isSaving = true;

	            if ( gridRow.rowEditSavePromise ){
	              // don't save the row again if it's already saving - that causes stale object exceptions
	              return gridRow.rowEditSavePromise;
	            }

	            var promise = grid.api.rowEdit.raise.saveRow( gridRow.entity );

	            if ( gridRow.rowEditSavePromise ){
	              gridRow.rowEditSavePromise.then( self.processSuccessPromise( grid, gridRow ), self.processErrorPromise( grid, gridRow ));
	            } else {
	              gridUtil.logError( 'A promise was not returned when saveRow event was raised, either nobody is listening to event, or event handler did not return a promise' );
	            }
	            return promise;
	          };
	        },


	        /**
	         * @ngdoc method
	         * @methodOf  ui.grid.rowEdit.service:uiGridRowEditService
	         * @name setSavePromise
	         * @description Sets the promise associated with the row save, mandatory that
	         * the saveRow event handler calls this method somewhere before returning.
	         * <pre>
	         *      gridApi.rowEdit.setSavePromise(grid, rowEntity)
	         * </pre>
	         * @param {object} grid the grid for which dirty rows should be returned
	         * @param {object} rowEntity a data row from the grid for which a save has
	         * been initiated
	         * @param {promise} savePromise the promise that will be resolved when the
	         * save is successful, or rejected if the save fails
	         *
	         */
	        setSavePromise: function (grid, rowEntity, savePromise) {
	          var gridRow = grid.getRow( rowEntity );
	          gridRow.rowEditSavePromise = savePromise;
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name processSuccessPromise
	         * @description  Returns a function that processes the successful
	         * resolution of a save promise
	         * @param {object} grid the grid for which the promise should be processed
	         * @param {GridRow} gridRow the row that has been saved
	         * @returns {function} the success handling function
	         */
	        processSuccessPromise: function ( grid, gridRow ) {
	          var self = this;

	          return function() {
	            delete gridRow.isSaving;
	            delete gridRow.isDirty;
	            delete gridRow.isError;
	            delete gridRow.rowEditSaveTimer;
	            delete gridRow.rowEditSavePromise;
	            self.removeRow( grid.rowEdit.errorRows, gridRow );
	            self.removeRow( grid.rowEdit.dirtyRows, gridRow );
	          };
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name processErrorPromise
	         * @description  Returns a function that processes the failed
	         * resolution of a save promise
	         * @param {object} grid the grid for which the promise should be processed
	         * @param {GridRow} gridRow the row that is now in error
	         * @returns {function} the error handling function
	         */
	        processErrorPromise: function ( grid, gridRow ) {
	          return function() {
	            delete gridRow.isSaving;
	            delete gridRow.rowEditSaveTimer;
	            delete gridRow.rowEditSavePromise;

	            gridRow.isError = true;

	            if (!grid.rowEdit.errorRows){
	              grid.rowEdit.errorRows = [];
	            }
	            if (!service.isRowPresent( grid.rowEdit.errorRows, gridRow ) ){
	              grid.rowEdit.errorRows.push( gridRow );
	            }
	          };
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name removeRow
	         * @description  Removes a row from a cache of rows - either
	         * grid.rowEdit.errorRows or grid.rowEdit.dirtyRows.  If the row
	         * is not present silently does nothing.
	         * @param {array} rowArray the array from which to remove the row
	         * @param {GridRow} gridRow the row that should be removed
	         */
	        removeRow: function( rowArray, removeGridRow ){
	          if (typeof(rowArray) === 'undefined' || rowArray === null){
	            return;
	          }

	          rowArray.forEach( function( gridRow, index ){
	            if ( gridRow.uid === removeGridRow.uid ){
	              rowArray.splice( index, 1);
	            }
	          });
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name isRowPresent
	         * @description  Checks whether a row is already present
	         * in the given array
	         * @param {array} rowArray the array in which to look for the row
	         * @param {GridRow} gridRow the row that should be looked for
	         */
	        isRowPresent: function( rowArray, removeGridRow ){
	          var present = false;
	          rowArray.forEach( function( gridRow, index ){
	            if ( gridRow.uid === removeGridRow.uid ){
	              present = true;
	            }
	          });
	          return present;
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name flushDirtyRows
	         * @description Triggers a save event for all currently dirty rows, could
	         * be used where user presses a save button or navigates away from the page
	         * <pre>
	         *      gridApi.rowEdit.flushDirtyRows(grid)
	         * </pre>
	         * @param {object} grid the grid for which dirty rows should be flushed
	         * @returns {promise} a promise that represents the aggregate of all
	         * of the individual save promises - i.e. it will be resolved when all
	         * the individual save promises have been resolved.
	         *
	         */
	        flushDirtyRows: function(grid){
	          var promises = [];
	          grid.api.rowEdit.getDirtyRows().forEach( function( gridRow ){
	            service.saveRow( grid, gridRow )();
	            promises.push( gridRow.rowEditSavePromise );
	          });

	          return $q.all( promises );
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name endEditCell
	         * @description Receives an afterCellEdit event from the edit function,
	         * and sets flags as appropriate.  Only the rowEntity parameter
	         * is processed, although other params are available.  Grid
	         * is automatically provided by the gridApi.
	         * @param {object} rowEntity the data entity for which the cell
	         * was edited
	         */
	        endEditCell: function( rowEntity, colDef, newValue, previousValue ){
	          var grid = this.grid;
	          var gridRow = grid.getRow( rowEntity );
	          if ( !gridRow ){ gridUtil.logError( 'Unable to find rowEntity in grid data, dirty flag cannot be set' ); return; }

	          if ( newValue !== previousValue || gridRow.isDirty ){
	            if ( !grid.rowEdit.dirtyRows ){
	              grid.rowEdit.dirtyRows = [];
	            }

	            if ( !gridRow.isDirty ){
	              gridRow.isDirty = true;
	              grid.rowEdit.dirtyRows.push( gridRow );
	            }

	            delete gridRow.isError;

	            service.considerSetTimer( grid, gridRow );
	          }
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name beginEditCell
	         * @description Receives a beginCellEdit event from the edit function,
	         * and cancels any rowEditSaveTimers if present, as the user is still editing
	         * this row.  Only the rowEntity parameter
	         * is processed, although other params are available.  Grid
	         * is automatically provided by the gridApi.
	         * @param {object} rowEntity the data entity for which the cell
	         * editing has commenced
	         */
	        beginEditCell: function( rowEntity, colDef ){
	          var grid = this.grid;
	          var gridRow = grid.getRow( rowEntity );
	          if ( !gridRow ){ gridUtil.logError( 'Unable to find rowEntity in grid data, timer cannot be cancelled' ); return; }

	          service.cancelTimer( grid, gridRow );
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name cancelEditCell
	         * @description Receives a cancelCellEdit event from the edit function,
	         * and if the row was already dirty, restarts the save timer.  If the row
	         * was not already dirty, then it's not dirty now either and does nothing.
	         *
	         * Only the rowEntity parameter
	         * is processed, although other params are available.  Grid
	         * is automatically provided by the gridApi.
	         *
	         * @param {object} rowEntity the data entity for which the cell
	         * editing was cancelled
	         */
	        cancelEditCell: function( rowEntity, colDef ){
	          var grid = this.grid;
	          var gridRow = grid.getRow( rowEntity );
	          if ( !gridRow ){ gridUtil.logError( 'Unable to find rowEntity in grid data, timer cannot be set' ); return; }

	          service.considerSetTimer( grid, gridRow );
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name navigate
	         * @description cellNav tells us that the selected cell has changed.  If
	         * the new row had a timer running, then stop it similar to in a beginCellEdit
	         * call.  If the old row is dirty and not the same as the new row, then
	         * start a timer on it.
	         * @param {object} newRowCol the row and column that were selected
	         * @param {object} oldRowCol the row and column that was left
	         *
	         */
	        navigate: function( newRowCol, oldRowCol ){
	          var grid = this.grid;
	          if ( newRowCol.row.rowEditSaveTimer ){
	            service.cancelTimer( grid, newRowCol.row );
	          }

	          if ( oldRowCol && oldRowCol.row && oldRowCol.row !== newRowCol.row ){
	            service.considerSetTimer( grid, oldRowCol.row );
	          }
	        },


	        /**
	         * @ngdoc property
	         * @propertyOf ui.grid.rowEdit.api:GridOptions
	         * @name rowEditWaitInterval
	         * @description How long the grid should wait for another change on this row
	         * before triggering a save (in milliseconds).  If set to -1, then saves are
	         * never triggered by timer (implying that the user will call flushDirtyRows()
	         * manually)
	         *
	         * @example
	         * Setting the wait interval to 4 seconds
	         * <pre>
	         *   $scope.gridOptions = { rowEditWaitInterval: 4000 }
	         * </pre>
	         *
	         */
	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name considerSetTimer
	         * @description Consider setting a timer on this row (if it is dirty).  if there is a timer running
	         * on the row and the row isn't currently saving, cancel it, using cancelTimer, then if the row is
	         * dirty and not currently saving then set a new timer
	         * @param {object} grid the grid for which we are processing
	         * @param {GridRow} gridRow the row for which the timer should be adjusted
	         *
	         */
	        considerSetTimer: function( grid, gridRow ){
	          service.cancelTimer( grid, gridRow );

	          if ( gridRow.isDirty && !gridRow.isSaving ){
	            if ( grid.options.rowEditWaitInterval !== -1 ){
	              var waitTime = grid.options.rowEditWaitInterval ? grid.options.rowEditWaitInterval : 2000;
	              gridRow.rowEditSaveTimer = $interval( service.saveRow( grid, gridRow ), waitTime, 1);
	            }
	          }
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name cancelTimer
	         * @description cancel the $interval for any timer running on this row
	         * then delete the timer itself
	         * @param {object} grid the grid for which we are processing
	         * @param {GridRow} gridRow the row for which the timer should be adjusted
	         *
	         */
	        cancelTimer: function( grid, gridRow ){
	          if ( gridRow.rowEditSaveTimer && !gridRow.isSaving ){
	            $interval.cancel(gridRow.rowEditSaveTimer);
	            delete gridRow.rowEditSaveTimer;
	          }
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name setRowsDirty
	         * @description Sets each of the rows passed in dataRows
	         * to be dirty.  note that if you have only just inserted the
	         * rows into your data you will need to wait for a $digest cycle
	         * before the gridRows are present - so often you would wrap this
	         * call in a $interval or $timeout
	         * <pre>
	         *      $interval( function() {
	         *        gridApi.rowEdit.setRowsDirty( myDataRows);
	         *      }, 0, 1);
	         * </pre>
	         * @param {object} grid the grid for which rows should be set dirty
	         * @param {array} dataRows the data entities for which the gridRows
	         * should be set dirty.
	         *
	         */
	        setRowsDirty: function( grid, myDataRows ) {
	          var gridRow;
	          myDataRows.forEach( function( value, index ){
	            gridRow = grid.getRow( value );
	            if ( gridRow ){
	              if ( !grid.rowEdit.dirtyRows ){
	                grid.rowEdit.dirtyRows = [];
	              }

	              if ( !gridRow.isDirty ){
	                gridRow.isDirty = true;
	                grid.rowEdit.dirtyRows.push( gridRow );
	              }

	              delete gridRow.isError;

	              service.considerSetTimer( grid, gridRow );
	            } else {
	              gridUtil.logError( "requested row not found in rowEdit.setRowsDirty, row was: " + value );
	            }
	          });
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name setRowsClean
	         * @description Sets each of the rows passed in dataRows
	         * to be clean, clearing the dirty flag and the error flag, and removing
	         * the rows from the dirty and error caches.
	         * @param {object} grid the grid for which rows should be set clean
	         * @param {array} dataRows the data entities for which the gridRows
	         * should be set clean.
	         *
	         */
	        setRowsClean: function( grid, myDataRows ) {
	          var gridRow;

	          myDataRows.forEach( function( value, index ){
	            gridRow = grid.getRow( value );
	            if ( gridRow ){
	              delete gridRow.isDirty;
	              service.removeRow( grid.rowEdit.dirtyRows, gridRow );
	              service.cancelTimer( grid, gridRow );

	              delete gridRow.isError;
	              service.removeRow( grid.rowEdit.errorRows, gridRow );
	            } else {
	              gridUtil.logError( "requested row not found in rowEdit.setRowsClean, row was: " + value );
	            }
	          });
	        }

	      };

	      return service;

	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.rowEdit.directive:uiGridEdit
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds row editing features to the ui-grid-edit directive.
	   *
	   */
	  module.directive('uiGridRowEdit', ['gridUtil', 'uiGridRowEditService', 'uiGridEditConstants',
	  function (gridUtil, uiGridRowEditService, uiGridEditConstants) {
	    return {
	      replace: true,
	      priority: 0,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            uiGridRowEditService.initializeGrid($scope, uiGridCtrl.grid);
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          }
	        };
	      }
	    };
	  }]);


	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.rowEdit.directive:uiGridViewport
	   *  @element div
	   *
	   *  @description Stacks on top of ui.grid.uiGridViewport to alter the attributes used
	   *  for the grid row to allow coloring of saving and error rows
	   */
	  module.directive('uiGridViewport',
	    ['$compile', 'uiGridConstants', 'gridUtil', '$parse',
	      function ($compile, uiGridConstants, gridUtil, $parse) {
	        return {
	          priority: -200, // run after default  directive
	          scope: false,
	          compile: function ($elm, $attrs) {
	            var rowRepeatDiv = angular.element($elm.children().children()[0]);

	            var existingNgClass = rowRepeatDiv.attr("ng-class");
	            var newNgClass = '';
	            if ( existingNgClass ) {
	              newNgClass = existingNgClass.slice(0, -1) + ", 'ui-grid-row-dirty': row.isDirty, 'ui-grid-row-saving': row.isSaving, 'ui-grid-row-error': row.isError}";
	            } else {
	              newNgClass = "{'ui-grid-row-dirty': row.isDirty, 'ui-grid-row-saving': row.isSaving, 'ui-grid-row-error': row.isError}";
	            }
	            rowRepeatDiv.attr("ng-class", newNgClass);

	            return {
	              pre: function ($scope, $elm, $attrs, controllers) {

	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	              }
	            };
	          }
	        };
	      }]);

	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.saveState
	   * @description
	   *
	   * # ui.grid.saveState
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module provides the ability to save the grid state, and restore
	   * it when the user returns to the page.
	   *
	   * No UI is provided, the caller should provide their own UI/buttons
	   * as appropriate. Usually the navigate events would be used to save
	   * the grid state and restore it.
	   *
	   * <br/>
	   * <br/>
	   *
	   * <div doc-module-components="ui.grid.save-state"></div>
	   */

	  var module = angular.module('ui.grid.saveState', ['ui.grid', 'ui.grid.selection', 'ui.grid.cellNav', 'ui.grid.grouping', 'ui.grid.pinning', 'ui.grid.treeView']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.saveState.constant:uiGridSaveStateConstants
	   *
	   *  @description constants available in save state module
	   */

	  module.constant('uiGridSaveStateConstants', {
	    featureName: 'saveState'
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.saveState.service:uiGridSaveStateService
	   *
	   *  @description Services for saveState feature
	   */
	  module.service('uiGridSaveStateService', ['$q', 'uiGridSaveStateConstants', 'gridUtil', '$compile', '$interval', 'uiGridConstants',
	    function ($q, uiGridSaveStateConstants, gridUtil, $compile, $interval, uiGridConstants ) {

	      var service = {

	        initializeGrid: function (grid) {

	          //add feature namespace and any properties to grid for needed state
	          grid.saveState = {};
	          this.defaultGridOptions(grid.options);

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.saveState.api:PublicApi
	           *
	           *  @description Public Api for saveState feature
	           */
	          var publicApi = {
	            events: {
	              saveState: {
	              }
	            },
	            methods: {
	              saveState: {
	                /**
	                 * @ngdoc function
	                 * @name save
	                 * @methodOf  ui.grid.saveState.api:PublicApi
	                 * @description Packages the current state of the grid into
	                 * an object, and provides it to the user for saving
	                 * @returns {object} the state as a javascript object that can be saved
	                 */
	                save: function () {
	                  return service.save(grid);
	                },
	                /**
	                 * @ngdoc function
	                 * @name restore
	                 * @methodOf  ui.grid.saveState.api:PublicApi
	                 * @description Restores the provided state into the grid
	                 * @param {scope} $scope a scope that we can broadcast on
	                 * @param {object} state the state that should be restored into the grid
	                 */
	                restore: function ( $scope, state) {
	                  service.restore(grid, $scope, state);
	                }
	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);

	          grid.api.registerMethodsFromObject(publicApi.methods);

	        },

	        defaultGridOptions: function (gridOptions) {
	          //default option to true unless it was explicitly set to false
	          /**
	           * @ngdoc object
	           * @name ui.grid.saveState.api:GridOptions
	           *
	           * @description GridOptions for saveState feature, these are available to be
	           * set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */
	          /**
	           * @ngdoc object
	           * @name saveWidths
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the current column widths.  Note that unless
	           * you've provided the user with some way to resize their columns (say
	           * the resize columns feature), then this makes little sense.
	           * <br/>Defaults to true
	           */
	          gridOptions.saveWidths = gridOptions.saveWidths !== false;
	          /**
	           * @ngdoc object
	           * @name saveOrder
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Restore the current column order.  Note that unless
	           * you've provided the user with some way to reorder their columns (for
	           * example the move columns feature), this makes little sense.
	           * <br/>Defaults to true
	           */
	          gridOptions.saveOrder = gridOptions.saveOrder !== false;
	          /**
	           * @ngdoc object
	           * @name saveScroll
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the current scroll position.  Note that this
	           * is saved as the percentage of the grid scrolled - so if your
	           * user returns to a grid with a significantly different number of
	           * rows (perhaps some data has been deleted) then the scroll won't
	           * actually show the same rows as before.  If you want to scroll to
	           * a specific row then you should instead use the saveFocus option, which
	           * is the default.
	           *
	           * Note that this element will only be saved if the cellNav feature is
	           * enabled
	           * <br/>Defaults to false
	           */
	          gridOptions.saveScroll = gridOptions.saveScroll === true;
	          /**
	           * @ngdoc object
	           * @name saveFocus
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the current focused cell.  On returning
	           * to this focused cell we'll also scroll.  This option is
	           * preferred to the saveScroll option, so is set to true by
	           * default.  If saveScroll is set to true then this option will
	           * be disabled.
	           *
	           * By default this option saves the current row number and column
	           * number, and returns to that row and column.  However, if you define
	           * a saveRowIdentity function, then it will return you to the currently
	           * selected column within that row (in a business sense - so if some
	           * rows have been deleted, it will still find the same data, presuming it
	           * still exists in the list.  If it isn't in the list then it will instead
	           * return to the same row number - i.e. scroll percentage)
	           *
	           * Note that this option will do nothing if the cellNav
	           * feature is not enabled.
	           *
	           * <br/>Defaults to true (unless saveScroll is true)
	           */
	          gridOptions.saveFocus = gridOptions.saveScroll !== true && gridOptions.saveFocus !== false;
	          /**
	           * @ngdoc object
	           * @name saveRowIdentity
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description A function that can be called, passing in a rowEntity,
	           * and that will return a unique id for that row.  This might simply
	           * return the `id` field from that row (if you have one), or it might
	           * concatenate some fields within the row to make a unique value.
	           *
	           * This value will be used to find the same row again and set the focus
	           * to it, if it exists when we return.
	           *
	           * <br/>Defaults to undefined
	           */
	          /**
	           * @ngdoc object
	           * @name saveVisible
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save whether or not columns are visible.
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.saveVisible = gridOptions.saveVisible !== false;
	          /**
	           * @ngdoc object
	           * @name saveSort
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the current sort state for each column
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.saveSort = gridOptions.saveSort !== false;
	          /**
	           * @ngdoc object
	           * @name saveFilter
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the current filter state for each column
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.saveFilter = gridOptions.saveFilter !== false;
	          /**
	           * @ngdoc object
	           * @name saveSelection
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the currently selected rows.  If the `saveRowIdentity` callback
	           * is defined, then it will save the id of the row and select that.  If not, then
	           * it will attempt to select the rows by row number, which will give the wrong results
	           * if the data set has changed in the mean-time.
	           *
	           * Note that this option only does anything
	           * if the selection feature is enabled.
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.saveSelection = gridOptions.saveSelection !== false;
	          /**
	           * @ngdoc object
	           * @name saveGrouping
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the grouping configuration.  If set to true and the
	           * grouping feature is not enabled then does nothing.
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.saveGrouping = gridOptions.saveGrouping !== false;
	          /**
	           * @ngdoc object
	           * @name saveGroupingExpandedStates
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the grouping row expanded states.  If set to true and the
	           * grouping feature is not enabled then does nothing.
	           *
	           * This can be quite a bit of data, in many cases you wouldn't want to save this
	           * information.
	           *
	           * <br/>Defaults to false
	           */
	          gridOptions.saveGroupingExpandedStates = gridOptions.saveGroupingExpandedStates === true;
	          /**
	           * @ngdoc object
	           * @name savePinning
	           * @propertyOf ui.grid.saveState.api:GridOptions
	           * @description Save pinning state for columns.
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.savePinning = gridOptions.savePinning !== false;
	          /**
	           * @ngdoc object
	           * @name saveTreeView
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the treeView configuration.  If set to true and the
	           * treeView feature is not enabled then does nothing.
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.saveTreeView = gridOptions.saveTreeView !== false;
	        },



	        /**
	         * @ngdoc function
	         * @name save
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the current grid state into an object, and
	         * passes that object back to the caller
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {object} the state ready to be saved
	         */
	        save: function (grid) {
	          var savedState = {};

	          savedState.columns = service.saveColumns( grid );
	          savedState.scrollFocus = service.saveScrollFocus( grid );
	          savedState.selection = service.saveSelection( grid );
	          savedState.grouping = service.saveGrouping( grid );
	          savedState.treeView = service.saveTreeView( grid );
	          savedState.pagination = service.savePagination( grid );

	          return savedState;
	        },


	        /**
	         * @ngdoc function
	         * @name restore
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Applies the provided state to the grid
	         *
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {scope} $scope a scope that we can broadcast on
	         * @param {object} state the state we'd like to restore
	         */
	        restore: function( grid, $scope, state ){
	          if ( state.columns ) {
	            service.restoreColumns( grid, state.columns );
	          }

	          if ( state.scrollFocus ){
	            service.restoreScrollFocus( grid, $scope, state.scrollFocus );
	          }

	          if ( state.selection ){
	            service.restoreSelection( grid, state.selection );
	          }

	          if ( state.grouping ){
	            service.restoreGrouping( grid, state.grouping );
	          }

	          if ( state.treeView ){
	            service.restoreTreeView( grid, state.treeView );
	          }

	          if ( state.pagination ){
	            service.restorePagination( grid, state.pagination );
	          }

	          grid.refresh();
	        },


	        /**
	         * @ngdoc function
	         * @name saveColumns
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the column setup, including sort, filters, ordering,
	         * pinning and column widths.
	         *
	         * Works through the current columns, storing them in order.  Stores the
	         * column name, then the visible flag, width, sort and filters for each column.
	         *
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {array} the columns state ready to be saved
	         */
	        saveColumns: function( grid ) {
	          var columns = [];
	          grid.getOnlyDataColumns().forEach( function( column ) {
	            var savedColumn = {};
	            savedColumn.name = column.name;

	            if ( grid.options.saveVisible ){
	              savedColumn.visible = column.visible;
	            }

	            if ( grid.options.saveWidths ){
	              savedColumn.width = column.width;
	            }

	            // these two must be copied, not just pointed too - otherwise our saved state is pointing to the same object as current state
	            if ( grid.options.saveSort ){
	              savedColumn.sort = angular.copy( column.sort );
	            }

	            if ( grid.options.saveFilter ){
	              savedColumn.filters = [];
	              column.filters.forEach( function( filter ){
	                var copiedFilter = {};
	                angular.forEach( filter, function( value, key) {
	                  if ( key !== 'condition' && key !== '$$hashKey' && key !== 'placeholder'){
	                    copiedFilter[key] = value;
	                  }
	                });
	                savedColumn.filters.push(copiedFilter);
	              });
	            }

	            if ( !!grid.api.pinning && grid.options.savePinning ){
	              savedColumn.pinned = column.renderContainer ? column.renderContainer : '';
	            }

	            columns.push( savedColumn );
	          });

	          return columns;
	        },


	        /**
	         * @ngdoc function
	         * @name saveScrollFocus
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the currently scroll or focus.
	         *
	         * If cellNav isn't present then does nothing - we can't return
	         * to the scroll position without cellNav anyway.
	         *
	         * If the cellNav module is present, and saveFocus is true, then
	         * it saves the currently focused cell.  If rowIdentity is present
	         * then saves using rowIdentity, otherwise saves visibleRowNum.
	         *
	         * If the cellNav module is not present, and saveScroll is true, then
	         * it approximates the current scroll row and column, and saves that.
	         *
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {object} the selection state ready to be saved
	         */
	        saveScrollFocus: function( grid ){
	          if ( !grid.api.cellNav ){
	            return {};
	          }

	          var scrollFocus = {};
	          if ( grid.options.saveFocus ){
	            scrollFocus.focus = true;
	            var rowCol = grid.api.cellNav.getFocusedCell();
	            if ( rowCol !== null ) {
	              if ( rowCol.col !== null ){
	                scrollFocus.colName = rowCol.col.colDef.name;
	              }
	              if ( rowCol.row !== null ){
	                scrollFocus.rowVal = service.getRowVal( grid, rowCol.row );
	              }
	            }
	          }

	          if ( grid.options.saveScroll || grid.options.saveFocus && !scrollFocus.colName && !scrollFocus.rowVal ) {
	            scrollFocus.focus = false;
	            if ( grid.renderContainers.body.prevRowScrollIndex ){
	              scrollFocus.rowVal = service.getRowVal( grid, grid.renderContainers.body.visibleRowCache[ grid.renderContainers.body.prevRowScrollIndex ]);
	            }

	            if ( grid.renderContainers.body.prevColScrollIndex ){
	              scrollFocus.colName = grid.renderContainers.body.visibleColumnCache[ grid.renderContainers.body.prevColScrollIndex ].name;
	            }
	          }

	          return scrollFocus;
	        },


	        /**
	         * @ngdoc function
	         * @name saveSelection
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the currently selected rows, if the selection feature is enabled
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {array} the selection state ready to be saved
	         */
	        saveSelection: function( grid ){
	          if ( !grid.api.selection || !grid.options.saveSelection ){
	            return [];
	          }

	          var selection = grid.api.selection.getSelectedGridRows().map( function( gridRow ) {
	            return service.getRowVal( grid, gridRow );
	          });

	          return selection;
	        },


	        /**
	         * @ngdoc function
	         * @name saveGrouping
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the grouping state, if the grouping feature is enabled
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {object} the grouping state ready to be saved
	         */
	        saveGrouping: function( grid ){
	          if ( !grid.api.grouping || !grid.options.saveGrouping ){
	            return {};
	          }

	          return grid.api.grouping.getGrouping( grid.options.saveGroupingExpandedStates );
	        },


	        /**
	         * @ngdoc function
	         * @name savePagination
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the pagination state, if the pagination feature is enabled
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {object} the pagination state ready to be saved
	         */
	        savePagination: function( grid ) {
	          if ( !grid.api.pagination || !grid.options.paginationPageSize ){
	            return {};
	          }

	          return {
	            paginationCurrentPage: grid.options.paginationCurrentPage,
	            paginationPageSize: grid.options.paginationPageSize
	          };
	        },


	        /**
	         * @ngdoc function
	         * @name saveTreeView
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the tree view state, if the tree feature is enabled
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {object} the tree view state ready to be saved
	         */
	        saveTreeView: function( grid ){
	          if ( !grid.api.treeView || !grid.options.saveTreeView ){
	            return {};
	          }

	          return grid.api.treeView.getTreeView();
	        },


	        /**
	         * @ngdoc function
	         * @name getRowVal
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Helper function that gets either the rowNum or
	         * the saveRowIdentity, given a gridRow
	         * @param {Grid} grid the grid the row is in
	         * @param {GridRow} gridRow the row we want the rowNum for
	         * @returns {object} an object containing { identity: true/false, row: rowNumber/rowIdentity }
	         *
	         */
	        getRowVal: function( grid, gridRow ){
	          if ( !gridRow ) {
	            return null;
	          }

	          var rowVal = {};
	          if ( grid.options.saveRowIdentity ){
	            rowVal.identity = true;
	            rowVal.row = grid.options.saveRowIdentity( gridRow.entity );
	          } else {
	            rowVal.identity = false;
	            rowVal.row = grid.renderContainers.body.visibleRowCache.indexOf( gridRow );
	          }
	          return rowVal;
	        },


	        /**
	         * @ngdoc function
	         * @name restoreColumns
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Restores the columns, including order, visible, width,
	         * pinning, sort and filters.
	         *
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {object} columnsState the list of columns we had before, with their state
	         */
	        restoreColumns: function( grid, columnsState ){
	          var isSortChanged = false;

	          columnsState.forEach( function( columnState, index ) {
	            var currentCol = grid.getColumn( columnState.name );

	            if ( currentCol && !grid.isRowHeaderColumn(currentCol) ){
	              if ( grid.options.saveVisible &&
	                   ( currentCol.visible !== columnState.visible ||
	                     currentCol.colDef.visible !== columnState.visible ) ){
	                currentCol.visible = columnState.visible;
	                currentCol.colDef.visible = columnState.visible;
	                grid.api.core.raise.columnVisibilityChanged(currentCol);
	              }

	              if ( grid.options.saveWidths && currentCol.width !== columnState.width){
	                currentCol.width = columnState.width;
	                currentCol.hasCustomWidth = true;
	              }

	              if ( grid.options.saveSort &&
	                   !angular.equals(currentCol.sort, columnState.sort) &&
	                   !( currentCol.sort === undefined && angular.isEmpty(columnState.sort) ) ){
	                currentCol.sort = angular.copy( columnState.sort );
	                isSortChanged = true;
	              }

	              if ( grid.options.saveFilter &&
	                   !angular.equals(currentCol.filters, columnState.filters ) ){
	                columnState.filters.forEach( function( filter, index ){
	                  angular.extend( currentCol.filters[index], filter );
	                  if ( typeof(filter.term) === 'undefined' || filter.term === null ){
	                    delete currentCol.filters[index].term;
	                  }
	                });
	                grid.api.core.raise.filterChanged();
	              }

	              if ( !!grid.api.pinning && grid.options.savePinning && currentCol.renderContainer !== columnState.pinned ){
	                grid.api.pinning.pinColumn(currentCol, columnState.pinned);
	              }

	              var currentIndex = grid.getOnlyDataColumns().indexOf( currentCol );
	              if (currentIndex !== -1) {
	                if (grid.options.saveOrder && currentIndex !== index) {
	                  var column = grid.columns.splice(currentIndex + grid.rowHeaderColumns.length, 1)[0];
	                  grid.columns.splice(index + grid.rowHeaderColumns.length, 0, column);
	                }
	              }
	            }
	          });

	          if ( isSortChanged ) {
	            grid.api.core.raise.sortChanged( grid, grid.getColumnSorting() );
	          }
	        },


	        /**
	         * @ngdoc function
	         * @name restoreScrollFocus
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Scrolls to the position that was saved.  If focus is true, then
	         * sets focus to the specified row/col.  If focus is false, then scrolls to the
	         * specified row/col.
	         *
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {scope} $scope a scope that we can broadcast on
	         * @param {object} scrollFocusState the scroll/focus state ready to be restored
	         */
	        restoreScrollFocus: function( grid, $scope, scrollFocusState ){
	          if ( !grid.api.cellNav ){
	            return;
	          }

	          var colDef, row;
	          if ( scrollFocusState.colName ){
	            var colDefs = grid.options.columnDefs.filter( function( colDef ) { return colDef.name === scrollFocusState.colName; });
	            if ( colDefs.length > 0 ){
	              colDef = colDefs[0];
	            }
	          }

	          if ( scrollFocusState.rowVal && scrollFocusState.rowVal.row ){
	            if ( scrollFocusState.rowVal.identity ){
	              row = service.findRowByIdentity( grid, scrollFocusState.rowVal );
	            } else {
	              row = grid.renderContainers.body.visibleRowCache[ scrollFocusState.rowVal.row ];
	            }
	          }

	          var entity = row && row.entity ? row.entity : null ;

	          if ( colDef || entity ) {
	            if (scrollFocusState.focus ){
	              grid.api.cellNav.scrollToFocus( entity, colDef );
	            } else {
	              grid.scrollTo( entity, colDef );
	            }
	          }
	        },


	        /**
	         * @ngdoc function
	         * @name restoreSelection
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Selects the rows that are provided in the selection
	         * state.  If you are using `saveRowIdentity` and more than one row matches the identity
	         * function then only the first is selected.
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {object} selectionState the selection state ready to be restored
	         */
	        restoreSelection: function( grid, selectionState ){
	          if ( !grid.api.selection ){
	            return;
	          }

	          grid.api.selection.clearSelectedRows();

	          selectionState.forEach(  function( rowVal ) {
	            if ( rowVal.identity ){
	              var foundRow = service.findRowByIdentity( grid, rowVal );

	              if ( foundRow ){
	                grid.api.selection.selectRow( foundRow.entity );
	              }

	            } else {
	              grid.api.selection.selectRowByVisibleIndex( rowVal.row );
	            }
	          });
	        },


	        /**
	         * @ngdoc function
	         * @name restoreGrouping
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Restores the grouping configuration, if the grouping feature
	         * is enabled.
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {object} groupingState the grouping state ready to be restored
	         */
	        restoreGrouping: function( grid, groupingState ){
	          if ( !grid.api.grouping || typeof(groupingState) === 'undefined' || groupingState === null || angular.equals(groupingState, {}) ){
	            return;
	          }

	          grid.api.grouping.setGrouping( groupingState );
	        },

	        /**
	         * @ngdoc function
	         * @name restoreTreeView
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Restores the tree view configuration, if the tree view feature
	         * is enabled.
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {object} treeViewState the tree view state ready to be restored
	         */
	        restoreTreeView: function( grid, treeViewState ){
	          if ( !grid.api.treeView || typeof(treeViewState) === 'undefined' || treeViewState === null || angular.equals(treeViewState, {}) ){
	            return;
	          }

	          grid.api.treeView.setTreeView( treeViewState );
	        },

	        /**
	         * @ngdoc function
	         * @name restorePagination
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Restores the pagination information, if pagination is enabled.
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {object} pagination the pagination object to be restored
	         * @param {number} pagination.paginationCurrentPage the page number to restore
	         * @param {number} pagination.paginationPageSize the number of items displayed per page
	         */
	        restorePagination: function( grid, pagination ){
	          if ( !grid.api.pagination || !grid.options.paginationPageSize ){
	            return;
	          }

	          grid.options.paginationCurrentPage = pagination.paginationCurrentPage;
	          grid.options.paginationPageSize = pagination.paginationPageSize;
	        },

	        /**
	         * @ngdoc function
	         * @name findRowByIdentity
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Finds a row given it's identity value, returns the first found row
	         * if any are found, otherwise returns null if no rows are found.
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {object} rowVal the row we'd like to find
	         * @returns {gridRow} the found row, or null if none found
	         */
	        findRowByIdentity: function( grid, rowVal ){
	          if ( !grid.options.saveRowIdentity ){
	            return null;
	          }

	          var filteredRows = grid.rows.filter( function( gridRow ) {
	            if ( grid.options.saveRowIdentity( gridRow.entity ) === rowVal.row ){
	              return true;
	            } else {
	              return false;
	            }
	          });

	          if ( filteredRows.length > 0 ){
	            return filteredRows[0];
	          } else {
	            return null;
	          }
	        }
	      };

	      return service;

	    }
	  ]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.saveState.directive:uiGridSaveState
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds saveState features to grid
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.saveState']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	        { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.gridOptions = {
	        columnDefs: [
	          {name: 'name'},
	          {name: 'title', enableCellEdit: true}
	        ],
	        data: $scope.data
	      };
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="gridOptions" ui-grid-save-state></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridSaveState', ['uiGridSaveStateConstants', 'uiGridSaveStateService', 'gridUtil', '$compile',
	    function (uiGridSaveStateConstants, uiGridSaveStateService, gridUtil, $compile) {
	      return {
	        replace: true,
	        priority: 0,
	        require: '^uiGrid',
	        scope: false,
	        link: function ($scope, $elm, $attrs, uiGridCtrl) {
	          uiGridSaveStateService.initializeGrid(uiGridCtrl.grid);
	        }
	      };
	    }
	  ]);
	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.selection
	   * @description
	   *
	   * # ui.grid.selection
	   * This module provides row selection
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * <div doc-module-components="ui.grid.selection"></div>
	   */

	  var module = angular.module('ui.grid.selection', ['ui.grid']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.selection.constant:uiGridSelectionConstants
	   *
	   *  @description constants available in selection module
	   */
	  module.constant('uiGridSelectionConstants', {
	    featureName: "selection",
	    selectionRowHeaderColName: 'selectionRowHeaderCol'
	  });

	  //add methods to GridRow
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('GridRow', ['$delegate', function($delegate) {

	      /**
	       *  @ngdoc object
	       *  @name ui.grid.selection.api:GridRow
	       *
	       *  @description GridRow prototype functions added for selection
	       */

	      /**
	       *  @ngdoc object
	       *  @name enableSelection
	       *  @propertyOf  ui.grid.selection.api:GridRow
	       *  @description Enable row selection for this row, only settable by internal code.
	       *
	       *  The grouping feature, for example, might set group header rows to not be selectable.
	       *  <br/>Defaults to true
	       */

	      /**
	       *  @ngdoc object
	       *  @name isSelected
	       *  @propertyOf  ui.grid.selection.api:GridRow
	       *  @description Selected state of row.  Should be readonly. Make any changes to selected state using setSelected().
	       *  <br/>Defaults to false
	       */


	        /**
	         * @ngdoc function
	         * @name setSelected
	         * @methodOf ui.grid.selection.api:GridRow
	         * @description Sets the isSelected property and updates the selectedCount
	         * Changes to isSelected state should only be made via this function
	         * @param {bool} selected value to set
	         */
	        $delegate.prototype.setSelected = function(selected) {
	          if (selected !== this.isSelected) {
	            this.isSelected = selected;
	            this.grid.selection.selectedCount += selected ? 1 : -1;
	          }
	        };

	      return $delegate;
	    }]);
	  }]);

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.selection.service:uiGridSelectionService
	   *
	   *  @description Services for selection features
	   */
	  module.service('uiGridSelectionService', ['$q', '$templateCache', 'uiGridSelectionConstants', 'gridUtil',
	    function ($q, $templateCache, uiGridSelectionConstants, gridUtil) {

	      var service = {

	        initializeGrid: function (grid) {

	          //add feature namespace and any properties to grid for needed
	          /**
	           *  @ngdoc object
	           *  @name ui.grid.selection.grid:selection
	           *
	           *  @description Grid properties and functions added for selection
	           */
	          grid.selection = {};
	          grid.selection.lastSelectedRow = null;
	          grid.selection.selectAll = false;


	          /**
	           *  @ngdoc object
	           *  @name selectedCount
	           *  @propertyOf  ui.grid.selection.grid:selection
	           *  @description Current count of selected rows
	           *  @example
	           *  var count = grid.selection.selectedCount
	           */
	          grid.selection.selectedCount = 0;

	          service.defaultGridOptions(grid.options);

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.selection.api:PublicApi
	           *
	           *  @description Public Api for selection feature
	           */
	          var publicApi = {
	            events: {
	              selection: {
	                /**
	                 * @ngdoc event
	                 * @name rowSelectionChanged
	                 * @eventOf  ui.grid.selection.api:PublicApi
	                 * @description  is raised after the row.isSelected state is changed
	                 * @param {GridRow} row the row that was selected/deselected
	                 * @param {Event} event object if raised from an event
	                 */
	                rowSelectionChanged: function (scope, row, evt) {
	                },
	                /**
	                 * @ngdoc event
	                 * @name rowSelectionChangedBatch
	                 * @eventOf  ui.grid.selection.api:PublicApi
	                 * @description  is raised after the row.isSelected state is changed
	                 * in bulk, if the `enableSelectionBatchEvent` option is set to true
	                 * (which it is by default).  This allows more efficient processing
	                 * of bulk events.
	                 * @param {array} rows the rows that were selected/deselected
	                 * @param {Event} event object if raised from an event
	                 */
	                rowSelectionChangedBatch: function (scope, rows, evt) {
	                }
	              }
	            },
	            methods: {
	              selection: {
	                /**
	                 * @ngdoc function
	                 * @name toggleRowSelection
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Toggles data row as selected or unselected
	                 * @param {object} rowEntity gridOptions.data[] array instance
	                 * @param {Event} event object if raised from an event
	                 */
	                toggleRowSelection: function (rowEntity, evt) {
	                  var row = grid.getRow(rowEntity);
	                  if (row !== null) {
	                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
	                  }
	                },
	                /**
	                 * @ngdoc function
	                 * @name selectRow
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Select the data row
	                 * @param {object} rowEntity gridOptions.data[] array instance
	                 * @param {Event} event object if raised from an event
	                 */
	                selectRow: function (rowEntity, evt) {
	                  var row = grid.getRow(rowEntity);
	                  if (row !== null && !row.isSelected) {
	                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
	                  }
	                },
	                /**
	                 * @ngdoc function
	                 * @name selectRowByVisibleIndex
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Select the specified row by visible index (i.e. if you
	                 * specify row 0 you'll get the first visible row selected).  In this context
	                 * visible means of those rows that are theoretically visible (i.e. not filtered),
	                 * rather than rows currently rendered on the screen.
	                 * @param {number} index index within the rowsVisible array
	                 * @param {Event} event object if raised from an event
	                 */
	                selectRowByVisibleIndex: function ( rowNum, evt ) {
	                  var row = grid.renderContainers.body.visibleRowCache[rowNum];
	                  if (row !== null && typeof(row) !== 'undefined' && !row.isSelected) {
	                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
	                  }
	                },
	                /**
	                 * @ngdoc function
	                 * @name unSelectRow
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description UnSelect the data row
	                 * @param {object} rowEntity gridOptions.data[] array instance
	                 * @param {Event} event object if raised from an event
	                 */
	                unSelectRow: function (rowEntity, evt) {
	                  var row = grid.getRow(rowEntity);
	                  if (row !== null && row.isSelected) {
	                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
	                  }
	                },
	                /**
	                 * @ngdoc function
	                 * @name selectAllRows
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Selects all rows.  Does nothing if multiSelect = false
	                 * @param {Event} event object if raised from an event
	                 */
	                selectAllRows: function (evt) {
	                  if (grid.options.multiSelect === false) {
	                    return;
	                  }

	                  var changedRows = [];
	                  grid.rows.forEach(function (row) {
	                    if ( !row.isSelected && row.enableSelection !== false ){
	                      row.setSelected(true);
	                      service.decideRaiseSelectionEvent( grid, row, changedRows, evt );
	                    }
	                  });
	                  service.decideRaiseSelectionBatchEvent( grid, changedRows, evt );
	                  grid.selection.selectAll = true;
	                },
	                /**
	                 * @ngdoc function
	                 * @name selectAllVisibleRows
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Selects all visible rows.  Does nothing if multiSelect = false
	                 * @param {Event} event object if raised from an event
	                 */
	                selectAllVisibleRows: function (evt) {
	                  if (grid.options.multiSelect === false) {
	                    return;
	                  }

	                  var changedRows = [];
	                  grid.rows.forEach(function (row) {
	                    if (row.visible) {
	                      if (!row.isSelected && row.enableSelection !== false){
	                        row.setSelected(true);
	                        service.decideRaiseSelectionEvent( grid, row, changedRows, evt );
	                      }
	                    } else {
	                      if (row.isSelected){
	                        row.setSelected(false);
	                        service.decideRaiseSelectionEvent( grid, row, changedRows, evt );
	                      }
	                    }
	                  });
	                  service.decideRaiseSelectionBatchEvent( grid, changedRows, evt );
	                  grid.selection.selectAll = true;
	                },
	                /**
	                 * @ngdoc function
	                 * @name clearSelectedRows
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Unselects all rows
	                 * @param {Event} event object if raised from an event
	                 */
	                clearSelectedRows: function (evt) {
	                  service.clearSelectedRows(grid, evt);
	                },
	                /**
	                 * @ngdoc function
	                 * @name getSelectedRows
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description returns all selectedRow's entity references
	                 */
	                getSelectedRows: function () {
	                  return service.getSelectedRows(grid).map(function (gridRow) {
	                    return gridRow.entity;
	                  });
	                },
	                /**
	                 * @ngdoc function
	                 * @name getSelectedGridRows
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description returns all selectedRow's as gridRows
	                 */
	                getSelectedGridRows: function () {
	                  return service.getSelectedRows(grid);
	                },
	                /**
	                 * @ngdoc function
	                 * @name getSelectedCount
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description returns the number of rows selected
	                 */
	                getSelectedCount: function () {
	                  return grid.selection.selectedCount;
	                },
	                /**
	                 * @ngdoc function
	                 * @name setMultiSelect
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Sets the current gridOption.multiSelect to true or false
	                 * @param {bool} multiSelect true to allow multiple rows
	                 */
	                setMultiSelect: function (multiSelect) {
	                  grid.options.multiSelect = multiSelect;
	                },
	                /**
	                 * @ngdoc function
	                 * @name setModifierKeysToMultiSelect
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Sets the current gridOption.modifierKeysToMultiSelect to true or false
	                 * @param {bool} modifierKeysToMultiSelect true to only allow multiple rows when using ctrlKey or shiftKey is used
	                 */
	                setModifierKeysToMultiSelect: function (modifierKeysToMultiSelect) {
	                  grid.options.modifierKeysToMultiSelect = modifierKeysToMultiSelect;
	                },
	                /**
	                 * @ngdoc function
	                 * @name getSelectAllState
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Returns whether or not the selectAll checkbox is currently ticked.  The
	                 * grid doesn't automatically select rows when you add extra data - so when you add data
	                 * you need to explicitly check whether the selectAll is set, and then call setVisible rows
	                 * if it is
	                 */
	                getSelectAllState: function () {
	                  return grid.selection.selectAll;
	                }

	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);

	          grid.api.registerMethodsFromObject(publicApi.methods);

	        },

	        defaultGridOptions: function (gridOptions) {
	          //default option to true unless it was explicitly set to false
	          /**
	           *  @ngdoc object
	           *  @name ui.grid.selection.api:GridOptions
	           *
	           *  @description GridOptions for selection feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	          /**
	           *  @ngdoc object
	           *  @name enableRowSelection
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Enable row selection for entire grid.
	           *  <br/>Defaults to true
	           */
	          gridOptions.enableRowSelection = gridOptions.enableRowSelection !== false;
	          /**
	           *  @ngdoc object
	           *  @name multiSelect
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Enable multiple row selection for entire grid
	           *  <br/>Defaults to true
	           */
	          gridOptions.multiSelect = gridOptions.multiSelect !== false;
	          /**
	           *  @ngdoc object
	           *  @name noUnselect
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Prevent a row from being unselected.  Works in conjunction
	           *  with `multiselect = false` and `gridApi.selection.selectRow()` to allow
	           *  you to create a single selection only grid - a row is always selected, you
	           *  can only select different rows, you can't unselect the row.
	           *  <br/>Defaults to false
	           */
	          gridOptions.noUnselect = gridOptions.noUnselect === true;
	          /**
	           *  @ngdoc object
	           *  @name modifierKeysToMultiSelect
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Enable multiple row selection only when using the ctrlKey or shiftKey. Requires multiSelect to be true.
	           *  <br/>Defaults to false
	           */
	          gridOptions.modifierKeysToMultiSelect = gridOptions.modifierKeysToMultiSelect === true;
	          /**
	           *  @ngdoc object
	           *  @name enableRowHeaderSelection
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Enable a row header to be used for selection
	           *  <br/>Defaults to true
	           */
	          gridOptions.enableRowHeaderSelection = gridOptions.enableRowHeaderSelection !== false;
	          /**
	           *  @ngdoc object
	           *  @name enableFullRowSelection
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Enable selection by clicking anywhere on the row.  Defaults to
	           *  false if `enableRowHeaderSelection` is true, otherwise defaults to false.
	           */
	          if ( typeof(gridOptions.enableFullRowSelection) === 'undefined' ){
	            gridOptions.enableFullRowSelection = !gridOptions.enableRowHeaderSelection;
	          }
	          /**
	           *  @ngdoc object
	           *  @name enableSelectAll
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Enable the select all checkbox at the top of the selectionRowHeader
	           *  <br/>Defaults to true
	           */
	          gridOptions.enableSelectAll = gridOptions.enableSelectAll !== false;
	          /**
	           *  @ngdoc object
	           *  @name enableSelectionBatchEvent
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description If selected rows are changed in bulk, either via the API or
	           *  via the selectAll checkbox, then a separate event is fired.  Setting this
	           *  option to false will cause the rowSelectionChanged event to be called multiple times
	           *  instead
	           *  <br/>Defaults to true
	           */
	          gridOptions.enableSelectionBatchEvent = gridOptions.enableSelectionBatchEvent !== false;
	          /**
	           *  @ngdoc object
	           *  @name selectionRowHeaderWidth
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description can be used to set a custom width for the row header selection column
	           *  <br/>Defaults to 30px
	           */
	          gridOptions.selectionRowHeaderWidth = angular.isDefined(gridOptions.selectionRowHeaderWidth) ? gridOptions.selectionRowHeaderWidth : 30;

	          /**
	           *  @ngdoc object
	           *  @name enableFooterTotalSelected
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Shows the total number of selected items in footer if true.
	           *  <br/>Defaults to true.
	           *  <br/>GridOptions.showGridFooter must also be set to true.
	           */
	          gridOptions.enableFooterTotalSelected = gridOptions.enableFooterTotalSelected !== false;

	          /**
	           *  @ngdoc object
	           *  @name isRowSelectable
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Makes it possible to specify a method that evaluates for each row and sets its "enableSelection" property.
	           */

	          gridOptions.isRowSelectable = angular.isDefined(gridOptions.isRowSelectable) ? gridOptions.isRowSelectable : angular.noop;
	        },

	        /**
	         * @ngdoc function
	         * @name toggleRowSelection
	         * @methodOf  ui.grid.selection.service:uiGridSelectionService
	         * @description Toggles row as selected or unselected
	         * @param {Grid} grid grid object
	         * @param {GridRow} row row to select or deselect
	         * @param {Event} event object if resulting from event
	         * @param {bool} multiSelect if false, only one row at time can be selected
	         * @param {bool} noUnselect if true then rows cannot be unselected
	         */
	        toggleRowSelection: function (grid, row, evt, multiSelect, noUnselect) {
	          var selected = row.isSelected;

	          if ( row.enableSelection === false && !selected ){
	            return;
	          }

	          var selectedRows;
	          if (!multiSelect && !selected) {
	            service.clearSelectedRows(grid, evt);
	          } else if (!multiSelect && selected) {
	            selectedRows = service.getSelectedRows(grid);
	            if (selectedRows.length > 1) {
	              selected = false; // Enable reselect of the row
	              service.clearSelectedRows(grid, evt);
	            }
	          }

	          if (selected && noUnselect){
	            // don't deselect the row
	          } else {
	            row.setSelected(!selected);
	            if (row.isSelected === true) {
	              grid.selection.lastSelectedRow = row;
	            }

	            selectedRows = service.getSelectedRows(grid);
	            grid.selection.selectAll = grid.rows.length === selectedRows.length;

	            grid.api.selection.raise.rowSelectionChanged(row, evt);
	          }
	        },
	        /**
	         * @ngdoc function
	         * @name shiftSelect
	         * @methodOf  ui.grid.selection.service:uiGridSelectionService
	         * @description selects a group of rows from the last selected row using the shift key
	         * @param {Grid} grid grid object
	         * @param {GridRow} clicked row
	         * @param {Event} event object if raised from an event
	         * @param {bool} multiSelect if false, does nothing this is for multiSelect only
	         */
	        shiftSelect: function (grid, row, evt, multiSelect) {
	          if (!multiSelect) {
	            return;
	          }
	          var selectedRows = service.getSelectedRows(grid);
	          var fromRow = selectedRows.length > 0 ? grid.renderContainers.body.visibleRowCache.indexOf(grid.selection.lastSelectedRow) : 0;
	          var toRow = grid.renderContainers.body.visibleRowCache.indexOf(row);
	          //reverse select direction
	          if (fromRow > toRow) {
	            var tmp = fromRow;
	            fromRow = toRow;
	            toRow = tmp;
	          }

	          var changedRows = [];
	          for (var i = fromRow; i <= toRow; i++) {
	            var rowToSelect = grid.renderContainers.body.visibleRowCache[i];
	            if (rowToSelect) {
	              if ( !rowToSelect.isSelected && rowToSelect.enableSelection !== false ){
	                rowToSelect.setSelected(true);
	                grid.selection.lastSelectedRow = rowToSelect;
	                service.decideRaiseSelectionEvent( grid, rowToSelect, changedRows, evt );
	              }
	            }
	          }
	          service.decideRaiseSelectionBatchEvent( grid, changedRows, evt );
	        },
	        /**
	         * @ngdoc function
	         * @name getSelectedRows
	         * @methodOf  ui.grid.selection.service:uiGridSelectionService
	         * @description Returns all the selected rows
	         * @param {Grid} grid grid object
	         */
	        getSelectedRows: function (grid) {
	          return grid.rows.filter(function (row) {
	            return row.isSelected;
	          });
	        },

	        /**
	         * @ngdoc function
	         * @name clearSelectedRows
	         * @methodOf  ui.grid.selection.service:uiGridSelectionService
	         * @description Clears all selected rows
	         * @param {Grid} grid grid object
	         * @param {Event} event object if raised from an event
	         */
	        clearSelectedRows: function (grid, evt) {
	          var changedRows = [];
	          service.getSelectedRows(grid).forEach(function (row) {
	            if ( row.isSelected ){
	              row.setSelected(false);
	              service.decideRaiseSelectionEvent( grid, row, changedRows, evt );
	            }
	          });
	          service.decideRaiseSelectionBatchEvent( grid, changedRows, evt );
	          grid.selection.selectAll = false;
	          grid.selection.selectedCount = 0;
	        },

	        /**
	         * @ngdoc function
	         * @name decideRaiseSelectionEvent
	         * @methodOf  ui.grid.selection.service:uiGridSelectionService
	         * @description Decides whether to raise a single event or a batch event
	         * @param {Grid} grid grid object
	         * @param {GridRow} row row that has changed
	         * @param {array} changedRows an array to which we can append the changed
	         * @param {Event} event object if raised from an event
	         * row if we're doing batch events
	         */
	        decideRaiseSelectionEvent: function( grid, row, changedRows, evt ){
	          if ( !grid.options.enableSelectionBatchEvent ){
	            grid.api.selection.raise.rowSelectionChanged(row, evt);
	          } else {
	            changedRows.push(row);
	          }
	        },

	        /**
	         * @ngdoc function
	         * @name raiseSelectionEvent
	         * @methodOf  ui.grid.selection.service:uiGridSelectionService
	         * @description Decides whether we need to raise a batch event, and
	         * raises it if we do.
	         * @param {Grid} grid grid object
	         * @param {array} changedRows an array of changed rows, only populated
	         * @param {Event} event object if raised from an event
	         * if we're doing batch events
	         */
	        decideRaiseSelectionBatchEvent: function( grid, changedRows, evt ){
	          if ( changedRows.length > 0 ){
	            grid.api.selection.raise.rowSelectionChangedBatch(changedRows, evt);
	          }
	        }
	      };

	      return service;

	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.selection.directive:uiGridSelection
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds selection features to grid
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.selection']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name', enableCellEdit: true},
	        {name: 'title', enableCellEdit: true}
	      ];
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-selection></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridSelection', ['uiGridSelectionConstants', 'uiGridSelectionService', '$templateCache', 'uiGridConstants',
	    function (uiGridSelectionConstants, uiGridSelectionService, $templateCache, uiGridConstants) {
	      return {
	        replace: true,
	        priority: 0,
	        require: '^uiGrid',
	        scope: false,
	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	              uiGridSelectionService.initializeGrid(uiGridCtrl.grid);
	              if (uiGridCtrl.grid.options.enableRowHeaderSelection) {
	                var selectionRowHeaderDef = {
	                  name: uiGridSelectionConstants.selectionRowHeaderColName,
	                  displayName: '',
	                  width:  uiGridCtrl.grid.options.selectionRowHeaderWidth,
	                  minWidth: 10,
	                  cellTemplate: 'ui-grid/selectionRowHeader',
	                  headerCellTemplate: 'ui-grid/selectionHeaderCell',
	                  enableColumnResizing: false,
	                  enableColumnMenu: false,
	                  exporterSuppressExport: true,
	                  allowCellFocus: true
	                };

	                uiGridCtrl.grid.addRowHeaderColumn(selectionRowHeaderDef, 0);
	              }

	              var processorSet = false;

	              var processSelectableRows = function( rows ){
	                rows.forEach(function(row){
	                  row.enableSelection = uiGridCtrl.grid.options.isRowSelectable(row);
	                });
	                return rows;
	              };

	              var updateOptions = function(){
	                if (uiGridCtrl.grid.options.isRowSelectable !== angular.noop && processorSet !== true) {
	                  uiGridCtrl.grid.registerRowsProcessor(processSelectableRows, 500);
	                  processorSet = true;
	                }
	              };

	              updateOptions();

	              var dataChangeDereg = uiGridCtrl.grid.registerDataChangeCallback( updateOptions, [uiGridConstants.dataChange.OPTIONS] );

	              $scope.$on( '$destroy', dataChangeDereg);
	            },
	            post: function ($scope, $elm, $attrs, uiGridCtrl) {

	            }
	          };
	        }
	      };
	    }]);

	  module.directive('uiGridSelectionRowHeaderButtons', ['$templateCache', 'uiGridSelectionService', 'gridUtil',
	    function ($templateCache, uiGridSelectionService, gridUtil) {
	      return {
	        replace: true,
	        restrict: 'E',
	        template: $templateCache.get('ui-grid/selectionRowHeaderButtons'),
	        scope: true,
	        require: '^uiGrid',
	        link: function($scope, $elm, $attrs, uiGridCtrl) {
	          var self = uiGridCtrl.grid;
	          $scope.selectButtonClick = selectButtonClick;

	          // On IE, prevent mousedowns on the select button from starting a selection.
	          //   If this is not done and you shift+click on another row, the browser will select a big chunk of text
	          if (gridUtil.detectBrowser() === 'ie') {
	            $elm.on('mousedown', selectButtonMouseDown);
	          }


	          function selectButtonClick(row, evt) {
	            evt.stopPropagation();

	            if (evt.shiftKey) {
	              uiGridSelectionService.shiftSelect(self, row, evt, self.options.multiSelect);
	            }
	            else if (evt.ctrlKey || evt.metaKey) {
	              uiGridSelectionService.toggleRowSelection(self, row, evt, self.options.multiSelect, self.options.noUnselect);
	            }
	            else {
	              uiGridSelectionService.toggleRowSelection(self, row, evt, (self.options.multiSelect && !self.options.modifierKeysToMultiSelect), self.options.noUnselect);
	            }
	          }

	          function selectButtonMouseDown(evt) {
	            if (evt.ctrlKey || evt.shiftKey) {
	              evt.target.onselectstart = function () { return false; };
	              window.setTimeout(function () { evt.target.onselectstart = null; }, 0);
	            }
	          }
	        }
	      };
	    }]);

	  module.directive('uiGridSelectionSelectAllButtons', ['$templateCache', 'uiGridSelectionService',
	    function ($templateCache, uiGridSelectionService) {
	      return {
	        replace: true,
	        restrict: 'E',
	        template: $templateCache.get('ui-grid/selectionSelectAllButtons'),
	        scope: false,
	        link: function($scope, $elm, $attrs, uiGridCtrl) {
	          var self = $scope.col.grid;

	          $scope.headerButtonClick = function(row, evt) {
	            if ( self.selection.selectAll ){
	              uiGridSelectionService.clearSelectedRows(self, evt);
	              if ( self.options.noUnselect ){
	                self.api.selection.selectRowByVisibleIndex(0, evt);
	              }
	              self.selection.selectAll = false;
	            } else {
	              if ( self.options.multiSelect ){
	                self.api.selection.selectAllVisibleRows(evt);
	                self.selection.selectAll = true;
	              }
	            }
	          };
	        }
	      };
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.selection.directive:uiGridViewport
	   *  @element div
	   *
	   *  @description Stacks on top of ui.grid.uiGridViewport to alter the attributes used
	   *  for the grid row
	   */
	  module.directive('uiGridViewport',
	    ['$compile', 'uiGridConstants', 'uiGridSelectionConstants', 'gridUtil', '$parse', 'uiGridSelectionService',
	      function ($compile, uiGridConstants, uiGridSelectionConstants, gridUtil, $parse, uiGridSelectionService) {
	        return {
	          priority: -200, // run after default  directive
	          scope: false,
	          compile: function ($elm, $attrs) {
	            var rowRepeatDiv = angular.element($elm.children().children()[0]);

	            var existingNgClass = rowRepeatDiv.attr("ng-class");
	            var newNgClass = '';
	            if ( existingNgClass ) {
	              newNgClass = existingNgClass.slice(0, -1) + ",'ui-grid-row-selected': row.isSelected}";
	            } else {
	              newNgClass = "{'ui-grid-row-selected': row.isSelected}";
	            }
	            rowRepeatDiv.attr("ng-class", newNgClass);

	            return {
	              pre: function ($scope, $elm, $attrs, controllers) {

	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	              }
	            };
	          }
	        };
	      }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.selection.directive:uiGridCell
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Stacks on top of ui.grid.uiGridCell to provide selection feature
	   */
	  module.directive('uiGridCell',
	    ['$compile', 'uiGridConstants', 'uiGridSelectionConstants', 'gridUtil', '$parse', 'uiGridSelectionService', '$timeout',
	      function ($compile, uiGridConstants, uiGridSelectionConstants, gridUtil, $parse, uiGridSelectionService, $timeout) {
	        return {
	          priority: -200, // run after default uiGridCell directive
	          restrict: 'A',
	          require: '?^uiGrid',
	          scope: false,
	          link: function ($scope, $elm, $attrs, uiGridCtrl) {

	            var touchStartTime = 0;
	            var touchTimeout = 300;

	            // Bind to keydown events in the render container
	            if (uiGridCtrl.grid.api.cellNav) {

	              uiGridCtrl.grid.api.cellNav.on.viewPortKeyDown($scope, function (evt, rowCol) {
	                if (rowCol === null ||
	                  rowCol.row !== $scope.row ||
	                  rowCol.col !== $scope.col) {
	                  return;
	                }

	                if (evt.keyCode === 32 && $scope.col.colDef.name === "selectionRowHeaderCol") {
	                  uiGridSelectionService.toggleRowSelection($scope.grid, $scope.row, evt, ($scope.grid.options.multiSelect && !$scope.grid.options.modifierKeysToMultiSelect), $scope.grid.options.noUnselect);
	                  $scope.$apply();
	                }

	              //  uiGridCellNavService.scrollToIfNecessary(uiGridCtrl.grid, rowCol.row, rowCol.col);
	              });
	            }

	            //$elm.bind('keydown', function (evt) {
	            //  if (evt.keyCode === 32 && $scope.col.colDef.name === "selectionRowHeaderCol") {
	            //    uiGridSelectionService.toggleRowSelection($scope.grid, $scope.row, evt, ($scope.grid.options.multiSelect && !$scope.grid.options.modifierKeysToMultiSelect), $scope.grid.options.noUnselect);
	            //    $scope.$apply();
	            //  }
	            //});

	            var selectCells = function(evt){
	              // if we get a click, then stop listening for touchend
	              $elm.off('touchend', touchEnd);

	              if (evt.shiftKey) {
	                uiGridSelectionService.shiftSelect($scope.grid, $scope.row, evt, $scope.grid.options.multiSelect);
	              }
	              else if (evt.ctrlKey || evt.metaKey) {
	                uiGridSelectionService.toggleRowSelection($scope.grid, $scope.row, evt, $scope.grid.options.multiSelect, $scope.grid.options.noUnselect);
	              }
	              else {
	                uiGridSelectionService.toggleRowSelection($scope.grid, $scope.row, evt, ($scope.grid.options.multiSelect && !$scope.grid.options.modifierKeysToMultiSelect), $scope.grid.options.noUnselect);
	              }
	              $scope.$apply();

	              // don't re-enable the touchend handler for a little while - some devices generate both, and it will
	              // take a little while to move your hand from the mouse to the screen if you have both modes of input
	              $timeout(function() {
	                $elm.on('touchend', touchEnd);
	              }, touchTimeout);
	            };

	            var touchStart = function(evt){
	              touchStartTime = (new Date()).getTime();

	              // if we get a touch event, then stop listening for click
	              $elm.off('click', selectCells);
	            };

	            var touchEnd = function(evt) {
	              var touchEndTime = (new Date()).getTime();
	              var touchTime = touchEndTime - touchStartTime;

	              if (touchTime < touchTimeout ) {
	                // short touch
	                selectCells(evt);
	              }

	              // don't re-enable the click handler for a little while - some devices generate both, and it will
	              // take a little while to move your hand from the screen to the mouse if you have both modes of input
	              $timeout(function() {
	                $elm.on('click', selectCells);
	              }, touchTimeout);
	            };

	            function registerRowSelectionEvents() {
	              if ($scope.grid.options.enableRowSelection && $scope.grid.options.enableFullRowSelection) {
	                $elm.addClass('ui-grid-disable-selection');
	                $elm.on('touchstart', touchStart);
	                $elm.on('touchend', touchEnd);
	                $elm.on('click', selectCells);

	                $scope.registered = true;
	              }
	            }

	            function deregisterRowSelectionEvents() {
	              if ($scope.registered){
	                $elm.removeClass('ui-grid-disable-selection');

	                $elm.off('touchstart', touchStart);
	                $elm.off('touchend', touchEnd);
	                $elm.off('click', selectCells);

	                $scope.registered = false;
	              }
	            }

	            registerRowSelectionEvents();
	            // register a dataChange callback so that we can change the selection configuration dynamically
	            // if the user changes the options
	            var dataChangeDereg = $scope.grid.registerDataChangeCallback( function() {
	              if ( $scope.grid.options.enableRowSelection && $scope.grid.options.enableFullRowSelection &&
	                !$scope.registered ){
	                registerRowSelectionEvents();
	              } else if ( ( !$scope.grid.options.enableRowSelection || !$scope.grid.options.enableFullRowSelection ) &&
	                $scope.registered ){
	                deregisterRowSelectionEvents();
	              }
	            }, [uiGridConstants.dataChange.OPTIONS] );

	            $elm.on( '$destroy', dataChangeDereg);
	          }
	        };
	      }]);

	  module.directive('uiGridGridFooter', ['$compile', 'uiGridConstants', 'gridUtil', function ($compile, uiGridConstants, gridUtil) {
	    return {
	      restrict: 'EA',
	      replace: true,
	      priority: -1000,
	      require: '^uiGrid',
	      scope: true,
	      compile: function ($elm, $attrs) {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {

	            if (!uiGridCtrl.grid.options.showGridFooter) {
	              return;
	            }


	            gridUtil.getTemplate('ui-grid/gridFooterSelectedItems')
	              .then(function (contents) {
	                var template = angular.element(contents);

	                var newElm = $compile(template)($scope);

	                angular.element($elm[0].getElementsByClassName('ui-grid-grid-footer')[0]).append(newElm);
	              });
	          },

	          post: function ($scope, $elm, $attrs, controllers) {

	          }
	        };
	      }
	    };
	  }]);

	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.treeBase
	   * @description
	   *
	   * # ui.grid.treeBase
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
	   *
	   * This module provides base tree handling functions that are shared by other features, notably grouping
	   * and treeView.  It provides a tree view of the data, with nodes in that
	   * tree and leaves.
	   *
	   * Design information:
	   * -------------------
	   *
	   * The raw data that is provided must come with a $$treeLevel on any non-leaf node.  Grouping will create
	   * these on all the group header rows, treeView will expect these to be set in the raw data by the user.
	   * TreeBase will run a rowsProcessor that:
	   *  - builds `treeBase.tree` out of the provided rows
	   *  - permits a recursive sort of the tree
	   *  - maintains the expand/collapse state of each node
	   *  - provides the expand/collapse all button and the expand/collapse buttons
	   *  - maintains the count of children for each node
	   *
	   * Each row is updated with a link to the tree node that represents it.  Refer {@link ui.grid.treeBase.grid:treeBase.tree tree documentation}
	   * for information.
	   *
	   *  TreeBase adds information to the rows
	   *  - treeLevel: if present and > -1 tells us the level (level 0 is the top level)
	   *  - treeNode: pointer to the node in the grid.treeBase.tree that refers
	   *    to this row, allowing us to manipulate the state
	   *
	   * Since the logic is baked into the rowsProcessors, it should get triggered whenever
	   * row order or filtering or anything like that is changed.  We recall the expanded state
	   * across invocations of the rowsProcessors by the reference to the treeNode on the individual
	   * rows.  We rebuild the tree itself quite frequently, when we do this we use the saved treeNodes to
	   * get the state, but we overwrite the other data in that treeNode.
	   *
	   * By default rows are collapsed, which means all data rows have their visible property
	   * set to false, and only level 0 group rows are set to visible.
	   *
	   * We rely on the rowsProcessors to do the actual expanding and collapsing, so we set the flags we want into
	   * grid.treeBase.tree, then call refresh.  This is because we can't easily change the visible
	   * row cache without calling the processors, and once we've built the logic into the rowProcessors we may as
	   * well use it all the time.
	   *
	   * Tree base provides sorting (on non-grouped columns).
	   *
	   * Sorting works in two passes.  The standard sorting is performed for any columns that are important to building
	   * the tree (for example, any grouped columns).  Then after the tree is built, a recursive tree sort is performed
	   * for the remaining sort columns (including the original sort) - these columns are sorted within each tree level
	   * (so all the level 1 nodes are sorted, then all the level 2 nodes within each level 1 node etc).
	   *
	   * To achieve this we make use of the `ignoreSort` property on the sort configuration.  The parent feature (treeView or grouping)
	   * must provide a rowsProcessor that runs with very low priority (typically in the 60-65 range), and that sets
	   * the `ignoreSort`on any sort that it wants to run on the tree.  TreeBase will clear the ignoreSort on all sorts - so it
	   * will turn on any sorts that haven't run.  It will then call a recursive sort on the tree.
	   *
	   * Tree base provides treeAggregation.  It checks the treeAggregation configuration on each column, and aggregates based on
	   * the logic provided as it builds the tree. Footer aggregation from the uiGrid core should not be used with treeBase aggregation,
	   * since it operates on all visible rows, as opposed to to leaf nodes only. Setting `showColumnFooter: true` will show the
	   * treeAggregations in the column footer.  Aggregation information will be collected in the format:
	   *
	   * ```
	   *   {
	   *     type: 'count',
	   *     value: 4,
	   *     label: 'count: ',
	   *     rendered: 'count: 4'
	   *   }
	   * ```
	   *
	   * A callback is provided to format the value once it is finalised (aka a valueFilter).
	   *
	   * <br/>
	   * <br/>
	   *
	   * <div doc-module-components="ui.grid.treeBase"></div>
	   */

	  var module = angular.module('ui.grid.treeBase', ['ui.grid']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.treeBase.constant:uiGridTreeBaseConstants
	   *
	   *  @description constants available in treeBase module.
	   *
	   *  These constants are manually copied into grouping and treeView,
	   *  as I haven't found a way to simply include them, and it's not worth
	   *  investing time in for something that changes very infrequently.
	   *
	   */
	  module.constant('uiGridTreeBaseConstants', {
	    featureName: "treeBase",
	    rowHeaderColName: 'treeBaseRowHeaderCol',
	    EXPANDED: 'expanded',
	    COLLAPSED: 'collapsed',
	    aggregation: {
	      COUNT: 'count',
	      SUM: 'sum',
	      MAX: 'max',
	      MIN: 'min',
	      AVG: 'avg'
	    }
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.treeBase.service:uiGridTreeBaseService
	   *
	   *  @description Services for treeBase feature
	   */
	  /**
	   *  @ngdoc object
	   *  @name ui.grid.treeBase.api:ColumnDef
	   *
	   *  @description ColumnDef for tree feature, these are available to be
	   *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	   */

	  module.service('uiGridTreeBaseService', ['$q', 'uiGridTreeBaseConstants', 'gridUtil', 'GridRow', 'gridClassFactory', 'i18nService', 'uiGridConstants', 'rowSorter',
	  function ($q, uiGridTreeBaseConstants, gridUtil, GridRow, gridClassFactory, i18nService, uiGridConstants, rowSorter) {

	    var service = {

	      initializeGrid: function (grid, $scope) {

	        //add feature namespace and any properties to grid for needed
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.treeBase.grid:treeBase
	         *
	         *  @description Grid properties and functions added for treeBase
	         */
	        grid.treeBase = {};

	        /**
	         *  @ngdoc property
	         *  @propertyOf ui.grid.treeBase.grid:treeBase
	         *  @name numberLevels
	         *
	         *  @description Total number of tree levels currently used, calculated by the rowsProcessor by
	         *  retaining the highest tree level it sees
	         */
	        grid.treeBase.numberLevels = 0;

	        /**
	         *  @ngdoc property
	         *  @propertyOf ui.grid.treeBase.grid:treeBase
	         *  @name expandAll
	         *
	         *  @description Whether or not the expandAll box is selected
	         */
	        grid.treeBase.expandAll = false;

	        /**
	         *  @ngdoc property
	         *  @propertyOf ui.grid.treeBase.grid:treeBase
	         *  @name tree
	         *
	         *  @description Tree represented as a nested array that holds the state of each node, along with a
	         *  pointer to the row.  The array order is material - we will display the children in the order
	         *  they are stored in the array
	         *
	         *  Each node stores:
	         *
	         *    - the state of this node
	         *    - an array of children of this node
	         *    - a pointer to the parent of this node (reverse pointer, allowing us to walk up the tree)
	         *    - the number of children of this node
	         *    - aggregation information calculated from the nodes
	         *
	         *  ```
	         *    [{
	         *      state: 'expanded',
	         *      row: <reference to row>,
	         *      parentRow: null,
	         *      aggregations: [{
	         *        type: 'count',
	         *        col: <gridCol>,
	         *        value: 2,
	         *        label: 'count: ',
	         *        rendered: 'count: 2'
	         *      }],
	         *      children: [
	         *        {
	         *          state: 'expanded',
	         *          row: <reference to row>,
	         *          parentRow: <reference to row>,
	         *          aggregations: [{
	         *            type: 'count',
	         *            col: '<gridCol>,
	         *            value: 4,
	         *            label: 'count: ',
	         *            rendered: 'count: 4'
	         *          }],
	         *          children: [
	         *            { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },
	         *            { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> },
	         *            { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },
	         *            { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> }
	         *          ]
	         *        },
	         *        {
	         *          state: 'collapsed',
	         *          row: <reference to row>,
	         *          parentRow: <reference to row>,
	         *          aggregations: [{
	         *            type: 'count',
	         *            col: <gridCol>,
	         *            value: 3,
	         *            label: 'count: ',
	         *            rendered: 'count: 3'
	         *          }],
	         *          children: [
	         *            { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },
	         *            { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> },
	         *            { state: 'expanded', row: <reference to row>, parentRow: <reference to row> }
	         *          ]
	         *        }
	         *      ]
	         *    }, {<another level 0 node maybe>} ]
	         *  ```
	         *  Missing state values are false - meaning they aren't expanded.
	         *
	         *  This is used because the rowProcessors run every time the grid is refreshed, so
	         *  we'd lose the expanded state every time the grid was refreshed.  This instead gives
	         *  us a reliable lookup that persists across rowProcessors.
	         *
	         *  This tree is rebuilt every time we run the rowsProcessors.  Since each row holds a pointer
	         *  to it's tree node we can persist expand/collapse state across calls to rowsProcessor, we discard
	         *  all transient information on the tree (children, childCount) and recalculate it
	         *
	         */
	        grid.treeBase.tree = [];

	        service.defaultGridOptions(grid.options);

	        grid.registerRowsProcessor(service.treeRows, 410);

	        grid.registerColumnBuilder( service.treeBaseColumnBuilder );

	        service.createRowHeader( grid );

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.treeBase.api:PublicApi
	         *
	         *  @description Public Api for treeBase feature
	         */
	        var publicApi = {
	          events: {
	            treeBase: {
	              /**
	               * @ngdoc event
	               * @eventOf ui.grid.treeBase.api:PublicApi
	               * @name rowExpanded
	               * @description raised whenever a row is expanded.  If you are dynamically
	               * rendering your tree you can listen to this event, and then retrieve
	               * the children of this row and load them into the grid data.
	               *
	               * When the data is loaded the grid will automatically refresh to show these new rows
	               *
	               * <pre>
	               *      gridApi.treeBase.on.rowExpanded(scope,function(row){})
	               * </pre>
	               * @param {gridRow} row the row that was expanded.  You can also
	               * retrieve the grid from this row with row.grid
	               */
	              rowExpanded: {},

	              /**
	               * @ngdoc event
	               * @eventOf ui.grid.treeBase.api:PublicApi
	               * @name rowCollapsed
	               * @description raised whenever a row is collapsed.  Doesn't really have
	               * a purpose at the moment, included for symmetry
	               *
	               * <pre>
	               *      gridApi.treeBase.on.rowCollapsed(scope,function(row){})
	               * </pre>
	               * @param {gridRow} row the row that was collapsed.  You can also
	               * retrieve the grid from this row with row.grid
	               */
	              rowCollapsed: {}
	            }
	          },

	          methods: {
	            treeBase: {
	              /**
	               * @ngdoc function
	               * @name expandAllRows
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description Expands all tree rows
	               */
	              expandAllRows: function () {
	                service.expandAllRows(grid);
	              },

	              /**
	               * @ngdoc function
	               * @name collapseAllRows
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description collapse all tree rows
	               */
	              collapseAllRows: function () {
	                service.collapseAllRows(grid);
	              },

	              /**
	               * @ngdoc function
	               * @name toggleRowTreeState
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description  call expand if the row is collapsed, collapse if it is expanded
	               * @param {gridRow} row the row you wish to toggle
	               */
	              toggleRowTreeState: function (row) {
	                service.toggleRowTreeState(grid, row);
	              },

	              /**
	               * @ngdoc function
	               * @name expandRow
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description expand the immediate children of the specified row
	               * @param {gridRow} row the row you wish to expand
	               */
	              expandRow: function (row) {
	                service.expandRow(grid, row);
	              },

	              /**
	               * @ngdoc function
	               * @name expandRowChildren
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description expand all children of the specified row
	               * @param {gridRow} row the row you wish to expand
	               */
	              expandRowChildren: function (row) {
	                service.expandRowChildren(grid, row);
	              },

	              /**
	               * @ngdoc function
	               * @name collapseRow
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description collapse  the specified row.  When
	               * you expand the row again, all grandchildren will retain their state
	               * @param {gridRow} row the row you wish to collapse
	               */
	              collapseRow: function ( row ) {
	                service.collapseRow(grid, row);
	              },

	              /**
	               * @ngdoc function
	               * @name collapseRowChildren
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description collapse all children of the specified row.  When
	               * you expand the row again, all grandchildren will be collapsed
	               * @param {gridRow} row the row you wish to collapse children for
	               */
	              collapseRowChildren: function ( row ) {
	                service.collapseRowChildren(grid, row);
	              },

	              /**
	               * @ngdoc function
	               * @name getTreeState
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description Get the tree state for this grid,
	               * used by the saveState feature
	               * Returned treeState as an object
	               *   `{ expandedState: { uid: 'expanded', uid: 'collapsed' } }`
	               * where expandedState is a hash of row uid and the current expanded state
	               *
	               * @returns {object} tree state
	               *
	               * TODO - this needs work - we need an identifier that persists across instantiations,
	               * not uid.  This really means we need a row identity defined, but that won't work for
	               * grouping.  Perhaps this needs to be moved up to treeView and grouping, rather than
	               * being in base.
	               */
	              getTreeExpandedState: function () {
	                return { expandedState: service.getTreeState(grid) };
	              },

	              /**
	               * @ngdoc function
	               * @name setTreeState
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description Set the expanded states of the tree
	               * @param {object} config the config you want to apply, in the format
	               * provided by getTreeState
	               */
	              setTreeState: function ( config ) {
	                service.setTreeState( grid, config );
	              },

	              /**
	               * @ngdoc function
	               * @name getRowChildren
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description Get the children of the specified row
	               * @param {GridRow} row the row you want the children of
	               * @returns {Array} array of children of this row, the children
	               * are all gridRows
	               */
	              getRowChildren: function ( row ){
	                return row.treeNode.children.map( function( childNode ){
	                  return childNode.row;
	                });
	              }
	            }
	          }
	        };

	        grid.api.registerEventsFromObject(publicApi.events);

	        grid.api.registerMethodsFromObject(publicApi.methods);
	      },


	      defaultGridOptions: function (gridOptions) {
	        //default option to true unless it was explicitly set to false
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.treeBase.api:GridOptions
	         *
	         *  @description GridOptions for treeBase feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         */

	        /**
	         *  @ngdoc object
	         *  @name treeRowHeaderBaseWidth
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description Base width of the tree header, provides for a single level of tree.  This
	         *  is incremented by `treeIndent` for each extra level
	         *  <br/>Defaults to 30
	         */
	        gridOptions.treeRowHeaderBaseWidth = gridOptions.treeRowHeaderBaseWidth || 30;

	        /**
	         *  @ngdoc object
	         *  @name treeIndent
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description Number of pixels of indent for the icon at each tree level, wider indents are visually more pleasing,
	         *  but will make the tree row header wider
	         *  <br/>Defaults to 10
	         */
	        gridOptions.treeIndent = gridOptions.treeIndent || 10;

	        /**
	         *  @ngdoc object
	         *  @name showTreeRowHeader
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description If set to false, don't create the row header.  You'll need to programmatically control the expand
	         *  states
	         *  <br/>Defaults to true
	         */
	        gridOptions.showTreeRowHeader = gridOptions.showTreeRowHeader !== false;

	        /**
	         *  @ngdoc object
	         *  @name showTreeExpandNoChildren
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description If set to true, show the expand/collapse button even if there are no
	         *  children of a node.  You'd use this if you're planning to dynamically load the children
	         *
	         *  <br/>Defaults to true, grouping overrides to false
	         */
	        gridOptions.showTreeExpandNoChildren = gridOptions.showTreeExpandNoChildren !== false;

	        /**
	         *  @ngdoc object
	         *  @name treeRowHeaderAlwaysVisible
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description If set to true, row header even if there are no tree nodes
	         *
	         *  <br/>Defaults to true
	         */
	        gridOptions.treeRowHeaderAlwaysVisible = gridOptions.treeRowHeaderAlwaysVisible !== false;

	        /**
	         *  @ngdoc object
	         *  @name treeCustomAggregations
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description Define custom aggregation functions. The properties of this object will be
	         *  aggregation types available for use on columnDef with {@link ui.grid.treeBase.api:ColumnDef treeAggregationType} or through the column menu.
	         *  If a function defined here uses the same name as one of the native aggregations, this one will take precedence.
	         *  The object format is:
	         *
	         *  <pre>
	         *    {
	         *      aggregationName: {
	         *        label: (optional) string,
	         *        aggregationFn: function( aggregation, fieldValue, numValue, row ){...},
	         *        finalizerFn: (optional) function( aggregation ){...}
	       *        },
	         *      mean: {
	         *        label: 'mean',
	         *        aggregationFn: function( aggregation, fieldValue, numValue ){
	       *            aggregation.count = (aggregation.count || 1) + 1;
	         *          aggregation.sum = (aggregation.sum || 0) + numValue;
	         *        },
	         *        finalizerFn: function( aggregation ){
	         *          aggregation.value = aggregation.sum / aggregation.count
	         *        }
	         *      }
	         *    }
	         *  </pre>
	         *
	         *  <br/>The `finalizerFn` may be used to manipulate the value before rendering, or to
	         *  apply a custom rendered value. If `aggregation.rendered` is left undefined, the value will be
	         *  rendered. Note that the native aggregation functions use an `finalizerFn` to concatenate
	         *  the label and the value.
	         *
	         *  <br/>Defaults to {}
	         */
	        gridOptions.treeCustomAggregations = gridOptions.treeCustomAggregations || {};

	        /**
	         *  @ngdoc object
	         *  @name enableExpandAll
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description Enable the expand all button at the top of the row header
	         *
	         *  <br/>Defaults to true
	         */
	        gridOptions.enableExpandAll = gridOptions.enableExpandAll !== false;
	      },


	      /**
	       * @ngdoc function
	       * @name treeBaseColumnBuilder
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Sets the tree defaults based on the columnDefs
	       *
	       * @param {object} colDef columnDef we're basing on
	       * @param {GridCol} col the column we're to update
	       * @param {object} gridOptions the options we should use
	       * @returns {promise} promise for the builder - actually we do it all inline so it's immediately resolved
	       */
	      treeBaseColumnBuilder: function (colDef, col, gridOptions) {


	        /**
	         *  @ngdoc object
	         *  @name customTreeAggregationFn
	         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
	         *  @description A custom function that aggregates rows into some form of
	         *  total.  Aggregations run row-by-row, the function needs to be capable of
	         *  creating a running total.
	         *
	         *  The function will be provided the aggregation item (in which you can store running
	         *  totals), the row value that is to be aggregated, and that same row value converted to
	         *  a number (most aggregations work on numbers)
	         *  @example
	         *  <pre>
	         *    customTreeAggregationFn = function ( aggregation, fieldValue, numValue, row ){
	         *      // calculates the average of the squares of the values
	         *      if ( typeof(aggregation.count) === 'undefined' ){
	         *        aggregation.count = 0;
	         *      }
	         *      aggregation.count++;
	         *
	         *      if ( !isNaN(numValue) ){
	         *        if ( typeof(aggregation.total) === 'undefined' ){
	         *          aggregation.total = 0;
	         *        }
	         *        aggregation.total = aggregation.total + numValue * numValue;
	         *      }
	         *
	         *      aggregation.value = aggregation.total / aggregation.count;
	         *    }
	         *  </pre>
	         *  <br/>Defaults to undefined. May be overwritten by treeAggregationType, the two options should not be used together.
	         */
	        if ( typeof(colDef.customTreeAggregationFn) !== 'undefined' ){
	          col.treeAggregationFn = colDef.customTreeAggregationFn;
	        }

	        /**
	         *  @ngdoc object
	         *  @name treeAggregationType
	         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
	         *  @description Use one of the native or grid-level aggregation methods for calculating aggregations on this column.
	         *  Native method are in the constants file and include: SUM, COUNT, MIN, MAX, AVG. This may also be the property the
	         *  name of an aggregation function defined with {@link ui.grid.treeBase.api:GridOptions treeCustomAggregations}.
	         *
	         *  <pre>
	         *      treeAggregationType = uiGridTreeBaseConstants.aggregation.SUM,
	         *    }
	         *  </pre>
	         *
	         *  If you are using aggregations you should either:
	         *
	         *   - also use grouping, in which case the aggregations are displayed in the group header, OR
	         *   - use treeView, in which case you can set `treeAggregationUpdateEntity: true` in the colDef, and
	         *     treeBase will store the aggregation information in the entity, or you can set `treeAggregationUpdateEntity: false`
	         *     in the colDef, and you need to manual retrieve the calculated aggregations from the row.treeNode.aggregations
	         *
	         *  <br/>Takes precendence over a treeAggregationFn, the two options should not be used together.
	         *  <br/>Defaults to undefined.
	         */
	        if ( typeof(colDef.treeAggregationType) !== 'undefined' ){
	          col.treeAggregation = { type: colDef.treeAggregationType };
	          if ( typeof(gridOptions.treeCustomAggregations[colDef.treeAggregationType]) !== 'undefined' ){
	            col.treeAggregationFn = gridOptions.treeCustomAggregations[colDef.treeAggregationType].aggregationFn;
	            col.treeAggregationFinalizerFn = gridOptions.treeCustomAggregations[colDef.treeAggregationType].finalizerFn;
	            col.treeAggregation.label = gridOptions.treeCustomAggregations[colDef.treeAggregationType].label;
	          } else if ( typeof(service.nativeAggregations()[colDef.treeAggregationType]) !== 'undefined' ){
	            col.treeAggregationFn = service.nativeAggregations()[colDef.treeAggregationType].aggregationFn;
	            col.treeAggregation.label = service.nativeAggregations()[colDef.treeAggregationType].label;
	          }
	        }

	         /**
	         *  @ngdoc object
	         *  @name treeAggregationLabel
	         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
	         *  @description A custom label to use for this aggregation. If provided we don't use native i18n.
	         */
	        if ( typeof(colDef.treeAggregationLabel) !== 'undefined' ){
	          if (typeof(col.treeAggregation) === 'undefined' ){
	            col.treeAggregation = {};
	          }
	          col.treeAggregation.label = colDef.treeAggregationLabel;
	        }

	        /**
	         *  @ngdoc object
	         *  @name treeAggregationUpdateEntity
	         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
	         *  @description Store calculated aggregations into the entity, allowing them
	         *  to be displayed in the grid using a standard cellTemplate.  This defaults to true,
	         *  if you are using grouping then you shouldn't set it to false, as then the aggregations won't
	         *  display.
	         *
	         *  If you are using treeView in most cases you'll want to set this to true.  This will result in
	         *  getCellValue returning the aggregation rather than whatever was stored in the cell attribute on
	         *  the entity.  If you want to render the underlying entity value (and do something else with the aggregation)
	         *  then you could use a custom cellTemplate to display `row.entity.myAttribute`, rather than using getCellValue.
	         *
	         *  <br/>Defaults to true
	         *
	         *  @example
	         *  <pre>
	         *    gridOptions.columns = [{
	         *      name: 'myCol',
	         *      treeAggregation: { type: uiGridTreeBaseConstants.aggregation.SUM },
	         *      treeAggregationUpdateEntity: true
	         *      cellTemplate: '<div>{{row.entity.myCol + " " + row.treeNode.aggregations[0].rendered}}</div>'
	         *    }];
	         * </pre>
	         */
	        col.treeAggregationUpdateEntity = colDef.treeAggregationUpdateEntity !== false;

	        /**
	         *  @ngdoc object
	         *  @name customTreeAggregationFinalizerFn
	         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
	         *  @description A custom function that populates aggregation.rendered, this is called when
	         *  a particular aggregation has been fully calculated, and we want to render the value.
	         *
	         *  With the native aggregation options we just concatenate `aggregation.label` and
	         *  `aggregation.value`, but if you wanted to apply a filter or otherwise manipulate the label
	         *  or the value, you can do so with this function. This function will be called after the
	         *  the default `finalizerFn`.
	         *
	         *  @example
	         *  <pre>
	         *    customTreeAggregationFinalizerFn = function ( aggregation ){
	         *      aggregation.rendered = aggregation.label + aggregation.value / 100 + '%';
	         *    }
	         *  </pre>
	         *  <br/>Defaults to undefined.
	         */
	        if ( typeof(col.customTreeAggregationFinalizerFn) === 'undefined' ){
	          col.customTreeAggregationFinalizerFn = colDef.customTreeAggregationFinalizerFn;
	        }

	      },


	      /**
	       * @ngdoc function
	       * @name createRowHeader
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Create the rowHeader.  If treeRowHeaderAlwaysVisible then
	       * set it to visible, otherwise set it to invisible
	       *
	       * @param {Grid} grid grid object
	       */
	      createRowHeader: function( grid ){
	        var rowHeaderColumnDef = {
	          name: uiGridTreeBaseConstants.rowHeaderColName,
	          displayName: '',
	          width:  grid.options.treeRowHeaderBaseWidth,
	          minWidth: 10,
	          cellTemplate: 'ui-grid/treeBaseRowHeader',
	          headerCellTemplate: 'ui-grid/treeBaseHeaderCell',
	          enableColumnResizing: false,
	          enableColumnMenu: false,
	          exporterSuppressExport: true,
	          allowCellFocus: true
	        };

	        rowHeaderColumnDef.visible = grid.options.treeRowHeaderAlwaysVisible;
	        grid.addRowHeaderColumn( rowHeaderColumnDef, -100 );
	      },


	      /**
	       * @ngdoc function
	       * @name expandAllRows
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Expands all nodes in the tree
	       *
	       * @param {Grid} grid grid object
	       */
	      expandAllRows: function (grid) {
	        grid.treeBase.tree.forEach( function( node ) {
	          service.setAllNodes( grid, node, uiGridTreeBaseConstants.EXPANDED);
	        });
	        grid.treeBase.expandAll = true;
	        grid.queueGridRefresh();
	      },


	      /**
	       * @ngdoc function
	       * @name collapseAllRows
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Collapses all nodes in the tree
	       *
	       * @param {Grid} grid grid object
	       */
	      collapseAllRows: function (grid) {
	        grid.treeBase.tree.forEach( function( node ) {
	          service.setAllNodes( grid, node, uiGridTreeBaseConstants.COLLAPSED);
	        });
	        grid.treeBase.expandAll = false;
	        grid.queueGridRefresh();
	      },


	      /**
	       * @ngdoc function
	       * @name setAllNodes
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Works through a subset of grid.treeBase.rowExpandedStates, setting
	       * all child nodes (and their descendents) of the provided node to the given state.
	       *
	       * Calls itself recursively on all nodes so as to achieve this.
	       *
	       * @param {Grid} grid the grid we're operating on (so we can raise events)
	       * @param {object} treeNode a node in the tree that we want to update
	       * @param {string} targetState the state we want to set it to
	       */
	      setAllNodes: function (grid, treeNode, targetState) {
	        if ( typeof(treeNode.state) !== 'undefined' && treeNode.state !== targetState ){
	          treeNode.state = targetState;

	          if ( targetState === uiGridTreeBaseConstants.EXPANDED ){
	            grid.api.treeBase.raise.rowExpanded(treeNode.row);
	          } else {
	            grid.api.treeBase.raise.rowCollapsed(treeNode.row);
	          }
	        }

	        // set all child nodes
	        if ( treeNode.children ){
	          treeNode.children.forEach(function( childNode ){
	            service.setAllNodes(grid, childNode, targetState);
	          });
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name toggleRowTreeState
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Toggles the expand or collapse state of this grouped row, if
	       * it's a parent row
	       *
	       * @param {Grid} grid grid object
	       * @param {GridRow} row the row we want to toggle
	       */
	      toggleRowTreeState: function ( grid, row ){
	        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ){
	          return;
	        }

	        if (row.treeNode.state === uiGridTreeBaseConstants.EXPANDED){
	          service.collapseRow(grid, row);
	        } else {
	          service.expandRow(grid, row);
	        }

	        grid.queueGridRefresh();
	      },


	      /**
	       * @ngdoc function
	       * @name expandRow
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Expands this specific row, showing only immediate children.
	       *
	       * @param {Grid} grid grid object
	       * @param {GridRow} row the row we want to expand
	       */
	      expandRow: function ( grid, row ){
	        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ){
	          return;
	        }

	        if ( row.treeNode.state !== uiGridTreeBaseConstants.EXPANDED ){
	          row.treeNode.state = uiGridTreeBaseConstants.EXPANDED;
	          grid.api.treeBase.raise.rowExpanded(row);
	          grid.treeBase.expandAll = service.allExpanded(grid.treeBase.tree);
	          grid.queueGridRefresh();
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name expandRowChildren
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Expands this specific row, showing all children.
	       *
	       * @param {Grid} grid grid object
	       * @param {GridRow} row the row we want to expand
	       */
	      expandRowChildren: function ( grid, row ){
	        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ){
	          return;
	        }

	        service.setAllNodes(grid, row.treeNode, uiGridTreeBaseConstants.EXPANDED);
	        grid.treeBase.expandAll = service.allExpanded(grid.treeBase.tree);
	        grid.queueGridRefresh();
	      },


	      /**
	       * @ngdoc function
	       * @name collapseRow
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Collapses this specific row
	       *
	       * @param {Grid} grid grid object
	       * @param {GridRow} row the row we want to collapse
	       */
	      collapseRow: function( grid, row ){
	        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ){
	          return;
	        }

	        if ( row.treeNode.state !== uiGridTreeBaseConstants.COLLAPSED ){
	          row.treeNode.state = uiGridTreeBaseConstants.COLLAPSED;
	          grid.treeBase.expandAll = false;
	          grid.api.treeBase.raise.rowCollapsed(row);
	          grid.queueGridRefresh();
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name collapseRowChildren
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Collapses this specific row and all children
	       *
	       * @param {Grid} grid grid object
	       * @param {GridRow} row the row we want to collapse
	       */
	      collapseRowChildren: function( grid, row ){
	        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ){
	          return;
	        }

	        service.setAllNodes(grid, row.treeNode, uiGridTreeBaseConstants.COLLAPSED);
	        grid.treeBase.expandAll = false;
	        grid.queueGridRefresh();
	      },


	      /**
	       * @ngdoc function
	       * @name allExpanded
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Returns true if all rows are expanded, false
	       * if they're not.  Walks the tree to determine this.  Used
	       * to set the expandAll state.
	       *
	       * If the node has no children, then return true (it's immaterial
	       * whether it is expanded).  If the node has children, then return
	       * false if this node is collapsed, or if any child node is not all expanded
	       *
	       * @param {object} tree the grid to check
	       * @returns {boolean} whether or not the tree is all expanded
	       */
	      allExpanded: function( tree ){
	        var allExpanded = true;
	        tree.forEach( function( node ){
	          if ( !service.allExpandedInternal( node ) ){
	            allExpanded = false;
	          }
	        });
	        return allExpanded;
	      },

	      allExpandedInternal: function( treeNode ){
	        if ( treeNode.children && treeNode.children.length > 0 ){
	          if ( treeNode.state === uiGridTreeBaseConstants.COLLAPSED ){
	            return false;
	          }
	          var allExpanded = true;
	          treeNode.children.forEach( function( node ){
	            if ( !service.allExpandedInternal( node ) ){
	              allExpanded = false;
	            }
	          });
	          return allExpanded;
	        } else {
	          return true;
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name treeRows
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description The rowProcessor that adds the nodes to the tree, and sets the visible
	       * state of each row based on it's parent state
	       *
	       * Assumes it is always called after the sorting processor, and the grouping processor if there is one.
	       * Performs any tree sorts itself after having built the tree
	       *
	       * Processes all the rows in order, setting the group level based on the $$treeLevel in the associated
	       * entity, and setting the visible state based on the parent's state.
	       *
	       * Calculates the deepest level of tree whilst it goes, and updates that so that the header column can be correctly
	       * sized.
	       *
	       * Aggregates if necessary along the way.
	       *
	       * @param {array} renderableRows the rows we want to process, usually the output from the previous rowProcessor
	       * @returns {array} the updated rows
	       */
	      treeRows: function( renderableRows ) {
	        if (renderableRows.length === 0){
	          return renderableRows;
	        }

	        var grid = this;
	        var currentLevel = 0;
	        var currentState = uiGridTreeBaseConstants.EXPANDED;
	        var parents = [];

	        grid.treeBase.tree = service.createTree( grid, renderableRows );
	        service.updateRowHeaderWidth( grid );

	        service.sortTree( grid );
	        service.fixFilter( grid );

	        return service.renderTree( grid.treeBase.tree );
	      },


	      /**
	       * @ngdoc function
	       * @name createOrUpdateRowHeaderWidth
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Calculates the rowHeader width.
	       *
	       * If rowHeader is always present, updates the width.
	       *
	       * If rowHeader is only sometimes present (`treeRowHeaderAlwaysVisible: false`), determines whether there
	       * should be one, then creates or removes it as appropriate, with the created rowHeader having the
	       * right width.
	       *
	       * If there's never a rowHeader then never creates one: `showTreeRowHeader: false`
	       *
	       * @param {Grid} grid the grid we want to set the row header on
	       */
	      updateRowHeaderWidth: function( grid ){
	        var rowHeader = grid.getColumn(uiGridTreeBaseConstants.rowHeaderColName);

	        var newWidth = grid.options.treeRowHeaderBaseWidth + grid.options.treeIndent * Math.max(grid.treeBase.numberLevels - 1, 0);
	        if ( rowHeader && newWidth !== rowHeader.width ){
	          rowHeader.width = newWidth;
	          grid.queueRefresh();
	        }

	        var newVisibility = true;
	        if ( grid.options.showTreeRowHeader === false ){
	          newVisibility = false;
	        }
	        if ( grid.options.treeRowHeaderAlwaysVisible === false && grid.treeBase.numberLevels <= 0 ){
	          newVisibility = false;
	        }
	        if ( rowHeader.visible !== newVisibility ) {
	          rowHeader.visible = newVisibility;
	          rowHeader.colDef.visible = newVisibility;
	          grid.queueGridRefresh();
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name renderTree
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Creates an array of rows based on the tree, exporting only
	       * the visible nodes and leaves
	       *
	       * @param {array} nodeList the list of nodes - can be grid.treeBase.tree, or can be node.children when
	       * we're calling recursively
	       * @returns {array} renderable rows
	       */
	      renderTree: function( nodeList ){
	        var renderableRows = [];

	        nodeList.forEach( function ( node ){
	          if ( node.row.visible ){
	            renderableRows.push( node.row );
	          }
	          if ( node.state === uiGridTreeBaseConstants.EXPANDED && node.children && node.children.length > 0 ){
	            renderableRows = renderableRows.concat( service.renderTree( node.children ) );
	          }
	        });
	        return renderableRows;
	      },


	      /**
	       * @ngdoc function
	       * @name createTree
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Creates a tree from the renderableRows
	       *
	       * @param {Grid} grid the grid
	       * @param {array} renderableRows the rows we want to create a tree from
	       * @returns {object} the tree we've build
	       */
	      createTree: function( grid, renderableRows ) {
	        var currentLevel = -1;
	        var parents = [];
	        var currentState;
	        grid.treeBase.tree = [];
	        grid.treeBase.numberLevels = 0;
	        var aggregations = service.getAggregations( grid );

	        var createNode = function( row ){
	          if ( typeof(row.entity.$$treeLevel) !== 'undefined' && row.treeLevel !== row.entity.$$treeLevel ){
	            row.treeLevel = row.entity.$$treeLevel;
	          }

	          if ( row.treeLevel <= currentLevel ){
	            // pop any levels that aren't parents of this level, formatting the aggregation at the same time
	            while ( row.treeLevel <= currentLevel ){
	              var lastParent = parents.pop();
	              service.finaliseAggregations( lastParent );
	              currentLevel--;
	            }

	            // reset our current state based on the new parent, set to expanded if this is a level 0 node
	            if ( parents.length > 0 ){
	              currentState = service.setCurrentState(parents);
	            } else {
	              currentState = uiGridTreeBaseConstants.EXPANDED;
	            }
	          }

	          // aggregate if this is a leaf node
	          if ( ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ) && row.visible  ){
	            service.aggregate( grid, row, parents );
	          }

	          // add this node to the tree
	          service.addOrUseNode(grid, row, parents, aggregations);

	          if ( typeof(row.treeLevel) !== 'undefined' && row.treeLevel !== null && row.treeLevel >= 0 ){
	            parents.push(row);
	            currentLevel++;
	            currentState = service.setCurrentState(parents);
	          }

	          // update the tree number of levels, so we can set header width if we need to
	          if ( grid.treeBase.numberLevels < row.treeLevel + 1){
	            grid.treeBase.numberLevels = row.treeLevel + 1;
	          }
	        };

	        renderableRows.forEach( createNode );

	        // finalise remaining aggregations
	        while ( parents.length > 0 ){
	          var lastParent = parents.pop();
	          service.finaliseAggregations( lastParent );
	        }

	        return grid.treeBase.tree;
	      },


	      /**
	       * @ngdoc function
	       * @name addOrUseNode
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Creates a tree node for this row.  If this row already has a treeNode
	       * recorded against it, preserves the state, but otherwise overwrites the data.
	       *
	       * @param {grid} grid the grid we're operating on
	       * @param {gridRow} row the row we want to set
	       * @param {array} parents an array of the parents this row should have
	       * @param {array} aggregationBase empty aggregation information
	       * @returns {undefined} updates the parents array, updates the row to have a treeNode, and updates the
	       * grid.treeBase.tree
	       */
	      addOrUseNode: function( grid, row, parents, aggregationBase ){
	        var newAggregations = [];
	        aggregationBase.forEach( function(aggregation){
	          newAggregations.push(service.buildAggregationObject(aggregation.col));
	        });

	        var newNode = { state: uiGridTreeBaseConstants.COLLAPSED, row: row, parentRow: null, aggregations: newAggregations, children: [] };
	        if ( row.treeNode ){
	          newNode.state = row.treeNode.state;
	        }
	        if ( parents.length > 0 ){
	          newNode.parentRow = parents[parents.length - 1];
	        }
	        row.treeNode = newNode;

	        if ( parents.length === 0 ){
	          grid.treeBase.tree.push( newNode );
	        } else {
	          parents[parents.length - 1].treeNode.children.push( newNode );
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name setCurrentState
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Looks at the parents array to determine our current state.
	       * If any node in the hierarchy is collapsed, then return collapsed, otherwise return
	       * expanded.
	       *
	       * @param {array} parents an array of the parents this row should have
	       * @returns {string} the state we should be setting to any nodes we see
	       */
	      setCurrentState: function( parents ){
	        var currentState = uiGridTreeBaseConstants.EXPANDED;
	        parents.forEach( function(parent){
	          if ( parent.treeNode.state === uiGridTreeBaseConstants.COLLAPSED ){
	            currentState = uiGridTreeBaseConstants.COLLAPSED;
	          }
	        });
	        return currentState;
	      },


	      /**
	       * @ngdoc function
	       * @name sortTree
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Performs a recursive sort on the tree nodes, sorting the
	       * children of each node and putting them back into the children array.
	       *
	       * Before doing this it turns back on all the sortIgnore - things that were previously
	       * ignored we process now.  Since we're sorting within the nodes, presumably anything
	       * that was already sorted is how we derived the nodes, we can keep those sorts too.
	       *
	       * We only sort tree nodes that are expanded - no point in wasting effort sorting collapsed
	       * nodes
	       *
	       * @param {Grid} grid the grid to get the aggregation information from
	       * @returns {array} the aggregation information
	       */
	      sortTree: function( grid ){
	        grid.columns.forEach( function( column ) {
	          if ( column.sort && column.sort.ignoreSort ){
	            delete column.sort.ignoreSort;
	          }
	        });

	        grid.treeBase.tree = service.sortInternal( grid, grid.treeBase.tree );
	      },

	      sortInternal: function( grid, treeList ){
	        var rows = treeList.map( function( node ){
	          return node.row;
	        });

	        rows = rowSorter.sort( grid, rows, grid.columns );

	        var treeNodes = rows.map( function( row ){
	          return row.treeNode;
	        });

	        treeNodes.forEach( function( node ){
	          if ( node.state === uiGridTreeBaseConstants.EXPANDED && node.children && node.children.length > 0 ){
	            node.children = service.sortInternal( grid, node.children );
	          }
	        });

	        return treeNodes;
	      },

	      /**
	       * @ngdoc function
	       * @name fixFilter
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description After filtering has run, we need to go back through the tree
	       * and make sure the parent rows are always visible if any of the child rows
	       * are visible (filtering may make a child visible, but the parent may not
	       * match the filter criteria)
	       *
	       * This has a risk of being computationally expensive, we do it by walking
	       * the tree and remembering whether there are any invisible nodes on the
	       * way down.
	       *
	       * @param {Grid} grid the grid to fix filters on
	       */
	      fixFilter: function( grid ){
	        var parentsVisible;

	        grid.treeBase.tree.forEach( function( node ){
	          if ( node.children && node.children.length > 0 ){
	            parentsVisible = node.row.visible;
	            service.fixFilterInternal( node.children, parentsVisible );
	          }
	        });
	      },

	      fixFilterInternal: function( nodes, parentsVisible) {
	        nodes.forEach( function( node ){
	          if ( node.row.visible && !parentsVisible ){
	            service.setParentsVisible( node );
	            parentsVisible = true;
	          }

	          if ( node.children && node.children.length > 0 ){
	            if ( service.fixFilterInternal( node.children, ( parentsVisible && node.row.visible ) ) ) {
	              parentsVisible = true;
	            }
	          }
	        });

	        return parentsVisible;
	      },

	      setParentsVisible: function( node ){
	        while ( node.parentRow ){
	          node.parentRow.visible = true;
	          node = node.parentRow.treeNode;
	        }
	      },

	      /**
	       * @ngdoc function
	       * @name buildAggregationObject
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Build the object which is stored on the column for holding meta-data about the aggregation.
	       * This method should only be called with columns which have an aggregation.
	       *
	       * @param {Column} the column which this object relates to
	       * @returns {object} {col: Column object, label: string, type: string (optional)}
	       */
	      buildAggregationObject: function( column ){
	        var newAggregation = { col: column };

	        if ( column.treeAggregation && column.treeAggregation.type ){
	          newAggregation.type = column.treeAggregation.type;
	        }

	        if ( column.treeAggregation && column.treeAggregation.label ){
	          newAggregation.label = column.treeAggregation.label;
	        }

	        return newAggregation;
	      },

	      /**
	       * @ngdoc function
	       * @name getAggregations
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Looks through the grid columns to find those with aggregations,
	       * and collates the aggregation information into an array, returns that array
	       *
	       * @param {Grid} grid the grid to get the aggregation information from
	       * @returns {array} the aggregation information
	       */
	      getAggregations: function( grid ){
	        var aggregateArray = [];

	        grid.columns.forEach( function(column){
	          if ( typeof(column.treeAggregationFn) !== 'undefined' ){
	            aggregateArray.push( service.buildAggregationObject(column) );

	            if ( grid.options.showColumnFooter && typeof(column.colDef.aggregationType) === 'undefined' && column.treeAggregation ){
	              // Add aggregation object for footer
	              column.treeFooterAggregation = service.buildAggregationObject(column);
	              column.aggregationType = service.treeFooterAggregationType;
	            }
	          }
	        });
	        return aggregateArray;
	      },


	      /**
	       * @ngdoc function
	       * @name aggregate
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Accumulate the data from this row onto the aggregations for each parent
	       *
	       * Iterate over the parents, then iterate over the aggregations for each of those parents,
	       * and perform the aggregation for each individual aggregation
	       *
	       * @param {Grid} grid grid object
	       * @param {GridRow} row the row we want to set grouping visibility on
	       * @param {array} parents the parents that we would want to aggregate onto
	       */
	      aggregate: function( grid, row, parents ){
	        if ( parents.length === 0 && row.treeNode && row.treeNode.aggregations ){
	          row.treeNode.aggregations.forEach(function(aggregation){
	            // Calculate aggregations for footer even if there are no grouped rows
	            if ( typeof(aggregation.col.treeFooterAggregation) !== 'undefined' ) {
	              var fieldValue = grid.getCellValue(row, aggregation.col);
	              var numValue = Number(fieldValue);
	              aggregation.col.treeAggregationFn(aggregation.col.treeFooterAggregation, fieldValue, numValue, row);
	            }
	          });
	        }

	        parents.forEach( function( parent, index ){
	          if ( parent.treeNode.aggregations ){
	            parent.treeNode.aggregations.forEach( function( aggregation ){
	              var fieldValue = grid.getCellValue(row, aggregation.col);
	              var numValue = Number(fieldValue);
	              aggregation.col.treeAggregationFn(aggregation, fieldValue, numValue, row);

	              if ( index === 0 && typeof(aggregation.col.treeFooterAggregation) !== 'undefined' ){
	                aggregation.col.treeAggregationFn(aggregation.col.treeFooterAggregation, fieldValue, numValue, row);
	              }
	            });
	          }
	        });
	      },


	      // Aggregation routines - no doco needed as self evident
	      nativeAggregations: function() {
	        var nativeAggregations = {
	          count: {
	            label: i18nService.get().aggregation.count,
	            menuTitle: i18nService.get().grouping.aggregate_count,
	            aggregationFn: function (aggregation, fieldValue, numValue) {
	              if (typeof(aggregation.value) === 'undefined') {
	                aggregation.value = 1;
	              } else {
	                aggregation.value++;
	              }
	            }
	          },

	          sum: {
	            label: i18nService.get().aggregation.sum,
	            menuTitle: i18nService.get().grouping.aggregate_sum,
	            aggregationFn: function( aggregation, fieldValue, numValue ) {
	              if (!isNaN(numValue)) {
	                if (typeof(aggregation.value) === 'undefined') {
	                  aggregation.value = numValue;
	                } else {
	                  aggregation.value += numValue;
	                }
	              }
	            }
	          },

	          min: {
	            label: i18nService.get().aggregation.min,
	            menuTitle: i18nService.get().grouping.aggregate_min,
	            aggregationFn: function( aggregation, fieldValue, numValue ) {
	              if (typeof(aggregation.value) === 'undefined') {
	                aggregation.value = fieldValue;
	              } else {
	                if (typeof(fieldValue) !== 'undefined' && fieldValue !== null && (fieldValue < aggregation.value || aggregation.value === null)) {
	                  aggregation.value = fieldValue;
	                }
	              }
	            }
	          },

	          max: {
	            label: i18nService.get().aggregation.max,
	            menuTitle: i18nService.get().grouping.aggregate_max,
	            aggregationFn: function( aggregation, fieldValue, numValue ){
	              if ( typeof(aggregation.value) === 'undefined' ){
	                aggregation.value = fieldValue;
	              } else {
	                if ( typeof(fieldValue) !== 'undefined' && fieldValue !== null && (fieldValue > aggregation.value || aggregation.value === null)){
	                  aggregation.value = fieldValue;
	                }
	              }
	            }
	          },

	          avg: {
	            label: i18nService.get().aggregation.avg,
	            menuTitle: i18nService.get().grouping.aggregate_avg,
	            aggregationFn: function( aggregation, fieldValue, numValue ){
	              if ( typeof(aggregation.count) === 'undefined' ){
	                aggregation.count = 1;
	              } else {
	                aggregation.count++;
	              }

	              if ( isNaN(numValue) ){
	                return;
	              }

	              if ( typeof(aggregation.value) === 'undefined' || typeof(aggregation.sum) === 'undefined' ){
	                aggregation.value = numValue;
	                aggregation.sum = numValue;
	              } else {
	                aggregation.sum += numValue;
	                aggregation.value = aggregation.sum / aggregation.count;
	              }
	            }
	          }
	        };
	        return nativeAggregations;
	      },

	      /**
	       * @ngdoc function
	       * @name finaliseAggregation
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Helper function used to finalize aggregation nodes and footer cells
	       *
	       * @param {gridRow} row the parent we're finalising
	       * @param {aggregation} the aggregation object manipulated by the aggregationFn
	       */
	      finaliseAggregation: function(row, aggregation){
	        if ( aggregation.col.treeAggregationUpdateEntity && typeof(row) !== 'undefined' && typeof(row.entity[ '$$' + aggregation.col.uid ]) !== 'undefined' ){
	          angular.extend( aggregation, row.entity[ '$$' + aggregation.col.uid ]);
	        }

	        if ( typeof(aggregation.col.treeAggregationFinalizerFn) === 'function' ){
	          aggregation.col.treeAggregationFinalizerFn( aggregation );
	        }
	        if ( typeof(aggregation.col.customTreeAggregationFinalizerFn) === 'function' ){
	          aggregation.col.customTreeAggregationFinalizerFn( aggregation );
	        }
	        if ( typeof(aggregation.rendered) === 'undefined' ){
	          aggregation.rendered = aggregation.label ? aggregation.label + aggregation.value : aggregation.value;
	        }
	      },

	      /**
	       * @ngdoc function
	       * @name finaliseAggregations
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Format the data from the aggregation into the rendered text
	       * e.g. if we had label: 'sum: ' and value: 25, we'd create 'sum: 25'.
	       *
	       * As part of this we call any formatting callback routines we've been provided.
	       *
	       * We write our aggregation out to the row.entity if treeAggregationUpdateEntity is
	       * set on the column - we don't overwrite any information that's already there, we append
	       * to it so that grouping can have set the groupVal beforehand without us overwriting it.
	       *
	       * We need to copy the data from the row.entity first before we finalise the aggregation,
	       * we need that information for the finaliserFn
	       *
	       * @param {gridRow} row the parent we're finalising
	       */
	      finaliseAggregations: function( row ){
	        if ( row == null || typeof(row.treeNode.aggregations) === 'undefined' ){
	          return;
	        }

	        row.treeNode.aggregations.forEach( function( aggregation ) {
	          service.finaliseAggregation(row, aggregation);

	          if ( aggregation.col.treeAggregationUpdateEntity ){
	            var aggregationCopy = {};
	            angular.forEach( aggregation, function( value, key ){
	              if ( aggregation.hasOwnProperty(key) && key !== 'col' ){
	                aggregationCopy[key] = value;
	              }
	            });

	            row.entity[ '$$' + aggregation.col.uid ] = aggregationCopy;
	          }
	        });
	      },

	      /**
	       * @ngdoc function
	       * @name treeFooterAggregationType
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Uses the tree aggregation functions and finalizers to set the
	       * column footer aggregations.
	       *
	       * @param {rows} visible rows. not used, but accepted to match signature of GridColumn.aggregationType
	       * @param {gridColumn} the column we are finalizing
	       */
	      treeFooterAggregationType: function( rows, column ) {
	        service.finaliseAggregation(undefined, column.treeFooterAggregation);
	        if ( typeof(column.treeFooterAggregation.value) === 'undefined' || column.treeFooterAggregation.rendered === null ){
	          // The was apparently no aggregation performed (perhaps this is a grouped column
	          return '';
	        }
	        return column.treeFooterAggregation.rendered;
	      }
	    };

	    return service;

	  }]);


	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.treeBase.directive:uiGridTreeRowHeaderButtons
	   *  @element div
	   *
	   *  @description Provides the expand/collapse button on rows
	   */
	  module.directive('uiGridTreeBaseRowHeaderButtons', ['$templateCache', 'uiGridTreeBaseService',
	  function ($templateCache, uiGridTreeBaseService) {
	    return {
	      replace: true,
	      restrict: 'E',
	      template: $templateCache.get('ui-grid/treeBaseRowHeaderButtons'),
	      scope: true,
	      require: '^uiGrid',
	      link: function($scope, $elm, $attrs, uiGridCtrl) {
	        var self = uiGridCtrl.grid;
	        $scope.treeButtonClick = function(row, evt) {
	          uiGridTreeBaseService.toggleRowTreeState(self, row, evt);
	        };
	      }
	    };
	  }]);


	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.treeBase.directive:uiGridTreeBaseExpandAllButtons
	   *  @element div
	   *
	   *  @description Provides the expand/collapse all button
	   */
	  module.directive('uiGridTreeBaseExpandAllButtons', ['$templateCache', 'uiGridTreeBaseService',
	  function ($templateCache, uiGridTreeBaseService) {
	    return {
	      replace: true,
	      restrict: 'E',
	      template: $templateCache.get('ui-grid/treeBaseExpandAllButtons'),
	      scope: false,
	      link: function($scope, $elm, $attrs, uiGridCtrl) {
	        var self = $scope.col.grid;

	        $scope.headerButtonClick = function(row, evt) {
	          if ( self.treeBase.expandAll ){
	            uiGridTreeBaseService.collapseAllRows(self, evt);
	          } else {
	            uiGridTreeBaseService.expandAllRows(self, evt);
	          }
	        };
	      }
	    };
	  }]);


	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.treeBase.directive:uiGridViewport
	   *  @element div
	   *
	   *  @description Stacks on top of ui.grid.uiGridViewport to set formatting on a tree header row
	   */
	  module.directive('uiGridViewport',
	  ['$compile', 'uiGridConstants', 'gridUtil', '$parse',
	    function ($compile, uiGridConstants, gridUtil, $parse) {
	      return {
	        priority: -200, // run after default  directive
	        scope: false,
	        compile: function ($elm, $attrs) {
	          var rowRepeatDiv = angular.element($elm.children().children()[0]);

	          var existingNgClass = rowRepeatDiv.attr("ng-class");
	          var newNgClass = '';
	          if ( existingNgClass ) {
	            newNgClass = existingNgClass.slice(0, -1) + ",'ui-grid-tree-header-row': row.treeLevel > -1}";
	          } else {
	            newNgClass = "{'ui-grid-tree-header-row': row.treeLevel > -1}";
	          }
	          rowRepeatDiv.attr("ng-class", newNgClass);

	          return {
	            pre: function ($scope, $elm, $attrs, controllers) {

	            },
	            post: function ($scope, $elm, $attrs, controllers) {
	            }
	          };
	        }
	      };
	    }]);
	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.treeView
	   * @description
	   *
	   * # ui.grid.treeView
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
	   *
	   * This module provides a tree view of the data that it is provided, with nodes in that
	   * tree and leaves.  Unlike grouping, the tree is an inherent property of the data and must
	   * be provided with your data array.
	   *
	   * Design information:
	   * -------------------
	   *
	   * TreeView uses treeBase for the underlying functionality, and is a very thin wrapper around
	   * that logic.  Most of the design information has now moved to treebase.
	   * <br/>
	   * <br/>
	   *
	   * <div doc-module-components="ui.grid.treeView"></div>
	   */

	  var module = angular.module('ui.grid.treeView', ['ui.grid', 'ui.grid.treeBase']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.treeView.constant:uiGridTreeViewConstants
	   *
	   *  @description constants available in treeView module, this includes
	   *  all the constants declared in the treeBase module (these are manually copied
	   *  as there isn't an easy way to include constants in another constants file, and
	   *  we don't want to make users include treeBase)
	   *
	   */
	  module.constant('uiGridTreeViewConstants', {
	    featureName: "treeView",
	    rowHeaderColName: 'treeBaseRowHeaderCol',
	    EXPANDED: 'expanded',
	    COLLAPSED: 'collapsed',
	    aggregation: {
	      COUNT: 'count',
	      SUM: 'sum',
	      MAX: 'max',
	      MIN: 'min',
	      AVG: 'avg'
	    }
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.treeView.service:uiGridTreeViewService
	   *
	   *  @description Services for treeView features
	   */
	  module.service('uiGridTreeViewService', ['$q', 'uiGridTreeViewConstants', 'uiGridTreeBaseConstants', 'uiGridTreeBaseService', 'gridUtil', 'GridRow', 'gridClassFactory', 'i18nService', 'uiGridConstants',
	  function ($q, uiGridTreeViewConstants, uiGridTreeBaseConstants, uiGridTreeBaseService, gridUtil, GridRow, gridClassFactory, i18nService, uiGridConstants) {

	    var service = {

	      initializeGrid: function (grid, $scope) {
	        uiGridTreeBaseService.initializeGrid( grid, $scope );

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.treeView.grid:treeView
	         *
	         *  @description Grid properties and functions added for treeView
	         */
	        grid.treeView = {};

	        grid.registerRowsProcessor(service.adjustSorting, 60);

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.treeView.api:PublicApi
	         *
	         *  @description Public Api for treeView feature
	         */
	        var publicApi = {
	          events: {
	            treeView: {
	            }
	          },
	          methods: {
	            treeView: {
	            }
	          }
	        };

	        grid.api.registerEventsFromObject(publicApi.events);

	        grid.api.registerMethodsFromObject(publicApi.methods);

	      },

	      defaultGridOptions: function (gridOptions) {
	        //default option to true unless it was explicitly set to false
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.treeView.api:GridOptions
	         *
	         *  @description GridOptions for treeView feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         *
	         *  Many tree options are set on treeBase, make sure to look at that feature in
	         *  conjunction with these options.
	         */

	        /**
	         *  @ngdoc object
	         *  @name enableTreeView
	         *  @propertyOf  ui.grid.treeView.api:GridOptions
	         *  @description Enable row tree view for entire grid.
	         *  <br/>Defaults to true
	         */
	        gridOptions.enableTreeView = gridOptions.enableTreeView !== false;

	      },


	      /**
	       * @ngdoc function
	       * @name adjustSorting
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Trees cannot be sorted the same as flat lists of rows -
	       * trees are sorted recursively within each level - so the children of each
	       * node are sorted, but not the full set of rows.
	       *
	       * To achieve this, we suppress the normal sorting by setting ignoreSort on
	       * each of the sort columns.  When the treeBase rowsProcessor runs it will then
	       * unignore these, and will perform a recursive sort against the tree that it builds.
	       *
	       * @param {array} renderableRows the rows that we need to pass on through
	       * @returns {array} renderableRows that we passed on through
	       */
	      adjustSorting: function( renderableRows ) {
	        var grid = this;

	        grid.columns.forEach( function( column ){
	          if ( column.sort ){
	            column.sort.ignoreSort = true;
	          }
	        });

	        return renderableRows;
	      }

	    };

	    return service;

	  }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.treeView.directive:uiGridTreeView
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds treeView features to grid
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.treeView']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name', enableCellEdit: true},
	        {name: 'title', enableCellEdit: true}
	      ];

	      $scope.gridOptions = { columnDefs: $scope.columnDefs, data: $scope.data };
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="gridOptions" ui-grid-tree-view></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridTreeView', ['uiGridTreeViewConstants', 'uiGridTreeViewService', '$templateCache',
	  function (uiGridTreeViewConstants, uiGridTreeViewService, $templateCache) {
	    return {
	      replace: true,
	      priority: 0,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            if (uiGridCtrl.grid.options.enableTreeView !== false){
	              uiGridTreeViewService.initializeGrid(uiGridCtrl.grid, $scope);
	            }
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {

	          }
	        };
	      }
	    };
	  }]);
	})();

	(function () {
	  'use strict';
	  
	  /**
	   * @ngdoc overview
	   * @name ui.grid.validate
	   * @description
	   *
	   * # ui.grid.validate
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
	   *
	   * This module provides the ability to validate cells upon change.
	   *
	   * Design information:
	   * -------------------
	   *
	   * Validation is not based on angularjs validation, since it would work only when editing the field.
	   * 
	   * Instead it adds custom properties to any field considered as invalid.
	   *
	   * <br/>
	   * <br/>
	   *
	   * <div doc-module-components="ui.grid.expandable"></div>
	   */

	  var module = angular.module('ui.grid.validate', ['ui.grid']);
	  
	  
	  /**
	   *  @ngdoc service
	   *  @name ui.grid.validate.service:uiGridValidateService
	   *
	   *  @description Services for validation features
	   */
	  module.service('uiGridValidateService', ['$sce', '$q', '$http', 'i18nService', 'uiGridConstants', function ($sce, $q, $http, i18nService, uiGridConstants) {

	    var service = {
	      
	      /**
	       *  @ngdoc object
	       *  @name validatorFactories
	       *  @propertyOf ui.grid.validate.service:uiGridValidateService
	       *  @description object containing all the factories used to validate data.<br/>
	       *  These factories will be in the form <br/>
	       *  ```
	       *  {
	       *    validatorFactory: function(argument) {
	       *                        return function(newValue, oldValue, rowEntity, colDef) {
	       *                          return true || false || promise
	       *                        }
	       *                      },
	       *    messageFunction: function(argument) {
	       *                       return string
	       *                     }
	       *  }
	       *  ```
	       *
	       * Promises should return true or false as result according to the result of validation.
	       */
	      validatorFactories: {},

	      
	      /**
	       * @ngdoc service
	       * @name setExternalFactoryFunction
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Adds a way to retrieve validators from an external service
	       * <p>Validators from this external service have a higher priority than default
	       * ones
	       * @param {function} externalFactoryFunction a function that accepts name and argument to pass to a
	       * validator factory and that returns an object with the same properties as 
	       * you can see in {@link ui.grid.validate.service:uiGridValidateService#properties_validatorFactories validatorFactories}
	       */
	      setExternalFactoryFunction: function(externalFactoryFunction) {
	        service.externalFactoryFunction = externalFactoryFunction;
	      },
	      
	      /**
	       * @ngdoc service
	       * @name clearExternalFactory
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Removes any link to external factory from this service
	       */
	      clearExternalFactory: function() {
	        delete service.externalFactoryFunction;
	      },

	      /**
	       * @ngdoc service
	       * @name getValidatorFromExternalFactory
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Retrieves a validator by executing a validatorFactory
	       * stored in an external service.
	       * @param {string} name the name of the validator to retrieve
	       * @param {object} argument an argument to pass to the validator factory
	       */
	      getValidatorFromExternalFactory: function(name, argument) {
	        return service.externalFactoryFunction(name, argument).validatorFactory(argument);
	      },
	      
	      /**
	       * @ngdoc service
	       * @name getMessageFromExternalFactory
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Retrieves a message stored in an external service.
	       * @param {string} name the name of the validator
	       * @param {object} argument an argument to pass to the message function
	       */
	      getMessageFromExternalFactory: function(name, argument) {
	        return service.externalFactoryFunction(name, argument).messageFunction(argument);
	      },
	      
	      /**
	       * @ngdoc service
	       * @name setValidator
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description  Adds a new validator to the service
	       * @param {string} name the name of the validator, must be unique
	       * @param {function} validatorFactory a factory that return a validatorFunction
	       * @param {function} messageFunction a function that return the error message
	       */
	      setValidator: function(name, validatorFactory, messageFunction) {
	        service.validatorFactories[name] = {
	          validatorFactory: validatorFactory,
	          messageFunction: messageFunction
	        };
	      },

	      /**
	       * @ngdoc service
	       * @name getValidator
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Returns a validator registered to the service
	       * or retrieved from the external factory
	       * @param {string} name the name of the validator to retrieve
	       * @param {object} argument an argument to pass to the validator factory
	       * @returns {object} the validator function
	       */
	      getValidator: function(name, argument) {
	        if (service.externalFactoryFunction) {
	          var validator = service.getValidatorFromExternalFactory(name, argument);
	          if (validator) {
	            return validator;
	          }
	        }
	        if (!service.validatorFactories[name]) {
	          throw ("Invalid validator name: " + name);
	        }
	        return service.validatorFactories[name].validatorFactory(argument);
	      },

	      /**
	       * @ngdoc service
	       * @name getMessage
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Returns the error message related to the validator 
	       * @param {string} name the name of the validator
	       * @param {object} argument an argument to pass to the message function
	       * @returns {string} the error message related to the validator
	       */
	      getMessage: function(name, argument) {
	        if (service.externalFactoryFunction) {
	          var message = service.getMessageFromExternalFactory(name, argument);
	          if (message) {
	            return message;
	          }
	        }
	        return service.validatorFactories[name].messageFunction(argument);
	      },

	      /**
	       * @ngdoc service
	       * @name isInvalid
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Returns true if the cell (identified by rowEntity, colDef) is invalid 
	       * @param {object} rowEntity the row entity of the cell
	       * @param {object} colDef the colDef of the cell
	       * @returns {boolean} true if the cell is invalid
	       */
	      isInvalid: function (rowEntity, colDef) {
	        return rowEntity['$$invalid'+colDef.name];
	      },

	      /**
	       * @ngdoc service
	       * @name setInvalid
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Makes the cell invalid by adding the proper field to the entity
	       * @param {object} rowEntity the row entity of the cell
	       * @param {object} colDef the colDef of the cell
	       */
	      setInvalid: function (rowEntity, colDef) {
	        rowEntity['$$invalid'+colDef.name] = true;
	      },
	    
	      /**
	       * @ngdoc service
	       * @name setValid
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Makes the cell valid by removing the proper error field from the entity
	       * @param {object} rowEntity the row entity of the cell
	       * @param {object} colDef the colDef of the cell
	       */
	      setValid: function (rowEntity, colDef) {
	        delete rowEntity['$$invalid'+colDef.name];
	      },

	      /**
	       * @ngdoc service
	       * @name setError
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Adds the proper error to the entity errors field
	       * @param {object} rowEntity the row entity of the cell
	       * @param {object} colDef the colDef of the cell
	       * @param {string} validatorName the name of the validator that is failing
	       */
	      setError: function(rowEntity, colDef, validatorName) {
	        if (!rowEntity['$$errors'+colDef.name]) {
	          rowEntity['$$errors'+colDef.name] = {};
	        }
	        rowEntity['$$errors'+colDef.name][validatorName] = true;
	      },

	      /**
	       * @ngdoc service
	       * @name clearError
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Removes the proper error from the entity errors field
	       * @param {object} rowEntity the row entity of the cell
	       * @param {object} colDef the colDef of the cell
	       * @param {string} validatorName the name of the validator that is failing
	       */
	      clearError: function(rowEntity, colDef, validatorName) {
	        if (!rowEntity['$$errors'+colDef.name]) {
	          return;
	        }
	        if (validatorName in rowEntity['$$errors'+colDef.name]) {
	            delete rowEntity['$$errors'+colDef.name][validatorName];
	        }
	      },
	      
	      /**
	       * @ngdoc function
	       * @name getErrorMessages
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description returns an array of i18n-ed error messages.
	       * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
	       * @param {object} colDef the column whose errors we are looking for
	       * @returns {array} An array of strings containing all the error messages for the cell
	       */
	      getErrorMessages: function(rowEntity, colDef) {
	        var errors = [];

	        if (!rowEntity['$$errors'+colDef.name] || Object.keys(rowEntity['$$errors'+colDef.name]).length === 0) {
	          return errors;
	        }

	        Object.keys(rowEntity['$$errors'+colDef.name]).sort().forEach(function(validatorName) {
	          errors.push(service.getMessage(validatorName, colDef.validators[validatorName]));
	        });
	        
	        return errors;
	      },
	      
	      /**
	       * @ngdoc function
	       * @name getFormattedErrors
	       * @methodOf  ui.grid.validate.service:uiGridValidateService
	       * @description returns the error i18n-ed and formatted in html to be shown inside the page.
	       * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
	       * @param {object} colDef the column whose errors we are looking for
	       * @returns {object} An object that can be used in a template (like a cellTemplate) to display the
	       * message inside the page (i.e. inside a div)
	       */
	      getFormattedErrors: function(rowEntity, colDef) {

	        var msgString = "";

	        var errors = service.getErrorMessages(rowEntity, colDef);
	        
	        if (!errors.length) {
	          return;
	        }
	        
	        errors.forEach(function(errorMsg) {
	          msgString += errorMsg + "<br/>";
	        });

	        return $sce.trustAsHtml('<p><b>' + i18nService.getSafeText('validate.error') + '</b></p>' + msgString );
	      },

	      /**
	       * @ngdoc function
	       * @name getTitleFormattedErrors
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description returns the error i18n-ed and formatted in javaScript to be shown inside an html 
	       * title attribute.
	       * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
	       * @param {object} colDef the column whose errors we are looking for
	       * @returns {object} An object that can be used in a template (like a cellTemplate) to display the
	       * message inside an html title attribute
	       */
	      getTitleFormattedErrors: function(rowEntity, colDef) {

	        var newLine = "\n";

	        var msgString = "";
	        
	        var errors = service.getErrorMessages(rowEntity, colDef);
	        
	        if (!errors.length) {
	          return;
	        }
	        
	        errors.forEach(function(errorMsg) {
	          msgString += errorMsg + newLine;
	        });

	        return $sce.trustAsHtml(i18nService.getSafeText('validate.error') + newLine + msgString);
	      },

	      /**
	       * @ngdoc function
	       * @name getTitleFormattedErrors
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Executes all validators on a cell (identified by row entity and column definition) and sets or clears errors
	       * @param {object} rowEntity the row entity of the cell we want to run the validators on
	       * @param {object} colDef the column definition of the cell we want to run the validators on
	       * @param {object} newValue the value the user just entered
	       * @param {object} oldValue the value the field had before
	       */
	      runValidators: function(rowEntity, colDef, newValue, oldValue, grid) {
	        
	        if (newValue === oldValue) {
	          // If the value has not changed we perform no validation
	          return;
	        }
	        
	        if (typeof(colDef.name) === 'undefined' || !colDef.name) {
	          throw new Error('colDef.name is required to perform validation');
	        }
	        
	        service.setValid(rowEntity, colDef);
	        
	        var validateClosureFactory = function(rowEntity, colDef, validatorName) {
	          return function(value) {
	            if (!value) {
	              service.setInvalid(rowEntity, colDef);
	              service.setError(rowEntity, colDef, validatorName);
	              if (grid) {
	                grid.api.validate.raise.validationFailed(rowEntity, colDef, newValue, oldValue);
	              }
	            }
	          };
	        };

	        var promises = [];

	        for (var validatorName in colDef.validators) {
	          service.clearError(rowEntity, colDef, validatorName);
	          var msg;
	          var validatorFunction = service.getValidator(validatorName, colDef.validators[validatorName]);
	          // We pass the arguments as oldValue, newValue so they are in the same order 
	          // as ng-model validators (modelValue, viewValue)
	          var promise = $q
	                        .when(validatorFunction(oldValue, newValue, rowEntity, colDef))
	                        .then(validateClosureFactory(rowEntity, colDef, validatorName));
	          promises.push(promise);
	        }
	        
	        return $q.all(promises);
	      },

	      /**
	       * @ngdoc function
	       * @name createDefaultValidators
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description adds the basic validators to the list of service validators
	       */
	      createDefaultValidators: function() {
	        service.setValidator('minLength',
	                             function (argument) {
	                               return function (oldValue, newValue, rowEntity, colDef) {
	                                 if (newValue === undefined || newValue === null || newValue === '') {
	                                   return true;
	                                 }
	                                 return newValue.length >= argument;
	                               };
	                             },
	                               function(argument) {
	                                 return i18nService.getSafeText('validate.minLength').replace('THRESHOLD', argument);
	                               });
	        
	        service.setValidator('maxLength',
	                             function (argument) {
	                               return function (oldValue, newValue, rowEntity, colDef) {
	                                 if (newValue === undefined || newValue === null || newValue === '') {
	                                   return true;
	                                 }
	                                 return newValue.length <= argument;
	                               };
	                             },
	                             function(threshold) {
	                               return i18nService.getSafeText('validate.maxLength').replace('THRESHOLD', threshold);
	                             });
	        
	        service.setValidator('required',
	                             function (argument) {
	                               return function (oldValue, newValue, rowEntity, colDef) {
	                                 if (argument) {
	                                   return !(newValue === undefined || newValue === null || newValue === '');
	                                 }
	                                 return true;
	                               };
	                             },
	                             function(argument) {
	                               return i18nService.getSafeText('validate.required');
	                             });
	      },

	      initializeGrid: function (scope, grid) {
	        grid.validate = {
	        
	          isInvalid: service.isInvalid,

	          getFormattedErrors: service.getFormattedErrors,
	         
	          getTitleFormattedErrors: service.getTitleFormattedErrors,

	          runValidators: service.runValidators
	        };
	        
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.validate.api:PublicApi
	         *
	         *  @description Public Api for validation feature
	         */
	        var publicApi = {
	          events: {
	            validate: {
	              /**
	               * @ngdoc event
	               * @name validationFailed
	               * @eventOf  ui.grid.validate.api:PublicApi
	               * @description raised when one or more failure happened during validation 
	               * <pre>
	               *      gridApi.validate.on.validationFailed(scope, function(rowEntity, colDef, newValue, oldValue){...})
	               * </pre>
	               * @param {object} rowEntity the options.data element whose validation failed
	               * @param {object} colDef the column whose validation failed
	               * @param {object} newValue new value
	               * @param {object} oldValue old value
	               */
	              validationFailed: function (rowEntity, colDef, newValue, oldValue) {
	              }
	            }
	          },
	          methods: {
	            validate: {
	              /**
	               * @ngdoc function
	               * @name isInvalid
	               * @methodOf  ui.grid.validate.api:PublicApi
	               * @description checks if a cell (identified by rowEntity, colDef) is invalid
	               * @param {object} rowEntity gridOptions.data[] array instance we want to check
	               * @param {object} colDef the column whose errors we want to check
	               * @returns {boolean} true if the cell value is not valid
	               */
	              isInvalid: function(rowEntity, colDef) {
	                return grid.validate.isInvalid(rowEntity, colDef);
	              },
	              /**
	               * @ngdoc function
	               * @name getErrorMessages
	               * @methodOf  ui.grid.validate.api:PublicApi
	               * @description returns an array of i18n-ed error messages.
	               * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
	               * @param {object} colDef the column whose errors we are looking for
	               * @returns {array} An array of strings containing all the error messages for the cell
	               */
	              getErrorMessages: function (rowEntity, colDef) {
	                return grid.validate.getErrorMessages(rowEntity, colDef);
	              },
	              /**
	               * @ngdoc function
	               * @name getFormattedErrors
	               * @methodOf  ui.grid.validate.api:PublicApi
	               * @description returns the error i18n-ed and formatted in html to be shown inside the page.
	               * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
	               * @param {object} colDef the column whose errors we are looking for
	               * @returns {object} An object that can be used in a template (like a cellTemplate) to display the
	               * message inside the page (i.e. inside a div)
	               */
	              getFormattedErrors: function (rowEntity, colDef) {
	                return grid.validate.getFormattedErrors(rowEntity, colDef);
	              },
	              /**
	               * @ngdoc function
	               * @name getTitleFormattedErrors
	               * @methodOf  ui.grid.validate.api:PublicApi
	               * @description returns the error i18n-ed and formatted in javaScript to be shown inside an html 
	               * title attribute.
	               * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
	               * @param {object} colDef the column whose errors we are looking for
	               * @returns {object} An object that can be used in a template (like a cellTemplate) to display the
	               * message inside an html title attribute
	               */
	              getTitleFormattedErrors: function (rowEntity, colDef) {
	                return grid.validate.getTitleFormattedErrors(rowEntity, colDef);
	              }
	            } 
	          }
	        };
	        
	        grid.api.registerEventsFromObject(publicApi.events);
	        grid.api.registerMethodsFromObject(publicApi.methods);

	        if (grid.edit) {
	          grid.api.edit.on.afterCellEdit(scope, function(rowEntity, colDef, newValue, oldValue) {
	            grid.validate.runValidators(rowEntity, colDef, newValue, oldValue, grid);
	          });
	        }

	        service.createDefaultValidators();
	      }
	      
	    };
	  
	    return service;
	  }]);
	  
	  
	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.validate.directive:uiGridValidate
	   *  @element div
	   *  @restrict A
	   *  @description Adds validating features to the ui-grid directive.
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.edit', 'ui.grid.validate']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name', enableCellEdit: true, validators: {minLength: 3, maxLength: 9}, cellTemplate: 'ui-grid/cellTitleValidator'},
	        {name: 'title', enableCellEdit: true, validators: {required: true}, cellTemplate: 'ui-grid/cellTitleValidator'}
	      ];
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-edit ui-grid-validate></div>
	   </div>
	   </file>
	   </example>
	   */

	  module.directive('uiGridValidate', ['gridUtil', 'uiGridValidateService', function (gridUtil, uiGridValidateService) {
	    return {
	      priority: 0,
	      replace: true,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            uiGridValidateService.initializeGrid($scope, uiGridCtrl.grid);
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          }
	        };
	      }
	    };
	  }]);
	})();

	angular.module('ui.grid').run(['$templateCache', function($templateCache) {
	  'use strict';

	  $templateCache.put('ui-grid/ui-grid-filter',
	    "<div class=\"ui-grid-filter-container\" ng-repeat=\"colFilter in col.filters\" ng-class=\"{'ui-grid-filter-cancel-button-hidden' : colFilter.disableCancelFilterButton === true }\"><div ng-if=\"colFilter.type !== 'select'\"><input type=\"text\" class=\"ui-grid-filter-input ui-grid-filter-input-{{$index}}\" ng-model=\"colFilter.term\" ng-attr-placeholder=\"{{colFilter.placeholder || ''}}\" aria-label=\"{{colFilter.ariaLabel || aria.defaultFilterLabel}}\"><div role=\"button\" class=\"ui-grid-filter-button\" ng-click=\"removeFilter(colFilter, $index)\" ng-if=\"!colFilter.disableCancelFilterButton\" ng-disabled=\"colFilter.term === undefined || colFilter.term === null || colFilter.term === ''\" ng-show=\"colFilter.term !== undefined && colFilter.term !== null && colFilter.term !== ''\"><i class=\"ui-grid-icon-cancel\" ui-grid-one-bind-aria-label=\"aria.removeFilter\">&nbsp;</i></div></div><div ng-if=\"colFilter.type === 'select'\"><select class=\"ui-grid-filter-select ui-grid-filter-input-{{$index}}\" ng-model=\"colFilter.term\" ng-attr-placeholder=\"{{colFilter.placeholder || aria.defaultFilterLabel}}\" aria-label=\"{{colFilter.ariaLabel || ''}}\" ng-options=\"option.value as option.label for option in colFilter.selectOptions\"><option value=\"\"></option></select><div role=\"button\" class=\"ui-grid-filter-button-select\" ng-click=\"removeFilter(colFilter, $index)\" ng-if=\"!colFilter.disableCancelFilterButton\" ng-disabled=\"colFilter.term === undefined || colFilter.term === null || colFilter.term === ''\" ng-show=\"colFilter.term !== undefined && colFilter.term != null\"><i class=\"ui-grid-icon-cancel\" ui-grid-one-bind-aria-label=\"aria.removeFilter\">&nbsp;</i></div></div></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-footer',
	    "<div class=\"ui-grid-footer-panel ui-grid-footer-aggregates-row\"><!-- tfooter --><div class=\"ui-grid-footer ui-grid-footer-viewport\"><div class=\"ui-grid-footer-canvas\"><div class=\"ui-grid-footer-cell-wrapper\" ng-style=\"colContainer.headerCellWrapperStyle()\"><div role=\"row\" class=\"ui-grid-footer-cell-row\"><div ui-grid-footer-cell role=\"gridcell\" ng-repeat=\"col in colContainer.renderedColumns track by col.uid\" col=\"col\" render-index=\"$index\" class=\"ui-grid-footer-cell ui-grid-clearfix\"></div></div></div></div></div></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-grid-footer',
	    "<div class=\"ui-grid-footer-info ui-grid-grid-footer\"><span>{{'search.totalItems' | t}} {{grid.rows.length}}</span> <span ng-if=\"grid.renderContainers.body.visibleRowCache.length !== grid.rows.length\" class=\"ngLabel\">({{\"search.showingItems\" | t}} {{grid.renderContainers.body.visibleRowCache.length}})</span></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-group-panel',
	    "<div class=\"ui-grid-group-panel\"><div ui-t=\"groupPanel.description\" class=\"description\" ng-show=\"groupings.length == 0\"></div><ul ng-show=\"groupings.length > 0\" class=\"ngGroupList\"><li class=\"ngGroupItem\" ng-repeat=\"group in configGroups\"><span class=\"ngGroupElement\"><span class=\"ngGroupName\">{{group.displayName}} <span ng-click=\"removeGroup($index)\" class=\"ngRemoveGroup\">x</span></span> <span ng-hide=\"$last\" class=\"ngGroupArrow\"></span></span></li></ul></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-header',
	    "<div role=\"rowgroup\" class=\"ui-grid-header\"><!-- theader --><div class=\"ui-grid-top-panel\"><div class=\"ui-grid-header-viewport\"><div class=\"ui-grid-header-canvas\"><div class=\"ui-grid-header-cell-wrapper\" ng-style=\"colContainer.headerCellWrapperStyle()\"><div role=\"row\" class=\"ui-grid-header-cell-row\"><div class=\"ui-grid-header-cell ui-grid-clearfix\" ng-repeat=\"col in colContainer.renderedColumns track by col.uid\" ui-grid-header-cell col=\"col\" render-index=\"$index\"></div></div></div></div></div></div></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-menu-button',
	    "<div class=\"ui-grid-menu-button\"><div role=\"button\" ui-grid-one-bind-id-grid=\"'grid-menu'\" class=\"ui-grid-icon-container\" ng-click=\"toggleMenu()\" aria-haspopup=\"true\"><i class=\"ui-grid-icon-menu\" ui-grid-one-bind-aria-label=\"i18n.aria.buttonLabel\">&nbsp;</i></div><div ui-grid-menu menu-items=\"menuItems\"></div></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-no-header',
	    "<div class=\"ui-grid-top-panel\"></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-row',
	    "<div ng-repeat=\"(colRenderIndex, col) in colContainer.renderedColumns track by col.uid\" ui-grid-one-bind-id-grid=\"rowRenderIndex + '-' + col.uid + '-cell'\" class=\"ui-grid-cell\" ng-class=\"{ 'ui-grid-row-header-cell': col.isRowHeader }\" role=\"{{col.isRowHeader ? 'rowheader' : 'gridcell'}}\" ui-grid-cell></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid',
	    "<div ui-i18n=\"en\" class=\"ui-grid\"><!-- TODO (c0bra): add \"scoped\" attr here, eventually? --><style ui-grid-style>.grid{{ grid.id }} {\n" +
	    "      /* Styles for the grid */\n" +
	    "    }\n" +
	    "\n" +
	    "    .grid{{ grid.id }} .ui-grid-row, .grid{{ grid.id }} .ui-grid-cell, .grid{{ grid.id }} .ui-grid-cell .ui-grid-vertical-bar {\n" +
	    "      height: {{ grid.options.rowHeight }}px;\n" +
	    "    }\n" +
	    "\n" +
	    "    .grid{{ grid.id }} .ui-grid-row:last-child .ui-grid-cell {\n" +
	    "      border-bottom-width: {{ ((grid.getTotalRowHeight() < grid.getViewportHeight()) && '1') || '0' }}px;\n" +
	    "    }\n" +
	    "\n" +
	    "    {{ grid.verticalScrollbarStyles }}\n" +
	    "    {{ grid.horizontalScrollbarStyles }}\n" +
	    "\n" +
	    "    /*\n" +
	    "    .ui-grid[dir=rtl] .ui-grid-viewport {\n" +
	    "      padding-left: {{ grid.verticalScrollbarWidth }}px;\n" +
	    "    }\n" +
	    "    */\n" +
	    "\n" +
	    "    {{ grid.customStyles }}</style><div class=\"ui-grid-contents-wrapper\"><div ui-grid-menu-button ng-if=\"grid.options.enableGridMenu\"></div><div ng-if=\"grid.hasLeftContainer()\" style=\"width: 0\" ui-grid-pinned-container=\"'left'\"></div><div ui-grid-render-container container-id=\"'body'\" col-container-name=\"'body'\" row-container-name=\"'body'\" bind-scroll-horizontal=\"true\" bind-scroll-vertical=\"true\" enable-horizontal-scrollbar=\"grid.options.enableHorizontalScrollbar\" enable-vertical-scrollbar=\"grid.options.enableVerticalScrollbar\"></div><div ng-if=\"grid.hasRightContainer()\" style=\"width: 0\" ui-grid-pinned-container=\"'right'\"></div><div ui-grid-grid-footer ng-if=\"grid.options.showGridFooter\"></div><div ui-grid-column-menu ng-if=\"grid.options.enableColumnMenus\"></div><div ng-transclude></div></div></div>"
	  );


	  $templateCache.put('ui-grid/uiGridCell',
	    "<div class=\"ui-grid-cell-contents\" title=\"TOOLTIP\">{{COL_FIELD CUSTOM_FILTERS}}</div>"
	  );


	  $templateCache.put('ui-grid/uiGridColumnMenu',
	    "<div class=\"ui-grid-column-menu\"><div ui-grid-menu menu-items=\"menuItems\"><!-- <div class=\"ui-grid-column-menu\">\n" +
	    "    <div class=\"inner\" ng-show=\"menuShown\">\n" +
	    "      <ul>\n" +
	    "        <div ng-show=\"grid.options.enableSorting\">\n" +
	    "          <li ng-click=\"sortColumn($event, asc)\" ng-class=\"{ 'selected' : col.sort.direction == asc }\"><i class=\"ui-grid-icon-sort-alt-up\"></i> Sort Ascending</li>\n" +
	    "          <li ng-click=\"sortColumn($event, desc)\" ng-class=\"{ 'selected' : col.sort.direction == desc }\"><i class=\"ui-grid-icon-sort-alt-down\"></i> Sort Descending</li>\n" +
	    "          <li ng-show=\"col.sort.direction\" ng-click=\"unsortColumn()\"><i class=\"ui-grid-icon-cancel\"></i> Remove Sort</li>\n" +
	    "        </div>\n" +
	    "      </ul>\n" +
	    "    </div>\n" +
	    "  </div> --></div></div>"
	  );


	  $templateCache.put('ui-grid/uiGridFooterCell',
	    "<div class=\"ui-grid-cell-contents\" col-index=\"renderIndex\"><div>{{ col.getAggregationText() + ( col.getAggregationValue() CUSTOM_FILTERS ) }}</div></div>"
	  );


	  $templateCache.put('ui-grid/uiGridHeaderCell',
	    "<div role=\"columnheader\" ng-class=\"{ 'sortable': sortable }\" ui-grid-one-bind-aria-labelledby-grid=\"col.uid + '-header-text ' + col.uid + '-sortdir-text'\" aria-sort=\"{{col.sort.direction == asc ? 'ascending' : ( col.sort.direction == desc ? 'descending' : (!col.sort.direction ? 'none' : 'other'))}}\"><div role=\"button\" tabindex=\"0\" class=\"ui-grid-cell-contents ui-grid-header-cell-primary-focus\" col-index=\"renderIndex\" title=\"TOOLTIP\"><span class=\"ui-grid-header-cell-label\" ui-grid-one-bind-id-grid=\"col.uid + '-header-text'\">{{ col.displayName CUSTOM_FILTERS }}</span> <span ui-grid-one-bind-id-grid=\"col.uid + '-sortdir-text'\" ui-grid-visible=\"col.sort.direction\" aria-label=\"{{getSortDirectionAriaLabel()}}\"><i ng-class=\"{ 'ui-grid-icon-up-dir': col.sort.direction == asc, 'ui-grid-icon-down-dir': col.sort.direction == desc, 'ui-grid-icon-blank': !col.sort.direction }\" title=\"{{isSortPriorityVisible() ? i18n.headerCell.priority + ' ' + ( col.sort.priority + 1 )  : null}}\" aria-hidden=\"true\"></i> <sub ui-grid-visible=\"isSortPriorityVisible()\" class=\"ui-grid-sort-priority-number\">{{col.sort.priority + 1}}</sub></span></div><div role=\"button\" tabindex=\"0\" ui-grid-one-bind-id-grid=\"col.uid + '-menu-button'\" class=\"ui-grid-column-menu-button\" ng-if=\"grid.options.enableColumnMenus && !col.isRowHeader  && col.colDef.enableColumnMenu !== false\" ng-click=\"toggleMenu($event)\" ng-class=\"{'ui-grid-column-menu-button-last-col': isLastCol}\" ui-grid-one-bind-aria-label=\"i18n.headerCell.aria.columnMenuButtonLabel\" aria-haspopup=\"true\"><i class=\"ui-grid-icon-angle-down\" aria-hidden=\"true\">&nbsp;</i></div><div ui-grid-filter></div></div>"
	  );


	  $templateCache.put('ui-grid/uiGridMenu',
	    "<div class=\"ui-grid-menu\" ng-if=\"shown\"><style ui-grid-style>{{dynamicStyles}}</style><div class=\"ui-grid-menu-mid\" ng-show=\"shownMid\"><div class=\"ui-grid-menu-inner\"><ul role=\"menu\" class=\"ui-grid-menu-items\"><li ng-repeat=\"item in menuItems\" role=\"menuitem\" ui-grid-menu-item ui-grid-one-bind-id=\"'menuitem-'+$index\" action=\"item.action\" name=\"item.title\" active=\"item.active\" icon=\"item.icon\" shown=\"item.shown\" context=\"item.context\" template-url=\"item.templateUrl\" leave-open=\"item.leaveOpen\" screen-reader-only=\"item.screenReaderOnly\"></li></ul></div></div></div>"
	  );


	  $templateCache.put('ui-grid/uiGridMenuItem',
	    "<button type=\"button\" class=\"ui-grid-menu-item\" ng-click=\"itemAction($event, title)\" ng-show=\"itemShown()\" ng-class=\"{ 'ui-grid-menu-item-active': active(), 'ui-grid-sr-only': (!focus && screenReaderOnly) }\" aria-pressed=\"{{active()}}\" tabindex=\"0\" ng-focus=\"focus=true\" ng-blur=\"focus=false\"><i ng-class=\"icon\" aria-hidden=\"true\">&nbsp;</i> {{ name }}</button>"
	  );


	  $templateCache.put('ui-grid/uiGridRenderContainer',
	    "<div role=\"grid\" ui-grid-one-bind-id-grid=\"'grid-container'\" class=\"ui-grid-render-container\" ng-style=\"{ 'margin-left': colContainer.getMargin('left') + 'px', 'margin-right': colContainer.getMargin('right') + 'px' }\"><!-- All of these dom elements are replaced in place --><div ui-grid-header></div><div ui-grid-viewport></div><div ng-if=\"colContainer.needsHScrollbarPlaceholder()\" class=\"ui-grid-scrollbar-placeholder\" ng-style=\"{height:colContainer.grid.scrollbarHeight + 'px'}\"></div><ui-grid-footer ng-if=\"grid.options.showColumnFooter\"></ui-grid-footer></div>"
	  );


	  $templateCache.put('ui-grid/uiGridViewport',
	    "<div role=\"rowgroup\" class=\"ui-grid-viewport\" ng-style=\"colContainer.getViewportStyle()\"><!-- tbody --><div class=\"ui-grid-canvas\"><div ng-repeat=\"(rowRenderIndex, row) in rowContainer.renderedRows track by $index\" class=\"ui-grid-row\" ng-style=\"Viewport.rowStyle(rowRenderIndex)\"><div role=\"row\" ui-grid-row=\"row\" row-render-index=\"rowRenderIndex\"></div></div></div></div>"
	  );


	  $templateCache.put('ui-grid/cellEditor',
	    "<div><form name=\"inputForm\"><input type=\"INPUT_TYPE\" ng-class=\"'colt' + col.uid\" ui-grid-editor ng-model=\"MODEL_COL_FIELD\"></form></div>"
	  );


	  $templateCache.put('ui-grid/dropdownEditor',
	    "<div><form name=\"inputForm\"><select ng-class=\"'colt' + col.uid\" ui-grid-edit-dropdown ng-model=\"MODEL_COL_FIELD\" ng-options=\"field[editDropdownIdLabel] as field[editDropdownValueLabel] CUSTOM_FILTERS for field in editDropdownOptionsArray\"></select></form></div>"
	  );


	  $templateCache.put('ui-grid/fileChooserEditor',
	    "<div><form name=\"inputForm\"><input ng-class=\"'colt' + col.uid\" ui-grid-edit-file-chooser type=\"file\" id=\"files\" name=\"files[]\" ng-model=\"MODEL_COL_FIELD\"></form></div>"
	  );


	  $templateCache.put('ui-grid/expandableRow',
	    "<div ui-grid-expandable-row ng-if=\"expandableRow.shouldRenderExpand()\" class=\"expandableRow\" style=\"float:left; margin-top: 1px; margin-bottom: 1px\" ng-style=\"{width: (grid.renderContainers.body.getCanvasWidth()) + 'px', height: row.expandedRowHeight + 'px'}\"></div>"
	  );


	  $templateCache.put('ui-grid/expandableRowHeader',
	    "<div class=\"ui-grid-row-header-cell ui-grid-expandable-buttons-cell\"><div class=\"ui-grid-cell-contents\"><i ng-if=\"!row.groupHeader==true\" ng-class=\"{ 'ui-grid-icon-plus-squared' : !row.isExpanded, 'ui-grid-icon-minus-squared' : row.isExpanded }\" ng-click=\"grid.api.expandable.toggleRowExpansion(row.entity)\"></i></div></div>"
	  );


	  $templateCache.put('ui-grid/expandableScrollFiller',
	    "<div ng-if=\"expandableRow.shouldRenderFiller()\" ng-class=\"{scrollFiller:true, scrollFillerClass:(colContainer.name === 'body')}\" ng-style=\"{ width: (grid.getViewportWidth()) + 'px', height: row.expandedRowHeight + 2 + 'px', 'margin-left': grid.options.rowHeader.rowHeaderWidth + 'px' }\"><i class=\"ui-grid-icon-spin5 ui-grid-animate-spin\" ng-style=\"{'margin-top': ( row.expandedRowHeight/2 - 5) + 'px', 'margin-left' : ((grid.getViewportWidth() - grid.options.rowHeader.rowHeaderWidth)/2 - 5) + 'px'}\"></i></div>"
	  );


	  $templateCache.put('ui-grid/expandableTopRowHeader',
	    "<div class=\"ui-grid-row-header-cell ui-grid-expandable-buttons-cell\"><div class=\"ui-grid-cell-contents\"><i ng-class=\"{ 'ui-grid-icon-plus-squared' : !grid.expandable.expandedAll, 'ui-grid-icon-minus-squared' : grid.expandable.expandedAll }\" ng-click=\"grid.api.expandable.toggleAllRows()\"></i></div></div>"
	  );


	  $templateCache.put('ui-grid/csvLink',
	    "<span class=\"ui-grid-exporter-csv-link-span\"><a href=\"data:text/csv;charset=UTF-8,CSV_CONTENT\" download=\"FILE_NAME\">LINK_LABEL</a></span>"
	  );


	  $templateCache.put('ui-grid/importerMenuItem',
	    "<li class=\"ui-grid-menu-item\"><form><input class=\"ui-grid-importer-file-chooser\" type=\"file\" id=\"files\" name=\"files[]\"></form></li>"
	  );


	  $templateCache.put('ui-grid/importerMenuItemContainer',
	    "<div ui-grid-importer-menu-item></div>"
	  );


	  $templateCache.put('ui-grid/pagination',
	    "<div role=\"contentinfo\" class=\"ui-grid-pager-panel\" ui-grid-pager ng-show=\"grid.options.enablePaginationControls\"><div role=\"navigation\" class=\"ui-grid-pager-container\"><div role=\"menubar\" class=\"ui-grid-pager-control\"><button type=\"button\" role=\"menuitem\" class=\"ui-grid-pager-first\" ui-grid-one-bind-title=\"aria.pageToFirst\" ui-grid-one-bind-aria-label=\"aria.pageToFirst\" ng-click=\"pageFirstPageClick()\" ng-disabled=\"cantPageBackward()\"><div ng-class=\"grid.isRTL() ? 'last-triangle' : 'first-triangle'\"><div ng-class=\"grid.isRTL() ? 'last-bar-rtl' : 'first-bar'\"></div></div></button> <button type=\"button\" role=\"menuitem\" class=\"ui-grid-pager-previous\" ui-grid-one-bind-title=\"aria.pageBack\" ui-grid-one-bind-aria-label=\"aria.pageBack\" ng-click=\"pagePreviousPageClick()\" ng-disabled=\"cantPageBackward()\"><div ng-class=\"grid.isRTL() ? 'last-triangle prev-triangle' : 'first-triangle prev-triangle'\"></div></button> <input type=\"number\" ui-grid-one-bind-title=\"aria.pageSelected\" ui-grid-one-bind-aria-label=\"aria.pageSelected\" class=\"ui-grid-pager-control-input\" ng-model=\"grid.options.paginationCurrentPage\" min=\"1\" max=\"{{ paginationApi.getTotalPages() }}\" required> <span class=\"ui-grid-pager-max-pages-number\" ng-show=\"paginationApi.getTotalPages() > 0\"><abbr ui-grid-one-bind-title=\"paginationOf\">/</abbr> {{ paginationApi.getTotalPages() }}</span> <button type=\"button\" role=\"menuitem\" class=\"ui-grid-pager-next\" ui-grid-one-bind-title=\"aria.pageForward\" ui-grid-one-bind-aria-label=\"aria.pageForward\" ng-click=\"pageNextPageClick()\" ng-disabled=\"cantPageForward()\"><div ng-class=\"grid.isRTL() ? 'first-triangle next-triangle' : 'last-triangle next-triangle'\"></div></button> <button type=\"button\" role=\"menuitem\" class=\"ui-grid-pager-last\" ui-grid-one-bind-title=\"aria.pageToLast\" ui-grid-one-bind-aria-label=\"aria.pageToLast\" ng-click=\"pageLastPageClick()\" ng-disabled=\"cantPageToLast()\"><div ng-class=\"grid.isRTL() ? 'first-triangle' : 'last-triangle'\"><div ng-class=\"grid.isRTL() ? 'first-bar-rtl' : 'last-bar'\"></div></div></button></div><div class=\"ui-grid-pager-row-count-picker\" ng-if=\"grid.options.paginationPageSizes.length > 1\"><select ui-grid-one-bind-aria-labelledby-grid=\"'items-per-page-label'\" ng-model=\"grid.options.paginationPageSize\" ng-options=\"o as o for o in grid.options.paginationPageSizes\"></select><span ui-grid-one-bind-id-grid=\"'items-per-page-label'\" class=\"ui-grid-pager-row-count-label\">&nbsp;{{sizesLabel}}</span></div><span ng-if=\"grid.options.paginationPageSizes.length <= 1\" class=\"ui-grid-pager-row-count-label\">{{grid.options.paginationPageSize}}&nbsp;{{sizesLabel}}</span></div><div class=\"ui-grid-pager-count-container\"><div class=\"ui-grid-pager-count\"><span ng-show=\"grid.options.totalItems > 0\">{{showingLow}} <abbr ui-grid-one-bind-title=\"paginationThrough\">-</abbr> {{showingHigh}} {{paginationOf}} {{grid.options.totalItems}} {{totalItemsLabel}}</span></div></div></div>"
	  );


	  $templateCache.put('ui-grid/columnResizer',
	    "<div ui-grid-column-resizer ng-if=\"grid.options.enableColumnResizing\" class=\"ui-grid-column-resizer\" col=\"col\" position=\"right\" render-index=\"renderIndex\" unselectable=\"on\"></div>"
	  );


	  $templateCache.put('ui-grid/gridFooterSelectedItems',
	    "<span ng-if=\"grid.selection.selectedCount !== 0 && grid.options.enableFooterTotalSelected\">({{\"search.selectedItems\" | t}} {{grid.selection.selectedCount}})</span>"
	  );


	  $templateCache.put('ui-grid/selectionHeaderCell',
	    "<div><!-- <div class=\"ui-grid-vertical-bar\">&nbsp;</div> --><div class=\"ui-grid-cell-contents\" col-index=\"renderIndex\"><ui-grid-selection-select-all-buttons ng-if=\"grid.options.enableSelectAll\"></ui-grid-selection-select-all-buttons></div></div>"
	  );


	  $templateCache.put('ui-grid/selectionRowHeader',
	    "<div class=\"ui-grid-disable-selection\"><div class=\"ui-grid-cell-contents\"><ui-grid-selection-row-header-buttons></ui-grid-selection-row-header-buttons></div></div>"
	  );


	  $templateCache.put('ui-grid/selectionRowHeaderButtons',
	    "<div class=\"ui-grid-selection-row-header-buttons ui-grid-icon-ok\" ng-class=\"{'ui-grid-row-selected': row.isSelected}\" ng-click=\"selectButtonClick(row, $event)\">&nbsp;</div>"
	  );


	  $templateCache.put('ui-grid/selectionSelectAllButtons',
	    "<div class=\"ui-grid-selection-row-header-buttons ui-grid-icon-ok\" ng-class=\"{'ui-grid-all-selected': grid.selection.selectAll}\" ng-click=\"headerButtonClick($event)\"></div>"
	  );


	  $templateCache.put('ui-grid/treeBaseExpandAllButtons',
	    "<div class=\"ui-grid-tree-base-row-header-buttons\" ng-class=\"{'ui-grid-icon-minus-squared': grid.treeBase.numberLevels > 0 && grid.treeBase.expandAll, 'ui-grid-icon-plus-squared': grid.treeBase.numberLevels > 0 && !grid.treeBase.expandAll}\" ng-click=\"headerButtonClick($event)\"></div>"
	  );


	  $templateCache.put('ui-grid/treeBaseHeaderCell',
	    "<div><div class=\"ui-grid-cell-contents\" col-index=\"renderIndex\"><ui-grid-tree-base-expand-all-buttons ng-if=\"grid.options.enableExpandAll\"></ui-grid-tree-base-expand-all-buttons></div></div>"
	  );


	  $templateCache.put('ui-grid/treeBaseRowHeader',
	    "<div class=\"ui-grid-cell-contents\"><ui-grid-tree-base-row-header-buttons></ui-grid-tree-base-row-header-buttons></div>"
	  );


	  $templateCache.put('ui-grid/treeBaseRowHeaderButtons',
	    "<div class=\"ui-grid-tree-base-row-header-buttons\" ng-class=\"{'ui-grid-tree-base-header': row.treeLevel > -1 }\" ng-click=\"treeButtonClick(row, $event)\"><i ng-class=\"{'ui-grid-icon-minus-squared': ( ( grid.options.showTreeExpandNoChildren && row.treeLevel > -1 ) || ( row.treeNode.children && row.treeNode.children.length > 0 ) ) && row.treeNode.state === 'expanded', 'ui-grid-icon-plus-squared': ( ( grid.options.showTreeExpandNoChildren && row.treeLevel > -1 ) || ( row.treeNode.children && row.treeNode.children.length > 0 ) ) && row.treeNode.state === 'collapsed'}\" ng-style=\"{'padding-left': grid.options.treeIndent * row.treeLevel + 'px'}\"></i> &nbsp;</div>"
	  );


	  $templateCache.put('ui-grid/cellTitleValidator',
	    "<div class=\"ui-grid-cell-contents\" ng-class=\"{invalid:grid.validate.isInvalid(row.entity,col.colDef)}\" title=\"{{grid.validate.getTitleFormattedErrors(row.entity,col.colDef)}}\">{{COL_FIELD CUSTOM_FILTERS}}</div>"
	  );


	  $templateCache.put('ui-grid/cellTooltipValidator',
	    "<div class=\"ui-grid-cell-contents\" ng-class=\"{invalid:grid.validate.isInvalid(row.entity,col.colDef)}\" tooltip-html-unsafe=\"{{grid.validate.getFormattedErrors(row.entity,col.colDef)}}\" tooltip-enable=\"grid.validate.isInvalid(row.entity,col.colDef)\" tooltip-append-to-body=\"true\" tooltip-placement=\"top\" title=\"TOOLTIP\">{{COL_FIELD CUSTOM_FILTERS}}</div>"
	  );

	}]);


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(21);

	module.exports = 'ui.bootstrap';


/***/ },
/* 21 */
/***/ function(module, exports) {

	/*
	 * angular-ui-bootstrap
	 * http://angular-ui.github.io/bootstrap/

	 * Version: 2.3.1 - 2016-12-10
	 * License: MIT
	 */angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.collapse","ui.bootstrap.tabindex","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.datepicker","ui.bootstrap.position","ui.bootstrap.datepickerPopup","ui.bootstrap.debounce","ui.bootstrap.multiMap","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]);
	angular.module("ui.bootstrap.tpls", ["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/year.html","uib/template/datepickerPopup/popup.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]);
	angular.module('ui.bootstrap.collapse', [])

	  .directive('uibCollapse', ['$animate', '$q', '$parse', '$injector', function($animate, $q, $parse, $injector) {
	    var $animateCss = $injector.has('$animateCss') ? $injector.get('$animateCss') : null;
	    return {
	      link: function(scope, element, attrs) {
	        var expandingExpr = $parse(attrs.expanding),
	          expandedExpr = $parse(attrs.expanded),
	          collapsingExpr = $parse(attrs.collapsing),
	          collapsedExpr = $parse(attrs.collapsed),
	          horizontal = false,
	          css = {},
	          cssTo = {};

	        init();

	        function init() {
	          horizontal = !!('horizontal' in attrs);
	          if (horizontal) {
	            css = {
	              width: ''
	            };
	            cssTo = {width: '0'};
	          } else {
	            css = {
	              height: ''
	            };
	            cssTo = {height: '0'};
	          }
	          if (!scope.$eval(attrs.uibCollapse)) {
	            element.addClass('in')
	              .addClass('collapse')
	              .attr('aria-expanded', true)
	              .attr('aria-hidden', false)
	              .css(css);
	          }
	        }

	        function getScrollFromElement(element) {
	          if (horizontal) {
	            return {width: element.scrollWidth + 'px'};
	          }
	          return {height: element.scrollHeight + 'px'};
	        }

	        function expand() {
	          if (element.hasClass('collapse') && element.hasClass('in')) {
	            return;
	          }

	          $q.resolve(expandingExpr(scope))
	            .then(function() {
	              element.removeClass('collapse')
	                .addClass('collapsing')
	                .attr('aria-expanded', true)
	                .attr('aria-hidden', false);

	              if ($animateCss) {
	                $animateCss(element, {
	                  addClass: 'in',
	                  easing: 'ease',
	                  css: {
	                    overflow: 'hidden'
	                  },
	                  to: getScrollFromElement(element[0])
	                }).start()['finally'](expandDone);
	              } else {
	                $animate.addClass(element, 'in', {
	                  css: {
	                    overflow: 'hidden'
	                  },
	                  to: getScrollFromElement(element[0])
	                }).then(expandDone);
	              }
	            });
	        }

	        function expandDone() {
	          element.removeClass('collapsing')
	            .addClass('collapse')
	            .css(css);
	          expandedExpr(scope);
	        }

	        function collapse() {
	          if (!element.hasClass('collapse') && !element.hasClass('in')) {
	            return collapseDone();
	          }

	          $q.resolve(collapsingExpr(scope))
	            .then(function() {
	              element
	              // IMPORTANT: The width must be set before adding "collapsing" class.
	              // Otherwise, the browser attempts to animate from width 0 (in
	              // collapsing class) to the given width here.
	                .css(getScrollFromElement(element[0]))
	                // initially all panel collapse have the collapse class, this removal
	                // prevents the animation from jumping to collapsed state
	                .removeClass('collapse')
	                .addClass('collapsing')
	                .attr('aria-expanded', false)
	                .attr('aria-hidden', true);

	              if ($animateCss) {
	                $animateCss(element, {
	                  removeClass: 'in',
	                  to: cssTo
	                }).start()['finally'](collapseDone);
	              } else {
	                $animate.removeClass(element, 'in', {
	                  to: cssTo
	                }).then(collapseDone);
	              }
	            });
	        }

	        function collapseDone() {
	          element.css(cssTo); // Required so that collapse works when animation is disabled
	          element.removeClass('collapsing')
	            .addClass('collapse');
	          collapsedExpr(scope);
	        }

	        scope.$watch(attrs.uibCollapse, function(shouldCollapse) {
	          if (shouldCollapse) {
	            collapse();
	          } else {
	            expand();
	          }
	        });
	      }
	    };
	  }]);

	angular.module('ui.bootstrap.tabindex', [])

	.directive('uibTabindexToggle', function() {
	  return {
	    restrict: 'A',
	    link: function(scope, elem, attrs) {
	      attrs.$observe('disabled', function(disabled) {
	        attrs.$set('tabindex', disabled ? -1 : null);
	      });
	    }
	  };
	});

	angular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse', 'ui.bootstrap.tabindex'])

	.constant('uibAccordionConfig', {
	  closeOthers: true
	})

	.controller('UibAccordionController', ['$scope', '$attrs', 'uibAccordionConfig', function($scope, $attrs, accordionConfig) {
	  // This array keeps track of the accordion groups
	  this.groups = [];

	  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
	  this.closeOthers = function(openGroup) {
	    var closeOthers = angular.isDefined($attrs.closeOthers) ?
	      $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
	    if (closeOthers) {
	      angular.forEach(this.groups, function(group) {
	        if (group !== openGroup) {
	          group.isOpen = false;
	        }
	      });
	    }
	  };

	  // This is called from the accordion-group directive to add itself to the accordion
	  this.addGroup = function(groupScope) {
	    var that = this;
	    this.groups.push(groupScope);

	    groupScope.$on('$destroy', function(event) {
	      that.removeGroup(groupScope);
	    });
	  };

	  // This is called from the accordion-group directive when to remove itself
	  this.removeGroup = function(group) {
	    var index = this.groups.indexOf(group);
	    if (index !== -1) {
	      this.groups.splice(index, 1);
	    }
	  };
	}])

	// The accordion directive simply sets up the directive controller
	// and adds an accordion CSS class to itself element.
	.directive('uibAccordion', function() {
	  return {
	    controller: 'UibAccordionController',
	    controllerAs: 'accordion',
	    transclude: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/accordion/accordion.html';
	    }
	  };
	})

	// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
	.directive('uibAccordionGroup', function() {
	  return {
	    require: '^uibAccordion',         // We need this directive to be inside an accordion
	    transclude: true,              // It transcludes the contents of the directive into the template
	    restrict: 'A',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/accordion/accordion-group.html';
	    },
	    scope: {
	      heading: '@',               // Interpolate the heading attribute onto this scope
	      panelClass: '@?',           // Ditto with panelClass
	      isOpen: '=?',
	      isDisabled: '=?'
	    },
	    controller: function() {
	      this.setHeading = function(element) {
	        this.heading = element;
	      };
	    },
	    link: function(scope, element, attrs, accordionCtrl) {
	      element.addClass('panel');
	      accordionCtrl.addGroup(scope);

	      scope.openClass = attrs.openClass || 'panel-open';
	      scope.panelClass = attrs.panelClass || 'panel-default';
	      scope.$watch('isOpen', function(value) {
	        element.toggleClass(scope.openClass, !!value);
	        if (value) {
	          accordionCtrl.closeOthers(scope);
	        }
	      });

	      scope.toggleOpen = function($event) {
	        if (!scope.isDisabled) {
	          if (!$event || $event.which === 32) {
	            scope.isOpen = !scope.isOpen;
	          }
	        }
	      };

	      var id = 'accordiongroup-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
	      scope.headingId = id + '-tab';
	      scope.panelId = id + '-panel';
	    }
	  };
	})

	// Use accordion-heading below an accordion-group to provide a heading containing HTML
	.directive('uibAccordionHeading', function() {
	  return {
	    transclude: true,   // Grab the contents to be used as the heading
	    template: '',       // In effect remove this element!
	    replace: true,
	    require: '^uibAccordionGroup',
	    link: function(scope, element, attrs, accordionGroupCtrl, transclude) {
	      // Pass the heading to the accordion-group controller
	      // so that it can be transcluded into the right place in the template
	      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
	      accordionGroupCtrl.setHeading(transclude(scope, angular.noop));
	    }
	  };
	})

	// Use in the accordion-group template to indicate where you want the heading to be transcluded
	// You must provide the property on the accordion-group controller that will hold the transcluded element
	.directive('uibAccordionTransclude', function() {
	  return {
	    require: '^uibAccordionGroup',
	    link: function(scope, element, attrs, controller) {
	      scope.$watch(function() { return controller[attrs.uibAccordionTransclude]; }, function(heading) {
	        if (heading) {
	          var elem = angular.element(element[0].querySelector(getHeaderSelectors()));
	          elem.html('');
	          elem.append(heading);
	        }
	      });
	    }
	  };

	  function getHeaderSelectors() {
	      return 'uib-accordion-header,' +
	          'data-uib-accordion-header,' +
	          'x-uib-accordion-header,' +
	          'uib\\:accordion-header,' +
	          '[uib-accordion-header],' +
	          '[data-uib-accordion-header],' +
	          '[x-uib-accordion-header]';
	  }
	});

	angular.module('ui.bootstrap.alert', [])

	.controller('UibAlertController', ['$scope', '$element', '$attrs', '$interpolate', '$timeout', function($scope, $element, $attrs, $interpolate, $timeout) {
	  $scope.closeable = !!$attrs.close;
	  $element.addClass('alert');
	  $attrs.$set('role', 'alert');
	  if ($scope.closeable) {
	    $element.addClass('alert-dismissible');
	  }

	  var dismissOnTimeout = angular.isDefined($attrs.dismissOnTimeout) ?
	    $interpolate($attrs.dismissOnTimeout)($scope.$parent) : null;

	  if (dismissOnTimeout) {
	    $timeout(function() {
	      $scope.close();
	    }, parseInt(dismissOnTimeout, 10));
	  }
	}])

	.directive('uibAlert', function() {
	  return {
	    controller: 'UibAlertController',
	    controllerAs: 'alert',
	    restrict: 'A',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/alert/alert.html';
	    },
	    transclude: true,
	    scope: {
	      close: '&'
	    }
	  };
	});

	angular.module('ui.bootstrap.buttons', [])

	.constant('uibButtonConfig', {
	  activeClass: 'active',
	  toggleEvent: 'click'
	})

	.controller('UibButtonsController', ['uibButtonConfig', function(buttonConfig) {
	  this.activeClass = buttonConfig.activeClass || 'active';
	  this.toggleEvent = buttonConfig.toggleEvent || 'click';
	}])

	.directive('uibBtnRadio', ['$parse', function($parse) {
	  return {
	    require: ['uibBtnRadio', 'ngModel'],
	    controller: 'UibButtonsController',
	    controllerAs: 'buttons',
	    link: function(scope, element, attrs, ctrls) {
	      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
	      var uncheckableExpr = $parse(attrs.uibUncheckable);

	      element.find('input').css({display: 'none'});

	      //model -> UI
	      ngModelCtrl.$render = function() {
	        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.uibBtnRadio)));
	      };

	      //ui->model
	      element.on(buttonsCtrl.toggleEvent, function() {
	        if (attrs.disabled) {
	          return;
	        }

	        var isActive = element.hasClass(buttonsCtrl.activeClass);

	        if (!isActive || angular.isDefined(attrs.uncheckable)) {
	          scope.$apply(function() {
	            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.uibBtnRadio));
	            ngModelCtrl.$render();
	          });
	        }
	      });

	      if (attrs.uibUncheckable) {
	        scope.$watch(uncheckableExpr, function(uncheckable) {
	          attrs.$set('uncheckable', uncheckable ? '' : undefined);
	        });
	      }
	    }
	  };
	}])

	.directive('uibBtnCheckbox', function() {
	  return {
	    require: ['uibBtnCheckbox', 'ngModel'],
	    controller: 'UibButtonsController',
	    controllerAs: 'button',
	    link: function(scope, element, attrs, ctrls) {
	      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      element.find('input').css({display: 'none'});

	      function getTrueValue() {
	        return getCheckboxValue(attrs.btnCheckboxTrue, true);
	      }

	      function getFalseValue() {
	        return getCheckboxValue(attrs.btnCheckboxFalse, false);
	      }

	      function getCheckboxValue(attribute, defaultValue) {
	        return angular.isDefined(attribute) ? scope.$eval(attribute) : defaultValue;
	      }

	      //model -> UI
	      ngModelCtrl.$render = function() {
	        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
	      };

	      //ui->model
	      element.on(buttonsCtrl.toggleEvent, function() {
	        if (attrs.disabled) {
	          return;
	        }

	        scope.$apply(function() {
	          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
	          ngModelCtrl.$render();
	        });
	      });
	    }
	  };
	});

	angular.module('ui.bootstrap.carousel', [])

	.controller('UibCarouselController', ['$scope', '$element', '$interval', '$timeout', '$animate', function($scope, $element, $interval, $timeout, $animate) {
	  var self = this,
	    slides = self.slides = $scope.slides = [],
	    SLIDE_DIRECTION = 'uib-slideDirection',
	    currentIndex = $scope.active,
	    currentInterval, isPlaying, bufferedTransitions = [];

	  var destroyed = false;
	  $element.addClass('carousel');

	  self.addSlide = function(slide, element) {
	    slides.push({
	      slide: slide,
	      element: element
	    });
	    slides.sort(function(a, b) {
	      return +a.slide.index - +b.slide.index;
	    });
	    //if this is the first slide or the slide is set to active, select it
	    if (slide.index === $scope.active || slides.length === 1 && !angular.isNumber($scope.active)) {
	      if ($scope.$currentTransition) {
	        $scope.$currentTransition = null;
	      }

	      currentIndex = slide.index;
	      $scope.active = slide.index;
	      setActive(currentIndex);
	      self.select(slides[findSlideIndex(slide)]);
	      if (slides.length === 1) {
	        $scope.play();
	      }
	    }
	  };

	  self.getCurrentIndex = function() {
	    for (var i = 0; i < slides.length; i++) {
	      if (slides[i].slide.index === currentIndex) {
	        return i;
	      }
	    }
	  };

	  self.next = $scope.next = function() {
	    var newIndex = (self.getCurrentIndex() + 1) % slides.length;

	    if (newIndex === 0 && $scope.noWrap()) {
	      $scope.pause();
	      return;
	    }

	    return self.select(slides[newIndex], 'next');
	  };

	  self.prev = $scope.prev = function() {
	    var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;

	    if ($scope.noWrap() && newIndex === slides.length - 1) {
	      $scope.pause();
	      return;
	    }

	    return self.select(slides[newIndex], 'prev');
	  };

	  self.removeSlide = function(slide) {
	    var index = findSlideIndex(slide);

	    var bufferedIndex = bufferedTransitions.indexOf(slides[index]);
	    if (bufferedIndex !== -1) {
	      bufferedTransitions.splice(bufferedIndex, 1);
	    }

	    //get the index of the slide inside the carousel
	    slides.splice(index, 1);
	    if (slides.length > 0 && currentIndex === index) {
	      if (index >= slides.length) {
	        currentIndex = slides.length - 1;
	        $scope.active = currentIndex;
	        setActive(currentIndex);
	        self.select(slides[slides.length - 1]);
	      } else {
	        currentIndex = index;
	        $scope.active = currentIndex;
	        setActive(currentIndex);
	        self.select(slides[index]);
	      }
	    } else if (currentIndex > index) {
	      currentIndex--;
	      $scope.active = currentIndex;
	    }

	    //clean the active value when no more slide
	    if (slides.length === 0) {
	      currentIndex = null;
	      $scope.active = null;
	      clearBufferedTransitions();
	    }
	  };

	  /* direction: "prev" or "next" */
	  self.select = $scope.select = function(nextSlide, direction) {
	    var nextIndex = findSlideIndex(nextSlide.slide);
	    //Decide direction if it's not given
	    if (direction === undefined) {
	      direction = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
	    }
	    //Prevent this user-triggered transition from occurring if there is already one in progress
	    if (nextSlide.slide.index !== currentIndex &&
	      !$scope.$currentTransition) {
	      goNext(nextSlide.slide, nextIndex, direction);
	    } else if (nextSlide && nextSlide.slide.index !== currentIndex && $scope.$currentTransition) {
	      bufferedTransitions.push(slides[nextIndex]);
	    }
	  };

	  /* Allow outside people to call indexOf on slides array */
	  $scope.indexOfSlide = function(slide) {
	    return +slide.slide.index;
	  };

	  $scope.isActive = function(slide) {
	    return $scope.active === slide.slide.index;
	  };

	  $scope.isPrevDisabled = function() {
	    return $scope.active === 0 && $scope.noWrap();
	  };

	  $scope.isNextDisabled = function() {
	    return $scope.active === slides.length - 1 && $scope.noWrap();
	  };

	  $scope.pause = function() {
	    if (!$scope.noPause) {
	      isPlaying = false;
	      resetTimer();
	    }
	  };

	  $scope.play = function() {
	    if (!isPlaying) {
	      isPlaying = true;
	      restartTimer();
	    }
	  };

	  $element.on('mouseenter', $scope.pause);
	  $element.on('mouseleave', $scope.play);

	  $scope.$on('$destroy', function() {
	    destroyed = true;
	    resetTimer();
	  });

	  $scope.$watch('noTransition', function(noTransition) {
	    $animate.enabled($element, !noTransition);
	  });

	  $scope.$watch('interval', restartTimer);

	  $scope.$watchCollection('slides', resetTransition);

	  $scope.$watch('active', function(index) {
	    if (angular.isNumber(index) && currentIndex !== index) {
	      for (var i = 0; i < slides.length; i++) {
	        if (slides[i].slide.index === index) {
	          index = i;
	          break;
	        }
	      }

	      var slide = slides[index];
	      if (slide) {
	        setActive(index);
	        self.select(slides[index]);
	        currentIndex = index;
	      }
	    }
	  });

	  function clearBufferedTransitions() {
	    while (bufferedTransitions.length) {
	      bufferedTransitions.shift();
	    }
	  }

	  function getSlideByIndex(index) {
	    for (var i = 0, l = slides.length; i < l; ++i) {
	      if (slides[i].index === index) {
	        return slides[i];
	      }
	    }
	  }

	  function setActive(index) {
	    for (var i = 0; i < slides.length; i++) {
	      slides[i].slide.active = i === index;
	    }
	  }

	  function goNext(slide, index, direction) {
	    if (destroyed) {
	      return;
	    }

	    angular.extend(slide, {direction: direction});
	    angular.extend(slides[currentIndex].slide || {}, {direction: direction});
	    if ($animate.enabled($element) && !$scope.$currentTransition &&
	      slides[index].element && self.slides.length > 1) {
	      slides[index].element.data(SLIDE_DIRECTION, slide.direction);
	      var currentIdx = self.getCurrentIndex();

	      if (angular.isNumber(currentIdx) && slides[currentIdx].element) {
	        slides[currentIdx].element.data(SLIDE_DIRECTION, slide.direction);
	      }

	      $scope.$currentTransition = true;
	      $animate.on('addClass', slides[index].element, function(element, phase) {
	        if (phase === 'close') {
	          $scope.$currentTransition = null;
	          $animate.off('addClass', element);
	          if (bufferedTransitions.length) {
	            var nextSlide = bufferedTransitions.pop().slide;
	            var nextIndex = nextSlide.index;
	            var nextDirection = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
	            clearBufferedTransitions();

	            goNext(nextSlide, nextIndex, nextDirection);
	          }
	        }
	      });
	    }

	    $scope.active = slide.index;
	    currentIndex = slide.index;
	    setActive(index);

	    //every time you change slides, reset the timer
	    restartTimer();
	  }

	  function findSlideIndex(slide) {
	    for (var i = 0; i < slides.length; i++) {
	      if (slides[i].slide === slide) {
	        return i;
	      }
	    }
	  }

	  function resetTimer() {
	    if (currentInterval) {
	      $interval.cancel(currentInterval);
	      currentInterval = null;
	    }
	  }

	  function resetTransition(slides) {
	    if (!slides.length) {
	      $scope.$currentTransition = null;
	      clearBufferedTransitions();
	    }
	  }

	  function restartTimer() {
	    resetTimer();
	    var interval = +$scope.interval;
	    if (!isNaN(interval) && interval > 0) {
	      currentInterval = $interval(timerFn, interval);
	    }
	  }

	  function timerFn() {
	    var interval = +$scope.interval;
	    if (isPlaying && !isNaN(interval) && interval > 0 && slides.length) {
	      $scope.next();
	    } else {
	      $scope.pause();
	    }
	  }
	}])

	.directive('uibCarousel', function() {
	  return {
	    transclude: true,
	    controller: 'UibCarouselController',
	    controllerAs: 'carousel',
	    restrict: 'A',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/carousel/carousel.html';
	    },
	    scope: {
	      active: '=',
	      interval: '=',
	      noTransition: '=',
	      noPause: '=',
	      noWrap: '&'
	    }
	  };
	})

	.directive('uibSlide', ['$animate', function($animate) {
	  return {
	    require: '^uibCarousel',
	    restrict: 'A',
	    transclude: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/carousel/slide.html';
	    },
	    scope: {
	      actual: '=?',
	      index: '=?'
	    },
	    link: function (scope, element, attrs, carouselCtrl) {
	      element.addClass('item');
	      carouselCtrl.addSlide(scope, element);
	      //when the scope is destroyed then remove the slide from the current slides array
	      scope.$on('$destroy', function() {
	        carouselCtrl.removeSlide(scope);
	      });

	      scope.$watch('active', function(active) {
	        $animate[active ? 'addClass' : 'removeClass'](element, 'active');
	      });
	    }
	  };
	}])

	.animation('.item', ['$animateCss',
	function($animateCss) {
	  var SLIDE_DIRECTION = 'uib-slideDirection';

	  function removeClass(element, className, callback) {
	    element.removeClass(className);
	    if (callback) {
	      callback();
	    }
	  }

	  return {
	    beforeAddClass: function(element, className, done) {
	      if (className === 'active') {
	        var stopped = false;
	        var direction = element.data(SLIDE_DIRECTION);
	        var directionClass = direction === 'next' ? 'left' : 'right';
	        var removeClassFn = removeClass.bind(this, element,
	          directionClass + ' ' + direction, done);
	        element.addClass(direction);

	        $animateCss(element, {addClass: directionClass})
	          .start()
	          .done(removeClassFn);

	        return function() {
	          stopped = true;
	        };
	      }
	      done();
	    },
	    beforeRemoveClass: function (element, className, done) {
	      if (className === 'active') {
	        var stopped = false;
	        var direction = element.data(SLIDE_DIRECTION);
	        var directionClass = direction === 'next' ? 'left' : 'right';
	        var removeClassFn = removeClass.bind(this, element, directionClass, done);

	        $animateCss(element, {addClass: directionClass})
	          .start()
	          .done(removeClassFn);

	        return function() {
	          stopped = true;
	        };
	      }
	      done();
	    }
	  };
	}]);

	angular.module('ui.bootstrap.dateparser', [])

	.service('uibDateParser', ['$log', '$locale', 'dateFilter', 'orderByFilter', function($log, $locale, dateFilter, orderByFilter) {
	  // Pulled from https://github.com/mbostock/d3/blob/master/src/format/requote.js
	  var SPECIAL_CHARACTERS_REGEXP = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;

	  var localeId;
	  var formatCodeToRegex;

	  this.init = function() {
	    localeId = $locale.id;

	    this.parsers = {};
	    this.formatters = {};

	    formatCodeToRegex = [
	      {
	        key: 'yyyy',
	        regex: '\\d{4}',
	        apply: function(value) { this.year = +value; },
	        formatter: function(date) {
	          var _date = new Date();
	          _date.setFullYear(Math.abs(date.getFullYear()));
	          return dateFilter(_date, 'yyyy');
	        }
	      },
	      {
	        key: 'yy',
	        regex: '\\d{2}',
	        apply: function(value) { value = +value; this.year = value < 69 ? value + 2000 : value + 1900; },
	        formatter: function(date) {
	          var _date = new Date();
	          _date.setFullYear(Math.abs(date.getFullYear()));
	          return dateFilter(_date, 'yy');
	        }
	      },
	      {
	        key: 'y',
	        regex: '\\d{1,4}',
	        apply: function(value) { this.year = +value; },
	        formatter: function(date) {
	          var _date = new Date();
	          _date.setFullYear(Math.abs(date.getFullYear()));
	          return dateFilter(_date, 'y');
	        }
	      },
	      {
	        key: 'M!',
	        regex: '0?[1-9]|1[0-2]',
	        apply: function(value) { this.month = value - 1; },
	        formatter: function(date) {
	          var value = date.getMonth();
	          if (/^[0-9]$/.test(value)) {
	            return dateFilter(date, 'MM');
	          }

	          return dateFilter(date, 'M');
	        }
	      },
	      {
	        key: 'MMMM',
	        regex: $locale.DATETIME_FORMATS.MONTH.join('|'),
	        apply: function(value) { this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value); },
	        formatter: function(date) { return dateFilter(date, 'MMMM'); }
	      },
	      {
	        key: 'MMM',
	        regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
	        apply: function(value) { this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value); },
	        formatter: function(date) { return dateFilter(date, 'MMM'); }
	      },
	      {
	        key: 'MM',
	        regex: '0[1-9]|1[0-2]',
	        apply: function(value) { this.month = value - 1; },
	        formatter: function(date) { return dateFilter(date, 'MM'); }
	      },
	      {
	        key: 'M',
	        regex: '[1-9]|1[0-2]',
	        apply: function(value) { this.month = value - 1; },
	        formatter: function(date) { return dateFilter(date, 'M'); }
	      },
	      {
	        key: 'd!',
	        regex: '[0-2]?[0-9]{1}|3[0-1]{1}',
	        apply: function(value) { this.date = +value; },
	        formatter: function(date) {
	          var value = date.getDate();
	          if (/^[1-9]$/.test(value)) {
	            return dateFilter(date, 'dd');
	          }

	          return dateFilter(date, 'd');
	        }
	      },
	      {
	        key: 'dd',
	        regex: '[0-2][0-9]{1}|3[0-1]{1}',
	        apply: function(value) { this.date = +value; },
	        formatter: function(date) { return dateFilter(date, 'dd'); }
	      },
	      {
	        key: 'd',
	        regex: '[1-2]?[0-9]{1}|3[0-1]{1}',
	        apply: function(value) { this.date = +value; },
	        formatter: function(date) { return dateFilter(date, 'd'); }
	      },
	      {
	        key: 'EEEE',
	        regex: $locale.DATETIME_FORMATS.DAY.join('|'),
	        formatter: function(date) { return dateFilter(date, 'EEEE'); }
	      },
	      {
	        key: 'EEE',
	        regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|'),
	        formatter: function(date) { return dateFilter(date, 'EEE'); }
	      },
	      {
	        key: 'HH',
	        regex: '(?:0|1)[0-9]|2[0-3]',
	        apply: function(value) { this.hours = +value; },
	        formatter: function(date) { return dateFilter(date, 'HH'); }
	      },
	      {
	        key: 'hh',
	        regex: '0[0-9]|1[0-2]',
	        apply: function(value) { this.hours = +value; },
	        formatter: function(date) { return dateFilter(date, 'hh'); }
	      },
	      {
	        key: 'H',
	        regex: '1?[0-9]|2[0-3]',
	        apply: function(value) { this.hours = +value; },
	        formatter: function(date) { return dateFilter(date, 'H'); }
	      },
	      {
	        key: 'h',
	        regex: '[0-9]|1[0-2]',
	        apply: function(value) { this.hours = +value; },
	        formatter: function(date) { return dateFilter(date, 'h'); }
	      },
	      {
	        key: 'mm',
	        regex: '[0-5][0-9]',
	        apply: function(value) { this.minutes = +value; },
	        formatter: function(date) { return dateFilter(date, 'mm'); }
	      },
	      {
	        key: 'm',
	        regex: '[0-9]|[1-5][0-9]',
	        apply: function(value) { this.minutes = +value; },
	        formatter: function(date) { return dateFilter(date, 'm'); }
	      },
	      {
	        key: 'sss',
	        regex: '[0-9][0-9][0-9]',
	        apply: function(value) { this.milliseconds = +value; },
	        formatter: function(date) { return dateFilter(date, 'sss'); }
	      },
	      {
	        key: 'ss',
	        regex: '[0-5][0-9]',
	        apply: function(value) { this.seconds = +value; },
	        formatter: function(date) { return dateFilter(date, 'ss'); }
	      },
	      {
	        key: 's',
	        regex: '[0-9]|[1-5][0-9]',
	        apply: function(value) { this.seconds = +value; },
	        formatter: function(date) { return dateFilter(date, 's'); }
	      },
	      {
	        key: 'a',
	        regex: $locale.DATETIME_FORMATS.AMPMS.join('|'),
	        apply: function(value) {
	          if (this.hours === 12) {
	            this.hours = 0;
	          }

	          if (value === 'PM') {
	            this.hours += 12;
	          }
	        },
	        formatter: function(date) { return dateFilter(date, 'a'); }
	      },
	      {
	        key: 'Z',
	        regex: '[+-]\\d{4}',
	        apply: function(value) {
	          var matches = value.match(/([+-])(\d{2})(\d{2})/),
	            sign = matches[1],
	            hours = matches[2],
	            minutes = matches[3];
	          this.hours += toInt(sign + hours);
	          this.minutes += toInt(sign + minutes);
	        },
	        formatter: function(date) {
	          return dateFilter(date, 'Z');
	        }
	      },
	      {
	        key: 'ww',
	        regex: '[0-4][0-9]|5[0-3]',
	        formatter: function(date) { return dateFilter(date, 'ww'); }
	      },
	      {
	        key: 'w',
	        regex: '[0-9]|[1-4][0-9]|5[0-3]',
	        formatter: function(date) { return dateFilter(date, 'w'); }
	      },
	      {
	        key: 'GGGG',
	        regex: $locale.DATETIME_FORMATS.ERANAMES.join('|').replace(/\s/g, '\\s'),
	        formatter: function(date) { return dateFilter(date, 'GGGG'); }
	      },
	      {
	        key: 'GGG',
	        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
	        formatter: function(date) { return dateFilter(date, 'GGG'); }
	      },
	      {
	        key: 'GG',
	        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
	        formatter: function(date) { return dateFilter(date, 'GG'); }
	      },
	      {
	        key: 'G',
	        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
	        formatter: function(date) { return dateFilter(date, 'G'); }
	      }
	    ];

	    if (angular.version.major >= 1 && angular.version.minor > 4) {
	      formatCodeToRegex.push({
	        key: 'LLLL',
	        regex: $locale.DATETIME_FORMATS.STANDALONEMONTH.join('|'),
	        apply: function(value) { this.month = $locale.DATETIME_FORMATS.STANDALONEMONTH.indexOf(value); },
	        formatter: function(date) { return dateFilter(date, 'LLLL'); }
	      });
	    }
	  };

	  this.init();

	  function createParser(format) {
	    var map = [], regex = format.split('');

	    // check for literal values
	    var quoteIndex = format.indexOf('\'');
	    if (quoteIndex > -1) {
	      var inLiteral = false;
	      format = format.split('');
	      for (var i = quoteIndex; i < format.length; i++) {
	        if (inLiteral) {
	          if (format[i] === '\'') {
	            if (i + 1 < format.length && format[i+1] === '\'') { // escaped single quote
	              format[i+1] = '$';
	              regex[i+1] = '';
	            } else { // end of literal
	              regex[i] = '';
	              inLiteral = false;
	            }
	          }
	          format[i] = '$';
	        } else {
	          if (format[i] === '\'') { // start of literal
	            format[i] = '$';
	            regex[i] = '';
	            inLiteral = true;
	          }
	        }
	      }

	      format = format.join('');
	    }

	    angular.forEach(formatCodeToRegex, function(data) {
	      var index = format.indexOf(data.key);

	      if (index > -1) {
	        format = format.split('');

	        regex[index] = '(' + data.regex + ')';
	        format[index] = '$'; // Custom symbol to define consumed part of format
	        for (var i = index + 1, n = index + data.key.length; i < n; i++) {
	          regex[i] = '';
	          format[i] = '$';
	        }
	        format = format.join('');

	        map.push({
	          index: index,
	          key: data.key,
	          apply: data.apply,
	          matcher: data.regex
	        });
	      }
	    });

	    return {
	      regex: new RegExp('^' + regex.join('') + '$'),
	      map: orderByFilter(map, 'index')
	    };
	  }

	  function createFormatter(format) {
	    var formatters = [];
	    var i = 0;
	    var formatter, literalIdx;
	    while (i < format.length) {
	      if (angular.isNumber(literalIdx)) {
	        if (format.charAt(i) === '\'') {
	          if (i + 1 >= format.length || format.charAt(i + 1) !== '\'') {
	            formatters.push(constructLiteralFormatter(format, literalIdx, i));
	            literalIdx = null;
	          }
	        } else if (i === format.length) {
	          while (literalIdx < format.length) {
	            formatter = constructFormatterFromIdx(format, literalIdx);
	            formatters.push(formatter);
	            literalIdx = formatter.endIdx;
	          }
	        }

	        i++;
	        continue;
	      }

	      if (format.charAt(i) === '\'') {
	        literalIdx = i;
	        i++;
	        continue;
	      }

	      formatter = constructFormatterFromIdx(format, i);

	      formatters.push(formatter.parser);
	      i = formatter.endIdx;
	    }

	    return formatters;
	  }

	  function constructLiteralFormatter(format, literalIdx, endIdx) {
	    return function() {
	      return format.substr(literalIdx + 1, endIdx - literalIdx - 1);
	    };
	  }

	  function constructFormatterFromIdx(format, i) {
	    var currentPosStr = format.substr(i);
	    for (var j = 0; j < formatCodeToRegex.length; j++) {
	      if (new RegExp('^' + formatCodeToRegex[j].key).test(currentPosStr)) {
	        var data = formatCodeToRegex[j];
	        return {
	          endIdx: i + data.key.length,
	          parser: data.formatter
	        };
	      }
	    }

	    return {
	      endIdx: i + 1,
	      parser: function() {
	        return currentPosStr.charAt(0);
	      }
	    };
	  }

	  this.filter = function(date, format) {
	    if (!angular.isDate(date) || isNaN(date) || !format) {
	      return '';
	    }

	    format = $locale.DATETIME_FORMATS[format] || format;

	    if ($locale.id !== localeId) {
	      this.init();
	    }

	    if (!this.formatters[format]) {
	      this.formatters[format] = createFormatter(format);
	    }

	    var formatters = this.formatters[format];

	    return formatters.reduce(function(str, formatter) {
	      return str + formatter(date);
	    }, '');
	  };

	  this.parse = function(input, format, baseDate) {
	    if (!angular.isString(input) || !format) {
	      return input;
	    }

	    format = $locale.DATETIME_FORMATS[format] || format;
	    format = format.replace(SPECIAL_CHARACTERS_REGEXP, '\\$&');

	    if ($locale.id !== localeId) {
	      this.init();
	    }

	    if (!this.parsers[format]) {
	      this.parsers[format] = createParser(format, 'apply');
	    }

	    var parser = this.parsers[format],
	        regex = parser.regex,
	        map = parser.map,
	        results = input.match(regex),
	        tzOffset = false;
	    if (results && results.length) {
	      var fields, dt;
	      if (angular.isDate(baseDate) && !isNaN(baseDate.getTime())) {
	        fields = {
	          year: baseDate.getFullYear(),
	          month: baseDate.getMonth(),
	          date: baseDate.getDate(),
	          hours: baseDate.getHours(),
	          minutes: baseDate.getMinutes(),
	          seconds: baseDate.getSeconds(),
	          milliseconds: baseDate.getMilliseconds()
	        };
	      } else {
	        if (baseDate) {
	          $log.warn('dateparser:', 'baseDate is not a valid date');
	        }
	        fields = { year: 1900, month: 0, date: 1, hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };
	      }

	      for (var i = 1, n = results.length; i < n; i++) {
	        var mapper = map[i - 1];
	        if (mapper.matcher === 'Z') {
	          tzOffset = true;
	        }

	        if (mapper.apply) {
	          mapper.apply.call(fields, results[i]);
	        }
	      }

	      var datesetter = tzOffset ? Date.prototype.setUTCFullYear :
	        Date.prototype.setFullYear;
	      var timesetter = tzOffset ? Date.prototype.setUTCHours :
	        Date.prototype.setHours;

	      if (isValid(fields.year, fields.month, fields.date)) {
	        if (angular.isDate(baseDate) && !isNaN(baseDate.getTime()) && !tzOffset) {
	          dt = new Date(baseDate);
	          datesetter.call(dt, fields.year, fields.month, fields.date);
	          timesetter.call(dt, fields.hours, fields.minutes,
	            fields.seconds, fields.milliseconds);
	        } else {
	          dt = new Date(0);
	          datesetter.call(dt, fields.year, fields.month, fields.date);
	          timesetter.call(dt, fields.hours || 0, fields.minutes || 0,
	            fields.seconds || 0, fields.milliseconds || 0);
	        }
	      }

	      return dt;
	    }
	  };

	  // Check if date is valid for specific month (and year for February).
	  // Month: 0 = Jan, 1 = Feb, etc
	  function isValid(year, month, date) {
	    if (date < 1) {
	      return false;
	    }

	    if (month === 1 && date > 28) {
	      return date === 29 && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0);
	    }

	    if (month === 3 || month === 5 || month === 8 || month === 10) {
	      return date < 31;
	    }

	    return true;
	  }

	  function toInt(str) {
	    return parseInt(str, 10);
	  }

	  this.toTimezone = toTimezone;
	  this.fromTimezone = fromTimezone;
	  this.timezoneToOffset = timezoneToOffset;
	  this.addDateMinutes = addDateMinutes;
	  this.convertTimezoneToLocal = convertTimezoneToLocal;

	  function toTimezone(date, timezone) {
	    return date && timezone ? convertTimezoneToLocal(date, timezone) : date;
	  }

	  function fromTimezone(date, timezone) {
	    return date && timezone ? convertTimezoneToLocal(date, timezone, true) : date;
	  }

	  //https://github.com/angular/angular.js/blob/622c42169699ec07fc6daaa19fe6d224e5d2f70e/src/Angular.js#L1207
	  function timezoneToOffset(timezone, fallback) {
	    timezone = timezone.replace(/:/g, '');
	    var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
	    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
	  }

	  function addDateMinutes(date, minutes) {
	    date = new Date(date.getTime());
	    date.setMinutes(date.getMinutes() + minutes);
	    return date;
	  }

	  function convertTimezoneToLocal(date, timezone, reverse) {
	    reverse = reverse ? -1 : 1;
	    var dateTimezoneOffset = date.getTimezoneOffset();
	    var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	    return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
	  }
	}]);

	// Avoiding use of ng-class as it creates a lot of watchers when a class is to be applied to
	// at most one element.
	angular.module('ui.bootstrap.isClass', [])
	.directive('uibIsClass', [
	         '$animate',
	function ($animate) {
	  //                    11111111          22222222
	  var ON_REGEXP = /^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/;
	  //                    11111111           22222222
	  var IS_REGEXP = /^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;

	  var dataPerTracked = {};

	  return {
	    restrict: 'A',
	    compile: function(tElement, tAttrs) {
	      var linkedScopes = [];
	      var instances = [];
	      var expToData = {};
	      var lastActivated = null;
	      var onExpMatches = tAttrs.uibIsClass.match(ON_REGEXP);
	      var onExp = onExpMatches[2];
	      var expsStr = onExpMatches[1];
	      var exps = expsStr.split(',');

	      return linkFn;

	      function linkFn(scope, element, attrs) {
	        linkedScopes.push(scope);
	        instances.push({
	          scope: scope,
	          element: element
	        });

	        exps.forEach(function(exp, k) {
	          addForExp(exp, scope);
	        });

	        scope.$on('$destroy', removeScope);
	      }

	      function addForExp(exp, scope) {
	        var matches = exp.match(IS_REGEXP);
	        var clazz = scope.$eval(matches[1]);
	        var compareWithExp = matches[2];
	        var data = expToData[exp];
	        if (!data) {
	          var watchFn = function(compareWithVal) {
	            var newActivated = null;
	            instances.some(function(instance) {
	              var thisVal = instance.scope.$eval(onExp);
	              if (thisVal === compareWithVal) {
	                newActivated = instance;
	                return true;
	              }
	            });
	            if (data.lastActivated !== newActivated) {
	              if (data.lastActivated) {
	                $animate.removeClass(data.lastActivated.element, clazz);
	              }
	              if (newActivated) {
	                $animate.addClass(newActivated.element, clazz);
	              }
	              data.lastActivated = newActivated;
	            }
	          };
	          expToData[exp] = data = {
	            lastActivated: null,
	            scope: scope,
	            watchFn: watchFn,
	            compareWithExp: compareWithExp,
	            watcher: scope.$watch(compareWithExp, watchFn)
	          };
	        }
	        data.watchFn(scope.$eval(compareWithExp));
	      }

	      function removeScope(e) {
	        var removedScope = e.targetScope;
	        var index = linkedScopes.indexOf(removedScope);
	        linkedScopes.splice(index, 1);
	        instances.splice(index, 1);
	        if (linkedScopes.length) {
	          var newWatchScope = linkedScopes[0];
	          angular.forEach(expToData, function(data) {
	            if (data.scope === removedScope) {
	              data.watcher = newWatchScope.$watch(data.compareWithExp, data.watchFn);
	              data.scope = newWatchScope;
	            }
	          });
	        } else {
	          expToData = {};
	        }
	      }
	    }
	  };
	}]);
	angular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.isClass'])

	.value('$datepickerSuppressError', false)

	.value('$datepickerLiteralWarning', true)

	.constant('uibDatepickerConfig', {
	  datepickerMode: 'day',
	  formatDay: 'dd',
	  formatMonth: 'MMMM',
	  formatYear: 'yyyy',
	  formatDayHeader: 'EEE',
	  formatDayTitle: 'MMMM yyyy',
	  formatMonthTitle: 'yyyy',
	  maxDate: null,
	  maxMode: 'year',
	  minDate: null,
	  minMode: 'day',
	  monthColumns: 3,
	  ngModelOptions: {},
	  shortcutPropagation: false,
	  showWeeks: true,
	  yearColumns: 5,
	  yearRows: 4
	})

	.controller('UibDatepickerController', ['$scope', '$element', '$attrs', '$parse', '$interpolate', '$locale', '$log', 'dateFilter', 'uibDatepickerConfig', '$datepickerLiteralWarning', '$datepickerSuppressError', 'uibDateParser',
	  function($scope, $element, $attrs, $parse, $interpolate, $locale, $log, dateFilter, datepickerConfig, $datepickerLiteralWarning, $datepickerSuppressError, dateParser) {
	  var self = this,
	      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl;
	      ngModelOptions = {},
	      watchListeners = [];

	  $element.addClass('uib-datepicker');
	  $attrs.$set('role', 'application');

	  if (!$scope.datepickerOptions) {
	    $scope.datepickerOptions = {};
	  }

	  // Modes chain
	  this.modes = ['day', 'month', 'year'];

	  [
	    'customClass',
	    'dateDisabled',
	    'datepickerMode',
	    'formatDay',
	    'formatDayHeader',
	    'formatDayTitle',
	    'formatMonth',
	    'formatMonthTitle',
	    'formatYear',
	    'maxDate',
	    'maxMode',
	    'minDate',
	    'minMode',
	    'monthColumns',
	    'showWeeks',
	    'shortcutPropagation',
	    'startingDay',
	    'yearColumns',
	    'yearRows'
	  ].forEach(function(key) {
	    switch (key) {
	      case 'customClass':
	      case 'dateDisabled':
	        $scope[key] = $scope.datepickerOptions[key] || angular.noop;
	        break;
	      case 'datepickerMode':
	        $scope.datepickerMode = angular.isDefined($scope.datepickerOptions.datepickerMode) ?
	          $scope.datepickerOptions.datepickerMode : datepickerConfig.datepickerMode;
	        break;
	      case 'formatDay':
	      case 'formatDayHeader':
	      case 'formatDayTitle':
	      case 'formatMonth':
	      case 'formatMonthTitle':
	      case 'formatYear':
	        self[key] = angular.isDefined($scope.datepickerOptions[key]) ?
	          $interpolate($scope.datepickerOptions[key])($scope.$parent) :
	          datepickerConfig[key];
	        break;
	      case 'monthColumns':
	      case 'showWeeks':
	      case 'shortcutPropagation':
	      case 'yearColumns':
	      case 'yearRows':
	        self[key] = angular.isDefined($scope.datepickerOptions[key]) ?
	          $scope.datepickerOptions[key] : datepickerConfig[key];
	        break;
	      case 'startingDay':
	        if (angular.isDefined($scope.datepickerOptions.startingDay)) {
	          self.startingDay = $scope.datepickerOptions.startingDay;
	        } else if (angular.isNumber(datepickerConfig.startingDay)) {
	          self.startingDay = datepickerConfig.startingDay;
	        } else {
	          self.startingDay = ($locale.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7;
	        }

	        break;
	      case 'maxDate':
	      case 'minDate':
	        $scope.$watch('datepickerOptions.' + key, function(value) {
	          if (value) {
	            if (angular.isDate(value)) {
	              self[key] = dateParser.fromTimezone(new Date(value), ngModelOptions.timezone);
	            } else {
	              if ($datepickerLiteralWarning) {
	                $log.warn('Literal date support has been deprecated, please switch to date object usage');
	              }

	              self[key] = new Date(dateFilter(value, 'medium'));
	            }
	          } else {
	            self[key] = datepickerConfig[key] ?
	              dateParser.fromTimezone(new Date(datepickerConfig[key]), ngModelOptions.timezone) :
	              null;
	          }

	          self.refreshView();
	        });

	        break;
	      case 'maxMode':
	      case 'minMode':
	        if ($scope.datepickerOptions[key]) {
	          $scope.$watch(function() { return $scope.datepickerOptions[key]; }, function(value) {
	            self[key] = $scope[key] = angular.isDefined(value) ? value : $scope.datepickerOptions[key];
	            if (key === 'minMode' && self.modes.indexOf($scope.datepickerOptions.datepickerMode) < self.modes.indexOf(self[key]) ||
	              key === 'maxMode' && self.modes.indexOf($scope.datepickerOptions.datepickerMode) > self.modes.indexOf(self[key])) {
	              $scope.datepickerMode = self[key];
	              $scope.datepickerOptions.datepickerMode = self[key];
	            }
	          });
	        } else {
	          self[key] = $scope[key] = datepickerConfig[key] || null;
	        }

	        break;
	    }
	  });

	  $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);

	  $scope.disabled = angular.isDefined($attrs.disabled) || false;
	  if (angular.isDefined($attrs.ngDisabled)) {
	    watchListeners.push($scope.$parent.$watch($attrs.ngDisabled, function(disabled) {
	      $scope.disabled = disabled;
	      self.refreshView();
	    }));
	  }

	  $scope.isActive = function(dateObject) {
	    if (self.compare(dateObject.date, self.activeDate) === 0) {
	      $scope.activeDateId = dateObject.uid;
	      return true;
	    }
	    return false;
	  };

	  this.init = function(ngModelCtrl_) {
	    ngModelCtrl = ngModelCtrl_;
	    ngModelOptions = ngModelCtrl_.$options ||
	      $scope.datepickerOptions.ngModelOptions ||
	      datepickerConfig.ngModelOptions;
	    if ($scope.datepickerOptions.initDate) {
	      self.activeDate = dateParser.fromTimezone($scope.datepickerOptions.initDate, ngModelOptions.timezone) || new Date();
	      $scope.$watch('datepickerOptions.initDate', function(initDate) {
	        if (initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)) {
	          self.activeDate = dateParser.fromTimezone(initDate, ngModelOptions.timezone);
	          self.refreshView();
	        }
	      });
	    } else {
	      self.activeDate = new Date();
	    }

	    var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : new Date();
	    this.activeDate = !isNaN(date) ?
	      dateParser.fromTimezone(date, ngModelOptions.timezone) :
	      dateParser.fromTimezone(new Date(), ngModelOptions.timezone);

	    ngModelCtrl.$render = function() {
	      self.render();
	    };
	  };

	  this.render = function() {
	    if (ngModelCtrl.$viewValue) {
	      var date = new Date(ngModelCtrl.$viewValue),
	          isValid = !isNaN(date);

	      if (isValid) {
	        this.activeDate = dateParser.fromTimezone(date, ngModelOptions.timezone);
	      } else if (!$datepickerSuppressError) {
	        $log.error('Datepicker directive: "ng-model" value must be a Date object');
	      }
	    }
	    this.refreshView();
	  };

	  this.refreshView = function() {
	    if (this.element) {
	      $scope.selectedDt = null;
	      this._refreshView();
	      if ($scope.activeDt) {
	        $scope.activeDateId = $scope.activeDt.uid;
	      }

	      var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
	      date = dateParser.fromTimezone(date, ngModelOptions.timezone);
	      ngModelCtrl.$setValidity('dateDisabled', !date ||
	        this.element && !this.isDisabled(date));
	    }
	  };

	  this.createDateObject = function(date, format) {
	    var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
	    model = dateParser.fromTimezone(model, ngModelOptions.timezone);
	    var today = new Date();
	    today = dateParser.fromTimezone(today, ngModelOptions.timezone);
	    var time = this.compare(date, today);
	    var dt = {
	      date: date,
	      label: dateParser.filter(date, format),
	      selected: model && this.compare(date, model) === 0,
	      disabled: this.isDisabled(date),
	      past: time < 0,
	      current: time === 0,
	      future: time > 0,
	      customClass: this.customClass(date) || null
	    };

	    if (model && this.compare(date, model) === 0) {
	      $scope.selectedDt = dt;
	    }

	    if (self.activeDate && this.compare(dt.date, self.activeDate) === 0) {
	      $scope.activeDt = dt;
	    }

	    return dt;
	  };

	  this.isDisabled = function(date) {
	    return $scope.disabled ||
	      this.minDate && this.compare(date, this.minDate) < 0 ||
	      this.maxDate && this.compare(date, this.maxDate) > 0 ||
	      $scope.dateDisabled && $scope.dateDisabled({date: date, mode: $scope.datepickerMode});
	  };

	  this.customClass = function(date) {
	    return $scope.customClass({date: date, mode: $scope.datepickerMode});
	  };

	  // Split array into smaller arrays
	  this.split = function(arr, size) {
	    var arrays = [];
	    while (arr.length > 0) {
	      arrays.push(arr.splice(0, size));
	    }
	    return arrays;
	  };

	  $scope.select = function(date) {
	    if ($scope.datepickerMode === self.minMode) {
	      var dt = ngModelCtrl.$viewValue ? dateParser.fromTimezone(new Date(ngModelCtrl.$viewValue), ngModelOptions.timezone) : new Date(0, 0, 0, 0, 0, 0, 0);
	      dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	      dt = dateParser.toTimezone(dt, ngModelOptions.timezone);
	      ngModelCtrl.$setViewValue(dt);
	      ngModelCtrl.$render();
	    } else {
	      self.activeDate = date;
	      setMode(self.modes[self.modes.indexOf($scope.datepickerMode) - 1]);

	      $scope.$emit('uib:datepicker.mode');
	    }

	    $scope.$broadcast('uib:datepicker.focus');
	  };

	  $scope.move = function(direction) {
	    var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),
	        month = self.activeDate.getMonth() + direction * (self.step.months || 0);
	    self.activeDate.setFullYear(year, month, 1);
	    self.refreshView();
	  };

	  $scope.toggleMode = function(direction) {
	    direction = direction || 1;

	    if ($scope.datepickerMode === self.maxMode && direction === 1 ||
	      $scope.datepickerMode === self.minMode && direction === -1) {
	      return;
	    }

	    setMode(self.modes[self.modes.indexOf($scope.datepickerMode) + direction]);

	    $scope.$emit('uib:datepicker.mode');
	  };

	  // Key event mapper
	  $scope.keys = { 13: 'enter', 32: 'space', 33: 'pageup', 34: 'pagedown', 35: 'end', 36: 'home', 37: 'left', 38: 'up', 39: 'right', 40: 'down' };

	  var focusElement = function() {
	    self.element[0].focus();
	  };

	  // Listen for focus requests from popup directive
	  $scope.$on('uib:datepicker.focus', focusElement);

	  $scope.keydown = function(evt) {
	    var key = $scope.keys[evt.which];

	    if (!key || evt.shiftKey || evt.altKey || $scope.disabled) {
	      return;
	    }

	    evt.preventDefault();
	    if (!self.shortcutPropagation) {
	      evt.stopPropagation();
	    }

	    if (key === 'enter' || key === 'space') {
	      if (self.isDisabled(self.activeDate)) {
	        return; // do nothing
	      }
	      $scope.select(self.activeDate);
	    } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {
	      $scope.toggleMode(key === 'up' ? 1 : -1);
	    } else {
	      self.handleKeyDown(key, evt);
	      self.refreshView();
	    }
	  };

	  $element.on('keydown', function(evt) {
	    $scope.$apply(function() {
	      $scope.keydown(evt);
	    });
	  });

	  $scope.$on('$destroy', function() {
	    //Clear all watch listeners on destroy
	    while (watchListeners.length) {
	      watchListeners.shift()();
	    }
	  });

	  function setMode(mode) {
	    $scope.datepickerMode = mode;
	    $scope.datepickerOptions.datepickerMode = mode;
	  }
	}])

	.controller('UibDaypickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
	  var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

	  this.step = { months: 1 };
	  this.element = $element;
	  function getDaysInMonth(year, month) {
	    return month === 1 && year % 4 === 0 &&
	      (year % 100 !== 0 || year % 400 === 0) ? 29 : DAYS_IN_MONTH[month];
	  }

	  this.init = function(ctrl) {
	    angular.extend(ctrl, this);
	    scope.showWeeks = ctrl.showWeeks;
	    ctrl.refreshView();
	  };

	  this.getDates = function(startDate, n) {
	    var dates = new Array(n), current = new Date(startDate), i = 0, date;
	    while (i < n) {
	      date = new Date(current);
	      dates[i++] = date;
	      current.setDate(current.getDate() + 1);
	    }
	    return dates;
	  };

	  this._refreshView = function() {
	    var year = this.activeDate.getFullYear(),
	      month = this.activeDate.getMonth(),
	      firstDayOfMonth = new Date(this.activeDate);

	    firstDayOfMonth.setFullYear(year, month, 1);

	    var difference = this.startingDay - firstDayOfMonth.getDay(),
	      numDisplayedFromPreviousMonth = difference > 0 ?
	        7 - difference : - difference,
	      firstDate = new Date(firstDayOfMonth);

	    if (numDisplayedFromPreviousMonth > 0) {
	      firstDate.setDate(-numDisplayedFromPreviousMonth + 1);
	    }

	    // 42 is the number of days on a six-week calendar
	    var days = this.getDates(firstDate, 42);
	    for (var i = 0; i < 42; i ++) {
	      days[i] = angular.extend(this.createDateObject(days[i], this.formatDay), {
	        secondary: days[i].getMonth() !== month,
	        uid: scope.uniqueId + '-' + i
	      });
	    }

	    scope.labels = new Array(7);
	    for (var j = 0; j < 7; j++) {
	      scope.labels[j] = {
	        abbr: dateFilter(days[j].date, this.formatDayHeader),
	        full: dateFilter(days[j].date, 'EEEE')
	      };
	    }

	    scope.title = dateFilter(this.activeDate, this.formatDayTitle);
	    scope.rows = this.split(days, 7);

	    if (scope.showWeeks) {
	      scope.weekNumbers = [];
	      var thursdayIndex = (4 + 7 - this.startingDay) % 7,
	          numWeeks = scope.rows.length;
	      for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
	        scope.weekNumbers.push(
	          getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date));
	      }
	    }
	  };

	  this.compare = function(date1, date2) {
	    var _date1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());
	    var _date2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
	    _date1.setFullYear(date1.getFullYear());
	    _date2.setFullYear(date2.getFullYear());
	    return _date1 - _date2;
	  };

	  function getISO8601WeekNumber(date) {
	    var checkDate = new Date(date);
	    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
	    var time = checkDate.getTime();
	    checkDate.setMonth(0); // Compare with Jan 1
	    checkDate.setDate(1);
	    return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	  }

	  this.handleKeyDown = function(key, evt) {
	    var date = this.activeDate.getDate();

	    if (key === 'left') {
	      date = date - 1;
	    } else if (key === 'up') {
	      date = date - 7;
	    } else if (key === 'right') {
	      date = date + 1;
	    } else if (key === 'down') {
	      date = date + 7;
	    } else if (key === 'pageup' || key === 'pagedown') {
	      var month = this.activeDate.getMonth() + (key === 'pageup' ? - 1 : 1);
	      this.activeDate.setMonth(month, 1);
	      date = Math.min(getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth()), date);
	    } else if (key === 'home') {
	      date = 1;
	    } else if (key === 'end') {
	      date = getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth());
	    }
	    this.activeDate.setDate(date);
	  };
	}])

	.controller('UibMonthpickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
	  this.step = { years: 1 };
	  this.element = $element;

	  this.init = function(ctrl) {
	    angular.extend(ctrl, this);
	    ctrl.refreshView();
	  };

	  this._refreshView = function() {
	    var months = new Array(12),
	        year = this.activeDate.getFullYear(),
	        date;

	    for (var i = 0; i < 12; i++) {
	      date = new Date(this.activeDate);
	      date.setFullYear(year, i, 1);
	      months[i] = angular.extend(this.createDateObject(date, this.formatMonth), {
	        uid: scope.uniqueId + '-' + i
	      });
	    }

	    scope.title = dateFilter(this.activeDate, this.formatMonthTitle);
	    scope.rows = this.split(months, this.monthColumns);
	    scope.yearHeaderColspan = this.monthColumns > 3 ? this.monthColumns - 2 : 1;
	  };

	  this.compare = function(date1, date2) {
	    var _date1 = new Date(date1.getFullYear(), date1.getMonth());
	    var _date2 = new Date(date2.getFullYear(), date2.getMonth());
	    _date1.setFullYear(date1.getFullYear());
	    _date2.setFullYear(date2.getFullYear());
	    return _date1 - _date2;
	  };

	  this.handleKeyDown = function(key, evt) {
	    var date = this.activeDate.getMonth();

	    if (key === 'left') {
	      date = date - 1;
	    } else if (key === 'up') {
	      date = date - this.monthColumns;
	    } else if (key === 'right') {
	      date = date + 1;
	    } else if (key === 'down') {
	      date = date + this.monthColumns;
	    } else if (key === 'pageup' || key === 'pagedown') {
	      var year = this.activeDate.getFullYear() + (key === 'pageup' ? - 1 : 1);
	      this.activeDate.setFullYear(year);
	    } else if (key === 'home') {
	      date = 0;
	    } else if (key === 'end') {
	      date = 11;
	    }
	    this.activeDate.setMonth(date);
	  };
	}])

	.controller('UibYearpickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
	  var columns, range;
	  this.element = $element;

	  function getStartingYear(year) {
	    return parseInt((year - 1) / range, 10) * range + 1;
	  }

	  this.yearpickerInit = function() {
	    columns = this.yearColumns;
	    range = this.yearRows * columns;
	    this.step = { years: range };
	  };

	  this._refreshView = function() {
	    var years = new Array(range), date;

	    for (var i = 0, start = getStartingYear(this.activeDate.getFullYear()); i < range; i++) {
	      date = new Date(this.activeDate);
	      date.setFullYear(start + i, 0, 1);
	      years[i] = angular.extend(this.createDateObject(date, this.formatYear), {
	        uid: scope.uniqueId + '-' + i
	      });
	    }

	    scope.title = [years[0].label, years[range - 1].label].join(' - ');
	    scope.rows = this.split(years, columns);
	    scope.columns = columns;
	  };

	  this.compare = function(date1, date2) {
	    return date1.getFullYear() - date2.getFullYear();
	  };

	  this.handleKeyDown = function(key, evt) {
	    var date = this.activeDate.getFullYear();

	    if (key === 'left') {
	      date = date - 1;
	    } else if (key === 'up') {
	      date = date - columns;
	    } else if (key === 'right') {
	      date = date + 1;
	    } else if (key === 'down') {
	      date = date + columns;
	    } else if (key === 'pageup' || key === 'pagedown') {
	      date += (key === 'pageup' ? - 1 : 1) * range;
	    } else if (key === 'home') {
	      date = getStartingYear(this.activeDate.getFullYear());
	    } else if (key === 'end') {
	      date = getStartingYear(this.activeDate.getFullYear()) + range - 1;
	    }
	    this.activeDate.setFullYear(date);
	  };
	}])

	.directive('uibDatepicker', function() {
	  return {
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepicker/datepicker.html';
	    },
	    scope: {
	      datepickerOptions: '=?'
	    },
	    require: ['uibDatepicker', '^ngModel'],
	    restrict: 'A',
	    controller: 'UibDatepickerController',
	    controllerAs: 'datepicker',
	    link: function(scope, element, attrs, ctrls) {
	      var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      datepickerCtrl.init(ngModelCtrl);
	    }
	  };
	})

	.directive('uibDaypicker', function() {
	  return {
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepicker/day.html';
	    },
	    require: ['^uibDatepicker', 'uibDaypicker'],
	    restrict: 'A',
	    controller: 'UibDaypickerController',
	    link: function(scope, element, attrs, ctrls) {
	      var datepickerCtrl = ctrls[0],
	        daypickerCtrl = ctrls[1];

	      daypickerCtrl.init(datepickerCtrl);
	    }
	  };
	})

	.directive('uibMonthpicker', function() {
	  return {
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepicker/month.html';
	    },
	    require: ['^uibDatepicker', 'uibMonthpicker'],
	    restrict: 'A',
	    controller: 'UibMonthpickerController',
	    link: function(scope, element, attrs, ctrls) {
	      var datepickerCtrl = ctrls[0],
	        monthpickerCtrl = ctrls[1];

	      monthpickerCtrl.init(datepickerCtrl);
	    }
	  };
	})

	.directive('uibYearpicker', function() {
	  return {
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepicker/year.html';
	    },
	    require: ['^uibDatepicker', 'uibYearpicker'],
	    restrict: 'A',
	    controller: 'UibYearpickerController',
	    link: function(scope, element, attrs, ctrls) {
	      var ctrl = ctrls[0];
	      angular.extend(ctrl, ctrls[1]);
	      ctrl.yearpickerInit();

	      ctrl.refreshView();
	    }
	  };
	});

	angular.module('ui.bootstrap.position', [])

	/**
	 * A set of utility methods for working with the DOM.
	 * It is meant to be used where we need to absolute-position elements in
	 * relation to another element (this is the case for tooltips, popovers,
	 * typeahead suggestions etc.).
	 */
	  .factory('$uibPosition', ['$document', '$window', function($document, $window) {
	    /**
	     * Used by scrollbarWidth() function to cache scrollbar's width.
	     * Do not access this variable directly, use scrollbarWidth() instead.
	     */
	    var SCROLLBAR_WIDTH;
	    /**
	     * scrollbar on body and html element in IE and Edge overlay
	     * content and should be considered 0 width.
	     */
	    var BODY_SCROLLBAR_WIDTH;
	    var OVERFLOW_REGEX = {
	      normal: /(auto|scroll)/,
	      hidden: /(auto|scroll|hidden)/
	    };
	    var PLACEMENT_REGEX = {
	      auto: /\s?auto?\s?/i,
	      primary: /^(top|bottom|left|right)$/,
	      secondary: /^(top|bottom|left|right|center)$/,
	      vertical: /^(top|bottom)$/
	    };
	    var BODY_REGEX = /(HTML|BODY)/;

	    return {

	      /**
	       * Provides a raw DOM element from a jQuery/jQLite element.
	       *
	       * @param {element} elem - The element to convert.
	       *
	       * @returns {element} A HTML element.
	       */
	      getRawNode: function(elem) {
	        return elem.nodeName ? elem : elem[0] || elem;
	      },

	      /**
	       * Provides a parsed number for a style property.  Strips
	       * units and casts invalid numbers to 0.
	       *
	       * @param {string} value - The style value to parse.
	       *
	       * @returns {number} A valid number.
	       */
	      parseStyle: function(value) {
	        value = parseFloat(value);
	        return isFinite(value) ? value : 0;
	      },

	      /**
	       * Provides the closest positioned ancestor.
	       *
	       * @param {element} element - The element to get the offest parent for.
	       *
	       * @returns {element} The closest positioned ancestor.
	       */
	      offsetParent: function(elem) {
	        elem = this.getRawNode(elem);

	        var offsetParent = elem.offsetParent || $document[0].documentElement;

	        function isStaticPositioned(el) {
	          return ($window.getComputedStyle(el).position || 'static') === 'static';
	        }

	        while (offsetParent && offsetParent !== $document[0].documentElement && isStaticPositioned(offsetParent)) {
	          offsetParent = offsetParent.offsetParent;
	        }

	        return offsetParent || $document[0].documentElement;
	      },

	      /**
	       * Provides the scrollbar width, concept from TWBS measureScrollbar()
	       * function in https://github.com/twbs/bootstrap/blob/master/js/modal.js
	       * In IE and Edge, scollbar on body and html element overlay and should
	       * return a width of 0.
	       *
	       * @returns {number} The width of the browser scollbar.
	       */
	      scrollbarWidth: function(isBody) {
	        if (isBody) {
	          if (angular.isUndefined(BODY_SCROLLBAR_WIDTH)) {
	            var bodyElem = $document.find('body');
	            bodyElem.addClass('uib-position-body-scrollbar-measure');
	            BODY_SCROLLBAR_WIDTH = $window.innerWidth - bodyElem[0].clientWidth;
	            BODY_SCROLLBAR_WIDTH = isFinite(BODY_SCROLLBAR_WIDTH) ? BODY_SCROLLBAR_WIDTH : 0;
	            bodyElem.removeClass('uib-position-body-scrollbar-measure');
	          }
	          return BODY_SCROLLBAR_WIDTH;
	        }

	        if (angular.isUndefined(SCROLLBAR_WIDTH)) {
	          var scrollElem = angular.element('<div class="uib-position-scrollbar-measure"></div>');
	          $document.find('body').append(scrollElem);
	          SCROLLBAR_WIDTH = scrollElem[0].offsetWidth - scrollElem[0].clientWidth;
	          SCROLLBAR_WIDTH = isFinite(SCROLLBAR_WIDTH) ? SCROLLBAR_WIDTH : 0;
	          scrollElem.remove();
	        }

	        return SCROLLBAR_WIDTH;
	      },

	      /**
	       * Provides the padding required on an element to replace the scrollbar.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**scrollbarWidth**: the width of the scrollbar</li>
	       *     <li>**widthOverflow**: whether the the width is overflowing</li>
	       *     <li>**right**: the amount of right padding on the element needed to replace the scrollbar</li>
	       *     <li>**rightOriginal**: the amount of right padding currently on the element</li>
	       *     <li>**heightOverflow**: whether the the height is overflowing</li>
	       *     <li>**bottom**: the amount of bottom padding on the element needed to replace the scrollbar</li>
	       *     <li>**bottomOriginal**: the amount of bottom padding currently on the element</li>
	       *   </ul>
	       */
	      scrollbarPadding: function(elem) {
	        elem = this.getRawNode(elem);

	        var elemStyle = $window.getComputedStyle(elem);
	        var paddingRight = this.parseStyle(elemStyle.paddingRight);
	        var paddingBottom = this.parseStyle(elemStyle.paddingBottom);
	        var scrollParent = this.scrollParent(elem, false, true);
	        var scrollbarWidth = this.scrollbarWidth(BODY_REGEX.test(scrollParent.tagName));

	        return {
	          scrollbarWidth: scrollbarWidth,
	          widthOverflow: scrollParent.scrollWidth > scrollParent.clientWidth,
	          right: paddingRight + scrollbarWidth,
	          originalRight: paddingRight,
	          heightOverflow: scrollParent.scrollHeight > scrollParent.clientHeight,
	          bottom: paddingBottom + scrollbarWidth,
	          originalBottom: paddingBottom
	         };
	      },

	      /**
	       * Checks to see if the element is scrollable.
	       *
	       * @param {element} elem - The element to check.
	       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
	       *   default is false.
	       *
	       * @returns {boolean} Whether the element is scrollable.
	       */
	      isScrollable: function(elem, includeHidden) {
	        elem = this.getRawNode(elem);

	        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
	        var elemStyle = $window.getComputedStyle(elem);
	        return overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX);
	      },

	      /**
	       * Provides the closest scrollable ancestor.
	       * A port of the jQuery UI scrollParent method:
	       * https://github.com/jquery/jquery-ui/blob/master/ui/scroll-parent.js
	       *
	       * @param {element} elem - The element to find the scroll parent of.
	       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
	       *   default is false.
	       * @param {boolean=} [includeSelf=false] - Should the element being passed be
	       * included in the scrollable llokup.
	       *
	       * @returns {element} A HTML element.
	       */
	      scrollParent: function(elem, includeHidden, includeSelf) {
	        elem = this.getRawNode(elem);

	        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
	        var documentEl = $document[0].documentElement;
	        var elemStyle = $window.getComputedStyle(elem);
	        if (includeSelf && overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX)) {
	          return elem;
	        }
	        var excludeStatic = elemStyle.position === 'absolute';
	        var scrollParent = elem.parentElement || documentEl;

	        if (scrollParent === documentEl || elemStyle.position === 'fixed') {
	          return documentEl;
	        }

	        while (scrollParent.parentElement && scrollParent !== documentEl) {
	          var spStyle = $window.getComputedStyle(scrollParent);
	          if (excludeStatic && spStyle.position !== 'static') {
	            excludeStatic = false;
	          }

	          if (!excludeStatic && overflowRegex.test(spStyle.overflow + spStyle.overflowY + spStyle.overflowX)) {
	            break;
	          }
	          scrollParent = scrollParent.parentElement;
	        }

	        return scrollParent;
	      },

	      /**
	       * Provides read-only equivalent of jQuery's position function:
	       * http://api.jquery.com/position/ - distance to closest positioned
	       * ancestor.  Does not account for margins by default like jQuery position.
	       *
	       * @param {element} elem - The element to caclulate the position on.
	       * @param {boolean=} [includeMargins=false] - Should margins be accounted
	       * for, default is false.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**width**: the width of the element</li>
	       *     <li>**height**: the height of the element</li>
	       *     <li>**top**: distance to top edge of offset parent</li>
	       *     <li>**left**: distance to left edge of offset parent</li>
	       *   </ul>
	       */
	      position: function(elem, includeMagins) {
	        elem = this.getRawNode(elem);

	        var elemOffset = this.offset(elem);
	        if (includeMagins) {
	          var elemStyle = $window.getComputedStyle(elem);
	          elemOffset.top -= this.parseStyle(elemStyle.marginTop);
	          elemOffset.left -= this.parseStyle(elemStyle.marginLeft);
	        }
	        var parent = this.offsetParent(elem);
	        var parentOffset = {top: 0, left: 0};

	        if (parent !== $document[0].documentElement) {
	          parentOffset = this.offset(parent);
	          parentOffset.top += parent.clientTop - parent.scrollTop;
	          parentOffset.left += parent.clientLeft - parent.scrollLeft;
	        }

	        return {
	          width: Math.round(angular.isNumber(elemOffset.width) ? elemOffset.width : elem.offsetWidth),
	          height: Math.round(angular.isNumber(elemOffset.height) ? elemOffset.height : elem.offsetHeight),
	          top: Math.round(elemOffset.top - parentOffset.top),
	          left: Math.round(elemOffset.left - parentOffset.left)
	        };
	      },

	      /**
	       * Provides read-only equivalent of jQuery's offset function:
	       * http://api.jquery.com/offset/ - distance to viewport.  Does
	       * not account for borders, margins, or padding on the body
	       * element.
	       *
	       * @param {element} elem - The element to calculate the offset on.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**width**: the width of the element</li>
	       *     <li>**height**: the height of the element</li>
	       *     <li>**top**: distance to top edge of viewport</li>
	       *     <li>**right**: distance to bottom edge of viewport</li>
	       *   </ul>
	       */
	      offset: function(elem) {
	        elem = this.getRawNode(elem);

	        var elemBCR = elem.getBoundingClientRect();
	        return {
	          width: Math.round(angular.isNumber(elemBCR.width) ? elemBCR.width : elem.offsetWidth),
	          height: Math.round(angular.isNumber(elemBCR.height) ? elemBCR.height : elem.offsetHeight),
	          top: Math.round(elemBCR.top + ($window.pageYOffset || $document[0].documentElement.scrollTop)),
	          left: Math.round(elemBCR.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft))
	        };
	      },

	      /**
	       * Provides offset distance to the closest scrollable ancestor
	       * or viewport.  Accounts for border and scrollbar width.
	       *
	       * Right and bottom dimensions represent the distance to the
	       * respective edge of the viewport element.  If the element
	       * edge extends beyond the viewport, a negative value will be
	       * reported.
	       *
	       * @param {element} elem - The element to get the viewport offset for.
	       * @param {boolean=} [useDocument=false] - Should the viewport be the document element instead
	       * of the first scrollable element, default is false.
	       * @param {boolean=} [includePadding=true] - Should the padding on the offset parent element
	       * be accounted for, default is true.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**top**: distance to the top content edge of viewport element</li>
	       *     <li>**bottom**: distance to the bottom content edge of viewport element</li>
	       *     <li>**left**: distance to the left content edge of viewport element</li>
	       *     <li>**right**: distance to the right content edge of viewport element</li>
	       *   </ul>
	       */
	      viewportOffset: function(elem, useDocument, includePadding) {
	        elem = this.getRawNode(elem);
	        includePadding = includePadding !== false ? true : false;

	        var elemBCR = elem.getBoundingClientRect();
	        var offsetBCR = {top: 0, left: 0, bottom: 0, right: 0};

	        var offsetParent = useDocument ? $document[0].documentElement : this.scrollParent(elem);
	        var offsetParentBCR = offsetParent.getBoundingClientRect();

	        offsetBCR.top = offsetParentBCR.top + offsetParent.clientTop;
	        offsetBCR.left = offsetParentBCR.left + offsetParent.clientLeft;
	        if (offsetParent === $document[0].documentElement) {
	          offsetBCR.top += $window.pageYOffset;
	          offsetBCR.left += $window.pageXOffset;
	        }
	        offsetBCR.bottom = offsetBCR.top + offsetParent.clientHeight;
	        offsetBCR.right = offsetBCR.left + offsetParent.clientWidth;

	        if (includePadding) {
	          var offsetParentStyle = $window.getComputedStyle(offsetParent);
	          offsetBCR.top += this.parseStyle(offsetParentStyle.paddingTop);
	          offsetBCR.bottom -= this.parseStyle(offsetParentStyle.paddingBottom);
	          offsetBCR.left += this.parseStyle(offsetParentStyle.paddingLeft);
	          offsetBCR.right -= this.parseStyle(offsetParentStyle.paddingRight);
	        }

	        return {
	          top: Math.round(elemBCR.top - offsetBCR.top),
	          bottom: Math.round(offsetBCR.bottom - elemBCR.bottom),
	          left: Math.round(elemBCR.left - offsetBCR.left),
	          right: Math.round(offsetBCR.right - elemBCR.right)
	        };
	      },

	      /**
	       * Provides an array of placement values parsed from a placement string.
	       * Along with the 'auto' indicator, supported placement strings are:
	       *   <ul>
	       *     <li>top: element on top, horizontally centered on host element.</li>
	       *     <li>top-left: element on top, left edge aligned with host element left edge.</li>
	       *     <li>top-right: element on top, lerightft edge aligned with host element right edge.</li>
	       *     <li>bottom: element on bottom, horizontally centered on host element.</li>
	       *     <li>bottom-left: element on bottom, left edge aligned with host element left edge.</li>
	       *     <li>bottom-right: element on bottom, right edge aligned with host element right edge.</li>
	       *     <li>left: element on left, vertically centered on host element.</li>
	       *     <li>left-top: element on left, top edge aligned with host element top edge.</li>
	       *     <li>left-bottom: element on left, bottom edge aligned with host element bottom edge.</li>
	       *     <li>right: element on right, vertically centered on host element.</li>
	       *     <li>right-top: element on right, top edge aligned with host element top edge.</li>
	       *     <li>right-bottom: element on right, bottom edge aligned with host element bottom edge.</li>
	       *   </ul>
	       * A placement string with an 'auto' indicator is expected to be
	       * space separated from the placement, i.e: 'auto bottom-left'  If
	       * the primary and secondary placement values do not match 'top,
	       * bottom, left, right' then 'top' will be the primary placement and
	       * 'center' will be the secondary placement.  If 'auto' is passed, true
	       * will be returned as the 3rd value of the array.
	       *
	       * @param {string} placement - The placement string to parse.
	       *
	       * @returns {array} An array with the following values
	       * <ul>
	       *   <li>**[0]**: The primary placement.</li>
	       *   <li>**[1]**: The secondary placement.</li>
	       *   <li>**[2]**: If auto is passed: true, else undefined.</li>
	       * </ul>
	       */
	      parsePlacement: function(placement) {
	        var autoPlace = PLACEMENT_REGEX.auto.test(placement);
	        if (autoPlace) {
	          placement = placement.replace(PLACEMENT_REGEX.auto, '');
	        }

	        placement = placement.split('-');

	        placement[0] = placement[0] || 'top';
	        if (!PLACEMENT_REGEX.primary.test(placement[0])) {
	          placement[0] = 'top';
	        }

	        placement[1] = placement[1] || 'center';
	        if (!PLACEMENT_REGEX.secondary.test(placement[1])) {
	          placement[1] = 'center';
	        }

	        if (autoPlace) {
	          placement[2] = true;
	        } else {
	          placement[2] = false;
	        }

	        return placement;
	      },

	      /**
	       * Provides coordinates for an element to be positioned relative to
	       * another element.  Passing 'auto' as part of the placement parameter
	       * will enable smart placement - where the element fits. i.e:
	       * 'auto left-top' will check to see if there is enough space to the left
	       * of the hostElem to fit the targetElem, if not place right (same for secondary
	       * top placement).  Available space is calculated using the viewportOffset
	       * function.
	       *
	       * @param {element} hostElem - The element to position against.
	       * @param {element} targetElem - The element to position.
	       * @param {string=} [placement=top] - The placement for the targetElem,
	       *   default is 'top'. 'center' is assumed as secondary placement for
	       *   'top', 'left', 'right', and 'bottom' placements.  Available placements are:
	       *   <ul>
	       *     <li>top</li>
	       *     <li>top-right</li>
	       *     <li>top-left</li>
	       *     <li>bottom</li>
	       *     <li>bottom-left</li>
	       *     <li>bottom-right</li>
	       *     <li>left</li>
	       *     <li>left-top</li>
	       *     <li>left-bottom</li>
	       *     <li>right</li>
	       *     <li>right-top</li>
	       *     <li>right-bottom</li>
	       *   </ul>
	       * @param {boolean=} [appendToBody=false] - Should the top and left values returned
	       *   be calculated from the body element, default is false.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**top**: Value for targetElem top.</li>
	       *     <li>**left**: Value for targetElem left.</li>
	       *     <li>**placement**: The resolved placement.</li>
	       *   </ul>
	       */
	      positionElements: function(hostElem, targetElem, placement, appendToBody) {
	        hostElem = this.getRawNode(hostElem);
	        targetElem = this.getRawNode(targetElem);

	        // need to read from prop to support tests.
	        var targetWidth = angular.isDefined(targetElem.offsetWidth) ? targetElem.offsetWidth : targetElem.prop('offsetWidth');
	        var targetHeight = angular.isDefined(targetElem.offsetHeight) ? targetElem.offsetHeight : targetElem.prop('offsetHeight');

	        placement = this.parsePlacement(placement);

	        var hostElemPos = appendToBody ? this.offset(hostElem) : this.position(hostElem);
	        var targetElemPos = {top: 0, left: 0, placement: ''};

	        if (placement[2]) {
	          var viewportOffset = this.viewportOffset(hostElem, appendToBody);

	          var targetElemStyle = $window.getComputedStyle(targetElem);
	          var adjustedSize = {
	            width: targetWidth + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginLeft) + this.parseStyle(targetElemStyle.marginRight))),
	            height: targetHeight + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginTop) + this.parseStyle(targetElemStyle.marginBottom)))
	          };

	          placement[0] = placement[0] === 'top' && adjustedSize.height > viewportOffset.top && adjustedSize.height <= viewportOffset.bottom ? 'bottom' :
	                         placement[0] === 'bottom' && adjustedSize.height > viewportOffset.bottom && adjustedSize.height <= viewportOffset.top ? 'top' :
	                         placement[0] === 'left' && adjustedSize.width > viewportOffset.left && adjustedSize.width <= viewportOffset.right ? 'right' :
	                         placement[0] === 'right' && adjustedSize.width > viewportOffset.right && adjustedSize.width <= viewportOffset.left ? 'left' :
	                         placement[0];

	          placement[1] = placement[1] === 'top' && adjustedSize.height - hostElemPos.height > viewportOffset.bottom && adjustedSize.height - hostElemPos.height <= viewportOffset.top ? 'bottom' :
	                         placement[1] === 'bottom' && adjustedSize.height - hostElemPos.height > viewportOffset.top && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom ? 'top' :
	                         placement[1] === 'left' && adjustedSize.width - hostElemPos.width > viewportOffset.right && adjustedSize.width - hostElemPos.width <= viewportOffset.left ? 'right' :
	                         placement[1] === 'right' && adjustedSize.width - hostElemPos.width > viewportOffset.left && adjustedSize.width - hostElemPos.width <= viewportOffset.right ? 'left' :
	                         placement[1];

	          if (placement[1] === 'center') {
	            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
	              var xOverflow = hostElemPos.width / 2 - targetWidth / 2;
	              if (viewportOffset.left + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.right) {
	                placement[1] = 'left';
	              } else if (viewportOffset.right + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.left) {
	                placement[1] = 'right';
	              }
	            } else {
	              var yOverflow = hostElemPos.height / 2 - adjustedSize.height / 2;
	              if (viewportOffset.top + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom) {
	                placement[1] = 'top';
	              } else if (viewportOffset.bottom + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.top) {
	                placement[1] = 'bottom';
	              }
	            }
	          }
	        }

	        switch (placement[0]) {
	          case 'top':
	            targetElemPos.top = hostElemPos.top - targetHeight;
	            break;
	          case 'bottom':
	            targetElemPos.top = hostElemPos.top + hostElemPos.height;
	            break;
	          case 'left':
	            targetElemPos.left = hostElemPos.left - targetWidth;
	            break;
	          case 'right':
	            targetElemPos.left = hostElemPos.left + hostElemPos.width;
	            break;
	        }

	        switch (placement[1]) {
	          case 'top':
	            targetElemPos.top = hostElemPos.top;
	            break;
	          case 'bottom':
	            targetElemPos.top = hostElemPos.top + hostElemPos.height - targetHeight;
	            break;
	          case 'left':
	            targetElemPos.left = hostElemPos.left;
	            break;
	          case 'right':
	            targetElemPos.left = hostElemPos.left + hostElemPos.width - targetWidth;
	            break;
	          case 'center':
	            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
	              targetElemPos.left = hostElemPos.left + hostElemPos.width / 2 - targetWidth / 2;
	            } else {
	              targetElemPos.top = hostElemPos.top + hostElemPos.height / 2 - targetHeight / 2;
	            }
	            break;
	        }

	        targetElemPos.top = Math.round(targetElemPos.top);
	        targetElemPos.left = Math.round(targetElemPos.left);
	        targetElemPos.placement = placement[1] === 'center' ? placement[0] : placement[0] + '-' + placement[1];

	        return targetElemPos;
	      },

	      /**
	       * Provides a way to adjust the top positioning after first
	       * render to correctly align element to top after content
	       * rendering causes resized element height
	       *
	       * @param {array} placementClasses - The array of strings of classes
	       * element should have.
	       * @param {object} containerPosition - The object with container
	       * position information
	       * @param {number} initialHeight - The initial height for the elem.
	       * @param {number} currentHeight - The current height for the elem.
	       */
	      adjustTop: function(placementClasses, containerPosition, initialHeight, currentHeight) {
	        if (placementClasses.indexOf('top') !== -1 && initialHeight !== currentHeight) {
	          return {
	            top: containerPosition.top - currentHeight + 'px'
	          };
	        }
	      },

	      /**
	       * Provides a way for positioning tooltip & dropdown
	       * arrows when using placement options beyond the standard
	       * left, right, top, or bottom.
	       *
	       * @param {element} elem - The tooltip/dropdown element.
	       * @param {string} placement - The placement for the elem.
	       */
	      positionArrow: function(elem, placement) {
	        elem = this.getRawNode(elem);

	        var innerElem = elem.querySelector('.tooltip-inner, .popover-inner');
	        if (!innerElem) {
	          return;
	        }

	        var isTooltip = angular.element(innerElem).hasClass('tooltip-inner');

	        var arrowElem = isTooltip ? elem.querySelector('.tooltip-arrow') : elem.querySelector('.arrow');
	        if (!arrowElem) {
	          return;
	        }

	        var arrowCss = {
	          top: '',
	          bottom: '',
	          left: '',
	          right: ''
	        };

	        placement = this.parsePlacement(placement);
	        if (placement[1] === 'center') {
	          // no adjustment necessary - just reset styles
	          angular.element(arrowElem).css(arrowCss);
	          return;
	        }

	        var borderProp = 'border-' + placement[0] + '-width';
	        var borderWidth = $window.getComputedStyle(arrowElem)[borderProp];

	        var borderRadiusProp = 'border-';
	        if (PLACEMENT_REGEX.vertical.test(placement[0])) {
	          borderRadiusProp += placement[0] + '-' + placement[1];
	        } else {
	          borderRadiusProp += placement[1] + '-' + placement[0];
	        }
	        borderRadiusProp += '-radius';
	        var borderRadius = $window.getComputedStyle(isTooltip ? innerElem : elem)[borderRadiusProp];

	        switch (placement[0]) {
	          case 'top':
	            arrowCss.bottom = isTooltip ? '0' : '-' + borderWidth;
	            break;
	          case 'bottom':
	            arrowCss.top = isTooltip ? '0' : '-' + borderWidth;
	            break;
	          case 'left':
	            arrowCss.right = isTooltip ? '0' : '-' + borderWidth;
	            break;
	          case 'right':
	            arrowCss.left = isTooltip ? '0' : '-' + borderWidth;
	            break;
	        }

	        arrowCss[placement[1]] = borderRadius;

	        angular.element(arrowElem).css(arrowCss);
	      }
	    };
	  }]);

	angular.module('ui.bootstrap.datepickerPopup', ['ui.bootstrap.datepicker', 'ui.bootstrap.position'])

	.value('$datepickerPopupLiteralWarning', true)

	.constant('uibDatepickerPopupConfig', {
	  altInputFormats: [],
	  appendToBody: false,
	  clearText: 'Clear',
	  closeOnDateSelection: true,
	  closeText: 'Done',
	  currentText: 'Today',
	  datepickerPopup: 'yyyy-MM-dd',
	  datepickerPopupTemplateUrl: 'uib/template/datepickerPopup/popup.html',
	  datepickerTemplateUrl: 'uib/template/datepicker/datepicker.html',
	  html5Types: {
	    date: 'yyyy-MM-dd',
	    'datetime-local': 'yyyy-MM-ddTHH:mm:ss.sss',
	    'month': 'yyyy-MM'
	  },
	  onOpenFocus: true,
	  showButtonBar: true,
	  placement: 'auto bottom-left'
	})

	.controller('UibDatepickerPopupController', ['$scope', '$element', '$attrs', '$compile', '$log', '$parse', '$window', '$document', '$rootScope', '$uibPosition', 'dateFilter', 'uibDateParser', 'uibDatepickerPopupConfig', '$timeout', 'uibDatepickerConfig', '$datepickerPopupLiteralWarning',
	function($scope, $element, $attrs, $compile, $log, $parse, $window, $document, $rootScope, $position, dateFilter, dateParser, datepickerPopupConfig, $timeout, datepickerConfig, $datepickerPopupLiteralWarning) {
	  var cache = {},
	    isHtml5DateInput = false;
	  var dateFormat, closeOnDateSelection, appendToBody, onOpenFocus,
	    datepickerPopupTemplateUrl, datepickerTemplateUrl, popupEl, datepickerEl, scrollParentEl,
	    ngModel, ngModelOptions, $popup, altInputFormats, watchListeners = [];

	  this.init = function(_ngModel_) {
	    ngModel = _ngModel_;
	    ngModelOptions = angular.isObject(_ngModel_.$options) ?
	      _ngModel_.$options :
	      {
	        timezone: null
	      };
	    closeOnDateSelection = angular.isDefined($attrs.closeOnDateSelection) ?
	      $scope.$parent.$eval($attrs.closeOnDateSelection) :
	      datepickerPopupConfig.closeOnDateSelection;
	    appendToBody = angular.isDefined($attrs.datepickerAppendToBody) ?
	      $scope.$parent.$eval($attrs.datepickerAppendToBody) :
	      datepickerPopupConfig.appendToBody;
	    onOpenFocus = angular.isDefined($attrs.onOpenFocus) ?
	      $scope.$parent.$eval($attrs.onOpenFocus) : datepickerPopupConfig.onOpenFocus;
	    datepickerPopupTemplateUrl = angular.isDefined($attrs.datepickerPopupTemplateUrl) ?
	      $attrs.datepickerPopupTemplateUrl :
	      datepickerPopupConfig.datepickerPopupTemplateUrl;
	    datepickerTemplateUrl = angular.isDefined($attrs.datepickerTemplateUrl) ?
	      $attrs.datepickerTemplateUrl : datepickerPopupConfig.datepickerTemplateUrl;
	    altInputFormats = angular.isDefined($attrs.altInputFormats) ?
	      $scope.$parent.$eval($attrs.altInputFormats) :
	      datepickerPopupConfig.altInputFormats;

	    $scope.showButtonBar = angular.isDefined($attrs.showButtonBar) ?
	      $scope.$parent.$eval($attrs.showButtonBar) :
	      datepickerPopupConfig.showButtonBar;

	    if (datepickerPopupConfig.html5Types[$attrs.type]) {
	      dateFormat = datepickerPopupConfig.html5Types[$attrs.type];
	      isHtml5DateInput = true;
	    } else {
	      dateFormat = $attrs.uibDatepickerPopup || datepickerPopupConfig.datepickerPopup;
	      $attrs.$observe('uibDatepickerPopup', function(value, oldValue) {
	        var newDateFormat = value || datepickerPopupConfig.datepickerPopup;
	        // Invalidate the $modelValue to ensure that formatters re-run
	        // FIXME: Refactor when PR is merged: https://github.com/angular/angular.js/pull/10764
	        if (newDateFormat !== dateFormat) {
	          dateFormat = newDateFormat;
	          ngModel.$modelValue = null;

	          if (!dateFormat) {
	            throw new Error('uibDatepickerPopup must have a date format specified.');
	          }
	        }
	      });
	    }

	    if (!dateFormat) {
	      throw new Error('uibDatepickerPopup must have a date format specified.');
	    }

	    if (isHtml5DateInput && $attrs.uibDatepickerPopup) {
	      throw new Error('HTML5 date input types do not support custom formats.');
	    }

	    // popup element used to display calendar
	    popupEl = angular.element('<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>');

	    popupEl.attr({
	      'ng-model': 'date',
	      'ng-change': 'dateSelection(date)',
	      'template-url': datepickerPopupTemplateUrl
	    });

	    // datepicker element
	    datepickerEl = angular.element(popupEl.children()[0]);
	    datepickerEl.attr('template-url', datepickerTemplateUrl);

	    if (!$scope.datepickerOptions) {
	      $scope.datepickerOptions = {};
	    }

	    if (isHtml5DateInput) {
	      if ($attrs.type === 'month') {
	        $scope.datepickerOptions.datepickerMode = 'month';
	        $scope.datepickerOptions.minMode = 'month';
	      }
	    }

	    datepickerEl.attr('datepicker-options', 'datepickerOptions');

	    if (!isHtml5DateInput) {
	      // Internal API to maintain the correct ng-invalid-[key] class
	      ngModel.$$parserName = 'date';
	      ngModel.$validators.date = validator;
	      ngModel.$parsers.unshift(parseDate);
	      ngModel.$formatters.push(function(value) {
	        if (ngModel.$isEmpty(value)) {
	          $scope.date = value;
	          return value;
	        }

	        if (angular.isNumber(value)) {
	          value = new Date(value);
	        }

	        $scope.date = dateParser.fromTimezone(value, ngModelOptions.timezone);

	        return dateParser.filter($scope.date, dateFormat);
	      });
	    } else {
	      ngModel.$formatters.push(function(value) {
	        $scope.date = dateParser.fromTimezone(value, ngModelOptions.timezone);
	        return value;
	      });
	    }

	    // Detect changes in the view from the text box
	    ngModel.$viewChangeListeners.push(function() {
	      $scope.date = parseDateString(ngModel.$viewValue);
	    });

	    $element.on('keydown', inputKeydownBind);

	    $popup = $compile(popupEl)($scope);
	    // Prevent jQuery cache memory leak (template is now redundant after linking)
	    popupEl.remove();

	    if (appendToBody) {
	      $document.find('body').append($popup);
	    } else {
	      $element.after($popup);
	    }

	    $scope.$on('$destroy', function() {
	      if ($scope.isOpen === true) {
	        if (!$rootScope.$$phase) {
	          $scope.$apply(function() {
	            $scope.isOpen = false;
	          });
	        }
	      }

	      $popup.remove();
	      $element.off('keydown', inputKeydownBind);
	      $document.off('click', documentClickBind);
	      if (scrollParentEl) {
	        scrollParentEl.off('scroll', positionPopup);
	      }
	      angular.element($window).off('resize', positionPopup);

	      //Clear all watch listeners on destroy
	      while (watchListeners.length) {
	        watchListeners.shift()();
	      }
	    });
	  };

	  $scope.getText = function(key) {
	    return $scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];
	  };

	  $scope.isDisabled = function(date) {
	    if (date === 'today') {
	      date = dateParser.fromTimezone(new Date(), ngModelOptions.timezone);
	    }

	    var dates = {};
	    angular.forEach(['minDate', 'maxDate'], function(key) {
	      if (!$scope.datepickerOptions[key]) {
	        dates[key] = null;
	      } else if (angular.isDate($scope.datepickerOptions[key])) {
	        dates[key] = new Date($scope.datepickerOptions[key]);
	      } else {
	        if ($datepickerPopupLiteralWarning) {
	          $log.warn('Literal date support has been deprecated, please switch to date object usage');
	        }

	        dates[key] = new Date(dateFilter($scope.datepickerOptions[key], 'medium'));
	      }
	    });

	    return $scope.datepickerOptions &&
	      dates.minDate && $scope.compare(date, dates.minDate) < 0 ||
	      dates.maxDate && $scope.compare(date, dates.maxDate) > 0;
	  };

	  $scope.compare = function(date1, date2) {
	    return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
	  };

	  // Inner change
	  $scope.dateSelection = function(dt) {
	    $scope.date = dt;
	    var date = $scope.date ? dateParser.filter($scope.date, dateFormat) : null; // Setting to NULL is necessary for form validators to function
	    $element.val(date);
	    ngModel.$setViewValue(date);

	    if (closeOnDateSelection) {
	      $scope.isOpen = false;
	      $element[0].focus();
	    }
	  };

	  $scope.keydown = function(evt) {
	    if (evt.which === 27) {
	      evt.stopPropagation();
	      $scope.isOpen = false;
	      $element[0].focus();
	    }
	  };

	  $scope.select = function(date, evt) {
	    evt.stopPropagation();

	    if (date === 'today') {
	      var today = new Date();
	      if (angular.isDate($scope.date)) {
	        date = new Date($scope.date);
	        date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
	      } else {
	        date = dateParser.fromTimezone(today, ngModelOptions.timezone);
	        date.setHours(0, 0, 0, 0);
	      }
	    }
	    $scope.dateSelection(date);
	  };

	  $scope.close = function(evt) {
	    evt.stopPropagation();

	    $scope.isOpen = false;
	    $element[0].focus();
	  };

	  $scope.disabled = angular.isDefined($attrs.disabled) || false;
	  if ($attrs.ngDisabled) {
	    watchListeners.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(disabled) {
	      $scope.disabled = disabled;
	    }));
	  }

	  $scope.$watch('isOpen', function(value) {
	    if (value) {
	      if (!$scope.disabled) {
	        $timeout(function() {
	          positionPopup();

	          if (onOpenFocus) {
	            $scope.$broadcast('uib:datepicker.focus');
	          }

	          $document.on('click', documentClickBind);

	          var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
	          if (appendToBody || $position.parsePlacement(placement)[2]) {
	            scrollParentEl = scrollParentEl || angular.element($position.scrollParent($element));
	            if (scrollParentEl) {
	              scrollParentEl.on('scroll', positionPopup);
	            }
	          } else {
	            scrollParentEl = null;
	          }

	          angular.element($window).on('resize', positionPopup);
	        }, 0, false);
	      } else {
	        $scope.isOpen = false;
	      }
	    } else {
	      $document.off('click', documentClickBind);
	      if (scrollParentEl) {
	        scrollParentEl.off('scroll', positionPopup);
	      }
	      angular.element($window).off('resize', positionPopup);
	    }
	  });

	  function cameltoDash(string) {
	    return string.replace(/([A-Z])/g, function($1) { return '-' + $1.toLowerCase(); });
	  }

	  function parseDateString(viewValue) {
	    var date = dateParser.parse(viewValue, dateFormat, $scope.date);
	    if (isNaN(date)) {
	      for (var i = 0; i < altInputFormats.length; i++) {
	        date = dateParser.parse(viewValue, altInputFormats[i], $scope.date);
	        if (!isNaN(date)) {
	          return date;
	        }
	      }
	    }
	    return date;
	  }

	  function parseDate(viewValue) {
	    if (angular.isNumber(viewValue)) {
	      // presumably timestamp to date object
	      viewValue = new Date(viewValue);
	    }

	    if (!viewValue) {
	      return null;
	    }

	    if (angular.isDate(viewValue) && !isNaN(viewValue)) {
	      return viewValue;
	    }

	    if (angular.isString(viewValue)) {
	      var date = parseDateString(viewValue);
	      if (!isNaN(date)) {
	        return dateParser.toTimezone(date, ngModelOptions.timezone);
	      }
	    }

	    return ngModel.$options && ngModel.$options.allowInvalid ? viewValue : undefined;
	  }

	  function validator(modelValue, viewValue) {
	    var value = modelValue || viewValue;

	    if (!$attrs.ngRequired && !value) {
	      return true;
	    }

	    if (angular.isNumber(value)) {
	      value = new Date(value);
	    }

	    if (!value) {
	      return true;
	    }

	    if (angular.isDate(value) && !isNaN(value)) {
	      return true;
	    }

	    if (angular.isString(value)) {
	      return !isNaN(parseDateString(value));
	    }

	    return false;
	  }

	  function documentClickBind(event) {
	    if (!$scope.isOpen && $scope.disabled) {
	      return;
	    }

	    var popup = $popup[0];
	    var dpContainsTarget = $element[0].contains(event.target);
	    // The popup node may not be an element node
	    // In some browsers (IE) only element nodes have the 'contains' function
	    var popupContainsTarget = popup.contains !== undefined && popup.contains(event.target);
	    if ($scope.isOpen && !(dpContainsTarget || popupContainsTarget)) {
	      $scope.$apply(function() {
	        $scope.isOpen = false;
	      });
	    }
	  }

	  function inputKeydownBind(evt) {
	    if (evt.which === 27 && $scope.isOpen) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      $scope.$apply(function() {
	        $scope.isOpen = false;
	      });
	      $element[0].focus();
	    } else if (evt.which === 40 && !$scope.isOpen) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      $scope.$apply(function() {
	        $scope.isOpen = true;
	      });
	    }
	  }

	  function positionPopup() {
	    if ($scope.isOpen) {
	      var dpElement = angular.element($popup[0].querySelector('.uib-datepicker-popup'));
	      var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
	      var position = $position.positionElements($element, dpElement, placement, appendToBody);
	      dpElement.css({top: position.top + 'px', left: position.left + 'px'});
	      if (dpElement.hasClass('uib-position-measure')) {
	        dpElement.removeClass('uib-position-measure');
	      }
	    }
	  }

	  $scope.$on('uib:datepicker.mode', function() {
	    $timeout(positionPopup, 0, false);
	  });
	}])

	.directive('uibDatepickerPopup', function() {
	  return {
	    require: ['ngModel', 'uibDatepickerPopup'],
	    controller: 'UibDatepickerPopupController',
	    scope: {
	      datepickerOptions: '=?',
	      isOpen: '=?',
	      currentText: '@',
	      clearText: '@',
	      closeText: '@'
	    },
	    link: function(scope, element, attrs, ctrls) {
	      var ngModel = ctrls[0],
	        ctrl = ctrls[1];

	      ctrl.init(ngModel);
	    }
	  };
	})

	.directive('uibDatepickerPopupWrap', function() {
	  return {
	    restrict: 'A',
	    transclude: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepickerPopup/popup.html';
	    }
	  };
	});

	angular.module('ui.bootstrap.debounce', [])
	/**
	 * A helper, internal service that debounces a function
	 */
	  .factory('$$debounce', ['$timeout', function($timeout) {
	    return function(callback, debounceTime) {
	      var timeoutPromise;

	      return function() {
	        var self = this;
	        var args = Array.prototype.slice.call(arguments);
	        if (timeoutPromise) {
	          $timeout.cancel(timeoutPromise);
	        }

	        timeoutPromise = $timeout(function() {
	          callback.apply(self, args);
	        }, debounceTime);
	      };
	    };
	  }]);

	angular.module('ui.bootstrap.multiMap', [])
	/**
	 * A helper, internal data structure that stores all references attached to key
	 */
	  .factory('$$multiMap', function() {
	    return {
	      createNew: function() {
	        var map = {};

	        return {
	          entries: function() {
	            return Object.keys(map).map(function(key) {
	              return {
	                key: key,
	                value: map[key]
	              };
	            });
	          },
	          get: function(key) {
	            return map[key];
	          },
	          hasKey: function(key) {
	            return !!map[key];
	          },
	          keys: function() {
	            return Object.keys(map);
	          },
	          put: function(key, value) {
	            if (!map[key]) {
	              map[key] = [];
	            }

	            map[key].push(value);
	          },
	          remove: function(key, value) {
	            var values = map[key];

	            if (!values) {
	              return;
	            }

	            var idx = values.indexOf(value);

	            if (idx !== -1) {
	              values.splice(idx, 1);
	            }

	            if (!values.length) {
	              delete map[key];
	            }
	          }
	        };
	      }
	    };
	  });

	angular.module('ui.bootstrap.dropdown', ['ui.bootstrap.multiMap', 'ui.bootstrap.position'])

	.constant('uibDropdownConfig', {
	  appendToOpenClass: 'uib-dropdown-open',
	  openClass: 'open'
	})

	.service('uibDropdownService', ['$document', '$rootScope', '$$multiMap', function($document, $rootScope, $$multiMap) {
	  var openScope = null;
	  var openedContainers = $$multiMap.createNew();

	  this.isOnlyOpen = function(dropdownScope, appendTo) {
	    var openedDropdowns = openedContainers.get(appendTo);
	    if (openedDropdowns) {
	      var openDropdown = openedDropdowns.reduce(function(toClose, dropdown) {
	        if (dropdown.scope === dropdownScope) {
	          return dropdown;
	        }

	        return toClose;
	      }, {});
	      if (openDropdown) {
	        return openedDropdowns.length === 1;
	      }
	    }

	    return false;
	  };

	  this.open = function(dropdownScope, element, appendTo) {
	    if (!openScope) {
	      $document.on('click', closeDropdown);
	    }

	    if (openScope && openScope !== dropdownScope) {
	      openScope.isOpen = false;
	    }

	    openScope = dropdownScope;

	    if (!appendTo) {
	      return;
	    }

	    var openedDropdowns = openedContainers.get(appendTo);
	    if (openedDropdowns) {
	      var openedScopes = openedDropdowns.map(function(dropdown) {
	        return dropdown.scope;
	      });
	      if (openedScopes.indexOf(dropdownScope) === -1) {
	        openedContainers.put(appendTo, {
	          scope: dropdownScope
	        });
	      }
	    } else {
	      openedContainers.put(appendTo, {
	        scope: dropdownScope
	      });
	    }
	  };

	  this.close = function(dropdownScope, element, appendTo) {
	    if (openScope === dropdownScope) {
	      $document.off('click', closeDropdown);
	      $document.off('keydown', this.keybindFilter);
	      openScope = null;
	    }

	    if (!appendTo) {
	      return;
	    }

	    var openedDropdowns = openedContainers.get(appendTo);
	    if (openedDropdowns) {
	      var dropdownToClose = openedDropdowns.reduce(function(toClose, dropdown) {
	        if (dropdown.scope === dropdownScope) {
	          return dropdown;
	        }

	        return toClose;
	      }, {});
	      if (dropdownToClose) {
	        openedContainers.remove(appendTo, dropdownToClose);
	      }
	    }
	  };

	  var closeDropdown = function(evt) {
	    // This method may still be called during the same mouse event that
	    // unbound this event handler. So check openScope before proceeding.
	    if (!openScope) { return; }

	    if (evt && openScope.getAutoClose() === 'disabled') { return; }

	    if (evt && evt.which === 3) { return; }

	    var toggleElement = openScope.getToggleElement();
	    if (evt && toggleElement && toggleElement[0].contains(evt.target)) {
	      return;
	    }

	    var dropdownElement = openScope.getDropdownElement();
	    if (evt && openScope.getAutoClose() === 'outsideClick' &&
	      dropdownElement && dropdownElement[0].contains(evt.target)) {
	      return;
	    }

	    openScope.focusToggleElement();
	    openScope.isOpen = false;

	    if (!$rootScope.$$phase) {
	      openScope.$apply();
	    }
	  };

	  this.keybindFilter = function(evt) {
	    if (!openScope) {
	      // see this.close as ESC could have been pressed which kills the scope so we can not proceed
	      return;
	    }

	    var dropdownElement = openScope.getDropdownElement();
	    var toggleElement = openScope.getToggleElement();
	    var dropdownElementTargeted = dropdownElement && dropdownElement[0].contains(evt.target);
	    var toggleElementTargeted = toggleElement && toggleElement[0].contains(evt.target);
	    if (evt.which === 27) {
	      evt.stopPropagation();
	      openScope.focusToggleElement();
	      closeDropdown();
	    } else if (openScope.isKeynavEnabled() && [38, 40].indexOf(evt.which) !== -1 && openScope.isOpen && (dropdownElementTargeted || toggleElementTargeted)) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      openScope.focusDropdownEntry(evt.which);
	    }
	  };
	}])

	.controller('UibDropdownController', ['$scope', '$element', '$attrs', '$parse', 'uibDropdownConfig', 'uibDropdownService', '$animate', '$uibPosition', '$document', '$compile', '$templateRequest', function($scope, $element, $attrs, $parse, dropdownConfig, uibDropdownService, $animate, $position, $document, $compile, $templateRequest) {
	  var self = this,
	    scope = $scope.$new(), // create a child scope so we are not polluting original one
	    templateScope,
	    appendToOpenClass = dropdownConfig.appendToOpenClass,
	    openClass = dropdownConfig.openClass,
	    getIsOpen,
	    setIsOpen = angular.noop,
	    toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop,
	    appendToBody = false,
	    appendTo = null,
	    keynavEnabled = false,
	    selectedOption = null,
	    body = $document.find('body');

	  $element.addClass('dropdown');

	  this.init = function() {
	    if ($attrs.isOpen) {
	      getIsOpen = $parse($attrs.isOpen);
	      setIsOpen = getIsOpen.assign;

	      $scope.$watch(getIsOpen, function(value) {
	        scope.isOpen = !!value;
	      });
	    }

	    if (angular.isDefined($attrs.dropdownAppendTo)) {
	      var appendToEl = $parse($attrs.dropdownAppendTo)(scope);
	      if (appendToEl) {
	        appendTo = angular.element(appendToEl);
	      }
	    }

	    appendToBody = angular.isDefined($attrs.dropdownAppendToBody);
	    keynavEnabled = angular.isDefined($attrs.keyboardNav);

	    if (appendToBody && !appendTo) {
	      appendTo = body;
	    }

	    if (appendTo && self.dropdownMenu) {
	      appendTo.append(self.dropdownMenu);
	      $element.on('$destroy', function handleDestroyEvent() {
	        self.dropdownMenu.remove();
	      });
	    }
	  };

	  this.toggle = function(open) {
	    scope.isOpen = arguments.length ? !!open : !scope.isOpen;
	    if (angular.isFunction(setIsOpen)) {
	      setIsOpen(scope, scope.isOpen);
	    }

	    return scope.isOpen;
	  };

	  // Allow other directives to watch status
	  this.isOpen = function() {
	    return scope.isOpen;
	  };

	  scope.getToggleElement = function() {
	    return self.toggleElement;
	  };

	  scope.getAutoClose = function() {
	    return $attrs.autoClose || 'always'; //or 'outsideClick' or 'disabled'
	  };

	  scope.getElement = function() {
	    return $element;
	  };

	  scope.isKeynavEnabled = function() {
	    return keynavEnabled;
	  };

	  scope.focusDropdownEntry = function(keyCode) {
	    var elems = self.dropdownMenu ? //If append to body is used.
	      angular.element(self.dropdownMenu).find('a') :
	      $element.find('ul').eq(0).find('a');

	    switch (keyCode) {
	      case 40: {
	        if (!angular.isNumber(self.selectedOption)) {
	          self.selectedOption = 0;
	        } else {
	          self.selectedOption = self.selectedOption === elems.length - 1 ?
	            self.selectedOption :
	            self.selectedOption + 1;
	        }
	        break;
	      }
	      case 38: {
	        if (!angular.isNumber(self.selectedOption)) {
	          self.selectedOption = elems.length - 1;
	        } else {
	          self.selectedOption = self.selectedOption === 0 ?
	            0 : self.selectedOption - 1;
	        }
	        break;
	      }
	    }
	    elems[self.selectedOption].focus();
	  };

	  scope.getDropdownElement = function() {
	    return self.dropdownMenu;
	  };

	  scope.focusToggleElement = function() {
	    if (self.toggleElement) {
	      self.toggleElement[0].focus();
	    }
	  };

	  scope.$watch('isOpen', function(isOpen, wasOpen) {
	    if (appendTo && self.dropdownMenu) {
	      var pos = $position.positionElements($element, self.dropdownMenu, 'bottom-left', true),
	        css,
	        rightalign,
	        scrollbarPadding,
	        scrollbarWidth = 0;

	      css = {
	        top: pos.top + 'px',
	        display: isOpen ? 'block' : 'none'
	      };

	      rightalign = self.dropdownMenu.hasClass('dropdown-menu-right');
	      if (!rightalign) {
	        css.left = pos.left + 'px';
	        css.right = 'auto';
	      } else {
	        css.left = 'auto';
	        scrollbarPadding = $position.scrollbarPadding(appendTo);

	        if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
	          scrollbarWidth = scrollbarPadding.scrollbarWidth;
	        }

	        css.right = window.innerWidth - scrollbarWidth -
	          (pos.left + $element.prop('offsetWidth')) + 'px';
	      }

	      // Need to adjust our positioning to be relative to the appendTo container
	      // if it's not the body element
	      if (!appendToBody) {
	        var appendOffset = $position.offset(appendTo);

	        css.top = pos.top - appendOffset.top + 'px';

	        if (!rightalign) {
	          css.left = pos.left - appendOffset.left + 'px';
	        } else {
	          css.right = window.innerWidth -
	            (pos.left - appendOffset.left + $element.prop('offsetWidth')) + 'px';
	        }
	      }

	      self.dropdownMenu.css(css);
	    }

	    var openContainer = appendTo ? appendTo : $element;
	    var dropdownOpenClass = appendTo ? appendToOpenClass : openClass;
	    var hasOpenClass = openContainer.hasClass(dropdownOpenClass);
	    var isOnlyOpen = uibDropdownService.isOnlyOpen($scope, appendTo);

	    if (hasOpenClass === !isOpen) {
	      var toggleClass;
	      if (appendTo) {
	        toggleClass = !isOnlyOpen ? 'addClass' : 'removeClass';
	      } else {
	        toggleClass = isOpen ? 'addClass' : 'removeClass';
	      }
	      $animate[toggleClass](openContainer, dropdownOpenClass).then(function() {
	        if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
	          toggleInvoker($scope, { open: !!isOpen });
	        }
	      });
	    }

	    if (isOpen) {
	      if (self.dropdownMenuTemplateUrl) {
	        $templateRequest(self.dropdownMenuTemplateUrl).then(function(tplContent) {
	          templateScope = scope.$new();
	          $compile(tplContent.trim())(templateScope, function(dropdownElement) {
	            var newEl = dropdownElement;
	            self.dropdownMenu.replaceWith(newEl);
	            self.dropdownMenu = newEl;
	            $document.on('keydown', uibDropdownService.keybindFilter);
	          });
	        });
	      } else {
	        $document.on('keydown', uibDropdownService.keybindFilter);
	      }

	      scope.focusToggleElement();
	      uibDropdownService.open(scope, $element, appendTo);
	    } else {
	      if (self.dropdownMenuTemplateUrl) {
	        if (templateScope) {
	          templateScope.$destroy();
	        }
	        var newEl = angular.element('<ul class="dropdown-menu"></ul>');
	        self.dropdownMenu.replaceWith(newEl);
	        self.dropdownMenu = newEl;
	      }

	      self.selectedOption = null;
	    }

	    if (angular.isFunction(setIsOpen)) {
	      setIsOpen($scope, isOpen);
	    }
	  });
	}])

	.directive('uibDropdown', function() {
	  return {
	    controller: 'UibDropdownController',
	    link: function(scope, element, attrs, dropdownCtrl) {
	      dropdownCtrl.init();
	    }
	  };
	})

	.directive('uibDropdownMenu', function() {
	  return {
	    restrict: 'A',
	    require: '?^uibDropdown',
	    link: function(scope, element, attrs, dropdownCtrl) {
	      if (!dropdownCtrl || angular.isDefined(attrs.dropdownNested)) {
	        return;
	      }

	      element.addClass('dropdown-menu');

	      var tplUrl = attrs.templateUrl;
	      if (tplUrl) {
	        dropdownCtrl.dropdownMenuTemplateUrl = tplUrl;
	      }

	      if (!dropdownCtrl.dropdownMenu) {
	        dropdownCtrl.dropdownMenu = element;
	      }
	    }
	  };
	})

	.directive('uibDropdownToggle', function() {
	  return {
	    require: '?^uibDropdown',
	    link: function(scope, element, attrs, dropdownCtrl) {
	      if (!dropdownCtrl) {
	        return;
	      }

	      element.addClass('dropdown-toggle');

	      dropdownCtrl.toggleElement = element;

	      var toggleDropdown = function(event) {
	        event.preventDefault();

	        if (!element.hasClass('disabled') && !attrs.disabled) {
	          scope.$apply(function() {
	            dropdownCtrl.toggle();
	          });
	        }
	      };

	      element.on('click', toggleDropdown);

	      // WAI-ARIA
	      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });
	      scope.$watch(dropdownCtrl.isOpen, function(isOpen) {
	        element.attr('aria-expanded', !!isOpen);
	      });

	      scope.$on('$destroy', function() {
	        element.off('click', toggleDropdown);
	      });
	    }
	  };
	});

	angular.module('ui.bootstrap.stackedMap', [])
	/**
	 * A helper, internal data structure that acts as a map but also allows getting / removing
	 * elements in the LIFO order
	 */
	  .factory('$$stackedMap', function() {
	    return {
	      createNew: function() {
	        var stack = [];

	        return {
	          add: function(key, value) {
	            stack.push({
	              key: key,
	              value: value
	            });
	          },
	          get: function(key) {
	            for (var i = 0; i < stack.length; i++) {
	              if (key === stack[i].key) {
	                return stack[i];
	              }
	            }
	          },
	          keys: function() {
	            var keys = [];
	            for (var i = 0; i < stack.length; i++) {
	              keys.push(stack[i].key);
	            }
	            return keys;
	          },
	          top: function() {
	            return stack[stack.length - 1];
	          },
	          remove: function(key) {
	            var idx = -1;
	            for (var i = 0; i < stack.length; i++) {
	              if (key === stack[i].key) {
	                idx = i;
	                break;
	              }
	            }
	            return stack.splice(idx, 1)[0];
	          },
	          removeTop: function() {
	            return stack.pop();
	          },
	          length: function() {
	            return stack.length;
	          }
	        };
	      }
	    };
	  });
	angular.module('ui.bootstrap.modal', ['ui.bootstrap.multiMap', 'ui.bootstrap.stackedMap', 'ui.bootstrap.position'])
	/**
	 * Pluggable resolve mechanism for the modal resolve resolution
	 * Supports UI Router's $resolve service
	 */
	  .provider('$uibResolve', function() {
	    var resolve = this;
	    this.resolver = null;

	    this.setResolver = function(resolver) {
	      this.resolver = resolver;
	    };

	    this.$get = ['$injector', '$q', function($injector, $q) {
	      var resolver = resolve.resolver ? $injector.get(resolve.resolver) : null;
	      return {
	        resolve: function(invocables, locals, parent, self) {
	          if (resolver) {
	            return resolver.resolve(invocables, locals, parent, self);
	          }

	          var promises = [];

	          angular.forEach(invocables, function(value) {
	            if (angular.isFunction(value) || angular.isArray(value)) {
	              promises.push($q.resolve($injector.invoke(value)));
	            } else if (angular.isString(value)) {
	              promises.push($q.resolve($injector.get(value)));
	            } else {
	              promises.push($q.resolve(value));
	            }
	          });

	          return $q.all(promises).then(function(resolves) {
	            var resolveObj = {};
	            var resolveIter = 0;
	            angular.forEach(invocables, function(value, key) {
	              resolveObj[key] = resolves[resolveIter++];
	            });

	            return resolveObj;
	          });
	        }
	      };
	    }];
	  })

	/**
	 * A helper directive for the $modal service. It creates a backdrop element.
	 */
	  .directive('uibModalBackdrop', ['$animate', '$injector', '$uibModalStack',
	  function($animate, $injector, $modalStack) {
	    return {
	      restrict: 'A',
	      compile: function(tElement, tAttrs) {
	        tElement.addClass(tAttrs.backdropClass);
	        return linkFn;
	      }
	    };

	    function linkFn(scope, element, attrs) {
	      if (attrs.modalInClass) {
	        $animate.addClass(element, attrs.modalInClass);

	        scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
	          var done = setIsAsync();
	          if (scope.modalOptions.animation) {
	            $animate.removeClass(element, attrs.modalInClass).then(done);
	          } else {
	            done();
	          }
	        });
	      }
	    }
	  }])

	  .directive('uibModalWindow', ['$uibModalStack', '$q', '$animateCss', '$document',
	  function($modalStack, $q, $animateCss, $document) {
	    return {
	      scope: {
	        index: '@'
	      },
	      restrict: 'A',
	      transclude: true,
	      templateUrl: function(tElement, tAttrs) {
	        return tAttrs.templateUrl || 'uib/template/modal/window.html';
	      },
	      link: function(scope, element, attrs) {
	        element.addClass(attrs.windowTopClass || '');
	        scope.size = attrs.size;

	        scope.close = function(evt) {
	          var modal = $modalStack.getTop();
	          if (modal && modal.value.backdrop &&
	            modal.value.backdrop !== 'static' &&
	            evt.target === evt.currentTarget) {
	            evt.preventDefault();
	            evt.stopPropagation();
	            $modalStack.dismiss(modal.key, 'backdrop click');
	          }
	        };

	        // moved from template to fix issue #2280
	        element.on('click', scope.close);

	        // This property is only added to the scope for the purpose of detecting when this directive is rendered.
	        // We can detect that by using this property in the template associated with this directive and then use
	        // {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}.
	        scope.$isRendered = true;

	        // Deferred object that will be resolved when this modal is rendered.
	        var modalRenderDeferObj = $q.defer();
	        // Resolve render promise post-digest
	        scope.$$postDigest(function() {
	          modalRenderDeferObj.resolve();
	        });

	        modalRenderDeferObj.promise.then(function() {
	          var animationPromise = null;

	          if (attrs.modalInClass) {
	            animationPromise = $animateCss(element, {
	              addClass: attrs.modalInClass
	            }).start();

	            scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
	              var done = setIsAsync();
	              $animateCss(element, {
	                removeClass: attrs.modalInClass
	              }).start().then(done);
	            });
	          }


	          $q.when(animationPromise).then(function() {
	            // Notify {@link $modalStack} that modal is rendered.
	            var modal = $modalStack.getTop();
	            if (modal) {
	              $modalStack.modalRendered(modal.key);
	            }

	            /**
	             * If something within the freshly-opened modal already has focus (perhaps via a
	             * directive that causes focus) then there's no need to try to focus anything.
	             */
	            if (!($document[0].activeElement && element[0].contains($document[0].activeElement))) {
	              var inputWithAutofocus = element[0].querySelector('[autofocus]');
	              /**
	               * Auto-focusing of a freshly-opened modal element causes any child elements
	               * with the autofocus attribute to lose focus. This is an issue on touch
	               * based devices which will show and then hide the onscreen keyboard.
	               * Attempts to refocus the autofocus element via JavaScript will not reopen
	               * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
	               * the modal element if the modal does not contain an autofocus element.
	               */
	              if (inputWithAutofocus) {
	                inputWithAutofocus.focus();
	              } else {
	                element[0].focus();
	              }
	            }
	          });
	        });
	      }
	    };
	  }])

	  .directive('uibModalAnimationClass', function() {
	    return {
	      compile: function(tElement, tAttrs) {
	        if (tAttrs.modalAnimation) {
	          tElement.addClass(tAttrs.uibModalAnimationClass);
	        }
	      }
	    };
	  })

	  .directive('uibModalTransclude', ['$animate', function($animate) {
	    return {
	      link: function(scope, element, attrs, controller, transclude) {
	        transclude(scope.$parent, function(clone) {
	          element.empty();
	          $animate.enter(clone, element);
	        });
	      }
	    };
	  }])

	  .factory('$uibModalStack', ['$animate', '$animateCss', '$document',
	    '$compile', '$rootScope', '$q', '$$multiMap', '$$stackedMap', '$uibPosition',
	    function($animate, $animateCss, $document, $compile, $rootScope, $q, $$multiMap, $$stackedMap, $uibPosition) {
	      var OPENED_MODAL_CLASS = 'modal-open';

	      var backdropDomEl, backdropScope;
	      var openedWindows = $$stackedMap.createNew();
	      var openedClasses = $$multiMap.createNew();
	      var $modalStack = {
	        NOW_CLOSING_EVENT: 'modal.stack.now-closing'
	      };
	      var topModalIndex = 0;
	      var previousTopOpenedModal = null;
	      var ARIA_HIDDEN_ATTRIBUTE_NAME = 'data-bootstrap-modal-aria-hidden-count';

	      //Modal focus behavior
	      var tabbableSelector = 'a[href], area[href], input:not([disabled]):not([tabindex=\'-1\']), ' +
	        'button:not([disabled]):not([tabindex=\'-1\']),select:not([disabled]):not([tabindex=\'-1\']), textarea:not([disabled]):not([tabindex=\'-1\']), ' +
	        'iframe, object, embed, *[tabindex]:not([tabindex=\'-1\']), *[contenteditable=true]';
	      var scrollbarPadding;
	      var SNAKE_CASE_REGEXP = /[A-Z]/g;

	      // TODO: extract into common dependency with tooltip
	      function snake_case(name) {
	        var separator = '-';
	        return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
	          return (pos ? separator : '') + letter.toLowerCase();
	        });
	      }

	      function isVisible(element) {
	        return !!(element.offsetWidth ||
	          element.offsetHeight ||
	          element.getClientRects().length);
	      }

	      function backdropIndex() {
	        var topBackdropIndex = -1;
	        var opened = openedWindows.keys();
	        for (var i = 0; i < opened.length; i++) {
	          if (openedWindows.get(opened[i]).value.backdrop) {
	            topBackdropIndex = i;
	          }
	        }

	        // If any backdrop exist, ensure that it's index is always
	        // right below the top modal
	        if (topBackdropIndex > -1 && topBackdropIndex < topModalIndex) {
	          topBackdropIndex = topModalIndex;
	        }
	        return topBackdropIndex;
	      }

	      $rootScope.$watch(backdropIndex, function(newBackdropIndex) {
	        if (backdropScope) {
	          backdropScope.index = newBackdropIndex;
	        }
	      });

	      function removeModalWindow(modalInstance, elementToReceiveFocus) {
	        var modalWindow = openedWindows.get(modalInstance).value;
	        var appendToElement = modalWindow.appendTo;

	        //clean up the stack
	        openedWindows.remove(modalInstance);
	        previousTopOpenedModal = openedWindows.top();
	        if (previousTopOpenedModal) {
	          topModalIndex = parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10);
	        }

	        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {
	          var modalBodyClass = modalWindow.openedClass || OPENED_MODAL_CLASS;
	          openedClasses.remove(modalBodyClass, modalInstance);
	          var areAnyOpen = openedClasses.hasKey(modalBodyClass);
	          appendToElement.toggleClass(modalBodyClass, areAnyOpen);
	          if (!areAnyOpen && scrollbarPadding && scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
	            if (scrollbarPadding.originalRight) {
	              appendToElement.css({paddingRight: scrollbarPadding.originalRight + 'px'});
	            } else {
	              appendToElement.css({paddingRight: ''});
	            }
	            scrollbarPadding = null;
	          }
	          toggleTopWindowClass(true);
	        }, modalWindow.closedDeferred);
	        checkRemoveBackdrop();

	        //move focus to specified element if available, or else to body
	        if (elementToReceiveFocus && elementToReceiveFocus.focus) {
	          elementToReceiveFocus.focus();
	        } else if (appendToElement.focus) {
	          appendToElement.focus();
	        }
	      }

	      // Add or remove "windowTopClass" from the top window in the stack
	      function toggleTopWindowClass(toggleSwitch) {
	        var modalWindow;

	        if (openedWindows.length() > 0) {
	          modalWindow = openedWindows.top().value;
	          modalWindow.modalDomEl.toggleClass(modalWindow.windowTopClass || '', toggleSwitch);
	        }
	      }

	      function checkRemoveBackdrop() {
	        //remove backdrop if no longer needed
	        if (backdropDomEl && backdropIndex() === -1) {
	          var backdropScopeRef = backdropScope;
	          removeAfterAnimate(backdropDomEl, backdropScope, function() {
	            backdropScopeRef = null;
	          });
	          backdropDomEl = undefined;
	          backdropScope = undefined;
	        }
	      }

	      function removeAfterAnimate(domEl, scope, done, closedDeferred) {
	        var asyncDeferred;
	        var asyncPromise = null;
	        var setIsAsync = function() {
	          if (!asyncDeferred) {
	            asyncDeferred = $q.defer();
	            asyncPromise = asyncDeferred.promise;
	          }

	          return function asyncDone() {
	            asyncDeferred.resolve();
	          };
	        };
	        scope.$broadcast($modalStack.NOW_CLOSING_EVENT, setIsAsync);

	        // Note that it's intentional that asyncPromise might be null.
	        // That's when setIsAsync has not been called during the
	        // NOW_CLOSING_EVENT broadcast.
	        return $q.when(asyncPromise).then(afterAnimating);

	        function afterAnimating() {
	          if (afterAnimating.done) {
	            return;
	          }
	          afterAnimating.done = true;

	          $animate.leave(domEl).then(function() {
	            if (done) {
	              done();
	            }

	            domEl.remove();
	            if (closedDeferred) {
	              closedDeferred.resolve();
	            }
	          });

	          scope.$destroy();
	        }
	      }

	      $document.on('keydown', keydownListener);

	      $rootScope.$on('$destroy', function() {
	        $document.off('keydown', keydownListener);
	      });

	      function keydownListener(evt) {
	        if (evt.isDefaultPrevented()) {
	          return evt;
	        }

	        var modal = openedWindows.top();
	        if (modal) {
	          switch (evt.which) {
	            case 27: {
	              if (modal.value.keyboard) {
	                evt.preventDefault();
	                $rootScope.$apply(function() {
	                  $modalStack.dismiss(modal.key, 'escape key press');
	                });
	              }
	              break;
	            }
	            case 9: {
	              var list = $modalStack.loadFocusElementList(modal);
	              var focusChanged = false;
	              if (evt.shiftKey) {
	                if ($modalStack.isFocusInFirstItem(evt, list) || $modalStack.isModalFocused(evt, modal)) {
	                  focusChanged = $modalStack.focusLastFocusableElement(list);
	                }
	              } else {
	                if ($modalStack.isFocusInLastItem(evt, list)) {
	                  focusChanged = $modalStack.focusFirstFocusableElement(list);
	                }
	              }

	              if (focusChanged) {
	                evt.preventDefault();
	                evt.stopPropagation();
	              }

	              break;
	            }
	          }
	        }
	      }

	      $modalStack.open = function(modalInstance, modal) {
	        var modalOpener = $document[0].activeElement,
	          modalBodyClass = modal.openedClass || OPENED_MODAL_CLASS;

	        toggleTopWindowClass(false);

	        // Store the current top first, to determine what index we ought to use
	        // for the current top modal
	        previousTopOpenedModal = openedWindows.top();

	        openedWindows.add(modalInstance, {
	          deferred: modal.deferred,
	          renderDeferred: modal.renderDeferred,
	          closedDeferred: modal.closedDeferred,
	          modalScope: modal.scope,
	          backdrop: modal.backdrop,
	          keyboard: modal.keyboard,
	          openedClass: modal.openedClass,
	          windowTopClass: modal.windowTopClass,
	          animation: modal.animation,
	          appendTo: modal.appendTo
	        });

	        openedClasses.put(modalBodyClass, modalInstance);

	        var appendToElement = modal.appendTo,
	            currBackdropIndex = backdropIndex();

	        if (!appendToElement.length) {
	          throw new Error('appendTo element not found. Make sure that the element passed is in DOM.');
	        }

	        if (currBackdropIndex >= 0 && !backdropDomEl) {
	          backdropScope = $rootScope.$new(true);
	          backdropScope.modalOptions = modal;
	          backdropScope.index = currBackdropIndex;
	          backdropDomEl = angular.element('<div uib-modal-backdrop="modal-backdrop"></div>');
	          backdropDomEl.attr({
	            'class': 'modal-backdrop',
	            'ng-style': '{\'z-index\': 1040 + (index && 1 || 0) + index*10}',
	            'uib-modal-animation-class': 'fade',
	            'modal-in-class': 'in'
	          });
	          if (modal.backdropClass) {
	            backdropDomEl.addClass(modal.backdropClass);
	          }

	          if (modal.animation) {
	            backdropDomEl.attr('modal-animation', 'true');
	          }
	          $compile(backdropDomEl)(backdropScope);
	          $animate.enter(backdropDomEl, appendToElement);
	          if ($uibPosition.isScrollable(appendToElement)) {
	            scrollbarPadding = $uibPosition.scrollbarPadding(appendToElement);
	            if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
	              appendToElement.css({paddingRight: scrollbarPadding.right + 'px'});
	            }
	          }
	        }

	        var content;
	        if (modal.component) {
	          content = document.createElement(snake_case(modal.component.name));
	          content = angular.element(content);
	          content.attr({
	            resolve: '$resolve',
	            'modal-instance': '$uibModalInstance',
	            close: '$close($value)',
	            dismiss: '$dismiss($value)'
	          });
	        } else {
	          content = modal.content;
	        }

	        // Set the top modal index based on the index of the previous top modal
	        topModalIndex = previousTopOpenedModal ? parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10) + 1 : 0;
	        var angularDomEl = angular.element('<div uib-modal-window="modal-window"></div>');
	        angularDomEl.attr({
	          'class': 'modal',
	          'template-url': modal.windowTemplateUrl,
	          'window-top-class': modal.windowTopClass,
	          'role': 'dialog',
	          'aria-labelledby': modal.ariaLabelledBy,
	          'aria-describedby': modal.ariaDescribedBy,
	          'size': modal.size,
	          'index': topModalIndex,
	          'animate': 'animate',
	          'ng-style': '{\'z-index\': 1050 + $$topModalIndex*10, display: \'block\'}',
	          'tabindex': -1,
	          'uib-modal-animation-class': 'fade',
	          'modal-in-class': 'in'
	        }).append(content);
	        if (modal.windowClass) {
	          angularDomEl.addClass(modal.windowClass);
	        }

	        if (modal.animation) {
	          angularDomEl.attr('modal-animation', 'true');
	        }

	        appendToElement.addClass(modalBodyClass);
	        if (modal.scope) {
	          // we need to explicitly add the modal index to the modal scope
	          // because it is needed by ngStyle to compute the zIndex property.
	          modal.scope.$$topModalIndex = topModalIndex;
	        }
	        $animate.enter($compile(angularDomEl)(modal.scope), appendToElement);

	        openedWindows.top().value.modalDomEl = angularDomEl;
	        openedWindows.top().value.modalOpener = modalOpener;

	        applyAriaHidden(angularDomEl);

	        function applyAriaHidden(el) {
	          if (!el || el[0].tagName === 'BODY') {
	            return;
	          }

	          getSiblings(el).forEach(function(sibling) {
	            var elemIsAlreadyHidden = sibling.getAttribute('aria-hidden') === 'true',
	              ariaHiddenCount = parseInt(sibling.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10);

	            if (!ariaHiddenCount) {
	              ariaHiddenCount = elemIsAlreadyHidden ? 1 : 0;
	            }

	            sibling.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, ariaHiddenCount + 1);
	            sibling.setAttribute('aria-hidden', 'true');
	          });

	          return applyAriaHidden(el.parent());

	          function getSiblings(el) {
	            var children = el.parent() ? el.parent().children() : [];

	            return Array.prototype.filter.call(children, function(child) {
	              return child !== el[0];
	            });
	          }
	        }
	      };

	      function broadcastClosing(modalWindow, resultOrReason, closing) {
	        return !modalWindow.value.modalScope.$broadcast('modal.closing', resultOrReason, closing).defaultPrevented;
	      }

	      function unhideBackgroundElements() {
	        Array.prototype.forEach.call(
	          document.querySelectorAll('[' + ARIA_HIDDEN_ATTRIBUTE_NAME + ']'),
	          function(hiddenEl) {
	            var ariaHiddenCount = parseInt(hiddenEl.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10),
	              newHiddenCount = ariaHiddenCount - 1;
	            hiddenEl.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, newHiddenCount);

	            if (!newHiddenCount) {
	              hiddenEl.removeAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME);
	              hiddenEl.removeAttribute('aria-hidden');
	            }
	          }
	        );
	      }

	      $modalStack.close = function(modalInstance, result) {
	        var modalWindow = openedWindows.get(modalInstance);
	        unhideBackgroundElements();
	        if (modalWindow && broadcastClosing(modalWindow, result, true)) {
	          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
	          modalWindow.value.deferred.resolve(result);
	          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
	          return true;
	        }

	        return !modalWindow;
	      };

	      $modalStack.dismiss = function(modalInstance, reason) {
	        var modalWindow = openedWindows.get(modalInstance);
	        unhideBackgroundElements();
	        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
	          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
	          modalWindow.value.deferred.reject(reason);
	          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
	          return true;
	        }
	        return !modalWindow;
	      };

	      $modalStack.dismissAll = function(reason) {
	        var topModal = this.getTop();
	        while (topModal && this.dismiss(topModal.key, reason)) {
	          topModal = this.getTop();
	        }
	      };

	      $modalStack.getTop = function() {
	        return openedWindows.top();
	      };

	      $modalStack.modalRendered = function(modalInstance) {
	        var modalWindow = openedWindows.get(modalInstance);
	        if (modalWindow) {
	          modalWindow.value.renderDeferred.resolve();
	        }
	      };

	      $modalStack.focusFirstFocusableElement = function(list) {
	        if (list.length > 0) {
	          list[0].focus();
	          return true;
	        }
	        return false;
	      };

	      $modalStack.focusLastFocusableElement = function(list) {
	        if (list.length > 0) {
	          list[list.length - 1].focus();
	          return true;
	        }
	        return false;
	      };

	      $modalStack.isModalFocused = function(evt, modalWindow) {
	        if (evt && modalWindow) {
	          var modalDomEl = modalWindow.value.modalDomEl;
	          if (modalDomEl && modalDomEl.length) {
	            return (evt.target || evt.srcElement) === modalDomEl[0];
	          }
	        }
	        return false;
	      };

	      $modalStack.isFocusInFirstItem = function(evt, list) {
	        if (list.length > 0) {
	          return (evt.target || evt.srcElement) === list[0];
	        }
	        return false;
	      };

	      $modalStack.isFocusInLastItem = function(evt, list) {
	        if (list.length > 0) {
	          return (evt.target || evt.srcElement) === list[list.length - 1];
	        }
	        return false;
	      };

	      $modalStack.loadFocusElementList = function(modalWindow) {
	        if (modalWindow) {
	          var modalDomE1 = modalWindow.value.modalDomEl;
	          if (modalDomE1 && modalDomE1.length) {
	            var elements = modalDomE1[0].querySelectorAll(tabbableSelector);
	            return elements ?
	              Array.prototype.filter.call(elements, function(element) {
	                return isVisible(element);
	              }) : elements;
	          }
	        }
	      };

	      return $modalStack;
	    }])

	  .provider('$uibModal', function() {
	    var $modalProvider = {
	      options: {
	        animation: true,
	        backdrop: true, //can also be false or 'static'
	        keyboard: true
	      },
	      $get: ['$rootScope', '$q', '$document', '$templateRequest', '$controller', '$uibResolve', '$uibModalStack',
	        function ($rootScope, $q, $document, $templateRequest, $controller, $uibResolve, $modalStack) {
	          var $modal = {};

	          function getTemplatePromise(options) {
	            return options.template ? $q.when(options.template) :
	              $templateRequest(angular.isFunction(options.templateUrl) ?
	                options.templateUrl() : options.templateUrl);
	          }

	          var promiseChain = null;
	          $modal.getPromiseChain = function() {
	            return promiseChain;
	          };

	          $modal.open = function(modalOptions) {
	            var modalResultDeferred = $q.defer();
	            var modalOpenedDeferred = $q.defer();
	            var modalClosedDeferred = $q.defer();
	            var modalRenderDeferred = $q.defer();

	            //prepare an instance of a modal to be injected into controllers and returned to a caller
	            var modalInstance = {
	              result: modalResultDeferred.promise,
	              opened: modalOpenedDeferred.promise,
	              closed: modalClosedDeferred.promise,
	              rendered: modalRenderDeferred.promise,
	              close: function (result) {
	                return $modalStack.close(modalInstance, result);
	              },
	              dismiss: function (reason) {
	                return $modalStack.dismiss(modalInstance, reason);
	              }
	            };

	            //merge and clean up options
	            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
	            modalOptions.resolve = modalOptions.resolve || {};
	            modalOptions.appendTo = modalOptions.appendTo || $document.find('body').eq(0);

	            //verify options
	            if (!modalOptions.component && !modalOptions.template && !modalOptions.templateUrl) {
	              throw new Error('One of component or template or templateUrl options is required.');
	            }

	            var templateAndResolvePromise;
	            if (modalOptions.component) {
	              templateAndResolvePromise = $q.when($uibResolve.resolve(modalOptions.resolve, {}, null, null));
	            } else {
	              templateAndResolvePromise =
	                $q.all([getTemplatePromise(modalOptions), $uibResolve.resolve(modalOptions.resolve, {}, null, null)]);
	            }

	            function resolveWithTemplate() {
	              return templateAndResolvePromise;
	            }

	            // Wait for the resolution of the existing promise chain.
	            // Then switch to our own combined promise dependency (regardless of how the previous modal fared).
	            // Then add to $modalStack and resolve opened.
	            // Finally clean up the chain variable if no subsequent modal has overwritten it.
	            var samePromise;
	            samePromise = promiseChain = $q.all([promiseChain])
	              .then(resolveWithTemplate, resolveWithTemplate)
	              .then(function resolveSuccess(tplAndVars) {
	                var providedScope = modalOptions.scope || $rootScope;

	                var modalScope = providedScope.$new();
	                modalScope.$close = modalInstance.close;
	                modalScope.$dismiss = modalInstance.dismiss;

	                modalScope.$on('$destroy', function() {
	                  if (!modalScope.$$uibDestructionScheduled) {
	                    modalScope.$dismiss('$uibUnscheduledDestruction');
	                  }
	                });

	                var modal = {
	                  scope: modalScope,
	                  deferred: modalResultDeferred,
	                  renderDeferred: modalRenderDeferred,
	                  closedDeferred: modalClosedDeferred,
	                  animation: modalOptions.animation,
	                  backdrop: modalOptions.backdrop,
	                  keyboard: modalOptions.keyboard,
	                  backdropClass: modalOptions.backdropClass,
	                  windowTopClass: modalOptions.windowTopClass,
	                  windowClass: modalOptions.windowClass,
	                  windowTemplateUrl: modalOptions.windowTemplateUrl,
	                  ariaLabelledBy: modalOptions.ariaLabelledBy,
	                  ariaDescribedBy: modalOptions.ariaDescribedBy,
	                  size: modalOptions.size,
	                  openedClass: modalOptions.openedClass,
	                  appendTo: modalOptions.appendTo
	                };

	                var component = {};
	                var ctrlInstance, ctrlInstantiate, ctrlLocals = {};

	                if (modalOptions.component) {
	                  constructLocals(component, false, true, false);
	                  component.name = modalOptions.component;
	                  modal.component = component;
	                } else if (modalOptions.controller) {
	                  constructLocals(ctrlLocals, true, false, true);

	                  // the third param will make the controller instantiate later,private api
	                  // @see https://github.com/angular/angular.js/blob/master/src/ng/controller.js#L126
	                  ctrlInstantiate = $controller(modalOptions.controller, ctrlLocals, true, modalOptions.controllerAs);
	                  if (modalOptions.controllerAs && modalOptions.bindToController) {
	                    ctrlInstance = ctrlInstantiate.instance;
	                    ctrlInstance.$close = modalScope.$close;
	                    ctrlInstance.$dismiss = modalScope.$dismiss;
	                    angular.extend(ctrlInstance, {
	                      $resolve: ctrlLocals.$scope.$resolve
	                    }, providedScope);
	                  }

	                  ctrlInstance = ctrlInstantiate();

	                  if (angular.isFunction(ctrlInstance.$onInit)) {
	                    ctrlInstance.$onInit();
	                  }
	                }

	                if (!modalOptions.component) {
	                  modal.content = tplAndVars[0];
	                }

	                $modalStack.open(modalInstance, modal);
	                modalOpenedDeferred.resolve(true);

	                function constructLocals(obj, template, instanceOnScope, injectable) {
	                  obj.$scope = modalScope;
	                  obj.$scope.$resolve = {};
	                  if (instanceOnScope) {
	                    obj.$scope.$uibModalInstance = modalInstance;
	                  } else {
	                    obj.$uibModalInstance = modalInstance;
	                  }

	                  var resolves = template ? tplAndVars[1] : tplAndVars;
	                  angular.forEach(resolves, function(value, key) {
	                    if (injectable) {
	                      obj[key] = value;
	                    }

	                    obj.$scope.$resolve[key] = value;
	                  });
	                }
	            }, function resolveError(reason) {
	              modalOpenedDeferred.reject(reason);
	              modalResultDeferred.reject(reason);
	            })['finally'](function() {
	              if (promiseChain === samePromise) {
	                promiseChain = null;
	              }
	            });

	            return modalInstance;
	          };

	          return $modal;
	        }
	      ]
	    };

	    return $modalProvider;
	  });

	angular.module('ui.bootstrap.paging', [])
	/**
	 * Helper internal service for generating common controller code between the
	 * pager and pagination components
	 */
	.factory('uibPaging', ['$parse', function($parse) {
	  return {
	    create: function(ctrl, $scope, $attrs) {
	      ctrl.setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;
	      ctrl.ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl
	      ctrl._watchers = [];

	      ctrl.init = function(ngModelCtrl, config) {
	        ctrl.ngModelCtrl = ngModelCtrl;
	        ctrl.config = config;

	        ngModelCtrl.$render = function() {
	          ctrl.render();
	        };

	        if ($attrs.itemsPerPage) {
	          ctrl._watchers.push($scope.$parent.$watch($attrs.itemsPerPage, function(value) {
	            ctrl.itemsPerPage = parseInt(value, 10);
	            $scope.totalPages = ctrl.calculateTotalPages();
	            ctrl.updatePage();
	          }));
	        } else {
	          ctrl.itemsPerPage = config.itemsPerPage;
	        }

	        $scope.$watch('totalItems', function(newTotal, oldTotal) {
	          if (angular.isDefined(newTotal) || newTotal !== oldTotal) {
	            $scope.totalPages = ctrl.calculateTotalPages();
	            ctrl.updatePage();
	          }
	        });
	      };

	      ctrl.calculateTotalPages = function() {
	        var totalPages = ctrl.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / ctrl.itemsPerPage);
	        return Math.max(totalPages || 0, 1);
	      };

	      ctrl.render = function() {
	        $scope.page = parseInt(ctrl.ngModelCtrl.$viewValue, 10) || 1;
	      };

	      $scope.selectPage = function(page, evt) {
	        if (evt) {
	          evt.preventDefault();
	        }

	        var clickAllowed = !$scope.ngDisabled || !evt;
	        if (clickAllowed && $scope.page !== page && page > 0 && page <= $scope.totalPages) {
	          if (evt && evt.target) {
	            evt.target.blur();
	          }
	          ctrl.ngModelCtrl.$setViewValue(page);
	          ctrl.ngModelCtrl.$render();
	        }
	      };

	      $scope.getText = function(key) {
	        return $scope[key + 'Text'] || ctrl.config[key + 'Text'];
	      };

	      $scope.noPrevious = function() {
	        return $scope.page === 1;
	      };

	      $scope.noNext = function() {
	        return $scope.page === $scope.totalPages;
	      };

	      ctrl.updatePage = function() {
	        ctrl.setNumPages($scope.$parent, $scope.totalPages); // Readonly variable

	        if ($scope.page > $scope.totalPages) {
	          $scope.selectPage($scope.totalPages);
	        } else {
	          ctrl.ngModelCtrl.$render();
	        }
	      };

	      $scope.$on('$destroy', function() {
	        while (ctrl._watchers.length) {
	          ctrl._watchers.shift()();
	        }
	      });
	    }
	  };
	}]);

	angular.module('ui.bootstrap.pager', ['ui.bootstrap.paging', 'ui.bootstrap.tabindex'])

	.controller('UibPagerController', ['$scope', '$attrs', 'uibPaging', 'uibPagerConfig', function($scope, $attrs, uibPaging, uibPagerConfig) {
	  $scope.align = angular.isDefined($attrs.align) ? $scope.$parent.$eval($attrs.align) : uibPagerConfig.align;

	  uibPaging.create(this, $scope, $attrs);
	}])

	.constant('uibPagerConfig', {
	  itemsPerPage: 10,
	  previousText: '« Previous',
	  nextText: 'Next »',
	  align: true
	})

	.directive('uibPager', ['uibPagerConfig', function(uibPagerConfig) {
	  return {
	    scope: {
	      totalItems: '=',
	      previousText: '@',
	      nextText: '@',
	      ngDisabled: '='
	    },
	    require: ['uibPager', '?ngModel'],
	    restrict: 'A',
	    controller: 'UibPagerController',
	    controllerAs: 'pager',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/pager/pager.html';
	    },
	    link: function(scope, element, attrs, ctrls) {
	      element.addClass('pager');
	      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if (!ngModelCtrl) {
	        return; // do nothing if no ng-model
	      }

	      paginationCtrl.init(ngModelCtrl, uibPagerConfig);
	    }
	  };
	}]);

	angular.module('ui.bootstrap.pagination', ['ui.bootstrap.paging', 'ui.bootstrap.tabindex'])
	.controller('UibPaginationController', ['$scope', '$attrs', '$parse', 'uibPaging', 'uibPaginationConfig', function($scope, $attrs, $parse, uibPaging, uibPaginationConfig) {
	  var ctrl = this;
	  // Setup configuration parameters
	  var maxSize = angular.isDefined($attrs.maxSize) ? $scope.$parent.$eval($attrs.maxSize) : uibPaginationConfig.maxSize,
	    rotate = angular.isDefined($attrs.rotate) ? $scope.$parent.$eval($attrs.rotate) : uibPaginationConfig.rotate,
	    forceEllipses = angular.isDefined($attrs.forceEllipses) ? $scope.$parent.$eval($attrs.forceEllipses) : uibPaginationConfig.forceEllipses,
	    boundaryLinkNumbers = angular.isDefined($attrs.boundaryLinkNumbers) ? $scope.$parent.$eval($attrs.boundaryLinkNumbers) : uibPaginationConfig.boundaryLinkNumbers,
	    pageLabel = angular.isDefined($attrs.pageLabel) ? function(idx) { return $scope.$parent.$eval($attrs.pageLabel, {$page: idx}); } : angular.identity;
	  $scope.boundaryLinks = angular.isDefined($attrs.boundaryLinks) ? $scope.$parent.$eval($attrs.boundaryLinks) : uibPaginationConfig.boundaryLinks;
	  $scope.directionLinks = angular.isDefined($attrs.directionLinks) ? $scope.$parent.$eval($attrs.directionLinks) : uibPaginationConfig.directionLinks;

	  uibPaging.create(this, $scope, $attrs);

	  if ($attrs.maxSize) {
	    ctrl._watchers.push($scope.$parent.$watch($parse($attrs.maxSize), function(value) {
	      maxSize = parseInt(value, 10);
	      ctrl.render();
	    }));
	  }

	  // Create page object used in template
	  function makePage(number, text, isActive) {
	    return {
	      number: number,
	      text: text,
	      active: isActive
	    };
	  }

	  function getPages(currentPage, totalPages) {
	    var pages = [];

	    // Default page limits
	    var startPage = 1, endPage = totalPages;
	    var isMaxSized = angular.isDefined(maxSize) && maxSize < totalPages;

	    // recompute if maxSize
	    if (isMaxSized) {
	      if (rotate) {
	        // Current page is displayed in the middle of the visible ones
	        startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1);
	        endPage = startPage + maxSize - 1;

	        // Adjust if limit is exceeded
	        if (endPage > totalPages) {
	          endPage = totalPages;
	          startPage = endPage - maxSize + 1;
	        }
	      } else {
	        // Visible pages are paginated with maxSize
	        startPage = (Math.ceil(currentPage / maxSize) - 1) * maxSize + 1;

	        // Adjust last page if limit is exceeded
	        endPage = Math.min(startPage + maxSize - 1, totalPages);
	      }
	    }

	    // Add page number links
	    for (var number = startPage; number <= endPage; number++) {
	      var page = makePage(number, pageLabel(number), number === currentPage);
	      pages.push(page);
	    }

	    // Add links to move between page sets
	    if (isMaxSized && maxSize > 0 && (!rotate || forceEllipses || boundaryLinkNumbers)) {
	      if (startPage > 1) {
	        if (!boundaryLinkNumbers || startPage > 3) { //need ellipsis for all options unless range is too close to beginning
	        var previousPageSet = makePage(startPage - 1, '...', false);
	        pages.unshift(previousPageSet);
	      }
	        if (boundaryLinkNumbers) {
	          if (startPage === 3) { //need to replace ellipsis when the buttons would be sequential
	            var secondPageLink = makePage(2, '2', false);
	            pages.unshift(secondPageLink);
	          }
	          //add the first page
	          var firstPageLink = makePage(1, '1', false);
	          pages.unshift(firstPageLink);
	        }
	      }

	      if (endPage < totalPages) {
	        if (!boundaryLinkNumbers || endPage < totalPages - 2) { //need ellipsis for all options unless range is too close to end
	        var nextPageSet = makePage(endPage + 1, '...', false);
	        pages.push(nextPageSet);
	      }
	        if (boundaryLinkNumbers) {
	          if (endPage === totalPages - 2) { //need to replace ellipsis when the buttons would be sequential
	            var secondToLastPageLink = makePage(totalPages - 1, totalPages - 1, false);
	            pages.push(secondToLastPageLink);
	          }
	          //add the last page
	          var lastPageLink = makePage(totalPages, totalPages, false);
	          pages.push(lastPageLink);
	        }
	      }
	    }
	    return pages;
	  }

	  var originalRender = this.render;
	  this.render = function() {
	    originalRender();
	    if ($scope.page > 0 && $scope.page <= $scope.totalPages) {
	      $scope.pages = getPages($scope.page, $scope.totalPages);
	    }
	  };
	}])

	.constant('uibPaginationConfig', {
	  itemsPerPage: 10,
	  boundaryLinks: false,
	  boundaryLinkNumbers: false,
	  directionLinks: true,
	  firstText: 'First',
	  previousText: 'Previous',
	  nextText: 'Next',
	  lastText: 'Last',
	  rotate: true,
	  forceEllipses: false
	})

	.directive('uibPagination', ['$parse', 'uibPaginationConfig', function($parse, uibPaginationConfig) {
	  return {
	    scope: {
	      totalItems: '=',
	      firstText: '@',
	      previousText: '@',
	      nextText: '@',
	      lastText: '@',
	      ngDisabled:'='
	    },
	    require: ['uibPagination', '?ngModel'],
	    restrict: 'A',
	    controller: 'UibPaginationController',
	    controllerAs: 'pagination',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/pagination/pagination.html';
	    },
	    link: function(scope, element, attrs, ctrls) {
	      element.addClass('pagination');
	      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if (!ngModelCtrl) {
	         return; // do nothing if no ng-model
	      }

	      paginationCtrl.init(ngModelCtrl, uibPaginationConfig);
	    }
	  };
	}]);

	/**
	 * The following features are still outstanding: animation as a
	 * function, placement as a function, inside, support for more triggers than
	 * just mouse enter/leave, html tooltips, and selector delegation.
	 */
	angular.module('ui.bootstrap.tooltip', ['ui.bootstrap.position', 'ui.bootstrap.stackedMap'])

	/**
	 * The $tooltip service creates tooltip- and popover-like directives as well as
	 * houses global options for them.
	 */
	.provider('$uibTooltip', function() {
	  // The default options tooltip and popover.
	  var defaultOptions = {
	    placement: 'top',
	    placementClassPrefix: '',
	    animation: true,
	    popupDelay: 0,
	    popupCloseDelay: 0,
	    useContentExp: false
	  };

	  // Default hide triggers for each show trigger
	  var triggerMap = {
	    'mouseenter': 'mouseleave',
	    'click': 'click',
	    'outsideClick': 'outsideClick',
	    'focus': 'blur',
	    'none': ''
	  };

	  // The options specified to the provider globally.
	  var globalOptions = {};

	  /**
	   * `options({})` allows global configuration of all tooltips in the
	   * application.
	   *
	   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
	   *     // place tooltips left instead of top by default
	   *     $tooltipProvider.options( { placement: 'left' } );
	   *   });
	   */
		this.options = function(value) {
			angular.extend(globalOptions, value);
		};

	  /**
	   * This allows you to extend the set of trigger mappings available. E.g.:
	   *
	   *   $tooltipProvider.setTriggers( { 'openTrigger': 'closeTrigger' } );
	   */
	  this.setTriggers = function setTriggers(triggers) {
	    angular.extend(triggerMap, triggers);
	  };

	  /**
	   * This is a helper function for translating camel-case to snake_case.
	   */
	  function snake_case(name) {
	    var regexp = /[A-Z]/g;
	    var separator = '-';
	    return name.replace(regexp, function(letter, pos) {
	      return (pos ? separator : '') + letter.toLowerCase();
	    });
	  }

	  /**
	   * Returns the actual instance of the $tooltip service.
	   * TODO support multiple triggers
	   */
	  this.$get = ['$window', '$compile', '$timeout', '$document', '$uibPosition', '$interpolate', '$rootScope', '$parse', '$$stackedMap', function($window, $compile, $timeout, $document, $position, $interpolate, $rootScope, $parse, $$stackedMap) {
	    var openedTooltips = $$stackedMap.createNew();
	    $document.on('keyup', keypressListener);

	    $rootScope.$on('$destroy', function() {
	      $document.off('keyup', keypressListener);
	    });

	    function keypressListener(e) {
	      if (e.which === 27) {
	        var last = openedTooltips.top();
	        if (last) {
	          last.value.close();
	          last = null;
	        }
	      }
	    }

	    return function $tooltip(ttType, prefix, defaultTriggerShow, options) {
	      options = angular.extend({}, defaultOptions, globalOptions, options);

	      /**
	       * Returns an object of show and hide triggers.
	       *
	       * If a trigger is supplied,
	       * it is used to show the tooltip; otherwise, it will use the `trigger`
	       * option passed to the `$tooltipProvider.options` method; else it will
	       * default to the trigger supplied to this directive factory.
	       *
	       * The hide trigger is based on the show trigger. If the `trigger` option
	       * was passed to the `$tooltipProvider.options` method, it will use the
	       * mapped trigger from `triggerMap` or the passed trigger if the map is
	       * undefined; otherwise, it uses the `triggerMap` value of the show
	       * trigger; else it will just use the show trigger.
	       */
	      function getTriggers(trigger) {
	        var show = (trigger || options.trigger || defaultTriggerShow).split(' ');
	        var hide = show.map(function(trigger) {
	          return triggerMap[trigger] || trigger;
	        });
	        return {
	          show: show,
	          hide: hide
	        };
	      }

	      var directiveName = snake_case(ttType);

	      var startSym = $interpolate.startSymbol();
	      var endSym = $interpolate.endSymbol();
	      var template =
	        '<div '+ directiveName + '-popup ' +
	          'uib-title="' + startSym + 'title' + endSym + '" ' +
	          (options.useContentExp ?
	            'content-exp="contentExp()" ' :
	            'content="' + startSym + 'content' + endSym + '" ') +
	          'origin-scope="origScope" ' +
	          'class="uib-position-measure ' + prefix + '" ' +
	          'tooltip-animation-class="fade"' +
	          'uib-tooltip-classes ' +
	          'ng-class="{ in: isOpen }" ' +
	          '>' +
	        '</div>';

	      return {
	        compile: function(tElem, tAttrs) {
	          var tooltipLinker = $compile(template);

	          return function link(scope, element, attrs, tooltipCtrl) {
	            var tooltip;
	            var tooltipLinkedScope;
	            var transitionTimeout;
	            var showTimeout;
	            var hideTimeout;
	            var positionTimeout;
	            var adjustmentTimeout;
	            var appendToBody = angular.isDefined(options.appendToBody) ? options.appendToBody : false;
	            var triggers = getTriggers(undefined);
	            var hasEnableExp = angular.isDefined(attrs[prefix + 'Enable']);
	            var ttScope = scope.$new(true);
	            var repositionScheduled = false;
	            var isOpenParse = angular.isDefined(attrs[prefix + 'IsOpen']) ? $parse(attrs[prefix + 'IsOpen']) : false;
	            var contentParse = options.useContentExp ? $parse(attrs[ttType]) : false;
	            var observers = [];
	            var lastPlacement;

	            var positionTooltip = function() {
	              // check if tooltip exists and is not empty
	              if (!tooltip || !tooltip.html()) { return; }

	              if (!positionTimeout) {
	                positionTimeout = $timeout(function() {
	                  var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
	                  var initialHeight = angular.isDefined(tooltip.offsetHeight) ? tooltip.offsetHeight : tooltip.prop('offsetHeight');
	                  var elementPos = appendToBody ? $position.offset(element) : $position.position(element);
	                  tooltip.css({ top: ttPosition.top + 'px', left: ttPosition.left + 'px' });
	                  var placementClasses = ttPosition.placement.split('-');

	                  if (!tooltip.hasClass(placementClasses[0])) {
	                    tooltip.removeClass(lastPlacement.split('-')[0]);
	                    tooltip.addClass(placementClasses[0]);
	                  }

	                  if (!tooltip.hasClass(options.placementClassPrefix + ttPosition.placement)) {
	                    tooltip.removeClass(options.placementClassPrefix + lastPlacement);
	                    tooltip.addClass(options.placementClassPrefix + ttPosition.placement);
	                  }

	                  adjustmentTimeout = $timeout(function() {
	                    var currentHeight = angular.isDefined(tooltip.offsetHeight) ? tooltip.offsetHeight : tooltip.prop('offsetHeight');
	                    var adjustment = $position.adjustTop(placementClasses, elementPos, initialHeight, currentHeight);
	                    if (adjustment) {
	                      tooltip.css(adjustment);
	                    }
	                    adjustmentTimeout = null;
	                  }, 0, false);

	                  // first time through tt element will have the
	                  // uib-position-measure class or if the placement
	                  // has changed we need to position the arrow.
	                  if (tooltip.hasClass('uib-position-measure')) {
	                    $position.positionArrow(tooltip, ttPosition.placement);
	                    tooltip.removeClass('uib-position-measure');
	                  } else if (lastPlacement !== ttPosition.placement) {
	                    $position.positionArrow(tooltip, ttPosition.placement);
	                  }
	                  lastPlacement = ttPosition.placement;

	                  positionTimeout = null;
	                }, 0, false);
	              }
	            };

	            // Set up the correct scope to allow transclusion later
	            ttScope.origScope = scope;

	            // By default, the tooltip is not open.
	            // TODO add ability to start tooltip opened
	            ttScope.isOpen = false;

	            function toggleTooltipBind() {
	              if (!ttScope.isOpen) {
	                showTooltipBind();
	              } else {
	                hideTooltipBind();
	              }
	            }

	            // Show the tooltip with delay if specified, otherwise show it immediately
	            function showTooltipBind() {
	              if (hasEnableExp && !scope.$eval(attrs[prefix + 'Enable'])) {
	                return;
	              }

	              cancelHide();
	              prepareTooltip();

	              if (ttScope.popupDelay) {
	                // Do nothing if the tooltip was already scheduled to pop-up.
	                // This happens if show is triggered multiple times before any hide is triggered.
	                if (!showTimeout) {
	                  showTimeout = $timeout(show, ttScope.popupDelay, false);
	                }
	              } else {
	                show();
	              }
	            }

	            function hideTooltipBind() {
	              cancelShow();

	              if (ttScope.popupCloseDelay) {
	                if (!hideTimeout) {
	                  hideTimeout = $timeout(hide, ttScope.popupCloseDelay, false);
	                }
	              } else {
	                hide();
	              }
	            }

	            // Show the tooltip popup element.
	            function show() {
	              cancelShow();
	              cancelHide();

	              // Don't show empty tooltips.
	              if (!ttScope.content) {
	                return angular.noop;
	              }

	              createTooltip();

	              // And show the tooltip.
	              ttScope.$evalAsync(function() {
	                ttScope.isOpen = true;
	                assignIsOpen(true);
	                positionTooltip();
	              });
	            }

	            function cancelShow() {
	              if (showTimeout) {
	                $timeout.cancel(showTimeout);
	                showTimeout = null;
	              }

	              if (positionTimeout) {
	                $timeout.cancel(positionTimeout);
	                positionTimeout = null;
	              }
	            }

	            // Hide the tooltip popup element.
	            function hide() {
	              if (!ttScope) {
	                return;
	              }

	              // First things first: we don't show it anymore.
	              ttScope.$evalAsync(function() {
	                if (ttScope) {
	                  ttScope.isOpen = false;
	                  assignIsOpen(false);
	                  // And now we remove it from the DOM. However, if we have animation, we
	                  // need to wait for it to expire beforehand.
	                  // FIXME: this is a placeholder for a port of the transitions library.
	                  // The fade transition in TWBS is 150ms.
	                  if (ttScope.animation) {
	                    if (!transitionTimeout) {
	                      transitionTimeout = $timeout(removeTooltip, 150, false);
	                    }
	                  } else {
	                    removeTooltip();
	                  }
	                }
	              });
	            }

	            function cancelHide() {
	              if (hideTimeout) {
	                $timeout.cancel(hideTimeout);
	                hideTimeout = null;
	              }

	              if (transitionTimeout) {
	                $timeout.cancel(transitionTimeout);
	                transitionTimeout = null;
	              }
	            }

	            function createTooltip() {
	              // There can only be one tooltip element per directive shown at once.
	              if (tooltip) {
	                return;
	              }

	              tooltipLinkedScope = ttScope.$new();
	              tooltip = tooltipLinker(tooltipLinkedScope, function(tooltip) {
	                if (appendToBody) {
	                  $document.find('body').append(tooltip);
	                } else {
	                  element.after(tooltip);
	                }
	              });

	              openedTooltips.add(ttScope, {
	                close: hide
	              });

	              prepObservers();
	            }

	            function removeTooltip() {
	              cancelShow();
	              cancelHide();
	              unregisterObservers();

	              if (tooltip) {
	                tooltip.remove();
	                
	                tooltip = null;
	                if (adjustmentTimeout) {
	                  $timeout.cancel(adjustmentTimeout);
	                }
	              }

	              openedTooltips.remove(ttScope);
	              
	              if (tooltipLinkedScope) {
	                tooltipLinkedScope.$destroy();
	                tooltipLinkedScope = null;
	              }
	            }

	            /**
	             * Set the initial scope values. Once
	             * the tooltip is created, the observers
	             * will be added to keep things in sync.
	             */
	            function prepareTooltip() {
	              ttScope.title = attrs[prefix + 'Title'];
	              if (contentParse) {
	                ttScope.content = contentParse(scope);
	              } else {
	                ttScope.content = attrs[ttType];
	              }

	              ttScope.popupClass = attrs[prefix + 'Class'];
	              ttScope.placement = angular.isDefined(attrs[prefix + 'Placement']) ? attrs[prefix + 'Placement'] : options.placement;
	              var placement = $position.parsePlacement(ttScope.placement);
	              lastPlacement = placement[1] ? placement[0] + '-' + placement[1] : placement[0];

	              var delay = parseInt(attrs[prefix + 'PopupDelay'], 10);
	              var closeDelay = parseInt(attrs[prefix + 'PopupCloseDelay'], 10);
	              ttScope.popupDelay = !isNaN(delay) ? delay : options.popupDelay;
	              ttScope.popupCloseDelay = !isNaN(closeDelay) ? closeDelay : options.popupCloseDelay;
	            }

	            function assignIsOpen(isOpen) {
	              if (isOpenParse && angular.isFunction(isOpenParse.assign)) {
	                isOpenParse.assign(scope, isOpen);
	              }
	            }

	            ttScope.contentExp = function() {
	              return ttScope.content;
	            };

	            /**
	             * Observe the relevant attributes.
	             */
	            attrs.$observe('disabled', function(val) {
	              if (val) {
	                cancelShow();
	              }

	              if (val && ttScope.isOpen) {
	                hide();
	              }
	            });

	            if (isOpenParse) {
	              scope.$watch(isOpenParse, function(val) {
	                if (ttScope && !val === ttScope.isOpen) {
	                  toggleTooltipBind();
	                }
	              });
	            }

	            function prepObservers() {
	              observers.length = 0;

	              if (contentParse) {
	                observers.push(
	                  scope.$watch(contentParse, function(val) {
	                    ttScope.content = val;
	                    if (!val && ttScope.isOpen) {
	                      hide();
	                    }
	                  })
	                );

	                observers.push(
	                  tooltipLinkedScope.$watch(function() {
	                    if (!repositionScheduled) {
	                      repositionScheduled = true;
	                      tooltipLinkedScope.$$postDigest(function() {
	                        repositionScheduled = false;
	                        if (ttScope && ttScope.isOpen) {
	                          positionTooltip();
	                        }
	                      });
	                    }
	                  })
	                );
	              } else {
	                observers.push(
	                  attrs.$observe(ttType, function(val) {
	                    ttScope.content = val;
	                    if (!val && ttScope.isOpen) {
	                      hide();
	                    } else {
	                      positionTooltip();
	                    }
	                  })
	                );
	              }

	              observers.push(
	                attrs.$observe(prefix + 'Title', function(val) {
	                  ttScope.title = val;
	                  if (ttScope.isOpen) {
	                    positionTooltip();
	                  }
	                })
	              );

	              observers.push(
	                attrs.$observe(prefix + 'Placement', function(val) {
	                  ttScope.placement = val ? val : options.placement;
	                  if (ttScope.isOpen) {
	                    positionTooltip();
	                  }
	                })
	              );
	            }

	            function unregisterObservers() {
	              if (observers.length) {
	                angular.forEach(observers, function(observer) {
	                  observer();
	                });
	                observers.length = 0;
	              }
	            }

	            // hide tooltips/popovers for outsideClick trigger
	            function bodyHideTooltipBind(e) {
	              if (!ttScope || !ttScope.isOpen || !tooltip) {
	                return;
	              }
	              // make sure the tooltip/popover link or tool tooltip/popover itself were not clicked
	              if (!element[0].contains(e.target) && !tooltip[0].contains(e.target)) {
	                hideTooltipBind();
	              }
	            }

	            var unregisterTriggers = function() {
	              triggers.show.forEach(function(trigger) {
	                if (trigger === 'outsideClick') {
	                  element.off('click', toggleTooltipBind);
	                } else {
	                  element.off(trigger, showTooltipBind);
	                  element.off(trigger, toggleTooltipBind);
	                }
	              });
	              triggers.hide.forEach(function(trigger) {
	                if (trigger === 'outsideClick') {
	                  $document.off('click', bodyHideTooltipBind);
	                } else {
	                  element.off(trigger, hideTooltipBind);
	                }
	              });
	            };

	            function prepTriggers() {
	              var showTriggers = [], hideTriggers = [];
	              var val = scope.$eval(attrs[prefix + 'Trigger']);
	              unregisterTriggers();

	              if (angular.isObject(val)) {
	                Object.keys(val).forEach(function(key) {
	                  showTriggers.push(key);
	                  hideTriggers.push(val[key]);
	                });
	                triggers = {
	                  show: showTriggers,
	                  hide: hideTriggers
	                };
	              } else {
	                triggers = getTriggers(val);
	              }

	              if (triggers.show !== 'none') {
	                triggers.show.forEach(function(trigger, idx) {
	                  if (trigger === 'outsideClick') {
	                    element.on('click', toggleTooltipBind);
	                    $document.on('click', bodyHideTooltipBind);
	                  } else if (trigger === triggers.hide[idx]) {
	                    element.on(trigger, toggleTooltipBind);
	                  } else if (trigger) {
	                    element.on(trigger, showTooltipBind);
	                    element.on(triggers.hide[idx], hideTooltipBind);
	                  }

	                  element.on('keypress', function(e) {
	                    if (e.which === 27) {
	                      hideTooltipBind();
	                    }
	                  });
	                });
	              }
	            }

	            prepTriggers();

	            var animation = scope.$eval(attrs[prefix + 'Animation']);
	            ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;

	            var appendToBodyVal;
	            var appendKey = prefix + 'AppendToBody';
	            if (appendKey in attrs && attrs[appendKey] === undefined) {
	              appendToBodyVal = true;
	            } else {
	              appendToBodyVal = scope.$eval(attrs[appendKey]);
	            }

	            appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;

	            // Make sure tooltip is destroyed and removed.
	            scope.$on('$destroy', function onDestroyTooltip() {
	              unregisterTriggers();
	              removeTooltip();
	              ttScope = null;
	            });
	          };
	        }
	      };
	    };
	  }];
	})

	// This is mostly ngInclude code but with a custom scope
	.directive('uibTooltipTemplateTransclude', [
	         '$animate', '$sce', '$compile', '$templateRequest',
	function ($animate, $sce, $compile, $templateRequest) {
	  return {
	    link: function(scope, elem, attrs) {
	      var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);

	      var changeCounter = 0,
	        currentScope,
	        previousElement,
	        currentElement;

	      var cleanupLastIncludeContent = function() {
	        if (previousElement) {
	          previousElement.remove();
	          previousElement = null;
	        }

	        if (currentScope) {
	          currentScope.$destroy();
	          currentScope = null;
	        }

	        if (currentElement) {
	          $animate.leave(currentElement).then(function() {
	            previousElement = null;
	          });
	          previousElement = currentElement;
	          currentElement = null;
	        }
	      };

	      scope.$watch($sce.parseAsResourceUrl(attrs.uibTooltipTemplateTransclude), function(src) {
	        var thisChangeId = ++changeCounter;

	        if (src) {
	          //set the 2nd param to true to ignore the template request error so that the inner
	          //contents and scope can be cleaned up.
	          $templateRequest(src, true).then(function(response) {
	            if (thisChangeId !== changeCounter) { return; }
	            var newScope = origScope.$new();
	            var template = response;

	            var clone = $compile(template)(newScope, function(clone) {
	              cleanupLastIncludeContent();
	              $animate.enter(clone, elem);
	            });

	            currentScope = newScope;
	            currentElement = clone;

	            currentScope.$emit('$includeContentLoaded', src);
	          }, function() {
	            if (thisChangeId === changeCounter) {
	              cleanupLastIncludeContent();
	              scope.$emit('$includeContentError', src);
	            }
	          });
	          scope.$emit('$includeContentRequested', src);
	        } else {
	          cleanupLastIncludeContent();
	        }
	      });

	      scope.$on('$destroy', cleanupLastIncludeContent);
	    }
	  };
	}])

	/**
	 * Note that it's intentional that these classes are *not* applied through $animate.
	 * They must not be animated as they're expected to be present on the tooltip on
	 * initialization.
	 */
	.directive('uibTooltipClasses', ['$uibPosition', function($uibPosition) {
	  return {
	    restrict: 'A',
	    link: function(scope, element, attrs) {
	      // need to set the primary position so the
	      // arrow has space during position measure.
	      // tooltip.positionTooltip()
	      if (scope.placement) {
	        // // There are no top-left etc... classes
	        // // in TWBS, so we need the primary position.
	        var position = $uibPosition.parsePlacement(scope.placement);
	        element.addClass(position[0]);
	      }

	      if (scope.popupClass) {
	        element.addClass(scope.popupClass);
	      }

	      if (scope.animation) {
	        element.addClass(attrs.tooltipAnimationClass);
	      }
	    }
	  };
	}])

	.directive('uibTooltipPopup', function() {
	  return {
	    restrict: 'A',
	    scope: { content: '@' },
	    templateUrl: 'uib/template/tooltip/tooltip-popup.html'
	  };
	})

	.directive('uibTooltip', [ '$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibTooltip', 'tooltip', 'mouseenter');
	}])

	.directive('uibTooltipTemplatePopup', function() {
	  return {
	    restrict: 'A',
	    scope: { contentExp: '&', originScope: '&' },
	    templateUrl: 'uib/template/tooltip/tooltip-template-popup.html'
	  };
	})

	.directive('uibTooltipTemplate', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibTooltipTemplate', 'tooltip', 'mouseenter', {
	    useContentExp: true
	  });
	}])

	.directive('uibTooltipHtmlPopup', function() {
	  return {
	    restrict: 'A',
	    scope: { contentExp: '&' },
	    templateUrl: 'uib/template/tooltip/tooltip-html-popup.html'
	  };
	})

	.directive('uibTooltipHtml', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibTooltipHtml', 'tooltip', 'mouseenter', {
	    useContentExp: true
	  });
	}]);

	/**
	 * The following features are still outstanding: popup delay, animation as a
	 * function, placement as a function, inside, support for more triggers than
	 * just mouse enter/leave, and selector delegatation.
	 */
	angular.module('ui.bootstrap.popover', ['ui.bootstrap.tooltip'])

	.directive('uibPopoverTemplatePopup', function() {
	  return {
	    restrict: 'A',
	    scope: { uibTitle: '@', contentExp: '&', originScope: '&' },
	    templateUrl: 'uib/template/popover/popover-template.html'
	  };
	})

	.directive('uibPopoverTemplate', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibPopoverTemplate', 'popover', 'click', {
	    useContentExp: true
	  });
	}])

	.directive('uibPopoverHtmlPopup', function() {
	  return {
	    restrict: 'A',
	    scope: { contentExp: '&', uibTitle: '@' },
	    templateUrl: 'uib/template/popover/popover-html.html'
	  };
	})

	.directive('uibPopoverHtml', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibPopoverHtml', 'popover', 'click', {
	    useContentExp: true
	  });
	}])

	.directive('uibPopoverPopup', function() {
	  return {
	    restrict: 'A',
	    scope: { uibTitle: '@', content: '@' },
	    templateUrl: 'uib/template/popover/popover.html'
	  };
	})

	.directive('uibPopover', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibPopover', 'popover', 'click');
	}]);

	angular.module('ui.bootstrap.progressbar', [])

	.constant('uibProgressConfig', {
	  animate: true,
	  max: 100
	})

	.controller('UibProgressController', ['$scope', '$attrs', 'uibProgressConfig', function($scope, $attrs, progressConfig) {
	  var self = this,
	      animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;

	  this.bars = [];
	  $scope.max = getMaxOrDefault();

	  this.addBar = function(bar, element, attrs) {
	    if (!animate) {
	      element.css({'transition': 'none'});
	    }

	    this.bars.push(bar);

	    bar.max = getMaxOrDefault();
	    bar.title = attrs && angular.isDefined(attrs.title) ? attrs.title : 'progressbar';

	    bar.$watch('value', function(value) {
	      bar.recalculatePercentage();
	    });

	    bar.recalculatePercentage = function() {
	      var totalPercentage = self.bars.reduce(function(total, bar) {
	        bar.percent = +(100 * bar.value / bar.max).toFixed(2);
	        return total + bar.percent;
	      }, 0);

	      if (totalPercentage > 100) {
	        bar.percent -= totalPercentage - 100;
	      }
	    };

	    bar.$on('$destroy', function() {
	      element = null;
	      self.removeBar(bar);
	    });
	  };

	  this.removeBar = function(bar) {
	    this.bars.splice(this.bars.indexOf(bar), 1);
	    this.bars.forEach(function (bar) {
	      bar.recalculatePercentage();
	    });
	  };

	  //$attrs.$observe('maxParam', function(maxParam) {
	  $scope.$watch('maxParam', function(maxParam) {
	    self.bars.forEach(function(bar) {
	      bar.max = getMaxOrDefault();
	      bar.recalculatePercentage();
	    });
	  });

	  function getMaxOrDefault () {
	    return angular.isDefined($scope.maxParam) ? $scope.maxParam : progressConfig.max;
	  }
	}])

	.directive('uibProgress', function() {
	  return {
	    replace: true,
	    transclude: true,
	    controller: 'UibProgressController',
	    require: 'uibProgress',
	    scope: {
	      maxParam: '=?max'
	    },
	    templateUrl: 'uib/template/progressbar/progress.html'
	  };
	})

	.directive('uibBar', function() {
	  return {
	    replace: true,
	    transclude: true,
	    require: '^uibProgress',
	    scope: {
	      value: '=',
	      type: '@'
	    },
	    templateUrl: 'uib/template/progressbar/bar.html',
	    link: function(scope, element, attrs, progressCtrl) {
	      progressCtrl.addBar(scope, element, attrs);
	    }
	  };
	})

	.directive('uibProgressbar', function() {
	  return {
	    replace: true,
	    transclude: true,
	    controller: 'UibProgressController',
	    scope: {
	      value: '=',
	      maxParam: '=?max',
	      type: '@'
	    },
	    templateUrl: 'uib/template/progressbar/progressbar.html',
	    link: function(scope, element, attrs, progressCtrl) {
	      progressCtrl.addBar(scope, angular.element(element.children()[0]), {title: attrs.title});
	    }
	  };
	});

	angular.module('ui.bootstrap.rating', [])

	.constant('uibRatingConfig', {
	  max: 5,
	  stateOn: null,
	  stateOff: null,
	  enableReset: true,
	  titles: ['one', 'two', 'three', 'four', 'five']
	})

	.controller('UibRatingController', ['$scope', '$attrs', 'uibRatingConfig', function($scope, $attrs, ratingConfig) {
	  var ngModelCtrl = { $setViewValue: angular.noop },
	    self = this;

	  this.init = function(ngModelCtrl_) {
	    ngModelCtrl = ngModelCtrl_;
	    ngModelCtrl.$render = this.render;

	    ngModelCtrl.$formatters.push(function(value) {
	      if (angular.isNumber(value) && value << 0 !== value) {
	        value = Math.round(value);
	      }

	      return value;
	    });

	    this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
	    this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;
	    this.enableReset = angular.isDefined($attrs.enableReset) ?
	      $scope.$parent.$eval($attrs.enableReset) : ratingConfig.enableReset;
	    var tmpTitles = angular.isDefined($attrs.titles) ? $scope.$parent.$eval($attrs.titles) : ratingConfig.titles;
	    this.titles = angular.isArray(tmpTitles) && tmpTitles.length > 0 ?
	      tmpTitles : ratingConfig.titles;

	    var ratingStates = angular.isDefined($attrs.ratingStates) ?
	      $scope.$parent.$eval($attrs.ratingStates) :
	      new Array(angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max);
	    $scope.range = this.buildTemplateObjects(ratingStates);
	  };

	  this.buildTemplateObjects = function(states) {
	    for (var i = 0, n = states.length; i < n; i++) {
	      states[i] = angular.extend({ index: i }, { stateOn: this.stateOn, stateOff: this.stateOff, title: this.getTitle(i) }, states[i]);
	    }
	    return states;
	  };

	  this.getTitle = function(index) {
	    if (index >= this.titles.length) {
	      return index + 1;
	    }

	    return this.titles[index];
	  };

	  $scope.rate = function(value) {
	    if (!$scope.readonly && value >= 0 && value <= $scope.range.length) {
	      var newViewValue = self.enableReset && ngModelCtrl.$viewValue === value ? 0 : value;
	      ngModelCtrl.$setViewValue(newViewValue);
	      ngModelCtrl.$render();
	    }
	  };

	  $scope.enter = function(value) {
	    if (!$scope.readonly) {
	      $scope.value = value;
	    }
	    $scope.onHover({value: value});
	  };

	  $scope.reset = function() {
	    $scope.value = ngModelCtrl.$viewValue;
	    $scope.onLeave();
	  };

	  $scope.onKeydown = function(evt) {
	    if (/(37|38|39|40)/.test(evt.which)) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      $scope.rate($scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1));
	    }
	  };

	  this.render = function() {
	    $scope.value = ngModelCtrl.$viewValue;
	    $scope.title = self.getTitle($scope.value - 1);
	  };
	}])

	.directive('uibRating', function() {
	  return {
	    require: ['uibRating', 'ngModel'],
	    restrict: 'A',
	    scope: {
	      readonly: '=?readOnly',
	      onHover: '&',
	      onLeave: '&'
	    },
	    controller: 'UibRatingController',
	    templateUrl: 'uib/template/rating/rating.html',
	    link: function(scope, element, attrs, ctrls) {
	      var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];
	      ratingCtrl.init(ngModelCtrl);
	    }
	  };
	});

	angular.module('ui.bootstrap.tabs', [])

	.controller('UibTabsetController', ['$scope', function ($scope) {
	  var ctrl = this,
	    oldIndex;
	  ctrl.tabs = [];

	  ctrl.select = function(index, evt) {
	    if (!destroyed) {
	      var previousIndex = findTabIndex(oldIndex);
	      var previousSelected = ctrl.tabs[previousIndex];
	      if (previousSelected) {
	        previousSelected.tab.onDeselect({
	          $event: evt,
	          $selectedIndex: index
	        });
	        if (evt && evt.isDefaultPrevented()) {
	          return;
	        }
	        previousSelected.tab.active = false;
	      }

	      var selected = ctrl.tabs[index];
	      if (selected) {
	        selected.tab.onSelect({
	          $event: evt
	        });
	        selected.tab.active = true;
	        ctrl.active = selected.index;
	        oldIndex = selected.index;
	      } else if (!selected && angular.isDefined(oldIndex)) {
	        ctrl.active = null;
	        oldIndex = null;
	      }
	    }
	  };

	  ctrl.addTab = function addTab(tab) {
	    ctrl.tabs.push({
	      tab: tab,
	      index: tab.index
	    });
	    ctrl.tabs.sort(function(t1, t2) {
	      if (t1.index > t2.index) {
	        return 1;
	      }

	      if (t1.index < t2.index) {
	        return -1;
	      }

	      return 0;
	    });

	    if (tab.index === ctrl.active || !angular.isDefined(ctrl.active) && ctrl.tabs.length === 1) {
	      var newActiveIndex = findTabIndex(tab.index);
	      ctrl.select(newActiveIndex);
	    }
	  };

	  ctrl.removeTab = function removeTab(tab) {
	    var index;
	    for (var i = 0; i < ctrl.tabs.length; i++) {
	      if (ctrl.tabs[i].tab === tab) {
	        index = i;
	        break;
	      }
	    }

	    if (ctrl.tabs[index].index === ctrl.active) {
	      var newActiveTabIndex = index === ctrl.tabs.length - 1 ?
	        index - 1 : index + 1 % ctrl.tabs.length;
	      ctrl.select(newActiveTabIndex);
	    }

	    ctrl.tabs.splice(index, 1);
	  };

	  $scope.$watch('tabset.active', function(val) {
	    if (angular.isDefined(val) && val !== oldIndex) {
	      ctrl.select(findTabIndex(val));
	    }
	  });

	  var destroyed;
	  $scope.$on('$destroy', function() {
	    destroyed = true;
	  });

	  function findTabIndex(index) {
	    for (var i = 0; i < ctrl.tabs.length; i++) {
	      if (ctrl.tabs[i].index === index) {
	        return i;
	      }
	    }
	  }
	}])

	.directive('uibTabset', function() {
	  return {
	    transclude: true,
	    replace: true,
	    scope: {},
	    bindToController: {
	      active: '=?',
	      type: '@'
	    },
	    controller: 'UibTabsetController',
	    controllerAs: 'tabset',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/tabs/tabset.html';
	    },
	    link: function(scope, element, attrs) {
	      scope.vertical = angular.isDefined(attrs.vertical) ?
	        scope.$parent.$eval(attrs.vertical) : false;
	      scope.justified = angular.isDefined(attrs.justified) ?
	        scope.$parent.$eval(attrs.justified) : false;
	    }
	  };
	})

	.directive('uibTab', ['$parse', function($parse) {
	  return {
	    require: '^uibTabset',
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/tabs/tab.html';
	    },
	    transclude: true,
	    scope: {
	      heading: '@',
	      index: '=?',
	      classes: '@?',
	      onSelect: '&select', //This callback is called in contentHeadingTransclude
	                          //once it inserts the tab's content into the dom
	      onDeselect: '&deselect'
	    },
	    controller: function() {
	      //Empty controller so other directives can require being 'under' a tab
	    },
	    controllerAs: 'tab',
	    link: function(scope, elm, attrs, tabsetCtrl, transclude) {
	      scope.disabled = false;
	      if (attrs.disable) {
	        scope.$parent.$watch($parse(attrs.disable), function(value) {
	          scope.disabled = !! value;
	        });
	      }

	      if (angular.isUndefined(attrs.index)) {
	        if (tabsetCtrl.tabs && tabsetCtrl.tabs.length) {
	          scope.index = Math.max.apply(null, tabsetCtrl.tabs.map(function(t) { return t.index; })) + 1;
	        } else {
	          scope.index = 0;
	        }
	      }

	      if (angular.isUndefined(attrs.classes)) {
	        scope.classes = '';
	      }

	      scope.select = function(evt) {
	        if (!scope.disabled) {
	          var index;
	          for (var i = 0; i < tabsetCtrl.tabs.length; i++) {
	            if (tabsetCtrl.tabs[i].tab === scope) {
	              index = i;
	              break;
	            }
	          }

	          tabsetCtrl.select(index, evt);
	        }
	      };

	      tabsetCtrl.addTab(scope);
	      scope.$on('$destroy', function() {
	        tabsetCtrl.removeTab(scope);
	      });

	      //We need to transclude later, once the content container is ready.
	      //when this link happens, we're inside a tab heading.
	      scope.$transcludeFn = transclude;
	    }
	  };
	}])

	.directive('uibTabHeadingTransclude', function() {
	  return {
	    restrict: 'A',
	    require: '^uibTab',
	    link: function(scope, elm) {
	      scope.$watch('headingElement', function updateHeadingElement(heading) {
	        if (heading) {
	          elm.html('');
	          elm.append(heading);
	        }
	      });
	    }
	  };
	})

	.directive('uibTabContentTransclude', function() {
	  return {
	    restrict: 'A',
	    require: '^uibTabset',
	    link: function(scope, elm, attrs) {
	      var tab = scope.$eval(attrs.uibTabContentTransclude).tab;

	      //Now our tab is ready to be transcluded: both the tab heading area
	      //and the tab content area are loaded.  Transclude 'em both.
	      tab.$transcludeFn(tab.$parent, function(contents) {
	        angular.forEach(contents, function(node) {
	          if (isTabHeading(node)) {
	            //Let tabHeadingTransclude know.
	            tab.headingElement = node;
	          } else {
	            elm.append(node);
	          }
	        });
	      });
	    }
	  };

	  function isTabHeading(node) {
	    return node.tagName && (
	      node.hasAttribute('uib-tab-heading') ||
	      node.hasAttribute('data-uib-tab-heading') ||
	      node.hasAttribute('x-uib-tab-heading') ||
	      node.tagName.toLowerCase() === 'uib-tab-heading' ||
	      node.tagName.toLowerCase() === 'data-uib-tab-heading' ||
	      node.tagName.toLowerCase() === 'x-uib-tab-heading' ||
	      node.tagName.toLowerCase() === 'uib:tab-heading'
	    );
	  }
	});

	angular.module('ui.bootstrap.timepicker', [])

	.constant('uibTimepickerConfig', {
	  hourStep: 1,
	  minuteStep: 1,
	  secondStep: 1,
	  showMeridian: true,
	  showSeconds: false,
	  meridians: null,
	  readonlyInput: false,
	  mousewheel: true,
	  arrowkeys: true,
	  showSpinners: true,
	  templateUrl: 'uib/template/timepicker/timepicker.html'
	})

	.controller('UibTimepickerController', ['$scope', '$element', '$attrs', '$parse', '$log', '$locale', 'uibTimepickerConfig', function($scope, $element, $attrs, $parse, $log, $locale, timepickerConfig) {
	  var hoursModelCtrl, minutesModelCtrl, secondsModelCtrl;
	  var selected = new Date(),
	    watchers = [],
	    ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
	    meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS,
	    padHours = angular.isDefined($attrs.padHours) ? $scope.$parent.$eval($attrs.padHours) : true;

	  $scope.tabindex = angular.isDefined($attrs.tabindex) ? $attrs.tabindex : 0;
	  $element.removeAttr('tabindex');

	  this.init = function(ngModelCtrl_, inputs) {
	    ngModelCtrl = ngModelCtrl_;
	    ngModelCtrl.$render = this.render;

	    ngModelCtrl.$formatters.unshift(function(modelValue) {
	      return modelValue ? new Date(modelValue) : null;
	    });

	    var hoursInputEl = inputs.eq(0),
	        minutesInputEl = inputs.eq(1),
	        secondsInputEl = inputs.eq(2);

	    hoursModelCtrl = hoursInputEl.controller('ngModel');
	    minutesModelCtrl = minutesInputEl.controller('ngModel');
	    secondsModelCtrl = secondsInputEl.controller('ngModel');

	    var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;

	    if (mousewheel) {
	      this.setupMousewheelEvents(hoursInputEl, minutesInputEl, secondsInputEl);
	    }

	    var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;
	    if (arrowkeys) {
	      this.setupArrowkeyEvents(hoursInputEl, minutesInputEl, secondsInputEl);
	    }

	    $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
	    this.setupInputEvents(hoursInputEl, minutesInputEl, secondsInputEl);
	  };

	  var hourStep = timepickerConfig.hourStep;
	  if ($attrs.hourStep) {
	    watchers.push($scope.$parent.$watch($parse($attrs.hourStep), function(value) {
	      hourStep = +value;
	    }));
	  }

	  var minuteStep = timepickerConfig.minuteStep;
	  if ($attrs.minuteStep) {
	    watchers.push($scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
	      minuteStep = +value;
	    }));
	  }

	  var min;
	  watchers.push($scope.$parent.$watch($parse($attrs.min), function(value) {
	    var dt = new Date(value);
	    min = isNaN(dt) ? undefined : dt;
	  }));

	  var max;
	  watchers.push($scope.$parent.$watch($parse($attrs.max), function(value) {
	    var dt = new Date(value);
	    max = isNaN(dt) ? undefined : dt;
	  }));

	  var disabled = false;
	  if ($attrs.ngDisabled) {
	    watchers.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(value) {
	      disabled = value;
	    }));
	  }

	  $scope.noIncrementHours = function() {
	    var incrementedSelected = addMinutes(selected, hourStep * 60);
	    return disabled || incrementedSelected > max ||
	      incrementedSelected < selected && incrementedSelected < min;
	  };

	  $scope.noDecrementHours = function() {
	    var decrementedSelected = addMinutes(selected, -hourStep * 60);
	    return disabled || decrementedSelected < min ||
	      decrementedSelected > selected && decrementedSelected > max;
	  };

	  $scope.noIncrementMinutes = function() {
	    var incrementedSelected = addMinutes(selected, minuteStep);
	    return disabled || incrementedSelected > max ||
	      incrementedSelected < selected && incrementedSelected < min;
	  };

	  $scope.noDecrementMinutes = function() {
	    var decrementedSelected = addMinutes(selected, -minuteStep);
	    return disabled || decrementedSelected < min ||
	      decrementedSelected > selected && decrementedSelected > max;
	  };

	  $scope.noIncrementSeconds = function() {
	    var incrementedSelected = addSeconds(selected, secondStep);
	    return disabled || incrementedSelected > max ||
	      incrementedSelected < selected && incrementedSelected < min;
	  };

	  $scope.noDecrementSeconds = function() {
	    var decrementedSelected = addSeconds(selected, -secondStep);
	    return disabled || decrementedSelected < min ||
	      decrementedSelected > selected && decrementedSelected > max;
	  };

	  $scope.noToggleMeridian = function() {
	    if (selected.getHours() < 12) {
	      return disabled || addMinutes(selected, 12 * 60) > max;
	    }

	    return disabled || addMinutes(selected, -12 * 60) < min;
	  };

	  var secondStep = timepickerConfig.secondStep;
	  if ($attrs.secondStep) {
	    watchers.push($scope.$parent.$watch($parse($attrs.secondStep), function(value) {
	      secondStep = +value;
	    }));
	  }

	  $scope.showSeconds = timepickerConfig.showSeconds;
	  if ($attrs.showSeconds) {
	    watchers.push($scope.$parent.$watch($parse($attrs.showSeconds), function(value) {
	      $scope.showSeconds = !!value;
	    }));
	  }

	  // 12H / 24H mode
	  $scope.showMeridian = timepickerConfig.showMeridian;
	  if ($attrs.showMeridian) {
	    watchers.push($scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
	      $scope.showMeridian = !!value;

	      if (ngModelCtrl.$error.time) {
	        // Evaluate from template
	        var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
	        if (angular.isDefined(hours) && angular.isDefined(minutes)) {
	          selected.setHours(hours);
	          refresh();
	        }
	      } else {
	        updateTemplate();
	      }
	    }));
	  }

	  // Get $scope.hours in 24H mode if valid
	  function getHoursFromTemplate() {
	    var hours = +$scope.hours;
	    var valid = $scope.showMeridian ? hours > 0 && hours < 13 :
	      hours >= 0 && hours < 24;
	    if (!valid || $scope.hours === '') {
	      return undefined;
	    }

	    if ($scope.showMeridian) {
	      if (hours === 12) {
	        hours = 0;
	      }
	      if ($scope.meridian === meridians[1]) {
	        hours = hours + 12;
	      }
	    }
	    return hours;
	  }

	  function getMinutesFromTemplate() {
	    var minutes = +$scope.minutes;
	    var valid = minutes >= 0 && minutes < 60;
	    if (!valid || $scope.minutes === '') {
	      return undefined;
	    }
	    return minutes;
	  }

	  function getSecondsFromTemplate() {
	    var seconds = +$scope.seconds;
	    return seconds >= 0 && seconds < 60 ? seconds : undefined;
	  }

	  function pad(value, noPad) {
	    if (value === null) {
	      return '';
	    }

	    return angular.isDefined(value) && value.toString().length < 2 && !noPad ?
	      '0' + value : value.toString();
	  }

	  // Respond on mousewheel spin
	  this.setupMousewheelEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
	    var isScrollingUp = function(e) {
	      if (e.originalEvent) {
	        e = e.originalEvent;
	      }
	      //pick correct delta variable depending on event
	      var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;
	      return e.detail || delta > 0;
	    };

	    hoursInputEl.on('mousewheel wheel', function(e) {
	      if (!disabled) {
	        $scope.$apply(isScrollingUp(e) ? $scope.incrementHours() : $scope.decrementHours());
	      }
	      e.preventDefault();
	    });

	    minutesInputEl.on('mousewheel wheel', function(e) {
	      if (!disabled) {
	        $scope.$apply(isScrollingUp(e) ? $scope.incrementMinutes() : $scope.decrementMinutes());
	      }
	      e.preventDefault();
	    });

	     secondsInputEl.on('mousewheel wheel', function(e) {
	      if (!disabled) {
	        $scope.$apply(isScrollingUp(e) ? $scope.incrementSeconds() : $scope.decrementSeconds());
	      }
	      e.preventDefault();
	    });
	  };

	  // Respond on up/down arrowkeys
	  this.setupArrowkeyEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
	    hoursInputEl.on('keydown', function(e) {
	      if (!disabled) {
	        if (e.which === 38) { // up
	          e.preventDefault();
	          $scope.incrementHours();
	          $scope.$apply();
	        } else if (e.which === 40) { // down
	          e.preventDefault();
	          $scope.decrementHours();
	          $scope.$apply();
	        }
	      }
	    });

	    minutesInputEl.on('keydown', function(e) {
	      if (!disabled) {
	        if (e.which === 38) { // up
	          e.preventDefault();
	          $scope.incrementMinutes();
	          $scope.$apply();
	        } else if (e.which === 40) { // down
	          e.preventDefault();
	          $scope.decrementMinutes();
	          $scope.$apply();
	        }
	      }
	    });

	    secondsInputEl.on('keydown', function(e) {
	      if (!disabled) {
	        if (e.which === 38) { // up
	          e.preventDefault();
	          $scope.incrementSeconds();
	          $scope.$apply();
	        } else if (e.which === 40) { // down
	          e.preventDefault();
	          $scope.decrementSeconds();
	          $scope.$apply();
	        }
	      }
	    });
	  };

	  this.setupInputEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
	    if ($scope.readonlyInput) {
	      $scope.updateHours = angular.noop;
	      $scope.updateMinutes = angular.noop;
	      $scope.updateSeconds = angular.noop;
	      return;
	    }

	    var invalidate = function(invalidHours, invalidMinutes, invalidSeconds) {
	      ngModelCtrl.$setViewValue(null);
	      ngModelCtrl.$setValidity('time', false);
	      if (angular.isDefined(invalidHours)) {
	        $scope.invalidHours = invalidHours;
	        if (hoursModelCtrl) {
	          hoursModelCtrl.$setValidity('hours', false);
	        }
	      }

	      if (angular.isDefined(invalidMinutes)) {
	        $scope.invalidMinutes = invalidMinutes;
	        if (minutesModelCtrl) {
	          minutesModelCtrl.$setValidity('minutes', false);
	        }
	      }

	      if (angular.isDefined(invalidSeconds)) {
	        $scope.invalidSeconds = invalidSeconds;
	        if (secondsModelCtrl) {
	          secondsModelCtrl.$setValidity('seconds', false);
	        }
	      }
	    };

	    $scope.updateHours = function() {
	      var hours = getHoursFromTemplate(),
	        minutes = getMinutesFromTemplate();

	      ngModelCtrl.$setDirty();

	      if (angular.isDefined(hours) && angular.isDefined(minutes)) {
	        selected.setHours(hours);
	        selected.setMinutes(minutes);
	        if (selected < min || selected > max) {
	          invalidate(true);
	        } else {
	          refresh('h');
	        }
	      } else {
	        invalidate(true);
	      }
	    };

	    hoursInputEl.on('blur', function(e) {
	      ngModelCtrl.$setTouched();
	      if (modelIsEmpty()) {
	        makeValid();
	      } else if ($scope.hours === null || $scope.hours === '') {
	        invalidate(true);
	      } else if (!$scope.invalidHours && $scope.hours < 10) {
	        $scope.$apply(function() {
	          $scope.hours = pad($scope.hours, !padHours);
	        });
	      }
	    });

	    $scope.updateMinutes = function() {
	      var minutes = getMinutesFromTemplate(),
	        hours = getHoursFromTemplate();

	      ngModelCtrl.$setDirty();

	      if (angular.isDefined(minutes) && angular.isDefined(hours)) {
	        selected.setHours(hours);
	        selected.setMinutes(minutes);
	        if (selected < min || selected > max) {
	          invalidate(undefined, true);
	        } else {
	          refresh('m');
	        }
	      } else {
	        invalidate(undefined, true);
	      }
	    };

	    minutesInputEl.on('blur', function(e) {
	      ngModelCtrl.$setTouched();
	      if (modelIsEmpty()) {
	        makeValid();
	      } else if ($scope.minutes === null) {
	        invalidate(undefined, true);
	      } else if (!$scope.invalidMinutes && $scope.minutes < 10) {
	        $scope.$apply(function() {
	          $scope.minutes = pad($scope.minutes);
	        });
	      }
	    });

	    $scope.updateSeconds = function() {
	      var seconds = getSecondsFromTemplate();

	      ngModelCtrl.$setDirty();

	      if (angular.isDefined(seconds)) {
	        selected.setSeconds(seconds);
	        refresh('s');
	      } else {
	        invalidate(undefined, undefined, true);
	      }
	    };

	    secondsInputEl.on('blur', function(e) {
	      if (modelIsEmpty()) {
	        makeValid();
	      } else if (!$scope.invalidSeconds && $scope.seconds < 10) {
	        $scope.$apply( function() {
	          $scope.seconds = pad($scope.seconds);
	        });
	      }
	    });

	  };

	  this.render = function() {
	    var date = ngModelCtrl.$viewValue;

	    if (isNaN(date)) {
	      ngModelCtrl.$setValidity('time', false);
	      $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
	    } else {
	      if (date) {
	        selected = date;
	      }

	      if (selected < min || selected > max) {
	        ngModelCtrl.$setValidity('time', false);
	        $scope.invalidHours = true;
	        $scope.invalidMinutes = true;
	      } else {
	        makeValid();
	      }
	      updateTemplate();
	    }
	  };

	  // Call internally when we know that model is valid.
	  function refresh(keyboardChange) {
	    makeValid();
	    ngModelCtrl.$setViewValue(new Date(selected));
	    updateTemplate(keyboardChange);
	  }

	  function makeValid() {
	    if (hoursModelCtrl) {
	      hoursModelCtrl.$setValidity('hours', true);
	    }

	    if (minutesModelCtrl) {
	      minutesModelCtrl.$setValidity('minutes', true);
	    }

	    if (secondsModelCtrl) {
	      secondsModelCtrl.$setValidity('seconds', true);
	    }

	    ngModelCtrl.$setValidity('time', true);
	    $scope.invalidHours = false;
	    $scope.invalidMinutes = false;
	    $scope.invalidSeconds = false;
	  }

	  function updateTemplate(keyboardChange) {
	    if (!ngModelCtrl.$modelValue) {
	      $scope.hours = null;
	      $scope.minutes = null;
	      $scope.seconds = null;
	      $scope.meridian = meridians[0];
	    } else {
	      var hours = selected.getHours(),
	        minutes = selected.getMinutes(),
	        seconds = selected.getSeconds();

	      if ($scope.showMeridian) {
	        hours = hours === 0 || hours === 12 ? 12 : hours % 12; // Convert 24 to 12 hour system
	      }

	      $scope.hours = keyboardChange === 'h' ? hours : pad(hours, !padHours);
	      if (keyboardChange !== 'm') {
	        $scope.minutes = pad(minutes);
	      }
	      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];

	      if (keyboardChange !== 's') {
	        $scope.seconds = pad(seconds);
	      }
	      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
	    }
	  }

	  function addSecondsToSelected(seconds) {
	    selected = addSeconds(selected, seconds);
	    refresh();
	  }

	  function addMinutes(selected, minutes) {
	    return addSeconds(selected, minutes*60);
	  }

	  function addSeconds(date, seconds) {
	    var dt = new Date(date.getTime() + seconds * 1000);
	    var newDate = new Date(date);
	    newDate.setHours(dt.getHours(), dt.getMinutes(), dt.getSeconds());
	    return newDate;
	  }

	  function modelIsEmpty() {
	    return ($scope.hours === null || $scope.hours === '') &&
	      ($scope.minutes === null || $scope.minutes === '') &&
	      (!$scope.showSeconds || $scope.showSeconds && ($scope.seconds === null || $scope.seconds === ''));
	  }

	  $scope.showSpinners = angular.isDefined($attrs.showSpinners) ?
	    $scope.$parent.$eval($attrs.showSpinners) : timepickerConfig.showSpinners;

	  $scope.incrementHours = function() {
	    if (!$scope.noIncrementHours()) {
	      addSecondsToSelected(hourStep * 60 * 60);
	    }
	  };

	  $scope.decrementHours = function() {
	    if (!$scope.noDecrementHours()) {
	      addSecondsToSelected(-hourStep * 60 * 60);
	    }
	  };

	  $scope.incrementMinutes = function() {
	    if (!$scope.noIncrementMinutes()) {
	      addSecondsToSelected(minuteStep * 60);
	    }
	  };

	  $scope.decrementMinutes = function() {
	    if (!$scope.noDecrementMinutes()) {
	      addSecondsToSelected(-minuteStep * 60);
	    }
	  };

	  $scope.incrementSeconds = function() {
	    if (!$scope.noIncrementSeconds()) {
	      addSecondsToSelected(secondStep);
	    }
	  };

	  $scope.decrementSeconds = function() {
	    if (!$scope.noDecrementSeconds()) {
	      addSecondsToSelected(-secondStep);
	    }
	  };

	  $scope.toggleMeridian = function() {
	    var minutes = getMinutesFromTemplate(),
	        hours = getHoursFromTemplate();

	    if (!$scope.noToggleMeridian()) {
	      if (angular.isDefined(minutes) && angular.isDefined(hours)) {
	        addSecondsToSelected(12 * 60 * (selected.getHours() < 12 ? 60 : -60));
	      } else {
	        $scope.meridian = $scope.meridian === meridians[0] ? meridians[1] : meridians[0];
	      }
	    }
	  };

	  $scope.blur = function() {
	    ngModelCtrl.$setTouched();
	  };

	  $scope.$on('$destroy', function() {
	    while (watchers.length) {
	      watchers.shift()();
	    }
	  });
	}])

	.directive('uibTimepicker', ['uibTimepickerConfig', function(uibTimepickerConfig) {
	  return {
	    require: ['uibTimepicker', '?^ngModel'],
	    restrict: 'A',
	    controller: 'UibTimepickerController',
	    controllerAs: 'timepicker',
	    scope: {},
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || uibTimepickerConfig.templateUrl;
	    },
	    link: function(scope, element, attrs, ctrls) {
	      var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if (ngModelCtrl) {
	        timepickerCtrl.init(ngModelCtrl, element.find('input'));
	      }
	    }
	  };
	}]);

	angular.module('ui.bootstrap.typeahead', ['ui.bootstrap.debounce', 'ui.bootstrap.position'])

	/**
	 * A helper service that can parse typeahead's syntax (string provided by users)
	 * Extracted to a separate service for ease of unit testing
	 */
	  .factory('uibTypeaheadParser', ['$parse', function($parse) {
	    //                      000001111111100000000000002222222200000000000000003333333333333330000000000044444444000
	    var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;
	    return {
	      parse: function(input) {
	        var match = input.match(TYPEAHEAD_REGEXP);
	        if (!match) {
	          throw new Error(
	            'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' +
	              ' but got "' + input + '".');
	        }

	        return {
	          itemName: match[3],
	          source: $parse(match[4]),
	          viewMapper: $parse(match[2] || match[1]),
	          modelMapper: $parse(match[1])
	        };
	      }
	    };
	  }])

	  .controller('UibTypeaheadController', ['$scope', '$element', '$attrs', '$compile', '$parse', '$q', '$timeout', '$document', '$window', '$rootScope', '$$debounce', '$uibPosition', 'uibTypeaheadParser',
	    function(originalScope, element, attrs, $compile, $parse, $q, $timeout, $document, $window, $rootScope, $$debounce, $position, typeaheadParser) {
	    var HOT_KEYS = [9, 13, 27, 38, 40];
	    var eventDebounceTime = 200;
	    var modelCtrl, ngModelOptions;
	    //SUPPORTED ATTRIBUTES (OPTIONS)

	    //minimal no of characters that needs to be entered before typeahead kicks-in
	    var minLength = originalScope.$eval(attrs.typeaheadMinLength);
	    if (!minLength && minLength !== 0) {
	      minLength = 1;
	    }

	    originalScope.$watch(attrs.typeaheadMinLength, function (newVal) {
	        minLength = !newVal && newVal !== 0 ? 1 : newVal;
	    });

	    //minimal wait time after last character typed before typeahead kicks-in
	    var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;

	    //should it restrict model values to the ones selected from the popup only?
	    var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;
	    originalScope.$watch(attrs.typeaheadEditable, function (newVal) {
	      isEditable = newVal !== false;
	    });

	    //binding to a variable that indicates if matches are being retrieved asynchronously
	    var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;

	    //a function to determine if an event should cause selection
	    var isSelectEvent = attrs.typeaheadShouldSelect ? $parse(attrs.typeaheadShouldSelect) : function(scope, vals) {
	      var evt = vals.$event;
	      return evt.which === 13 || evt.which === 9;
	    };

	    //a callback executed when a match is selected
	    var onSelectCallback = $parse(attrs.typeaheadOnSelect);

	    //should it select highlighted popup value when losing focus?
	    var isSelectOnBlur = angular.isDefined(attrs.typeaheadSelectOnBlur) ? originalScope.$eval(attrs.typeaheadSelectOnBlur) : false;

	    //binding to a variable that indicates if there were no results after the query is completed
	    var isNoResultsSetter = $parse(attrs.typeaheadNoResults).assign || angular.noop;

	    var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;

	    var appendToBody = attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;

	    var appendTo = attrs.typeaheadAppendTo ?
	      originalScope.$eval(attrs.typeaheadAppendTo) : null;

	    var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;

	    //If input matches an item of the list exactly, select it automatically
	    var selectOnExact = attrs.typeaheadSelectOnExact ? originalScope.$eval(attrs.typeaheadSelectOnExact) : false;

	    //binding to a variable that indicates if dropdown is open
	    var isOpenSetter = $parse(attrs.typeaheadIsOpen).assign || angular.noop;

	    var showHint = originalScope.$eval(attrs.typeaheadShowHint) || false;

	    //INTERNAL VARIABLES

	    //model setter executed upon match selection
	    var parsedModel = $parse(attrs.ngModel);
	    var invokeModelSetter = $parse(attrs.ngModel + '($$$p)');
	    var $setModelValue = function(scope, newValue) {
	      if (angular.isFunction(parsedModel(originalScope)) &&
	        ngModelOptions && ngModelOptions.$options && ngModelOptions.$options.getterSetter) {
	        return invokeModelSetter(scope, {$$$p: newValue});
	      }

	      return parsedModel.assign(scope, newValue);
	    };

	    //expressions used by typeahead
	    var parserResult = typeaheadParser.parse(attrs.uibTypeahead);

	    var hasFocus;

	    //Used to avoid bug in iOS webview where iOS keyboard does not fire
	    //mousedown & mouseup events
	    //Issue #3699
	    var selected;

	    //create a child scope for the typeahead directive so we are not polluting original scope
	    //with typeahead-specific data (matches, query etc.)
	    var scope = originalScope.$new();
	    var offDestroy = originalScope.$on('$destroy', function() {
	      scope.$destroy();
	    });
	    scope.$on('$destroy', offDestroy);

	    // WAI-ARIA
	    var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
	    element.attr({
	      'aria-autocomplete': 'list',
	      'aria-expanded': false,
	      'aria-owns': popupId
	    });

	    var inputsContainer, hintInputElem;
	    //add read-only input to show hint
	    if (showHint) {
	      inputsContainer = angular.element('<div></div>');
	      inputsContainer.css('position', 'relative');
	      element.after(inputsContainer);
	      hintInputElem = element.clone();
	      hintInputElem.attr('placeholder', '');
	      hintInputElem.attr('tabindex', '-1');
	      hintInputElem.val('');
	      hintInputElem.css({
	        'position': 'absolute',
	        'top': '0px',
	        'left': '0px',
	        'border-color': 'transparent',
	        'box-shadow': 'none',
	        'opacity': 1,
	        'background': 'none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)',
	        'color': '#999'
	      });
	      element.css({
	        'position': 'relative',
	        'vertical-align': 'top',
	        'background-color': 'transparent'
	      });

	      if (hintInputElem.attr('id')) {
	        hintInputElem.removeAttr('id'); // remove duplicate id if present.
	      }
	      inputsContainer.append(hintInputElem);
	      hintInputElem.after(element);
	    }

	    //pop-up element used to display matches
	    var popUpEl = angular.element('<div uib-typeahead-popup></div>');
	    popUpEl.attr({
	      id: popupId,
	      matches: 'matches',
	      active: 'activeIdx',
	      select: 'select(activeIdx, evt)',
	      'move-in-progress': 'moveInProgress',
	      query: 'query',
	      position: 'position',
	      'assign-is-open': 'assignIsOpen(isOpen)',
	      debounce: 'debounceUpdate'
	    });
	    //custom item template
	    if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
	      popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);
	    }

	    if (angular.isDefined(attrs.typeaheadPopupTemplateUrl)) {
	      popUpEl.attr('popup-template-url', attrs.typeaheadPopupTemplateUrl);
	    }

	    var resetHint = function() {
	      if (showHint) {
	        hintInputElem.val('');
	      }
	    };

	    var resetMatches = function() {
	      scope.matches = [];
	      scope.activeIdx = -1;
	      element.attr('aria-expanded', false);
	      resetHint();
	    };

	    var getMatchId = function(index) {
	      return popupId + '-option-' + index;
	    };

	    // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.
	    // This attribute is added or removed automatically when the `activeIdx` changes.
	    scope.$watch('activeIdx', function(index) {
	      if (index < 0) {
	        element.removeAttr('aria-activedescendant');
	      } else {
	        element.attr('aria-activedescendant', getMatchId(index));
	      }
	    });

	    var inputIsExactMatch = function(inputValue, index) {
	      if (scope.matches.length > index && inputValue) {
	        return inputValue.toUpperCase() === scope.matches[index].label.toUpperCase();
	      }

	      return false;
	    };

	    var getMatchesAsync = function(inputValue, evt) {
	      var locals = {$viewValue: inputValue};
	      isLoadingSetter(originalScope, true);
	      isNoResultsSetter(originalScope, false);
	      $q.when(parserResult.source(originalScope, locals)).then(function(matches) {
	        //it might happen that several async queries were in progress if a user were typing fast
	        //but we are interested only in responses that correspond to the current view value
	        var onCurrentRequest = inputValue === modelCtrl.$viewValue;
	        if (onCurrentRequest && hasFocus) {
	          if (matches && matches.length > 0) {
	            scope.activeIdx = focusFirst ? 0 : -1;
	            isNoResultsSetter(originalScope, false);
	            scope.matches.length = 0;

	            //transform labels
	            for (var i = 0; i < matches.length; i++) {
	              locals[parserResult.itemName] = matches[i];
	              scope.matches.push({
	                id: getMatchId(i),
	                label: parserResult.viewMapper(scope, locals),
	                model: matches[i]
	              });
	            }

	            scope.query = inputValue;
	            //position pop-up with matches - we need to re-calculate its position each time we are opening a window
	            //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
	            //due to other elements being rendered
	            recalculatePosition();

	            element.attr('aria-expanded', true);

	            //Select the single remaining option if user input matches
	            if (selectOnExact && scope.matches.length === 1 && inputIsExactMatch(inputValue, 0)) {
	              if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
	                $$debounce(function() {
	                  scope.select(0, evt);
	                }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate['default']);
	              } else {
	                scope.select(0, evt);
	              }
	            }

	            if (showHint) {
	              var firstLabel = scope.matches[0].label;
	              if (angular.isString(inputValue) &&
	                inputValue.length > 0 &&
	                firstLabel.slice(0, inputValue.length).toUpperCase() === inputValue.toUpperCase()) {
	                hintInputElem.val(inputValue + firstLabel.slice(inputValue.length));
	              } else {
	                hintInputElem.val('');
	              }
	            }
	          } else {
	            resetMatches();
	            isNoResultsSetter(originalScope, true);
	          }
	        }
	        if (onCurrentRequest) {
	          isLoadingSetter(originalScope, false);
	        }
	      }, function() {
	        resetMatches();
	        isLoadingSetter(originalScope, false);
	        isNoResultsSetter(originalScope, true);
	      });
	    };

	    // bind events only if appendToBody params exist - performance feature
	    if (appendToBody) {
	      angular.element($window).on('resize', fireRecalculating);
	      $document.find('body').on('scroll', fireRecalculating);
	    }

	    // Declare the debounced function outside recalculating for
	    // proper debouncing
	    var debouncedRecalculate = $$debounce(function() {
	      // if popup is visible
	      if (scope.matches.length) {
	        recalculatePosition();
	      }

	      scope.moveInProgress = false;
	    }, eventDebounceTime);

	    // Default progress type
	    scope.moveInProgress = false;

	    function fireRecalculating() {
	      if (!scope.moveInProgress) {
	        scope.moveInProgress = true;
	        scope.$digest();
	      }

	      debouncedRecalculate();
	    }

	    // recalculate actual position and set new values to scope
	    // after digest loop is popup in right position
	    function recalculatePosition() {
	      scope.position = appendToBody ? $position.offset(element) : $position.position(element);
	      scope.position.top += element.prop('offsetHeight');
	    }

	    //we need to propagate user's query so we can higlight matches
	    scope.query = undefined;

	    //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later
	    var timeoutPromise;

	    var scheduleSearchWithTimeout = function(inputValue) {
	      timeoutPromise = $timeout(function() {
	        getMatchesAsync(inputValue);
	      }, waitTime);
	    };

	    var cancelPreviousTimeout = function() {
	      if (timeoutPromise) {
	        $timeout.cancel(timeoutPromise);
	      }
	    };

	    resetMatches();

	    scope.assignIsOpen = function (isOpen) {
	      isOpenSetter(originalScope, isOpen);
	    };

	    scope.select = function(activeIdx, evt) {
	      //called from within the $digest() cycle
	      var locals = {};
	      var model, item;

	      selected = true;
	      locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
	      model = parserResult.modelMapper(originalScope, locals);
	      $setModelValue(originalScope, model);
	      modelCtrl.$setValidity('editable', true);
	      modelCtrl.$setValidity('parse', true);

	      onSelectCallback(originalScope, {
	        $item: item,
	        $model: model,
	        $label: parserResult.viewMapper(originalScope, locals),
	        $event: evt
	      });

	      resetMatches();

	      //return focus to the input element if a match was selected via a mouse click event
	      // use timeout to avoid $rootScope:inprog error
	      if (scope.$eval(attrs.typeaheadFocusOnSelect) !== false) {
	        $timeout(function() { element[0].focus(); }, 0, false);
	      }
	    };

	    //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
	    element.on('keydown', function(evt) {
	      //typeahead is open and an "interesting" key was pressed
	      if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
	        return;
	      }

	      var shouldSelect = isSelectEvent(originalScope, {$event: evt});

	      /**
	       * if there's nothing selected (i.e. focusFirst) and enter or tab is hit
	       * or
	       * shift + tab is pressed to bring focus to the previous element
	       * then clear the results
	       */
	      if (scope.activeIdx === -1 && shouldSelect || evt.which === 9 && !!evt.shiftKey) {
	        resetMatches();
	        scope.$digest();
	        return;
	      }

	      evt.preventDefault();
	      var target;
	      switch (evt.which) {
	        case 27: // escape
	          evt.stopPropagation();

	          resetMatches();
	          originalScope.$digest();
	          break;
	        case 38: // up arrow
	          scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
	          scope.$digest();
	          target = popUpEl[0].querySelectorAll('.uib-typeahead-match')[scope.activeIdx];
	          target.parentNode.scrollTop = target.offsetTop;
	          break;
	        case 40: // down arrow
	          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
	          scope.$digest();
	          target = popUpEl[0].querySelectorAll('.uib-typeahead-match')[scope.activeIdx];
	          target.parentNode.scrollTop = target.offsetTop;
	          break;
	        default:
	          if (shouldSelect) {
	            scope.$apply(function() {
	              if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
	                $$debounce(function() {
	                  scope.select(scope.activeIdx, evt);
	                }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate['default']);
	              } else {
	                scope.select(scope.activeIdx, evt);
	              }
	            });
	          }
	      }
	    });

	    element.on('focus', function (evt) {
	      hasFocus = true;
	      if (minLength === 0 && !modelCtrl.$viewValue) {
	        $timeout(function() {
	          getMatchesAsync(modelCtrl.$viewValue, evt);
	        }, 0);
	      }
	    });

	    element.on('blur', function(evt) {
	      if (isSelectOnBlur && scope.matches.length && scope.activeIdx !== -1 && !selected) {
	        selected = true;
	        scope.$apply(function() {
	          if (angular.isObject(scope.debounceUpdate) && angular.isNumber(scope.debounceUpdate.blur)) {
	            $$debounce(function() {
	              scope.select(scope.activeIdx, evt);
	            }, scope.debounceUpdate.blur);
	          } else {
	            scope.select(scope.activeIdx, evt);
	          }
	        });
	      }
	      if (!isEditable && modelCtrl.$error.editable) {
	        modelCtrl.$setViewValue();
	        scope.$apply(function() {
	          // Reset validity as we are clearing
	          modelCtrl.$setValidity('editable', true);
	          modelCtrl.$setValidity('parse', true);
	        });
	        element.val('');
	      }
	      hasFocus = false;
	      selected = false;
	    });

	    // Keep reference to click handler to unbind it.
	    var dismissClickHandler = function(evt) {
	      // Issue #3973
	      // Firefox treats right click as a click on document
	      if (element[0] !== evt.target && evt.which !== 3 && scope.matches.length !== 0) {
	        resetMatches();
	        if (!$rootScope.$$phase) {
	          originalScope.$digest();
	        }
	      }
	    };

	    $document.on('click', dismissClickHandler);

	    originalScope.$on('$destroy', function() {
	      $document.off('click', dismissClickHandler);
	      if (appendToBody || appendTo) {
	        $popup.remove();
	      }

	      if (appendToBody) {
	        angular.element($window).off('resize', fireRecalculating);
	        $document.find('body').off('scroll', fireRecalculating);
	      }
	      // Prevent jQuery cache memory leak
	      popUpEl.remove();

	      if (showHint) {
	          inputsContainer.remove();
	      }
	    });

	    var $popup = $compile(popUpEl)(scope);

	    if (appendToBody) {
	      $document.find('body').append($popup);
	    } else if (appendTo) {
	      angular.element(appendTo).eq(0).append($popup);
	    } else {
	      element.after($popup);
	    }

	    this.init = function(_modelCtrl, _ngModelOptions) {
	      modelCtrl = _modelCtrl;
	      ngModelOptions = _ngModelOptions;

	      scope.debounceUpdate = modelCtrl.$options && $parse(modelCtrl.$options.debounce)(originalScope);

	      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
	      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
	      modelCtrl.$parsers.unshift(function(inputValue) {
	        hasFocus = true;

	        if (minLength === 0 || inputValue && inputValue.length >= minLength) {
	          if (waitTime > 0) {
	            cancelPreviousTimeout();
	            scheduleSearchWithTimeout(inputValue);
	          } else {
	            getMatchesAsync(inputValue);
	          }
	        } else {
	          isLoadingSetter(originalScope, false);
	          cancelPreviousTimeout();
	          resetMatches();
	        }

	        if (isEditable) {
	          return inputValue;
	        }

	        if (!inputValue) {
	          // Reset in case user had typed something previously.
	          modelCtrl.$setValidity('editable', true);
	          return null;
	        }

	        modelCtrl.$setValidity('editable', false);
	        return undefined;
	      });

	      modelCtrl.$formatters.push(function(modelValue) {
	        var candidateViewValue, emptyViewValue;
	        var locals = {};

	        // The validity may be set to false via $parsers (see above) if
	        // the model is restricted to selected values. If the model
	        // is set manually it is considered to be valid.
	        if (!isEditable) {
	          modelCtrl.$setValidity('editable', true);
	        }

	        if (inputFormatter) {
	          locals.$model = modelValue;
	          return inputFormatter(originalScope, locals);
	        }

	        //it might happen that we don't have enough info to properly render input value
	        //we need to check for this situation and simply return model value if we can't apply custom formatting
	        locals[parserResult.itemName] = modelValue;
	        candidateViewValue = parserResult.viewMapper(originalScope, locals);
	        locals[parserResult.itemName] = undefined;
	        emptyViewValue = parserResult.viewMapper(originalScope, locals);

	        return candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue;
	      });
	    };
	  }])

	  .directive('uibTypeahead', function() {
	    return {
	      controller: 'UibTypeaheadController',
	      require: ['ngModel', '^?ngModelOptions', 'uibTypeahead'],
	      link: function(originalScope, element, attrs, ctrls) {
	        ctrls[2].init(ctrls[0], ctrls[1]);
	      }
	    };
	  })

	  .directive('uibTypeaheadPopup', ['$$debounce', function($$debounce) {
	    return {
	      scope: {
	        matches: '=',
	        query: '=',
	        active: '=',
	        position: '&',
	        moveInProgress: '=',
	        select: '&',
	        assignIsOpen: '&',
	        debounce: '&'
	      },
	      replace: true,
	      templateUrl: function(element, attrs) {
	        return attrs.popupTemplateUrl || 'uib/template/typeahead/typeahead-popup.html';
	      },
	      link: function(scope, element, attrs) {
	        scope.templateUrl = attrs.templateUrl;

	        scope.isOpen = function() {
	          var isDropdownOpen = scope.matches.length > 0;
	          scope.assignIsOpen({ isOpen: isDropdownOpen });
	          return isDropdownOpen;
	        };

	        scope.isActive = function(matchIdx) {
	          return scope.active === matchIdx;
	        };

	        scope.selectActive = function(matchIdx) {
	          scope.active = matchIdx;
	        };

	        scope.selectMatch = function(activeIdx, evt) {
	          var debounce = scope.debounce();
	          if (angular.isNumber(debounce) || angular.isObject(debounce)) {
	            $$debounce(function() {
	              scope.select({activeIdx: activeIdx, evt: evt});
	            }, angular.isNumber(debounce) ? debounce : debounce['default']);
	          } else {
	            scope.select({activeIdx: activeIdx, evt: evt});
	          }
	        };
	      }
	    };
	  }])

	  .directive('uibTypeaheadMatch', ['$templateRequest', '$compile', '$parse', function($templateRequest, $compile, $parse) {
	    return {
	      scope: {
	        index: '=',
	        match: '=',
	        query: '='
	      },
	      link: function(scope, element, attrs) {
	        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'uib/template/typeahead/typeahead-match.html';
	        $templateRequest(tplUrl).then(function(tplContent) {
	          var tplEl = angular.element(tplContent.trim());
	          element.replaceWith(tplEl);
	          $compile(tplEl)(scope);
	        });
	      }
	    };
	  }])

	  .filter('uibTypeaheadHighlight', ['$sce', '$injector', '$log', function($sce, $injector, $log) {
	    var isSanitizePresent;
	    isSanitizePresent = $injector.has('$sanitize');

	    function escapeRegexp(queryToEscape) {
	      // Regex: capture the whole query string and replace it with the string that will be used to match
	      // the results, for example if the capture is "a" the result will be \a
	      return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
	    }

	    function containsHtml(matchItem) {
	      return /<.*>/g.test(matchItem);
	    }

	    return function(matchItem, query) {
	      if (!isSanitizePresent && containsHtml(matchItem)) {
	        $log.warn('Unsafe use of typeahead please use ngSanitize'); // Warn the user about the danger
	      }
	      matchItem = query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem; // Replaces the capture string with a the same string inside of a "strong" tag
	      if (!isSanitizePresent) {
	        matchItem = $sce.trustAsHtml(matchItem); // If $sanitize is not present we pack the string in a $sce object for the ng-bind-html directive
	      }
	      return matchItem;
	    };
	  }]);

	angular.module("uib/template/accordion/accordion-group.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/accordion/accordion-group.html",
	    "<div role=\"tab\" id=\"{{::headingId}}\" aria-selected=\"{{isOpen}}\" class=\"panel-heading\" ng-keypress=\"toggleOpen($event)\">\n" +
	    "  <h4 class=\"panel-title\">\n" +
	    "    <a role=\"button\" data-toggle=\"collapse\" href aria-expanded=\"{{isOpen}}\" aria-controls=\"{{::panelId}}\" tabindex=\"0\" class=\"accordion-toggle\" ng-click=\"toggleOpen()\" uib-accordion-transclude=\"heading\" ng-disabled=\"isDisabled\" uib-tabindex-toggle><span uib-accordion-header ng-class=\"{'text-muted': isDisabled}\">{{heading}}</span></a>\n" +
	    "  </h4>\n" +
	    "</div>\n" +
	    "<div id=\"{{::panelId}}\" aria-labelledby=\"{{::headingId}}\" aria-hidden=\"{{!isOpen}}\" role=\"tabpanel\" class=\"panel-collapse collapse\" uib-collapse=\"!isOpen\">\n" +
	    "  <div class=\"panel-body\" ng-transclude></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/accordion/accordion.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/accordion/accordion.html",
	    "<div role=\"tablist\" class=\"panel-group\" ng-transclude></div>");
	}]);

	angular.module("uib/template/alert/alert.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/alert/alert.html",
	    "<button ng-show=\"closeable\" type=\"button\" class=\"close\" ng-click=\"close({$event: $event})\">\n" +
	    "  <span aria-hidden=\"true\">&times;</span>\n" +
	    "  <span class=\"sr-only\">Close</span>\n" +
	    "</button>\n" +
	    "<div ng-transclude></div>\n" +
	    "");
	}]);

	angular.module("uib/template/carousel/carousel.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/carousel/carousel.html",
	    "<div class=\"carousel-inner\" ng-transclude></div>\n" +
	    "<a role=\"button\" href class=\"left carousel-control\" ng-click=\"prev()\" ng-class=\"{ disabled: isPrevDisabled() }\" ng-show=\"slides.length > 1\">\n" +
	    "  <span aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-left\"></span>\n" +
	    "  <span class=\"sr-only\">previous</span>\n" +
	    "</a>\n" +
	    "<a role=\"button\" href class=\"right carousel-control\" ng-click=\"next()\" ng-class=\"{ disabled: isNextDisabled() }\" ng-show=\"slides.length > 1\">\n" +
	    "  <span aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-right\"></span>\n" +
	    "  <span class=\"sr-only\">next</span>\n" +
	    "</a>\n" +
	    "<ol class=\"carousel-indicators\" ng-show=\"slides.length > 1\">\n" +
	    "  <li ng-repeat=\"slide in slides | orderBy:indexOfSlide track by $index\" ng-class=\"{ active: isActive(slide) }\" ng-click=\"select(slide)\">\n" +
	    "    <span class=\"sr-only\">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if=\"isActive(slide)\">, currently active</span></span>\n" +
	    "  </li>\n" +
	    "</ol>\n" +
	    "");
	}]);

	angular.module("uib/template/carousel/slide.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/carousel/slide.html",
	    "<div class=\"text-center\" ng-transclude></div>\n" +
	    "");
	}]);

	angular.module("uib/template/datepicker/datepicker.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepicker/datepicker.html",
	    "<div ng-switch=\"datepickerMode\">\n" +
	    "  <div uib-daypicker ng-switch-when=\"day\" tabindex=\"0\" class=\"uib-daypicker\"></div>\n" +
	    "  <div uib-monthpicker ng-switch-when=\"month\" tabindex=\"0\" class=\"uib-monthpicker\"></div>\n" +
	    "  <div uib-yearpicker ng-switch-when=\"year\" tabindex=\"0\" class=\"uib-yearpicker\"></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/datepicker/day.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepicker/day.html",
	    "<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-left\"></i><span class=\"sr-only\">previous</span></button></th>\n" +
	    "      <th colspan=\"{{::5 + showWeeks}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-right\"></i><span class=\"sr-only\">next</span></button></th>\n" +
	    "    </tr>\n" +
	    "    <tr>\n" +
	    "      <th ng-if=\"showWeeks\" class=\"text-center\"></th>\n" +
	    "      <th ng-repeat=\"label in ::labels track by $index\" class=\"text-center\"><small aria-label=\"{{::label.full}}\">{{::label.abbr}}</small></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"uib-weeks\" ng-repeat=\"row in rows track by $index\" role=\"row\">\n" +
	    "      <td ng-if=\"showWeeks\" class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td>\n" +
	    "      <td ng-repeat=\"dt in row\" class=\"uib-day text-center\" role=\"gridcell\"\n" +
	    "        id=\"{{::dt.uid}}\"\n" +
	    "        ng-class=\"::dt.customClass\">\n" +
	    "        <button type=\"button\" class=\"btn btn-default btn-sm\"\n" +
	    "          uib-is-class=\"\n" +
	    "            'btn-info' for selectedDt,\n" +
	    "            'active' for activeDt\n" +
	    "            on dt\"\n" +
	    "          ng-click=\"select(dt.date)\"\n" +
	    "          ng-disabled=\"::dt.disabled\"\n" +
	    "          tabindex=\"-1\"><span ng-class=\"::{'text-muted': dt.secondary, 'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("uib/template/datepicker/month.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepicker/month.html",
	    "<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-left\"></i><span class=\"sr-only\">previous</span></button></th>\n" +
	    "      <th colspan=\"{{::yearHeaderColspan}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-right\"></i><span class=\"sr-only\">next</span></i></button></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"uib-months\" ng-repeat=\"row in rows track by $index\" role=\"row\">\n" +
	    "      <td ng-repeat=\"dt in row\" class=\"uib-month text-center\" role=\"gridcell\"\n" +
	    "        id=\"{{::dt.uid}}\"\n" +
	    "        ng-class=\"::dt.customClass\">\n" +
	    "        <button type=\"button\" class=\"btn btn-default\"\n" +
	    "          uib-is-class=\"\n" +
	    "            'btn-info' for selectedDt,\n" +
	    "            'active' for activeDt\n" +
	    "            on dt\"\n" +
	    "          ng-click=\"select(dt.date)\"\n" +
	    "          ng-disabled=\"::dt.disabled\"\n" +
	    "          tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("uib/template/datepicker/year.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepicker/year.html",
	    "<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-left\"></i><span class=\"sr-only\">previous</span></button></th>\n" +
	    "      <th colspan=\"{{::columns - 2}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-right\"></i><span class=\"sr-only\">next</span></button></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"uib-years\" ng-repeat=\"row in rows track by $index\" role=\"row\">\n" +
	    "      <td ng-repeat=\"dt in row\" class=\"uib-year text-center\" role=\"gridcell\"\n" +
	    "        id=\"{{::dt.uid}}\"\n" +
	    "        ng-class=\"::dt.customClass\">\n" +
	    "        <button type=\"button\" class=\"btn btn-default\"\n" +
	    "          uib-is-class=\"\n" +
	    "            'btn-info' for selectedDt,\n" +
	    "            'active' for activeDt\n" +
	    "            on dt\"\n" +
	    "          ng-click=\"select(dt.date)\"\n" +
	    "          ng-disabled=\"::dt.disabled\"\n" +
	    "          tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("uib/template/datepickerPopup/popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepickerPopup/popup.html",
	    "<ul role=\"presentation\" class=\"uib-datepicker-popup dropdown-menu uib-position-measure\" dropdown-nested ng-if=\"isOpen\" ng-keydown=\"keydown($event)\" ng-click=\"$event.stopPropagation()\">\n" +
	    "  <li ng-transclude></li>\n" +
	    "  <li ng-if=\"showButtonBar\" class=\"uib-button-bar\">\n" +
	    "    <span class=\"btn-group pull-left\">\n" +
	    "      <button type=\"button\" class=\"btn btn-sm btn-info uib-datepicker-current\" ng-click=\"select('today', $event)\" ng-disabled=\"isDisabled('today')\">{{ getText('current') }}</button>\n" +
	    "      <button type=\"button\" class=\"btn btn-sm btn-danger uib-clear\" ng-click=\"select(null, $event)\">{{ getText('clear') }}</button>\n" +
	    "    </span>\n" +
	    "    <button type=\"button\" class=\"btn btn-sm btn-success pull-right uib-close\" ng-click=\"close($event)\">{{ getText('close') }}</button>\n" +
	    "  </li>\n" +
	    "</ul>\n" +
	    "");
	}]);

	angular.module("uib/template/modal/window.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/modal/window.html",
	    "<div class=\"modal-dialog {{size ? 'modal-' + size : ''}}\"><div class=\"modal-content\" uib-modal-transclude></div></div>\n" +
	    "");
	}]);

	angular.module("uib/template/pager/pager.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/pager/pager.html",
	    "<li ng-class=\"{disabled: noPrevious()||ngDisabled, previous: align}\"><a href ng-click=\"selectPage(page - 1, $event)\" ng-disabled=\"noPrevious()||ngDisabled\" uib-tabindex-toggle>{{::getText('previous')}}</a></li>\n" +
	    "<li ng-class=\"{disabled: noNext()||ngDisabled, next: align}\"><a href ng-click=\"selectPage(page + 1, $event)\" ng-disabled=\"noNext()||ngDisabled\" uib-tabindex-toggle>{{::getText('next')}}</a></li>\n" +
	    "");
	}]);

	angular.module("uib/template/pagination/pagination.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/pagination/pagination.html",
	    "<li ng-if=\"::boundaryLinks\" ng-class=\"{disabled: noPrevious()||ngDisabled}\" class=\"pagination-first\"><a href ng-click=\"selectPage(1, $event)\" ng-disabled=\"noPrevious()||ngDisabled\" uib-tabindex-toggle>{{::getText('first')}}</a></li>\n" +
	    "<li ng-if=\"::directionLinks\" ng-class=\"{disabled: noPrevious()||ngDisabled}\" class=\"pagination-prev\"><a href ng-click=\"selectPage(page - 1, $event)\" ng-disabled=\"noPrevious()||ngDisabled\" uib-tabindex-toggle>{{::getText('previous')}}</a></li>\n" +
	    "<li ng-repeat=\"page in pages track by $index\" ng-class=\"{active: page.active,disabled: ngDisabled&&!page.active}\" class=\"pagination-page\"><a href ng-click=\"selectPage(page.number, $event)\" ng-disabled=\"ngDisabled&&!page.active\" uib-tabindex-toggle>{{page.text}}</a></li>\n" +
	    "<li ng-if=\"::directionLinks\" ng-class=\"{disabled: noNext()||ngDisabled}\" class=\"pagination-next\"><a href ng-click=\"selectPage(page + 1, $event)\" ng-disabled=\"noNext()||ngDisabled\" uib-tabindex-toggle>{{::getText('next')}}</a></li>\n" +
	    "<li ng-if=\"::boundaryLinks\" ng-class=\"{disabled: noNext()||ngDisabled}\" class=\"pagination-last\"><a href ng-click=\"selectPage(totalPages, $event)\" ng-disabled=\"noNext()||ngDisabled\" uib-tabindex-toggle>{{::getText('last')}}</a></li>\n" +
	    "");
	}]);

	angular.module("uib/template/tooltip/tooltip-html-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tooltip/tooltip-html-popup.html",
	    "<div class=\"tooltip-arrow\"></div>\n" +
	    "<div class=\"tooltip-inner\" ng-bind-html=\"contentExp()\"></div>\n" +
	    "");
	}]);

	angular.module("uib/template/tooltip/tooltip-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tooltip/tooltip-popup.html",
	    "<div class=\"tooltip-arrow\"></div>\n" +
	    "<div class=\"tooltip-inner\" ng-bind=\"content\"></div>\n" +
	    "");
	}]);

	angular.module("uib/template/tooltip/tooltip-template-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tooltip/tooltip-template-popup.html",
	    "<div class=\"tooltip-arrow\"></div>\n" +
	    "<div class=\"tooltip-inner\"\n" +
	    "  uib-tooltip-template-transclude=\"contentExp()\"\n" +
	    "  tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
	    "");
	}]);

	angular.module("uib/template/popover/popover-html.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/popover/popover-html.html",
	    "<div class=\"arrow\"></div>\n" +
	    "\n" +
	    "<div class=\"popover-inner\">\n" +
	    "    <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
	    "    <div class=\"popover-content\" ng-bind-html=\"contentExp()\"></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/popover/popover-template.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/popover/popover-template.html",
	    "<div class=\"arrow\"></div>\n" +
	    "\n" +
	    "<div class=\"popover-inner\">\n" +
	    "    <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
	    "    <div class=\"popover-content\"\n" +
	    "      uib-tooltip-template-transclude=\"contentExp()\"\n" +
	    "      tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/popover/popover.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/popover/popover.html",
	    "<div class=\"arrow\"></div>\n" +
	    "\n" +
	    "<div class=\"popover-inner\">\n" +
	    "    <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
	    "    <div class=\"popover-content\" ng-bind=\"content\"></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/progressbar/bar.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/progressbar/bar.html",
	    "<div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" aria-labelledby=\"{{::title}}\" ng-transclude></div>\n" +
	    "");
	}]);

	angular.module("uib/template/progressbar/progress.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/progressbar/progress.html",
	    "<div class=\"progress\" ng-transclude aria-labelledby=\"{{::title}}\"></div>");
	}]);

	angular.module("uib/template/progressbar/progressbar.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/progressbar/progressbar.html",
	    "<div class=\"progress\">\n" +
	    "  <div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" aria-labelledby=\"{{::title}}\" ng-transclude></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/rating/rating.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/rating/rating.html",
	    "<span ng-mouseleave=\"reset()\" ng-keydown=\"onKeydown($event)\" tabindex=\"0\" role=\"slider\" aria-valuemin=\"0\" aria-valuemax=\"{{range.length}}\" aria-valuenow=\"{{value}}\" aria-valuetext=\"{{title}}\">\n" +
	    "    <span ng-repeat-start=\"r in range track by $index\" class=\"sr-only\">({{ $index < value ? '*' : ' ' }})</span>\n" +
	    "    <i ng-repeat-end ng-mouseenter=\"enter($index + 1)\" ng-click=\"rate($index + 1)\" class=\"glyphicon\" ng-class=\"$index < value && (r.stateOn || 'glyphicon-star') || (r.stateOff || 'glyphicon-star-empty')\" ng-attr-title=\"{{r.title}}\"></i>\n" +
	    "</span>\n" +
	    "");
	}]);

	angular.module("uib/template/tabs/tab.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tabs/tab.html",
	    "<li ng-class=\"[{active: active, disabled: disabled}, classes]\" class=\"uib-tab nav-item\">\n" +
	    "  <a href ng-click=\"select($event)\" class=\"nav-link\" uib-tab-heading-transclude>{{heading}}</a>\n" +
	    "</li>\n" +
	    "");
	}]);

	angular.module("uib/template/tabs/tabset.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tabs/tabset.html",
	    "<div>\n" +
	    "  <ul class=\"nav nav-{{tabset.type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" +
	    "  <div class=\"tab-content\">\n" +
	    "    <div class=\"tab-pane\"\n" +
	    "         ng-repeat=\"tab in tabset.tabs\"\n" +
	    "         ng-class=\"{active: tabset.active === tab.index}\"\n" +
	    "         uib-tab-content-transclude=\"tab\">\n" +
	    "    </div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/timepicker/timepicker.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/timepicker/timepicker.html",
	    "<table class=\"uib-timepicker\">\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"text-center\" ng-show=\"::showSpinners\">\n" +
	    "      <td class=\"uib-increment hours\"><a ng-click=\"incrementHours()\" ng-class=\"{disabled: noIncrementHours()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementHours()\" tabindex=\"-1\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
	    "      <td>&nbsp;</td>\n" +
	    "      <td class=\"uib-increment minutes\"><a ng-click=\"incrementMinutes()\" ng-class=\"{disabled: noIncrementMinutes()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementMinutes()\" tabindex=\"-1\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
	    "      <td ng-show=\"showSeconds\">&nbsp;</td>\n" +
	    "      <td ng-show=\"showSeconds\" class=\"uib-increment seconds\"><a ng-click=\"incrementSeconds()\" ng-class=\"{disabled: noIncrementSeconds()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementSeconds()\" tabindex=\"-1\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
	    "      <td ng-show=\"showMeridian\"></td>\n" +
	    "    </tr>\n" +
	    "    <tr>\n" +
	    "      <td class=\"form-group uib-time hours\" ng-class=\"{'has-error': invalidHours}\">\n" +
	    "        <input type=\"text\" placeholder=\"HH\" ng-model=\"hours\" ng-change=\"updateHours()\" class=\"form-control text-center\" ng-readonly=\"::readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementHours()\" ng-blur=\"blur()\">\n" +
	    "      </td>\n" +
	    "      <td class=\"uib-separator\">:</td>\n" +
	    "      <td class=\"form-group uib-time minutes\" ng-class=\"{'has-error': invalidMinutes}\">\n" +
	    "        <input type=\"text\" placeholder=\"MM\" ng-model=\"minutes\" ng-change=\"updateMinutes()\" class=\"form-control text-center\" ng-readonly=\"::readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementMinutes()\" ng-blur=\"blur()\">\n" +
	    "      </td>\n" +
	    "      <td ng-show=\"showSeconds\" class=\"uib-separator\">:</td>\n" +
	    "      <td class=\"form-group uib-time seconds\" ng-class=\"{'has-error': invalidSeconds}\" ng-show=\"showSeconds\">\n" +
	    "        <input type=\"text\" placeholder=\"SS\" ng-model=\"seconds\" ng-change=\"updateSeconds()\" class=\"form-control text-center\" ng-readonly=\"readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementSeconds()\" ng-blur=\"blur()\">\n" +
	    "      </td>\n" +
	    "      <td ng-show=\"showMeridian\" class=\"uib-time am-pm\"><button type=\"button\" ng-class=\"{disabled: noToggleMeridian()}\" class=\"btn btn-default text-center\" ng-click=\"toggleMeridian()\" ng-disabled=\"noToggleMeridian()\" tabindex=\"{{::tabindex}}\">{{meridian}}</button></td>\n" +
	    "    </tr>\n" +
	    "    <tr class=\"text-center\" ng-show=\"::showSpinners\">\n" +
	    "      <td class=\"uib-decrement hours\"><a ng-click=\"decrementHours()\" ng-class=\"{disabled: noDecrementHours()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementHours()\" tabindex=\"-1\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
	    "      <td>&nbsp;</td>\n" +
	    "      <td class=\"uib-decrement minutes\"><a ng-click=\"decrementMinutes()\" ng-class=\"{disabled: noDecrementMinutes()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementMinutes()\" tabindex=\"-1\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
	    "      <td ng-show=\"showSeconds\">&nbsp;</td>\n" +
	    "      <td ng-show=\"showSeconds\" class=\"uib-decrement seconds\"><a ng-click=\"decrementSeconds()\" ng-class=\"{disabled: noDecrementSeconds()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementSeconds()\" tabindex=\"-1\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
	    "      <td ng-show=\"showMeridian\"></td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("uib/template/typeahead/typeahead-match.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/typeahead/typeahead-match.html",
	    "<a href\n" +
	    "   tabindex=\"-1\"\n" +
	    "   ng-bind-html=\"match.label | uibTypeaheadHighlight:query\"\n" +
	    "   ng-attr-title=\"{{match.label}}\"></a>\n" +
	    "");
	}]);

	angular.module("uib/template/typeahead/typeahead-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/typeahead/typeahead-popup.html",
	    "<ul class=\"dropdown-menu\" ng-show=\"isOpen() && !moveInProgress\" ng-style=\"{top: position().top+'px', left: position().left+'px'}\" role=\"listbox\" aria-hidden=\"{{!isOpen()}}\">\n" +
	    "    <li class=\"uib-typeahead-match\" ng-repeat=\"match in matches track by $index\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index, $event)\" role=\"option\" id=\"{{::match.id}}\">\n" +
	    "        <div uib-typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></div>\n" +
	    "    </li>\n" +
	    "</ul>\n" +
	    "");
	}]);
	angular.module('ui.bootstrap.carousel').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibCarouselCss && angular.element(document).find('head').prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'); angular.$$uibCarouselCss = true; });
	angular.module('ui.bootstrap.datepicker').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibDatepickerCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'); angular.$$uibDatepickerCss = true; });
	angular.module('ui.bootstrap.position').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibPositionCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'); angular.$$uibPositionCss = true; });
	angular.module('ui.bootstrap.datepickerPopup').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibDatepickerpopupCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>'); angular.$$uibDatepickerpopupCss = true; });
	angular.module('ui.bootstrap.tooltip').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTooltipCss && angular.element(document).find('head').prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'); angular.$$uibTooltipCss = true; });
	angular.module('ui.bootstrap.timepicker').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTimepickerCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-time input{width:50px;}</style>'); angular.$$uibTimepickerCss = true; });
	angular.module('ui.bootstrap.typeahead').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTypeaheadCss && angular.element(document).find('head').prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'); angular.$$uibTypeaheadCss = true; });

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * State-based routing for AngularJS
	 * @version v1.0.0-beta.3
	 * @link https://ui-router.github.io
	 * @license MIT License, http://www.opensource.org/licenses/MIT
	 */
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(23));
		else if(typeof define === 'function' && define.amd)
			define("angular-ui-router", ["angular"], factory);
		else if(typeof exports === 'object')
			exports["angular-ui-router"] = factory(require("angular"));
		else
			root["angular-ui-router"] = factory(root["angular"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_57__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Main entry point for angular 1.x build
		 * @module ng1
		 */
		/** for typedoc */
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		__export(__webpack_require__(1));
		__export(__webpack_require__(53));
		__export(__webpack_require__(55));
		__export(__webpack_require__(58));
		__webpack_require__(60);
		__webpack_require__(61);
		__webpack_require__(62);
		__webpack_require__(63);
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = "ui.router";


	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		/** @module common */ /** */
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		__export(__webpack_require__(2));
		__export(__webpack_require__(46));
		__export(__webpack_require__(47));
		__export(__webpack_require__(48));
		__export(__webpack_require__(49));
		__export(__webpack_require__(50));
		__export(__webpack_require__(51));
		__export(__webpack_require__(52));
		__export(__webpack_require__(44));
		var router_1 = __webpack_require__(25);
		exports.UIRouter = router_1.UIRouter;


	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module common */ /** for typedoc */
		__export(__webpack_require__(3));
		__export(__webpack_require__(6));
		__export(__webpack_require__(7));
		__export(__webpack_require__(5));
		__export(__webpack_require__(4));
		__export(__webpack_require__(8));
		__export(__webpack_require__(9));
		__export(__webpack_require__(12));


	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Random utility functions used in the UI-Router code
		 *
		 * @preferred @module common
		 */ /** for typedoc */
		"use strict";
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		var coreservices_1 = __webpack_require__(6);
		var w = typeof window === 'undefined' ? {} : window;
		var angular = w.angular || {};
		exports.fromJson = angular.fromJson || JSON.parse.bind(JSON);
		exports.toJson = angular.toJson || JSON.stringify.bind(JSON);
		exports.copy = angular.copy || _copy;
		exports.forEach = angular.forEach || _forEach;
		exports.extend = angular.extend || _extend;
		exports.equals = angular.equals || _equals;
		exports.identity = function (x) { return x; };
		exports.noop = function () { return undefined; };
		/**
		 * Binds and copies functions onto an object
		 *
		 * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions
		 * on the 'to' object.
		 *
		 * This example creates an new class instance whose functions are prebound to the new'd object.
		 * @example
		 * ```
		 *
		 * class Foo {
		 *   constructor(data) {
		 *     // Binds all functions from Foo.prototype to 'this',
		 *     // then copies them to 'this'
		 *     bindFunctions(Foo.prototype, this, this);
		 *     this.data = data;
		 *   }
		 *
		 *   log() {
		 *     console.log(this.data);
		 *   }
		 * }
		 *
		 * let myFoo = new Foo([1,2,3]);
		 * var logit = myFoo.log;
		 * logit(); // logs [1, 2, 3] from the myFoo 'this' instance
		 * ```
		 *
		 * This example creates a bound version of a service function, and copies it to another object
		 * @example
		 * ```
		 *
		 * var SomeService = {
		 *   this.data = [3, 4, 5];
		 *   this.log = function() {
		 *     console.log(this.data);
		 *   }
		 * }
		 *
		 * // Constructor fn
		 * function OtherThing() {
		 *   // Binds all functions from SomeService to SomeService,
		 *   // then copies them to 'this'
		 *   bindFunctions(SomeService, this, SomeService);
		 * }
		 *
		 * let myOtherThing = new OtherThing();
		 * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'
		 * ```
		 *
		 * @param from The object which contains the functions to be bound
		 * @param to The object which will receive the bound functions
		 * @param bindTo The object which the functions will be bound to
		 * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)
		 */
		function bindFunctions(from, to, bindTo, fnNames) {
		    if (fnNames === void 0) { fnNames = Object.keys(from); }
		    return fnNames.filter(function (name) { return typeof from[name] === 'function'; })
		        .forEach(function (name) { return to[name] = from[name].bind(bindTo); });
		}
		exports.bindFunctions = bindFunctions;
		/**
		 * prototypal inheritance helper.
		 * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it
		 */
		exports.inherit = function (parent, extra) {
		    return exports.extend(new (exports.extend(function () { }, { prototype: parent }))(), extra);
		};
		/**
		 * Given an arguments object, converts the arguments at index idx and above to an array.
		 * This is similar to es6 rest parameters.
		 *
		 * Optionally, the argument at index idx may itself already be an array.
		 *
		 * For example,
		 * given either:
		 *        arguments = [ obj, "foo", "bar" ]
		 * or:
		 *        arguments = [ obj, ["foo", "bar"] ]
		 * then:
		 *        restArgs(arguments, 1) == ["foo", "bar"]
		 *
		 * This allows functions like pick() to be implemented such that it allows either a bunch
		 * of string arguments (like es6 rest parameters), or a single array of strings:
		 *
		 * given:
		 *        var obj = { foo: 1, bar: 2, baz: 3 };
		 * then:
		 *        pick(obj, "foo", "bar");   // returns { foo: 1, bar: 2 }
		 *        pick(obj, ["foo", "bar"]); // returns { foo: 1, bar: 2 }
		 */
		var restArgs = function (args, idx) {
		    if (idx === void 0) { idx = 0; }
		    return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));
		};
		/** Given an array, returns true if the object is found in the array, (using indexOf) */
		exports.inArray = function (array, obj) {
		    return array.indexOf(obj) !== -1;
		};
		/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */
		exports.removeFrom = hof_1.curry(function (array, obj) {
		    var idx = array.indexOf(obj);
		    if (idx >= 0)
		        array.splice(idx, 1);
		    return array;
		});
		/**
		 * Applies a set of defaults to an options object.  The options object is filtered
		 * to only those properties of the objects in the defaultsList.
		 * Earlier objects in the defaultsList take precedence when applying defaults.
		 */
		function defaults(opts) {
		    if (opts === void 0) { opts = {}; }
		    var defaultsList = [];
		    for (var _i = 1; _i < arguments.length; _i++) {
		        defaultsList[_i - 1] = arguments[_i];
		    }
		    var defaults = merge.apply(null, [{}].concat(defaultsList));
		    return exports.extend({}, defaults, pick(opts || {}, Object.keys(defaults)));
		}
		exports.defaults = defaults;
		/**
		 * Merges properties from the list of objects to the destination object.
		 * If a property already exists in the destination object, then it is not overwritten.
		 */
		function merge(dst) {
		    var objs = [];
		    for (var _i = 1; _i < arguments.length; _i++) {
		        objs[_i - 1] = arguments[_i];
		    }
		    exports.forEach(objs, function (obj) {
		        exports.forEach(obj, function (value, key) {
		            if (!dst.hasOwnProperty(key))
		                dst[key] = value;
		        });
		    });
		    return dst;
		}
		exports.merge = merge;
		/** Reduce function that merges each element of the list into a single object, using extend */
		exports.mergeR = function (memo, item) { return exports.extend(memo, item); };
		/**
		 * Finds the common ancestor path between two states.
		 *
		 * @param {Object} first The first state.
		 * @param {Object} second The second state.
		 * @return {Array} Returns an array of state names in descending order, not including the root.
		 */
		function ancestors(first, second) {
		    var path = [];
		    for (var n in first.path) {
		        if (first.path[n] !== second.path[n])
		            break;
		        path.push(first.path[n]);
		    }
		    return path;
		}
		exports.ancestors = ancestors;
		/**
		 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
		 *
		 * @param {Object} a The first object.
		 * @param {Object} b The second object.
		 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
		 *                     it defaults to the list of keys in `a`.
		 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
		 */
		function equalForKeys(a, b, keys) {
		    if (keys === void 0) { keys = Object.keys(a); }
		    for (var i = 0; i < keys.length; i++) {
		        var k = keys[i];
		        if (a[k] != b[k])
		            return false; // Not '===', values aren't necessarily normalized
		    }
		    return true;
		}
		exports.equalForKeys = equalForKeys;
		function pickOmitImpl(predicate, obj) {
		    var keys = [];
		    for (var _i = 2; _i < arguments.length; _i++) {
		        keys[_i - 2] = arguments[_i];
		    }
		    var objCopy = {};
		    for (var key in obj) {
		        if (predicate(keys, key))
		            objCopy[key] = obj[key];
		    }
		    return objCopy;
		}
		/** Return a copy of the object only containing the whitelisted properties. */
		function pick(obj) {
		    return pickOmitImpl.apply(null, [exports.inArray].concat(restArgs(arguments)));
		}
		exports.pick = pick;
		/** Return a copy of the object omitting the blacklisted properties. */
		function omit(obj) {
		    var notInArray = function (array, item) { return !exports.inArray(array, item); };
		    return pickOmitImpl.apply(null, [notInArray].concat(restArgs(arguments)));
		}
		exports.omit = omit;
		/**
		 * Maps an array, or object to a property (by name)
		 */
		function pluck(collection, propName) {
		    return map(collection, hof_1.prop(propName));
		}
		exports.pluck = pluck;
		/** Filters an Array or an Object's properties based on a predicate */
		function filter(collection, callback) {
		    var arr = predicates_1.isArray(collection), result = arr ? [] : {};
		    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return result[key] = x; };
		    exports.forEach(collection, function (item, i) {
		        if (callback(item, i))
		            accept(item, i);
		    });
		    return result;
		}
		exports.filter = filter;
		/** Finds an object from an array, or a property of an object, that matches a predicate */
		function find(collection, callback) {
		    var result;
		    exports.forEach(collection, function (item, i) {
		        if (result)
		            return;
		        if (callback(item, i))
		            result = item;
		    });
		    return result;
		}
		exports.find = find;
		/** Given an object, returns a new object, where each property is transformed by the callback function */
		exports.mapObj = map;
		/** Maps an array or object properties using a callback function */
		function map(collection, callback) {
		    var result = predicates_1.isArray(collection) ? [] : {};
		    exports.forEach(collection, function (item, i) { return result[i] = callback(item, i); });
		    return result;
		}
		exports.map = map;
		/**
		 * Given an object, return its enumerable property values
		 *
		 * @example
		 * ```
		 *
		 * let foo = { a: 1, b: 2, c: 3 }
		 * let vals = values(foo); // [ 1, 2, 3 ]
		 * ```
		 */
		exports.values = function (obj) {
		    return Object.keys(obj).map(function (key) { return obj[key]; });
		};
		/**
		 * Reduce function that returns true if all of the values are truthy.
		 *
		 * @example
		 * ```
		 *
		 * let vals = [ 1, true, {}, "hello world"];
		 * vals.reduce(allTrueR, true); // true
		 *
		 * vals.push(0);
		 * vals.reduce(allTrueR, true); // false
		 * ```
		 */
		exports.allTrueR = function (memo, elem) { return memo && elem; };
		/**
		 * Reduce function that returns true if any of the values are truthy.
		 *
		 *  * @example
		 * ```
		 *
		 * let vals = [ 0, null, undefined ];
		 * vals.reduce(anyTrueR, true); // false
		 *
		 * vals.push("hello world");
		 * vals.reduce(anyTrueR, true); // true
		 * ```
		 */
		exports.anyTrueR = function (memo, elem) { return memo || elem; };
		/**
		 * Reduce function which un-nests a single level of arrays
		 * @example
		 * ```
		 *
		 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
		 * input.reduce(unnestR, []) // [ "a", "b", "c", "d", [ "double, "nested" ] ]
		 * ```
		 */
		exports.unnestR = function (memo, elem) { return memo.concat(elem); };
		/**
		 * Reduce function which recursively un-nests all arrays
		 *
		 * @example
		 * ```
		 *
		 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
		 * input.reduce(unnestR, []) // [ "a", "b", "c", "d", "double, "nested" ]
		 * ```
		 */
		exports.flattenR = function (memo, elem) {
		    return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem);
		};
		/**
		 * Reduce function that pushes an object to an array, then returns the array.
		 * Mostly just for [[flattenR]] and [[uniqR]]
		 */
		function pushR(arr, obj) {
		    arr.push(obj);
		    return arr;
		}
		exports.pushR = pushR;
		/** Reduce function that filters out duplicates */
		exports.uniqR = function (acc, token) {
		    return exports.inArray(acc, token) ? acc : pushR(acc, token);
		};
		/**
		 * Return a new array with a single level of arrays unnested.
		 *
		 * @example
		 * ```
		 *
		 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
		 * unnest(input) // [ "a", "b", "c", "d", [ "double, "nested" ] ]
		 * ```
		 */
		exports.unnest = function (arr) { return arr.reduce(exports.unnestR, []); };
		/**
		 * Return a completely flattened version of an array.
		 *
		 * @example
		 * ```
		 *
		 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
		 * flatten(input) // [ "a", "b", "c", "d", "double, "nested" ]
		 * ```
		 */
		exports.flatten = function (arr) { return arr.reduce(exports.flattenR, []); };
		/**
		 * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.
		 * @example
		 * ```
		 *
		 * let isNumber = (obj) => typeof(obj) === 'number';
		 * let allNumbers = [ 1, 2, 3, 4, 5 ];
		 * allNumbers.filter(assertPredicate(isNumber)); //OK
		 *
		 * let oneString = [ 1, 2, 3, 4, "5" ];
		 * oneString.filter(assertPredicate(isNumber, "Not all numbers")); // throws Error(""Not all numbers"");
		 * ```
		 */
		function assertPredicate(predicate, errMsg) {
		    if (errMsg === void 0) { errMsg = "assert failure"; }
		    return function (obj) {
		        if (!predicate(obj)) {
		            throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);
		        }
		        return true;
		    };
		}
		exports.assertPredicate = assertPredicate;
		/**
		 * Like _.pairs: Given an object, returns an array of key/value pairs
		 *
		 * @example
		 * ```
		 *
		 * pairs({ foo: "FOO", bar: "BAR }) // [ [ "foo", "FOO" ], [ "bar": "BAR" ] ]
		 * ```
		 */
		exports.pairs = function (obj) {
		    return Object.keys(obj).map(function (key) { return [key, obj[key]]; });
		};
		/**
		 * Given two or more parallel arrays, returns an array of tuples where
		 * each tuple is composed of [ a[i], b[i], ... z[i] ]
		 *
		 * @example
		 * ```
		 *
		 * let foo = [ 0, 2, 4, 6 ];
		 * let bar = [ 1, 3, 5, 7 ];
		 * let baz = [ 10, 30, 50, 70 ];
		 * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]
		 * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]
		 * ```
		 */
		function arrayTuples() {
		    var arrayArgs = [];
		    for (var _i = 0; _i < arguments.length; _i++) {
		        arrayArgs[_i - 0] = arguments[_i];
		    }
		    if (arrayArgs.length === 0)
		        return [];
		    var length = arrayArgs.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER
		    return Array.apply(null, Array(length)).map(function (ignored, idx) { return arrayArgs.map(function (arr) { return arr[idx]; }); });
		}
		exports.arrayTuples = arrayTuples;
		/**
		 * Reduce function which builds an object from an array of [key, value] pairs.
		 *
		 * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.
		 *
		 * Each keyValueTuple should be an array with values [ key: string, value: any ]
		 *
		 * @example
		 * ```
		 *
		 * var pairs = [ ["fookey", "fooval"], ["barkey", "barval"] ]
		 *
		 * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})
		 * // pairsToObj == { fookey: "fooval", barkey: "barval" }
		 *
		 * // Or, more simply:
		 * var pairsToObj = pairs.reduce(applyPairs, {})
		 * // pairsToObj == { fookey: "fooval", barkey: "barval" }
		 * ```
		 */
		function applyPairs(memo, keyValTuple) {
		    var key, value;
		    if (predicates_1.isArray(keyValTuple))
		        key = keyValTuple[0], value = keyValTuple[1];
		    if (!predicates_1.isString(key))
		        throw new Error("invalid parameters to applyPairs");
		    memo[key] = value;
		    return memo;
		}
		exports.applyPairs = applyPairs;
		/** Get the last element of an array */
		function tail(arr) {
		    return arr.length && arr[arr.length - 1] || undefined;
		}
		exports.tail = tail;
		/**
		 * shallow copy from src to dest
		 *
		 * note: This is a shallow copy, while angular.copy is a deep copy.
		 * ui-router uses `copy` only to make copies of state parameters.
		 */
		function _copy(src, dest) {
		    if (dest)
		        Object.keys(dest).forEach(function (key) { return delete dest[key]; });
		    if (!dest)
		        dest = {};
		    return exports.extend(dest, src);
		}
		/** Naive forEach implementation works with Objects or Arrays */
		function _forEach(obj, cb, _this) {
		    if (predicates_1.isArray(obj))
		        return obj.forEach(cb, _this);
		    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });
		}
		function _copyProps(to, from) {
		    Object.keys(from).forEach(function (key) { return to[key] = from[key]; });
		    return to;
		}
		function _extend(toObj) {
		    return restArgs(arguments, 1).filter(exports.identity).reduce(_copyProps, toObj);
		}
		function _equals(o1, o2) {
		    if (o1 === o2)
		        return true;
		    if (o1 === null || o2 === null)
		        return false;
		    if (o1 !== o1 && o2 !== o2)
		        return true; // NaN === NaN
		    var t1 = typeof o1, t2 = typeof o2;
		    if (t1 !== t2 || t1 !== 'object')
		        return false;
		    var tup = [o1, o2];
		    if (hof_1.all(predicates_1.isArray)(tup))
		        return _arraysEq(o1, o2);
		    if (hof_1.all(predicates_1.isDate)(tup))
		        return o1.getTime() === o2.getTime();
		    if (hof_1.all(predicates_1.isRegExp)(tup))
		        return o1.toString() === o2.toString();
		    if (hof_1.all(predicates_1.isFunction)(tup))
		        return true; // meh
		    var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];
		    if (predicates.map(hof_1.any).reduce(function (b, fn) { return b || !!fn(tup); }, false))
		        return false;
		    var key, keys = {};
		    for (key in o1) {
		        if (!_equals(o1[key], o2[key]))
		            return false;
		        keys[key] = true;
		    }
		    for (key in o2) {
		        if (!keys[key])
		            return false;
		    }
		    return true;
		}
		function _arraysEq(a1, a2) {
		    if (a1.length !== a2.length)
		        return false;
		    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);
		}
		// issue #2676
		exports.silenceUncaughtInPromise = function (promise) {
		    return promise.catch(function (e) { return 0; }) && promise;
		};
		exports.silentRejection = function (error) {
		    return exports.silenceUncaughtInPromise(coreservices_1.services.$q.reject(error));
		};


	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** Predicates @module common_predicates */ /** */
		var hof_1 = __webpack_require__(5);
		var toStr = Object.prototype.toString;
		var tis = function (t) { return function (x) { return typeof (x) === t; }; };
		exports.isUndefined = tis('undefined');
		exports.isDefined = hof_1.not(exports.isUndefined);
		exports.isNull = function (o) { return o === null; };
		exports.isFunction = tis('function');
		exports.isNumber = tis('number');
		exports.isString = tis('string');
		exports.isObject = function (x) { return x !== null && typeof x === 'object'; };
		exports.isArray = Array.isArray;
		exports.isDate = (function (x) { return toStr.call(x) === '[object Date]'; });
		exports.isRegExp = (function (x) { return toStr.call(x) === '[object RegExp]'; });
		/**
		 * Predicate which checks if a value is injectable
		 *
		 * A value is "injectable" if it is a function, or if it is an ng1 array-notation-style array
		 * where all the elements in the array are Strings, except the last one, which is a Function
		 */
		function isInjectable(val) {
		    if (exports.isArray(val) && val.length) {
		        var head = val.slice(0, -1), tail = val.slice(-1);
		        return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);
		    }
		    return exports.isFunction(val);
		}
		exports.isInjectable = isInjectable;
		/**
		 * Predicate which checks if a value looks like a Promise
		 *
		 * It is probably a Promise if it's an object, and it has a `then` property which is a Function
		 */
		exports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop('then'), exports.isFunction));


	/***/ },
	/* 5 */
	/***/ function(module, exports) {

		/**
		 * Higher order functions
		 *
		 * @module common_hof
		 */ /** */
		"use strict";
		/**
		 * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.
		 *
		 * Given a function with N parameters, returns a new function that supports partial application.
		 * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,
		 * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to
		 * accept more parameters until all N parameters have been supplied.
		 *
		 *
		 * This contrived example uses a partially applied function as an predicate, which returns true
		 * if an object is found in both arrays.
		 * @example
		 * ```
		 * // returns true if an object is in both of the two arrays
		 * function inBoth(array1, array2, object) {
		 *   return array1.indexOf(object) !== -1 &&
		 *          array2.indexOf(object) !== 1;
		 * }
		 * let obj1, obj2, obj3, obj4, obj5, obj6, obj7
		 * let foos = [obj1, obj3]
		 * let bars = [obj3, obj4, obj5]
		 *
		 * // A curried "copy" of inBoth
		 * let curriedInBoth = curry(inBoth);
		 * // Partially apply both the array1 and array2
		 * let inFoosAndBars = curriedInBoth(foos, bars);
		 *
		 * // Supply the final argument; since all arguments are
		 * // supplied, the original inBoth function is then called.
		 * let obj1InBoth = inFoosAndBars(obj1); // false
		 *
		 * // Use the inFoosAndBars as a predicate.
		 * // Filter, on each iteration, supplies the final argument
		 * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];
		 * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]
		 *
		 * ```
		 *
		 * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function
		 *
		 * @param fn
		 * @returns {*|function(): (*|any)}
		 */
		function curry(fn) {
		    var initial_args = [].slice.apply(arguments, [1]);
		    var func_args_length = fn.length;
		    function curried(args) {
		        if (args.length >= func_args_length)
		            return fn.apply(null, args);
		        return function () {
		            return curried(args.concat([].slice.apply(arguments)));
		        };
		    }
		    return curried(initial_args);
		}
		exports.curry = curry;
		/**
		 * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left
		 * given: f(x), g(x), h(x)
		 * let composed = compose(f,g,h)
		 * then, composed is: f(g(h(x)))
		 */
		function compose() {
		    var args = arguments;
		    var start = args.length - 1;
		    return function () {
		        var i = start, result = args[start].apply(this, arguments);
		        while (i--)
		            result = args[i].call(this, result);
		        return result;
		    };
		}
		exports.compose = compose;
		/**
		 * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right
		 * given: f(x), g(x), h(x)
		 * let piped = pipe(f,g,h);
		 * then, piped is: h(g(f(x)))
		 */
		function pipe() {
		    var funcs = [];
		    for (var _i = 0; _i < arguments.length; _i++) {
		        funcs[_i - 0] = arguments[_i];
		    }
		    return compose.apply(null, [].slice.call(arguments).reverse());
		}
		exports.pipe = pipe;
		/**
		 * Given a property name, returns a function that returns that property from an object
		 * let obj = { foo: 1, name: "blarg" };
		 * let getName = prop("name");
		 * getName(obj) === "blarg"
		 */
		exports.prop = function (name) {
		    return function (obj) { return obj && obj[name]; };
		};
		/**
		 * Given a property name and a value, returns a function that returns a boolean based on whether
		 * the passed object has a property that matches the value
		 * let obj = { foo: 1, name: "blarg" };
		 * let getName = propEq("name", "blarg");
		 * getName(obj) === true
		 */
		exports.propEq = curry(function (name, val, obj) { return obj && obj[name] === val; });
		/**
		 * Given a dotted property name, returns a function that returns a nested property from an object, or undefined
		 * let obj = { id: 1, nestedObj: { foo: 1, name: "blarg" }, };
		 * let getName = prop("nestedObj.name");
		 * getName(obj) === "blarg"
		 * let propNotFound = prop("this.property.doesnt.exist");
		 * propNotFound(obj) === undefined
		 */
		exports.parse = function (name) {
		    return pipe.apply(null, name.split(".").map(exports.prop));
		};
		/**
		 * Given a function that returns a truthy or falsey value, returns a
		 * function that returns the opposite (falsey or truthy) value given the same inputs
		 */
		exports.not = function (fn) {
		    return function () {
		        var args = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            args[_i - 0] = arguments[_i];
		        }
		        return !fn.apply(null, args);
		    };
		};
		/**
		 * Given two functions that return truthy or falsey values, returns a function that returns truthy
		 * if both functions return truthy for the given arguments
		 */
		function and(fn1, fn2) {
		    return function () {
		        var args = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            args[_i - 0] = arguments[_i];
		        }
		        return fn1.apply(null, args) && fn2.apply(null, args);
		    };
		}
		exports.and = and;
		/**
		 * Given two functions that return truthy or falsey values, returns a function that returns truthy
		 * if at least one of the functions returns truthy for the given arguments
		 */
		function or(fn1, fn2) {
		    return function () {
		        var args = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            args[_i - 0] = arguments[_i];
		        }
		        return fn1.apply(null, args) || fn2.apply(null, args);
		    };
		}
		exports.or = or;
		/**
		 * Check if all the elements of an array match a predicate function
		 *
		 * @param fn1 a predicate function `fn1`
		 * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array
		 */
		exports.all = function (fn1) {
		    return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); };
		};
		exports.any = function (fn1) {
		    return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); };
		};
		/** Given a class, returns a Predicate function that returns true if the object is of that class */
		exports.is = function (ctor) { return function (obj) {
		    return (obj != null && obj.constructor === ctor || obj instanceof ctor);
		}; };
		/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */
		exports.eq = function (val) { return function (other) {
		    return val === other;
		}; };
		/** Given a value, returns a function which returns the value */
		exports.val = function (v) { return function () { return v; }; };
		function invoke(fnName, args) {
		    return function (obj) {
		        return obj[fnName].apply(obj, args);
		    };
		}
		exports.invoke = invoke;
		/**
		 * Sorta like Pattern Matching (a functional programming conditional construct)
		 *
		 * See http://c2.com/cgi/wiki?PatternMatching
		 *
		 * This is a conditional construct which allows a series of predicates and output functions
		 * to be checked and then applied.  Each predicate receives the input.  If the predicate
		 * returns truthy, then its matching output function (mapping function) is provided with
		 * the input and, then the result is returned.
		 *
		 * Each combination (2-tuple) of predicate + output function should be placed in an array
		 * of size 2: [ predicate, mapFn ]
		 *
		 * These 2-tuples should be put in an outer array.
		 *
		 * @example
		 * ```
		 *
		 * // Here's a 2-tuple where the first element is the isString predicate
		 * // and the second element is a function that returns a description of the input
		 * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];
		 *
		 * // Second tuple: predicate "isNumber", mapfn returns a description
		 * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];
		 *
		 * let third = [ (input) => input === null,  (input) => `Oh, null...` ];
		 *
		 * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];
		 *
		 * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);
		 *
		 * console.log(descriptionOf(undefined)); // 'notdefined'
		 * console.log(descriptionOf(55)); // '(55) That's a number!'
		 * console.log(descriptionOf("foo")); // 'Here's your string foo'
		 * ```
		 *
		 * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,
		 * with a Predicate and a mapping/output function
		 * @returns {function(any): *}
		 */
		function pattern(struct) {
		    return function (x) {
		        for (var i = 0; i < struct.length; i++) {
		            if (struct[i][0](x))
		                return struct[i][1](x);
		        }
		    };
		}
		exports.pattern = pattern;


	/***/ },
	/* 6 */
	/***/ function(module, exports) {

		"use strict";
		var notImplemented = function (fnname) { return function () {
		    throw new Error(fnname + "(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']");
		}; };
		var services = {
		    $q: undefined,
		    $injector: undefined,
		    location: {},
		    locationConfig: {},
		    template: {}
		};
		exports.services = services;
		["setUrl", "path", "search", "hash", "onChange"]
		    .forEach(function (key) { return services.location[key] = notImplemented(key); });
		["port", "protocol", "host", "baseHref", "html5Mode", "hashPrefix"]
		    .forEach(function (key) { return services.locationConfig[key] = notImplemented(key); });


	/***/ },
	/* 7 */
	/***/ function(module, exports) {

		"use strict";
		/** @module common */
		/**
		 * Matches state names using glob-like pattern strings.
		 *
		 * Globs can be used in specific APIs including:
		 *
		 * - [[StateService.is]]
		 * - [[StateService.includes]]
		 * - [[HookMatchCriteria.to]]
		 * - [[HookMatchCriteria.from]]
		 * - [[HookMatchCriteria.exiting]]
		 * - [[HookMatchCriteria.retained]]
		 * - [[HookMatchCriteria.entering]]
		 *
		 * A `Glob` string is a pattern which matches state names.
		 * Nested state names are split into segments (separated by a dot) when processing.
		 * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']
		 *
		 * Globs work according to the following rules:
		 *
		 * ### Exact match:
		 *
		 * The glob `'A.B'` matches the state named exactly `'A.B'`.
		 *
		 * | Glob        |Matches states named|Does not match state named|
		 * |:------------|:--------------------|:---------------------|
		 * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |
		 * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |
		 * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|
		 *
		 * ### Single star (`*`)
		 *
		 * A single star (`*`) is a wildcard that matches exactly one segment.
		 *
		 * | Glob        |Matches states named  |Does not match state named |
		 * |:------------|:---------------------|:--------------------------|
		 * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |
		 * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |
		 * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|
		 *
		 * ### Double star (`**`)
		 *
		 * A double star (`'**'`) is a wildcard that matches *zero or more segments*
		 *
		 * | Glob        |Matches states named                           |Does not match state named         |
		 * |:------------|:----------------------------------------------|:----------------------------------|
		 * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |
		 * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |
		 * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |
		 * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |
		 *
		 */
		var Glob = (function () {
		    function Glob(text) {
		        this.text = text;
		        this.glob = text.split('.');
		        var regexpString = this.text.split('.')
		            .map(function (seg) {
		            if (seg === '**')
		                return '(?:|(?:\\.[^.]*)*)';
		            if (seg === '*')
		                return '\\.[^.]*';
		            return '\\.' + seg;
		        }).join('');
		        this.regexp = new RegExp("^" + regexpString + "$");
		    }
		    Glob.prototype.matches = function (name) {
		        return this.regexp.test('.' + name);
		    };
		    /** @deprecated whats the point? */
		    Glob.is = function (text) {
		        return text.indexOf('*') > -1;
		    };
		    /** @deprecated whats the point? */
		    Glob.fromString = function (text) {
		        if (!this.is(text))
		            return null;
		        return new Glob(text);
		    };
		    return Glob;
		}());
		exports.Glob = Glob;


	/***/ },
	/* 8 */
	/***/ function(module, exports) {

		/** @module common */ /** for typedoc */
		"use strict";
		var Queue = (function () {
		    function Queue(_items, _limit) {
		        if (_items === void 0) { _items = []; }
		        if (_limit === void 0) { _limit = null; }
		        this._items = _items;
		        this._limit = _limit;
		    }
		    Queue.prototype.enqueue = function (item) {
		        var items = this._items;
		        items.push(item);
		        if (this._limit && items.length > this._limit)
		            items.shift();
		        return item;
		    };
		    Queue.prototype.dequeue = function () {
		        if (this.size())
		            return this._items.splice(0, 1)[0];
		    };
		    Queue.prototype.clear = function () {
		        var current = this._items;
		        this._items = [];
		        return current;
		    };
		    Queue.prototype.size = function () {
		        return this._items.length;
		    };
		    Queue.prototype.remove = function (item) {
		        var idx = this._items.indexOf(item);
		        return idx > -1 && this._items.splice(idx, 1)[0];
		    };
		    Queue.prototype.peekTail = function () {
		        return this._items[this._items.length - 1];
		    };
		    Queue.prototype.peekHead = function () {
		        if (this.size())
		            return this._items[0];
		    };
		    return Queue;
		}());
		exports.Queue = Queue;


	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

		/** @module common_strings */ /** */
		"use strict";
		var predicates_1 = __webpack_require__(4);
		var rejectFactory_1 = __webpack_require__(10);
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var transition_1 = __webpack_require__(11);
		var resolvable_1 = __webpack_require__(19);
		/**
		 * Returns a string shortened to a maximum length
		 *
		 * If the string is already less than the `max` length, return the string.
		 * Else return the string, shortened to `max - 3` and append three dots ("...").
		 *
		 * @param max the maximum length of the string to return
		 * @param str the input string
		 */
		function maxLength(max, str) {
		    if (str.length <= max)
		        return str;
		    return str.substr(0, max - 3) + "...";
		}
		exports.maxLength = maxLength;
		/**
		 * Returns a string, with spaces added to the end, up to a desired str length
		 *
		 * If the string is already longer than the desired length, return the string.
		 * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.
		 *
		 * @param length the desired length of the string to return
		 * @param str the input string
		 */
		function padString(length, str) {
		    while (str.length < length)
		        str += " ";
		    return str;
		}
		exports.padString = padString;
		function kebobString(camelCase) {
		    return camelCase
		        .replace(/^([A-Z])/, function ($1) { return $1.toLowerCase(); }) // replace first char
		        .replace(/([A-Z])/g, function ($1) { return "-" + $1.toLowerCase(); }); // replace rest
		}
		exports.kebobString = kebobString;
		function _toJson(obj) {
		    return JSON.stringify(obj);
		}
		function _fromJson(json) {
		    return predicates_1.isString(json) ? JSON.parse(json) : json;
		}
		function promiseToString(p) {
		    return "Promise(" + JSON.stringify(p) + ")";
		}
		function functionToString(fn) {
		    var fnStr = fnToString(fn);
		    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\([^)]*\))/);
		    var toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;
		    var fnName = fn['name'] || "";
		    if (fnName && toStr.match(/function \(/)) {
		        return 'function ' + fnName + toStr.substr(9);
		    }
		    return toStr;
		}
		exports.functionToString = functionToString;
		function fnToString(fn) {
		    var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;
		    return _fn && _fn.toString() || "undefined";
		}
		exports.fnToString = fnToString;
		var stringifyPatternFn = null;
		var stringifyPattern = function (value) {
		    var isTransitionRejectionPromise = rejectFactory_1.Rejection.isTransitionRejectionPromise;
		    stringifyPatternFn = stringifyPatternFn || hof_1.pattern([
		        [hof_1.not(predicates_1.isDefined), hof_1.val("undefined")],
		        [predicates_1.isNull, hof_1.val("null")],
		        [predicates_1.isPromise, hof_1.val("[Promise]")],
		        [isTransitionRejectionPromise, function (x) { return x._transitionRejection.toString(); }],
		        [hof_1.is(rejectFactory_1.Rejection), hof_1.invoke("toString")],
		        [hof_1.is(transition_1.Transition), hof_1.invoke("toString")],
		        [hof_1.is(resolvable_1.Resolvable), hof_1.invoke("toString")],
		        [predicates_1.isInjectable, functionToString],
		        [hof_1.val(true), common_1.identity]
		    ]);
		    return stringifyPatternFn(value);
		};
		function stringify(o) {
		    var seen = [];
		    function format(val) {
		        if (predicates_1.isObject(val)) {
		            if (seen.indexOf(val) !== -1)
		                return '[circular ref]';
		            seen.push(val);
		        }
		        return stringifyPattern(val);
		    }
		    return JSON.stringify(o, function (key, val) { return format(val); }).replace(/\\"/g, '"');
		}
		exports.stringify = stringify;
		/** Returns a function that splits a string on a character or substring */
		exports.beforeAfterSubstr = function (char) { return function (str) {
		    if (!str)
		        return ["", ""];
		    var idx = str.indexOf(char);
		    if (idx === -1)
		        return [str, ""];
		    return [str.substr(0, idx), str.substr(idx + 1)];
		}; };


	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		/** @module transition */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var strings_1 = __webpack_require__(9);
		(function (RejectType) {
		    RejectType[RejectType["SUPERSEDED"] = 2] = "SUPERSEDED";
		    RejectType[RejectType["ABORTED"] = 3] = "ABORTED";
		    RejectType[RejectType["INVALID"] = 4] = "INVALID";
		    RejectType[RejectType["IGNORED"] = 5] = "IGNORED";
		    RejectType[RejectType["ERROR"] = 6] = "ERROR";
		})(exports.RejectType || (exports.RejectType = {}));
		var RejectType = exports.RejectType;
		var Rejection = (function () {
		    function Rejection(type, message, detail) {
		        this.type = type;
		        this.message = message;
		        this.detail = detail;
		    }
		    Rejection.prototype.toString = function () {
		        var detailString = function (d) {
		            return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d);
		        };
		        var type = this.type, message = this.message, detail = detailString(this.detail);
		        return "TransitionRejection(type: " + type + ", message: " + message + ", detail: " + detail + ")";
		    };
		    Rejection.prototype.toPromise = function () {
		        return common_1.extend(common_1.silentRejection(this), { _transitionRejection: this });
		    };
		    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */
		    Rejection.isTransitionRejectionPromise = function (obj) {
		        return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;
		    };
		    /** Returns a TransitionRejection due to transition superseded */
		    Rejection.superseded = function (detail, options) {
		        var message = "The transition has been superseded by a different transition";
		        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);
		        if (options && options.redirected) {
		            rejection.redirected = true;
		        }
		        return rejection;
		    };
		    /** Returns a TransitionRejection due to redirected transition */
		    Rejection.redirected = function (detail) {
		        return Rejection.superseded(detail, { redirected: true });
		    };
		    /** Returns a TransitionRejection due to invalid transition */
		    Rejection.invalid = function (detail) {
		        var message = "This transition is invalid";
		        return new Rejection(RejectType.INVALID, message, detail);
		    };
		    /** Returns a TransitionRejection due to ignored transition */
		    Rejection.ignored = function (detail) {
		        var message = "The transition was ignored";
		        return new Rejection(RejectType.IGNORED, message, detail);
		    };
		    /** Returns a TransitionRejection due to aborted transition */
		    Rejection.aborted = function (detail) {
		        // TODO think about how to encapsulate an Error() object
		        var message = "The transition has been aborted";
		        return new Rejection(RejectType.ABORTED, message, detail);
		    };
		    /** Returns a TransitionRejection due to aborted transition */
		    Rejection.errored = function (detail) {
		        // TODO think about how to encapsulate an Error() object
		        var message = "The transition errored";
		        return new Rejection(RejectType.ERROR, message, detail);
		    };
		    return Rejection;
		}());
		exports.Rejection = Rejection;


	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module transition */ /** for typedoc */
		var strings_1 = __webpack_require__(9);
		var trace_1 = __webpack_require__(12);
		var coreservices_1 = __webpack_require__(6);
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		var transitionHook_1 = __webpack_require__(13);
		var hookRegistry_1 = __webpack_require__(15);
		var hookBuilder_1 = __webpack_require__(16);
		var node_1 = __webpack_require__(21);
		var pathFactory_1 = __webpack_require__(20);
		var targetState_1 = __webpack_require__(14);
		var param_1 = __webpack_require__(22);
		var resolvable_1 = __webpack_require__(19);
		var rejectFactory_1 = __webpack_require__(10);
		var resolveContext_1 = __webpack_require__(17);
		var router_1 = __webpack_require__(25);
		var transitionCount = 0;
		var stateSelf = hof_1.prop("self");
		/**
		 * Represents a transition between two states.
		 *
		 * When navigating to a state, we are transitioning **from** the current state **to** the new state.
		 *
		 * This object contains all contextual information about the to/from states, parameters, resolves.
		 * It has information about all states being entered and exited as a result of the transition.
		 */
		var Transition = (function () {
		    /**
		     * Creates a new Transition object.
		     *
		     * If the target state is not valid, an error is thrown.
		     *
		     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`
		     *        encapsulates the "from state".
		     * @param targetState The target state and parameters being transitioned to (also, the transition options)
		     * @param router The [[UIRouter]] instance
		     */
		    function Transition(fromPath, targetState, router) {
		        var _this = this;
		        /** @hidden */
		        this._deferred = coreservices_1.services.$q.defer();
		        /**
		         * This promise is resolved or rejected based on the outcome of the Transition.
		         *
		         * When the transition is successful, the promise is resolved
		         * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error
		         */
		        this.promise = this._deferred.promise;
		        this.treeChanges = function () { return _this._treeChanges; };
		        this.isActive = function () { return _this === _this._options.current(); };
		        this.router = router;
		        this._targetState = targetState;
		        if (!targetState.valid()) {
		            throw new Error(targetState.error());
		        }
		        // Makes the Transition instance a hook registry (onStart, etc)
		        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);
		        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.
		        this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());
		        this.$id = transitionCount++;
		        var toPath = pathFactory_1.PathFactory.buildToPath(fromPath, targetState);
		        this._treeChanges = pathFactory_1.PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);
		        var enteringStates = this._treeChanges.entering.map(function (node) { return node.state; });
		        pathFactory_1.PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);
		        var rootResolvables = [
		            new resolvable_1.Resolvable(router_1.UIRouter, function () { return router; }, [], undefined, router),
		            new resolvable_1.Resolvable(Transition, function () { return _this; }, [], undefined, this),
		            new resolvable_1.Resolvable('$transition$', function () { return _this; }, [], undefined, this),
		            new resolvable_1.Resolvable('$stateParams', function () { return _this.params(); }, [], undefined, this.params())
		        ];
		        var rootNode = this._treeChanges.to[0];
		        var context = new resolveContext_1.ResolveContext(this._treeChanges.to);
		        context.addResolvables(rootResolvables, rootNode.state);
		    }
		    /** @inheritdoc */
		    Transition.prototype.onBefore = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onStart = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onExit = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onRetain = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onEnter = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onFinish = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onSuccess = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onError = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    Transition.prototype.$from = function () {
		        return common_1.tail(this._treeChanges.from).state;
		    };
		    Transition.prototype.$to = function () {
		        return common_1.tail(this._treeChanges.to).state;
		    };
		    /**
		     * Returns the "from state"
		     *
		     * @returns The state object for the Transition's "from state".
		     */
		    Transition.prototype.from = function () {
		        return this.$from().self;
		    };
		    /**
		     * Returns the "to state"
		     *
		     * @returns The state object for the Transition's target state ("to state").
		     */
		    Transition.prototype.to = function () {
		        return this.$to().self;
		    };
		    /**
		     * Gets the Target State
		     *
		     * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]].
		     *
		     * @returns the [[TargetState]] of this Transition
		     */
		    Transition.prototype.targetState = function () {
		        return this._targetState;
		    };
		    /**
		     * Determines whether two transitions are equivalent.
		     */
		    Transition.prototype.is = function (compare) {
		        if (compare instanceof Transition) {
		            // TODO: Also compare parameters
		            return this.is({ to: compare.$to().name, from: compare.$from().name });
		        }
		        return !((compare.to && !hookRegistry_1.matchState(this.$to(), compare.to)) ||
		            (compare.from && !hookRegistry_1.matchState(this.$from(), compare.from)));
		    };
		    /**
		     * Gets transition parameter values
		     *
		     * @param pathname Pick which treeChanges path to get parameters for:
		     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)
		     * @returns transition parameter values for the desired path.
		     */
		    Transition.prototype.params = function (pathname) {
		        if (pathname === void 0) { pathname = "to"; }
		        return this._treeChanges[pathname].map(hof_1.prop("paramValues")).reduce(common_1.mergeR, {});
		    };
		    /**
		     * Creates a [[UIInjector]] Dependency Injector
		     *
		     * Returns a Dependency Injector for the Transition's target state (to state).
		     * The injector provides resolve values which the target state has access to.
		     *
		     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).
		     *
		     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.
		     *
		     * @param state Limits the resolves provided to only the resolves the provided state has access to.
		     * @returns a [[UIInjector]]
		     */
		    Transition.prototype.injector = function (state) {
		        var path = this.treeChanges().to;
		        if (state)
		            path = pathFactory_1.PathFactory.subPath(path, function (node) { return node.state === state || node.state.name === state; });
		        return new resolveContext_1.ResolveContext(path).injector();
		    };
		    /**
		     * Gets all available resolve tokens (keys)
		     *
		     * This method can be used in conjunction with [[getResolve]] to inspect the resolve values
		     * available to the Transition.
		     *
		     * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states
		     * in the Transition's [[TreeChanges.to]] path.
		     *
		     * @returns an array of resolve tokens (keys)
		     */
		    Transition.prototype.getResolveTokens = function () {
		        return new resolveContext_1.ResolveContext(this._treeChanges.to).getTokens();
		    };
		    /**
		     * Gets resolved values
		     *
		     * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values
		     * are available to the Transition.
		     *
		     * Given a token, returns the resolved data for that token.
		     * Given an array of tokens, returns an array of resolved data for those tokens.
		     *
		     * If a resolvable hasn't yet been fetched, returns `undefined` for that token
		     * If a resolvable doesn't exist for the token, throws an error.
		     *
		     * @param token the token (or array of tokens)
		     *
		     * @returns an array of resolve tokens (keys)
		     */
		    Transition.prototype.getResolveValue = function (token) {
		        var resolveContext = new resolveContext_1.ResolveContext(this._treeChanges.to);
		        var getData = function (token) {
		            var resolvable = resolveContext.getResolvable(token);
		            if (resolvable === undefined) {
		                throw new Error("Dependency Injection token not found: " + strings_1.stringify(token));
		            }
		            return resolvable.data;
		        };
		        if (predicates_1.isArray(token)) {
		            return token.map(getData);
		        }
		        return getData(token);
		    };
		    /**
		     * Gets a [[Resolvable]] primitive
		     *
		     * This is a lower level API that returns a [[Resolvable]] from the Transition for a given token.
		     *
		     * @param token the DI token
		     *
		     * @returns the [[Resolvable]] in the transition's to path, or undefined
		     */
		    Transition.prototype.getResolvable = function (token) {
		        return new resolveContext_1.ResolveContext(this._treeChanges.to).getResolvable(token);
		    };
		    /**
		     * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.
		     *
		     * @param resolvable an [[Resolvable]] object
		     * @param state the state in the "to path" which should receive the new resolve (otherwise, the root state)
		     */
		    Transition.prototype.addResolvable = function (resolvable, state) {
		        if (state === void 0) { state = ""; }
		        var stateName = (typeof state === "string") ? state : state.name;
		        var topath = this._treeChanges.to;
		        var targetNode = common_1.find(topath, function (node) { return node.state.name === stateName; });
		        var resolveContext = new resolveContext_1.ResolveContext(topath);
		        resolveContext.addResolvables([resolvable], targetNode.state);
		    };
		    /**
		     * If the current transition is a redirect, returns the transition that was redirected.
		     *
		     * Gets the transition from which this transition was redirected.
		     *
		     *
		     * @example
		     * ```js
		     *
		     * let transitionA = $state.go('A').transitionA
		     * transitionA.onStart({}, () => $state.target('B'));
		     * $transitions.onSuccess({ to: 'B' }, (trans) => {
		     *   trans.to().name === 'B'; // true
		     *   trans.redirectedFrom() === transitionA; // true
		     * });
		     * ```
		     *
		     * @returns The previous Transition, or null if this Transition is not the result of a redirection
		     */
		    Transition.prototype.redirectedFrom = function () {
		        return this._options.redirectedFrom || null;
		    };
		    /**
		     * Get the transition options
		     *
		     * @returns the options for this Transition.
		     */
		    Transition.prototype.options = function () {
		        return this._options;
		    };
		    /**
		     * Gets the states being entered.
		     *
		     * @returns an array of states that will be entered during this transition.
		     */
		    Transition.prototype.entering = function () {
		        return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);
		    };
		    /**
		     * Gets the states being exited.
		     *
		     * @returns an array of states that will be exited during this transition.
		     */
		    Transition.prototype.exiting = function () {
		        return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();
		    };
		    /**
		     * Gets the states being retained.
		     *
		     * @returns an array of states that are already entered from a previous Transition, that will not be
		     *    exited during this Transition
		     */
		    Transition.prototype.retained = function () {
		        return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);
		    };
		    /**
		     * Get the [[ViewConfig]]s associated with this Transition
		     *
		     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.
		     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., "to" or "entering").
		     *
		     * @param pathname the name of the path to fetch views for:
		     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)
		     * @param state If provided, only returns the `ViewConfig`s for a single state in the path
		     *
		     * @returns a list of ViewConfig objects for the given path.
		     */
		    Transition.prototype.views = function (pathname, state) {
		        if (pathname === void 0) { pathname = "entering"; }
		        var path = this._treeChanges[pathname];
		        path = !state ? path : path.filter(hof_1.propEq('state', state));
		        return path.map(hof_1.prop("views")).filter(common_1.identity).reduce(common_1.unnestR, []);
		    };
		    /**
		     * Creates a new transition that is a redirection of the current one.
		     *
		     * This transition can be returned from a [[TransitionService]] hook to
		     * redirect a transition to a new state and/or set of parameters.
		     *
		     * @returns Returns a new [[Transition]] instance.
		     */
		    Transition.prototype.redirect = function (targetState) {
		        var newOptions = common_1.extend({}, this.options(), targetState.options(), { redirectedFrom: this, source: "redirect" });
		        targetState = new targetState_1.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);
		        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);
		        var originalEnteringNodes = this.treeChanges().entering;
		        var redirectEnteringNodes = newTransition.treeChanges().entering;
		        // --- Re-use resolve data from original transition ---
		        // When redirecting from a parent state to a child state where the parent parameter values haven't changed
		        // (because of the redirect), the resolves fetched by the original transition are still valid in the
		        // redirected transition.
		        //
		        // This allows you to define a redirect on a parent state which depends on an async resolve value.
		        // You can wait for the resolve, then redirect to a child state based on the result.
		        // The redirected transition does not have to re-fetch the resolve.
		        // ---------------------------------------------------------
		        var nodeIsReloading = function (reloadState) { return function (node) {
		            return reloadState && node.state.includes[reloadState.name];
		        }; };
		        // Find any "entering" nodes in the redirect path that match the original path and aren't being reloaded
		        var matchingEnteringNodes = node_1.PathNode.matching(redirectEnteringNodes, originalEnteringNodes)
		            .filter(hof_1.not(nodeIsReloading(targetState.options().reloadState)));
		        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.
		        matchingEnteringNodes.forEach(function (node, idx) {
		            node.resolvables = originalEnteringNodes[idx].resolvables;
		        });
		        return newTransition;
		    };
		    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */
		    Transition.prototype._changedParams = function () {
		        var _a = this._treeChanges, to = _a.to, from = _a.from;
		        if (this._options.reload || common_1.tail(to).state !== common_1.tail(from).state)
		            return undefined;
		        var nodeSchemas = to.map(function (node) { return node.paramSchema; });
		        var _b = [to, from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _b[0], fromValues = _b[1];
		        var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);
		        return tuples.map(function (_a) {
		            var schema = _a[0], toVals = _a[1], fromVals = _a[2];
		            return param_1.Param.changed(schema, toVals, fromVals);
		        }).reduce(common_1.unnestR, []);
		    };
		    /**
		     * Returns true if the transition is dynamic.
		     *
		     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.
		     *
		     * @returns true if the Transition is dynamic
		     */
		    Transition.prototype.dynamic = function () {
		        var changes = this._changedParams();
		        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(common_1.anyTrueR, false);
		    };
		    /**
		     * Returns true if the transition is ignored.
		     *
		     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.
		     *
		     * @returns true if the Transition is ignored.
		     */
		    Transition.prototype.ignored = function () {
		        var changes = this._changedParams();
		        return !changes ? false : changes.length === 0;
		    };
		    /**
		     * @hidden
		     */
		    Transition.prototype.hookBuilder = function () {
		        return new hookBuilder_1.HookBuilder(this.router.transitionService, this, {
		            transition: this,
		            current: this._options.current
		        });
		    };
		    /**
		     * Runs the transition
		     *
		     * This method is generally called from the [[StateService.transitionTo]]
		     *
		     * @returns a promise for a successful transition.
		     */
		    Transition.prototype.run = function () {
		        var _this = this;
		        var runSynchronousHooks = transitionHook_1.TransitionHook.runSynchronousHooks;
		        var hookBuilder = this.hookBuilder();
		        var globals = this.router.globals;
		        globals.transitionHistory.enqueue(this);
		        var syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());
		        if (rejectFactory_1.Rejection.isTransitionRejectionPromise(syncResult)) {
		            syncResult.catch(function () { return 0; }); // issue #2676
		            var rejectReason = syncResult._transitionRejection;
		            this._deferred.reject(rejectReason);
		            return this.promise;
		        }
		        if (!this.valid()) {
		            var error = new Error(this.error());
		            this._deferred.reject(error);
		            return this.promise;
		        }
		        if (this.ignored()) {
		            trace_1.trace.traceTransitionIgnored(this);
		            this._deferred.reject(rejectFactory_1.Rejection.ignored());
		            return this.promise;
		        }
		        // When the chain is complete, then resolve or reject the deferred
		        var transitionSuccess = function () {
		            trace_1.trace.traceSuccess(_this.$to(), _this);
		            _this.success = true;
		            _this._deferred.resolve(_this.to());
		            runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);
		        };
		        var transitionError = function (reason) {
		            trace_1.trace.traceError(reason, _this);
		            _this.success = false;
		            _this._deferred.reject(reason);
		            _this._error = reason;
		            runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);
		        };
		        trace_1.trace.traceTransitionStart(this);
		        // Chain the next hook off the previous
		        var appendHookToChain = function (prev, nextHook) {
		            return prev.then(function () { return nextHook.invokeHook(); });
		        };
		        // Run the hooks, then resolve or reject the overall deferred in the .then() handler
		        hookBuilder.asyncHooks()
		            .reduce(appendHookToChain, syncResult)
		            .then(transitionSuccess, transitionError);
		        return this.promise;
		    };
		    /**
		     * Checks if the Transition is valid
		     *
		     * @returns true if the Transition is valid
		     */
		    Transition.prototype.valid = function () {
		        return !this.error() || this.success !== undefined;
		    };
		    /**
		     * The Transition error reason.
		     *
		     * If the transition is invalid (and could not be run), returns the reason the transition is invalid.
		     * If the transition was valid and ran, but was not successful, returns the reason the transition failed.
		     *
		     * @returns an error message explaining why the transition is invalid, or the reason the transition failed.
		     */
		    Transition.prototype.error = function () {
		        var state = this.$to();
		        var redirects = 0, trans = this;
		        while ((trans = trans.redirectedFrom()) != null) {
		            if (++redirects > 20)
		                return "Too many Transition redirects (20+)";
		        }
		        if (state.self.abstract)
		            return "Cannot transition to abstract state '" + state.name + "'";
		        if (!param_1.Param.validates(state.parameters(), this.params()))
		            return "Param values not valid for state '" + state.name + "'";
		        if (this.success === false)
		            return this._error;
		    };
		    /**
		     * A string representation of the Transition
		     *
		     * @returns A string representation of the Transition
		     */
		    Transition.prototype.toString = function () {
		        var fromStateOrName = this.from();
		        var toStateOrName = this.to();
		        var avoidEmptyHash = function (params) {
		            return (params["#"] !== null && params["#"] !== undefined) ? params : common_1.omit(params, "#");
		        };
		        // (X) means the to state is invalid.
		        var id = this.$id, from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))), toValid = this.valid() ? "" : "(X) ", to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = common_1.toJson(avoidEmptyHash(this.params()));
		        return "Transition#" + id + "( '" + from + "'" + fromParams + " -> " + toValid + "'" + to + "'" + toParams + " )";
		    };
		    Transition.diToken = Transition;
		    return Transition;
		}());
		exports.Transition = Transition;


	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/**
		 * UI-Router Transition Tracing
		 *
		 * Enable transition tracing to print transition information to the console, in order to help debug your application.
		 * Tracing logs detailed information about each Transition to your console.
		 *
		 * To enable tracing, import the [[trace]] singleton and enable one or more categories.
		 *
		 * ES6
		 * ```
		 *
		 * import {trace} from "ui-router-ng2"; // or "angular-ui-router"
		 * trace.enable(1, 5); // TRANSITION and VIEWCONFIG
		 * ```
		 *
		 * CJS
		 * ```
		 *
		 * let trace = require("angular-ui-router").trace; // or "ui-router-ng2"
		 * trace.enable("TRANSITION", "VIEWCONFIG");
		 * ```
		 *
		 * Globals
		 * ```
		 *
		 * let trace = window["angular-ui-router"].trace; // or "ui-router-ng2"
		 * trace.enable(); // Trace everything (very verbose)
		 * ```
		 *
		 * @module trace
		 */ /** for typedoc */
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var strings_1 = __webpack_require__(9);
		/** @hidden */
		function uiViewString(viewData) {
		    if (!viewData)
		        return 'ui-view (defunct)';
		    return ("[ui-view#" + viewData.id + " tag ") +
		        ("in template from '" + (viewData.creationContext && viewData.creationContext.name || '(root)') + "' state]: ") +
		        ("fqn: '" + viewData.fqn + "', ") +
		        ("name: '" + viewData.name + "@" + viewData.creationContext + "')");
		}
		/** @hidden */
		var viewConfigString = function (viewConfig) {
		    return ("[ViewConfig#" + viewConfig.$id + " from '" + (viewConfig.viewDecl.$context.name || '(root)') + "' state]: target ui-view: '" + viewConfig.viewDecl.$uiViewName + "@" + viewConfig.viewDecl.$uiViewContextAnchor + "'");
		};
		/** @hidden */
		function normalizedCat(input) {
		    return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];
		}
		/**
		 * Trace categories
		 *
		 * [[Trace.enable]] or [[Trace.disable]] a category
		 *
		 * `trace.enable(Category.TRANSITION)`
		 *
		 * These can also be provided using a matching string, or position ordinal
		 *
		 * `trace.enable("TRANSITION")`
		 *
		 * `trace.enable(1)`
		 */
		(function (Category) {
		    Category[Category["RESOLVE"] = 0] = "RESOLVE";
		    Category[Category["TRANSITION"] = 1] = "TRANSITION";
		    Category[Category["HOOK"] = 2] = "HOOK";
		    Category[Category["UIVIEW"] = 3] = "UIVIEW";
		    Category[Category["VIEWCONFIG"] = 4] = "VIEWCONFIG";
		})(exports.Category || (exports.Category = {}));
		var Category = exports.Category;
		/**
		 * Prints UI-Router Transition trace information to the console.
		 */
		var Trace = (function () {
		    function Trace() {
		        /** @hidden */
		        this._enabled = {};
		        this.approximateDigests = 0;
		    }
		    /** @hidden */
		    Trace.prototype._set = function (enabled, categories) {
		        var _this = this;
		        if (!categories.length) {
		            categories = Object.keys(Category)
		                .map(function (k) { return parseInt(k, 10); })
		                .filter(function (k) { return !isNaN(k); })
		                .map(function (key) { return Category[key]; });
		        }
		        categories.map(normalizedCat).forEach(function (category) { return _this._enabled[category] = enabled; });
		    };
		    /**
		     * Enables a trace [[Category]]
		     *
		     * ```
		     * trace.enable("TRANSITION");
		     * ```
		     *
		     * @param categories categories to enable. If `categories` is omitted, all categories are enabled.
		     *        Also takes strings (category name) or ordinal (category position)
		     */
		    Trace.prototype.enable = function () {
		        var categories = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            categories[_i - 0] = arguments[_i];
		        }
		        this._set(true, categories);
		    };
		    /**
		     * Disables a trace [[Category]]
		     *
		     * ```
		     * trace.disable("VIEWCONFIG");
		     * ```
		     *
		     * @param categories categories to disable. If `categories` is omitted, all categories are disabled.
		     *        Also takes strings (category name) or ordinal (category position)
		     */
		    Trace.prototype.disable = function () {
		        var categories = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            categories[_i - 0] = arguments[_i];
		        }
		        this._set(false, categories);
		    };
		    /**
		     * Retrieves the enabled stateus of a [[Category]]
		     *
		     * ```
		     * trace.enabled("VIEWCONFIG"); // true or false
		     * ```
		     *
		     * @returns boolean true if the category is enabled
		     */
		    Trace.prototype.enabled = function (category) {
		        return !!this._enabled[normalizedCat(category)];
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceTransitionStart = function (transition) {
		        if (!this.enabled(Category.TRANSITION))
		            return;
		        var tid = transition.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(transition);
		        console.log("Transition #" + tid + " Digest #" + digest + ": Started  -> " + transitionStr);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceTransitionIgnored = function (trans) {
		        if (!this.enabled(Category.TRANSITION))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);
		        console.log("Transition #" + tid + " Digest #" + digest + ": Ignored  <> " + transitionStr);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceHookInvocation = function (step, options) {
		        if (!this.enabled(Category.HOOK))
		            return;
		        var tid = hof_1.parse("transition.$id")(options), digest = this.approximateDigests, event = hof_1.parse("traceData.hookType")(options) || "internal", context = hof_1.parse("traceData.context.state.name")(options) || hof_1.parse("traceData.context")(options) || "unknown", name = strings_1.functionToString(step.eventHook.callback);
		        console.log("Transition #" + tid + " Digest #" + digest + ":   Hook -> " + event + " context: " + context + ", " + strings_1.maxLength(200, name));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceHookResult = function (hookResult, transitionOptions) {
		        if (!this.enabled(Category.HOOK))
		            return;
		        var tid = hof_1.parse("transition.$id")(transitionOptions), digest = this.approximateDigests, hookResultStr = strings_1.stringify(hookResult);
		        console.log("Transition #" + tid + " Digest #" + digest + ":   <- Hook returned: " + strings_1.maxLength(200, hookResultStr));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceResolvePath = function (path, when, trans) {
		        if (!this.enabled(Category.RESOLVE))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, pathStr = path && path.toString();
		        console.log("Transition #" + tid + " Digest #" + digest + ":         Resolving " + pathStr + " (" + when + ")");
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {
		        if (!this.enabled(Category.RESOLVE))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, resolvableStr = resolvable && resolvable.toString(), result = strings_1.stringify(resolvable.data);
		        console.log("Transition #" + tid + " Digest #" + digest + ":               <- Resolved  " + resolvableStr + " to: " + strings_1.maxLength(200, result));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceError = function (reason, trans) {
		        if (!this.enabled(Category.TRANSITION))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);
		        console.log("Transition #" + tid + " Digest #" + digest + ": <- Rejected " + transitionStr + ", reason: " + reason);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceSuccess = function (finalState, trans) {
		        if (!this.enabled(Category.TRANSITION))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, state = finalState.name, transitionStr = strings_1.stringify(trans);
		        console.log("Transition #" + tid + " Digest #" + digest + ": <- Success  " + transitionStr + ", final state: " + state);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {
		        if (extra === void 0) { extra = ""; }
		        if (!this.enabled(Category.UIVIEW))
		            return;
		        console.log("ui-view: " + strings_1.padString(30, event) + " " + uiViewString(viewData) + extra);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {
		        if (!this.enabled(Category.UIVIEW))
		            return;
		        this.traceUIViewEvent("Updating", viewData, " with ViewConfig from context='" + context + "'");
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceUIViewFill = function (viewData, html) {
		        if (!this.enabled(Category.UIVIEW))
		            return;
		        this.traceUIViewEvent("Fill", viewData, " with: " + strings_1.maxLength(200, html));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {
		        if (!this.enabled(Category.VIEWCONFIG))
		            return;
		        console.log("VIEWCONFIG: " + event + " " + viewConfigString(viewConfig));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {
		        if (!this.enabled(Category.VIEWCONFIG))
		            return;
		        console.log("VIEWCONFIG: " + event + " " + uiViewString(viewData));
		    };
		    return Trace;
		}());
		exports.Trace = Trace;
		/**
		 * The [[Trace]] singleton
		 *
		 * @example
		 * ```js
		 *
		 * import {trace} from "angular-ui-router";
		 * trace.enable(1, 5);
		 * ```
		 */
		var trace = new Trace();
		exports.trace = trace;


	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		var common_1 = __webpack_require__(3);
		var strings_1 = __webpack_require__(9);
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		var trace_1 = __webpack_require__(12);
		var coreservices_1 = __webpack_require__(6);
		var rejectFactory_1 = __webpack_require__(10);
		var targetState_1 = __webpack_require__(14);
		var defaultOptions = {
		    async: true,
		    rejectIfSuperseded: true,
		    current: common_1.noop,
		    transition: null,
		    traceData: {},
		    bind: null
		};
		/** @hidden */
		var TransitionHook = (function () {
		    function TransitionHook(transition, stateContext, eventHook, options) {
		        var _this = this;
		        this.transition = transition;
		        this.stateContext = stateContext;
		        this.eventHook = eventHook;
		        this.options = options;
		        this.isSuperseded = function () {
		            return _this.options.current() !== _this.options.transition;
		        };
		        this.options = common_1.defaults(options, defaultOptions);
		    }
		    TransitionHook.prototype.invokeHook = function () {
		        var _a = this, options = _a.options, eventHook = _a.eventHook;
		        trace_1.trace.traceHookInvocation(this, options);
		        if (options.rejectIfSuperseded && this.isSuperseded()) {
		            return rejectFactory_1.Rejection.superseded(options.current()).toPromise();
		        }
		        var synchronousHookResult = !eventHook._deregistered
		            ? eventHook.callback.call(options.bind, this.transition, this.stateContext)
		            : undefined;
		        return this.handleHookResult(synchronousHookResult);
		    };
		    /**
		     * This method handles the return value of a Transition Hook.
		     *
		     * A hook can return false (cancel), a TargetState (redirect),
		     * or a promise (which may later resolve to false or a redirect)
		     *
		     * This also handles "transition superseded" -- when a new transition
		     * was started while the hook was still running
		     */
		    TransitionHook.prototype.handleHookResult = function (result) {
		        // This transition is no longer current.
		        // Another transition started while this hook was still running.
		        if (this.isSuperseded()) {
		            // Abort this transition
		            return rejectFactory_1.Rejection.superseded(this.options.current()).toPromise();
		        }
		        // Hook returned a promise
		        if (predicates_1.isPromise(result)) {
		            // Wait for the promise, then reprocess the resolved value
		            return result.then(this.handleHookResult.bind(this));
		        }
		        trace_1.trace.traceHookResult(result, this.options);
		        // Hook returned false
		        if (result === false) {
		            // Abort this Transition
		            return rejectFactory_1.Rejection.aborted("Hook aborted transition").toPromise();
		        }
		        var isTargetState = hof_1.is(targetState_1.TargetState);
		        // hook returned a TargetState
		        if (isTargetState(result)) {
		            // Halt the current Transition and start a redirected Transition (to the TargetState).
		            return rejectFactory_1.Rejection.redirected(result).toPromise();
		        }
		    };
		    TransitionHook.prototype.toString = function () {
		        var _a = this, options = _a.options, eventHook = _a.eventHook;
		        var event = hof_1.parse("traceData.hookType")(options) || "internal", context = hof_1.parse("traceData.context.state.name")(options) || hof_1.parse("traceData.context")(options) || "unknown", name = strings_1.fnToString(eventHook.callback);
		        return event + " context: " + context + ", " + strings_1.maxLength(200, name);
		    };
		    /**
		     * Given an array of TransitionHooks, runs each one synchronously and sequentially.
		     *
		     * Returns a promise chain composed of any promises returned from each hook.invokeStep() call
		     */
		    TransitionHook.runSynchronousHooks = function (hooks, swallowExceptions) {
		        if (swallowExceptions === void 0) { swallowExceptions = false; }
		        var results = [];
		        for (var i = 0; i < hooks.length; i++) {
		            var hook = hooks[i];
		            try {
		                results.push(hook.invokeHook());
		            }
		            catch (exception) {
		                if (!swallowExceptions) {
		                    return rejectFactory_1.Rejection.errored(exception).toPromise();
		                }
		                var errorHandler = hook.transition.router.stateService.defaultErrorHandler();
		                errorHandler(exception);
		            }
		        }
		        var rejections = results.filter(rejectFactory_1.Rejection.isTransitionRejectionPromise);
		        if (rejections.length)
		            return rejections[0];
		        return results
		            .filter(predicates_1.isPromise)
		            .reduce(function (chain, promise) { return chain.then(hof_1.val(promise)); }, coreservices_1.services.$q.when());
		    };
		    return TransitionHook;
		}());
		exports.TransitionHook = TransitionHook;


	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

		/** @module state */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		/**
		 * @ngdoc object
		 * @name ui.router.state.type:TargetState
		 *
		 * @description
		 * Encapsulate the desired target of a transition.
		 * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.
		 *
		 * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object
		 *            used to define the state.
		 * @param {IState} _definition The `State` object definition.
		 * @param {ParamsOrArray} _params Parameters for the target state
		 * @param {TransitionOptions} _options Transition options.
		 */
		var TargetState = (function () {
		    function TargetState(_identifier, _definition, _params, _options) {
		        if (_params === void 0) { _params = {}; }
		        if (_options === void 0) { _options = {}; }
		        this._identifier = _identifier;
		        this._definition = _definition;
		        this._options = _options;
		        this._params = _params || {};
		    }
		    TargetState.prototype.name = function () {
		        return this._definition && this._definition.name || this._identifier;
		    };
		    TargetState.prototype.identifier = function () {
		        return this._identifier;
		    };
		    TargetState.prototype.params = function () {
		        return this._params;
		    };
		    TargetState.prototype.$state = function () {
		        return this._definition;
		    };
		    TargetState.prototype.state = function () {
		        return this._definition && this._definition.self;
		    };
		    TargetState.prototype.options = function () {
		        return this._options;
		    };
		    TargetState.prototype.exists = function () {
		        return !!(this._definition && this._definition.self);
		    };
		    TargetState.prototype.valid = function () {
		        return !this.error();
		    };
		    TargetState.prototype.error = function () {
		        var base = this.options().relative;
		        if (!this._definition && !!base) {
		            var stateName = base.name ? base.name : base;
		            return "Could not resolve '" + this.name() + "' from state '" + stateName + "'";
		        }
		        if (!this._definition)
		            return "No such state '" + this.name() + "'";
		        if (!this._definition.self)
		            return "State '" + this.name() + "' has an invalid definition";
		    };
		    TargetState.prototype.toString = function () {
		        return "'" + this.name() + "'" + common_1.toJson(this.params());
		    };
		    return TargetState;
		}());
		exports.TargetState = TargetState;


	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module transition */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var glob_1 = __webpack_require__(7);
		/**
		 * Determines if the given state matches the matchCriteria
		 *
		 * @hidden
		 *
		 * @param state a State Object to test against
		 * @param criterion
		 * - If a string, matchState uses the string as a glob-matcher against the state name
		 * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name
		 *   and returns a positive match if any of the globs match.
		 * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.
		 * @returns {boolean}
		 */
		function matchState(state, criterion) {
		    var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;
		    function matchGlobs(_state) {
		        var globStrings = toMatch;
		        for (var i = 0; i < globStrings.length; i++) {
		            var glob = glob_1.Glob.fromString(globStrings[i]);
		            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {
		                return true;
		            }
		        }
		        return false;
		    }
		    var matchFn = (predicates_1.isFunction(toMatch) ? toMatch : matchGlobs);
		    return !!matchFn(state);
		}
		exports.matchState = matchState;
		/** @hidden */
		var EventHook = (function () {
		    function EventHook(matchCriteria, callback, options) {
		        if (options === void 0) { options = {}; }
		        this.callback = callback;
		        this.matchCriteria = common_1.extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);
		        this.priority = options.priority || 0;
		        this.bind = options.bind || null;
		        this._deregistered = false;
		    }
		    EventHook._matchingNodes = function (nodes, criterion) {
		        if (criterion === true)
		            return nodes;
		        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });
		        return matching.length ? matching : null;
		    };
		    /**
		     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]
		     *
		     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values
		     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)
		     */
		    EventHook.prototype.matches = function (treeChanges) {
		        var mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;
		        var matches = {
		            to: _matchingNodes([common_1.tail(treeChanges.to)], mc.to),
		            from: _matchingNodes([common_1.tail(treeChanges.from)], mc.from),
		            exiting: _matchingNodes(treeChanges.exiting, mc.exiting),
		            retained: _matchingNodes(treeChanges.retained, mc.retained),
		            entering: _matchingNodes(treeChanges.entering, mc.entering),
		        };
		        // Check if all the criteria matched the TreeChanges object
		        var allMatched = ["to", "from", "exiting", "retained", "entering"]
		            .map(function (prop) { return matches[prop]; })
		            .reduce(common_1.allTrueR, true);
		        return allMatched ? matches : null;
		    };
		    return EventHook;
		}());
		exports.EventHook = EventHook;
		/** @hidden Return a registration function of the requested type. */
		function makeHookRegistrationFn(hooks, name) {
		    return function (matchObject, callback, options) {
		        if (options === void 0) { options = {}; }
		        var eventHook = new EventHook(matchObject, callback, options);
		        hooks[name].push(eventHook);
		        return function deregisterEventHook() {
		            eventHook._deregistered = true;
		            common_1.removeFrom(hooks[name])(eventHook);
		        };
		    };
		}
		/**
		 * Mixin class acts as a Transition Hook registry.
		 *
		 * Holds the registered [[HookFn]] objects.
		 * Exposes functions to register new hooks.
		 *
		 * This is a Mixin class which can be applied to other objects.
		 *
		 * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].
		 *
		 * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.
		 * Global hooks are added to the [[TransitionService]].
		 * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions
		 * (note: the hook criteria still must match the Transition).
		 */
		var HookRegistry = (function () {
		    function HookRegistry() {
		        var _this = this;
		        this._transitionEvents = {
		            onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []
		        };
		        this.getHooks = function (name) { return _this._transitionEvents[name]; };
		        /** @inheritdoc */
		        this.onBefore = makeHookRegistrationFn(this._transitionEvents, "onBefore");
		        /** @inheritdoc */
		        this.onStart = makeHookRegistrationFn(this._transitionEvents, "onStart");
		        /** @inheritdoc */
		        this.onEnter = makeHookRegistrationFn(this._transitionEvents, "onEnter");
		        /** @inheritdoc */
		        this.onRetain = makeHookRegistrationFn(this._transitionEvents, "onRetain");
		        /** @inheritdoc */
		        this.onExit = makeHookRegistrationFn(this._transitionEvents, "onExit");
		        /** @inheritdoc */
		        this.onFinish = makeHookRegistrationFn(this._transitionEvents, "onFinish");
		        /** @inheritdoc */
		        this.onSuccess = makeHookRegistrationFn(this._transitionEvents, "onSuccess");
		        /** @inheritdoc */
		        this.onError = makeHookRegistrationFn(this._transitionEvents, "onError");
		    }
		    HookRegistry.mixin = function (source, target) {
		        Object.keys(source._transitionEvents).concat(["getHooks"]).forEach(function (key) { return target[key] = source[key]; });
		    };
		    return HookRegistry;
		}());
		exports.HookRegistry = HookRegistry;


	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

		/** @module transition */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var transitionHook_1 = __webpack_require__(13);
		var resolveContext_1 = __webpack_require__(17);
		/**
		 * This class returns applicable TransitionHooks for a specific Transition instance.
		 *
		 * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.
		 * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is
		 * determined by the type of hook)
		 *
		 * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.
		 *
		 * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder
		 * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private
		 * in the Transition class, so we must also provide the Transition's _treeChanges)
		 *
		 */
		var HookBuilder = (function () {
		    function HookBuilder($transitions, transition, baseHookOptions) {
		        var _this = this;
		        this.$transitions = $transitions;
		        this.transition = transition;
		        this.baseHookOptions = baseHookOptions;
		        this.getOnBeforeHooks = function () { return _this._buildNodeHooks("onBefore", "to", tupleSort(), { async: false }); };
		        this.getOnStartHooks = function () { return _this._buildNodeHooks("onStart", "to", tupleSort()); };
		        this.getOnExitHooks = function () { return _this._buildNodeHooks("onExit", "exiting", tupleSort(true), { stateHook: true }); };
		        this.getOnRetainHooks = function () { return _this._buildNodeHooks("onRetain", "retained", tupleSort(false), { stateHook: true }); };
		        this.getOnEnterHooks = function () { return _this._buildNodeHooks("onEnter", "entering", tupleSort(false), { stateHook: true }); };
		        this.getOnFinishHooks = function () { return _this._buildNodeHooks("onFinish", "to", tupleSort()); };
		        this.getOnSuccessHooks = function () { return _this._buildNodeHooks("onSuccess", "to", tupleSort(), { async: false, rejectIfSuperseded: false }); };
		        this.getOnErrorHooks = function () { return _this._buildNodeHooks("onError", "to", tupleSort(), { async: false, rejectIfSuperseded: false }); };
		        this.treeChanges = transition.treeChanges();
		        this.toState = common_1.tail(this.treeChanges.to).state;
		        this.fromState = common_1.tail(this.treeChanges.from).state;
		        this.transitionOptions = transition.options();
		    }
		    HookBuilder.prototype.asyncHooks = function () {
		        var onStartHooks = this.getOnStartHooks();
		        var onExitHooks = this.getOnExitHooks();
		        var onRetainHooks = this.getOnRetainHooks();
		        var onEnterHooks = this.getOnEnterHooks();
		        var onFinishHooks = this.getOnFinishHooks();
		        var asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];
		        return asyncHooks.reduce(common_1.unnestR, []).filter(common_1.identity);
		    };
		    /**
		     * Returns an array of newly built TransitionHook objects.
		     *
		     * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].
		     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)
		     * - For each of the [[PathNode]]s, creates a TransitionHook
		     *
		     * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.
		     * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.
		     * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables
		     * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1
		     * @param options any specific Transition Hook Options
		     */
		    HookBuilder.prototype._buildNodeHooks = function (hookType, matchingNodesProp, sortHooksFn, options) {
		        var _this = this;
		        // Find all the matching registered hooks for a given hook type
		        var matchingHooks = this._matchingHooks(hookType, this.treeChanges);
		        if (!matchingHooks)
		            return [];
		        var makeTransitionHooks = function (hook) {
		            // Fetch the Nodes that caused this hook to match.
		            var matches = hook.matches(_this.treeChanges);
		            // Select the PathNode[] that will be used as TransitionHook context objects
		            var matchingNodes = matches[matchingNodesProp];
		            // When invoking 'exiting' hooks, give them the "from path" for resolve data.
		            // Everything else gets the "to path"
		            var resolvePath = matchingNodesProp === 'exiting' ? _this.treeChanges.from : _this.treeChanges.to;
		            var resolveContext = new resolveContext_1.ResolveContext(resolvePath);
		            // Return an array of HookTuples
		            return matchingNodes.map(function (node) {
		                var _options = common_1.extend({ bind: hook.bind, traceData: { hookType: hookType, context: node } }, _this.baseHookOptions, options);
		                var state = _options.stateHook ? node.state : null;
		                var transitionHook = new transitionHook_1.TransitionHook(_this.transition, state, hook, _options);
		                return { hook: hook, node: node, transitionHook: transitionHook };
		            });
		        };
		        return matchingHooks.map(makeTransitionHooks)
		            .reduce(common_1.unnestR, [])
		            .sort(sortHooksFn)
		            .map(function (tuple) { return tuple.transitionHook; });
		    };
		    /**
		     * Finds all IEventHooks from:
		     * - The Transition object instance hook registry
		     * - The TransitionService ($transitions) global hook registry
		     *
		     * which matched:
		     * - the eventType
		     * - the matchCriteria (to, from, exiting, retained, entering)
		     *
		     * @returns an array of matched [[IEventHook]]s
		     */
		    HookBuilder.prototype._matchingHooks = function (hookName, treeChanges) {
		        return [this.transition, this.$transitions] // Instance and Global hook registries
		            .map(function (reg) { return reg.getHooks(hookName); }) // Get named hooks from registries
		            .filter(common_1.assertPredicate(predicates_1.isArray, "broken event named: " + hookName)) // Sanity check
		            .reduce(common_1.unnestR, []) // Un-nest IEventHook[][] to IEventHook[] array
		            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria
		    };
		    return HookBuilder;
		}());
		exports.HookBuilder = HookBuilder;
		/**
		 * A factory for a sort function for HookTuples.
		 *
		 * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares
		 * the EventHook priority.
		 *
		 * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth
		 * @returns a tuple sort function
		 */
		function tupleSort(reverseDepthSort) {
		    if (reverseDepthSort === void 0) { reverseDepthSort = false; }
		    return function nodeDepthThenPriority(l, r) {
		        var factor = reverseDepthSort ? -1 : 1;
		        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;
		        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;
		    };
		}


	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module resolve */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var trace_1 = __webpack_require__(12);
		var coreservices_1 = __webpack_require__(6);
		var interface_1 = __webpack_require__(18);
		var resolvable_1 = __webpack_require__(19);
		var pathFactory_1 = __webpack_require__(20);
		var strings_1 = __webpack_require__(9);
		var when = interface_1.resolvePolicies.when;
		var ALL_WHENS = [when.EAGER, when.LAZY];
		var EAGER_WHENS = [when.EAGER];
		exports.NATIVE_INJECTOR_TOKEN = "Native Injector";
		/**
		 * Encapsulates Depenency Injection for a path of nodes
		 *
		 * UI-Router states are organized as a tree.
		 * A nested state has a path of ancestors to the root of the tree.
		 * When a state is being activated, each element in the path is wrapped as a [[PathNode]].
		 * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.
		 *
		 * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.
		 */
		var ResolveContext = (function () {
		    function ResolveContext(_path) {
		        this._path = _path;
		    }
		    /** Gets all the tokens found in the resolve context, de-duplicated */
		    ResolveContext.prototype.getTokens = function () {
		        return this._path.reduce(function (acc, node) { return acc.concat(node.resolvables.map(function (r) { return r.token; })); }, []).reduce(common_1.uniqR, []);
		    };
		    /**
		     * Gets the Resolvable that matches the token
		     *
		     * Gets the last Resolvable that matches the token in this context, or undefined.
		     * Throws an error if it doesn't exist in the ResolveContext
		     */
		    ResolveContext.prototype.getResolvable = function (token) {
		        var matching = this._path.map(function (node) { return node.resolvables; })
		            .reduce(common_1.unnestR, [])
		            .filter(function (r) { return r.token === token; });
		        return common_1.tail(matching);
		    };
		    /**
		     * Returns a ResolveContext that includes a portion of this one
		     *
		     * Given a state, this method creates a new ResolveContext from this one.
		     * The new context starts at the first node (root) and stops at the node for the `state` parameter.
		     *
		     * #### Why
		     *
		     * When a transition is created, the nodes in the "To Path" are injected from a ResolveContext.
		     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.
		     * The "To State" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).
		     * This method is used to create a narrower context when injecting ancestor nodes.
		     *
		     * @example
		     * `let ABCD = new ResolveContext([A, B, C, D]);`
		     *
		     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:
		     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.
		     * However, `B` should only be able to access resolvables from `A`, `B`.
		     *
		     * When resolving for the `B` node, first take the full "To Path" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.
		     * `let AB = ABCD.subcontext(a)`
		     */
		    ResolveContext.prototype.subContext = function (state) {
		        return new ResolveContext(pathFactory_1.PathFactory.subPath(this._path, function (node) { return node.state === state; }));
		    };
		    /**
		     * Adds Resolvables to the node that matches the state
		     *
		     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).
		     * The resolvable is added to the node matching the `state` parameter.
		     *
		     * These new resolvables are not automatically fetched.
		     * The calling code should either fetch them, fetch something that depends on them,
		     * or rely on [[resolvePath]] being called when some state is being entered.
		     *
		     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.
		     *
		     * @param newResolvables the new Resolvables
		     * @param state Used to find the node to put the resolvable on
		     */
		    ResolveContext.prototype.addResolvables = function (newResolvables, state) {
		        var node = common_1.find(this._path, hof_1.propEq('state', state));
		        var keys = newResolvables.map(function (r) { return r.token; });
		        node.resolvables = node.resolvables.filter(function (r) { return keys.indexOf(r.token) === -1; }).concat(newResolvables);
		    };
		    /**
		     * Returns a promise for an array of resolved path Element promises
		     *
		     * @param when
		     * @param trans
		     * @returns {Promise<any>|any}
		     */
		    ResolveContext.prototype.resolvePath = function (when, trans) {
		        var _this = this;
		        if (when === void 0) { when = "LAZY"; }
		        // This option determines which 'when' policy Resolvables we are about to fetch.
		        var whenOption = common_1.inArray(ALL_WHENS, when) ? when : "LAZY";
		        // If the caller specified EAGER, only the EAGER Resolvables are fetched.
		        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`
		        var matchedWhens = whenOption === interface_1.resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;
		        // get the subpath to the state argument, if provided
		        trace_1.trace.traceResolvePath(this._path, when, trans);
		        var promises = this._path.reduce(function (acc, node) {
		            var matchesRequestedPolicy = function (resolvable) {
		                return common_1.inArray(matchedWhens, resolvable.getPolicy(node.state).when);
		            };
		            var nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);
		            var subContext = _this.subContext(node.state);
		            // For the matching Resolvables, start their async fetch process.
		            var getResult = function (r) { return r.get(subContext, trans)
		                .then(function (value) { return ({ token: r.token, value: value }); }); };
		            return acc.concat(nodeResolvables.map(getResult));
		        }, []);
		        return coreservices_1.services.$q.all(promises);
		    };
		    ResolveContext.prototype.injector = function () {
		        return this._injector || (this._injector = new UIInjectorImpl(this));
		    };
		    ResolveContext.prototype.findNode = function (resolvable) {
		        return common_1.find(this._path, function (node) { return common_1.inArray(node.resolvables, resolvable); });
		    };
		    /**
		     * Gets the async dependencies of a Resolvable
		     *
		     * Given a Resolvable, returns its dependencies as a Resolvable[]
		     */
		    ResolveContext.prototype.getDependencies = function (resolvable) {
		        var _this = this;
		        var node = this.findNode(resolvable);
		        // Find which other resolvables are "visible" to the `resolvable` argument
		        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)
		        var subPath = pathFactory_1.PathFactory.subPath(this._path, function (x) { return x === node; }) || this._path;
		        var availableResolvables = subPath
		            .reduce(function (acc, node) { return acc.concat(node.resolvables); }, []) //all of subpath's resolvables
		            .filter(function (res) { return res !== resolvable; }); // filter out the `resolvable` argument
		        var getDependency = function (token) {
		            var matching = availableResolvables.filter(function (r) { return r.token === token; });
		            if (matching.length)
		                return common_1.tail(matching);
		            var fromInjector = _this.injector().getNative(token);
		            if (!fromInjector) {
		                throw new Error("Could not find Dependency Injection token: " + strings_1.stringify(token));
		            }
		            return new resolvable_1.Resolvable(token, function () { return fromInjector; }, [], fromInjector);
		        };
		        return resolvable.deps.map(getDependency);
		    };
		    return ResolveContext;
		}());
		exports.ResolveContext = ResolveContext;
		var UIInjectorImpl = (function () {
		    function UIInjectorImpl(context) {
		        this.context = context;
		        this.native = this.get(exports.NATIVE_INJECTOR_TOKEN) || coreservices_1.services.$injector;
		    }
		    UIInjectorImpl.prototype.get = function (token) {
		        var resolvable = this.context.getResolvable(token);
		        if (resolvable) {
		            if (!resolvable.resolved) {
		                throw new Error("Resolvable async .get() not complete:" + strings_1.stringify(resolvable.token));
		            }
		            return resolvable.data;
		        }
		        return this.native && this.native.get(token);
		    };
		    UIInjectorImpl.prototype.getAsync = function (token) {
		        var resolvable = this.context.getResolvable(token);
		        if (resolvable)
		            return resolvable.get(this.context);
		        return coreservices_1.services.$q.when(this.native.get(token));
		    };
		    UIInjectorImpl.prototype.getNative = function (token) {
		        return this.native.get(token);
		    };
		    return UIInjectorImpl;
		}());


	/***/ },
	/* 18 */
	/***/ function(module, exports) {

		"use strict";
		exports.resolvePolicies = {
		    when: {
		        LAZY: "LAZY",
		        EAGER: "EAGER"
		    },
		    async: {
		        WAIT: "WAIT",
		        NOWAIT: "NOWAIT",
		        RXWAIT: "RXWAIT"
		    }
		};


	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module resolve */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var coreservices_1 = __webpack_require__(6);
		var trace_1 = __webpack_require__(12);
		var strings_1 = __webpack_require__(9);
		var predicates_1 = __webpack_require__(4);
		// TODO: explicitly make this user configurable
		exports.defaultResolvePolicy = {
		    when: "LAZY",
		    async: "WAIT"
		};
		/**
		 * The basic building block for the resolve system.
		 *
		 * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),
		 * and the unwrapped-when-complete (.data) result of the resolveFn.
		 *
		 * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the
		 * resolveFn) and returns the resulting promise.
		 *
		 * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first
		 * parameter to those fns.
		 */
		var Resolvable = (function () {
		    function Resolvable(arg1, resolveFn, deps, policy, data) {
		        this.resolved = false;
		        this.promise = undefined;
		        if (arg1 instanceof Resolvable) {
		            common_1.extend(this, arg1);
		        }
		        else if (predicates_1.isFunction(resolveFn)) {
		            if (arg1 == null || arg1 == undefined)
		                throw new Error("new Resolvable(): token argument is required");
		            if (!predicates_1.isFunction(resolveFn))
		                throw new Error("new Resolvable(): resolveFn argument must be a function");
		            this.token = arg1;
		            this.policy = policy;
		            this.resolveFn = resolveFn;
		            this.deps = deps || [];
		            this.data = data;
		            this.resolved = data !== undefined;
		            this.promise = this.resolved ? coreservices_1.services.$q.when(this.data) : undefined;
		        }
		        else if (predicates_1.isObject(arg1) && arg1.token && predicates_1.isFunction(arg1.resolveFn)) {
		            var literal = arg1;
		            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);
		        }
		    }
		    Resolvable.prototype.getPolicy = function (state) {
		        var thisPolicy = this.policy || {};
		        var statePolicy = state && state.resolvePolicy || {};
		        return {
		            when: thisPolicy.when || statePolicy.when || exports.defaultResolvePolicy.when,
		            async: thisPolicy.async || statePolicy.async || exports.defaultResolvePolicy.async,
		        };
		    };
		    /**
		     * Asynchronously resolve this Resolvable's data
		     *
		     * Given a ResolveContext that this Resolvable is found in:
		     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function
		     * and update the Resolvable's state
		     */
		    Resolvable.prototype.resolve = function (resolveContext, trans) {
		        var _this = this;
		        var $q = coreservices_1.services.$q;
		        // Gets all dependencies from ResolveContext and wait for them to be resolved
		        var getResolvableDependencies = function () {
		            return $q.all(resolveContext.getDependencies(_this).map(function (r) {
		                return r.get(resolveContext, trans);
		            }));
		        };
		        // Invokes the resolve function passing the resolved dependencies as arguments
		        var invokeResolveFn = function (resolvedDeps) {
		            return _this.resolveFn.apply(null, resolvedDeps);
		        };
		        /**
		         * For RXWAIT policy:
		         *
		         * Given an observable returned from a resolve function:
		         * - enables .cache() mode (this allows multicast subscribers)
		         * - then calls toPromise() (this triggers subscribe() and thus fetches)
		         * - Waits for the promise, then return the cached observable (not the first emitted value).
		         */
		        var waitForRx = function (observable$) {
		            var cached = observable$.cache(1);
		            return cached.take(1).toPromise().then(function () { return cached; });
		        };
		        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.
		        var node = resolveContext.findNode(this);
		        var state = node && node.state;
		        var maybeWaitForRx = this.getPolicy(state).async === "RXWAIT" ? waitForRx : common_1.identity;
		        // After the final value has been resolved, update the state of the Resolvable
		        var applyResolvedValue = function (resolvedValue) {
		            _this.data = resolvedValue;
		            _this.resolved = true;
		            trace_1.trace.traceResolvableResolved(_this, trans);
		            return _this.data;
		        };
		        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.
		        return this.promise = $q.when()
		            .then(getResolvableDependencies)
		            .then(invokeResolveFn)
		            .then(maybeWaitForRx)
		            .then(applyResolvedValue);
		    };
		    /**
		     * Gets a promise for this Resolvable's data.
		     *
		     * Fetches the data and returns a promise.
		     * Returns the existing promise if it has already been fetched once.
		     */
		    Resolvable.prototype.get = function (resolveContext, trans) {
		        return this.promise || this.resolve(resolveContext, trans);
		    };
		    Resolvable.prototype.toString = function () {
		        return "Resolvable(token: " + strings_1.stringify(this.token) + ", requires: [" + this.deps.map(strings_1.stringify) + "])";
		    };
		    Resolvable.prototype.clone = function () {
		        return new Resolvable(this);
		    };
		    Resolvable.fromData = function (token, data) {
		        return new Resolvable(token, function () { return data; }, null, null, data);
		    };
		    return Resolvable;
		}());
		exports.Resolvable = Resolvable;


	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {

		/** @module path */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var targetState_1 = __webpack_require__(14);
		var node_1 = __webpack_require__(21);
		/**
		 * This class contains functions which convert TargetStates, Nodes and paths from one type to another.
		 */
		var PathFactory = (function () {
		    function PathFactory() {
		    }
		    /** Given a PathNode[], create an TargetState */
		    PathFactory.makeTargetState = function (path) {
		        var state = common_1.tail(path).state;
		        return new targetState_1.TargetState(state, state, path.map(hof_1.prop("paramValues")).reduce(common_1.mergeR, {}));
		    };
		    PathFactory.buildPath = function (targetState) {
		        var toParams = targetState.params();
		        return targetState.$state().path.map(function (state) { return new node_1.PathNode(state).applyRawParams(toParams); });
		    };
		    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */
		    PathFactory.buildToPath = function (fromPath, targetState) {
		        var toPath = PathFactory.buildPath(targetState);
		        if (targetState.options().inherit) {
		            return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));
		        }
		        return toPath;
		    };
		    /**
		     * Creates ViewConfig objects and adds to nodes.
		     *
		     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state
		     */
		    PathFactory.applyViewConfigs = function ($view, path, states) {
		        // Only apply the viewConfigs to the nodes for the given states
		        path.filter(function (node) { return common_1.inArray(states, node.state); }).forEach(function (node) {
		            var viewDecls = common_1.values(node.state.views || {});
		            var subPath = PathFactory.subPath(path, function (n) { return n === node; });
		            var viewConfigs = viewDecls.map(function (view) { return $view.createViewConfig(subPath, view); });
		            node.views = viewConfigs.reduce(common_1.unnestR, []);
		        });
		    };
		    /**
		     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath
		     *
		     * For a parameter in a node to be inherited from the from path:
		     * - The toPath's node must have a matching node in the fromPath (by state).
		     * - The parameter name must not be found in the toKeys parameter array.
		     *
		     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some
		     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,
		     * it is not inherited from the fromPath.
		     */
		    PathFactory.inheritParams = function (fromPath, toPath, toKeys) {
		        if (toKeys === void 0) { toKeys = []; }
		        function nodeParamVals(path, state) {
		            var node = common_1.find(path, hof_1.propEq('state', state));
		            return common_1.extend({}, node && node.paramValues);
		        }
		        /**
		         * Given an [[PathNode]] "toNode", return a new [[PathNode]] with param values inherited from the
		         * matching node in fromPath.  Only inherit keys that aren't found in "toKeys" from the node in "fromPath""
		         */
		        function makeInheritedParamsNode(toNode) {
		            // All param values for the node (may include default key/vals, when key was not found in toParams)
		            var toParamVals = common_1.extend({}, toNode && toNode.paramValues);
		            // limited to only those keys found in toParams
		            var incomingParamVals = common_1.pick(toParamVals, toKeys);
		            toParamVals = common_1.omit(toParamVals, toKeys);
		            var fromParamVals = nodeParamVals(fromPath, toNode.state) || {};
		            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals
		            var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);
		            return new node_1.PathNode(toNode.state).applyRawParams(ownParamVals);
		        }
		        // The param keys specified by the incoming toParams
		        return toPath.map(makeInheritedParamsNode);
		    };
		    /**
		     * Computes the tree changes (entering, exiting) between a fromPath and toPath.
		     */
		    PathFactory.treeChanges = function (fromPath, toPath, reloadState) {
		        var keep = 0, max = Math.min(fromPath.length, toPath.length);
		        var staticParams = function (state) {
		            return state.parameters({ inherit: false }).filter(hof_1.not(hof_1.prop('dynamic'))).map(hof_1.prop('id'));
		        };
		        var nodesMatch = function (node1, node2) {
		            return node1.equals(node2, staticParams(node1.state));
		        };
		        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {
		            keep++;
		        }
		        /** Given a retained node, return a new node which uses the to node's param values */
		        function applyToParams(retainedNode, idx) {
		            var cloned = node_1.PathNode.clone(retainedNode);
		            cloned.paramValues = toPath[idx].paramValues;
		            return cloned;
		        }
		        var from, retained, exiting, entering, to;
		        from = fromPath;
		        retained = from.slice(0, keep);
		        exiting = from.slice(keep);
		        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped
		        var retainedWithToParams = retained.map(applyToParams);
		        entering = toPath.slice(keep);
		        to = (retainedWithToParams).concat(entering);
		        return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };
		    };
		    /**
		     * Return a subpath of a path, which stops at the first matching node
		     *
		     * Given an array of nodes, returns a subset of the array starting from the first node,
		     * stopping when the first node matches the predicate.
		     *
		     * @param path a path of [[PathNode]]s
		     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s
		     * @returns a subpath up to the matching node, or undefined if no match is found
		     */
		    PathFactory.subPath = function (path, predicate) {
		        var node = common_1.find(path, predicate);
		        var elementIdx = path.indexOf(node);
		        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);
		    };
		    /** Gets the raw parameter values from a path */
		    PathFactory.paramValues = function (path) { return path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {}); };
		    return PathFactory;
		}());
		exports.PathFactory = PathFactory;


	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module path */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var param_1 = __webpack_require__(22);
		/**
		 * A node in a [[TreeChanges]] path
		 *
		 * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.
		 * Each PathNode corresponds to a state being entered, exited, or retained.
		 * The stateful information includes parameter values and resolve data.
		 */
		var PathNode = (function () {
		    function PathNode(stateOrPath) {
		        if (stateOrPath instanceof PathNode) {
		            var node = stateOrPath;
		            this.state = node.state;
		            this.paramSchema = node.paramSchema.slice();
		            this.paramValues = common_1.extend({}, node.paramValues);
		            this.resolvables = node.resolvables.slice();
		            this.views = node.views && node.views.slice();
		        }
		        else {
		            var state = stateOrPath;
		            this.state = state;
		            this.paramSchema = state.parameters({ inherit: false });
		            this.paramValues = {};
		            this.resolvables = state.resolvables.map(function (res) { return res.clone(); });
		        }
		    }
		    /** Sets [[paramValues]] for the node, from the values of an object hash */
		    PathNode.prototype.applyRawParams = function (params) {
		        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };
		        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return common_1.applyPairs(memo, getParamVal(pDef)); }, {});
		        return this;
		    };
		    /** Gets a specific [[Param]] metadata that belongs to the node */
		    PathNode.prototype.parameter = function (name) {
		        return common_1.find(this.paramSchema, hof_1.propEq("id", name));
		    };
		    /**
		     * @returns true if the state and parameter values for another PathNode are
		     * equal to the state and param values for this PathNode
		     */
		    PathNode.prototype.equals = function (node, keys) {
		        var _this = this;
		        if (keys === void 0) { keys = this.paramSchema.map(function (p) { return p.id; }); }
		        var paramValsEq = function (key) {
		            return _this.parameter(key).type.equals(_this.paramValues[key], node.paramValues[key]);
		        };
		        return this.state === node.state && keys.map(paramValsEq).reduce(common_1.allTrueR, true);
		    };
		    /** Returns a clone of the PathNode */
		    PathNode.clone = function (node) {
		        return new PathNode(node);
		    };
		    /**
		     * Returns a new path which is a subpath of the first path which matched the second path.
		     *
		     * The new path starts from root and contains any nodes that match the nodes in the second path.
		     * Nodes are compared using their state property and parameter values.
		     *
		     * @param pathA the first path
		     * @param pathB the second path
		     * @param ignoreDynamicParams don't compare dynamic parameter values
		     */
		    PathNode.matching = function (pathA, pathB, ignoreDynamicParams) {
		        if (ignoreDynamicParams === void 0) { ignoreDynamicParams = true; }
		        var matching = [];
		        for (var i = 0; i < pathA.length && i < pathB.length; i++) {
		            var a = pathA[i], b = pathB[i];
		            if (a.state !== b.state)
		                break;
		            var changedParams = param_1.Param.changed(a.paramSchema, a.paramValues, b.paramValues)
		                .filter(function (param) { return !(ignoreDynamicParams && param.dynamic); });
		            if (changedParams.length)
		                break;
		            matching.push(a);
		        }
		        return matching;
		    };
		    return PathNode;
		}());
		exports.PathNode = PathNode;


	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module params */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		var urlMatcherConfig_1 = __webpack_require__(23);
		var type_1 = __webpack_require__(24);
		var hasOwn = Object.prototype.hasOwnProperty;
		var isShorthand = function (cfg) {
		    return ["value", "type", "squash", "array", "dynamic"].filter(hasOwn.bind(cfg || {})).length === 0;
		};
		(function (DefType) {
		    DefType[DefType["PATH"] = 0] = "PATH";
		    DefType[DefType["SEARCH"] = 1] = "SEARCH";
		    DefType[DefType["CONFIG"] = 2] = "CONFIG";
		})(exports.DefType || (exports.DefType = {}));
		var DefType = exports.DefType;
		function unwrapShorthand(cfg) {
		    cfg = isShorthand(cfg) && { value: cfg } || cfg;
		    return common_1.extend(cfg, {
		        $$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : function () { return cfg.value; }
		    });
		}
		function getType(cfg, urlType, location, id, paramTypes) {
		    if (cfg.type && urlType && urlType.name !== 'string')
		        throw new Error("Param '" + id + "' has two type configurations.");
		    if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type))
		        return paramTypes.type(cfg.type);
		    if (urlType)
		        return urlType;
		    if (!cfg.type)
		        return (location === DefType.CONFIG ? paramTypes.type("any") : paramTypes.type("string"));
		    return cfg.type instanceof type_1.ParamType ? cfg.type : paramTypes.type(cfg.type);
		}
		/**
		 * returns false, true, or the squash value to indicate the "default parameter url squash policy".
		 */
		function getSquashPolicy(config, isOptional) {
		    var squash = config.squash;
		    if (!isOptional || squash === false)
		        return false;
		    if (!predicates_1.isDefined(squash) || squash == null)
		        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy();
		    if (squash === true || predicates_1.isString(squash))
		        return squash;
		    throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
		}
		function getReplace(config, arrayMode, isOptional, squash) {
		    var replace, configuredKeys, defaultPolicy = [
		        { from: "", to: (isOptional || arrayMode ? undefined : "") },
		        { from: null, to: (isOptional || arrayMode ? undefined : "") }
		    ];
		    replace = predicates_1.isArray(config.replace) ? config.replace : [];
		    if (predicates_1.isString(squash))
		        replace.push({ from: squash, to: undefined });
		    configuredKeys = common_1.map(replace, hof_1.prop("from"));
		    return common_1.filter(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);
		}
		var Param = (function () {
		    function Param(id, type, config, location, paramTypes) {
		        config = unwrapShorthand(config);
		        type = getType(config, type, location, id, paramTypes);
		        var arrayMode = getArrayMode();
		        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;
		        var isOptional = config.value !== undefined;
		        var dynamic = predicates_1.isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;
		        var squash = getSquashPolicy(config, isOptional);
		        var replace = getReplace(config, arrayMode, isOptional, squash);
		        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
		        function getArrayMode() {
		            var arrayDefaults = { array: (location === DefType.SEARCH ? "auto" : false) };
		            var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
		            return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;
		        }
		        common_1.extend(this, { id: id, type: type, location: location, squash: squash, replace: replace, isOptional: isOptional, dynamic: dynamic, config: config, array: arrayMode });
		    }
		    Param.prototype.isDefaultValue = function (value) {
		        return this.isOptional && this.type.equals(this.value(), value);
		    };
		    /**
		     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
		     * default value, which may be the result of an injectable function.
		     */
		    Param.prototype.value = function (value) {
		        var _this = this;
		        /**
		         * [Internal] Get the default value of a parameter, which may be an injectable function.
		         */
		        var $$getDefaultValue = function () {
		            if (!coreservices_1.services.$injector)
		                throw new Error("Injectable functions cannot be called at configuration time");
		            var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);
		            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))
		                throw new Error("Default value (" + defaultValue + ") for parameter '" + _this.id + "' is not an instance of ParamType (" + _this.type.name + ")");
		            return defaultValue;
		        };
		        var $replace = function (val) {
		            var replacement = common_1.map(common_1.filter(_this.replace, hof_1.propEq('from', val)), hof_1.prop("to"));
		            return replacement.length ? replacement[0] : val;
		        };
		        value = $replace(value);
		        return !predicates_1.isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);
		    };
		    Param.prototype.isSearch = function () {
		        return this.location === DefType.SEARCH;
		    };
		    Param.prototype.validates = function (value) {
		        // There was no parameter value, but the param is optional
		        if ((!predicates_1.isDefined(value) || value === null) && this.isOptional)
		            return true;
		        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType
		        var normalized = this.type.$normalize(value);
		        if (!this.type.is(normalized))
		            return false;
		        // The value was of the correct type, but when encoded, did not match the ParamType's regexp
		        var encoded = this.type.encode(normalized);
		        return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));
		    };
		    Param.prototype.toString = function () {
		        return "{Param:" + this.id + " " + this.type + " squash: '" + this.squash + "' optional: " + this.isOptional + "}";
		    };
		    /** Creates a new [[Param]] from a CONFIG block */
		    Param.fromConfig = function (id, type, config, paramTypes) {
		        return new Param(id, type, config, DefType.CONFIG, paramTypes);
		    };
		    /** Creates a new [[Param]] from a url PATH */
		    Param.fromPath = function (id, type, config, paramTypes) {
		        return new Param(id, type, config, DefType.PATH, paramTypes);
		    };
		    /** Creates a new [[Param]] from a url SEARCH */
		    Param.fromSearch = function (id, type, config, paramTypes) {
		        return new Param(id, type, config, DefType.SEARCH, paramTypes);
		    };
		    Param.values = function (params, values) {
		        if (values === void 0) { values = {}; }
		        return params.map(function (param) { return [param.id, param.value(values[param.id])]; }).reduce(common_1.applyPairs, {});
		    };
		    /**
		     * Finds [[Param]] objects which have different param values
		     *
		     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects
		     *
		     * @param params: The list of Param objects to filter
		     * @param values1: The first set of parameter values
		     * @param values2: the second set of parameter values
		     *
		     * @returns any Param objects whose values were different between values1 and values2
		     */
		    Param.changed = function (params, values1, values2) {
		        if (values1 === void 0) { values1 = {}; }
		        if (values2 === void 0) { values2 = {}; }
		        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });
		    };
		    /**
		     * Checks if two param value objects are equal (for a set of [[Param]] objects)
		     *
		     * @param params The list of [[Param]] objects to check
		     * @param values1 The first set of param values
		     * @param values2 The second set of param values
		     *
		     * @returns true if the param values in values1 and values2 are equal
		     */
		    Param.equals = function (params, values1, values2) {
		        if (values1 === void 0) { values1 = {}; }
		        if (values2 === void 0) { values2 = {}; }
		        return Param.changed(params, values1, values2).length === 0;
		    };
		    /** Returns true if a the parameter values are valid, according to the Param definitions */
		    Param.validates = function (params, values) {
		        if (values === void 0) { values = {}; }
		        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(common_1.allTrueR, true);
		    };
		    return Param;
		}());
		exports.Param = Param;


	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module url */ /** for typedoc */
		var predicates_1 = __webpack_require__(4);
		var MatcherConfig = (function () {
		    function MatcherConfig() {
		        this._isCaseInsensitive = false;
		        this._isStrictMode = true;
		        this._defaultSquashPolicy = false;
		    }
		    MatcherConfig.prototype.caseInsensitive = function (value) {
		        return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;
		    };
		    MatcherConfig.prototype.strictMode = function (value) {
		        return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;
		    };
		    MatcherConfig.prototype.defaultSquashPolicy = function (value) {
		        if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value))
		            throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
		        return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;
		    };
		    return MatcherConfig;
		}());
		exports.MatcherConfig = MatcherConfig;
		// TODO: Do not export global instance; create one in UIRouter() constructor
		exports.matcherConfig = new MatcherConfig();


	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module params */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		/**
		 * Wraps up a `ParamType` object to handle array values.
		 */
		function ArrayType(type, mode) {
		    var _this = this;
		    // Wrap non-array value as array
		    function arrayWrap(val) {
		        return predicates_1.isArray(val) ? val : (predicates_1.isDefined(val) ? [val] : []);
		    }
		    // Unwrap array value for "auto" mode. Return undefined for empty array.
		    function arrayUnwrap(val) {
		        switch (val.length) {
		            case 0: return undefined;
		            case 1: return mode === "auto" ? val[0] : val;
		            default: return val;
		        }
		    }
		    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
		    function arrayHandler(callback, allTruthyMode) {
		        return function handleArray(val) {
		            if (predicates_1.isArray(val) && val.length === 0)
		                return val;
		            var arr = arrayWrap(val);
		            var result = common_1.map(arr, callback);
		            return (allTruthyMode === true) ? common_1.filter(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);
		        };
		    }
		    // Wraps type (.equals) functions to operate on each value of an array
		    function arrayEqualsHandler(callback) {
		        return function handleArray(val1, val2) {
		            var left = arrayWrap(val1), right = arrayWrap(val2);
		            if (left.length !== right.length)
		                return false;
		            for (var i = 0; i < left.length; i++) {
		                if (!callback(left[i], right[i]))
		                    return false;
		            }
		            return true;
		        };
		    }
		    ['encode', 'decode', 'equals', '$normalize'].forEach(function (name) {
		        var paramTypeFn = type[name].bind(type);
		        var wrapperFn = name === 'equals' ? arrayEqualsHandler : arrayHandler;
		        _this[name] = wrapperFn(paramTypeFn);
		    });
		    common_1.extend(this, {
		        dynamic: type.dynamic,
		        name: type.name,
		        pattern: type.pattern,
		        is: arrayHandler(type.is.bind(type), true),
		        $arrayMode: mode
		    });
		}
		/**
		 * A class that implements Custom Parameter Type functionality.
		 *
		 * This class has naive implementations for all the [[ParamTypeDefinition]] methods.
		 *
		 * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].
		 *
		 * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.
		 *
		 * @example
		 * ```
		 *
		 * {
		 *   decode: function(val) { return parseInt(val, 10); },
		 *   encode: function(val) { return val && val.toString(); },
		 *   equals: function(a, b) { return this.is(a) && a === b; },
		 *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },
		 *   pattern: /\d+/
		 * }
		 * ```
		 */
		var ParamType = (function () {
		    /**
		     * @param def  A configuration object which contains the custom type definition.  The object's
		     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.
		     * @returns a new ParamType object
		     */
		    function ParamType(def) {
		        this.pattern = /.*/;
		        common_1.extend(this, def);
		    }
		    // consider these four methods to be "abstract methods" that should be overridden
		    /** @inheritdoc */
		    ParamType.prototype.is = function (val, key) { return true; };
		    /** @inheritdoc */
		    ParamType.prototype.encode = function (val, key) { return val; };
		    /** @inheritdoc */
		    ParamType.prototype.decode = function (val, key) { return val; };
		    /** @inheritdoc */
		    ParamType.prototype.equals = function (a, b) { return a == b; };
		    ParamType.prototype.$subPattern = function () {
		        var sub = this.pattern.toString();
		        return sub.substr(1, sub.length - 2);
		    };
		    ParamType.prototype.toString = function () {
		        return "{ParamType:" + this.name + "}";
		    };
		    /** Given an encoded string, or a decoded object, returns a decoded object */
		    ParamType.prototype.$normalize = function (val) {
		        return this.is(val) ? val : this.decode(val);
		    };
		    /**
		     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.
		     * e.g.:
		     * - urlmatcher pattern "/path?{queryParam[]:int}"
		     * - url: "/path?queryParam=1&queryParam=2
		     * - $stateParams.queryParam will be [1, 2]
		     * if `mode` is "auto", then
		     * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
		     * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
		     */
		    ParamType.prototype.$asArray = function (mode, isSearch) {
		        if (!mode)
		            return this;
		        if (mode === "auto" && !isSearch)
		            throw new Error("'auto' array mode is for query parameters only");
		        return new ArrayType(this, mode);
		    };
		    return ParamType;
		}());
		exports.ParamType = ParamType;


	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module core */ /** */
		var urlMatcherFactory_1 = __webpack_require__(26);
		var urlRouter_1 = __webpack_require__(29);
		var urlRouter_2 = __webpack_require__(29);
		var transitionService_1 = __webpack_require__(30);
		var view_1 = __webpack_require__(37);
		var stateRegistry_1 = __webpack_require__(38);
		var stateService_1 = __webpack_require__(43);
		var globals_1 = __webpack_require__(44);
		/**
		 * The master class used to instantiate an instance of UI-Router.
		 *
		 * This class instantiates and wires the global UI-Router services.
		 *
		 * After instantiating a new instance of the Router class, configure it for your app.  For instance, register
		 * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor
		 * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])
		 */
		var UIRouter = (function () {
		    function UIRouter() {
		        this.viewService = new view_1.ViewService();
		        this.transitionService = new transitionService_1.TransitionService(this);
		        this.globals = new globals_1.Globals(this.transitionService);
		        this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();
		        this.urlRouterProvider = new urlRouter_1.UrlRouterProvider(this.urlMatcherFactory, this.globals.params);
		        this.urlRouter = new urlRouter_2.UrlRouter(this.urlRouterProvider);
		        this.stateRegistry = new stateRegistry_1.StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);
		        this.stateService = new stateService_1.StateService(this);
		        this.viewService.rootContext(this.stateRegistry.root());
		        this.globals.$current = this.stateRegistry.root();
		        this.globals.current = this.globals.$current.self;
		    }
		    return UIRouter;
		}());
		exports.UIRouter = UIRouter;


	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module url */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var urlMatcher_1 = __webpack_require__(27);
		var urlMatcherConfig_1 = __webpack_require__(23);
		var param_1 = __webpack_require__(22);
		var paramTypes_1 = __webpack_require__(28);
		/** @hidden */
		function getDefaultConfig() {
		    return {
		        strict: urlMatcherConfig_1.matcherConfig.strictMode(),
		        caseInsensitive: urlMatcherConfig_1.matcherConfig.caseInsensitive()
		    };
		}
		/**
		 * Factory for [[UrlMatcher]] instances.
		 *
		 * The factory is available to ng1 services as
		 * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.
		 */
		var UrlMatcherFactory = (function () {
		    function UrlMatcherFactory() {
		        this.paramTypes = new paramTypes_1.ParamTypes();
		        common_1.extend(this, { UrlMatcher: urlMatcher_1.UrlMatcher, Param: param_1.Param });
		    }
		    /**
		     * Defines whether URL matching should be case sensitive (the default behavior), or not.
		     *
		     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;
		     * @returns the current value of caseInsensitive
		     */
		    UrlMatcherFactory.prototype.caseInsensitive = function (value) {
		        return urlMatcherConfig_1.matcherConfig.caseInsensitive(value);
		    };
		    /**
		     * Defines whether URLs should match trailing slashes, or not (the default behavior).
		     *
		     * @param value `false` to match trailing slashes in URLs, otherwise `true`.
		     * @returns the current value of strictMode
		     */
		    UrlMatcherFactory.prototype.strictMode = function (value) {
		        return urlMatcherConfig_1.matcherConfig.strictMode(value);
		    };
		    /**
		     * Sets the default behavior when generating or matching URLs with default parameter values.
		     *
		     * @param value A string that defines the default parameter URL squashing behavior.
		     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
		     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
		     *             parameter is surrounded by slashes, squash (remove) one slash from the URL
		     *    - any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
		     *             the parameter value from the URL and replace it with this string.
		     * @returns the current value of defaultSquashPolicy
		     */
		    UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {
		        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy(value);
		    };
		    /**
		     * Creates a [[UrlMatcher]] for the specified pattern.
		     *
		     * @param pattern  The URL pattern.
		     * @param config  The config object hash.
		     * @returns The UrlMatcher.
		     */
		    UrlMatcherFactory.prototype.compile = function (pattern, config) {
		        return new urlMatcher_1.UrlMatcher(pattern, this.paramTypes, common_1.extend(getDefaultConfig(), config));
		    };
		    /**
		     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.
		     *
		     * @param object  The object to perform the type check against.
		     * @returns `true` if the object matches the `UrlMatcher` interface, by
		     *          implementing all the same methods.
		     */
		    UrlMatcherFactory.prototype.isMatcher = function (object) {
		        // TODO: typeof?
		        if (!predicates_1.isObject(object))
		            return false;
		        var result = true;
		        common_1.forEach(urlMatcher_1.UrlMatcher.prototype, function (val, name) {
		            if (predicates_1.isFunction(val))
		                result = result && (predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]));
		        });
		        return result;
		    };
		    ;
		    /**
		     * Creates and registers a custom [[ParamType]] object
		     *
		     * A [[ParamType]] can be used to generate URLs with typed parameters.
		     *
		     * @param name  The type name.
		     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.
		     * @param definitionFn A function that is injected before the app runtime starts.
		     *        The result of this function should be a [[ParamTypeDefinition]].
		     *        The result is merged into the existing `definition`.
		     *        See [[ParamType]] for information on the values accepted.
		     *
		     * @returns - if a type was registered: the [[UrlMatcherFactory]]
		     *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined
		     *
		     * Note: Register custom types *before using them* in a state definition.
		     *
		     * See [[ParamTypeDefinition]] for examples
		     */
		    UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {
		        var type = this.paramTypes.type(name, definition, definitionFn);
		        return !predicates_1.isDefined(definition) ? type : this;
		    };
		    ;
		    /** @hidden */
		    UrlMatcherFactory.prototype.$get = function () {
		        this.paramTypes.enqueue = false;
		        this.paramTypes._flushTypeQueue();
		        return this;
		    };
		    ;
		    return UrlMatcherFactory;
		}());
		exports.UrlMatcherFactory = UrlMatcherFactory;


	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module url */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var param_1 = __webpack_require__(22);
		var predicates_2 = __webpack_require__(4);
		var param_2 = __webpack_require__(22);
		var common_2 = __webpack_require__(3);
		var common_3 = __webpack_require__(3);
		/** @hidden */
		function quoteRegExp(string, param) {
		    var surroundPattern = ['', ''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
		    if (!param)
		        return result;
		    switch (param.squash) {
		        case false:
		            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];
		            break;
		        case true:
		            result = result.replace(/\/$/, '');
		            surroundPattern = ['(?:\/(', ')|\/)?'];
		            break;
		        default:
		            surroundPattern = [("(" + param.squash + "|"), ')?'];
		            break;
		    }
		    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];
		}
		/** @hidden */
		var memoizeTo = function (obj, prop, fn) {
		    return obj[prop] = obj[prop] || fn();
		};
		/**
		 * Matches URLs against patterns.
		 *
		 * Matches URLs against patterns and extracts named parameters from the path or the search
		 * part of the URL.
		 *
		 * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)
		 * parameters. Multiple search parameter names are separated by '&'. Search parameters
		 * do not influence whether or not a URL is matched, but their values are passed through into
		 * the matched parameters returned by [[UrlMatcher.exec]].
		 *
		 * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)
		 * or colon placeholders (`/somePath/:param`).
		 *
		 * - *A parameter RegExp* may be defined for a param after a colon
		 * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.
		 * The regexp must match for the url to be matched.
		 * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
		 *
		 * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)
		 * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.
		 *
		 * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all
		 * parameter value will contain the remainder of the URL.
		 *
		 * ---
		 *
		 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
		 * must be unique within the pattern (across both path and search parameters).
		 * A path parameter matches any number of characters other than '/'. For catch-all
		 * placeholders the path parameter matches any number of characters.
		 *
		 * Examples:
		 *
		 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
		 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
		 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
		 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
		 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
		 * * `'/user/{id:[^/]*}'` - Same as the previous example.
		 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
		 *   parameter consists of 1 to 8 hex digits.
		 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
		 *   path into the parameter 'path'.
		 * * `'/files/*path'` - ditto.
		 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
		 *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start
		 *
		 */
		var UrlMatcher = (function () {
		    /**
		     * @param pattern The pattern to compile into a matcher.
		     * @param paramTypes The [[ParamTypes]] registry
		     * @param config  A configuration object
		     * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
		     * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
		     */
		    function UrlMatcher(pattern, paramTypes, config) {
		        var _this = this;
		        this.config = config;
		        /** @hidden */
		        this._cache = { path: [], pattern: null };
		        /** @hidden */
		        this._children = [];
		        /** @hidden */
		        this._params = [];
		        /** @hidden */
		        this._segments = [];
		        /** @hidden */
		        this._compiled = [];
		        this.pattern = pattern;
		        this.config = common_1.defaults(this.config, {
		            params: {},
		            strict: true,
		            caseInsensitive: false,
		            paramMap: common_1.identity
		        });
		        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
		        //   '*' name
		        //   ':' name
		        //   '{' name '}'
		        //   '{' name ':' regexp '}'
		        // The regular expression is somewhat complicated due to the need to allow curly braces
		        // inside the regular expression. The placeholder regexp breaks down as follows:
		        //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
		        //    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
		        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
		        //    [^{}\\]+                       - anything other than curly braces or backslash
		        //    \\.                            - a backslash escape
		        //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
		        var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, last = 0, m, patterns = [];
		        var checkParamErrors = function (id) {
		            if (!UrlMatcher.nameValidator.test(id))
		                throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
		            if (common_1.find(_this._params, hof_1.propEq('id', id)))
		                throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
		        };
		        // Split into static segments separated by path parameter placeholders.
		        // The number of segments is always 1 more than the number of parameters.
		        var matchDetails = function (m, isSearch) {
		            // IE[78] returns '' for unmatched groups instead of null
		            var id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);
		            return {
		                id: id,
		                regexp: regexp,
		                cfg: _this.config.params[id],
		                segment: pattern.substring(last, m.index),
		                type: !regexp ? null : paramTypes.type(regexp || "string") || common_1.inherit(paramTypes.type("string"), {
		                    pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)
		                })
		            };
		        };
		        var p, segment;
		        while ((m = placeholder.exec(pattern))) {
		            p = matchDetails(m, false);
		            if (p.segment.indexOf('?') >= 0)
		                break; // we're into the search part
		            checkParamErrors(p.id);
		            this._params.push(param_1.Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false), paramTypes));
		            this._segments.push(p.segment);
		            patterns.push([p.segment, common_1.tail(this._params)]);
		            last = placeholder.lastIndex;
		        }
		        segment = pattern.substring(last);
		        // Find any search parameter names and remove them from the last segment
		        var i = segment.indexOf('?');
		        if (i >= 0) {
		            var search = segment.substring(i);
		            segment = segment.substring(0, i);
		            if (search.length > 0) {
		                last = 0;
		                while ((m = searchPlaceholder.exec(search))) {
		                    p = matchDetails(m, true);
		                    checkParamErrors(p.id);
		                    this._params.push(param_1.Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true), paramTypes));
		                    last = placeholder.lastIndex;
		                }
		            }
		        }
		        this._segments.push(segment);
		        common_1.extend(this, {
		            _compiled: patterns.map(function (pattern) { return quoteRegExp.apply(null, pattern); }).concat(quoteRegExp(segment)),
		            prefix: this._segments[0]
		        });
		        Object.freeze(this);
		    }
		    /**
		     * Creates a new concatenated UrlMatcher
		     *
		     * Builds a new UrlMatcher by appending another UrlMatcher to this one.
		     *
		     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.
		     */
		    UrlMatcher.prototype.append = function (url) {
		        this._children.push(url);
		        common_1.forEach(url._cache, function (val, key) { return url._cache[key] = predicates_1.isArray(val) ? [] : null; });
		        url._cache.path = this._cache.path.concat(this);
		        return url;
		    };
		    /** @hidden */
		    UrlMatcher.prototype.isRoot = function () {
		        return this._cache.path.length === 0;
		    };
		    /** Returns the input pattern string */
		    UrlMatcher.prototype.toString = function () {
		        return this.pattern;
		    };
		    /**
		     * Tests the specified url/path against this matcher.
		     *
		     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured
		     * parameter values.  Returns null if the path does not match.
		     *
		     * The returned object contains the values
		     * of any search parameters that are mentioned in the pattern, but their value may be null if
		     * they are not present in `search`. This means that search parameters are always treated
		     * as optional.
		     *
		     * @example
		     * ```js
		     *
		     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
		     *   x: '1', q: 'hello'
		     * });
		     * // returns { id: 'bob', q: 'hello', r: null }
		     * ```
		     *
		     * @param path    The URL path to match, e.g. `$location.path()`.
		     * @param search  URL search parameters, e.g. `$location.search()`.
		     * @param hash    URL hash e.g. `$location.hash()`.
		     * @param options
		     *
		     * @returns The captured parameter values.
		     */
		    UrlMatcher.prototype.exec = function (path, search, hash, options) {
		        var _this = this;
		        if (search === void 0) { search = {}; }
		        if (options === void 0) { options = {}; }
		        var match = memoizeTo(this._cache, 'pattern', function () {
		            return new RegExp([
		                '^',
		                common_1.unnest(_this._cache.path.concat(_this).map(hof_1.prop('_compiled'))).join(''),
		                _this.config.strict === false ? '\/?' : '',
		                '$'
		            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);
		        }).exec(path);
		        if (!match)
		            return null;
		        //options = defaults(options, { isolate: false });
		        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.concat(this).map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};
		        if (nPathSegments !== match.length - 1)
		            throw new Error("Unbalanced capture group in route '" + this.pattern + "'");
		        function decodePathArray(string) {
		            var reverseString = function (str) { return str.split("").reverse().join(""); };
		            var unquoteDashes = function (str) { return str.replace(/\\-/g, "-"); };
		            var split = reverseString(string).split(/-(?!\\)/);
		            var allReversed = common_1.map(split, reverseString);
		            return common_1.map(allReversed, unquoteDashes).reverse();
		        }
		        for (var i = 0; i < nPathSegments; i++) {
		            var param = pathParams[i];
		            var value = match[i + 1];
		            // if the param value matches a pre-replace pair, replace the value before decoding.
		            for (var j = 0; j < param.replace.length; j++) {
		                if (param.replace[j].from === value)
		                    value = param.replace[j].to;
		            }
		            if (value && param.array === true)
		                value = decodePathArray(value);
		            if (predicates_2.isDefined(value))
		                value = param.type.decode(value);
		            values[param.id] = param.value(value);
		        }
		        searchParams.forEach(function (param) {
		            var value = search[param.id];
		            for (var j = 0; j < param.replace.length; j++) {
		                if (param.replace[j].from === value)
		                    value = param.replace[j].to;
		            }
		            if (predicates_2.isDefined(value))
		                value = param.type.decode(value);
		            values[param.id] = param.value(value);
		        });
		        if (hash)
		            values["#"] = hash;
		        return values;
		    };
		    /**
		     * @hidden
		     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.
		     *
		     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the
		     *    pattern has no parameters, an empty array is returned.
		     */
		    UrlMatcher.prototype.parameters = function (opts) {
		        if (opts === void 0) { opts = {}; }
		        if (opts.inherit === false)
		            return this._params;
		        return common_1.unnest(this._cache.path.concat(this).map(hof_1.prop('_params')));
		    };
		    /**
		     * @hidden
		     * Returns a single parameter from this UrlMatcher by id
		     *
		     * @param id
		     * @param opts
		     * @returns {T|Param|any|boolean|UrlMatcher|null}
		     */
		    UrlMatcher.prototype.parameter = function (id, opts) {
		        if (opts === void 0) { opts = {}; }
		        var parent = common_1.tail(this._cache.path);
		        return (common_1.find(this._params, hof_1.propEq('id', id)) ||
		            (opts.inherit !== false && parent && parent.parameter(id)) ||
		            null);
		    };
		    /**
		     * Validates the input parameter values against this UrlMatcher
		     *
		     * Checks an object hash of parameters to validate their correctness according to the parameter
		     * types of this `UrlMatcher`.
		     *
		     * @param params The object hash of parameters to validate.
		     * @returns Returns `true` if `params` validates, otherwise `false`.
		     */
		    UrlMatcher.prototype.validates = function (params) {
		        var _this = this;
		        var validParamVal = function (param, val) {
		            return !param || param.validates(val);
		        };
		        return common_1.pairs(params || {}).map(function (_a) {
		            var key = _a[0], val = _a[1];
		            return validParamVal(_this.parameter(key), val);
		        }).reduce(common_1.allTrueR, true);
		    };
		    /**
		     * Given a set of parameter values, creates a URL from this UrlMatcher.
		     *
		     * Creates a URL that matches this pattern by substituting the specified values
		     * for the path and search parameters.
		     *
		     * @example
		     * ```js
		     *
		     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
		     * // returns '/user/bob?q=yes'
		     * ```
		     *
		     * @param values  the values to substitute for the parameters in this pattern.
		     * @returns the formatted URL (path and optionally search part).
		     */
		    UrlMatcher.prototype.format = function (values) {
		        if (values === void 0) { values = {}; }
		        if (!this.validates(values))
		            return null;
		        // Build the full path of UrlMatchers (including all parent UrlMatchers)
		        var urlMatchers = this._cache.path.slice().concat(this);
		        // Extract all the static segments and Params into an ordered array
		        var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(common_2.unnestR, []);
		        // Extract the query params into a separate array
		        var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(common_2.unnestR, []);
		        /**
		         * Given a Param,
		         * Applies the parameter value, then returns details about it
		         */
		        function getDetails(param) {
		            // Normalize to typed value
		            var value = param.value(values[param.id]);
		            var isDefaultValue = param.isDefaultValue(value);
		            // Check if we're in squash mode for the parameter
		            var squash = isDefaultValue ? param.squash : false;
		            // Allow the Parameter's Type to encode the value
		            var encoded = param.type.encode(value);
		            return { param: param, value: value, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };
		        }
		        // Build up the path-portion from the list of static segments and parameters
		        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {
		            // The element is a static segment (a raw string); just append it
		            if (predicates_1.isString(x))
		                return acc + x;
		            // Otherwise, it's a Param.  Fetch details about the parameter value
		            var _a = getDetails(x), squash = _a.squash, encoded = _a.encoded, param = _a.param;
		            // If squash is === true, try to remove a slash from the path
		            if (squash === true)
		                return (acc.match(/\/$/)) ? acc.slice(0, -1) : acc;
		            // If squash is a string, use the string for the param value
		            if (predicates_1.isString(squash))
		                return acc + squash;
		            if (squash !== false)
		                return acc; // ?
		            if (encoded == null)
		                return acc;
		            // If this parameter value is an array, encode the value using encodeDashes
		            if (predicates_1.isArray(encoded))
		                return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join("-");
		            // If the parameter type is "raw", then do not encodeURIComponent
		            if (param.type.raw)
		                return acc + encoded;
		            // Encode the value
		            return acc + encodeURIComponent(encoded);
		        }, "");
		        // Build the query string by applying parameter values (array or regular)
		        // then mapping to key=value, then flattening and joining using "&"
		        var queryString = queryParams.map(function (param) {
		            var _a = getDetails(param), squash = _a.squash, encoded = _a.encoded, isDefaultValue = _a.isDefaultValue;
		            if (encoded == null || (isDefaultValue && squash !== false))
		                return;
		            if (!predicates_1.isArray(encoded))
		                encoded = [encoded];
		            if (encoded.length === 0)
		                return;
		            if (!param.type.raw)
		                encoded = common_1.map(encoded, encodeURIComponent);
		            return encoded.map(function (val) { return (param.id + "=" + val); });
		        }).filter(common_1.identity).reduce(common_2.unnestR, []).join("&");
		        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)
		        return pathString + (queryString ? "?" + queryString : "") + (values["#"] ? "#" + values["#"] : "");
		    };
		    /** @hidden */
		    UrlMatcher.encodeDashes = function (str) {
		        return encodeURIComponent(str).replace(/-/g, function (c) { return ("%5C%" + c.charCodeAt(0).toString(16).toUpperCase()); });
		    };
		    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */
		    UrlMatcher.pathSegmentsAndParams = function (matcher) {
		        var staticSegments = matcher._segments;
		        var pathParams = matcher._params.filter(function (p) { return p.location === param_2.DefType.PATH; });
		        return common_3.arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(common_2.unnestR, []).filter(function (x) { return x !== "" && predicates_2.isDefined(x); });
		    };
		    /** @hidden Given a matcher, return an array with the matcher's query params */
		    UrlMatcher.queryParams = function (matcher) {
		        return matcher._params.filter(function (p) { return p.location === param_2.DefType.SEARCH; });
		    };
		    /** @hidden */
		    UrlMatcher.nameValidator = /^\w+([-.]+\w+)*(?:\[\])?$/;
		    return UrlMatcher;
		}());
		exports.UrlMatcher = UrlMatcher;


	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module params */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		var coreservices_1 = __webpack_require__(6);
		var type_1 = __webpack_require__(24);
		// Use tildes to pre-encode slashes.
		// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,
		// and bidirectional encoding/decoding fails.
		// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character
		function valToString(val) { return val != null ? val.toString().replace(/(~|\/)/g, function (m) { return ({ '~': '~~', '/': '~2F' }[m]); }) : val; }
		function valFromString(val) { return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) { return ({ '~~': '~', '~2F': '/' }[m]); }) : val; }
		var ParamTypes = (function () {
		    function ParamTypes() {
		        this.enqueue = true;
		        this.typeQueue = [];
		        this.defaultTypes = {
		            "hash": {
		                encode: valToString,
		                decode: valFromString,
		                is: hof_1.is(String),
		                pattern: /.*/,
		                equals: function (a, b) { return a == b; } // allow coersion for null/undefined/""
		            },
		            "string": {
		                encode: valToString,
		                decode: valFromString,
		                is: hof_1.is(String),
		                pattern: /[^/]*/
		            },
		            "int": {
		                encode: valToString,
		                decode: function (val) { return parseInt(val, 10); },
		                is: function (val) { return predicates_1.isDefined(val) && this.decode(val.toString()) === val; },
		                pattern: /-?\d+/
		            },
		            "bool": {
		                encode: function (val) { return val && 1 || 0; },
		                decode: function (val) { return parseInt(val, 10) !== 0; },
		                is: hof_1.is(Boolean),
		                pattern: /0|1/
		            },
		            "date": {
		                encode: function (val) {
		                    return !this.is(val) ? undefined : [
		                        val.getFullYear(),
		                        ('0' + (val.getMonth() + 1)).slice(-2),
		                        ('0' + val.getDate()).slice(-2)
		                    ].join("-");
		                },
		                decode: function (val) {
		                    if (this.is(val))
		                        return val;
		                    var match = this.capture.exec(val);
		                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
		                },
		                is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },
		                equals: function (l, r) {
		                    return ['getFullYear', 'getMonth', 'getDate']
		                        .reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);
		                },
		                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
		                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
		            },
		            "json": {
		                encode: common_1.toJson,
		                decode: common_1.fromJson,
		                is: hof_1.is(Object),
		                equals: common_1.equals,
		                pattern: /[^/]*/
		            },
		            "any": {
		                encode: common_1.identity,
		                decode: common_1.identity,
		                equals: common_1.equals,
		                pattern: /.*/
		            }
		        };
		        // Register default types. Store them in the prototype of this.types.
		        var makeType = function (definition, name) { return new type_1.ParamType(common_1.extend({ name: name }, definition)); };
		        this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});
		    }
		    ParamTypes.prototype.type = function (name, definition, definitionFn) {
		        if (!predicates_1.isDefined(definition))
		            return this.types[name];
		        if (this.types.hasOwnProperty(name))
		            throw new Error("A type named '" + name + "' has already been defined.");
		        this.types[name] = new type_1.ParamType(common_1.extend({ name: name }, definition));
		        if (definitionFn) {
		            this.typeQueue.push({ name: name, def: definitionFn });
		            if (!this.enqueue)
		                this._flushTypeQueue();
		        }
		        return this;
		    };
		    ParamTypes.prototype._flushTypeQueue = function () {
		        while (this.typeQueue.length) {
		            var type = this.typeQueue.shift();
		            if (type.pattern)
		                throw new Error("You cannot override a type's .pattern at runtime.");
		            common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));
		        }
		    };
		    return ParamTypes;
		}());
		exports.ParamTypes = ParamTypes;


	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module url */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		/** @hidden */
		var $location = coreservices_1.services.location;
		/** @hidden Returns a string that is a prefix of all strings matching the RegExp */
		function regExpPrefix(re) {
		    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
		    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
		}
		/** @hidden Interpolates matched values into a String.replace()-style pattern */
		function interpolate(pattern, match) {
		    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
		        return match[what === '$' ? 0 : Number(what)];
		    });
		}
		/** @hidden */
		function handleIfMatch($injector, $stateParams, handler, match) {
		    if (!match)
		        return false;
		    var result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });
		    return predicates_1.isDefined(result) ? result : true;
		}
		/** @hidden */
		function appendBasePath(url, isHtml5, absolute) {
		    var baseHref = coreservices_1.services.locationConfig.baseHref();
		    if (baseHref === '/')
		        return url;
		    if (isHtml5)
		        return baseHref.slice(0, -1) + url;
		    if (absolute)
		        return baseHref.slice(1) + url;
		    return url;
		}
		// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
		/** @hidden */
		function update(rules, otherwiseFn, evt) {
		    if (evt && evt.defaultPrevented)
		        return;
		    function check(rule) {
		        var handled = rule(coreservices_1.services.$injector, $location);
		        if (!handled)
		            return false;
		        if (predicates_1.isString(handled)) {
		            $location.setUrl(handled, true);
		        }
		        return true;
		    }
		    var n = rules.length;
		    for (var i = 0; i < n; i++) {
		        if (check(rules[i]))
		            return;
		    }
		    // always check otherwise last to allow dynamic updates to the set of rules
		    if (otherwiseFn)
		        check(otherwiseFn);
		}
		/**
		 * Manages rules for client-side URL
		 *
		 * This class manages the router rules for what to do when the URL changes.
		 */
		var UrlRouterProvider = (function () {
		    function UrlRouterProvider($urlMatcherFactory, $stateParams) {
		        /** @hidden */
		        this.rules = [];
		        /** @hidden */
		        this.interceptDeferred = false;
		        this.$urlMatcherFactory = $urlMatcherFactory;
		        this.$stateParams = $stateParams;
		    }
		    /**
		     * Registers a url handler function.
		     *
		     * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns
		     * a redirect, or performs some action.
		     *
		     * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.
		     *
		     * @example
		     * ```js
		     *
		     * var app = angular.module('app', ['ui.router.router']);
		     *
		     * app.config(function ($urlRouterProvider) {
		     *   // Here's an example of how you might allow case insensitive urls
		     *   $urlRouterProvider.rule(function ($injector, $location) {
		     *     var path = $location.path(),
		     *         normalized = path.toLowerCase();
		     *
		     *     if (path !== normalized) {
		     *       return normalized;
		     *     }
		     *   });
		     * });
		     * ```
		     *
		     * @param rule
		     * Handler function that takes `$injector` and `$location` services as arguments.
		     * You can use them to detect a url and return a different url as a string.
		     *
		     * @return [[$urlRouterProvider]] (`this`)
		     */
		    UrlRouterProvider.prototype.rule = function (rule) {
		        if (!predicates_1.isFunction(rule))
		            throw new Error("'rule' must be a function");
		        this.rules.push(rule);
		        return this;
		    };
		    ;
		    /**
		     * Remove a rule previously registered
		     *
		     * @param rule the matcher rule that was previously registered using [[rule]]
		     * @return true if the rule was found (and removed)
		     */
		    UrlRouterProvider.prototype.removeRule = function (rule) {
		        return this.rules.length !== common_1.removeFrom(this.rules, rule).length;
		    };
		    /**
		     * Defines the path or behavior to use when no url can be matched.
		     *
		     * @example
		     * ```js
		     *
		     * var app = angular.module('app', ['ui.router.router']);
		     *
		     * app.config(function ($urlRouterProvider) {
		     *   // if the path doesn't match any of the urls you configured
		     *   // otherwise will take care of routing the user to the
		     *   // specified url
		     *   $urlRouterProvider.otherwise('/index');
		     *
		     *   // Example of using function rule as param
		     *   $urlRouterProvider.otherwise(function ($injector, $location) {
		     *     return '/a/valid/url';
		     *   });
		     * });
		     * ```
		     *
		     * @param rule
		     * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.
		     * The function version is passed two params: `$injector` and `$location` services, and should return a url string.
		     *
		     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
		     */
		    UrlRouterProvider.prototype.otherwise = function (rule) {
		        if (!predicates_1.isFunction(rule) && !predicates_1.isString(rule))
		            throw new Error("'rule' must be a string or function");
		        this.otherwiseFn = predicates_1.isString(rule) ? function () { return rule; } : rule;
		        return this;
		    };
		    ;
		    /**
		     * Registers a handler for a given url matching.
		     *
		     * If the handler is a string, it is
		     * treated as a redirect, and is interpolated according to the syntax of match
		     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
		     *
		     * If the handler is a function, it is injectable.
		     * It gets invoked if `$location` matches.
		     * You have the option of inject the match object as `$match`.
		     *
		     * The handler can return
		     *
		     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
		     *   will continue trying to find another one that matches.
		     * - **string** which is treated as a redirect and passed to `$location.url()`
		     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
		     *
		     * @example
		     * ```js
		     *
		     * var app = angular.module('app', ['ui.router.router']);
		     *
		     * app.config(function ($urlRouterProvider) {
		     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
		     *     if ($state.$current.navigable !== state ||
		     *         !equalForKeys($match, $stateParams) {
		     *      $state.transitionTo(state, $match, false);
		     *     }
		     *   });
		     * });
		     * ```
		     *
		     * @param what A pattern string to match, compiled as a [[UrlMatcher]].
		     * @param handler The path (or function that returns a path) that you want to redirect your user to.
		     * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]
		     *
		     * Note: the handler may also invoke arbitrary code, such as `$state.go()`
		     */
		    UrlRouterProvider.prototype.when = function (what, handler, ruleCallback) {
		        if (ruleCallback === void 0) { ruleCallback = function (rule) { }; }
		        var _a = this, $urlMatcherFactory = _a.$urlMatcherFactory, $stateParams = _a.$stateParams;
		        var redirect, handlerIsString = predicates_1.isString(handler);
		        // @todo Queue this
		        if (predicates_1.isString(what))
		            what = $urlMatcherFactory.compile(what);
		        if (!handlerIsString && !predicates_1.isFunction(handler) && !predicates_1.isArray(handler))
		            throw new Error("invalid 'handler' in when()");
		        var strategies = {
		            matcher: function (_what, _handler) {
		                if (handlerIsString) {
		                    redirect = $urlMatcherFactory.compile(_handler);
		                    _handler = ['$match', redirect.format.bind(redirect)];
		                }
		                return common_1.extend(function () {
		                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));
		                }, {
		                    prefix: predicates_1.isString(_what.prefix) ? _what.prefix : ''
		                });
		            },
		            regex: function (_what, _handler) {
		                if (_what.global || _what.sticky)
		                    throw new Error("when() RegExp must not be global or sticky");
		                if (handlerIsString) {
		                    redirect = _handler;
		                    _handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
		                }
		                return common_1.extend(function () {
		                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path()));
		                }, {
		                    prefix: regExpPrefix(_what)
		                });
		            }
		        };
		        var check = {
		            matcher: $urlMatcherFactory.isMatcher(what),
		            regex: what instanceof RegExp
		        };
		        for (var n in check) {
		            if (check[n]) {
		                var rule = strategies[n](what, handler);
		                ruleCallback(rule);
		                return this.rule(rule);
		            }
		        }
		        throw new Error("invalid 'what' in when()");
		    };
		    ;
		    /**
		     * Disables monitoring of the URL.
		     *
		     * Call this method before UI-Router has bootstrapped.
		     * It will stop UI-Router from performing the initial url sync.
		     *
		     * This can be useful to perform some asynchronous initialization before the router starts.
		     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.
		     *
		     * @example
		     * ```js
		     *
		     * var app = angular.module('app', ['ui.router']);
		     *
		     * app.config(function ($urlRouterProvider) {
		     *   // Prevent $urlRouter from automatically intercepting URL changes;
		     *   $urlRouterProvider.deferIntercept();
		     * })
		     *
		     * app.run(function (MyService, $urlRouter, $http) {
		     *   $http.get("/stuff").then(function(resp) {
		     *     MyService.doStuff(resp.data);
		     *     $urlRouter.listen();
		     *     $urlRouter.sync();
		     *   });
		     * });
		     * ```
		     *
		     * @param defer Indicates whether to defer location change interception. Passing
		     *        no parameter is equivalent to `true`.
		     */
		    UrlRouterProvider.prototype.deferIntercept = function (defer) {
		        if (defer === undefined)
		            defer = true;
		        this.interceptDeferred = defer;
		    };
		    ;
		    return UrlRouterProvider;
		}());
		exports.UrlRouterProvider = UrlRouterProvider;
		var UrlRouter = (function () {
		    /** @hidden */
		    function UrlRouter(urlRouterProvider) {
		        this.urlRouterProvider = urlRouterProvider;
		        common_1.bindFunctions(UrlRouter.prototype, this, this);
		    }
		    /**
		     * Checks the current URL for a matching rule
		     *
		     * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
		     * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
		     * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
		     * with the transition by calling `$urlRouter.sync()`.
		     *
		     * @example
		     * ```js
		     *
		     * angular.module('app', ['ui.router'])
		     *   .run(function($rootScope, $urlRouter) {
		     *     $rootScope.$on('$locationChangeSuccess', function(evt) {
		     *       // Halt state change from even starting
		     *       evt.preventDefault();
		     *       // Perform custom logic
		     *       var meetsRequirement = ...
		     *       // Continue with the update and state transition if logic allows
		     *       if (meetsRequirement) $urlRouter.sync();
		     *     });
		     * });
		     * ```
		     */
		    UrlRouter.prototype.sync = function () {
		        update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);
		    };
		    /**
		     * Starts listening for URL changes
		     *
		     * Call this sometime after calling [[deferIntercept]] to start monitoring the url.
		     * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.
		     */
		    UrlRouter.prototype.listen = function () {
		        var _this = this;
		        return this.listener = this.listener || $location.onChange(function (evt) { return update(_this.urlRouterProvider.rules, _this.urlRouterProvider.otherwiseFn, evt); });
		    };
		    /**
		     * Internal API.
		     */
		    UrlRouter.prototype.update = function (read) {
		        if (read) {
		            this.location = $location.path();
		            return;
		        }
		        if ($location.path() === this.location)
		            return;
		        $location.setUrl(this.location, true);
		    };
		    /**
		     * Internal API.
		     *
		     * Pushes a new location to the browser history.
		     *
		     * @param urlMatcher
		     * @param params
		     * @param options
		     */
		    UrlRouter.prototype.push = function (urlMatcher, params, options) {
		        var replace = options && !!options.replace;
		        $location.setUrl(urlMatcher.format(params || {}), replace);
		    };
		    /**
		     * Builds and returns a URL with interpolated parameters
		     *
		     * @example
		     * ```js
		     *
		     * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
		     *   person: "bob"
		     * });
		     * // $bob == "/about/bob";
		     * ```
		     *
		     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.
		     * @param params An object of parameter values to fill the matcher's required parameters.
		     * @param options Options object. The options are:
		     *
		     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
		     *
		     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
		     */
		    UrlRouter.prototype.href = function (urlMatcher, params, options) {
		        if (!urlMatcher.validates(params))
		            return null;
		        var url = urlMatcher.format(params);
		        options = options || { absolute: false };
		        var cfg = coreservices_1.services.locationConfig;
		        var isHtml5 = cfg.html5Mode();
		        if (!isHtml5 && url !== null) {
		            url = "#" + cfg.hashPrefix() + url;
		        }
		        url = appendBasePath(url, isHtml5, options.absolute);
		        if (!options.absolute || !url) {
		            return url;
		        }
		        var slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();
		        port = (port === 80 || port === 443 ? '' : ':' + port);
		        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');
		    };
		    return UrlRouter;
		}());
		exports.UrlRouter = UrlRouter;


	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		var transition_1 = __webpack_require__(11);
		var hookRegistry_1 = __webpack_require__(15);
		var resolve_1 = __webpack_require__(31);
		var views_1 = __webpack_require__(32);
		var url_1 = __webpack_require__(33);
		var redirectTo_1 = __webpack_require__(34);
		var onEnterExitRetain_1 = __webpack_require__(35);
		var lazyLoadStates_1 = __webpack_require__(36);
		/**
		 * The default [[Transition]] options.
		 *
		 * Include this object when applying custom defaults:
		 * let reloadOpts = { reload: true, notify: true }
		 * let options = defaults(theirOpts, customDefaults, defaultOptions);
		 */
		exports.defaultTransOpts = {
		    location: true,
		    relative: null,
		    inherit: false,
		    notify: true,
		    reload: false,
		    custom: {},
		    current: function () { return null; },
		    source: "unknown"
		};
		/**
		 * This class provides services related to Transitions.
		 *
		 * - Most importantly, it allows global Transition Hooks to be registered.
		 * - It allows the default transition error handler to be set.
		 * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).
		 *
		 * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.
		 */
		var TransitionService = (function () {
		    function TransitionService(_router) {
		        this._router = _router;
		        this.$view = _router.viewService;
		        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);
		        this._deregisterHookFns = {};
		        this.registerTransitionHooks();
		    }
		    /** @hidden */
		    TransitionService.prototype.registerTransitionHooks = function () {
		        var fns = this._deregisterHookFns;
		        // Wire up redirectTo hook
		        fns.redirectTo = redirectTo_1.registerRedirectToHook(this);
		        // Wire up onExit/Retain/Enter state hooks
		        fns.onExit = onEnterExitRetain_1.registerOnExitHook(this);
		        fns.onRetain = onEnterExitRetain_1.registerOnRetainHook(this);
		        fns.onEnter = onEnterExitRetain_1.registerOnEnterHook(this);
		        // Wire up Resolve hooks
		        fns.eagerResolve = resolve_1.registerEagerResolvePath(this);
		        fns.lazyResolve = resolve_1.registerLazyResolveState(this);
		        // Wire up the View management hooks
		        fns.loadViews = views_1.registerLoadEnteringViews(this);
		        fns.activateViews = views_1.registerActivateViews(this);
		        // After globals.current is updated at priority: 10000
		        fns.updateUrl = url_1.registerUpdateUrl(this);
		        // Lazy load state trees
		        fns.lazyLoad = lazyLoadStates_1.registerLazyLoadHook(this);
		    };
		    /** @inheritdoc */
		    TransitionService.prototype.onBefore = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onStart = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onExit = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onRetain = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onEnter = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onFinish = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onSuccess = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onError = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /**
		     * Creates a new [[Transition]] object
		     *
		     * This is a factory function for creating new Transition objects.
		     * It is used internally by the [[StateService]] and should generally not be called by application code.
		     *
		     * @param fromPath the path to the current state (the from state)
		     * @param targetState the target state (destination)
		     * @returns a Transition
		     */
		    TransitionService.prototype.create = function (fromPath, targetState) {
		        return new transition_1.Transition(fromPath, targetState, this._router);
		    };
		    return TransitionService;
		}());
		exports.TransitionService = TransitionService;


	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module hooks */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var resolveContext_1 = __webpack_require__(17);
		var hof_1 = __webpack_require__(5);
		/**
		 * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path
		 *
		 * Registered using `transitionService.onStart({}, eagerResolvePath);`
		 *
		 * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.
		 *
		 * See [[StateDeclaration.resolve]]
		 */
		var eagerResolvePath = function (trans) {
		    return new resolveContext_1.ResolveContext(trans.treeChanges().to)
		        .resolvePath("EAGER", trans)
		        .then(common_1.noop);
		};
		exports.registerEagerResolvePath = function (transitionService) {
		    return transitionService.onStart({}, eagerResolvePath, { priority: 1000 });
		};
		/**
		 * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path
		 *
		 * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`
		 *
		 * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.
		 *
		 * See [[StateDeclaration.resolve]]
		 */
		var lazyResolveState = function (trans, state) {
		    return new resolveContext_1.ResolveContext(trans.treeChanges().to)
		        .subContext(state)
		        .resolvePath("LAZY", trans)
		        .then(common_1.noop);
		};
		exports.registerLazyResolveState = function (transitionService) {
		    return transitionService.onEnter({ entering: hof_1.val(true) }, lazyResolveState, { priority: 1000 });
		};


	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module hooks */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var coreservices_1 = __webpack_require__(6);
		/**
		 * A [[TransitionHookFn]] which waits for the views to load
		 *
		 * Registered using `transitionService.onStart({}, loadEnteringViews);`
		 *
		 * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.
		 * In angular 1, this includes loading the templates.
		 */
		var loadEnteringViews = function (transition) {
		    var enteringViews = transition.views("entering");
		    if (!enteringViews.length)
		        return;
		    return coreservices_1.services.$q.all(enteringViews.map(function (view) { return view.load(); })).then(common_1.noop);
		};
		exports.registerLoadEnteringViews = function (transitionService) {
		    return transitionService.onStart({}, loadEnteringViews);
		};
		/**
		 * A [[TransitionHookFn]] which activates the new views when a transition is successful.
		 *
		 * Registered using `transitionService.onSuccess({}, activateViews);`
		 *
		 * After a transition is complete, this hook deactivates the old views from the previous state,
		 * and activates the new views from the destination state.
		 *
		 * See [[ViewService]]
		 */
		var activateViews = function (transition) {
		    var enteringViews = transition.views("entering");
		    var exitingViews = transition.views("exiting");
		    if (!enteringViews.length && !exitingViews.length)
		        return;
		    var $view = transition.router.viewService;
		    exitingViews.forEach(function (vc) { return $view.deactivateViewConfig(vc); });
		    enteringViews.forEach(function (vc) { return $view.activateViewConfig(vc); });
		    $view.sync();
		};
		exports.registerActivateViews = function (transitionService) {
		    return transitionService.onSuccess({}, activateViews);
		};


	/***/ },
	/* 33 */
	/***/ function(module, exports) {

		"use strict";
		/**
		 * A [[TransitionHookFn]] which updates the URL after a successful transition
		 *
		 * Registered using `transitionService.onSuccess({}, updateUrl);`
		 */
		var updateUrl = function (transition) {
		    var options = transition.options();
		    var $state = transition.router.stateService;
		    var $urlRouter = transition.router.urlRouter;
		    // Dont update the url in these situations:
		    // The transition was triggered by a URL sync (options.source === 'url')
		    // The user doesn't want the url to update (options.location === false)
		    // The destination state, and all parents have no navigable url
		    if (options.source !== 'url' && options.location && $state.$current.navigable) {
		        var urlOptions = { replace: options.location === 'replace' };
		        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);
		    }
		    $urlRouter.update(true);
		};
		exports.registerUpdateUrl = function (transitionService) {
		    return transitionService.onSuccess({}, updateUrl, { priority: 9999 });
		};


	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module hooks */ /** */
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		var targetState_1 = __webpack_require__(14);
		/**
		 * A [[TransitionHookFn]] that redirects to a different state or params
		 *
		 * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`
		 *
		 * See [[StateDeclaration.redirectTo]]
		 */
		var redirectToHook = function (trans) {
		    var redirect = trans.to().redirectTo;
		    if (!redirect)
		        return;
		    function handleResult(result) {
		        var $state = trans.router.stateService;
		        if (result instanceof targetState_1.TargetState)
		            return result;
		        if (predicates_1.isString(result))
		            return $state.target(result, trans.params(), trans.options());
		        if (result['state'] || result['params'])
		            return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());
		    }
		    if (predicates_1.isFunction(redirect)) {
		        return coreservices_1.services.$q.when(redirect(trans)).then(handleResult);
		    }
		    return handleResult(redirect);
		};
		exports.registerRedirectToHook = function (transitionService) {
		    return transitionService.onStart({ to: function (state) { return !!state.redirectTo; } }, redirectToHook);
		};


	/***/ },
	/* 35 */
	/***/ function(module, exports) {

		"use strict";
		/**
		 * A factory which creates an onEnter, onExit or onRetain transition hook function
		 *
		 * The returned function invokes the (for instance) state.onEnter hook when the
		 * state is being entered.
		 *
		 * @hidden
		 */
		function makeEnterExitRetainHook(hookName) {
		    return function (transition, state) {
		        var hookFn = state[hookName];
		        return hookFn(transition, state);
		    };
		}
		/**
		 * The [[TransitionStateHookFn]] for onExit
		 *
		 * When the state is being exited, the state's .onExit function is invoked.
		 *
		 * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`
		 *
		 * See: [[IHookRegistry.onExit]]
		 */
		var onExitHook = makeEnterExitRetainHook('onExit');
		exports.registerOnExitHook = function (transitionService) {
		    return transitionService.onExit({ exiting: function (state) { return !!state.onExit; } }, onExitHook);
		};
		/**
		 * The [[TransitionStateHookFn]] for onRetain
		 *
		 * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.
		 *
		 * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`
		 *
		 * See: [[IHookRegistry.onRetain]]
		 */
		var onRetainHook = makeEnterExitRetainHook('onRetain');
		exports.registerOnRetainHook = function (transitionService) {
		    return transitionService.onRetain({ retained: function (state) { return !!state.onRetain; } }, onRetainHook);
		};
		/**
		 * The [[TransitionStateHookFn]] for onEnter
		 *
		 * When the state is being entered, the state's .onEnter function is invoked.
		 *
		 * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`
		 *
		 * See: [[IHookRegistry.onEnter]]
		 */
		var onEnterHook = makeEnterExitRetainHook('onEnter');
		exports.registerOnEnterHook = function (transitionService) {
		    return transitionService.onEnter({ entering: function (state) { return !!state.onEnter; } }, onEnterHook);
		};


	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		var coreservices_1 = __webpack_require__(6);
		/**
		 * A [[TransitionHookFn]] that lazy loads a state tree.
		 *
		 * When transitioning to a state "abc" which has a `lazyLoad` function defined:
		 * - Invoke the `lazyLoad` function
		 *   - The function should return a promise for an array of lazy loaded [[StateDeclaration]]s
		 * - Wait for the promise to resolve
		 * - Deregister the original state "abc"
		 *   - The original state definition is a placeholder for the lazy loaded states
		 * - Register the new states
		 * - Retry the transition
		 *
		 * See [[StateDeclaration.lazyLoad]]
		 */
		var lazyLoadHook = function (transition) {
		    var toState = transition.to();
		    var registry = transition.router.stateRegistry;
		    function retryOriginalTransition() {
		        if (transition.options().source === 'url') {
		            var loc = coreservices_1.services.location, path_1 = loc.path(), search_1 = loc.search(), hash_1 = loc.hash();
		            var matchState = function (state) { return [state, state.url && state.url.exec(path_1, search_1, hash_1)]; };
		            var matches = registry.get().map(function (s) { return s.$$state(); }).map(matchState).filter(function (_a) {
		                var state = _a[0], params = _a[1];
		                return !!params;
		            });
		            if (matches.length) {
		                var _a = matches[0], state = _a[0], params = _a[1];
		                return transition.router.stateService.target(state, params, transition.options());
		            }
		            transition.router.urlRouter.sync();
		        }
		        // The original transition was not triggered via url sync
		        // The lazy state should be loaded now, so re-try the original transition
		        var orig = transition.targetState();
		        return transition.router.stateService.target(orig.identifier(), orig.params(), orig.options());
		    }
		    /**
		     * Replace the placeholder state with the newly loaded states from the NgModule.
		     */
		    function updateStateRegistry(result) {
		        // deregister placeholder state
		        registry.deregister(transition.$to());
		        if (result && Array.isArray(result.states)) {
		            result.states.forEach(function (state) { return registry.register(state); });
		        }
		    }
		    var hook = toState.lazyLoad;
		    // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked
		    var promise = hook['_promise'];
		    if (!promise) {
		        promise = hook['_promise'] = hook(transition).then(updateStateRegistry);
		        var cleanup = function () { return delete hook['_promise']; };
		        promise.then(cleanup, cleanup);
		    }
		    return promise.then(retryOriginalTransition);
		};
		exports.registerLazyLoadHook = function (transitionService) {
		    return transitionService.onBefore({ to: function (state) { return !!state.lazyLoad; } }, lazyLoadHook);
		};


	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module view */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var trace_1 = __webpack_require__(12);
		/**
		 * The View service
		 */
		var ViewService = (function () {
		    function ViewService() {
		        var _this = this;
		        this.uiViews = [];
		        this.viewConfigs = [];
		        this._viewConfigFactories = {};
		        this.sync = function () {
		            var uiViewsByFqn = _this.uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(common_1.applyPairs, {});
		            /**
		             * Given a ui-view and a ViewConfig, determines if they "match".
		             *
		             * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in
		             * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.
		             *
		             * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or
		             * can be a segmented ui-view path, describing a portion of a ui-view fqn.
		             *
		             * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type
		             *
		             * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:
		             * - the ui-view's name matches the ViewConfig's target name
		             * - the ui-view's context matches the ViewConfig's anchor
		             *
		             * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:
		             * - There exists a parent ui-view where:
		             *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name
		             *    - the parent ui-view's context matches the ViewConfig's anchor
		             * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn
		             *
		             * Example:
		             *
		             * DOM:
		             * <div ui-view>                        <!-- created in the root context (name: "") -->
		             *   <div ui-view="foo">                <!-- created in the context named: "A"      -->
		             *     <div ui-view>                    <!-- created in the context named: "A.B"    -->
		             *       <div ui-view="bar">            <!-- created in the context named: "A.B.C"  -->
		             *       </div>
		             *     </div>
		             *   </div>
		             * </div>
		             *
		             * uiViews: [
		             *  { fqn: "$default",                  creationContext: { name: "" } },
		             *  { fqn: "$default.foo",              creationContext: { name: "A" } },
		             *  { fqn: "$default.foo.$default",     creationContext: { name: "A.B" } }
		             *  { fqn: "$default.foo.$default.bar", creationContext: { name: "A.B.C" } }
		             * ]
		             *
		             * These four view configs all match the ui-view with the fqn: "$default.foo.$default.bar":
		             *
		             * - ViewConfig1: { uiViewName: "bar",                       uiViewContextAnchor: "A.B.C" }
		             * - ViewConfig2: { uiViewName: "$default.bar",              uiViewContextAnchor: "A.B" }
		             * - ViewConfig3: { uiViewName: "foo.$default.bar",          uiViewContextAnchor: "A" }
		             * - ViewConfig4: { uiViewName: "$default.foo.$default.bar", uiViewContextAnchor: "" }
		             *
		             * Using ViewConfig3 as an example, it matches the ui-view with fqn "$default.foo.$default.bar" because:
		             * - The ViewConfig's segmented target name is: [ "foo", "$default", "bar" ]
		             * - There exists a parent ui-view (which has fqn: "$default.foo") where:
		             *    - the parent ui-view's name "foo" matches the first segment "foo" of the ViewConfig's target name
		             *    - the parent ui-view's context "A" matches the ViewConfig's anchor context "A"
		             * - And the remaining segments [ "$default", "bar" ].join("."_ of the ViewConfig's target name match
		             *   the tail of the ui-view's fqn "default.bar"
		             */
		            var matches = function (uiView) { return function (viewConfig) {
		                // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc
		                if (uiView.$type !== viewConfig.viewDecl.$type)
		                    return false;
		                // Split names apart from both viewConfig and uiView into segments
		                var vc = viewConfig.viewDecl;
		                var vcSegments = vc.$uiViewName.split(".");
		                var uivSegments = uiView.fqn.split(".");
		                // Check if the tails of the segment arrays match. ex, these arrays' tails match:
		                // vc: ["foo", "bar"], uiv fqn: ["$default", "foo", "bar"]
		                if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))
		                    return false;
		                // Now check if the fqn ending at the first segment of the viewConfig matches the context:
		                // ["$default", "foo"].join(".") == "$default.foo", does the ui-view $default.foo context match?
		                var negOffset = (1 - vcSegments.length) || undefined;
		                var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(".");
		                var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;
		                return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);
		            }; };
		            // Return the number of dots in the fully qualified name
		            function uiViewDepth(uiView) {
		                return uiView.fqn.split(".").length;
		            }
		            // Return the ViewConfig's context's depth in the context tree.
		            function viewConfigDepth(config) {
		                var context = config.viewDecl.$context, count = 0;
		                while (++count && context.parent)
		                    context = context.parent;
		                return count;
		            }
		            // Given a depth function, returns a compare function which can return either ascending or descending order
		            var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });
		            var matchingConfigPair = function (uiView) {
		                var matchingConfigs = _this.viewConfigs.filter(matches(uiView));
		                if (matchingConfigs.length > 1)
		                    matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending
		                return [uiView, matchingConfigs[0]];
		            };
		            var configureUIView = function (_a) {
		                var uiView = _a[0], viewConfig = _a[1];
		                // If a parent ui-view is reconfigured, it could destroy child ui-views.
		                // Before configuring a child ui-view, make sure it's still in the active uiViews array.
		                if (_this.uiViews.indexOf(uiView) !== -1)
		                    uiView.configUpdated(viewConfig);
		            };
		            _this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);
		        };
		    }
		    ViewService.prototype.rootContext = function (context) {
		        return this._rootContext = context || this._rootContext;
		    };
		    ;
		    ViewService.prototype.viewConfigFactory = function (viewType, factory) {
		        this._viewConfigFactories[viewType] = factory;
		    };
		    ViewService.prototype.createViewConfig = function (path, decl) {
		        var cfgFactory = this._viewConfigFactories[decl.$type];
		        if (!cfgFactory)
		            throw new Error("ViewService: No view config factory registered for type " + decl.$type);
		        var cfgs = cfgFactory(path, decl);
		        return predicates_1.isArray(cfgs) ? cfgs : [cfgs];
		    };
		    /**
		     * De-registers a ViewConfig.
		     *
		     * @param viewConfig The ViewConfig view to deregister.
		     */
		    ViewService.prototype.deactivateViewConfig = function (viewConfig) {
		        trace_1.trace.traceViewServiceEvent("<- Removing", viewConfig);
		        common_1.removeFrom(this.viewConfigs, viewConfig);
		    };
		    ;
		    ViewService.prototype.activateViewConfig = function (viewConfig) {
		        trace_1.trace.traceViewServiceEvent("-> Registering", viewConfig);
		        this.viewConfigs.push(viewConfig);
		    };
		    ;
		    /**
		     * Allows a `ui-view` element to register its canonical name with a callback that allows it to
		     * be updated with a template, controller, and local variables.
		     *
		     * @param {String} name The fully-qualified name of the `ui-view` object being registered.
		     * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration
		     *                   of the view.
		     * @return {Function} Returns a de-registration function used when the view is destroyed.
		     */
		    ViewService.prototype.registerUIView = function (uiView) {
		        trace_1.trace.traceViewServiceUIViewEvent("-> Registering", uiView);
		        var uiViews = this.uiViews;
		        var fqnMatches = function (uiv) { return uiv.fqn === uiView.fqn; };
		        if (uiViews.filter(fqnMatches).length)
		            trace_1.trace.traceViewServiceUIViewEvent("!!!! duplicate uiView named:", uiView);
		        uiViews.push(uiView);
		        this.sync();
		        return function () {
		            var idx = uiViews.indexOf(uiView);
		            if (idx === -1) {
		                trace_1.trace.traceViewServiceUIViewEvent("Tried removing non-registered uiView", uiView);
		                return;
		            }
		            trace_1.trace.traceViewServiceUIViewEvent("<- Deregistering", uiView);
		            common_1.removeFrom(uiViews)(uiView);
		        };
		    };
		    ;
		    /**
		     * Returns the list of views currently available on the page, by fully-qualified name.
		     *
		     * @return {Array} Returns an array of fully-qualified view names.
		     */
		    ViewService.prototype.available = function () {
		        return this.uiViews.map(hof_1.prop("fqn"));
		    };
		    /**
		     * Returns the list of views on the page containing loaded content.
		     *
		     * @return {Array} Returns an array of fully-qualified view names.
		     */
		    ViewService.prototype.active = function () {
		        return this.uiViews.filter(hof_1.prop("$config")).map(hof_1.prop("name"));
		    };
		    /**
		     * Normalizes a view's name from a state.views configuration block.
		     *
		     * @param context the context object (state declaration) that the view belongs to
		     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]
		     *
		     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets
		     */
		    ViewService.normalizeUIViewTarget = function (context, rawViewName) {
		        if (rawViewName === void 0) { rawViewName = ""; }
		        // TODO: Validate incoming view name with a regexp to allow:
		        // ex: "view.name@foo.bar" , "^.^.view.name" , "view.name@^.^" , "" ,
		        // "@" , "$default@^" , "!$default.$default" , "!foo.bar"
		        var viewAtContext = rawViewName.split("@");
		        var uiViewName = viewAtContext[0] || "$default"; // default to unnamed view
		        var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : "^"; // default to parent context
		        // Handle relative view-name sugar syntax.
		        // Matches rawViewName "^.^.^.foo.bar" into array: ["^.^.^.foo.bar", "^.^.^", "foo.bar"],
		        var relativeViewNameSugar = /^(\^(?:\.\^)*)\.(.*$)/.exec(uiViewName);
		        if (relativeViewNameSugar) {
		            // Clobbers existing contextAnchor (rawViewName validation will fix this)
		            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to "^.^.^"
		            uiViewName = relativeViewNameSugar[2]; // set view-name to "foo.bar"
		        }
		        if (uiViewName.charAt(0) === '!') {
		            uiViewName = uiViewName.substr(1);
		            uiViewContextAnchor = ""; // target absolutely from root
		        }
		        // handle parent relative targeting "^.^.^"
		        var relativeMatch = /^(\^(?:\.\^)*)$/;
		        if (relativeMatch.exec(uiViewContextAnchor)) {
		            var anchor = uiViewContextAnchor.split(".").reduce((function (anchor, x) { return anchor.parent; }), context);
		            uiViewContextAnchor = anchor.name;
		        }
		        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };
		    };
		    return ViewService;
		}());
		exports.ViewService = ViewService;


	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {

		/** @module state */ /** for typedoc */
		"use strict";
		var stateMatcher_1 = __webpack_require__(39);
		var stateBuilder_1 = __webpack_require__(40);
		var stateQueueManager_1 = __webpack_require__(41);
		var common_1 = __webpack_require__(3);
		var StateRegistry = (function () {
		    function StateRegistry(urlMatcherFactory, urlRouterProvider) {
		        this.urlRouterProvider = urlRouterProvider;
		        this.states = {};
		        this.listeners = [];
		        this.matcher = new stateMatcher_1.StateMatcher(this.states);
		        this.builder = new stateBuilder_1.StateBuilder(this.matcher, urlMatcherFactory);
		        this.stateQueue = new stateQueueManager_1.StateQueueManager(this.states, this.builder, urlRouterProvider, this.listeners);
		        var rootStateDef = {
		            name: '',
		            url: '^',
		            views: null,
		            params: {
		                '#': { value: null, type: 'hash', dynamic: true }
		            },
		            abstract: true
		        };
		        var _root = this._root = this.stateQueue.register(rootStateDef);
		        _root.navigable = null;
		    }
		    /**
		     * Listen for a State Registry events
		     *
		     * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.
		     *
		     * @example
		     * ```js
		     *
		     * let allStates = registry.get();
		     *
		     * // Later, invoke deregisterFn() to remove the listener
		     * let deregisterFn = registry.onStatesChanged((event, states) => {
		     *   switch(event) {
		     *     case: 'registered':
		     *       states.forEach(state => allStates.push(state));
		     *       break;
		     *     case: 'deregistered':
		     *       states.forEach(state => {
		     *         let idx = allStates.indexOf(state);
		     *         if (idx !== -1) allStates.splice(idx, 1);
		     *       });
		     *       break;
		     *   }
		     * });
		     * ```
		     *
		     * @param listener a callback function invoked when the registered states changes.
		     *        The function receives two parameters, `event` and `state`.
		     *        See [[StateRegistryListener]]
		     * @return a function that deregisters the listener
		     */
		    StateRegistry.prototype.onStatesChanged = function (listener) {
		        this.listeners.push(listener);
		        return function deregisterListener() {
		            common_1.removeFrom(this.listeners)(listener);
		        }.bind(this);
		    };
		    /**
		     * Gets the implicit root state
		     *
		     * Gets the root of the state tree.
		     * The root state is implicitly created by UI-Router.
		     * Note: this returns the internal [[State]] representation, not a [[StateDeclaration]]
		     *
		     * @return the root [[State]]
		     */
		    StateRegistry.prototype.root = function () {
		        return this._root;
		    };
		    /**
		     * Adds a state to the registry
		     *
		     * Registers a [[StateDefinition]] or queues it for registration.
		     *
		     * Note: a state will be queued if the state's parent isn't yet registered.
		     * It will also be queued if the queue is not yet in [[StateQueueManager.autoFlush]] mode.
		     *
		     * @param stateDefinition the definition of the state to register.
		     * @returns the internal [[State]] object.
		     *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).
		     *          If the state was only queued, then the object is not fully built.
		     */
		    StateRegistry.prototype.register = function (stateDefinition) {
		        return this.stateQueue.register(stateDefinition);
		    };
		    /** @hidden */
		    StateRegistry.prototype._deregisterTree = function (state) {
		        var _this = this;
		        var all = this.get().map(function (s) { return s.$$state(); });
		        var getChildren = function (states) {
		            var children = all.filter(function (s) { return states.indexOf(s.parent) !== -1; });
		            return children.length === 0 ? children : children.concat(getChildren(children));
		        };
		        var children = getChildren([state]);
		        var deregistered = [state].concat(children).reverse();
		        deregistered.forEach(function (state) {
		            _this.urlRouterProvider.removeRule(state._urlRule);
		            delete _this.states[state.name];
		        });
		        return deregistered;
		    };
		    /**
		     * Removes a state from the registry
		     *
		     * This removes a state from the registry.
		     * If the state has children, they are are also removed from the registry.
		     *
		     * @param stateOrName the state's name or object representation
		     * @returns {State[]} a list of removed states
		     */
		    StateRegistry.prototype.deregister = function (stateOrName) {
		        var _state = this.get(stateOrName);
		        if (!_state)
		            throw new Error("Can't deregister state; not found: " + stateOrName);
		        var deregisteredStates = this._deregisterTree(_state.$$state());
		        this.listeners.forEach(function (listener) { return listener("deregistered", deregisteredStates.map(function (s) { return s.self; })); });
		        return deregisteredStates;
		    };
		    StateRegistry.prototype.get = function (stateOrName, base) {
		        var _this = this;
		        if (arguments.length === 0)
		            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });
		        var found = this.matcher.find(stateOrName, base);
		        return found && found.self || null;
		    };
		    StateRegistry.prototype.decorator = function (name, func) {
		        return this.builder.builder(name, func);
		    };
		    return StateRegistry;
		}());
		exports.StateRegistry = StateRegistry;


	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module state */ /** for typedoc */
		var predicates_1 = __webpack_require__(4);
		var glob_1 = __webpack_require__(7);
		var common_1 = __webpack_require__(3);
		var StateMatcher = (function () {
		    function StateMatcher(_states) {
		        this._states = _states;
		    }
		    StateMatcher.prototype.isRelative = function (stateName) {
		        stateName = stateName || "";
		        return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
		    };
		    StateMatcher.prototype.find = function (stateOrName, base) {
		        if (!stateOrName && stateOrName !== "")
		            return undefined;
		        var isStr = predicates_1.isString(stateOrName);
		        var name = isStr ? stateOrName : stateOrName.name;
		        if (this.isRelative(name))
		            name = this.resolvePath(name, base);
		        var state = this._states[name];
		        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
		            return state;
		        }
		        else if (isStr) {
		            var matches = common_1.values(this._states)
		                .filter(function (state) { return new glob_1.Glob(state.name).matches(name); });
		            if (matches.length > 1) {
		                console.log("stateMatcher.find: Found multiple matches for " + name + " using glob: ", matches.map(function (match) { return match.name; }));
		            }
		            return matches[0];
		        }
		        return undefined;
		    };
		    StateMatcher.prototype.resolvePath = function (name, base) {
		        if (!base)
		            throw new Error("No reference point given for path '" + name + "'");
		        var baseState = this.find(base);
		        var splitName = name.split("."), i = 0, pathLength = splitName.length, current = baseState;
		        for (; i < pathLength; i++) {
		            if (splitName[i] === "" && i === 0) {
		                current = baseState;
		                continue;
		            }
		            if (splitName[i] === "^") {
		                if (!current.parent)
		                    throw new Error("Path '" + name + "' not valid for state '" + baseState.name + "'");
		                current = current.parent;
		                continue;
		            }
		            break;
		        }
		        var relName = splitName.slice(i).join(".");
		        return current.name + (current.name && relName ? "." : "") + relName;
		    };
		    return StateMatcher;
		}());
		exports.StateMatcher = StateMatcher;


	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module state */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var strings_1 = __webpack_require__(9);
		var hof_1 = __webpack_require__(5);
		var param_1 = __webpack_require__(22);
		var resolvable_1 = __webpack_require__(19);
		var coreservices_1 = __webpack_require__(6);
		var parseUrl = function (url) {
		    if (!predicates_1.isString(url))
		        return false;
		    var root = url.charAt(0) === '^';
		    return { val: root ? url.substring(1) : url, root: root };
		};
		function nameBuilder(state) {
		    if (state.lazyLoad)
		        state.name = state.self.name + ".**";
		    return state.name;
		}
		function selfBuilder(state) {
		    state.self.$$state = function () { return state; };
		    return state.self;
		}
		function dataBuilder(state) {
		    if (state.parent && state.parent.data) {
		        state.data = state.self.data = common_1.inherit(state.parent.data, state.data);
		    }
		    return state.data;
		}
		var getUrlBuilder = function ($urlMatcherFactoryProvider, root) {
		    return function urlBuilder(state) {
		        var stateDec = state;
		        if (stateDec && stateDec.url && stateDec.lazyLoad) {
		            stateDec.url += "{remainder:any}"; // match any path (.*)
		        }
		        var parsed = parseUrl(stateDec.url), parent = state.parent;
		        var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {
		            params: state.params || {},
		            paramMap: function (paramConfig, isSearch) {
		                if (stateDec.reloadOnSearch === false && isSearch)
		                    paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });
		                return paramConfig;
		            }
		        });
		        if (!url)
		            return null;
		        if (!$urlMatcherFactoryProvider.isMatcher(url))
		            throw new Error("Invalid url '" + url + "' in state '" + state + "'");
		        return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(url);
		    };
		};
		var getNavigableBuilder = function (isRoot) {
		    return function navigableBuilder(state) {
		        return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);
		    };
		};
		var getParamsBuilder = function (paramTypes) {
		    return function paramsBuilder(state) {
		        var makeConfigParam = function (config, id) { return param_1.Param.fromConfig(id, null, config, paramTypes); };
		        var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];
		        var nonUrlParams = common_1.values(common_1.mapObj(common_1.omit(state.params || {}, urlParams.map(hof_1.prop('id'))), makeConfigParam));
		        return urlParams.concat(nonUrlParams).map(function (p) { return [p.id, p]; }).reduce(common_1.applyPairs, {});
		    };
		};
		function pathBuilder(state) {
		    return state.parent ? state.parent.path.concat(state) : [state];
		}
		function includesBuilder(state) {
		    var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};
		    includes[state.name] = true;
		    return includes;
		}
		/**
		 * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].
		 *
		 * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder
		 * validates the `resolve` property and converts it to a [[Resolvable]] array.
		 *
		 * resolve: input value can be:
		 *
		 * {
		 *   // analyzed but not injected
		 *   myFooResolve: function() { return "myFooData"; },
		 *
		 *   // function.toString() parsed, "DependencyName" dep as string (not min-safe)
		 *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },
		 *
		 *   // Array split; "DependencyName" dep as string
		 *   myBazResolve: [ "DependencyName", function(dep) { return dep.fetchSomethingAsPromise() },
		 *
		 *   // Array split; DependencyType dep as token (compared using ===)
		 *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },
		 *
		 *   // val.$inject used as deps
		 *   // where:
		 *   //     corgeResolve.$inject = ["DependencyName"];
		 *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }
		 *   // then "DependencyName" dep as string
		 *   myCorgeResolve: corgeResolve,
		 *
		 *  // inject service by name
		 *  // When a string is found, desugar creating a resolve that injects the named service
		 *   myGraultResolve: "SomeService"
		 * }
		 *
		 * or:
		 *
		 * [
		 *   new Resolvable("myFooResolve", function() { return "myFooData" }),
		 *   new Resolvable("myBarResolve", function(dep) { return dep.fetchSomethingAsPromise() }, [ "DependencyName" ]),
		 *   { provide: "myBazResolve", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ "DependencyName" ] }
		 * ]
		 */
		function resolvablesBuilder(state) {
		    /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */
		    var objects2Tuples = function (resolveObj, resolvePolicies) {
		        return Object.keys(resolveObj || {}).map(function (token) { return ({ token: token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token] }); });
		    };
		    /** fetch DI annotations from a function or ng1-style array */
		    var annotate = function (fn) {
		        return fn['$inject'] || coreservices_1.services.$injector.annotate(fn, coreservices_1.services.$injector.strictDi);
		    };
		    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */
		    var isResolveLiteral = function (obj) { return !!(obj.token && obj.resolveFn); };
		    /** true if the object looks like a provide literal, or a ng2 Provider */
		    var isLikeNg2Provider = function (obj) { return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass)); };
		    /** true if the object looks like a tuple from obj2Tuples */
		    var isTupleFromObj = function (obj) { return !!(obj && obj.val && (predicates_1.isString(obj.val) || predicates_1.isArray(obj.val) || predicates_1.isFunction(obj.val))); };
		    /** extracts the token from a Provider or provide literal */
		    var token = function (p) { return p.provide || p.token; };
		    /** Given a literal resolve or provider object, returns a Resolvable */
		    var literal2Resolvable = hof_1.pattern([
		        [hof_1.prop('resolveFn'), function (p) { return new resolvable_1.Resolvable(token(p), p.resolveFn, p.deps, p.policy); }],
		        [hof_1.prop('useFactory'), function (p) { return new resolvable_1.Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy); }],
		        [hof_1.prop('useClass'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return new p.useClass(); }, [], p.policy); }],
		        [hof_1.prop('useValue'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return p.useValue; }, [], p.policy, p.useValue); }],
		        [hof_1.prop('useExisting'), function (p) { return new resolvable_1.Resolvable(token(p), common_1.identity, [p.useExisting], p.policy); }],
		    ]);
		    var tuple2Resolvable = hof_1.pattern([
		        [hof_1.pipe(hof_1.prop("val"), predicates_1.isString), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.identity, [tuple.val], tuple.policy); }],
		        [hof_1.pipe(hof_1.prop("val"), predicates_1.isArray), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.tail(tuple.val), tuple.val.slice(0, -1), tuple.policy); }],
		        [hof_1.pipe(hof_1.prop("val"), predicates_1.isFunction), function (tuple) { return new resolvable_1.Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy); }],
		    ]);
		    var item2Resolvable = hof_1.pattern([
		        [hof_1.is(resolvable_1.Resolvable), function (r) { return r; }],
		        [isResolveLiteral, literal2Resolvable],
		        [isLikeNg2Provider, literal2Resolvable],
		        [isTupleFromObj, tuple2Resolvable],
		        [hof_1.val(true), function (obj) { throw new Error("Invalid resolve value: " + strings_1.stringify(obj)); }]
		    ]);
		    // If resolveBlock is already an array, use it as-is.
		    // Otherwise, assume it's an object and convert to an Array of tuples
		    var decl = state.resolve;
		    var items = predicates_1.isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});
		    return items.map(item2Resolvable);
		}
		exports.resolvablesBuilder = resolvablesBuilder;
		/**
		 * @internalapi A internal global service
		 *
		 * StateBuilder is a factory for the internal [[State]] objects.
		 *
		 * When you register a state with the [[StateRegistry]], you register a plain old javascript object which
		 * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding
		 * [[State]] object, which has an API and is used internally.
		 *
		 * Custom properties or API may be added to the internal [[State]] object by registering a decorator function
		 * using the [[builder]] method.
		 */
		var StateBuilder = (function () {
		    function StateBuilder(matcher, $urlMatcherFactoryProvider) {
		        this.matcher = matcher;
		        var self = this;
		        var root = function () { return matcher.find(""); };
		        var isRoot = function (state) { return state.name === ""; };
		        function parentBuilder(state) {
		            if (isRoot(state))
		                return null;
		            return matcher.find(self.parentName(state)) || root();
		        }
		        this.builders = {
		            name: [nameBuilder],
		            self: [selfBuilder],
		            parent: [parentBuilder],
		            data: [dataBuilder],
		            // Build a URLMatcher if necessary, either via a relative or absolute URL
		            url: [getUrlBuilder($urlMatcherFactoryProvider, root)],
		            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
		            navigable: [getNavigableBuilder(isRoot)],
		            params: [getParamsBuilder($urlMatcherFactoryProvider.paramTypes)],
		            // Each framework-specific ui-router implementation should define its own `views` builder
		            // e.g., src/ng1/statebuilders/views.ts
		            views: [],
		            // Keep a full path from the root down to this state as this is needed for state activation.
		            path: [pathBuilder],
		            // Speed up $state.includes() as it's used a lot
		            includes: [includesBuilder],
		            resolvables: [resolvablesBuilder]
		        };
		    }
		    /**
		     * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).
		     * More than one BuilderFunction can be registered for a given property.
		     *
		     * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.
		     *
		     * @param name The name of the State property being registered for.
		     * @param fn The BuilderFunction which will be used to build the State property
		     * @returns a function which deregisters the BuilderFunction
		     */
		    StateBuilder.prototype.builder = function (name, fn) {
		        var builders = this.builders;
		        var array = builders[name] || [];
		        // Backwards compat: if only one builder exists, return it, else return whole arary.
		        if (predicates_1.isString(name) && !predicates_1.isDefined(fn))
		            return array.length > 1 ? array : array[0];
		        if (!predicates_1.isString(name) || !predicates_1.isFunction(fn))
		            return;
		        builders[name] = array;
		        builders[name].push(fn);
		        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };
		    };
		    /**
		     * Builds all of the properties on an essentially blank State object, returning a State object which has all its
		     * properties and API built.
		     *
		     * @param state an uninitialized State object
		     * @returns the built State object
		     */
		    StateBuilder.prototype.build = function (state) {
		        var _a = this, matcher = _a.matcher, builders = _a.builders;
		        var parent = this.parentName(state);
		        if (parent && !matcher.find(parent))
		            return null;
		        for (var key in builders) {
		            if (!builders.hasOwnProperty(key))
		                continue;
		            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, common_1.noop);
		            state[key] = chain(state);
		        }
		        return state;
		    };
		    StateBuilder.prototype.parentName = function (state) {
		        var name = state.name || "";
		        var segments = name.split('.');
		        if (segments.length > 1) {
		            if (state.parent) {
		                throw new Error("States that specify the 'parent:' property should not have a '.' in their name (" + name + ")");
		            }
		            var lastSegment = segments.pop();
		            if (lastSegment === '**')
		                segments.pop();
		            return segments.join(".");
		        }
		        if (!state.parent)
		            return "";
		        return predicates_1.isString(state.parent) ? state.parent : state.parent.name;
		    };
		    StateBuilder.prototype.name = function (state) {
		        var name = state.name;
		        if (name.indexOf('.') !== -1 || !state.parent)
		            return name;
		        var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;
		        return parentName ? parentName + "." + name : name;
		    };
		    return StateBuilder;
		}());
		exports.StateBuilder = StateBuilder;


	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module state */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var stateObject_1 = __webpack_require__(42);
		var StateQueueManager = (function () {
		    function StateQueueManager(states, builder, $urlRouterProvider, listeners) {
		        this.states = states;
		        this.builder = builder;
		        this.$urlRouterProvider = $urlRouterProvider;
		        this.listeners = listeners;
		        this.queue = [];
		    }
		    StateQueueManager.prototype.register = function (config) {
		        var _a = this, states = _a.states, queue = _a.queue, $state = _a.$state;
		        // Wrap a new object around the state so we can store our private details easily.
		        // @TODO: state = new State(extend({}, config, { ... }))
		        var state = common_1.inherit(new stateObject_1.State(), common_1.extend({}, config, {
		            self: config,
		            resolve: config.resolve || [],
		            toString: function () { return config.name; }
		        }));
		        if (!predicates_1.isString(state.name))
		            throw new Error("State must have a valid name");
		        if (states.hasOwnProperty(state.name) || common_1.pluck(queue, 'name').indexOf(state.name) !== -1)
		            throw new Error("State '" + state.name + "' is already defined");
		        queue.push(state);
		        if (this.$state) {
		            this.flush($state);
		        }
		        return state;
		    };
		    StateQueueManager.prototype.flush = function ($state) {
		        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;
		        var registered = [], // states that got registered
		        orphans = [], // states that dodn't yet have a parent registered
		        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered
		        while (queue.length > 0) {
		            var state = queue.shift();
		            var result = builder.build(state);
		            var orphanIdx = orphans.indexOf(state);
		            if (result) {
		                if (states.hasOwnProperty(state.name))
		                    throw new Error("State '" + name + "' is already defined");
		                states[state.name] = state;
		                this.attachRoute($state, state);
		                if (orphanIdx >= 0)
		                    orphans.splice(orphanIdx, 1);
		                registered.push(state);
		                continue;
		            }
		            var prev = previousQueueLength[state.name];
		            previousQueueLength[state.name] = queue.length;
		            if (orphanIdx >= 0 && prev === queue.length) {
		                // Wait until two consecutive iterations where no additional states were dequeued successfully.
		                // throw new Error(`Cannot register orphaned state '${state.name}'`);
		                queue.push(state);
		                return states;
		            }
		            else if (orphanIdx < 0) {
		                orphans.push(state);
		            }
		            queue.push(state);
		        }
		        if (registered.length) {
		            this.listeners.forEach(function (listener) { return listener("registered", registered.map(function (s) { return s.self; })); });
		        }
		        return states;
		    };
		    StateQueueManager.prototype.autoFlush = function ($state) {
		        this.$state = $state;
		        this.flush($state);
		    };
		    StateQueueManager.prototype.attachRoute = function ($state, state) {
		        var $urlRouterProvider = this.$urlRouterProvider;
		        if (state.abstract || !state.url)
		            return;
		        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
		                if ($state.$current.navigable !== state || !common_1.equalForKeys($match, $stateParams)) {
		                    $state.transitionTo(state, $match, { inherit: true, source: "url" });
		                }
		            }], function (rule) { return state._urlRule = rule; });
		    };
		    return StateQueueManager;
		}());
		exports.StateQueueManager = StateQueueManager;


	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {

		/** @module state */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		/**
		 * @ngdoc object
		 * @name ui.router.state.type:State
		 *
		 * @description
		 * Definition object for states. Includes methods for manipulating the state heirarchy.
		 *
		 * @param {Object} config  A configuration object hash that includes the results of user-supplied
		 *        values, as well as values from `StateBuilder`.
		 *
		 * @returns {Object}  Returns a new `State` object.
		 */
		var State = (function () {
		    function State(config) {
		        common_1.extend(this, config);
		        // Object.freeze(this);
		    }
		    /**
		     * @ngdoc function
		     * @name ui.router.state.type:State#is
		     * @methodOf ui.router.state.type:State
		     *
		     * @description
		     * Compares the identity of the state against the passed value, which is either an object
		     * reference to the actual `State` instance, the original definition object passed to
		     * `$stateProvider.state()`, or the fully-qualified name.
		     *
		     * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed
		     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.
		     * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.
		     */
		    State.prototype.is = function (ref) {
		        return this === ref || this.self === ref || this.fqn() === ref;
		    };
		    /**
		     * @ngdoc function
		     * @name ui.router.state.type:State#fqn
		     * @methodOf ui.router.state.type:State
		     *
		     * @description
		     * Returns the fully-qualified name of the state, based on its current position in the tree.
		     *
		     * @returns {string} Returns a dot-separated name of the state.
		     */
		    State.prototype.fqn = function () {
		        if (!this.parent || !(this.parent instanceof this.constructor))
		            return this.name;
		        var name = this.parent.fqn();
		        return name ? name + "." + this.name : this.name;
		    };
		    /**
		     * @ngdoc function
		     * @name ui.router.state.type:State#root
		     * @methodOf ui.router.state.type:State
		     *
		     * @description
		     * Returns the root node of this state's tree.
		     *
		     * @returns {State} The root of this state's tree.
		     */
		    State.prototype.root = function () {
		        return this.parent && this.parent.root() || this;
		    };
		    State.prototype.parameters = function (opts) {
		        opts = common_1.defaults(opts, { inherit: true });
		        var inherited = opts.inherit && this.parent && this.parent.parameters() || [];
		        return inherited.concat(common_1.values(this.params));
		    };
		    State.prototype.parameter = function (id, opts) {
		        if (opts === void 0) { opts = {}; }
		        return (this.url && this.url.parameter(id, opts) ||
		            common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) ||
		            opts.inherit && this.parent && this.parent.parameter(id));
		    };
		    State.prototype.toString = function () {
		        return this.fqn();
		    };
		    return State;
		}());
		exports.State = State;


	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module state */ /** */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var queue_1 = __webpack_require__(8);
		var coreservices_1 = __webpack_require__(6);
		var pathFactory_1 = __webpack_require__(20);
		var node_1 = __webpack_require__(21);
		var transitionService_1 = __webpack_require__(30);
		var rejectFactory_1 = __webpack_require__(10);
		var targetState_1 = __webpack_require__(14);
		var param_1 = __webpack_require__(22);
		var glob_1 = __webpack_require__(7);
		var common_2 = __webpack_require__(3);
		var common_3 = __webpack_require__(3);
		var resolveContext_1 = __webpack_require__(17);
		var StateService = (function () {
		    /** @hidden */
		    function StateService(router) {
		        this.router = router;
		        this.invalidCallbacks = [];
		        /** @hidden */
		        this._defaultErrorHandler = function $defaultErrorHandler($error$) {
		            if ($error$ instanceof Error && $error$.stack) {
		                console.error($error$);
		                console.error($error$.stack);
		            }
		            else if ($error$ instanceof rejectFactory_1.Rejection) {
		                console.error($error$.toString());
		                if ($error$.detail && $error$.detail.stack)
		                    console.error($error$.detail.stack);
		            }
		            else {
		                console.error($error$);
		            }
		        };
		        var getters = ['current', '$current', 'params', 'transition'];
		        var boundFns = Object.keys(StateService.prototype).filter(function (key) { return getters.indexOf(key) === -1; });
		        common_3.bindFunctions(StateService.prototype, this, this, boundFns);
		    }
		    Object.defineProperty(StateService.prototype, "transition", {
		        get: function () { return this.router.globals.transition; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(StateService.prototype, "params", {
		        get: function () { return this.router.globals.params; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(StateService.prototype, "current", {
		        get: function () { return this.router.globals.current; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(StateService.prototype, "$current", {
		        get: function () { return this.router.globals.$current; },
		        enumerable: true,
		        configurable: true
		    });
		    /**
		     * Handler for when [[transitionTo]] is called with an invalid state.
		     *
		     * Invokes the [[onInvalid]] callbacks, in natural order.
		     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.
		     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.
		     *
		     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.
		     */
		    StateService.prototype._handleInvalidTargetState = function (fromPath, toState) {
		        var _this = this;
		        var fromState = pathFactory_1.PathFactory.makeTargetState(fromPath);
		        var globals = this.router.globals;
		        var latestThing = function () { return globals.transitionHistory.peekTail(); };
		        var latest = latestThing();
		        var callbackQueue = new queue_1.Queue(this.invalidCallbacks.slice());
		        var injector = new resolveContext_1.ResolveContext(fromPath).injector();
		        var checkForRedirect = function (result) {
		            if (!(result instanceof targetState_1.TargetState)) {
		                return;
		            }
		            var target = result;
		            // Recreate the TargetState, in case the state is now defined.
		            target = _this.target(target.identifier(), target.params(), target.options());
		            if (!target.valid())
		                return rejectFactory_1.Rejection.invalid(target.error()).toPromise();
		            if (latestThing() !== latest)
		                return rejectFactory_1.Rejection.superseded().toPromise();
		            return _this.transitionTo(target.identifier(), target.params(), target.options());
		        };
		        function invokeNextCallback() {
		            var nextCallback = callbackQueue.dequeue();
		            if (nextCallback === undefined)
		                return rejectFactory_1.Rejection.invalid(toState.error()).toPromise();
		            var callbackResult = coreservices_1.services.$q.when(nextCallback(toState, fromState, injector));
		            return callbackResult.then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });
		        }
		        return invokeNextCallback();
		    };
		    /**
		     * Registers an Invalid State handler
		     *
		     * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]
		     * has been called with an invalid state reference parameter
		     *
		     * Example:
		     * ```js
		     * stateService.onInvalid(function(to, from, injector) {
		     *   if (to.name() === 'foo') {
		     *     let lazyLoader = injector.get('LazyLoadService');
		     *     return lazyLoader.load('foo')
		     *         .then(() => stateService.target('foo'));
		     *   }
		     * });
		     * ```
		     *
		     * @param {function} callback invoked when the toState is invalid
		     *   This function receives the (invalid) toState, the fromState, and an injector.
		     *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.
		     *   If one is returned, it is treated as a redirect.
		     *
		     * @returns a function which deregisters the callback
		     */
		    StateService.prototype.onInvalid = function (callback) {
		        this.invalidCallbacks.push(callback);
		        return function deregisterListener() {
		            common_1.removeFrom(this.invalidCallbacks)(callback);
		        }.bind(this);
		    };
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#reload
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,
		     * controllers reinstantiated, and events re-fired.
		     *
		     * @example
		     * <pre>
		     * let app angular.module('app', ['ui.router']);
		     *
		     * app.controller('ctrl', function ($scope, $state) {
		     *   $scope.reload = function(){
		     *     $state.reload();
		     *   }
		     * });
		     * </pre>
		     *
		     * `reload()` is just an alias for:
		     * <pre>
		     * $state.transitionTo($state.current, $stateParams, {
		     *   reload: true, inherit: false, notify: true
		     * });
		     * </pre>
		     *
		     * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.
		     * @example
		     * <pre>
		     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'
		     * //and current state is 'contacts.detail.item'
		     * let app angular.module('app', ['ui.router']);
		     *
		     * app.controller('ctrl', function ($scope, $state) {
		     *   $scope.reload = function(){
		     *     //will reload 'contact.detail' and nested 'contact.detail.item' states
		     *     $state.reload('contact.detail');
		     *   }
		     * });
		     * </pre>
		     *
		     * @returns {promise} A promise representing the state of the new transition. See
		     * {@link ui.router.state.$state#methods_go $state.go}.
		     */
		    StateService.prototype.reload = function (reloadState) {
		        return this.transitionTo(this.current, this.params, {
		            reload: predicates_1.isDefined(reloadState) ? reloadState : true,
		            inherit: false,
		            notify: false
		        });
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#go
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * Convenience method for transitioning to a new state. `$state.go` calls
		     * `$state.transitionTo` internally but automatically sets options to
		     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.
		     * This allows you to easily use an absolute or relative to path and specify
		     * only the parameters you'd like to update (while letting unspecified parameters
		     * inherit from the currently active ancestor states).
		     *
		     * @example
		     * <pre>
		     * let app = angular.module('app', ['ui.router']);
		     *
		     * app.controller('ctrl', function ($scope, $state) {
		     *   $scope.changeState = function () {
		     *     $state.go('contact.detail');
		     *   };
		     * });
		     * </pre>
		     * <img src='../ngdoc_assets/StateGoExamples.png'/>
		     *
		     * @param {string|object} to Absolute state name, state object, or relative state path. Some examples:
		     *
		     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
		     * - `$state.go('^')` - will go to a parent state
		     * - `$state.go('^.sibling')` - will go to a sibling state
		     * - `$state.go('.child.grandchild')` - will go to grandchild state
		     *
		     * @param {object=} params A map of the parameters that will be sent to the state,
		     * will populate $stateParams. Any parameters that are not specified will be inherited from currently
		     * defined parameters. This allows, for example, going to a sibling state that shares parameters
		     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
		     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
		     * will get you all current parameters, etc.
		     * @param {object=} options Options object. The options are:
		     *
		     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
		     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
		     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
		     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
		     *    defines which state to be relative from.
		     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
		     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
		     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
		     *    use this when you want to force a reload when *everything* is the same, including search params.
		     *
		     * @returns {promise} A promise representing the state of the new transition.
		     *
		     * Possible success values:
		     *
		     * - $state.current
		     *
		     * <br/>Possible rejection values:
		     *
		     * - 'transition superseded' - when a newer transition has been started after this one
		     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
		     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
		     *   when a `$stateNotFound` `event.retry` promise errors.
		     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
		     * - *resolve error* - when an error has occurred with a `resolve`
		     *
		     */
		    StateService.prototype.go = function (to, params, options) {
		        var defautGoOpts = { relative: this.$current, inherit: true };
		        var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);
		        return this.transitionTo(to, params, transOpts);
		    };
		    ;
		    /** Factory method for creating a TargetState */
		    StateService.prototype.target = function (identifier, params, options) {
		        if (options === void 0) { options = {}; }
		        // If we're reloading, find the state object to reload from
		        if (predicates_1.isObject(options.reload) && !options.reload.name)
		            throw new Error('Invalid reload state object');
		        var reg = this.router.stateRegistry;
		        options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);
		        if (options.reload && !options.reloadState)
		            throw new Error("No such reload state '" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + "'");
		        var stateDefinition = reg.matcher.find(identifier, options.relative);
		        return new targetState_1.TargetState(identifier, stateDefinition, params, options);
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#transitionTo
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
		     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
		     *
		     * @example
		     * <pre>
		     * let app = angular.module('app', ['ui.router']);
		     *
		     * app.controller('ctrl', function ($scope, $state) {
		     *   $scope.changeState = function () {
		     *     $state.transitionTo('contact.detail');
		     *   };
		     * });
		     * </pre>
		     *
		     * @param {string|object} to State name or state object.
		     * @param {object=} toParams A map of the parameters that will be sent to the state,
		     * will populate $stateParams.
		     * @param {object=} options Options object. The options are:
		     *
		     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
		     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
		     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
		     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),
		     *    defines which state to be relative from.
		     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
		     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
		     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
		     *    use this when you want to force a reload when *everything* is the same, including search params.
		     *
		     * @returns {promise} A promise representing the state of the new transition. See
		     * {@link ui.router.state.$state#methods_go $state.go}.
		     */
		    StateService.prototype.transitionTo = function (to, toParams, options) {
		        var _this = this;
		        if (toParams === void 0) { toParams = {}; }
		        if (options === void 0) { options = {}; }
		        var router = this.router;
		        var globals = router.globals;
		        var transHistory = globals.transitionHistory;
		        options = common_1.defaults(options, transitionService_1.defaultTransOpts);
		        options = common_1.extend(options, { current: transHistory.peekTail.bind(transHistory) });
		        var ref = this.target(to, toParams, options);
		        var latestSuccess = globals.successfulTransitions.peekTail();
		        var rootPath = function () { return [new node_1.PathNode(_this.router.stateRegistry.root())]; };
		        var currentPath = latestSuccess ? latestSuccess.treeChanges().to : rootPath();
		        if (!ref.exists())
		            return this._handleInvalidTargetState(currentPath, ref);
		        if (!ref.valid())
		            return common_1.silentRejection(ref.error());
		        /**
		         * Special handling for Ignored, Aborted, and Redirected transitions
		         *
		         * The semantics for the transition.run() promise and the StateService.transitionTo()
		         * promise differ. For instance, the run() promise may be rejected because it was
		         * IGNORED, but the transitionTo() promise is resolved because from the user perspective
		         * no error occurred.  Likewise, the transition.run() promise may be rejected because of
		         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.
		         */
		        var rejectedTransitionHandler = function (transition) { return function (error) {
		            if (error instanceof rejectFactory_1.Rejection) {
		                if (error.type === rejectFactory_1.RejectType.IGNORED) {
		                    // Consider ignored `Transition.run()` as a successful `transitionTo`
		                    router.urlRouter.update();
		                    return coreservices_1.services.$q.when(globals.current);
		                }
		                var detail = error.detail;
		                if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && detail instanceof targetState_1.TargetState) {
		                    // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully
		                    // by returning the promise for the new (redirect) `Transition.run()`.
		                    var redirect = transition.redirect(detail);
		                    return redirect.run().catch(rejectedTransitionHandler(redirect));
		                }
		                if (error.type === rejectFactory_1.RejectType.ABORTED) {
		                    router.urlRouter.update();
		                }
		            }
		            var errorHandler = _this.defaultErrorHandler();
		            errorHandler(error);
		            return coreservices_1.services.$q.reject(error);
		        }; };
		        var transition = this.router.transitionService.create(currentPath, ref);
		        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));
		        common_1.silenceUncaughtInPromise(transitionToPromise); // issue #2676
		        // Return a promise for the transition, which also has the transition object on it.
		        return common_1.extend(transitionToPromise, { transition: transition });
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#is
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
		     * but only checks for the full state name. If params is supplied then it will be
		     * tested for strict equality against the current active params object, so all params
		     * must match with none missing and no extras.
		     *
		     * @example
		     * <pre>
		     * $state.$current.name = 'contacts.details.item';
		     *
		     * // absolute name
		     * $state.is('contact.details.item'); // returns true
		     * $state.is(contactDetailItemStateObject); // returns true
		     *
		     * // relative name (. and ^), typically from a template
		     * // E.g. from the 'contacts.details' template
		     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
		     * </pre>
		     *
		     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
		     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
		     * to test against the current active state.
		     * @param {object=} options An options object.  The options are:
		     *
		     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
		     * test relative to `options.relative` state (or name).
		     *
		     * @returns {boolean} Returns true if it is the state.
		     */
		    StateService.prototype.is = function (stateOrName, params, options) {
		        options = common_1.defaults(options, { relative: this.$current });
		        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);
		        if (!predicates_1.isDefined(state))
		            return undefined;
		        if (this.$current !== state)
		            return false;
		        return predicates_1.isDefined(params) && params !== null ? param_1.Param.equals(state.parameters(), this.params, params) : true;
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#includes
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * A method to determine if the current active state is equal to or is the child of the
		     * state stateName. If any params are passed then they will be tested for a match as well.
		     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
		     *
		     * @example
		     * Partial and relative names
		     * <pre>
		     * $state.$current.name = 'contacts.details.item';
		     *
		     * // Using partial names
		     * $state.includes("contacts"); // returns true
		     * $state.includes("contacts.details"); // returns true
		     * $state.includes("contacts.details.item"); // returns true
		     * $state.includes("contacts.list"); // returns false
		     * $state.includes("about"); // returns false
		     *
		     * // Using relative names (. and ^), typically from a template
		     * // E.g. from the 'contacts.details' template
		     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
		     * </pre>
		     *
		     * Basic globbing patterns
		     * <pre>
		     * $state.$current.name = 'contacts.details.item.url';
		     *
		     * $state.includes("*.details.*.*"); // returns true
		     * $state.includes("*.details.**"); // returns true
		     * $state.includes("**.item.**"); // returns true
		     * $state.includes("*.details.item.url"); // returns true
		     * $state.includes("*.details.*.url"); // returns true
		     * $state.includes("*.details.*"); // returns false
		     * $state.includes("item.**"); // returns false
		     * </pre>
		     *
		     * @param {string|object} stateOrName A partial name, relative name, glob pattern,
		     * or state object to be searched for within the current state name.
		     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
		     * that you'd like to test against the current active state.
		     * @param {object=} options An options object.  The options are:
		     *
		     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
		     * .includes will test relative to `options.relative` state (or name).
		     *
		     * @returns {boolean} Returns true if it does include the state
		     */
		    StateService.prototype.includes = function (stateOrName, params, options) {
		        options = common_1.defaults(options, { relative: this.$current });
		        var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);
		        if (glob) {
		            if (!glob.matches(this.$current.name))
		                return false;
		            stateOrName = this.$current.name;
		        }
		        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;
		        if (!predicates_1.isDefined(state))
		            return undefined;
		        if (!predicates_1.isDefined(include[state.name]))
		            return false;
		        // @TODO Replace with Param.equals() ?
		        return params ? common_2.equalForKeys(param_1.Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#href
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * A url generation method that returns the compiled url for the given state populated with the given params.
		     *
		     * @example
		     * <pre>
		     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
		     * </pre>
		     *
		     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
		     * @param {object=} params An object of parameter values to fill the state's required parameters.
		     * @param {object=} options Options object. The options are:
		     *
		     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
		     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
		     *    ancestor with a valid url).
		     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
		     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
		     *    defines which state to be relative from.
		     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
		     *
		     * @returns {string} compiled state url
		     */
		    StateService.prototype.href = function (stateOrName, params, options) {
		        var defaultHrefOpts = {
		            lossy: true,
		            inherit: true,
		            absolute: false,
		            relative: this.$current
		        };
		        options = common_1.defaults(options, defaultHrefOpts);
		        params = params || {};
		        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);
		        if (!predicates_1.isDefined(state))
		            return null;
		        if (options.inherit)
		            params = this.params.$inherit(params, this.$current, state);
		        var nav = (state && options.lossy) ? state.navigable : state;
		        if (!nav || nav.url === undefined || nav.url === null) {
		            return null;
		        }
		        return this.router.urlRouter.href(nav.url, param_1.Param.values(state.parameters(), params), {
		            absolute: options.absolute
		        });
		    };
		    ;
		    /**
		     * Sets or gets the default [[transitionTo]] error handler.
		     *
		     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.
		     * This includes errors caused by resolves and transition hooks.
		     *
		     * Note:
		     * This handler does not receive certain Transition rejections.
		     * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].
		     *
		     * The built-in default error handler logs the error to the console.
		     *
		     * You can provide your own custom handler.
		     *
		     * @example
		     * ```js
		     *
		     * stateService.defaultErrorHandler(function() {
		     *   // Do not log transitionTo errors
		     * });
		     * ```
		     *
		     * @param handler a global error handler function
		     * @returns the current global error handler
		     */
		    StateService.prototype.defaultErrorHandler = function (handler) {
		        return this._defaultErrorHandler = handler || this._defaultErrorHandler;
		    };
		    StateService.prototype.get = function (stateOrName, base) {
		        var reg = this.router.stateRegistry;
		        if (arguments.length === 0)
		            return reg.get();
		        return reg.get(stateOrName, base || this.$current);
		    };
		    return StateService;
		}());
		exports.StateService = StateService;


	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module core */ /** */
		var stateParams_1 = __webpack_require__(45);
		var queue_1 = __webpack_require__(8);
		var common_1 = __webpack_require__(3);
		/**
		 * Global mutable state
		 */
		var Globals = (function () {
		    function Globals(transitionService) {
		        var _this = this;
		        this.params = new stateParams_1.StateParams();
		        this.transitionHistory = new queue_1.Queue([], 1);
		        this.successfulTransitions = new queue_1.Queue([], 1);
		        var beforeNewTransition = function ($transition$) {
		            _this.transition = $transition$;
		            _this.transitionHistory.enqueue($transition$);
		            var updateGlobalState = function () {
		                _this.successfulTransitions.enqueue($transition$);
		                _this.$current = $transition$.$to();
		                _this.current = _this.$current.self;
		                common_1.copy($transition$.params(), _this.params);
		            };
		            $transition$.onSuccess({}, updateGlobalState, { priority: 10000 });
		            var clearCurrentTransition = function () { if (_this.transition === $transition$)
		                _this.transition = null; };
		            $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);
		        };
		        transitionService.onBefore({}, beforeNewTransition);
		    }
		    return Globals;
		}());
		exports.Globals = Globals;


	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module params */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var StateParams = (function () {
		    function StateParams(params) {
		        if (params === void 0) { params = {}; }
		        common_1.extend(this, params);
		    }
		    /**
		     * Merges a set of parameters with all parameters inherited between the common parents of the
		     * current state and a given destination state.
		     *
		     * @param {Object} newParams The set of parameters which will be composited with inherited params.
		     * @param {Object} $current Internal definition of object representing the current state.
		     * @param {Object} $to Internal definition of object representing state to transition to.
		     */
		    StateParams.prototype.$inherit = function (newParams, $current, $to) {
		        var parents = common_1.ancestors($current, $to), parentParams, inherited = {}, inheritList = [];
		        for (var i in parents) {
		            if (!parents[i] || !parents[i].params)
		                continue;
		            parentParams = Object.keys(parents[i].params);
		            if (!parentParams.length)
		                continue;
		            for (var j in parentParams) {
		                if (inheritList.indexOf(parentParams[j]) >= 0)
		                    continue;
		                inheritList.push(parentParams[j]);
		                inherited[parentParams[j]] = this[parentParams[j]];
		            }
		        }
		        return common_1.extend({}, inherited, newParams);
		    };
		    ;
		    return StateParams;
		}());
		exports.StateParams = StateParams;


	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/**
		 * This module contains code for State Parameters.
		 *
		 * See [[ParamDeclaration]]
		 * @module params
		 * @preferred doc
		 */
		/** for typedoc */
		__export(__webpack_require__(22));
		__export(__webpack_require__(28));
		__export(__webpack_require__(45));
		__export(__webpack_require__(24));


	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module path */ /** for typedoc */
		__export(__webpack_require__(21));
		__export(__webpack_require__(20));


	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module resolve */ /** for typedoc */
		__export(__webpack_require__(18));
		__export(__webpack_require__(19));
		__export(__webpack_require__(17));


	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module state */ /** for typedoc */
		__export(__webpack_require__(40));
		__export(__webpack_require__(42));
		__export(__webpack_require__(39));
		__export(__webpack_require__(41));
		__export(__webpack_require__(38));
		__export(__webpack_require__(43));
		__export(__webpack_require__(14));


	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/**
		 * This module contains APIs related to a Transition.
		 *
		 * See [[Transition]], [[$transitions]]
		 *
		 * @module transition
		 * @preferred
		 */
		/** for typedoc */
		__export(__webpack_require__(16));
		__export(__webpack_require__(15));
		__export(__webpack_require__(10));
		__export(__webpack_require__(11));
		__export(__webpack_require__(13));
		__export(__webpack_require__(30));


	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module url */ /** for typedoc */
		__export(__webpack_require__(27));
		__export(__webpack_require__(23));
		__export(__webpack_require__(26));
		__export(__webpack_require__(29));


	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module view */ /** for typedoc */
		__export(__webpack_require__(37));


	/***/ },
	/* 53 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * # UI-Router for Angular 1
		 *
		 * - Provides an implementation for the [[CoreServices]] API, based on angular 1 services.
		 * - Also registers some services with the angular 1 injector.
		 * - Creates and bootstraps a new [[UIRouter]] object.  Ties it to the the angular 1 lifecycle.
		 *
		 * @module ng1
		 * @preferred
		 */
		"use strict";
		/** for typedoc */
		var router_1 = __webpack_require__(25);
		var coreservices_1 = __webpack_require__(6);
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var resolveService_1 = __webpack_require__(54);
		var trace_1 = __webpack_require__(12);
		var views_1 = __webpack_require__(55);
		var templateFactory_1 = __webpack_require__(56);
		var stateProvider_1 = __webpack_require__(58);
		var onEnterExitRetain_1 = __webpack_require__(59);
		var angular = __webpack_require__(57);
		/** @hidden */
		var app = angular.module("ui.router.angular1", []);
		/**
		 * @ngdoc overview
		 * @name ui.router.util
		 *
		 * @description
		 * # ui.router.util sub-module
		 *
		 * This module is a dependency of other sub-modules. Do not include this module as a dependency
		 * in your angular app (use {@link ui.router} module instead).
		 *
		 */
		angular.module('ui.router.util', ['ng', 'ui.router.init']);
		/**
		 * @ngdoc overview
		 * @name ui.router.router
		 *
		 * @requires ui.router.util
		 *
		 * @description
		 * # ui.router.router sub-module
		 *
		 * This module is a dependency of other sub-modules. Do not include this module as a dependency
		 * in your angular app (use {@link ui.router} module instead).
		 */
		angular.module('ui.router.router', ['ui.router.util']);
		/**
		 * @ngdoc overview
		 * @name ui.router.state
		 *
		 * @requires ui.router.router
		 * @requires ui.router.util
		 *
		 * @description
		 * # ui.router.state sub-module
		 *
		 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
		 * in your angular app (use {@link ui.router} module instead).
		 *
		 */
		angular.module('ui.router.state', ['ui.router.router', 'ui.router.util', 'ui.router.angular1']);
		/**
		 * @ngdoc overview
		 * @name ui.router
		 *
		 * @requires ui.router.state
		 *
		 * @description
		 * # ui.router
		 *
		 * ## The main module for ui.router
		 * There are several sub-modules included with the ui.router module, however only this module is needed
		 * as a dependency within your angular app. The other modules are for organization purposes.
		 *
		 * The modules are:
		 * * ui.router - the main "umbrella" module
		 * * ui.router.router -
		 *
		 * *You'll need to include **only** this module as the dependency within your angular app.*
		 *
		 * <pre>
		 * <!doctype html>
		 * <html ng-app="myApp">
		 * <head>
		 *   <script src="js/angular.js"></script>
		 *   <!-- Include the ui-router script -->
		 *   <script src="js/angular-ui-router.min.js"></script>
		 *   <script>
		 *     // ...and add 'ui.router' as a dependency
		 *     var myApp = angular.module('myApp', ['ui.router']);
		 *   </script>
		 * </head>
		 * <body>
		 * </body>
		 * </html>
		 * </pre>
		 */
		angular.module('ui.router', ['ui.router.init', 'ui.router.state', 'ui.router.angular1']);
		angular.module('ui.router.compat', ['ui.router']);
		/**
		 * Annotates a controller expression (may be a controller function(), a "controllername",
		 * or "controllername as name")
		 *
		 * - Temporarily decorates $injector.instantiate.
		 * - Invokes $controller() service
		 *   - Calls $injector.instantiate with controller constructor
		 * - Annotate constructor
		 * - Undecorate $injector
		 *
		 * returns an array of strings, which are the arguments of the controller expression
		 */
		function annotateController(controllerExpression) {
		    var $injector = coreservices_1.services.$injector;
		    var $controller = $injector.get("$controller");
		    var oldInstantiate = $injector.instantiate;
		    try {
		        var deps_1;
		        $injector.instantiate = function fakeInstantiate(constructorFunction) {
		            $injector.instantiate = oldInstantiate; // Un-decorate ASAP
		            deps_1 = $injector.annotate(constructorFunction);
		        };
		        $controller(controllerExpression, { $scope: {} });
		        return deps_1;
		    }
		    finally {
		        $injector.instantiate = oldInstantiate;
		    }
		}
		exports.annotateController = annotateController;
		var router = null;
		$uiRouter.$inject = ['$locationProvider'];
		/** This angular 1 provider instantiates a Router and exposes its services via the angular injector */
		function $uiRouter($locationProvider) {
		    // Create a new instance of the Router when the $uiRouterProvider is initialized
		    router = new router_1.UIRouter();
		    router.stateProvider = new stateProvider_1.StateProvider(router.stateRegistry, router.stateService);
		    // Apply ng1 specific StateBuilder code for `views`, `resolve`, and `onExit/Retain/Enter` properties
		    router.stateRegistry.decorator("views", views_1.ng1ViewsBuilder);
		    router.stateRegistry.decorator("onExit", onEnterExitRetain_1.getStateHookBuilder("onExit"));
		    router.stateRegistry.decorator("onRetain", onEnterExitRetain_1.getStateHookBuilder("onRetain"));
		    router.stateRegistry.decorator("onEnter", onEnterExitRetain_1.getStateHookBuilder("onEnter"));
		    router.viewService.viewConfigFactory('ng1', views_1.ng1ViewConfigFactory);
		    // Bind LocationConfig.hashPrefix to $locationProvider.hashPrefix
		    common_1.bindFunctions($locationProvider, coreservices_1.services.locationConfig, $locationProvider, ['hashPrefix']);
		    // Create a LocationService.onChange registry
		    var urlListeners = [];
		    coreservices_1.services.location.onChange = function (callback) {
		        urlListeners.push(callback);
		        return function () { return common_1.removeFrom(urlListeners)(callback); };
		    };
		    this.$get = $get;
		    $get.$inject = ['$location', '$browser', '$sniffer', '$rootScope', '$http', '$templateCache'];
		    function $get($location, $browser, $sniffer, $rootScope, $http, $templateCache) {
		        // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange
		        $rootScope.$on("$locationChangeSuccess", function (evt) { return urlListeners.forEach(function (fn) { return fn(evt); }); });
		        // Bind LocationConfig.html5Mode to $locationProvider.html5Mode and $sniffer.history
		        coreservices_1.services.locationConfig.html5Mode = function () {
		            var html5Mode = $locationProvider.html5Mode();
		            html5Mode = predicates_1.isObject(html5Mode) ? html5Mode.enabled : html5Mode;
		            return html5Mode && $sniffer.history;
		        };
		        coreservices_1.services.location.setUrl = function (newUrl, replace) {
		            if (replace === void 0) { replace = false; }
		            $location.url(newUrl);
		            if (replace)
		                $location.replace();
		        };
		        coreservices_1.services.template.get = function (url) {
		            return $http.get(url, { cache: $templateCache, headers: { Accept: 'text/html' } }).then(hof_1.prop("data"));
		        };
		        // Bind these LocationService functions to $location
		        common_1.bindFunctions($location, coreservices_1.services.location, $location, ["replace", "url", "path", "search", "hash"]);
		        // Bind these LocationConfig functions to $location
		        common_1.bindFunctions($location, coreservices_1.services.locationConfig, $location, ['port', 'protocol', 'host']);
		        // Bind these LocationConfig functions to $browser
		        common_1.bindFunctions($browser, coreservices_1.services.locationConfig, $browser, ['baseHref']);
		        return router;
		    }
		}
		// The 'ui.router' ng1 module depends on 'ui.router.init' module.
		angular.module('ui.router.init', []).provider("$uiRouter", $uiRouter);
		runBlock.$inject = ['$injector', '$q'];
		function runBlock($injector, $q) {
		    coreservices_1.services.$injector = $injector;
		    coreservices_1.services.$q = $q;
		}
		angular.module('ui.router.init').run(runBlock);
		// This effectively calls $get() to init when we enter runtime
		angular.module('ui.router.init').run(['$uiRouter', function ($uiRouter) { }]);
		// $urlMatcherFactory service and $urlMatcherFactoryProvider
		angular.module('ui.router.util').provider('$urlMatcherFactory', ['$uiRouterProvider', function () { return router.urlMatcherFactory; }]);
		angular.module('ui.router.util').run(['$urlMatcherFactory', function ($urlMatcherFactory) { }]);
		// $urlRouter service and $urlRouterProvider
		function getUrlRouterProvider() {
		    router.urlRouterProvider["$get"] = function () {
		        router.urlRouter.update(true);
		        if (!this.interceptDeferred)
		            router.urlRouter.listen();
		        return router.urlRouter;
		    };
		    return router.urlRouterProvider;
		}
		angular.module('ui.router.router').provider('$urlRouter', ['$uiRouterProvider', getUrlRouterProvider]);
		angular.module('ui.router.router').run(['$urlRouter', function ($urlRouter) { }]);
		// $state service and $stateProvider
		// $urlRouter service and $urlRouterProvider
		function getStateProvider() {
		    router.stateProvider["$get"] = function () {
		        // Autoflush once we are in runtime
		        router.stateRegistry.stateQueue.autoFlush(router.stateService);
		        return router.stateService;
		    };
		    return router.stateProvider;
		}
		angular.module('ui.router.state').provider('$state', ['$uiRouterProvider', getStateProvider]);
		angular.module('ui.router.state').run(['$state', function ($state) { }]);
		// $stateParams service
		angular.module('ui.router.state').factory('$stateParams', ['$uiRouter', function ($uiRouter) {
		        return $uiRouter.globals.params;
		    }]);
		// $transitions service and $transitionsProvider
		function getTransitionsProvider() {
		    router.transitionService["$get"] = function () { return router.transitionService; };
		    return router.transitionService;
		}
		angular.module('ui.router.state').provider('$transitions', ['$uiRouterProvider', getTransitionsProvider]);
		// $templateFactory service
		angular.module('ui.router.util').factory('$templateFactory', ['$uiRouter', function () { return new templateFactory_1.TemplateFactory(); }]);
		// The $view service
		angular.module('ui.router').factory('$view', function () { return router.viewService; });
		// The old $resolve service
		angular.module('ui.router').factory('$resolve', resolveService_1.resolveFactory);
		// $trace service
		angular.module("ui.router").service("$trace", function () { return trace_1.trace; });
		watchDigests.$inject = ['$rootScope'];
		function watchDigests($rootScope) {
		    $rootScope.$watch(function () { trace_1.trace.approximateDigests++; });
		}
		exports.watchDigests = watchDigests;
		angular.module("ui.router").run(watchDigests);
		exports.getLocals = function (ctx) {
		    var tokens = ctx.getTokens().filter(predicates_1.isString);
		    var tuples = tokens.map(function (key) { return [key, ctx.getResolvable(key).data]; });
		    return tuples.reduce(common_1.applyPairs, {});
		};
		/** Injectable services */
		/**
		 * An injectable service object which has the current state parameters
		 *
		 * This angular service (singleton object) holds the current state parameters.
		 * The values in `$stateParams` are not updated until *after* a [[Transition]] successfully completes.
		 *
		 * This object can be injected into other services.
		 *
		 * @example
		 * ```js
		 *
		 * SomeService.$inject = ['$http', '$stateParams'];
		 * function SomeService($http, $stateParams) {
		 *   return {
		 *     getUser: function() {
		 *       return $http.get('/api/users/' + $stateParams.username);
		 *     }
		 *   }
		 * };
		 * angular.service('SomeService', SomeService);
		 * ```
		 *
		 * ### Deprecation warning:
		 *
		 * When `$stateParams` is injected into transition hooks, resolves and view controllers, they receive a different
		 * object than this global service object.  In those cases, the injected object has the parameter values for the
		 * *pending* Transition.
		 *
		 * Because of these confusing details, this service is deprecated.
		 *
		 * @deprecated Instead of using `$stateParams, inject the current [[Transition]] as `$transition$` and use [[Transition.params]]
		 * ```js
		 * MyController.$inject = ['$transition$'];
		 * function MyController($transition$) {
		 *   var username = $transition$.params().username;
		 *   // .. do something with username
		 * }
		 * ```
		 */
		var $stateParams;
		/**
		 * An injectable service primarily used to register transition hooks
		 *
		 * This angular service exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.
		 *
		 * The same object is also exposed as [[$transitionsProvider]] for injection during angular config time.
		 */
		var $transitions;
		/**
		 * A config-time injectable provider primarily used to register transition hooks
		 *
		 * This angular provider exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.
		 *
		 * The same object is also exposed as [[$transitions]] for injection at runtime.
		 */
		var $transitionsProvider;
		/**
		 * An injectable service used to query for current state information.
		 *
		 * This angular service exposes the [[StateService]] singleton.
		 */
		var $state;
		/**
		 * A config-time injectable provider used to register states.
		 *
		 * This angular service exposes the [[StateProvider]] singleton.
		 */
		var $stateProvider;
		/**
		 * A config-time injectable provider used to manage the URL.
		 *
		 * This angular service exposes the [[UrlRouterProvider]] singleton.
		 */
		var $urlRouterProvider;
		/**
		 * An injectable service used to configure URL redirects.
		 *
		 * This angular service exposes the [[UrlRouter]] singleton.
		 */
		var $urlRouter;
		/**
		 * An injectable service used to configure the URL.
		 *
		 * This service is used to set url mapping options, and create [[UrlMatcher]] objects.
		 *
		 * This angular service exposes the [[UrlMatcherFactory]] singleton.
		 * The singleton is also exposed at config-time as the [[$urlMatcherFactoryProvider]].
		 */
		var $urlMatcherFactory;
		/**
		 * An injectable service used to configure the URL.
		 *
		 * This service is used to set url mapping options, and create [[UrlMatcher]] objects.
		 *
		 * This angular service exposes the [[UrlMatcherFactory]] singleton at config-time.
		 * The singleton is also exposed at runtime as the [[$urlMatcherFactory]].
		 */
		var $urlMatcherFactoryProvider;


	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module ng1 */ /** */
		var stateObject_1 = __webpack_require__(42);
		var node_1 = __webpack_require__(21);
		var resolveContext_1 = __webpack_require__(17);
		var common_1 = __webpack_require__(3);
		var stateBuilder_1 = __webpack_require__(40);
		/**
		 * Implementation of the legacy `$resolve` service for angular 1.
		 */
		var $resolve = {
		    /**
		     * Asynchronously injects a resolve block.
		     *
		     * This emulates most of the behavior of the ui-router 0.2.x $resolve.resolve() service API.
		     *
		     * Given an object `invocables`, where keys are strings and values are injectable functions,
		     * injects each function, and waits for the resulting promise to resolve.
		     * When all resulting promises are resolved, returns the results as an object.
		     *
		     * @example
		     * ```js
		     *
		     * let invocables = {
		     *   foo: [ '$http', ($http) =>
		     *            $http.get('/api/foo').then(resp => resp.data) ],
		     *   bar: [ 'foo', '$http', (foo, $http) =>
		     *            $http.get('/api/bar/' + foo.barId).then(resp => resp.data) ]
		     * }
		     * $resolve.resolve(invocables)
		     *     .then(results => console.log(results.foo, results.bar))
		     * // Logs foo and bar:
		     * // { id: 123, barId: 456, fooData: 'foo data' }
		     * // { id: 456, barData: 'bar data' }
		     * ```
		     *
		     * @param invocables an object which looks like an [[StateDefinition.resolve]] object; keys are resolve names and values are injectable functions
		     * @param locals key/value pre-resolved data (locals)
		     * @param parent a promise for a "parent resolve"
		     */
		    resolve: function (invocables, locals, parent) {
		        if (locals === void 0) { locals = {}; }
		        var parentNode = new node_1.PathNode(new stateObject_1.State({ params: {}, resolvables: [] }));
		        var node = new node_1.PathNode(new stateObject_1.State({ params: {}, resolvables: [] }));
		        var context = new resolveContext_1.ResolveContext([parentNode, node]);
		        context.addResolvables(stateBuilder_1.resolvablesBuilder({ resolve: invocables }), node.state);
		        var resolveData = function (parentLocals) {
		            var rewrap = function (_locals) { return stateBuilder_1.resolvablesBuilder({ resolve: common_1.mapObj(_locals, function (local) { return function () { return local; }; }) }); };
		            context.addResolvables(rewrap(parentLocals), parentNode.state);
		            context.addResolvables(rewrap(locals), node.state);
		            var tuples2ObjR = function (acc, tuple) {
		                acc[tuple.token] = tuple.value;
		                return acc;
		            };
		            return context.resolvePath().then(function (results) { return results.reduce(tuples2ObjR, {}); });
		        };
		        return parent ? parent.then(resolveData) : resolveData({});
		    }
		};
		/** @hidden */
		exports.resolveFactory = function () { return $resolve; };


	/***/ },
	/* 55 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		var common_1 = __webpack_require__(3);
		var strings_1 = __webpack_require__(9);
		var view_1 = __webpack_require__(37);
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		var trace_1 = __webpack_require__(12);
		var templateFactory_1 = __webpack_require__(56);
		var resolveContext_1 = __webpack_require__(17);
		var resolvable_1 = __webpack_require__(19);
		var angular = __webpack_require__(57);
		exports.ng1ViewConfigFactory = function (path, view) {
		    return [new Ng1ViewConfig(path, view)];
		};
		/**
		 * This is a [[StateBuilder.builder]] function for angular1 `views`.
		 *
		 * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder
		 * handles the `views` property with logic specific to angular-ui-router (ng1).
		 *
		 * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object
		 * and applies the state-level configuration to a view named `$default`.
		 */
		function ng1ViewsBuilder(state) {
		    var tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'], ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'], compKeys = ['component', 'bindings'], nonCompKeys = tplKeys.concat(ctrlKeys), allKeys = compKeys.concat(nonCompKeys);
		    var views = {}, viewsObject = state.views || { "$default": common_1.pick(state, allKeys) };
		    common_1.forEach(viewsObject, function (config, name) {
		        // Account for views: { "": { template... } }
		        name = name || "$default";
		        // Account for views: { header: "headerComponent" }
		        if (predicates_1.isString(config))
		            config = { component: config };
		        if (!Object.keys(config).length)
		            return;
		        // Configure this view for routing to an angular 1.5+ style .component (or any directive, really)
		        if (config.component) {
		            if (nonCompKeys.map(function (key) { return predicates_1.isDefined(config[key]); }).reduce(common_1.anyTrueR, false)) {
		                throw new Error("Cannot combine: " + compKeys.join("|") + " with: " + nonCompKeys.join("|") + " in stateview: 'name@" + state.name + "'");
		            }
		            // Dynamically build a template like "<component-name input1='::$resolve.foo'></component-name>"
		            config.templateProvider = ['$injector', function ($injector) {
		                    var resolveFor = function (key) {
		                        return config.bindings && config.bindings[key] || key;
		                    };
		                    var prefix = angular.version.minor >= 3 ? "::" : "";
		                    var attributeTpl = function (input) {
		                        var attrName = strings_1.kebobString(input.name);
		                        var resolveName = resolveFor(input.name);
		                        if (input.type === '@')
		                            return attrName + "='{{" + prefix + "$resolve." + resolveName + "}}'";
		                        return attrName + "='" + prefix + "$resolve." + resolveName + "'";
		                    };
		                    var attrs = getComponentInputs($injector, config.component).map(attributeTpl).join(" ");
		                    var kebobName = strings_1.kebobString(config.component);
		                    return "<" + kebobName + " " + attrs + "></" + kebobName + ">";
		                }];
		        }
		        config.resolveAs = config.resolveAs || '$resolve';
		        config.$type = "ng1";
		        config.$context = state;
		        config.$name = name;
		        var normalized = view_1.ViewService.normalizeUIViewTarget(config.$context, config.$name);
		        config.$uiViewName = normalized.uiViewName;
		        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;
		        views[name] = config;
		    });
		    return views;
		}
		exports.ng1ViewsBuilder = ng1ViewsBuilder;
		// for ng 1.2 style, process the scope: { input: "=foo" }
		// for ng 1.3 through ng 1.5, process the component's bindToController: { input: "=foo" } object
		var scopeBindings = function (bindingsObj) { return Object.keys(bindingsObj || {})
		    .map(function (key) { return [key, /^([=<@])[?]?(.*)/.exec(bindingsObj[key])]; })
		    .filter(function (tuple) { return predicates_1.isDefined(tuple) && predicates_1.isDefined(tuple[1]); })
		    .map(function (tuple) { return ({ name: tuple[1][2] || tuple[0], type: tuple[1][1] }); }); };
		// Given a directive definition, find its object input attributes
		// Use different properties, depending on the type of directive (component, bindToController, normal)
		var getBindings = function (def) {
		    if (predicates_1.isObject(def.bindToController))
		        return scopeBindings(def.bindToController);
		    return scopeBindings(def.scope);
		};
		// Gets all the directive(s)' inputs ('@', '=', and '<')
		function getComponentInputs($injector, name) {
		    var cmpDefs = $injector.get(name + "Directive"); // could be multiple
		    if (!cmpDefs || !cmpDefs.length)
		        throw new Error("Unable to find component named '" + name + "'");
		    return cmpDefs.map(getBindings).reduce(common_1.unnestR, []);
		}
		var id = 0;
		var Ng1ViewConfig = (function () {
		    function Ng1ViewConfig(path, viewDecl) {
		        this.path = path;
		        this.viewDecl = viewDecl;
		        this.$id = id++;
		        this.loaded = false;
		    }
		    Ng1ViewConfig.prototype.load = function () {
		        var _this = this;
		        var $q = coreservices_1.services.$q;
		        if (!this.hasTemplate())
		            throw new Error("No template configuration specified for '" + this.viewDecl.$uiViewName + "@" + this.viewDecl.$uiViewContextAnchor + "'");
		        var context = new resolveContext_1.ResolveContext(this.path);
		        var params = this.path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {});
		        var promises = {
		            template: $q.when(this.getTemplate(params, new templateFactory_1.TemplateFactory(), context)),
		            controller: $q.when(this.getController(context))
		        };
		        return $q.all(promises).then(function (results) {
		            trace_1.trace.traceViewServiceEvent("Loaded", _this);
		            _this.controller = results.controller;
		            _this.template = results.template;
		            return _this;
		        });
		    };
		    /**
		     * Checks a view configuration to ensure that it specifies a template.
		     *
		     * @return {boolean} Returns `true` if the configuration contains a valid template, otherwise `false`.
		     */
		    Ng1ViewConfig.prototype.hasTemplate = function () {
		        return !!(this.viewDecl.template || this.viewDecl.templateUrl || this.viewDecl.templateProvider);
		    };
		    Ng1ViewConfig.prototype.getTemplate = function (params, $factory, context) {
		        return $factory.fromConfig(this.viewDecl, params, context);
		    };
		    /**
		     * Gets the controller for a view configuration.
		     *
		     * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.
		     */
		    Ng1ViewConfig.prototype.getController = function (context) {
		        var provider = this.viewDecl.controllerProvider;
		        if (!predicates_1.isInjectable(provider))
		            return this.viewDecl.controller;
		        var deps = coreservices_1.services.$injector.annotate(provider);
		        var providerFn = predicates_1.isArray(provider) ? common_1.tail(provider) : provider;
		        var resolvable = new resolvable_1.Resolvable("", providerFn, deps);
		        return resolvable.get(context);
		    };
		    return Ng1ViewConfig;
		}());
		exports.Ng1ViewConfig = Ng1ViewConfig;


	/***/ },
	/* 56 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module view */ /** for typedoc */
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		var common_1 = __webpack_require__(3);
		var resolvable_1 = __webpack_require__(19);
		/**
		 * Service which manages loading of templates from a ViewConfig.
		 */
		var TemplateFactory = (function () {
		    function TemplateFactory() {
		    }
		    /**
		     * Creates a template from a configuration object.
		     *
		     * @param config Configuration object for which to load a template.
		     * The following properties are search in the specified order, and the first one
		     * that is defined is used to create the template:
		     *
		     * @param params  Parameters to pass to the template function.
		     * @param context The resolve context associated with the template's view
		     *
		     * @return {string|object}  The template html as a string, or a promise for
		     * that string,or `null` if no template is configured.
		     */
		    TemplateFactory.prototype.fromConfig = function (config, params, context) {
		        return (predicates_1.isDefined(config.template) ? this.fromString(config.template, params) :
		            predicates_1.isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
		                predicates_1.isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, context) :
		                    null);
		    };
		    ;
		    /**
		     * Creates a template from a string or a function returning a string.
		     *
		     * @param template html template as a string or function that returns an html template as a string.
		     * @param params Parameters to pass to the template function.
		     *
		     * @return {string|object} The template html as a string, or a promise for that
		     * string.
		     */
		    TemplateFactory.prototype.fromString = function (template, params) {
		        return predicates_1.isFunction(template) ? template(params) : template;
		    };
		    ;
		    /**
		     * Loads a template from the a URL via `$http` and `$templateCache`.
		     *
		     * @param {string|Function} url url of the template to load, or a function
		     * that returns a url.
		     * @param {Object} params Parameters to pass to the url function.
		     * @return {string|Promise.<string>} The template html as a string, or a promise
		     * for that string.
		     */
		    TemplateFactory.prototype.fromUrl = function (url, params) {
		        if (predicates_1.isFunction(url))
		            url = url(params);
		        if (url == null)
		            return null;
		        return coreservices_1.services.template.get(url);
		    };
		    ;
		    /**
		     * Creates a template by invoking an injectable provider function.
		     *
		     * @param provider Function to invoke via `locals`
		     * @param {Function} injectFn a function used to invoke the template provider
		     * @return {string|Promise.<string>} The template html as a string, or a promise
		     * for that string.
		     */
		    TemplateFactory.prototype.fromProvider = function (provider, params, context) {
		        var deps = coreservices_1.services.$injector.annotate(provider);
		        var providerFn = predicates_1.isArray(provider) ? common_1.tail(provider) : provider;
		        var resolvable = new resolvable_1.Resolvable("", providerFn, deps);
		        return resolvable.get(context);
		    };
		    ;
		    return TemplateFactory;
		}());
		exports.TemplateFactory = TemplateFactory;


	/***/ },
	/* 57 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_57__;

	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module ng1 */ /** for typedoc */
		var predicates_1 = __webpack_require__(4);
		var common_1 = __webpack_require__(3);
		/**
		 * @ngdoc object
		 * @name ui.router.state.$stateProvider
		 *
		 * @requires ui.router.router.$urlRouterProvider
		 * @requires ui.router.util.$urlMatcherFactoryProvider
		 *
		 * @description
		 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
		 * on state.
		 *
		 * A state corresponds to a "place" in the application in terms of the overall UI and
		 * navigation. A state describes (via the controller / template / view properties) what
		 * the UI looks like and does at that place.
		 *
		 * States often have things in common, and the primary way of factoring out these
		 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
		 * nested states.
		 *
		 * The `$stateProvider` provides interfaces to declare these states for your app.
		 */
		var StateProvider = (function () {
		    function StateProvider(stateRegistry, stateService) {
		        this.stateRegistry = stateRegistry;
		        this.stateService = stateService;
		        common_1.bindFunctions(StateProvider.prototype, this, this);
		    }
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$stateProvider#decorator
		     * @methodOf ui.router.state.$stateProvider
		     *
		     * @description
		     * Allows you to extend (carefully) or override (at your own peril) the
		     * `stateBuilder` object used internally by `$stateProvider`. This can be used
		     * to add custom functionality to ui-router, for example inferring templateUrl
		     * based on the state name.
		     *
		     * When passing only a name, it returns the current (original or decorated) builder
		     * function that matches `name`.
		     *
		     * The builder functions that can be decorated are listed below. Though not all
		     * necessarily have a good use case for decoration, that is up to you to decide.
		     *
		     * In addition, users can attach custom decorators, which will generate new
		     * properties within the state's internal definition. There is currently no clear
		     * use-case for this beyond accessing internal states (i.e. $state.$current),
		     * however, expect this to become increasingly relevant as we introduce additional
		     * meta-programming features.
		     *
		     * **Warning**: Decorators should not be interdependent because the order of
		     * execution of the builder functions in non-deterministic. Builder functions
		     * should only be dependent on the state definition object and super function.
		     *
		     *
		     * Existing builder functions and current return values:
		     *
		     * - **parent** `{object}` - returns the parent state object.
		     * - **data** `{object}` - returns state data, including any inherited data that is not
		     *   overridden by own values (if any).
		     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
		     *   or `null`.
		     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is
		     *   navigable).
		     * - **params** `{object}` - returns an array of state params that are ensured to
		     *   be a super-set of parent's params.
		     * - **views** `{object}` - returns a views object where each key is an absolute view
		     *   name (i.e. "viewName@stateName") and each value is the config object
		     *   (template, controller) for the view. Even when you don't use the views object
		     *   explicitly on a state config, one is still created for you internally.
		     *   So by decorating this builder function you have access to decorating template
		     *   and controller properties.
		     * - **ownParams** `{object}` - returns an array of params that belong to the state,
		     *   not including any params defined by ancestor states.
		     * - **path** `{string}` - returns the full path from the root down to this state.
		     *   Needed for state activation.
		     * - **includes** `{object}` - returns an object that includes every state that
		     *   would pass a `$state.includes()` test.
		     *
		     * @example
		     * <pre>
		     * // Override the internal 'views' builder with a function that takes the state
		     * // definition, and a reference to the internal function being overridden:
		     * $stateProvider.decorator('views', function (state, parent) {
		     *   let result = {},
		     *       views = parent(state);
		     *
		     *   angular.forEach(views, function (config, name) {
		     *     let autoName = (state.name + '.' + name).replace('.', '/');
		     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
		     *     result[name] = config;
		     *   });
		     *   return result;
		     * });
		     *
		     * $stateProvider.state('home', {
		     *   views: {
		     *     'contact.list': { controller: 'ListController' },
		     *     'contact.item': { controller: 'ItemController' }
		     *   }
		     * });
		     *
		     * // ...
		     *
		     * $state.go('home');
		     * // Auto-populates list and item views with /partials/home/contact/list.html,
		     * // and /partials/home/contact/item.html, respectively.
		     * </pre>
		     *
		     * @param {string} name The name of the builder function to decorate.
		     * @param {object} func A function that is responsible for decorating the original
		     * builder function. The function receives two parameters:
		     *
		     *   - `{object}` - state - The state config object.
		     *   - `{object}` - super - The original builder function.
		     *
		     * @return {object} $stateProvider - $stateProvider instance
		     */
		    StateProvider.prototype.decorator = function (name, func) {
		        return this.stateRegistry.decorator(name, func) || this;
		    };
		    StateProvider.prototype.state = function (name, definition) {
		        if (predicates_1.isObject(name)) {
		            definition = name;
		        }
		        else {
		            definition.name = name;
		        }
		        this.stateRegistry.register(definition);
		        return this;
		    };
		    /**
		     * Registers an invalid state handler
		     *
		     * This is a passthrough to [[StateService.onInvalid]] for ng1.
		     */
		    StateProvider.prototype.onInvalid = function (callback) {
		        return this.stateService.onInvalid(callback);
		    };
		    return StateProvider;
		}());
		exports.StateProvider = StateProvider;


	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		var coreservices_1 = __webpack_require__(6);
		var services_1 = __webpack_require__(53);
		var resolveContext_1 = __webpack_require__(17);
		var common_1 = __webpack_require__(3);
		/**
		 * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,
		 * `onRetain` callback hooks on a [[Ng1StateDeclaration]].
		 *
		 * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder
		 * ensures that those hooks are injectable for angular-ui-router (ng1).
		 */
		exports.getStateHookBuilder = function (hookName) {
		    return function stateHookBuilder(state, parentFn) {
		        var hook = state[hookName];
		        function decoratedNg1Hook(trans, state) {
		            var resolveContext = new resolveContext_1.ResolveContext(trans.treeChanges().to);
		            return coreservices_1.services.$injector.invoke(hook, this, common_1.extend({ $state$: state }, services_1.getLocals(resolveContext)));
		        }
		        return hook ? decoratedNg1Hook : undefined;
		    };
		};


	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/**
		 * These are the UI-Router angular 1 directives.
		 *
		 * These directives are used in templates to create viewports and navigate to states
		 *
		 * @preferred @module ng1_directives
		 */ /** for typedoc */
		var angular = __webpack_require__(57);
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		/** @hidden */
		function parseStateRef(ref, current) {
		    var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
		    if (preparsed)
		        ref = current + '(' + preparsed[1] + ')';
		    parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
		    if (!parsed || parsed.length !== 4)
		        throw new Error("Invalid state ref '" + ref + "'");
		    return { state: parsed[1], paramExpr: parsed[3] || null };
		}
		/** @hidden */
		function stateContext(el) {
		    var $uiView = el.parent().inheritedData('$uiView');
		    var path = hof_1.parse('$cfg.path')($uiView);
		    return path ? common_1.tail(path).state.name : undefined;
		}
		/** @hidden */
		function getTypeInfo(el) {
		    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
		    var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';
		    var isForm = el[0].nodeName === "FORM";
		    return {
		        attr: isForm ? "action" : (isSvg ? 'xlink:href' : 'href'),
		        isAnchor: el.prop("tagName").toUpperCase() === "A",
		        clickable: !isForm
		    };
		}
		/** @hidden */
		function clickHook(el, $state, $timeout, type, current) {
		    return function (e) {
		        var button = e.which || e.button, target = current();
		        if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {
		            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
		            var transition = $timeout(function () {
		                $state.go(target.state, target.params, target.options);
		            });
		            e.preventDefault();
		            // if the state has no URL, ignore one preventDefault from the <a> directive.
		            var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;
		            e.preventDefault = function () {
		                if (ignorePreventDefaultCount-- <= 0)
		                    $timeout.cancel(transition);
		            };
		        }
		    };
		}
		/** @hidden */
		function defaultOpts(el, $state) {
		    return {
		        relative: stateContext(el) || $state.$current,
		        inherit: true,
		        source: "sref"
		    };
		}
		/**
		 * `ui-sref`: A directive for linking to a state
		 *
		 * A directive that binds a link (`<a>` tag) to a state.
		 * If the state has an associated URL, the directive will automatically generate and
		 * update the `href` attribute via the [[StateService.href]]  method.
		 * Clicking the link will trigger a state transition with optional parameters.
		 *
		 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
		 * handled natively by the browser.
		 *
		 * You can also use relative state paths within ui-sref, just like the relative
		 * paths passed to `$state.go()`.
		 * You just need to be aware that the path is relative to the state that the link lives in.
		 * In other words, the state that created the view containing the link.
		 *
		 * You can specify options to pass to [[StateService.go]] using the `ui-sref-opts` attribute.
		 * Options are restricted to `location`, `inherit`, and `reload`.
		 *
		 * Here's an example of how you'd use ui-sref and how it would compile.
		 * If you have the following template:
		 *
		 * @example
		 * ```html
		 *
		 * <pre>
		 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
		 *
		 * <ul>
		 *     <li ng-repeat="contact in contacts">
		 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
		 *     </li>
		 * </ul>
		 * </pre>
		 * ```
		 *
		 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
		 *
		 * ```html
		 *
		 * <pre>
		 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
		 *
		 * <ul>
		 *     <li ng-repeat="contact in contacts">
		 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
		 *     </li>
		 *     <li ng-repeat="contact in contacts">
		 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
		 *     </li>
		 *     <li ng-repeat="contact in contacts">
		 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
		 *     </li>
		 * </ul>
		 *
		 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
		 * </pre>
		 * ```
		 *
		 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
		 * @param {Object} ui-sref-opts options to pass to [[StateService.go]]
		 */
		var uiSref = ['$state', '$timeout',
		    function $StateRefDirective($state, $timeout) {
		        return {
		            restrict: 'A',
		            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
		            link: function (scope, element, attrs, uiSrefActive) {
		                var ref = parseStateRef(attrs.uiSref, $state.current.name);
		                var def = { state: ref.state, href: null, params: null, options: null };
		                var type = getTypeInfo(element);
		                var active = uiSrefActive[1] || uiSrefActive[0];
		                var unlinkInfoFn = null;
		                var hookFn;
		                def.options = common_1.extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});
		                var update = function (val) {
		                    if (val)
		                        def.params = angular.copy(val);
		                    def.href = $state.href(ref.state, def.params, def.options);
		                    if (unlinkInfoFn)
		                        unlinkInfoFn();
		                    if (active)
		                        unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);
		                    if (def.href !== null)
		                        attrs.$set(type.attr, def.href);
		                };
		                if (ref.paramExpr) {
		                    scope.$watch(ref.paramExpr, function (val) { if (val !== def.params)
		                        update(val); }, true);
		                    def.params = angular.copy(scope.$eval(ref.paramExpr));
		                }
		                update();
		                if (!type.clickable)
		                    return;
		                hookFn = clickHook(element, $state, $timeout, type, function () { return def; });
		                element.on("click", hookFn);
		                scope.$on('$destroy', function () {
		                    element.off("click", hookFn);
		                });
		            }
		        };
		    }];
		/**
		 * `ui-state`: A dynamic version of `ui-sref`
		 *
		 * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,
		 * params and override options.
		 *
		 * @example
		 * ```html
		 *
		 * <li ng-repeat="nav in navlinks">
		 *   <a ui-state="nav.statename">{{nav.description}}</a>
		 * </li>
		 *
		 * @param {string} ui-state 'stateName' can be any valid absolute or relative state
		 * @param {Object} ui-state-params params to pass to [[StateService.href]]
		 * @param {Object} ui-state-opts options to pass to [[StateService.go]]
		 */
		var uiState = ['$state', '$timeout',
		    function $StateRefDynamicDirective($state, $timeout) {
		        return {
		            restrict: 'A',
		            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
		            link: function (scope, element, attrs, uiSrefActive) {
		                var type = getTypeInfo(element);
		                var active = uiSrefActive[1] || uiSrefActive[0];
		                var group = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];
		                var watch = '[' + group.map(function (val) { return val || 'null'; }).join(', ') + ']';
		                var def = { state: null, params: null, options: null, href: null };
		                var unlinkInfoFn = null;
		                var hookFn;
		                function runStateRefLink(group) {
		                    def.state = group[0];
		                    def.params = group[1];
		                    def.options = group[2];
		                    def.href = $state.href(def.state, def.params, def.options);
		                    if (unlinkInfoFn)
		                        unlinkInfoFn();
		                    if (active)
		                        unlinkInfoFn = active.$$addStateInfo(def.state, def.params);
		                    if (def.href)
		                        attrs.$set(type.attr, def.href);
		                }
		                scope.$watch(watch, runStateRefLink, true);
		                runStateRefLink(scope.$eval(watch));
		                if (!type.clickable)
		                    return;
		                hookFn = clickHook(element, $state, $timeout, type, function () { return def; });
		                element.on("click", hookFn);
		                scope.$on('$destroy', function () {
		                    element.off("click", hookFn);
		                });
		            }
		        };
		    }];
		/**
		 * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active
		 *
		 * A directive working alongside ui-sref to add classes to an element when the
		 * related ui-sref directive's state is active, and removing them when it is inactive.
		 * The primary use-case is to simplify the special appearance of navigation menus
		 * relying on `ui-sref`, by having the "active" state's menu button appear different,
		 * distinguishing it from the inactive menu items.
		 *
		 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
		 * ui-sref-active found at the same level or above the ui-sref will be used.
		 *
		 * Will activate when the ui-sref's target state or any child state is active. If you
		 * need to activate only when the ui-sref target state is active and *not* any of
		 * it's children, then you will use ui-sref-active-eq
		 *
		 * Given the following template:
		 * @example
		 * ```html
		 *
		 * <pre>
		 * <ul>
		 *   <li ui-sref-active="active" class="item">
		 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
		 *   </li>
		 * </ul>
		 * </pre>
		 * ```
		 *
		 *
		 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
		 * the resulting HTML will appear as (note the 'active' class):
		 *
		 * ```html
		 *
		 * <pre>
		 * <ul>
		 *   <li ui-sref-active="active" class="item active">
		 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
		 *   </li>
		 * </ul>
		 * </pre>
		 * ```
		 *
		 * The class name is interpolated **once** during the directives link time (any further changes to the
		 * interpolated value are ignored).
		 *
		 * Multiple classes may be specified in a space-separated format:
		 *
		 * ```html
		 * <pre>
		 * <ul>
		 *   <li ui-sref-active='class1 class2 class3'>
		 *     <a ui-sref="app.user">link</a>
		 *   </li>
		 * </ul>
		 * </pre>
		 * ```
		 *
		 * It is also possible to pass ui-sref-active an expression that evaluates
		 * to an object hash, whose keys represent active class names and whose
		 * values represent the respective state names/globs.
		 * ui-sref-active will match if the current active state **includes** any of
		 * the specified state names/globs, even the abstract ones.
		 *
		 * Given the following template, with "admin" being an abstract state:
		 * @example
		 * ```html
		 *
		 * <pre>
		 * <div ui-sref-active="{'active': 'admin.*'}">
		 *   <a ui-sref-active="active" ui-sref="admin.roles">Roles</a>
		 * </div>
		 * </pre>
		 * ```
		 *
		 * When the current state is "admin.roles" the "active" class will be applied
		 * to both the <div> and <a> elements. It is important to note that the state
		 * names/globs passed to ui-sref-active shadow the state provided by ui-sref.
		 */
		var uiSrefActive = ['$state', '$stateParams', '$interpolate', '$transitions', '$uiRouter',
		    function $StateRefActiveDirective($state, $stateParams, $interpolate, $transitions, $uiRouter) {
		        return {
		            restrict: "A",
		            controller: ['$scope', '$element', '$attrs', '$timeout',
		                function ($scope, $element, $attrs, $timeout) {
		                    var states = [], activeClasses = {}, activeEqClass, uiSrefActive;
		                    // There probably isn't much point in $observing this
		                    // uiSrefActive and uiSrefActiveEq share the same directive object with some
		                    // slight difference in logic routing
		                    activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);
		                    try {
		                        uiSrefActive = $scope.$eval($attrs.uiSrefActive);
		                    }
		                    catch (e) {
		                    }
		                    uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);
		                    if (predicates_1.isObject(uiSrefActive)) {
		                        common_1.forEach(uiSrefActive, function (stateOrName, activeClass) {
		                            if (predicates_1.isString(stateOrName)) {
		                                var ref = parseStateRef(stateOrName, $state.current.name);
		                                addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
		                            }
		                        });
		                    }
		                    // Allow uiSref to communicate with uiSrefActive[Equals]
		                    this.$$addStateInfo = function (newState, newParams) {
		                        // we already got an explicit state provided by ui-sref-active, so we
		                        // shadow the one that comes from ui-sref
		                        if (predicates_1.isObject(uiSrefActive) && states.length > 0) {
		                            return;
		                        }
		                        var deregister = addState(newState, newParams, uiSrefActive);
		                        update();
		                        return deregister;
		                    };
		                    function updateAfterTransition(trans) { trans.promise.then(update); }
		                    $scope.$on('$stateChangeSuccess', update);
		                    $scope.$on('$destroy', $transitions.onStart({}, updateAfterTransition));
		                    if ($uiRouter.globals.transition) {
		                        updateAfterTransition($uiRouter.globals.transition);
		                    }
		                    function addState(stateName, stateParams, activeClass) {
		                        var state = $state.get(stateName, stateContext($element));
		                        var stateHash = createStateHash(stateName, stateParams);
		                        var stateInfo = {
		                            state: state || { name: stateName },
		                            params: stateParams,
		                            hash: stateHash
		                        };
		                        states.push(stateInfo);
		                        activeClasses[stateHash] = activeClass;
		                        return function removeState() {
		                            var idx = states.indexOf(stateInfo);
		                            if (idx !== -1)
		                                states.splice(idx, 1);
		                        };
		                    }
		                    /**
		                     * @param {string} state
		                     * @param {Object|string} [params]
		                     * @return {string}
		                     */
		                    function createStateHash(state, params) {
		                        if (!predicates_1.isString(state)) {
		                            throw new Error('state should be a string');
		                        }
		                        if (predicates_1.isObject(params)) {
		                            return state + common_1.toJson(params);
		                        }
		                        params = $scope.$eval(params);
		                        if (predicates_1.isObject(params)) {
		                            return state + common_1.toJson(params);
		                        }
		                        return state;
		                    }
		                    // Update route state
		                    function update() {
		                        for (var i = 0; i < states.length; i++) {
		                            if (anyMatch(states[i].state, states[i].params)) {
		                                addClass($element, activeClasses[states[i].hash]);
		                            }
		                            else {
		                                removeClass($element, activeClasses[states[i].hash]);
		                            }
		                            if (exactMatch(states[i].state, states[i].params)) {
		                                addClass($element, activeEqClass);
		                            }
		                            else {
		                                removeClass($element, activeEqClass);
		                            }
		                        }
		                    }
		                    function addClass(el, className) { $timeout(function () { el.addClass(className); }); }
		                    function removeClass(el, className) { el.removeClass(className); }
		                    function anyMatch(state, params) { return $state.includes(state.name, params); }
		                    function exactMatch(state, params) { return $state.is(state.name, params); }
		                    update();
		                }]
		        };
		    }];
		angular.module('ui.router.state')
		    .directive('uiSref', uiSref)
		    .directive('uiSrefActive', uiSrefActive)
		    .directive('uiSrefActiveEq', uiSrefActive)
		    .directive('uiState', uiState);


	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {

		/** @module state */ /** for typedoc */
		"use strict";
		var angular = __webpack_require__(57);
		/**
		 * @ngdoc filter
		 * @name ui.router.state.filter:isState
		 *
		 * @requires ui.router.state.$state
		 *
		 * @description
		 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
		 */
		$IsStateFilter.$inject = ['$state'];
		function $IsStateFilter($state) {
		    var isFilter = function (state, params, options) {
		        return $state.is(state, params, options);
		    };
		    isFilter.$stateful = true;
		    return isFilter;
		}
		exports.$IsStateFilter = $IsStateFilter;
		/**
		 * @ngdoc filter
		 * @name ui.router.state.filter:includedByState
		 *
		 * @requires ui.router.state.$state
		 *
		 * @description
		 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
		 */
		$IncludedByStateFilter.$inject = ['$state'];
		function $IncludedByStateFilter($state) {
		    var includesFilter = function (state, params, options) {
		        return $state.includes(state, params, options);
		    };
		    includesFilter.$stateful = true;
		    return includesFilter;
		}
		exports.$IncludedByStateFilter = $IncludedByStateFilter;
		angular.module('ui.router.state')
		    .filter('isState', $IsStateFilter)
		    .filter('includedByState', $IncludedByStateFilter);


	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {

		/** @module ng1_directives */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var trace_1 = __webpack_require__(12);
		var views_1 = __webpack_require__(55);
		var hof_1 = __webpack_require__(5);
		var resolveContext_1 = __webpack_require__(17);
		var strings_1 = __webpack_require__(9);
		var services_1 = __webpack_require__(53);
		var angular = __webpack_require__(57);
		/**
		 * `ui-view`: A viewport directive which is filled in by a view from the active state.
		 *
		 * @param {string=} name A view name. The name should be unique amongst the other views in the
		 * same state. You can have views of the same name that live in different states.
		 *
		 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
		 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
		 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
		 * scroll ui-view elements into view when they are populated during a state activation.
		 *
		 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
		 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
		 *
		 * @param {string=} onload Expression to evaluate whenever the view updates.
		 *
		 * A view can be unnamed or named.
		 * @example
		 * ```html
		 *
		 * <!-- Unnamed -->
		 * <div ui-view></div>
		 *
		 * <!-- Named -->
		 * <div ui-view="viewName"></div>
		 * ```
		 *
		 * You can only have one unnamed view within any template (or root html). If you are only using a
		 * single view and it is unnamed then you can populate it like so:
		 * ```
		 *
		 * <div ui-view></div>
		 * $stateProvider.state("home", {
		 *   template: "<h1>HELLO!</h1>"
		 * })
		 * ```
		 *
		 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
		 * config property, by name, in this case an empty name:
		 * ```js
		 *
		 * $stateProvider.state("home", {
		 *   views: {
		 *     "": {
		 *       template: "<h1>HELLO!</h1>"
		 *     }
		 *   }
		 * })
		 * ```
		 *
		 * But typically you'll only use the views property if you name your view or have more than one view
		 * in the same template. There's not really a compelling reason to name a view if its the only one,
		 * but you could if you wanted, like so:
		 *
		 * ```html
		 *
		 * <div ui-view="main"></div>
		 * ```
		 *
		 * ```js
		 *
		 * $stateProvider.state("home", {
		 *   views: {
		 *     "main": {
		 *       template: "<h1>HELLO!</h1>"
		 *     }
		 *   }
		 * })
		 * ```
		 *
		 * Really though, you'll use views to set up multiple views:
		 * ```html
		 *
		 * <div ui-view></div>
		 * <div ui-view="chart"></div>
		 * <div ui-view="data"></div>
		 * ```
		 *
		 * ```js
		 * $stateProvider.state("home", {
		 *   views: {
		 *     "": {
		 *       template: "<h1>HELLO!</h1>"
		 *     },
		 *     "chart": {
		 *       template: "<chart_thing/>"
		 *     },
		 *     "data": {
		 *       template: "<data_thing/>"
		 *     }
		 *   }
		 * })
		 * ```
		 *
		 * Examples for `autoscroll`:
		 *
		 * ```html
		 *
		 * <!-- If autoscroll present with no expression,
		 *      then scroll ui-view into view -->
		 * <ui-view autoscroll/>
		 *
		 * <!-- If autoscroll present with valid expression,
		 *      then scroll ui-view into view if expression evaluates to true -->
		 * <ui-view autoscroll='true'/>
		 * <ui-view autoscroll='false'/>
		 * <ui-view autoscroll='scopeVariable'/>
		 * ```
		 *
		 * Resolve data:
		 *
		 * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this
		 * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.
		 *
		 * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the
		 * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which
		 * depends on `$resolve` data.
		 *
		 * @example
		 * ```js
		 *
		 * $stateProvider.state('home', {
		 *   template: '<my-component user="$resolve.user"></my-component>',
		 *   resolve: {
		 *     user: function(UserService) { return UserService.fetchUser(); }
		 *   }
		 * });
		 * ```
		 */
		var uiView = ['$view', '$animate', '$uiViewScroll', '$interpolate', '$q',
		    function $ViewDirective($view, $animate, $uiViewScroll, $interpolate, $q) {
		        function getRenderer(attrs, scope) {
		            return {
		                enter: function (element, target, cb) {
		                    if (angular.version.minor > 2) {
		                        $animate.enter(element, null, target).then(cb);
		                    }
		                    else {
		                        $animate.enter(element, null, target, cb);
		                    }
		                },
		                leave: function (element, cb) {
		                    if (angular.version.minor > 2) {
		                        $animate.leave(element).then(cb);
		                    }
		                    else {
		                        $animate.leave(element, cb);
		                    }
		                }
		            };
		        }
		        function configsEqual(config1, config2) {
		            return config1 === config2;
		        }
		        var rootData = {
		            $cfg: { viewDecl: { $context: $view.rootContext() } },
		            $uiView: {}
		        };
		        var directive = {
		            count: 0,
		            restrict: 'ECA',
		            terminal: true,
		            priority: 400,
		            transclude: 'element',
		            compile: function (tElement, tAttrs, $transclude) {
		                return function (scope, $element, attrs) {
		                    var previousEl, currentEl, currentScope, unregister, onloadExp = attrs['onload'] || '', autoScrollExp = attrs['autoscroll'], renderer = getRenderer(attrs, scope), viewConfig = undefined, inherited = $element.inheritedData('$uiView') || rootData, name = $interpolate(attrs['uiView'] || attrs['name'] || '')(scope) || '$default';
		                    var activeUIView = {
		                        $type: 'ng1',
		                        id: directive.count++,
		                        name: name,
		                        fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + "." + name : name,
		                        config: null,
		                        configUpdated: configUpdatedCallback,
		                        get creationContext() {
		                            return hof_1.parse('$cfg.viewDecl.$context')(inherited);
		                        }
		                    };
		                    trace_1.trace.traceUIViewEvent("Linking", activeUIView);
		                    function configUpdatedCallback(config) {
		                        if (config && !(config instanceof views_1.Ng1ViewConfig))
		                            return;
		                        if (configsEqual(viewConfig, config))
		                            return;
		                        trace_1.trace.traceUIViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);
		                        viewConfig = config;
		                        updateView(config);
		                    }
		                    $element.data('$uiView', { $uiView: activeUIView });
		                    updateView();
		                    unregister = $view.registerUIView(activeUIView);
		                    scope.$on("$destroy", function () {
		                        trace_1.trace.traceUIViewEvent("Destroying/Unregistering", activeUIView);
		                        unregister();
		                    });
		                    function cleanupLastView() {
		                        if (previousEl) {
		                            trace_1.trace.traceUIViewEvent("Removing (previous) el", previousEl.data('$uiView'));
		                            previousEl.remove();
		                            previousEl = null;
		                        }
		                        if (currentScope) {
		                            trace_1.trace.traceUIViewEvent("Destroying scope", activeUIView);
		                            currentScope.$destroy();
		                            currentScope = null;
		                        }
		                        if (currentEl) {
		                            var _viewData_1 = currentEl.data('$uiViewAnim');
		                            trace_1.trace.traceUIViewEvent("Animate out", _viewData_1);
		                            renderer.leave(currentEl, function () {
		                                _viewData_1.$$animLeave.resolve();
		                                previousEl = null;
		                            });
		                            previousEl = currentEl;
		                            currentEl = null;
		                        }
		                    }
		                    function updateView(config) {
		                        var newScope = scope.$new();
		                        var animEnter = $q.defer(), animLeave = $q.defer();
		                        var $uiViewData = {
		                            $cfg: config,
		                            $uiView: activeUIView,
		                        };
		                        var $uiViewAnim = {
		                            $animEnter: animEnter.promise,
		                            $animLeave: animLeave.promise,
		                            $$animLeave: animLeave
		                        };
		                        var cloned = $transclude(newScope, function (clone) {
		                            clone.data('$uiViewAnim', $uiViewAnim);
		                            clone.data('$uiView', $uiViewData);
		                            renderer.enter(clone, $element, function onUIViewEnter() {
		                                animEnter.resolve();
		                                if (currentScope)
		                                    currentScope.$emit('$viewContentAnimationEnded');
		                                if (predicates_1.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
		                                    $uiViewScroll(clone);
		                                }
		                            });
		                            cleanupLastView();
		                        });
		                        currentEl = cloned;
		                        currentScope = newScope;
		                        /**
		                         * @ngdoc event
		                         * @name ui.router.state.directive:ui-view#$viewContentLoaded
		                         * @eventOf ui.router.state.directive:ui-view
		                         * @eventType emits on ui-view directive scope
		                         * @description           *
		                         * Fired once the view is **loaded**, *after* the DOM is rendered.
		                         *
		                         * @param {Object} event Event object.
		                         */
		                        currentScope.$emit('$viewContentLoaded', config || viewConfig);
		                        currentScope.$eval(onloadExp);
		                    }
		                };
		            }
		        };
		        return directive;
		    }];
		$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$timeout'];
		/** @hidden */
		function $ViewDirectiveFill($compile, $controller, $transitions, $view, $timeout) {
		    var getControllerAs = hof_1.parse('viewDecl.controllerAs');
		    var getResolveAs = hof_1.parse('viewDecl.resolveAs');
		    return {
		        restrict: 'ECA',
		        priority: -400,
		        compile: function (tElement) {
		            var initial = tElement.html();
		            return function (scope, $element) {
		                var data = $element.data('$uiView');
		                if (!data)
		                    return;
		                var cfg = data.$cfg || { viewDecl: {} };
		                $element.html(cfg.template || initial);
		                trace_1.trace.traceUIViewFill(data.$uiView, $element.html());
		                var link = $compile($element.contents());
		                var controller = cfg.controller;
		                var controllerAs = getControllerAs(cfg);
		                var resolveAs = getResolveAs(cfg);
		                var resolveCtx = cfg.path && new resolveContext_1.ResolveContext(cfg.path);
		                var locals = resolveCtx && services_1.getLocals(resolveCtx);
		                scope[resolveAs] = locals;
		                if (controller) {
		                    var controllerInstance = $controller(controller, common_1.extend({}, locals, { $scope: scope, $element: $element }));
		                    if (controllerAs) {
		                        scope[controllerAs] = controllerInstance;
		                        scope[controllerAs][resolveAs] = locals;
		                    }
		                    // TODO: Use $view service as a central point for registering component-level hooks
		                    // Then, when a component is created, tell the $view service, so it can invoke hooks
		                    // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });
		                    // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));
		                    $element.data('$ngControllerController', controllerInstance);
		                    $element.children().data('$ngControllerController', controllerInstance);
		                    registerControllerCallbacks($transitions, controllerInstance, scope, cfg);
		                }
		                // Wait for the component to appear in the DOM
		                if (predicates_1.isString(cfg.viewDecl.component)) {
		                    var cmp_1 = cfg.viewDecl.component;
		                    var kebobName_1 = strings_1.kebobString(cmp_1);
		                    var getComponentController = function () {
		                        var directiveEl = [].slice.call($element[0].children)
		                            .filter(function (el) { return el && el.tagName && el.tagName.toLowerCase() === kebobName_1; });
		                        return directiveEl && angular.element(directiveEl).data("$" + cmp_1 + "Controller");
		                    };
		                    var deregisterWatch_1 = scope.$watch(getComponentController, function (ctrlInstance) {
		                        if (!ctrlInstance)
		                            return;
		                        registerControllerCallbacks($transitions, ctrlInstance, scope, cfg);
		                        deregisterWatch_1();
		                    });
		                }
		                link(scope);
		            };
		        }
		    };
		}
		/** @hidden */
		var hasComponentImpl = typeof angular.module('ui.router')['component'] === 'function';
		/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */
		function registerControllerCallbacks($transitions, controllerInstance, $scope, cfg) {
		    // Call $onInit() ASAP
		    if (predicates_1.isFunction(controllerInstance.$onInit) && !(cfg.viewDecl.component && hasComponentImpl))
		        controllerInstance.$onInit();
		    var viewState = common_1.tail(cfg.path).state.self;
		    var hookOptions = { bind: controllerInstance };
		    // Add component-level hook for onParamsChange
		    if (predicates_1.isFunction(controllerInstance.uiOnParamsChanged)) {
		        var resolveContext = new resolveContext_1.ResolveContext(cfg.path);
		        var viewCreationTrans_1 = resolveContext.getResolvable('$transition$').data;
		        // Fire callback on any successful transition
		        var paramsUpdated = function ($transition$) {
		            // Exit early if the $transition$ is the same as the view was created within.
		            // Exit early if the $transition$ will exit the state the view is for.
		            if ($transition$ === viewCreationTrans_1 || $transition$.exiting().indexOf(viewState) !== -1)
		                return;
		            var toParams = $transition$.params("to");
		            var fromParams = $transition$.params("from");
		            var toSchema = $transition$.treeChanges().to.map(function (node) { return node.paramSchema; }).reduce(common_1.unnestR, []);
		            var fromSchema = $transition$.treeChanges().from.map(function (node) { return node.paramSchema; }).reduce(common_1.unnestR, []);
		            // Find the to params that have different values than the from params
		            var changedToParams = toSchema.filter(function (param) {
		                var idx = fromSchema.indexOf(param);
		                return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);
		            });
		            // Only trigger callback if a to param has changed or is new
		            if (changedToParams.length) {
		                var changedKeys_1 = changedToParams.map(function (x) { return x.id; });
		                // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.
		                controllerInstance.uiOnParamsChanged(common_1.filter(toParams, function (val, key) { return changedKeys_1.indexOf(key) !== -1; }), $transition$);
		            }
		        };
		        $scope.$on('$destroy', $transitions.onSuccess({}, paramsUpdated, hookOptions));
		    }
		    // Add component-level hook for uiCanExit
		    if (predicates_1.isFunction(controllerInstance.uiCanExit)) {
		        var criteria = { exiting: viewState.name };
		        $scope.$on('$destroy', $transitions.onBefore(criteria, controllerInstance.uiCanExit, hookOptions));
		    }
		}
		angular.module('ui.router.state').directive('uiView', uiView);
		angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);


	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		/** @module ng1 */ /** */
		var angular = __webpack_require__(57);
		/**
		 * @ngdoc object
		 * @name ui.router.state.$uiViewScrollProvider
		 *
		 * @description
		 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
		 */
		function $ViewScrollProvider() {
		    var useAnchorScroll = false;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
		     * @methodOf ui.router.state.$uiViewScrollProvider
		     *
		     * @description
		     * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
		     * scrolling based on the url anchor.
		     */
		    this.useAnchorScroll = function () {
		        useAnchorScroll = true;
		    };
		    /**
		     * @ngdoc object
		     * @name ui.router.state.$uiViewScroll
		     *
		     * @requires $anchorScroll
		     * @requires $timeout
		     *
		     * @description
		     * When called with a jqLite element, it scrolls the element into view (after a
		     * `$timeout` so the DOM has time to refresh).
		     *
		     * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
		     * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
		     */
		    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
		            if (useAnchorScroll) {
		                return $anchorScroll;
		            }
		            return function ($element) {
		                return $timeout(function () {
		                    $element[0].scrollIntoView();
		                }, 0, false);
		            };
		        }];
		}
		angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);


	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=angular-ui-router.js.map

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(24);
	module.exports = angular;


/***/ },
/* 24 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.6.0
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window) {'use strict';

	/**
	 * @description
	 *
	 * This object provides a utility for producing rich Error messages within
	 * Angular. It can be called as follows:
	 *
	 * var exampleMinErr = minErr('example');
	 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
	 *
	 * The above creates an instance of minErr in the example namespace. The
	 * resulting error will have a namespaced error code of example.one.  The
	 * resulting error will replace {0} with the value of foo, and {1} with the
	 * value of bar. The object is not restricted in the number of arguments it can
	 * take.
	 *
	 * If fewer arguments are specified than necessary for interpolation, the extra
	 * interpolation markers will be preserved in the final string.
	 *
	 * Since data will be parsed statically during a build step, some restrictions
	 * are applied with respect to how minErr instances are created and called.
	 * Instances should have names of the form namespaceMinErr for a minErr created
	 * using minErr('namespace') . Error codes, namespaces and template strings
	 * should all be static strings, not variables or general expressions.
	 *
	 * @param {string} module The namespace to use for the new minErr instance.
	 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
	 *   error from returned function, for cases when a particular type of error is useful.
	 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
	 */

	function minErr(module, ErrorConstructor) {
	  ErrorConstructor = ErrorConstructor || Error;
	  return function() {
	    var SKIP_INDEXES = 2;

	    var templateArgs = arguments,
	      code = templateArgs[0],
	      message = '[' + (module ? module + ':' : '') + code + '] ',
	      template = templateArgs[1],
	      paramPrefix, i;

	    message += template.replace(/\{\d+\}/g, function(match) {
	      var index = +match.slice(1, -1),
	        shiftedIndex = index + SKIP_INDEXES;

	      if (shiftedIndex < templateArgs.length) {
	        return toDebugString(templateArgs[shiftedIndex]);
	      }

	      return match;
	    });

	    message += '\nhttp://errors.angularjs.org/1.6.0/' +
	      (module ? module + '/' : '') + code;

	    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
	      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
	        encodeURIComponent(toDebugString(templateArgs[i]));
	    }

	    return new ErrorConstructor(message);
	  };
	}

	/* We need to tell ESLint what variables are being exported */
	/* exported
	  angular,
	  msie,
	  jqLite,
	  jQuery,
	  slice,
	  splice,
	  push,
	  toString,
	  ngMinErr,
	  angularModule,
	  uid,
	  REGEX_STRING_REGEXP,
	  VALIDITY_STATE_PROPERTY,

	  lowercase,
	  uppercase,
	  manualLowercase,
	  manualUppercase,
	  nodeName_,
	  isArrayLike,
	  forEach,
	  forEachSorted,
	  reverseParams,
	  nextUid,
	  setHashKey,
	  extend,
	  toInt,
	  inherit,
	  merge,
	  noop,
	  identity,
	  valueFn,
	  isUndefined,
	  isDefined,
	  isObject,
	  isBlankObject,
	  isString,
	  isNumber,
	  isNumberNaN,
	  isDate,
	  isArray,
	  isFunction,
	  isRegExp,
	  isWindow,
	  isScope,
	  isFile,
	  isFormData,
	  isBlob,
	  isBoolean,
	  isPromiseLike,
	  trim,
	  escapeForRegexp,
	  isElement,
	  makeMap,
	  includes,
	  arrayRemove,
	  copy,
	  equals,
	  csp,
	  jq,
	  concat,
	  sliceArgs,
	  bind,
	  toJsonReplacer,
	  toJson,
	  fromJson,
	  convertTimezoneToLocal,
	  timezoneToOffset,
	  startingTag,
	  tryDecodeURIComponent,
	  parseKeyValue,
	  toKeyValue,
	  encodeUriSegment,
	  encodeUriQuery,
	  angularInit,
	  bootstrap,
	  getTestability,
	  snake_case,
	  bindJQuery,
	  assertArg,
	  assertArgFn,
	  assertNotHasOwnProperty,
	  getter,
	  getBlockNodes,
	  hasOwnProperty,
	  createMap,
	  stringify,

	  NODE_TYPE_ELEMENT,
	  NODE_TYPE_ATTRIBUTE,
	  NODE_TYPE_TEXT,
	  NODE_TYPE_COMMENT,
	  NODE_TYPE_DOCUMENT,
	  NODE_TYPE_DOCUMENT_FRAGMENT
	*/

	////////////////////////////////////

	/**
	 * @ngdoc module
	 * @name ng
	 * @module ng
	 * @installation
	 * @description
	 *
	 * # ng (core module)
	 * The ng module is loaded by default when an AngularJS application is started. The module itself
	 * contains the essential components for an AngularJS application to function. The table below
	 * lists a high level breakdown of each of the services/factories, filters, directives and testing
	 * components available within this core module.
	 *
	 * <div doc-module-components="ng"></div>
	 */

	var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

	// The name of a form control's ValidityState property.
	// This is used so that it's possible for internal tests to create mock ValidityStates.
	var VALIDITY_STATE_PROPERTY = 'validity';


	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * @ngdoc function
	 * @name angular.lowercase
	 * @module ng
	 * @kind function
	 *
	 * @deprecated
	 * sinceVersion="1.5.0"
	 * removeVersion="1.7.0"
	 * Use [String.prototype.toLowerCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) instead.
	 *
	 * @description Converts the specified string to lowercase.
	 * @param {string} string String to be converted to lowercase.
	 * @returns {string} Lowercased string.
	 */
	var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};

	/**
	 * @ngdoc function
	 * @name angular.uppercase
	 * @module ng
	 * @kind function
	 *
	 * @deprecated
	 * sinceVersion="1.5.0"
	 * removeVersion="1.7.0"
	 * Use [String.prototype.toUpperCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) instead.
	 *
	 * @description Converts the specified string to uppercase.
	 * @param {string} string String to be converted to uppercase.
	 * @returns {string} Uppercased string.
	 */
	var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};


	var manualLowercase = function(s) {
	  /* eslint-disable no-bitwise */
	  return isString(s)
	      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
	      : s;
	  /* eslint-enable */
	};
	var manualUppercase = function(s) {
	  /* eslint-disable no-bitwise */
	  return isString(s)
	      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
	      : s;
	  /* eslint-enable */
	};


	// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
	// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
	// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
	if ('i' !== 'I'.toLowerCase()) {
	  lowercase = manualLowercase;
	  uppercase = manualUppercase;
	}


	var
	    msie,             // holds major version number for IE, or NaN if UA is not IE.
	    jqLite,           // delay binding since jQuery could be loaded after us.
	    jQuery,           // delay binding
	    slice             = [].slice,
	    splice            = [].splice,
	    push              = [].push,
	    toString          = Object.prototype.toString,
	    getPrototypeOf    = Object.getPrototypeOf,
	    ngMinErr          = minErr('ng'),

	    /** @name angular */
	    angular           = window.angular || (window.angular = {}),
	    angularModule,
	    uid               = 0;

	// Support: IE 9-11 only
	/**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */
	msie = window.document.documentMode;


	/**
	 * @private
	 * @param {*} obj
	 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
	 *                   String ...)
	 */
	function isArrayLike(obj) {

	  // `null`, `undefined` and `window` are not array-like
	  if (obj == null || isWindow(obj)) return false;

	  // arrays, strings and jQuery/jqLite objects are array like
	  // * jqLite is either the jQuery or jqLite constructor function
	  // * we have to check the existence of jqLite first as this method is called
	  //   via the forEach method when constructing the jqLite object in the first place
	  if (isArray(obj) || isString(obj) || (jqLite && obj instanceof jqLite)) return true;

	  // Support: iOS 8.2 (not reproducible in simulator)
	  // "length" in obj used to prevent JIT error (gh-11508)
	  var length = 'length' in Object(obj) && obj.length;

	  // NodeList objects (with `item` method) and
	  // other objects with suitable length characteristics are array-like
	  return isNumber(length) &&
	    (length >= 0 && ((length - 1) in obj || obj instanceof Array) || typeof obj.item === 'function');

	}

	/**
	 * @ngdoc function
	 * @name angular.forEach
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
	 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
	 * is the value of an object property or an array element, `key` is the object property key or
	 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
	 *
	 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
	 * using the `hasOwnProperty` method.
	 *
	 * Unlike ES262's
	 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
	 * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
	 * return the value provided.
	 *
	   ```js
	     var values = {name: 'misko', gender: 'male'};
	     var log = [];
	     angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
	     expect(log).toEqual(['name: misko', 'gender: male']);
	   ```
	 *
	 * @param {Object|Array} obj Object to iterate over.
	 * @param {Function} iterator Iterator function.
	 * @param {Object=} context Object to become context (`this`) for the iterator function.
	 * @returns {Object|Array} Reference to `obj`.
	 */

	function forEach(obj, iterator, context) {
	  var key, length;
	  if (obj) {
	    if (isFunction(obj)) {
	      for (key in obj) {
	        if (key !== 'prototype' && key !== 'length' && key !== 'name' && obj.hasOwnProperty(key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (isArray(obj) || isArrayLike(obj)) {
	      var isPrimitive = typeof obj !== 'object';
	      for (key = 0, length = obj.length; key < length; key++) {
	        if (isPrimitive || key in obj) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (obj.forEach && obj.forEach !== forEach) {
	        obj.forEach(iterator, context, obj);
	    } else if (isBlankObject(obj)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in obj) {
	        iterator.call(context, obj[key], key, obj);
	      }
	    } else if (typeof obj.hasOwnProperty === 'function') {
	      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
	      for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else {
	      // Slow path for objects which do not have a method `hasOwnProperty`
	      for (key in obj) {
	        if (hasOwnProperty.call(obj, key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    }
	  }
	  return obj;
	}

	function forEachSorted(obj, iterator, context) {
	  var keys = Object.keys(obj).sort();
	  for (var i = 0; i < keys.length; i++) {
	    iterator.call(context, obj[keys[i]], keys[i]);
	  }
	  return keys;
	}


	/**
	 * when using forEach the params are value, key, but it is often useful to have key, value.
	 * @param {function(string, *)} iteratorFn
	 * @returns {function(*, string)}
	 */
	function reverseParams(iteratorFn) {
	  return function(value, key) {iteratorFn(key, value);};
	}

	/**
	 * A consistent way of creating unique IDs in angular.
	 *
	 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
	 * we hit number precision issues in JavaScript.
	 *
	 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
	 *
	 * @returns {number} an unique alpha-numeric string
	 */
	function nextUid() {
	  return ++uid;
	}


	/**
	 * Set or clear the hashkey for an object.
	 * @param obj object
	 * @param h the hashkey (!truthy to delete the hashkey)
	 */
	function setHashKey(obj, h) {
	  if (h) {
	    obj.$$hashKey = h;
	  } else {
	    delete obj.$$hashKey;
	  }
	}


	function baseExtend(dst, objs, deep) {
	  var h = dst.$$hashKey;

	  for (var i = 0, ii = objs.length; i < ii; ++i) {
	    var obj = objs[i];
	    if (!isObject(obj) && !isFunction(obj)) continue;
	    var keys = Object.keys(obj);
	    for (var j = 0, jj = keys.length; j < jj; j++) {
	      var key = keys[j];
	      var src = obj[key];

	      if (deep && isObject(src)) {
	        if (isDate(src)) {
	          dst[key] = new Date(src.valueOf());
	        } else if (isRegExp(src)) {
	          dst[key] = new RegExp(src);
	        } else if (src.nodeName) {
	          dst[key] = src.cloneNode(true);
	        } else if (isElement(src)) {
	          dst[key] = src.clone();
	        } else {
	          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
	          baseExtend(dst[key], [src], true);
	        }
	      } else {
	        dst[key] = src;
	      }
	    }
	  }

	  setHashKey(dst, h);
	  return dst;
	}

	/**
	 * @ngdoc function
	 * @name angular.extend
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
	 *
	 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
	 * {@link angular.merge} for this.
	 *
	 * @param {Object} dst Destination object.
	 * @param {...Object} src Source object(s).
	 * @returns {Object} Reference to `dst`.
	 */
	function extend(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), false);
	}


	/**
	* @ngdoc function
	* @name angular.merge
	* @module ng
	* @kind function
	*
	* @description
	* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
	*
	* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
	* objects, performing a deep copy.
	*
	* @param {Object} dst Destination object.
	* @param {...Object} src Source object(s).
	* @returns {Object} Reference to `dst`.
	*/
	function merge(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), true);
	}



	function toInt(str) {
	  return parseInt(str, 10);
	}

	var isNumberNaN = Number.isNaN || function isNumberNaN(num) {
	  // eslint-disable-next-line no-self-compare
	  return num !== num;
	};


	function inherit(parent, extra) {
	  return extend(Object.create(parent), extra);
	}

	/**
	 * @ngdoc function
	 * @name angular.noop
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that performs no operations. This function can be useful when writing code in the
	 * functional style.
	   ```js
	     function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
	   ```
	 */
	function noop() {}
	noop.$inject = [];


	/**
	 * @ngdoc function
	 * @name angular.identity
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that returns its first argument. This function is useful when writing code in the
	 * functional style.
	 *
	   ```js
	   function transformer(transformationFn, value) {
	     return (transformationFn || angular.identity)(value);
	   };

	   // E.g.
	   function getResult(fn, input) {
	     return (fn || angular.identity)(input);
	   };

	   getResult(function(n) { return n * 2; }, 21);   // returns 42
	   getResult(null, 21);                            // returns 21
	   getResult(undefined, 21);                       // returns 21
	   ```
	 *
	 * @param {*} value to be returned.
	 * @returns {*} the value passed in.
	 */
	function identity($) {return $;}
	identity.$inject = [];


	function valueFn(value) {return function valueRef() {return value;};}

	function hasCustomToString(obj) {
	  return isFunction(obj.toString) && obj.toString !== toString;
	}


	/**
	 * @ngdoc function
	 * @name angular.isUndefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is undefined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is undefined.
	 */
	function isUndefined(value) {return typeof value === 'undefined';}


	/**
	 * @ngdoc function
	 * @name angular.isDefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is defined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is defined.
	 */
	function isDefined(value) {return typeof value !== 'undefined';}


	/**
	 * @ngdoc function
	 * @name angular.isObject
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
	 * considered to be objects. Note that JavaScript arrays are objects.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Object` but not `null`.
	 */
	function isObject(value) {
	  // http://jsperf.com/isobject4
	  return value !== null && typeof value === 'object';
	}


	/**
	 * Determine if a value is an object with a null prototype
	 *
	 * @returns {boolean} True if `value` is an `Object` with a null prototype
	 */
	function isBlankObject(value) {
	  return value !== null && typeof value === 'object' && !getPrototypeOf(value);
	}


	/**
	 * @ngdoc function
	 * @name angular.isString
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `String`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `String`.
	 */
	function isString(value) {return typeof value === 'string';}


	/**
	 * @ngdoc function
	 * @name angular.isNumber
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Number`.
	 *
	 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
	 *
	 * If you wish to exclude these then you can use the native
	 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
	 * method.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Number`.
	 */
	function isNumber(value) {return typeof value === 'number';}


	/**
	 * @ngdoc function
	 * @name angular.isDate
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a value is a date.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Date`.
	 */
	function isDate(value) {
	  return toString.call(value) === '[object Date]';
	}


	/**
	 * @ngdoc function
	 * @name angular.isArray
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Array`. Alias of Array.isArray.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Array`.
	 */
	var isArray = Array.isArray;

	/**
	 * @ngdoc function
	 * @name angular.isFunction
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Function`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Function`.
	 */
	function isFunction(value) {return typeof value === 'function';}


	/**
	 * Determines if a value is a regular expression object.
	 *
	 * @private
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `RegExp`.
	 */
	function isRegExp(value) {
	  return toString.call(value) === '[object RegExp]';
	}


	/**
	 * Checks if `obj` is a window object.
	 *
	 * @private
	 * @param {*} obj Object to check
	 * @returns {boolean} True if `obj` is a window obj.
	 */
	function isWindow(obj) {
	  return obj && obj.window === obj;
	}


	function isScope(obj) {
	  return obj && obj.$evalAsync && obj.$watch;
	}


	function isFile(obj) {
	  return toString.call(obj) === '[object File]';
	}


	function isFormData(obj) {
	  return toString.call(obj) === '[object FormData]';
	}


	function isBlob(obj) {
	  return toString.call(obj) === '[object Blob]';
	}


	function isBoolean(value) {
	  return typeof value === 'boolean';
	}


	function isPromiseLike(obj) {
	  return obj && isFunction(obj.then);
	}


	var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/;
	function isTypedArray(value) {
	  return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
	}

	function isArrayBuffer(obj) {
	  return toString.call(obj) === '[object ArrayBuffer]';
	}


	var trim = function(value) {
	  return isString(value) ? value.trim() : value;
	};

	// Copied from:
	// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
	// Prereq: s is a string.
	var escapeForRegexp = function(s) {
	  return s
	    .replace(/([-()[\]{}+?*.$^|,:#<!\\])/g, '\\$1')
	    // eslint-disable-next-line no-control-regex
	    .replace(/\x08/g, '\\x08');
	};


	/**
	 * @ngdoc function
	 * @name angular.isElement
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a DOM element (or wrapped jQuery element).
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
	 */
	function isElement(node) {
	  return !!(node &&
	    (node.nodeName  // We are a direct element.
	    || (node.prop && node.attr && node.find)));  // We have an on and find method part of jQuery API.
	}

	/**
	 * @param str 'key1,key2,...'
	 * @returns {object} in the form of {key1:true, key2:true, ...}
	 */
	function makeMap(str) {
	  var obj = {}, items = str.split(','), i;
	  for (i = 0; i < items.length; i++) {
	    obj[items[i]] = true;
	  }
	  return obj;
	}


	function nodeName_(element) {
	  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
	}

	function includes(array, obj) {
	  return Array.prototype.indexOf.call(array, obj) !== -1;
	}

	function arrayRemove(array, value) {
	  var index = array.indexOf(value);
	  if (index >= 0) {
	    array.splice(index, 1);
	  }
	  return index;
	}

	/**
	 * @ngdoc function
	 * @name angular.copy
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Creates a deep copy of `source`, which should be an object or an array.
	 *
	 * * If no destination is supplied, a copy of the object or array is created.
	 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
	 *   are deleted and then all elements/properties from the source are copied to it.
	 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
	 * * If `source` is identical to `destination` an exception will be thrown.
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`
	 *   and on `destination`) will be ignored.
	 * </div>
	 *
	 * @param {*} source The source that will be used to make a copy.
	 *                   Can be any type, including primitives, `null`, and `undefined`.
	 * @param {(Object|Array)=} destination Destination into which the source is copied. If
	 *     provided, must be of the same type as `source`.
	 * @returns {*} The copy or updated `destination`, if `destination` was specified.
	 *
	 * @example
	  <example module="copyExample" name="angular-copy">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate class="simple-form">
	          <label>Name: <input type="text" ng-model="user.name" /></label><br />
	          <label>Age:  <input type="number" ng-model="user.age" /></label><br />
	          Gender: <label><input type="radio" ng-model="user.gender" value="male" />male</label>
	                  <label><input type="radio" ng-model="user.gender" value="female" />female</label><br />
	          <button ng-click="reset()">RESET</button>
	          <button ng-click="update(user)">SAVE</button>
	        </form>
	        <pre>form = {{user | json}}</pre>
	        <pre>master = {{master | json}}</pre>
	      </div>
	    </file>
	    <file name="script.js">
	      // Module: copyExample
	      angular.
	        module('copyExample', []).
	        controller('ExampleController', ['$scope', function($scope) {
	          $scope.master = {};

	          $scope.reset = function() {
	            // Example with 1 argument
	            $scope.user = angular.copy($scope.master);
	          };

	          $scope.update = function(user) {
	            // Example with 2 arguments
	            angular.copy(user, $scope.master);
	          };

	          $scope.reset();
	        }]);
	    </file>
	  </example>
	 */
	function copy(source, destination) {
	  var stackSource = [];
	  var stackDest = [];

	  if (destination) {
	    if (isTypedArray(destination) || isArrayBuffer(destination)) {
	      throw ngMinErr('cpta', 'Can\'t copy! TypedArray destination cannot be mutated.');
	    }
	    if (source === destination) {
	      throw ngMinErr('cpi', 'Can\'t copy! Source and destination are identical.');
	    }

	    // Empty the destination object
	    if (isArray(destination)) {
	      destination.length = 0;
	    } else {
	      forEach(destination, function(value, key) {
	        if (key !== '$$hashKey') {
	          delete destination[key];
	        }
	      });
	    }

	    stackSource.push(source);
	    stackDest.push(destination);
	    return copyRecurse(source, destination);
	  }

	  return copyElement(source);

	  function copyRecurse(source, destination) {
	    var h = destination.$$hashKey;
	    var key;
	    if (isArray(source)) {
	      for (var i = 0, ii = source.length; i < ii; i++) {
	        destination.push(copyElement(source[i]));
	      }
	    } else if (isBlankObject(source)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in source) {
	        destination[key] = copyElement(source[key]);
	      }
	    } else if (source && typeof source.hasOwnProperty === 'function') {
	      // Slow path, which must rely on hasOwnProperty
	      for (key in source) {
	        if (source.hasOwnProperty(key)) {
	          destination[key] = copyElement(source[key]);
	        }
	      }
	    } else {
	      // Slowest path --- hasOwnProperty can't be called as a method
	      for (key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          destination[key] = copyElement(source[key]);
	        }
	      }
	    }
	    setHashKey(destination, h);
	    return destination;
	  }

	  function copyElement(source) {
	    // Simple values
	    if (!isObject(source)) {
	      return source;
	    }

	    // Already copied values
	    var index = stackSource.indexOf(source);
	    if (index !== -1) {
	      return stackDest[index];
	    }

	    if (isWindow(source) || isScope(source)) {
	      throw ngMinErr('cpws',
	        'Can\'t copy! Making copies of Window or Scope instances is not supported.');
	    }

	    var needsRecurse = false;
	    var destination = copyType(source);

	    if (destination === undefined) {
	      destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));
	      needsRecurse = true;
	    }

	    stackSource.push(source);
	    stackDest.push(destination);

	    return needsRecurse
	      ? copyRecurse(source, destination)
	      : destination;
	  }

	  function copyType(source) {
	    switch (toString.call(source)) {
	      case '[object Int8Array]':
	      case '[object Int16Array]':
	      case '[object Int32Array]':
	      case '[object Float32Array]':
	      case '[object Float64Array]':
	      case '[object Uint8Array]':
	      case '[object Uint8ClampedArray]':
	      case '[object Uint16Array]':
	      case '[object Uint32Array]':
	        return new source.constructor(copyElement(source.buffer), source.byteOffset, source.length);

	      case '[object ArrayBuffer]':
	        // Support: IE10
	        if (!source.slice) {
	          // If we're in this case we know the environment supports ArrayBuffer
	          /* eslint-disable no-undef */
	          var copied = new ArrayBuffer(source.byteLength);
	          new Uint8Array(copied).set(new Uint8Array(source));
	          /* eslint-enable */
	          return copied;
	        }
	        return source.slice(0);

	      case '[object Boolean]':
	      case '[object Number]':
	      case '[object String]':
	      case '[object Date]':
	        return new source.constructor(source.valueOf());

	      case '[object RegExp]':
	        var re = new RegExp(source.source, source.toString().match(/[^/]*$/)[0]);
	        re.lastIndex = source.lastIndex;
	        return re;

	      case '[object Blob]':
	        return new source.constructor([source], {type: source.type});
	    }

	    if (isFunction(source.cloneNode)) {
	      return source.cloneNode(true);
	    }
	  }
	}


	/**
	 * @ngdoc function
	 * @name angular.equals
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if two objects or two values are equivalent. Supports value types, regular
	 * expressions, arrays and objects.
	 *
	 * Two objects or values are considered equivalent if at least one of the following is true:
	 *
	 * * Both objects or values pass `===` comparison.
	 * * Both objects or values are of the same type and all of their properties are equal by
	 *   comparing them with `angular.equals`.
	 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
	 * * Both values represent the same regular expression (In JavaScript,
	 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
	 *   representation matches).
	 *
	 * During a property comparison, properties of `function` type and properties with names
	 * that begin with `$` are ignored.
	 *
	 * Scope and DOMWindow objects are being compared only by identify (`===`).
	 *
	 * @param {*} o1 Object or value to compare.
	 * @param {*} o2 Object or value to compare.
	 * @returns {boolean} True if arguments are equal.
	 *
	 * @example
	   <example module="equalsExample" name="equalsExample">
	     <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate>
	          <h3>User 1</h3>
	          Name: <input type="text" ng-model="user1.name">
	          Age: <input type="number" ng-model="user1.age">

	          <h3>User 2</h3>
	          Name: <input type="text" ng-model="user2.name">
	          Age: <input type="number" ng-model="user2.age">

	          <div>
	            <br/>
	            <input type="button" value="Compare" ng-click="compare()">
	          </div>
	          User 1: <pre>{{user1 | json}}</pre>
	          User 2: <pre>{{user2 | json}}</pre>
	          Equal: <pre>{{result}}</pre>
	        </form>
	      </div>
	    </file>
	    <file name="script.js">
	        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
	          $scope.user1 = {};
	          $scope.user2 = {};
	          $scope.compare = function() {
	            $scope.result = angular.equals($scope.user1, $scope.user2);
	          };
	        }]);
	    </file>
	  </example>
	 */
	function equals(o1, o2) {
	  if (o1 === o2) return true;
	  if (o1 === null || o2 === null) return false;
	  // eslint-disable-next-line no-self-compare
	  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
	  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
	  if (t1 === t2 && t1 === 'object') {
	    if (isArray(o1)) {
	      if (!isArray(o2)) return false;
	      if ((length = o1.length) === o2.length) {
	        for (key = 0; key < length; key++) {
	          if (!equals(o1[key], o2[key])) return false;
	        }
	        return true;
	      }
	    } else if (isDate(o1)) {
	      if (!isDate(o2)) return false;
	      return equals(o1.getTime(), o2.getTime());
	    } else if (isRegExp(o1)) {
	      if (!isRegExp(o2)) return false;
	      return o1.toString() === o2.toString();
	    } else {
	      if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
	        isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
	      keySet = createMap();
	      for (key in o1) {
	        if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
	        if (!equals(o1[key], o2[key])) return false;
	        keySet[key] = true;
	      }
	      for (key in o2) {
	        if (!(key in keySet) &&
	            key.charAt(0) !== '$' &&
	            isDefined(o2[key]) &&
	            !isFunction(o2[key])) return false;
	      }
	      return true;
	    }
	  }
	  return false;
	}

	var csp = function() {
	  if (!isDefined(csp.rules)) {


	    var ngCspElement = (window.document.querySelector('[ng-csp]') ||
	                    window.document.querySelector('[data-ng-csp]'));

	    if (ngCspElement) {
	      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||
	                    ngCspElement.getAttribute('data-ng-csp');
	      csp.rules = {
	        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),
	        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)
	      };
	    } else {
	      csp.rules = {
	        noUnsafeEval: noUnsafeEval(),
	        noInlineStyle: false
	      };
	    }
	  }

	  return csp.rules;

	  function noUnsafeEval() {
	    try {
	      // eslint-disable-next-line no-new, no-new-func
	      new Function('');
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	};

	/**
	 * @ngdoc directive
	 * @module ng
	 * @name ngJq
	 *
	 * @element ANY
	 * @param {string=} ngJq the name of the library available under `window`
	 * to be used for angular.element
	 * @description
	 * Use this directive to force the angular.element library.  This should be
	 * used to force either jqLite by leaving ng-jq blank or setting the name of
	 * the jquery variable under window (eg. jQuery).
	 *
	 * Since angular looks for this directive when it is loaded (doesn't wait for the
	 * DOMContentLoaded event), it must be placed on an element that comes before the script
	 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
	 * others ignored.
	 *
	 * @example
	 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq>
	 ...
	 ...
	 </html>
	 ```
	 * @example
	 * This example shows how to use a jQuery based library of a different name.
	 * The library name must be available at the top most 'window'.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq="jQueryLib">
	 ...
	 ...
	 </html>
	 ```
	 */
	var jq = function() {
	  if (isDefined(jq.name_)) return jq.name_;
	  var el;
	  var i, ii = ngAttrPrefixes.length, prefix, name;
	  for (i = 0; i < ii; ++i) {
	    prefix = ngAttrPrefixes[i];
	    el = window.document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]');
	    if (el) {
	      name = el.getAttribute(prefix + 'jq');
	      break;
	    }
	  }

	  return (jq.name_ = name);
	};

	function concat(array1, array2, index) {
	  return array1.concat(slice.call(array2, index));
	}

	function sliceArgs(args, startIndex) {
	  return slice.call(args, startIndex || 0);
	}


	/**
	 * @ngdoc function
	 * @name angular.bind
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
	 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
	 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
	 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
	 *
	 * @param {Object} self Context which `fn` should be evaluated in.
	 * @param {function()} fn Function to be bound.
	 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
	 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
	 */
	function bind(self, fn) {
	  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
	  if (isFunction(fn) && !(fn instanceof RegExp)) {
	    return curryArgs.length
	      ? function() {
	          return arguments.length
	            ? fn.apply(self, concat(curryArgs, arguments, 0))
	            : fn.apply(self, curryArgs);
	        }
	      : function() {
	          return arguments.length
	            ? fn.apply(self, arguments)
	            : fn.call(self);
	        };
	  } else {
	    // In IE, native methods are not functions so they cannot be bound (note: they don't need to be).
	    return fn;
	  }
	}


	function toJsonReplacer(key, value) {
	  var val = value;

	  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
	    val = undefined;
	  } else if (isWindow(value)) {
	    val = '$WINDOW';
	  } else if (value &&  window.document === value) {
	    val = '$DOCUMENT';
	  } else if (isScope(value)) {
	    val = '$SCOPE';
	  }

	  return val;
	}


	/**
	 * @ngdoc function
	 * @name angular.toJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
	 * stripped since angular uses this notation internally.
	 *
	 * @param {Object|Array|Date|string|number|boolean} obj Input to be serialized into JSON.
	 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
	 *    If set to an integer, the JSON output will contain that many spaces per indentation.
	 * @returns {string|undefined} JSON-ified string representing `obj`.
	 * @knownIssue
	 *
	 * The Safari browser throws a `RangeError` instead of returning `null` when it tries to stringify a `Date`
	 * object with an invalid date value. The only reliable way to prevent this is to monkeypatch the
	 * `Date.prototype.toJSON` method as follows:
	 *
	 * ```
	 * var _DatetoJSON = Date.prototype.toJSON;
	 * Date.prototype.toJSON = function() {
	 *   try {
	 *     return _DatetoJSON.call(this);
	 *   } catch(e) {
	 *     if (e instanceof RangeError) {
	 *       return null;
	 *     }
	 *     throw e;
	 *   }
	 * };
	 * ```
	 *
	 * See https://github.com/angular/angular.js/pull/14221 for more information.
	 */
	function toJson(obj, pretty) {
	  if (isUndefined(obj)) return undefined;
	  if (!isNumber(pretty)) {
	    pretty = pretty ? 2 : null;
	  }
	  return JSON.stringify(obj, toJsonReplacer, pretty);
	}


	/**
	 * @ngdoc function
	 * @name angular.fromJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Deserializes a JSON string.
	 *
	 * @param {string} json JSON string to deserialize.
	 * @returns {Object|Array|string|number} Deserialized JSON string.
	 */
	function fromJson(json) {
	  return isString(json)
	      ? JSON.parse(json)
	      : json;
	}


	var ALL_COLONS = /:/g;
	function timezoneToOffset(timezone, fallback) {
	  // Support: IE 9-11 only, Edge 13-14+
	  // IE/Edge do not "understand" colon (`:`) in timezone
	  timezone = timezone.replace(ALL_COLONS, '');
	  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
	  return isNumberNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
	}


	function addDateMinutes(date, minutes) {
	  date = new Date(date.getTime());
	  date.setMinutes(date.getMinutes() + minutes);
	  return date;
	}


	function convertTimezoneToLocal(date, timezone, reverse) {
	  reverse = reverse ? -1 : 1;
	  var dateTimezoneOffset = date.getTimezoneOffset();
	  var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	  return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
	}


	/**
	 * @returns {string} Returns the string representation of the element.
	 */
	function startingTag(element) {
	  element = jqLite(element).clone();
	  try {
	    // turns out IE does not let you set .html() on elements which
	    // are not allowed to have children. So we just ignore it.
	    element.empty();
	  } catch (e) { /* empty */ }
	  var elemHtml = jqLite('<div>').append(element).html();
	  try {
	    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
	        elemHtml.
	          match(/^(<[^>]+>)/)[1].
	          replace(/^<([\w-]+)/, function(match, nodeName) {return '<' + lowercase(nodeName);});
	  } catch (e) {
	    return lowercase(elemHtml);
	  }

	}


	/////////////////////////////////////////////////

	/**
	 * Tries to decode the URI component without throwing an exception.
	 *
	 * @private
	 * @param str value potential URI component to check.
	 * @returns {boolean} True if `value` can be decoded
	 * with the decodeURIComponent function.
	 */
	function tryDecodeURIComponent(value) {
	  try {
	    return decodeURIComponent(value);
	  } catch (e) {
	    // Ignore any invalid uri component.
	  }
	}


	/**
	 * Parses an escaped url query string into key-value pairs.
	 * @returns {Object.<string,boolean|Array>}
	 */
	function parseKeyValue(/**string*/keyValue) {
	  var obj = {};
	  forEach((keyValue || '').split('&'), function(keyValue) {
	    var splitPoint, key, val;
	    if (keyValue) {
	      key = keyValue = keyValue.replace(/\+/g,'%20');
	      splitPoint = keyValue.indexOf('=');
	      if (splitPoint !== -1) {
	        key = keyValue.substring(0, splitPoint);
	        val = keyValue.substring(splitPoint + 1);
	      }
	      key = tryDecodeURIComponent(key);
	      if (isDefined(key)) {
	        val = isDefined(val) ? tryDecodeURIComponent(val) : true;
	        if (!hasOwnProperty.call(obj, key)) {
	          obj[key] = val;
	        } else if (isArray(obj[key])) {
	          obj[key].push(val);
	        } else {
	          obj[key] = [obj[key],val];
	        }
	      }
	    }
	  });
	  return obj;
	}

	function toKeyValue(obj) {
	  var parts = [];
	  forEach(obj, function(value, key) {
	    if (isArray(value)) {
	      forEach(value, function(arrayValue) {
	        parts.push(encodeUriQuery(key, true) +
	                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
	      });
	    } else {
	    parts.push(encodeUriQuery(key, true) +
	               (value === true ? '' : '=' + encodeUriQuery(value, true)));
	    }
	  });
	  return parts.length ? parts.join('&') : '';
	}


	/**
	 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
	 * segments:
	 *    segment       = *pchar
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriSegment(val) {
	  return encodeUriQuery(val, true).
	             replace(/%26/gi, '&').
	             replace(/%3D/gi, '=').
	             replace(/%2B/gi, '+');
	}


	/**
	 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
	 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
	 * encoded per http://tools.ietf.org/html/rfc3986:
	 *    query         = *( pchar / "/" / "?" )
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriQuery(val, pctEncodeSpaces) {
	  return encodeURIComponent(val).
	             replace(/%40/gi, '@').
	             replace(/%3A/gi, ':').
	             replace(/%24/g, '$').
	             replace(/%2C/gi, ',').
	             replace(/%3B/gi, ';').
	             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
	}

	var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

	function getNgAttribute(element, ngAttr) {
	  var attr, i, ii = ngAttrPrefixes.length;
	  for (i = 0; i < ii; ++i) {
	    attr = ngAttrPrefixes[i] + ngAttr;
	    if (isString(attr = element.getAttribute(attr))) {
	      return attr;
	    }
	  }
	  return null;
	}

	function allowAutoBootstrap(document) {
	  if (!document.currentScript) {
	    return true;
	  }
	  var src = document.currentScript.getAttribute('src');
	  var link = document.createElement('a');
	  link.href = src;
	  if (document.location.origin === link.origin) {
	    // Same-origin resources are always allowed, even for non-whitelisted schemes.
	    return true;
	  }
	  // Disabled bootstrapping unless angular.js was loaded from a known scheme used on the web.
	  // This is to prevent angular.js bundled with browser extensions from being used to bypass the
	  // content security policy in web pages and other browser extensions.
	  switch (link.protocol) {
	    case 'http:':
	    case 'https:':
	    case 'ftp:':
	    case 'blob:':
	    case 'file:':
	    case 'data:':
	      return true;
	    default:
	      return false;
	  }
	}

	// Cached as it has to run during loading so that document.currentScript is available.
	var isAutoBootstrapAllowed = allowAutoBootstrap(window.document);

	/**
	 * @ngdoc directive
	 * @name ngApp
	 * @module ng
	 *
	 * @element ANY
	 * @param {angular.Module} ngApp an optional application
	 *   {@link angular.module module} name to load.
	 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
	 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
	 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
	 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
	 *   tracking down the root of these bugs.
	 *
	 * @description
	 *
	 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
	 * designates the **root element** of the application and is typically placed near the root element
	 * of the page - e.g. on the `<body>` or `<html>` tags.
	 *
	 * There are a few things to keep in mind when using `ngApp`:
	 * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
	 *   found in the document will be used to define the root element to auto-bootstrap as an
	 *   application. To run multiple applications in an HTML document you must manually bootstrap them using
	 *   {@link angular.bootstrap} instead.
	 * - AngularJS applications cannot be nested within each other.
	 * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
	 *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
	 *   {@link ngRoute.ngView `ngView`}.
	 *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 *   causing animations to stop working and making the injector inaccessible from outside the app.
	 *
	 * You can specify an **AngularJS module** to be used as the root module for the application.  This
	 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
	 * should contain the application code needed or have dependencies on other modules that will
	 * contain the code. See {@link angular.module} for more information.
	 *
	 * In the example below if the `ngApp` directive were not placed on the `html` element then the
	 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
	 * would not be resolved to `3`.
	 *
	 * `ngApp` is the easiest, and most common way to bootstrap an application.
	 *
	 <example module="ngAppDemo" name="ng-app">
	   <file name="index.html">
	   <div ng-controller="ngAppDemoController">
	     I can add: {{a}} + {{b}} =  {{ a+b }}
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
	   </file>
	 </example>
	 *
	 * Using `ngStrictDi`, you would see something like this:
	 *
	 <example ng-app-included="true" name="strict-di">
	   <file name="index.html">
	   <div ng-app="ngAppStrictDemo" ng-strict-di>
	       <div ng-controller="GoodController1">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style (see
	              script.js for details)
	           </p>
	       </div>

	       <div ng-controller="GoodController2">
	           Name: <input ng-model="name"><br />
	           Hello, {{name}}!

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style
	              (see script.js for details)
	           </p>
	       </div>

	       <div ng-controller="BadController">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>The controller could not be instantiated, due to relying
	              on automatic function annotations (which are disabled in
	              strict mode). As such, the content of this section is not
	              interpolated, and there should be an error in your web console.
	           </p>
	       </div>
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppStrictDemo', [])
	     // BadController will fail to instantiate, due to relying on automatic function annotation,
	     // rather than an explicit annotation
	     .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
	     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
	     // due to using explicit annotations using the array style and $inject property, respectively.
	     .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
	     .controller('GoodController2', GoodController2);
	     function GoodController2($scope) {
	       $scope.name = 'World';
	     }
	     GoodController2.$inject = ['$scope'];
	   </file>
	   <file name="style.css">
	   div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
	   div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
	   div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
	   </file>
	 </example>
	 */
	function angularInit(element, bootstrap) {
	  var appElement,
	      module,
	      config = {};

	  // The element `element` has priority over any other element.
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';

	    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
	      appElement = element;
	      module = element.getAttribute(name);
	    }
	  });
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';
	    var candidate;

	    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
	      appElement = candidate;
	      module = candidate.getAttribute(name);
	    }
	  });
	  if (appElement) {
	    if (!isAutoBootstrapAllowed) {
	      window.console.error('Angular: disabling automatic bootstrap. <script> protocol indicates ' +
	          'an extension, document.location.href does not match.');
	      return;
	    }
	    config.strictDi = getNgAttribute(appElement, 'strict-di') !== null;
	    bootstrap(appElement, module ? [module] : [], config);
	  }
	}

	/**
	 * @ngdoc function
	 * @name angular.bootstrap
	 * @module ng
	 * @description
	 * Use this function to manually start up angular application.
	 *
	 * For more information, see the {@link guide/bootstrap Bootstrap guide}.
	 *
	 * Angular will detect if it has been loaded into the browser more than once and only allow the
	 * first loaded script to be bootstrapped and will report a warning to the browser console for
	 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
	 * multiple instances of Angular try to work on the DOM.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
	 * They must use {@link ng.directive:ngApp ngApp}.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
	 * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
	 * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 * causing animations to stop working and making the injector inaccessible from outside the app.
	 * </div>
	 *
	 * ```html
	 * <!doctype html>
	 * <html>
	 * <body>
	 * <div ng-controller="WelcomeController">
	 *   {{greeting}}
	 * </div>
	 *
	 * <script src="angular.js"></script>
	 * <script>
	 *   var app = angular.module('demo', [])
	 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
	 *   angular.bootstrap(document, ['demo']);
	 * </script>
	 * </body>
	 * </html>
	 * ```
	 *
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
	 *     Each item in the array should be the name of a predefined module or a (DI annotated)
	 *     function that will be invoked by the injector as a `config` block.
	 *     See: {@link angular.module modules}
	 * @param {Object=} config an object for defining configuration options for the application. The
	 *     following keys are supported:
	 *
	 * * `strictDi` - disable automatic function annotation for the application. This is meant to
	 *   assist in finding bugs which break minified code. Defaults to `false`.
	 *
	 * @returns {auto.$injector} Returns the newly created injector for this app.
	 */
	function bootstrap(element, modules, config) {
	  if (!isObject(config)) config = {};
	  var defaultConfig = {
	    strictDi: false
	  };
	  config = extend(defaultConfig, config);
	  var doBootstrap = function() {
	    element = jqLite(element);

	    if (element.injector()) {
	      var tag = (element[0] === window.document) ? 'document' : startingTag(element);
	      // Encode angle brackets to prevent input from being sanitized to empty string #8683.
	      throw ngMinErr(
	          'btstrpd',
	          'App already bootstrapped with this element \'{0}\'',
	          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
	    }

	    modules = modules || [];
	    modules.unshift(['$provide', function($provide) {
	      $provide.value('$rootElement', element);
	    }]);

	    if (config.debugInfoEnabled) {
	      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
	      modules.push(['$compileProvider', function($compileProvider) {
	        $compileProvider.debugInfoEnabled(true);
	      }]);
	    }

	    modules.unshift('ng');
	    var injector = createInjector(modules, config.strictDi);
	    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
	       function bootstrapApply(scope, element, compile, injector) {
	        scope.$apply(function() {
	          element.data('$injector', injector);
	          compile(element)(scope);
	        });
	      }]
	    );
	    return injector;
	  };

	  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
	  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

	  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
	    config.debugInfoEnabled = true;
	    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
	  }

	  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
	    return doBootstrap();
	  }

	  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
	  angular.resumeBootstrap = function(extraModules) {
	    forEach(extraModules, function(module) {
	      modules.push(module);
	    });
	    return doBootstrap();
	  };

	  if (isFunction(angular.resumeDeferredBootstrap)) {
	    angular.resumeDeferredBootstrap();
	  }
	}

	/**
	 * @ngdoc function
	 * @name angular.reloadWithDebugInfo
	 * @module ng
	 * @description
	 * Use this function to reload the current application with debug information turned on.
	 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
	 *
	 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
	 */
	function reloadWithDebugInfo() {
	  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
	  window.location.reload();
	}

	/**
	 * @name angular.getTestability
	 * @module ng
	 * @description
	 * Get the testability service for the instance of Angular on the given
	 * element.
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 */
	function getTestability(rootElement) {
	  var injector = angular.element(rootElement).injector();
	  if (!injector) {
	    throw ngMinErr('test',
	      'no injector found for element argument to getTestability');
	  }
	  return injector.get('$$testability');
	}

	var SNAKE_CASE_REGEXP = /[A-Z]/g;
	function snake_case(name, separator) {
	  separator = separator || '_';
	  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
	    return (pos ? separator : '') + letter.toLowerCase();
	  });
	}

	var bindJQueryFired = false;
	function bindJQuery() {
	  var originalCleanData;

	  if (bindJQueryFired) {
	    return;
	  }

	  // bind to jQuery if present;
	  var jqName = jq();
	  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)
	           !jqName             ? undefined     :   // use jqLite
	                                 window[jqName];   // use jQuery specified by `ngJq`

	  // Use jQuery if it exists with proper functionality, otherwise default to us.
	  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
	  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
	  // versions. It will not work for sure with jQuery <1.7, though.
	  if (jQuery && jQuery.fn.on) {
	    jqLite = jQuery;
	    extend(jQuery.fn, {
	      scope: JQLitePrototype.scope,
	      isolateScope: JQLitePrototype.isolateScope,
	      controller: JQLitePrototype.controller,
	      injector: JQLitePrototype.injector,
	      inheritedData: JQLitePrototype.inheritedData
	    });

	    // All nodes removed from the DOM via various jQuery APIs like .remove()
	    // are passed through jQuery.cleanData. Monkey-patch this method to fire
	    // the $destroy event on all removed nodes.
	    originalCleanData = jQuery.cleanData;
	    jQuery.cleanData = function(elems) {
	      var events;
	      for (var i = 0, elem; (elem = elems[i]) != null; i++) {
	        events = jQuery._data(elem, 'events');
	        if (events && events.$destroy) {
	          jQuery(elem).triggerHandler('$destroy');
	        }
	      }
	      originalCleanData(elems);
	    };
	  } else {
	    jqLite = JQLite;
	  }

	  angular.element = jqLite;

	  // Prevent double-proxying.
	  bindJQueryFired = true;
	}

	/**
	 * throw error if the argument is falsy.
	 */
	function assertArg(arg, name, reason) {
	  if (!arg) {
	    throw ngMinErr('areq', 'Argument \'{0}\' is {1}', (name || '?'), (reason || 'required'));
	  }
	  return arg;
	}

	function assertArgFn(arg, name, acceptArrayAnnotation) {
	  if (acceptArrayAnnotation && isArray(arg)) {
	      arg = arg[arg.length - 1];
	  }

	  assertArg(isFunction(arg), name, 'not a function, got ' +
	      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
	  return arg;
	}

	/**
	 * throw error if the name given is hasOwnProperty
	 * @param  {String} name    the name to test
	 * @param  {String} context the context in which the name is used, such as module or directive
	 */
	function assertNotHasOwnProperty(name, context) {
	  if (name === 'hasOwnProperty') {
	    throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
	  }
	}

	/**
	 * Return the value accessible from the object by path. Any undefined traversals are ignored
	 * @param {Object} obj starting object
	 * @param {String} path path to traverse
	 * @param {boolean} [bindFnToScope=true]
	 * @returns {Object} value as accessible by path
	 */
	//TODO(misko): this function needs to be removed
	function getter(obj, path, bindFnToScope) {
	  if (!path) return obj;
	  var keys = path.split('.');
	  var key;
	  var lastInstance = obj;
	  var len = keys.length;

	  for (var i = 0; i < len; i++) {
	    key = keys[i];
	    if (obj) {
	      obj = (lastInstance = obj)[key];
	    }
	  }
	  if (!bindFnToScope && isFunction(obj)) {
	    return bind(lastInstance, obj);
	  }
	  return obj;
	}

	/**
	 * Return the DOM siblings between the first and last node in the given array.
	 * @param {Array} array like object
	 * @returns {Array} the inputted object or a jqLite collection containing the nodes
	 */
	function getBlockNodes(nodes) {
	  // TODO(perf): update `nodes` instead of creating a new object?
	  var node = nodes[0];
	  var endNode = nodes[nodes.length - 1];
	  var blockNodes;

	  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
	    if (blockNodes || nodes[i] !== node) {
	      if (!blockNodes) {
	        blockNodes = jqLite(slice.call(nodes, 0, i));
	      }
	      blockNodes.push(node);
	    }
	  }

	  return blockNodes || nodes;
	}


	/**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * Related micro-benchmarks:
	 * - http://jsperf.com/object-create2
	 * - http://jsperf.com/proto-map-lookup/2
	 * - http://jsperf.com/for-in-vs-object-keys2
	 *
	 * @returns {Object}
	 */
	function createMap() {
	  return Object.create(null);
	}

	function stringify(value) {
	  if (value == null) { // null || undefined
	    return '';
	  }
	  switch (typeof value) {
	    case 'string':
	      break;
	    case 'number':
	      value = '' + value;
	      break;
	    default:
	      if (hasCustomToString(value) && !isArray(value) && !isDate(value)) {
	        value = value.toString();
	      } else {
	        value = toJson(value);
	      }
	  }

	  return value;
	}

	var NODE_TYPE_ELEMENT = 1;
	var NODE_TYPE_ATTRIBUTE = 2;
	var NODE_TYPE_TEXT = 3;
	var NODE_TYPE_COMMENT = 8;
	var NODE_TYPE_DOCUMENT = 9;
	var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

	/**
	 * @ngdoc type
	 * @name angular.Module
	 * @module ng
	 * @description
	 *
	 * Interface for configuring angular {@link angular.module modules}.
	 */

	function setupModuleLoader(window) {

	  var $injectorMinErr = minErr('$injector');
	  var ngMinErr = minErr('ng');

	  function ensure(obj, name, factory) {
	    return obj[name] || (obj[name] = factory());
	  }

	  var angular = ensure(window, 'angular', Object);

	  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
	  angular.$$minErr = angular.$$minErr || minErr;

	  return ensure(angular, 'module', function() {
	    /** @type {Object.<string, angular.Module>} */
	    var modules = {};

	    /**
	     * @ngdoc function
	     * @name angular.module
	     * @module ng
	     * @description
	     *
	     * The `angular.module` is a global place for creating, registering and retrieving Angular
	     * modules.
	     * All modules (angular core or 3rd party) that should be available to an application must be
	     * registered using this mechanism.
	     *
	     * Passing one argument retrieves an existing {@link angular.Module},
	     * whereas passing more than one argument creates a new {@link angular.Module}
	     *
	     *
	     * # Module
	     *
	     * A module is a collection of services, directives, controllers, filters, and configuration information.
	     * `angular.module` is used to configure the {@link auto.$injector $injector}.
	     *
	     * ```js
	     * // Create a new module
	     * var myModule = angular.module('myModule', []);
	     *
	     * // register a new service
	     * myModule.value('appName', 'MyCoolApp');
	     *
	     * // configure existing services inside initialization blocks.
	     * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
	     * ```
	     *
	     * Then you can create an injector and load your modules like this:
	     *
	     * ```js
	     * var injector = angular.injector(['ng', 'myModule'])
	     * ```
	     *
	     * However it's more likely that you'll just use
	     * {@link ng.directive:ngApp ngApp} or
	     * {@link angular.bootstrap} to simplify this process for you.
	     *
	     * @param {!string} name The name of the module to create or retrieve.
	     * @param {!Array.<string>=} requires If specified then new module is being created. If
	     *        unspecified then the module is being retrieved for further configuration.
	     * @param {Function=} configFn Optional configuration function for the module. Same as
	     *        {@link angular.Module#config Module#config()}.
	     * @returns {angular.Module} new module with the {@link angular.Module} api.
	     */
	    return function module(name, requires, configFn) {
	      var assertNotHasOwnProperty = function(name, context) {
	        if (name === 'hasOwnProperty') {
	          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
	        }
	      };

	      assertNotHasOwnProperty(name, 'module');
	      if (requires && modules.hasOwnProperty(name)) {
	        modules[name] = null;
	      }
	      return ensure(modules, name, function() {
	        if (!requires) {
	          throw $injectorMinErr('nomod', 'Module \'{0}\' is not available! You either misspelled ' +
	             'the module name or forgot to load it. If registering a module ensure that you ' +
	             'specify the dependencies as the second argument.', name);
	        }

	        /** @type {!Array.<Array.<*>>} */
	        var invokeQueue = [];

	        /** @type {!Array.<Function>} */
	        var configBlocks = [];

	        /** @type {!Array.<Function>} */
	        var runBlocks = [];

	        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

	        /** @type {angular.Module} */
	        var moduleInstance = {
	          // Private state
	          _invokeQueue: invokeQueue,
	          _configBlocks: configBlocks,
	          _runBlocks: runBlocks,

	          /**
	           * @ngdoc property
	           * @name angular.Module#requires
	           * @module ng
	           *
	           * @description
	           * Holds the list of modules which the injector will load before the current module is
	           * loaded.
	           */
	          requires: requires,

	          /**
	           * @ngdoc property
	           * @name angular.Module#name
	           * @module ng
	           *
	           * @description
	           * Name of the module.
	           */
	          name: name,


	          /**
	           * @ngdoc method
	           * @name angular.Module#provider
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerType Construction function for creating new instance of the
	           *                                service.
	           * @description
	           * See {@link auto.$provide#provider $provide.provider()}.
	           */
	          provider: invokeLaterAndSetModuleName('$provide', 'provider'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#factory
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerFunction Function for creating new instance of the service.
	           * @description
	           * See {@link auto.$provide#factory $provide.factory()}.
	           */
	          factory: invokeLaterAndSetModuleName('$provide', 'factory'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#service
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} constructor A constructor function that will be instantiated.
	           * @description
	           * See {@link auto.$provide#service $provide.service()}.
	           */
	          service: invokeLaterAndSetModuleName('$provide', 'service'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#value
	           * @module ng
	           * @param {string} name service name
	           * @param {*} object Service instance object.
	           * @description
	           * See {@link auto.$provide#value $provide.value()}.
	           */
	          value: invokeLater('$provide', 'value'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#constant
	           * @module ng
	           * @param {string} name constant name
	           * @param {*} object Constant value.
	           * @description
	           * Because the constants are fixed, they get applied before other provide methods.
	           * See {@link auto.$provide#constant $provide.constant()}.
	           */
	          constant: invokeLater('$provide', 'constant', 'unshift'),

	           /**
	           * @ngdoc method
	           * @name angular.Module#decorator
	           * @module ng
	           * @param {string} name The name of the service to decorate.
	           * @param {Function} decorFn This function will be invoked when the service needs to be
	           *                           instantiated and should return the decorated service instance.
	           * @description
	           * See {@link auto.$provide#decorator $provide.decorator()}.
	           */
	          decorator: invokeLaterAndSetModuleName('$provide', 'decorator', configBlocks),

	          /**
	           * @ngdoc method
	           * @name angular.Module#animation
	           * @module ng
	           * @param {string} name animation name
	           * @param {Function} animationFactory Factory function for creating new instance of an
	           *                                    animation.
	           * @description
	           *
	           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
	           *
	           *
	           * Defines an animation hook that can be later used with
	           * {@link $animate $animate} service and directives that use this service.
	           *
	           * ```js
	           * module.animation('.animation-name', function($inject1, $inject2) {
	           *   return {
	           *     eventName : function(element, done) {
	           *       //code to run the animation
	           *       //once complete, then run done()
	           *       return function cancellationFunction(element) {
	           *         //code to cancel the animation
	           *       }
	           *     }
	           *   }
	           * })
	           * ```
	           *
	           * See {@link ng.$animateProvider#register $animateProvider.register()} and
	           * {@link ngAnimate ngAnimate module} for more information.
	           */
	          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#filter
	           * @module ng
	           * @param {string} name Filter name - this must be a valid angular expression identifier
	           * @param {Function} filterFactory Factory function for creating new instance of filter.
	           * @description
	           * See {@link ng.$filterProvider#register $filterProvider.register()}.
	           *
	           * <div class="alert alert-warning">
	           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	           * (`myapp_subsection_filterx`).
	           * </div>
	           */
	          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#controller
	           * @module ng
	           * @param {string|Object} name Controller name, or an object map of controllers where the
	           *    keys are the names and the values are the constructors.
	           * @param {Function} constructor Controller constructor function.
	           * @description
	           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
	           */
	          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#directive
	           * @module ng
	           * @param {string|Object} name Directive name, or an object map of directives where the
	           *    keys are the names and the values are the factories.
	           * @param {Function} directiveFactory Factory function for creating new instance of
	           * directives.
	           * @description
	           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
	           */
	          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#component
	           * @module ng
	           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
	           * @param {Object} options Component definition object (a simplified
	           *    {@link ng.$compile#directive-definition-object directive definition object})
	           *
	           * @description
	           * See {@link ng.$compileProvider#component $compileProvider.component()}.
	           */
	          component: invokeLaterAndSetModuleName('$compileProvider', 'component'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#config
	           * @module ng
	           * @param {Function} configFn Execute this function on module load. Useful for service
	           *    configuration.
	           * @description
	           * Use this method to register work which needs to be performed on module loading.
	           * For more about how to configure services, see
	           * {@link providers#provider-recipe Provider Recipe}.
	           */
	          config: config,

	          /**
	           * @ngdoc method
	           * @name angular.Module#run
	           * @module ng
	           * @param {Function} initializationFn Execute this function after injector creation.
	           *    Useful for application initialization.
	           * @description
	           * Use this method to register work which should be performed when the injector is done
	           * loading all modules.
	           */
	          run: function(block) {
	            runBlocks.push(block);
	            return this;
	          }
	        };

	        if (configFn) {
	          config(configFn);
	        }

	        return moduleInstance;

	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @param {String=} insertMethod
	         * @returns {angular.Module}
	         */
	        function invokeLater(provider, method, insertMethod, queue) {
	          if (!queue) queue = invokeQueue;
	          return function() {
	            queue[insertMethod || 'push']([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }

	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @returns {angular.Module}
	         */
	        function invokeLaterAndSetModuleName(provider, method, queue) {
	          if (!queue) queue = invokeQueue;
	          return function(recipeName, factoryFunction) {
	            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
	            queue.push([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }
	      });
	    };
	  });

	}

	/* global shallowCopy: true */

	/**
	 * Creates a shallow copy of an object, an array or a primitive.
	 *
	 * Assumes that there are no proto properties for objects.
	 */
	function shallowCopy(src, dst) {
	  if (isArray(src)) {
	    dst = dst || [];

	    for (var i = 0, ii = src.length; i < ii; i++) {
	      dst[i] = src[i];
	    }
	  } else if (isObject(src)) {
	    dst = dst || {};

	    for (var key in src) {
	      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
	        dst[key] = src[key];
	      }
	    }
	  }

	  return dst || src;
	}

	/* global toDebugString: true */

	function serializeObject(obj) {
	  var seen = [];

	  return JSON.stringify(obj, function(key, val) {
	    val = toJsonReplacer(key, val);
	    if (isObject(val)) {

	      if (seen.indexOf(val) >= 0) return '...';

	      seen.push(val);
	    }
	    return val;
	  });
	}

	function toDebugString(obj) {
	  if (typeof obj === 'function') {
	    return obj.toString().replace(/ \{[\s\S]*$/, '');
	  } else if (isUndefined(obj)) {
	    return 'undefined';
	  } else if (typeof obj !== 'string') {
	    return serializeObject(obj);
	  }
	  return obj;
	}

	/* global angularModule: true,
	  version: true,

	  $CompileProvider,

	  htmlAnchorDirective,
	  inputDirective,
	  inputDirective,
	  formDirective,
	  scriptDirective,
	  selectDirective,
	  optionDirective,
	  ngBindDirective,
	  ngBindHtmlDirective,
	  ngBindTemplateDirective,
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective,
	  ngCloakDirective,
	  ngControllerDirective,
	  ngFormDirective,
	  ngHideDirective,
	  ngIfDirective,
	  ngIncludeDirective,
	  ngIncludeFillContentDirective,
	  ngInitDirective,
	  ngNonBindableDirective,
	  ngPluralizeDirective,
	  ngRepeatDirective,
	  ngShowDirective,
	  ngStyleDirective,
	  ngSwitchDirective,
	  ngSwitchWhenDirective,
	  ngSwitchDefaultDirective,
	  ngOptionsDirective,
	  ngTranscludeDirective,
	  ngModelDirective,
	  ngListDirective,
	  ngChangeDirective,
	  patternDirective,
	  patternDirective,
	  requiredDirective,
	  requiredDirective,
	  minlengthDirective,
	  minlengthDirective,
	  maxlengthDirective,
	  maxlengthDirective,
	  ngValueDirective,
	  ngModelOptionsDirective,
	  ngAttributeAliasDirectives,
	  ngEventDirectives,

	  $AnchorScrollProvider,
	  $AnimateProvider,
	  $CoreAnimateCssProvider,
	  $$CoreAnimateJsProvider,
	  $$CoreAnimateQueueProvider,
	  $$AnimateRunnerFactoryProvider,
	  $$AnimateAsyncRunFactoryProvider,
	  $BrowserProvider,
	  $CacheFactoryProvider,
	  $ControllerProvider,
	  $DateProvider,
	  $DocumentProvider,
	  $$IsDocumentHiddenProvider,
	  $ExceptionHandlerProvider,
	  $FilterProvider,
	  $$ForceReflowProvider,
	  $InterpolateProvider,
	  $IntervalProvider,
	  $$HashMapProvider,
	  $HttpProvider,
	  $HttpParamSerializerProvider,
	  $HttpParamSerializerJQLikeProvider,
	  $HttpBackendProvider,
	  $xhrFactoryProvider,
	  $jsonpCallbacksProvider,
	  $LocationProvider,
	  $LogProvider,
	  $ParseProvider,
	  $RootScopeProvider,
	  $QProvider,
	  $$QProvider,
	  $$SanitizeUriProvider,
	  $SceProvider,
	  $SceDelegateProvider,
	  $SnifferProvider,
	  $TemplateCacheProvider,
	  $TemplateRequestProvider,
	  $$TestabilityProvider,
	  $TimeoutProvider,
	  $$RAFProvider,
	  $WindowProvider,
	  $$jqLiteProvider,
	  $$CookieReaderProvider
	*/


	/**
	 * @ngdoc object
	 * @name angular.version
	 * @module ng
	 * @description
	 * An object that contains information about the current AngularJS version.
	 *
	 * This object has the following properties:
	 *
	 * - `full` – `{string}` – Full version string, such as "0.9.18".
	 * - `major` – `{number}` – Major version number, such as "0".
	 * - `minor` – `{number}` – Minor version number, such as "9".
	 * - `dot` – `{number}` – Dot version number, such as "18".
	 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
	 */
	var version = {
	  // These placeholder strings will be replaced by grunt's `build` task.
	  // They need to be double- or single-quoted.
	  full: '1.6.0',
	  major: 1,
	  minor: 6,
	  dot: 0,
	  codeName: 'rainbow-tsunami'
	};


	function publishExternalAPI(angular) {
	  extend(angular, {
	    'bootstrap': bootstrap,
	    'copy': copy,
	    'extend': extend,
	    'merge': merge,
	    'equals': equals,
	    'element': jqLite,
	    'forEach': forEach,
	    'injector': createInjector,
	    'noop': noop,
	    'bind': bind,
	    'toJson': toJson,
	    'fromJson': fromJson,
	    'identity': identity,
	    'isUndefined': isUndefined,
	    'isDefined': isDefined,
	    'isString': isString,
	    'isFunction': isFunction,
	    'isObject': isObject,
	    'isNumber': isNumber,
	    'isElement': isElement,
	    'isArray': isArray,
	    'version': version,
	    'isDate': isDate,
	    'lowercase': lowercase,
	    'uppercase': uppercase,
	    'callbacks': {$$counter: 0},
	    'getTestability': getTestability,
	    'reloadWithDebugInfo': reloadWithDebugInfo,
	    '$$minErr': minErr,
	    '$$csp': csp,
	    '$$encodeUriSegment': encodeUriSegment,
	    '$$encodeUriQuery': encodeUriQuery,
	    '$$stringify': stringify
	  });

	  angularModule = setupModuleLoader(window);

	  angularModule('ng', ['ngLocale'], ['$provide',
	    function ngModule($provide) {
	      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
	      $provide.provider({
	        $$sanitizeUri: $$SanitizeUriProvider
	      });
	      $provide.provider('$compile', $CompileProvider).
	        directive({
	            a: htmlAnchorDirective,
	            input: inputDirective,
	            textarea: inputDirective,
	            form: formDirective,
	            script: scriptDirective,
	            select: selectDirective,
	            option: optionDirective,
	            ngBind: ngBindDirective,
	            ngBindHtml: ngBindHtmlDirective,
	            ngBindTemplate: ngBindTemplateDirective,
	            ngClass: ngClassDirective,
	            ngClassEven: ngClassEvenDirective,
	            ngClassOdd: ngClassOddDirective,
	            ngCloak: ngCloakDirective,
	            ngController: ngControllerDirective,
	            ngForm: ngFormDirective,
	            ngHide: ngHideDirective,
	            ngIf: ngIfDirective,
	            ngInclude: ngIncludeDirective,
	            ngInit: ngInitDirective,
	            ngNonBindable: ngNonBindableDirective,
	            ngPluralize: ngPluralizeDirective,
	            ngRepeat: ngRepeatDirective,
	            ngShow: ngShowDirective,
	            ngStyle: ngStyleDirective,
	            ngSwitch: ngSwitchDirective,
	            ngSwitchWhen: ngSwitchWhenDirective,
	            ngSwitchDefault: ngSwitchDefaultDirective,
	            ngOptions: ngOptionsDirective,
	            ngTransclude: ngTranscludeDirective,
	            ngModel: ngModelDirective,
	            ngList: ngListDirective,
	            ngChange: ngChangeDirective,
	            pattern: patternDirective,
	            ngPattern: patternDirective,
	            required: requiredDirective,
	            ngRequired: requiredDirective,
	            minlength: minlengthDirective,
	            ngMinlength: minlengthDirective,
	            maxlength: maxlengthDirective,
	            ngMaxlength: maxlengthDirective,
	            ngValue: ngValueDirective,
	            ngModelOptions: ngModelOptionsDirective
	        }).
	        directive({
	          ngInclude: ngIncludeFillContentDirective
	        }).
	        directive(ngAttributeAliasDirectives).
	        directive(ngEventDirectives);
	      $provide.provider({
	        $anchorScroll: $AnchorScrollProvider,
	        $animate: $AnimateProvider,
	        $animateCss: $CoreAnimateCssProvider,
	        $$animateJs: $$CoreAnimateJsProvider,
	        $$animateQueue: $$CoreAnimateQueueProvider,
	        $$AnimateRunner: $$AnimateRunnerFactoryProvider,
	        $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
	        $browser: $BrowserProvider,
	        $cacheFactory: $CacheFactoryProvider,
	        $controller: $ControllerProvider,
	        $document: $DocumentProvider,
	        $$isDocumentHidden: $$IsDocumentHiddenProvider,
	        $exceptionHandler: $ExceptionHandlerProvider,
	        $filter: $FilterProvider,
	        $$forceReflow: $$ForceReflowProvider,
	        $interpolate: $InterpolateProvider,
	        $interval: $IntervalProvider,
	        $http: $HttpProvider,
	        $httpParamSerializer: $HttpParamSerializerProvider,
	        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
	        $httpBackend: $HttpBackendProvider,
	        $xhrFactory: $xhrFactoryProvider,
	        $jsonpCallbacks: $jsonpCallbacksProvider,
	        $location: $LocationProvider,
	        $log: $LogProvider,
	        $parse: $ParseProvider,
	        $rootScope: $RootScopeProvider,
	        $q: $QProvider,
	        $$q: $$QProvider,
	        $sce: $SceProvider,
	        $sceDelegate: $SceDelegateProvider,
	        $sniffer: $SnifferProvider,
	        $templateCache: $TemplateCacheProvider,
	        $templateRequest: $TemplateRequestProvider,
	        $$testability: $$TestabilityProvider,
	        $timeout: $TimeoutProvider,
	        $window: $WindowProvider,
	        $$rAF: $$RAFProvider,
	        $$jqLite: $$jqLiteProvider,
	        $$HashMap: $$HashMapProvider,
	        $$cookieReader: $$CookieReaderProvider
	      });
	    }
	  ]);
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/* global
	  JQLitePrototype: true,
	  BOOLEAN_ATTR: true,
	  ALIASED_ATTR: true
	*/

	//////////////////////////////////
	//JQLite
	//////////////////////////////////

	/**
	 * @ngdoc function
	 * @name angular.element
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
	 *
	 * If jQuery is available, `angular.element` is an alias for the
	 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
	 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
	 *
	 * jqLite is a tiny, API-compatible subset of jQuery that allows
	 * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
	 * commonly needed functionality with the goal of having a very small footprint.
	 *
	 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
	 * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
	 * specific version of jQuery if multiple versions exist on the page.
	 *
	 * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
	 * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
	 *
	 * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
	 * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
	 * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
	 *
	 * ## Angular's jqLite
	 * jqLite provides only the following jQuery methods:
	 *
	 * - [`addClass()`](http://api.jquery.com/addClass/) - Does not support a function as first argument
	 * - [`after()`](http://api.jquery.com/after/)
	 * - [`append()`](http://api.jquery.com/append/)
	 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
	 * - [`bind()`](http://api.jquery.com/bind/) (_deprecated_, use [`on()`](http://api.jquery.com/on/)) - Does not support namespaces, selectors or eventData
	 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
	 * - [`clone()`](http://api.jquery.com/clone/)
	 * - [`contents()`](http://api.jquery.com/contents/)
	 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
	 *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
	 * - [`data()`](http://api.jquery.com/data/)
	 * - [`detach()`](http://api.jquery.com/detach/)
	 * - [`empty()`](http://api.jquery.com/empty/)
	 * - [`eq()`](http://api.jquery.com/eq/)
	 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
	 * - [`hasClass()`](http://api.jquery.com/hasClass/)
	 * - [`html()`](http://api.jquery.com/html/)
	 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
	 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
	 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
	 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
	 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
	 * - [`prepend()`](http://api.jquery.com/prepend/)
	 * - [`prop()`](http://api.jquery.com/prop/)
	 * - [`ready()`](http://api.jquery.com/ready/) (_deprecated_, use `angular.element(callback)` instead of `angular.element(document).ready(callback)`)
	 * - [`remove()`](http://api.jquery.com/remove/)
	 * - [`removeAttr()`](http://api.jquery.com/removeAttr/) - Does not support multiple attributes
	 * - [`removeClass()`](http://api.jquery.com/removeClass/) - Does not support a function as first argument
	 * - [`removeData()`](http://api.jquery.com/removeData/)
	 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
	 * - [`text()`](http://api.jquery.com/text/)
	 * - [`toggleClass()`](http://api.jquery.com/toggleClass/) - Does not support a function as first argument
	 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers
	 * - [`unbind()`](http://api.jquery.com/unbind/) (_deprecated_, use [`off()`](http://api.jquery.com/off/)) - Does not support namespaces or event object as parameter
	 * - [`val()`](http://api.jquery.com/val/)
	 * - [`wrap()`](http://api.jquery.com/wrap/)
	 *
	 * ## jQuery/jqLite Extras
	 * Angular also provides the following additional methods and events to both jQuery and jqLite:
	 *
	 * ### Events
	 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
	 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
	 *    element before it is removed.
	 *
	 * ### Methods
	 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
	 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
	 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
	 *   `'ngModel'`).
	 * - `injector()` - retrieves the injector of the current element or its parent.
	 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
	 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
	 *   be enabled.
	 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
	 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
	 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
	 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
	 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
	 *   parent element is reached.
	 *
	 * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
	 * https://github.com/angular/angular.js/issues/14251 for more information.
	 *
	 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
	 * @returns {Object} jQuery object.
	 */

	JQLite.expando = 'ng339';

	var jqCache = JQLite.cache = {},
	    jqId = 1;

	/*
	 * !!! This is an undocumented "private" function !!!
	 */
	JQLite._data = function(node) {
	  //jQuery always returns an object on cache miss
	  return this.cache[node[this.expando]] || {};
	};

	function jqNextId() { return ++jqId; }


	var DASH_LOWERCASE_REGEXP = /-([a-z])/g;
	var MS_HACK_REGEXP = /^-ms-/;
	var MOUSE_EVENT_MAP = { mouseleave: 'mouseout', mouseenter: 'mouseover' };
	var jqLiteMinErr = minErr('jqLite');

	/**
	 * Converts kebab-case to camelCase.
	 * There is also a special case for the ms prefix starting with a lowercase letter.
	 * @param name Name to normalize
	 */
	function cssKebabToCamel(name) {
	    return kebabToCamel(name.replace(MS_HACK_REGEXP, 'ms-'));
	}

	function fnCamelCaseReplace(all, letter) {
	  return letter.toUpperCase();
	}

	/**
	 * Converts kebab-case to camelCase.
	 * @param name Name to normalize
	 */
	function kebabToCamel(name) {
	  return name
	    .replace(DASH_LOWERCASE_REGEXP, fnCamelCaseReplace);
	}

	var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
	var HTML_REGEXP = /<|&#?\w+;/;
	var TAG_NAME_REGEXP = /<([\w:-]+)/;
	var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;

	var wrapMap = {
	  'option': [1, '<select multiple="multiple">', '</select>'],

	  'thead': [1, '<table>', '</table>'],
	  'col': [2, '<table><colgroup>', '</colgroup></table>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
	  '_default': [0, '', '']
	};

	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function jqLiteIsTextNode(html) {
	  return !HTML_REGEXP.test(html);
	}

	function jqLiteAcceptsData(node) {
	  // The window object can accept data but has no nodeType
	  // Otherwise we are only interested in elements (1) and documents (9)
	  var nodeType = node.nodeType;
	  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
	}

	function jqLiteHasData(node) {
	  for (var key in jqCache[node.ng339]) {
	    return true;
	  }
	  return false;
	}

	function jqLiteCleanData(nodes) {
	  for (var i = 0, ii = nodes.length; i < ii; i++) {
	    jqLiteRemoveData(nodes[i]);
	  }
	}

	function jqLiteBuildFragment(html, context) {
	  var tmp, tag, wrap,
	      fragment = context.createDocumentFragment(),
	      nodes = [], i;

	  if (jqLiteIsTextNode(html)) {
	    // Convert non-html into a text node
	    nodes.push(context.createTextNode(html));
	  } else {
	    // Convert html into DOM nodes
	    tmp = fragment.appendChild(context.createElement('div'));
	    tag = (TAG_NAME_REGEXP.exec(html) || ['', ''])[1].toLowerCase();
	    wrap = wrapMap[tag] || wrapMap._default;
	    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, '<$1></$2>') + wrap[2];

	    // Descend through wrappers to the right content
	    i = wrap[0];
	    while (i--) {
	      tmp = tmp.lastChild;
	    }

	    nodes = concat(nodes, tmp.childNodes);

	    tmp = fragment.firstChild;
	    tmp.textContent = '';
	  }

	  // Remove wrapper from fragment
	  fragment.textContent = '';
	  fragment.innerHTML = ''; // Clear inner HTML
	  forEach(nodes, function(node) {
	    fragment.appendChild(node);
	  });

	  return fragment;
	}

	function jqLiteParseHTML(html, context) {
	  context = context || window.document;
	  var parsed;

	  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
	    return [context.createElement(parsed[1])];
	  }

	  if ((parsed = jqLiteBuildFragment(html, context))) {
	    return parsed.childNodes;
	  }

	  return [];
	}

	function jqLiteWrapNode(node, wrapper) {
	  var parent = node.parentNode;

	  if (parent) {
	    parent.replaceChild(wrapper, node);
	  }

	  wrapper.appendChild(node);
	}


	// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
	var jqLiteContains = window.Node.prototype.contains || /** @this */ function(arg) {
	  // eslint-disable-next-line no-bitwise
	  return !!(this.compareDocumentPosition(arg) & 16);
	};

	/////////////////////////////////////////////
	function JQLite(element) {
	  if (element instanceof JQLite) {
	    return element;
	  }

	  var argIsString;

	  if (isString(element)) {
	    element = trim(element);
	    argIsString = true;
	  }
	  if (!(this instanceof JQLite)) {
	    if (argIsString && element.charAt(0) !== '<') {
	      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
	    }
	    return new JQLite(element);
	  }

	  if (argIsString) {
	    jqLiteAddNodes(this, jqLiteParseHTML(element));
	  } else if (isFunction(element)) {
	    jqLiteReady(element);
	  } else {
	    jqLiteAddNodes(this, element);
	  }
	}

	function jqLiteClone(element) {
	  return element.cloneNode(true);
	}

	function jqLiteDealoc(element, onlyDescendants) {
	  if (!onlyDescendants) jqLiteRemoveData(element);

	  if (element.querySelectorAll) {
	    var descendants = element.querySelectorAll('*');
	    for (var i = 0, l = descendants.length; i < l; i++) {
	      jqLiteRemoveData(descendants[i]);
	    }
	  }
	}

	function jqLiteOff(element, type, fn, unsupported) {
	  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

	  var expandoStore = jqLiteExpandoStore(element);
	  var events = expandoStore && expandoStore.events;
	  var handle = expandoStore && expandoStore.handle;

	  if (!handle) return; //no listeners registered

	  if (!type) {
	    for (type in events) {
	      if (type !== '$destroy') {
	        element.removeEventListener(type, handle);
	      }
	      delete events[type];
	    }
	  } else {

	    var removeHandler = function(type) {
	      var listenerFns = events[type];
	      if (isDefined(fn)) {
	        arrayRemove(listenerFns || [], fn);
	      }
	      if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
	        element.removeEventListener(type, handle);
	        delete events[type];
	      }
	    };

	    forEach(type.split(' '), function(type) {
	      removeHandler(type);
	      if (MOUSE_EVENT_MAP[type]) {
	        removeHandler(MOUSE_EVENT_MAP[type]);
	      }
	    });
	  }
	}

	function jqLiteRemoveData(element, name) {
	  var expandoId = element.ng339;
	  var expandoStore = expandoId && jqCache[expandoId];

	  if (expandoStore) {
	    if (name) {
	      delete expandoStore.data[name];
	      return;
	    }

	    if (expandoStore.handle) {
	      if (expandoStore.events.$destroy) {
	        expandoStore.handle({}, '$destroy');
	      }
	      jqLiteOff(element);
	    }
	    delete jqCache[expandoId];
	    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
	  }
	}


	function jqLiteExpandoStore(element, createIfNecessary) {
	  var expandoId = element.ng339,
	      expandoStore = expandoId && jqCache[expandoId];

	  if (createIfNecessary && !expandoStore) {
	    element.ng339 = expandoId = jqNextId();
	    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
	  }

	  return expandoStore;
	}


	function jqLiteData(element, key, value) {
	  if (jqLiteAcceptsData(element)) {
	    var prop;

	    var isSimpleSetter = isDefined(value);
	    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
	    var massGetter = !key;
	    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
	    var data = expandoStore && expandoStore.data;

	    if (isSimpleSetter) { // data('key', value)
	      data[kebabToCamel(key)] = value;
	    } else {
	      if (massGetter) {  // data()
	        return data;
	      } else {
	        if (isSimpleGetter) { // data('key')
	          // don't force creation of expandoStore if it doesn't exist yet
	          return data && data[kebabToCamel(key)];
	        } else { // mass-setter: data({key1: val1, key2: val2})
	          for (prop in key) {
	            data[kebabToCamel(prop)] = key[prop];
	          }
	        }
	      }
	    }
	  }
	}

	function jqLiteHasClass(element, selector) {
	  if (!element.getAttribute) return false;
	  return ((' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').
	      indexOf(' ' + selector + ' ') > -1);
	}

	function jqLiteRemoveClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    forEach(cssClasses.split(' '), function(cssClass) {
	      element.setAttribute('class', trim(
	          (' ' + (element.getAttribute('class') || '') + ' ')
	          .replace(/[\n\t]/g, ' ')
	          .replace(' ' + trim(cssClass) + ' ', ' '))
	      );
	    });
	  }
	}

	function jqLiteAddClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
	                            .replace(/[\n\t]/g, ' ');

	    forEach(cssClasses.split(' '), function(cssClass) {
	      cssClass = trim(cssClass);
	      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
	        existingClasses += cssClass + ' ';
	      }
	    });

	    element.setAttribute('class', trim(existingClasses));
	  }
	}


	function jqLiteAddNodes(root, elements) {
	  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

	  if (elements) {

	    // if a Node (the most common case)
	    if (elements.nodeType) {
	      root[root.length++] = elements;
	    } else {
	      var length = elements.length;

	      // if an Array or NodeList and not a Window
	      if (typeof length === 'number' && elements.window !== elements) {
	        if (length) {
	          for (var i = 0; i < length; i++) {
	            root[root.length++] = elements[i];
	          }
	        }
	      } else {
	        root[root.length++] = elements;
	      }
	    }
	  }
	}


	function jqLiteController(element, name) {
	  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
	}

	function jqLiteInheritedData(element, name, value) {
	  // if element is the document object work with the html element instead
	  // this makes $(document).scope() possible
	  if (element.nodeType === NODE_TYPE_DOCUMENT) {
	    element = element.documentElement;
	  }
	  var names = isArray(name) ? name : [name];

	  while (element) {
	    for (var i = 0, ii = names.length; i < ii; i++) {
	      if (isDefined(value = jqLite.data(element, names[i]))) return value;
	    }

	    // If dealing with a document fragment node with a host element, and no parent, use the host
	    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
	    // to lookup parent controllers.
	    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
	  }
	}

	function jqLiteEmpty(element) {
	  jqLiteDealoc(element, true);
	  while (element.firstChild) {
	    element.removeChild(element.firstChild);
	  }
	}

	function jqLiteRemove(element, keepData) {
	  if (!keepData) jqLiteDealoc(element);
	  var parent = element.parentNode;
	  if (parent) parent.removeChild(element);
	}


	function jqLiteDocumentLoaded(action, win) {
	  win = win || window;
	  if (win.document.readyState === 'complete') {
	    // Force the action to be run async for consistent behavior
	    // from the action's point of view
	    // i.e. it will definitely not be in a $apply
	    win.setTimeout(action);
	  } else {
	    // No need to unbind this handler as load is only ever called once
	    jqLite(win).on('load', action);
	  }
	}

	function jqLiteReady(fn) {
	  function trigger() {
	    window.document.removeEventListener('DOMContentLoaded', trigger);
	    window.removeEventListener('load', trigger);
	    fn();
	  }

	  // check if document is already loaded
	  if (window.document.readyState === 'complete') {
	    window.setTimeout(fn);
	  } else {
	    // We can not use jqLite since we are not done loading and jQuery could be loaded later.

	    // Works for modern browsers and IE9
	    window.document.addEventListener('DOMContentLoaded', trigger);

	    // Fallback to window.onload for others
	    window.addEventListener('load', trigger);
	  }
	}

	//////////////////////////////////////////
	// Functions which are declared directly.
	//////////////////////////////////////////
	var JQLitePrototype = JQLite.prototype = {
	  ready: jqLiteReady,
	  toString: function() {
	    var value = [];
	    forEach(this, function(e) { value.push('' + e);});
	    return '[' + value.join(', ') + ']';
	  },

	  eq: function(index) {
	      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
	  },

	  length: 0,
	  push: push,
	  sort: [].sort,
	  splice: [].splice
	};

	//////////////////////////////////////////
	// Functions iterating getter/setters.
	// these functions return self on setter and
	// value on get.
	//////////////////////////////////////////
	var BOOLEAN_ATTR = {};
	forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
	  BOOLEAN_ATTR[lowercase(value)] = value;
	});
	var BOOLEAN_ELEMENTS = {};
	forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
	  BOOLEAN_ELEMENTS[value] = true;
	});
	var ALIASED_ATTR = {
	  'ngMinlength': 'minlength',
	  'ngMaxlength': 'maxlength',
	  'ngMin': 'min',
	  'ngMax': 'max',
	  'ngPattern': 'pattern',
	  'ngStep': 'step'
	};

	function getBooleanAttrName(element, name) {
	  // check dom last since we will most likely fail on name
	  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

	  // booleanAttr is here twice to minimize DOM access
	  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
	}

	function getAliasedAttrName(name) {
	  return ALIASED_ATTR[name];
	}

	forEach({
	  data: jqLiteData,
	  removeData: jqLiteRemoveData,
	  hasData: jqLiteHasData,
	  cleanData: jqLiteCleanData
	}, function(fn, name) {
	  JQLite[name] = fn;
	});

	forEach({
	  data: jqLiteData,
	  inheritedData: jqLiteInheritedData,

	  scope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
	  },

	  isolateScope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
	  },

	  controller: jqLiteController,

	  injector: function(element) {
	    return jqLiteInheritedData(element, '$injector');
	  },

	  removeAttr: function(element, name) {
	    element.removeAttribute(name);
	  },

	  hasClass: jqLiteHasClass,

	  css: function(element, name, value) {
	    name = cssKebabToCamel(name);

	    if (isDefined(value)) {
	      element.style[name] = value;
	    } else {
	      return element.style[name];
	    }
	  },

	  attr: function(element, name, value) {
	    var ret;
	    var nodeType = element.nodeType;
	    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT ||
	      !element.getAttribute) {
	      return;
	    }

	    var lowercasedName = lowercase(name);
	    var isBooleanAttr = BOOLEAN_ATTR[lowercasedName];

	    if (isDefined(value)) {
	      // setter

	      if (value === null || (value === false && isBooleanAttr)) {
	        element.removeAttribute(name);
	      } else {
	        element.setAttribute(name, isBooleanAttr ? lowercasedName : value);
	      }
	    } else {
	      // getter

	      ret = element.getAttribute(name);

	      if (isBooleanAttr && ret !== null) {
	        ret = lowercasedName;
	      }
	      // Normalize non-existing attributes to undefined (as jQuery).
	      return ret === null ? undefined : ret;
	    }
	  },

	  prop: function(element, name, value) {
	    if (isDefined(value)) {
	      element[name] = value;
	    } else {
	      return element[name];
	    }
	  },

	  text: (function() {
	    getText.$dv = '';
	    return getText;

	    function getText(element, value) {
	      if (isUndefined(value)) {
	        var nodeType = element.nodeType;
	        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
	      }
	      element.textContent = value;
	    }
	  })(),

	  val: function(element, value) {
	    if (isUndefined(value)) {
	      if (element.multiple && nodeName_(element) === 'select') {
	        var result = [];
	        forEach(element.options, function(option) {
	          if (option.selected) {
	            result.push(option.value || option.text);
	          }
	        });
	        return result;
	      }
	      return element.value;
	    }
	    element.value = value;
	  },

	  html: function(element, value) {
	    if (isUndefined(value)) {
	      return element.innerHTML;
	    }
	    jqLiteDealoc(element, true);
	    element.innerHTML = value;
	  },

	  empty: jqLiteEmpty
	}, function(fn, name) {
	  /**
	   * Properties: writes return selection, reads return first value
	   */
	  JQLite.prototype[name] = function(arg1, arg2) {
	    var i, key;
	    var nodeCount = this.length;

	    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
	    // in a way that survives minification.
	    // jqLiteEmpty takes no arguments but is a setter.
	    if (fn !== jqLiteEmpty &&
	        (isUndefined((fn.length === 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {
	      if (isObject(arg1)) {

	        // we are a write, but the object properties are the key/values
	        for (i = 0; i < nodeCount; i++) {
	          if (fn === jqLiteData) {
	            // data() takes the whole object in jQuery
	            fn(this[i], arg1);
	          } else {
	            for (key in arg1) {
	              fn(this[i], key, arg1[key]);
	            }
	          }
	        }
	        // return self for chaining
	        return this;
	      } else {
	        // we are a read, so read the first child.
	        // TODO: do we still need this?
	        var value = fn.$dv;
	        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
	        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;
	        for (var j = 0; j < jj; j++) {
	          var nodeValue = fn(this[j], arg1, arg2);
	          value = value ? value + nodeValue : nodeValue;
	        }
	        return value;
	      }
	    } else {
	      // we are a write, so apply to all children
	      for (i = 0; i < nodeCount; i++) {
	        fn(this[i], arg1, arg2);
	      }
	      // return self for chaining
	      return this;
	    }
	  };
	});

	function createEventHandler(element, events) {
	  var eventHandler = function(event, type) {
	    // jQuery specific api
	    event.isDefaultPrevented = function() {
	      return event.defaultPrevented;
	    };

	    var eventFns = events[type || event.type];
	    var eventFnsLength = eventFns ? eventFns.length : 0;

	    if (!eventFnsLength) return;

	    if (isUndefined(event.immediatePropagationStopped)) {
	      var originalStopImmediatePropagation = event.stopImmediatePropagation;
	      event.stopImmediatePropagation = function() {
	        event.immediatePropagationStopped = true;

	        if (event.stopPropagation) {
	          event.stopPropagation();
	        }

	        if (originalStopImmediatePropagation) {
	          originalStopImmediatePropagation.call(event);
	        }
	      };
	    }

	    event.isImmediatePropagationStopped = function() {
	      return event.immediatePropagationStopped === true;
	    };

	    // Some events have special handlers that wrap the real handler
	    var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;

	    // Copy event handlers in case event handlers array is modified during execution.
	    if ((eventFnsLength > 1)) {
	      eventFns = shallowCopy(eventFns);
	    }

	    for (var i = 0; i < eventFnsLength; i++) {
	      if (!event.isImmediatePropagationStopped()) {
	        handlerWrapper(element, event, eventFns[i]);
	      }
	    }
	  };

	  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
	  //       events on `element`
	  eventHandler.elem = element;
	  return eventHandler;
	}

	function defaultHandlerWrapper(element, event, handler) {
	  handler.call(element, event);
	}

	function specialMouseHandlerWrapper(target, event, handler) {
	  // Refer to jQuery's implementation of mouseenter & mouseleave
	  // Read about mouseenter and mouseleave:
	  // http://www.quirksmode.org/js/events_mouse.html#link8
	  var related = event.relatedTarget;
	  // For mousenter/leave call the handler if related is outside the target.
	  // NB: No relatedTarget if the mouse left/entered the browser window
	  if (!related || (related !== target && !jqLiteContains.call(target, related))) {
	    handler.call(target, event);
	  }
	}

	//////////////////////////////////////////
	// Functions iterating traversal.
	// These functions chain results into a single
	// selector.
	//////////////////////////////////////////
	forEach({
	  removeData: jqLiteRemoveData,

	  on: function jqLiteOn(element, type, fn, unsupported) {
	    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

	    // Do not add event handlers to non-elements because they will not be cleaned up.
	    if (!jqLiteAcceptsData(element)) {
	      return;
	    }

	    var expandoStore = jqLiteExpandoStore(element, true);
	    var events = expandoStore.events;
	    var handle = expandoStore.handle;

	    if (!handle) {
	      handle = expandoStore.handle = createEventHandler(element, events);
	    }

	    // http://jsperf.com/string-indexof-vs-split
	    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
	    var i = types.length;

	    var addHandler = function(type, specialHandlerWrapper, noEventListener) {
	      var eventFns = events[type];

	      if (!eventFns) {
	        eventFns = events[type] = [];
	        eventFns.specialHandlerWrapper = specialHandlerWrapper;
	        if (type !== '$destroy' && !noEventListener) {
	          element.addEventListener(type, handle);
	        }
	      }

	      eventFns.push(fn);
	    };

	    while (i--) {
	      type = types[i];
	      if (MOUSE_EVENT_MAP[type]) {
	        addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
	        addHandler(type, undefined, true);
	      } else {
	        addHandler(type);
	      }
	    }
	  },

	  off: jqLiteOff,

	  one: function(element, type, fn) {
	    element = jqLite(element);

	    //add the listener twice so that when it is called
	    //you can remove the original function and still be
	    //able to call element.off(ev, fn) normally
	    element.on(type, function onFn() {
	      element.off(type, fn);
	      element.off(type, onFn);
	    });
	    element.on(type, fn);
	  },

	  replaceWith: function(element, replaceNode) {
	    var index, parent = element.parentNode;
	    jqLiteDealoc(element);
	    forEach(new JQLite(replaceNode), function(node) {
	      if (index) {
	        parent.insertBefore(node, index.nextSibling);
	      } else {
	        parent.replaceChild(node, element);
	      }
	      index = node;
	    });
	  },

	  children: function(element) {
	    var children = [];
	    forEach(element.childNodes, function(element) {
	      if (element.nodeType === NODE_TYPE_ELEMENT) {
	        children.push(element);
	      }
	    });
	    return children;
	  },

	  contents: function(element) {
	    return element.contentDocument || element.childNodes || [];
	  },

	  append: function(element, node) {
	    var nodeType = element.nodeType;
	    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

	    node = new JQLite(node);

	    for (var i = 0, ii = node.length; i < ii; i++) {
	      var child = node[i];
	      element.appendChild(child);
	    }
	  },

	  prepend: function(element, node) {
	    if (element.nodeType === NODE_TYPE_ELEMENT) {
	      var index = element.firstChild;
	      forEach(new JQLite(node), function(child) {
	        element.insertBefore(child, index);
	      });
	    }
	  },

	  wrap: function(element, wrapNode) {
	    jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0]);
	  },

	  remove: jqLiteRemove,

	  detach: function(element) {
	    jqLiteRemove(element, true);
	  },

	  after: function(element, newElement) {
	    var index = element, parent = element.parentNode;
	    newElement = new JQLite(newElement);

	    for (var i = 0, ii = newElement.length; i < ii; i++) {
	      var node = newElement[i];
	      parent.insertBefore(node, index.nextSibling);
	      index = node;
	    }
	  },

	  addClass: jqLiteAddClass,
	  removeClass: jqLiteRemoveClass,

	  toggleClass: function(element, selector, condition) {
	    if (selector) {
	      forEach(selector.split(' '), function(className) {
	        var classCondition = condition;
	        if (isUndefined(classCondition)) {
	          classCondition = !jqLiteHasClass(element, className);
	        }
	        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
	      });
	    }
	  },

	  parent: function(element) {
	    var parent = element.parentNode;
	    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
	  },

	  next: function(element) {
	    return element.nextElementSibling;
	  },

	  find: function(element, selector) {
	    if (element.getElementsByTagName) {
	      return element.getElementsByTagName(selector);
	    } else {
	      return [];
	    }
	  },

	  clone: jqLiteClone,

	  triggerHandler: function(element, event, extraParameters) {

	    var dummyEvent, eventFnsCopy, handlerArgs;
	    var eventName = event.type || event;
	    var expandoStore = jqLiteExpandoStore(element);
	    var events = expandoStore && expandoStore.events;
	    var eventFns = events && events[eventName];

	    if (eventFns) {
	      // Create a dummy event to pass to the handlers
	      dummyEvent = {
	        preventDefault: function() { this.defaultPrevented = true; },
	        isDefaultPrevented: function() { return this.defaultPrevented === true; },
	        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
	        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
	        stopPropagation: noop,
	        type: eventName,
	        target: element
	      };

	      // If a custom event was provided then extend our dummy event with it
	      if (event.type) {
	        dummyEvent = extend(dummyEvent, event);
	      }

	      // Copy event handlers in case event handlers array is modified during execution.
	      eventFnsCopy = shallowCopy(eventFns);
	      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

	      forEach(eventFnsCopy, function(fn) {
	        if (!dummyEvent.isImmediatePropagationStopped()) {
	          fn.apply(element, handlerArgs);
	        }
	      });
	    }
	  }
	}, function(fn, name) {
	  /**
	   * chaining functions
	   */
	  JQLite.prototype[name] = function(arg1, arg2, arg3) {
	    var value;

	    for (var i = 0, ii = this.length; i < ii; i++) {
	      if (isUndefined(value)) {
	        value = fn(this[i], arg1, arg2, arg3);
	        if (isDefined(value)) {
	          // any function which returns a value needs to be wrapped
	          value = jqLite(value);
	        }
	      } else {
	        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
	      }
	    }
	    return isDefined(value) ? value : this;
	  };
	});

	// bind legacy bind/unbind to on/off
	JQLite.prototype.bind = JQLite.prototype.on;
	JQLite.prototype.unbind = JQLite.prototype.off;


	// Provider for private $$jqLite service
	/** @this */
	function $$jqLiteProvider() {
	  this.$get = function $$jqLite() {
	    return extend(JQLite, {
	      hasClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteHasClass(node, classes);
	      },
	      addClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteAddClass(node, classes);
	      },
	      removeClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteRemoveClass(node, classes);
	      }
	    });
	  };
	}

	/**
	 * Computes a hash of an 'obj'.
	 * Hash of a:
	 *  string is string
	 *  number is number as string
	 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
	 *         that is also assigned to the $$hashKey property of the object.
	 *
	 * @param obj
	 * @returns {string} hash string such that the same input will have the same hash string.
	 *         The resulting string key is in 'type:hashKey' format.
	 */
	function hashKey(obj, nextUidFn) {
	  var key = obj && obj.$$hashKey;

	  if (key) {
	    if (typeof key === 'function') {
	      key = obj.$$hashKey();
	    }
	    return key;
	  }

	  var objType = typeof obj;
	  if (objType === 'function' || (objType === 'object' && obj !== null)) {
	    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
	  } else {
	    key = objType + ':' + obj;
	  }

	  return key;
	}

	/**
	 * HashMap which can use objects as keys
	 */
	function HashMap(array, isolatedUid) {
	  if (isolatedUid) {
	    var uid = 0;
	    this.nextUid = function() {
	      return ++uid;
	    };
	  }
	  forEach(array, this.put, this);
	}
	HashMap.prototype = {
	  /**
	   * Store key value pair
	   * @param key key to store can be any type
	   * @param value value to store can be any type
	   */
	  put: function(key, value) {
	    this[hashKey(key, this.nextUid)] = value;
	  },

	  /**
	   * @param key
	   * @returns {Object} the value for the key
	   */
	  get: function(key) {
	    return this[hashKey(key, this.nextUid)];
	  },

	  /**
	   * Remove the key/value pair
	   * @param key
	   */
	  remove: function(key) {
	    var value = this[key = hashKey(key, this.nextUid)];
	    delete this[key];
	    return value;
	  }
	};

	var $$HashMapProvider = [/** @this */function() {
	  this.$get = [function() {
	    return HashMap;
	  }];
	}];

	/**
	 * @ngdoc function
	 * @module ng
	 * @name angular.injector
	 * @kind function
	 *
	 * @description
	 * Creates an injector object that can be used for retrieving services as well as for
	 * dependency injection (see {@link guide/di dependency injection}).
	 *
	 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
	 *     {@link angular.module}. The `ng` module must be explicitly added.
	 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
	 *     disallows argument name annotation inference.
	 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
	 *
	 * @example
	 * Typical usage
	 * ```js
	 *   // create an injector
	 *   var $injector = angular.injector(['ng']);
	 *
	 *   // use the injector to kick off your application
	 *   // use the type inference to auto inject arguments, or use implicit injection
	 *   $injector.invoke(function($rootScope, $compile, $document) {
	 *     $compile($document)($rootScope);
	 *     $rootScope.$digest();
	 *   });
	 * ```
	 *
	 * Sometimes you want to get access to the injector of a currently running Angular app
	 * from outside Angular. Perhaps, you want to inject and compile some markup after the
	 * application has been bootstrapped. You can do this using the extra `injector()` added
	 * to JQuery/jqLite elements. See {@link angular.element}.
	 *
	 * *This is fairly rare but could be the case if a third party library is injecting the
	 * markup.*
	 *
	 * In the following example a new block of HTML containing a `ng-controller`
	 * directive is added to the end of the document body by JQuery. We then compile and link
	 * it into the current AngularJS scope.
	 *
	 * ```js
	 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
	 * $(document.body).append($div);
	 *
	 * angular.element(document).injector().invoke(function($compile) {
	 *   var scope = angular.element($div).scope();
	 *   $compile($div)(scope);
	 * });
	 * ```
	 */


	/**
	 * @ngdoc module
	 * @name auto
	 * @installation
	 * @description
	 *
	 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
	 */

	var ARROW_ARG = /^([^(]+?)=>/;
	var FN_ARGS = /^[^(]*\(\s*([^)]*)\)/m;
	var FN_ARG_SPLIT = /,/;
	var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
	var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	var $injectorMinErr = minErr('$injector');

	function stringifyFn(fn) {
	  // Support: Chrome 50-51 only
	  // Creating a new string by adding `' '` at the end, to hack around some bug in Chrome v50/51
	  // (See https://github.com/angular/angular.js/issues/14487.)
	  // TODO (gkalpak): Remove workaround when Chrome v52 is released
	  return Function.prototype.toString.call(fn) + ' ';
	}

	function extractArgs(fn) {
	  var fnText = stringifyFn(fn).replace(STRIP_COMMENTS, ''),
	      args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);
	  return args;
	}

	function anonFn(fn) {
	  // For anonymous functions, showing at the very least the function signature can help in
	  // debugging.
	  var args = extractArgs(fn);
	  if (args) {
	    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
	  }
	  return 'fn';
	}

	function annotate(fn, strictDi, name) {
	  var $inject,
	      argDecl,
	      last;

	  if (typeof fn === 'function') {
	    if (!($inject = fn.$inject)) {
	      $inject = [];
	      if (fn.length) {
	        if (strictDi) {
	          if (!isString(name) || !name) {
	            name = fn.name || anonFn(fn);
	          }
	          throw $injectorMinErr('strictdi',
	            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
	        }
	        argDecl = extractArgs(fn);
	        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
	          arg.replace(FN_ARG, function(all, underscore, name) {
	            $inject.push(name);
	          });
	        });
	      }
	      fn.$inject = $inject;
	    }
	  } else if (isArray(fn)) {
	    last = fn.length - 1;
	    assertArgFn(fn[last], 'fn');
	    $inject = fn.slice(0, last);
	  } else {
	    assertArgFn(fn, 'fn', true);
	  }
	  return $inject;
	}

	///////////////////////////////////////

	/**
	 * @ngdoc service
	 * @name $injector
	 *
	 * @description
	 *
	 * `$injector` is used to retrieve object instances as defined by
	 * {@link auto.$provide provider}, instantiate types, invoke methods,
	 * and load modules.
	 *
	 * The following always holds true:
	 *
	 * ```js
	 *   var $injector = angular.injector();
	 *   expect($injector.get('$injector')).toBe($injector);
	 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
	 * ```
	 *
	 * # Injection Function Annotation
	 *
	 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
	 * following are all valid ways of annotating function with injection arguments and are equivalent.
	 *
	 * ```js
	 *   // inferred (only works if code not minified/obfuscated)
	 *   $injector.invoke(function(serviceA){});
	 *
	 *   // annotated
	 *   function explicit(serviceA) {};
	 *   explicit.$inject = ['serviceA'];
	 *   $injector.invoke(explicit);
	 *
	 *   // inline
	 *   $injector.invoke(['serviceA', function(serviceA){}]);
	 * ```
	 *
	 * ## Inference
	 *
	 * In JavaScript calling `toString()` on a function returns the function definition. The definition
	 * can then be parsed and the function arguments can be extracted. This method of discovering
	 * annotations is disallowed when the injector is in strict mode.
	 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
	 * argument names.
	 *
	 * ## `$inject` Annotation
	 * By adding an `$inject` property onto a function the injection parameters can be specified.
	 *
	 * ## Inline
	 * As an array of injection names, where the last item in the array is the function to call.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#get
	 *
	 * @description
	 * Return an instance of the service.
	 *
	 * @param {string} name The name of the instance to retrieve.
	 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
	 * @return {*} The instance.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#invoke
	 *
	 * @description
	 * Invoke the method and supply the method arguments from the `$injector`.
	 *
	 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
	 *   injected according to the {@link guide/di $inject Annotation} rules.
	 * @param {Object=} self The `this` for the invoked method.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 *                         object first, before the `$injector` is consulted.
	 * @returns {*} the value returned by the invoked `fn` function.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#has
	 *
	 * @description
	 * Allows the user to query if the particular service exists.
	 *
	 * @param {string} name Name of the service to query.
	 * @returns {boolean} `true` if injector has given service.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#instantiate
	 * @description
	 * Create a new instance of JS type. The method takes a constructor function, invokes the new
	 * operator, and supplies all of the arguments to the constructor function as specified by the
	 * constructor annotation.
	 *
	 * @param {Function} Type Annotated constructor function.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 * object first, before the `$injector` is consulted.
	 * @returns {Object} new instance of `Type`.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#annotate
	 *
	 * @description
	 * Returns an array of service names which the function is requesting for injection. This API is
	 * used by the injector to determine which services need to be injected into the function when the
	 * function is invoked. There are three ways in which the function can be annotated with the needed
	 * dependencies.
	 *
	 * # Argument names
	 *
	 * The simplest form is to extract the dependencies from the arguments of the function. This is done
	 * by converting the function into a string using `toString()` method and extracting the argument
	 * names.
	 * ```js
	 *   // Given
	 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * You can disallow this method by using strict injection mode.
	 *
	 * This method does not work with code minification / obfuscation. For this reason the following
	 * annotation strategies are supported.
	 *
	 * # The `$inject` property
	 *
	 * If a function has an `$inject` property and its value is an array of strings, then the strings
	 * represent names of services to be injected into the function.
	 * ```js
	 *   // Given
	 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
	 *   // Define function dependencies
	 *   MyController['$inject'] = ['$scope', '$route'];
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * # The array notation
	 *
	 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
	 * is very inconvenient. In these situations using the array notation to specify the dependencies in
	 * a way that survives minification is a better choice:
	 *
	 * ```js
	 *   // We wish to write this (not minification / obfuscation safe)
	 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
	 *
	 *   // We are forced to write break inlining
	 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
	 *   tmpFn.$inject = ['$compile', '$rootScope'];
	 *   injector.invoke(tmpFn);
	 *
	 *   // To better support inline function the inline annotation is supported
	 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
	 *
	 *   // Therefore
	 *   expect(injector.annotate(
	 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
	 *    ).toEqual(['$compile', '$rootScope']);
	 * ```
	 *
	 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
	 * be retrieved as described above.
	 *
	 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
	 *
	 * @returns {Array.<string>} The names of the services which the function requires.
	 */



	/**
	 * @ngdoc service
	 * @name $provide
	 *
	 * @description
	 *
	 * The {@link auto.$provide $provide} service has a number of methods for registering components
	 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
	 * {@link angular.Module}.
	 *
	 * An Angular **service** is a singleton object created by a **service factory**.  These **service
	 * factories** are functions which, in turn, are created by a **service provider**.
	 * The **service providers** are constructor functions. When instantiated they must contain a
	 * property called `$get`, which holds the **service factory** function.
	 *
	 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
	 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
	 * function to get the instance of the **service**.
	 *
	 * Often services have no configuration options and there is no need to add methods to the service
	 * provider.  The provider will be no more than a constructor function with a `$get` property. For
	 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
	 * services without specifying a provider.
	 *
	 * * {@link auto.$provide#provider provider(name, provider)} - registers a **service provider** with the
	 *     {@link auto.$injector $injector}
	 * * {@link auto.$provide#constant constant(name, obj)} - registers a value/object that can be accessed by
	 *     providers and services.
	 * * {@link auto.$provide#value value(name, obj)} - registers a value/object that can only be accessed by
	 *     services, not providers.
	 * * {@link auto.$provide#factory factory(name, fn)} - registers a service **factory function**
	 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
	 *     given factory function.
	 * * {@link auto.$provide#service service(name, Fn)} - registers a **constructor function**
	 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
	 *      a new object using the given constructor function.
	 * * {@link auto.$provide#decorator decorator(name, decorFn)} - registers a **decorator function** that
	 *      will be able to modify or replace the implementation of another service.
	 *
	 * See the individual methods for more information and examples.
	 */

	/**
	 * @ngdoc method
	 * @name $provide#provider
	 * @description
	 *
	 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
	 * are constructor functions, whose instances are responsible for "providing" a factory for a
	 * service.
	 *
	 * Service provider names start with the name of the service they provide followed by `Provider`.
	 * For example, the {@link ng.$log $log} service has a provider called
	 * {@link ng.$logProvider $logProvider}.
	 *
	 * Service provider objects can have additional methods which allow configuration of the provider
	 * and its service. Importantly, you can configure what kind of service is created by the `$get`
	 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
	 * method {@link ng.$logProvider#debugEnabled debugEnabled}
	 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
	 * console or not.
	 *
	 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
	                        'Provider'` key.
	 * @param {(Object|function())} provider If the provider is:
	 *
	 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
	 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
	 *   - `Constructor`: a new instance of the provider will be created using
	 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
	 *
	 * @returns {Object} registered provider instance

	 * @example
	 *
	 * The following example shows how to create a simple event tracking service and register it using
	 * {@link auto.$provide#provider $provide.provider()}.
	 *
	 * ```js
	 *  // Define the eventTracker provider
	 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
	 *
	 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
	 * ```
	 */

	/**
	 * @ngdoc method
	 * @name $provide#factory
	 * @description
	 *
	 * Register a **service factory**, which will be called to return the service instance.
	 * This is short for registering a service where its provider consists of only a `$get` property,
	 * which is the given service factory function.
	 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
	 * configure your service in a provider.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
	 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service
	 * ```js
	 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#service
	 * @description
	 *
	 * Register a **service constructor**, which will be invoked with `new` to create the service
	 * instance.
	 * This is short for registering a service where its provider's `$get` property is a factory
	 * function that returns an instance instantiated by the injector from the service constructor
	 * function.
	 *
	 * Internally it looks a bit like this:
	 *
	 * ```
	 * {
	 *   $get: function() {
	 *     return $injector.instantiate(constructor);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
	 * as a type/class.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
	 *     that will be instantiated.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service using
	 * {@link auto.$provide#service $provide.service(class)}.
	 * ```js
	 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
	 *
	 *   Ping.$inject = ['$http'];
	 *
	 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
	 *   $provide.service('ping', Ping);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#value
	 * @description
	 *
	 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
	 * number, an array, an object or a function. This is short for registering a service where its
	 * provider's `$get` property is a factory function that takes no arguments and returns the **value
	 * service**. That also means it is not possible to inject other services into a value service.
	 *
	 * Value services are similar to constant services, except that they cannot be injected into a
	 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
	 * an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the instance.
	 * @param {*} value The value.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here are some examples of creating value services.
	 * ```js
	 *   $provide.value('ADMIN_USER', 'admin');
	 *
	 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
	 *
	 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#constant
	 * @description
	 *
	 * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
	 * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
	 * possible to inject other services into a constant.
	 *
	 * But unlike {@link auto.$provide#value value}, a constant can be
	 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
	 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the constant.
	 * @param {*} value The constant value.
	 * @returns {Object} registered instance
	 *
	 * @example
	 * Here a some examples of creating constants:
	 * ```js
	 *   $provide.constant('SHARD_HEIGHT', 306);
	 *
	 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
	 *
	 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#decorator
	 * @description
	 *
	 * Register a **decorator function** with the {@link auto.$injector $injector}. A decorator function
	 * intercepts the creation of a service, allowing it to override or modify the behavior of the
	 * service. The return value of the decorator function may be the original service, or a new service
	 * that replaces (or wraps and delegates to) the original service.
	 *
	 * You can find out more about using decorators in the {@link guide/decorators} guide.
	 *
	 * @param {string} name The name of the service to decorate.
	 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
	 *    provided and should return the decorated service instance. The function is called using
	 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
	 *    Local injection arguments:
	 *
	 *    * `$delegate` - The original service instance, which can be replaced, monkey patched, configured,
	 *      decorated or delegated to.
	 *
	 * @example
	 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
	 * calls to {@link ng.$log#error $log.warn()}.
	 * ```js
	 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
	 * ```
	 */


	function createInjector(modulesToLoad, strictDi) {
	  strictDi = (strictDi === true);
	  var INSTANTIATING = {},
	      providerSuffix = 'Provider',
	      path = [],
	      loadedModules = new HashMap([], true),
	      providerCache = {
	        $provide: {
	            provider: supportObject(provider),
	            factory: supportObject(factory),
	            service: supportObject(service),
	            value: supportObject(value),
	            constant: supportObject(constant),
	            decorator: decorator
	          }
	      },
	      providerInjector = (providerCache.$injector =
	          createInternalInjector(providerCache, function(serviceName, caller) {
	            if (angular.isString(caller)) {
	              path.push(caller);
	            }
	            throw $injectorMinErr('unpr', 'Unknown provider: {0}', path.join(' <- '));
	          })),
	      instanceCache = {},
	      protoInstanceInjector =
	          createInternalInjector(instanceCache, function(serviceName, caller) {
	            var provider = providerInjector.get(serviceName + providerSuffix, caller);
	            return instanceInjector.invoke(
	                provider.$get, provider, undefined, serviceName);
	          }),
	      instanceInjector = protoInstanceInjector;

	  providerCache['$injector' + providerSuffix] = { $get: valueFn(protoInstanceInjector) };
	  var runBlocks = loadModules(modulesToLoad);
	  instanceInjector = protoInstanceInjector.get('$injector');
	  instanceInjector.strictDi = strictDi;
	  forEach(runBlocks, function(fn) { if (fn) instanceInjector.invoke(fn); });

	  return instanceInjector;

	  ////////////////////////////////////
	  // $provider
	  ////////////////////////////////////

	  function supportObject(delegate) {
	    return function(key, value) {
	      if (isObject(key)) {
	        forEach(key, reverseParams(delegate));
	      } else {
	        return delegate(key, value);
	      }
	    };
	  }

	  function provider(name, provider_) {
	    assertNotHasOwnProperty(name, 'service');
	    if (isFunction(provider_) || isArray(provider_)) {
	      provider_ = providerInjector.instantiate(provider_);
	    }
	    if (!provider_.$get) {
	      throw $injectorMinErr('pget', 'Provider \'{0}\' must define $get factory method.', name);
	    }
	    return (providerCache[name + providerSuffix] = provider_);
	  }

	  function enforceReturnValue(name, factory) {
	    return /** @this */ function enforcedReturnValue() {
	      var result = instanceInjector.invoke(factory, this);
	      if (isUndefined(result)) {
	        throw $injectorMinErr('undef', 'Provider \'{0}\' must return a value from $get factory method.', name);
	      }
	      return result;
	    };
	  }

	  function factory(name, factoryFn, enforce) {
	    return provider(name, {
	      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
	    });
	  }

	  function service(name, constructor) {
	    return factory(name, ['$injector', function($injector) {
	      return $injector.instantiate(constructor);
	    }]);
	  }

	  function value(name, val) { return factory(name, valueFn(val), false); }

	  function constant(name, value) {
	    assertNotHasOwnProperty(name, 'constant');
	    providerCache[name] = value;
	    instanceCache[name] = value;
	  }

	  function decorator(serviceName, decorFn) {
	    var origProvider = providerInjector.get(serviceName + providerSuffix),
	        orig$get = origProvider.$get;

	    origProvider.$get = function() {
	      var origInstance = instanceInjector.invoke(orig$get, origProvider);
	      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
	    };
	  }

	  ////////////////////////////////////
	  // Module Loading
	  ////////////////////////////////////
	  function loadModules(modulesToLoad) {
	    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');
	    var runBlocks = [], moduleFn;
	    forEach(modulesToLoad, function(module) {
	      if (loadedModules.get(module)) return;
	      loadedModules.put(module, true);

	      function runInvokeQueue(queue) {
	        var i, ii;
	        for (i = 0, ii = queue.length; i < ii; i++) {
	          var invokeArgs = queue[i],
	              provider = providerInjector.get(invokeArgs[0]);

	          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
	        }
	      }

	      try {
	        if (isString(module)) {
	          moduleFn = angularModule(module);
	          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
	          runInvokeQueue(moduleFn._invokeQueue);
	          runInvokeQueue(moduleFn._configBlocks);
	        } else if (isFunction(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else if (isArray(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else {
	          assertArgFn(module, 'module');
	        }
	      } catch (e) {
	        if (isArray(module)) {
	          module = module[module.length - 1];
	        }
	        if (e.message && e.stack && e.stack.indexOf(e.message) === -1) {
	          // Safari & FF's stack traces don't contain error.message content
	          // unlike those of Chrome and IE
	          // So if stack doesn't contain message, we create a new string that contains both.
	          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
	          // eslint-disable-next-line no-ex-assign
	          e = e.message + '\n' + e.stack;
	        }
	        throw $injectorMinErr('modulerr', 'Failed to instantiate module {0} due to:\n{1}',
	                  module, e.stack || e.message || e);
	      }
	    });
	    return runBlocks;
	  }

	  ////////////////////////////////////
	  // internal Injector
	  ////////////////////////////////////

	  function createInternalInjector(cache, factory) {

	    function getService(serviceName, caller) {
	      if (cache.hasOwnProperty(serviceName)) {
	        if (cache[serviceName] === INSTANTIATING) {
	          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
	                    serviceName + ' <- ' + path.join(' <- '));
	        }
	        return cache[serviceName];
	      } else {
	        try {
	          path.unshift(serviceName);
	          cache[serviceName] = INSTANTIATING;
	          cache[serviceName] = factory(serviceName, caller);
	          return cache[serviceName];
	        } catch (err) {
	          if (cache[serviceName] === INSTANTIATING) {
	            delete cache[serviceName];
	          }
	          throw err;
	        } finally {
	          path.shift();
	        }
	      }
	    }


	    function injectionArgs(fn, locals, serviceName) {
	      var args = [],
	          $inject = createInjector.$$annotate(fn, strictDi, serviceName);

	      for (var i = 0, length = $inject.length; i < length; i++) {
	        var key = $inject[i];
	        if (typeof key !== 'string') {
	          throw $injectorMinErr('itkn',
	                  'Incorrect injection token! Expected service name as string, got {0}', key);
	        }
	        args.push(locals && locals.hasOwnProperty(key) ? locals[key] :
	                                                         getService(key, serviceName));
	      }
	      return args;
	    }

	    function isClass(func) {
	      // Support: IE 9-11 only
	      // IE 9-11 do not support classes and IE9 leaks with the code below.
	      if (msie || typeof func !== 'function') {
	        return false;
	      }
	      var result = func.$$ngIsClass;
	      if (!isBoolean(result)) {
	        // Support: Edge 12-13 only
	        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/6156135/
	        result = func.$$ngIsClass = /^(?:class\b|constructor\()/.test(stringifyFn(func));
	      }
	      return result;
	    }

	    function invoke(fn, self, locals, serviceName) {
	      if (typeof locals === 'string') {
	        serviceName = locals;
	        locals = null;
	      }

	      var args = injectionArgs(fn, locals, serviceName);
	      if (isArray(fn)) {
	        fn = fn[fn.length - 1];
	      }

	      if (!isClass(fn)) {
	        // http://jsperf.com/angularjs-invoke-apply-vs-switch
	        // #5388
	        return fn.apply(self, args);
	      } else {
	        args.unshift(null);
	        return new (Function.prototype.bind.apply(fn, args))();
	      }
	    }


	    function instantiate(Type, locals, serviceName) {
	      // Check if Type is annotated and use just the given function at n-1 as parameter
	      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
	      var ctor = (isArray(Type) ? Type[Type.length - 1] : Type);
	      var args = injectionArgs(Type, locals, serviceName);
	      // Empty object at position 0 is ignored for invocation with `new`, but required.
	      args.unshift(null);
	      return new (Function.prototype.bind.apply(ctor, args))();
	    }


	    return {
	      invoke: invoke,
	      instantiate: instantiate,
	      get: getService,
	      annotate: createInjector.$$annotate,
	      has: function(name) {
	        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
	      }
	    };
	  }
	}

	createInjector.$$annotate = annotate;

	/**
	 * @ngdoc provider
	 * @name $anchorScrollProvider
	 * @this
	 *
	 * @description
	 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
	 * {@link ng.$location#hash $location.hash()} changes.
	 */
	function $AnchorScrollProvider() {

	  var autoScrollingEnabled = true;

	  /**
	   * @ngdoc method
	   * @name $anchorScrollProvider#disableAutoScrolling
	   *
	   * @description
	   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
	   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
	   * Use this method to disable automatic scrolling.
	   *
	   * If automatic scrolling is disabled, one must explicitly call
	   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
	   * current hash.
	   */
	  this.disableAutoScrolling = function() {
	    autoScrollingEnabled = false;
	  };

	  /**
	   * @ngdoc service
	   * @name $anchorScroll
	   * @kind function
	   * @requires $window
	   * @requires $location
	   * @requires $rootScope
	   *
	   * @description
	   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
	   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
	   * in the
	   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document).
	   *
	   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
	   * match any anchor whenever it changes. This can be disabled by calling
	   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
	   *
	   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
	   * vertical scroll-offset (either fixed or dynamic).
	   *
	   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
	   *                       {@link ng.$location#hash $location.hash()} will be used.
	   *
	   * @property {(number|function|jqLite)} yOffset
	   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
	   * positioned elements at the top of the page, such as navbars, headers etc.
	   *
	   * `yOffset` can be specified in various ways:
	   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
	   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
	   *   a number representing the offset (in pixels).<br /><br />
	   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
	   *   the top of the page to the element's bottom will be used as offset.<br />
	   *   **Note**: The element will be taken into account only as long as its `position` is set to
	   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
	   *   their height and/or positioning according to the viewport's size.
	   *
	   * <br />
	   * <div class="alert alert-warning">
	   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
	   * not some child element.
	   * </div>
	   *
	   * @example
	     <example module="anchorScrollExample" name="anchor-scroll">
	       <file name="index.html">
	         <div id="scrollArea" ng-controller="ScrollController">
	           <a ng-click="gotoBottom()">Go to bottom</a>
	           <a id="bottom"></a> You're at the bottom!
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollExample', [])
	           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
	             function($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');

	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
	       </file>
	       <file name="style.css">
	         #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }

	         #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
	       </file>
	     </example>
	   *
	   * <hr />
	   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
	   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
	   *
	   * @example
	     <example module="anchorScrollOffsetExample" name="anchor-scroll-offset">
	       <file name="index.html">
	         <div class="fixed-header" ng-controller="headerCtrl">
	           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
	             Go to anchor {{x}}
	           </a>
	         </div>
	         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
	           Anchor {{x}} of 5
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollOffsetExample', [])
	           .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
	           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
	             function($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
	           ]);
	       </file>
	       <file name="style.css">
	         body {
	           padding-top: 50px;
	         }

	         .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }

	         .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }

	         .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
	       </file>
	     </example>
	   */
	  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
	    var document = $window.document;

	    // Helper function to get first anchor from a NodeList
	    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
	    //  and working in all supported browsers.)
	    function getFirstAnchor(list) {
	      var result = null;
	      Array.prototype.some.call(list, function(element) {
	        if (nodeName_(element) === 'a') {
	          result = element;
	          return true;
	        }
	      });
	      return result;
	    }

	    function getYOffset() {

	      var offset = scroll.yOffset;

	      if (isFunction(offset)) {
	        offset = offset();
	      } else if (isElement(offset)) {
	        var elem = offset[0];
	        var style = $window.getComputedStyle(elem);
	        if (style.position !== 'fixed') {
	          offset = 0;
	        } else {
	          offset = elem.getBoundingClientRect().bottom;
	        }
	      } else if (!isNumber(offset)) {
	        offset = 0;
	      }

	      return offset;
	    }

	    function scrollTo(elem) {
	      if (elem) {
	        elem.scrollIntoView();

	        var offset = getYOffset();

	        if (offset) {
	          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
	          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
	          // top of the viewport.
	          //
	          // IF the number of pixels from the top of `elem` to the end of the page's content is less
	          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
	          // way down the page.
	          //
	          // This is often the case for elements near the bottom of the page.
	          //
	          // In such cases we do not need to scroll the whole `offset` up, just the difference between
	          // the top of the element and the offset, which is enough to align the top of `elem` at the
	          // desired position.
	          var elemTop = elem.getBoundingClientRect().top;
	          $window.scrollBy(0, elemTop - offset);
	        }
	      } else {
	        $window.scrollTo(0, 0);
	      }
	    }

	    function scroll(hash) {
	      // Allow numeric hashes
	      hash = isString(hash) ? hash : isNumber(hash) ? hash.toString() : $location.hash();
	      var elm;

	      // empty hash, scroll to the top of the page
	      if (!hash) scrollTo(null);

	      // element with given id
	      else if ((elm = document.getElementById(hash))) scrollTo(elm);

	      // first anchor with given name :-D
	      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);

	      // no element and hash === 'top', scroll to the top of the page
	      else if (hash === 'top') scrollTo(null);
	    }

	    // does not scroll when user clicks on anchor link that is currently on
	    // (no url change, no $location.hash() change), browser native does scroll
	    if (autoScrollingEnabled) {
	      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
	        function autoScrollWatchAction(newVal, oldVal) {
	          // skip the initial scroll if $location.hash is empty
	          if (newVal === oldVal && newVal === '') return;

	          jqLiteDocumentLoaded(function() {
	            $rootScope.$evalAsync(scroll);
	          });
	        });
	    }

	    return scroll;
	  }];
	}

	var $animateMinErr = minErr('$animate');
	var ELEMENT_NODE = 1;
	var NG_ANIMATE_CLASSNAME = 'ng-animate';

	function mergeClasses(a,b) {
	  if (!a && !b) return '';
	  if (!a) return b;
	  if (!b) return a;
	  if (isArray(a)) a = a.join(' ');
	  if (isArray(b)) b = b.join(' ');
	  return a + ' ' + b;
	}

	function extractElementNode(element) {
	  for (var i = 0; i < element.length; i++) {
	    var elm = element[i];
	    if (elm.nodeType === ELEMENT_NODE) {
	      return elm;
	    }
	  }
	}

	function splitClasses(classes) {
	  if (isString(classes)) {
	    classes = classes.split(' ');
	  }

	  // Use createMap() to prevent class assumptions involving property names in
	  // Object.prototype
	  var obj = createMap();
	  forEach(classes, function(klass) {
	    // sometimes the split leaves empty string values
	    // incase extra spaces were applied to the options
	    if (klass.length) {
	      obj[klass] = true;
	    }
	  });
	  return obj;
	}

	// if any other type of options value besides an Object value is
	// passed into the $animate.method() animation then this helper code
	// will be run which will ignore it. While this patch is not the
	// greatest solution to this, a lot of existing plugins depend on
	// $animate to either call the callback (< 1.2) or return a promise
	// that can be changed. This helper function ensures that the options
	// are wiped clean incase a callback function is provided.
	function prepareAnimateOptions(options) {
	  return isObject(options)
	      ? options
	      : {};
	}

	var $$CoreAnimateJsProvider = /** @this */ function() {
	  this.$get = noop;
	};

	// this is prefixed with Core since it conflicts with
	// the animateQueueProvider defined in ngAnimate/animateQueue.js
	var $$CoreAnimateQueueProvider = /** @this */ function() {
	  var postDigestQueue = new HashMap();
	  var postDigestElements = [];

	  this.$get = ['$$AnimateRunner', '$rootScope',
	       function($$AnimateRunner,   $rootScope) {
	    return {
	      enabled: noop,
	      on: noop,
	      off: noop,
	      pin: noop,

	      push: function(element, event, options, domOperation) {
	        if (domOperation) {
	          domOperation();
	        }

	        options = options || {};
	        if (options.from) {
	          element.css(options.from);
	        }
	        if (options.to) {
	          element.css(options.to);
	        }

	        if (options.addClass || options.removeClass) {
	          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
	        }

	        var runner = new $$AnimateRunner();

	        // since there are no animations to run the runner needs to be
	        // notified that the animation call is complete.
	        runner.complete();
	        return runner;
	      }
	    };


	    function updateData(data, classes, value) {
	      var changed = false;
	      if (classes) {
	        classes = isString(classes) ? classes.split(' ') :
	                  isArray(classes) ? classes : [];
	        forEach(classes, function(className) {
	          if (className) {
	            changed = true;
	            data[className] = value;
	          }
	        });
	      }
	      return changed;
	    }

	    function handleCSSClassChanges() {
	      forEach(postDigestElements, function(element) {
	        var data = postDigestQueue.get(element);
	        if (data) {
	          var existing = splitClasses(element.attr('class'));
	          var toAdd = '';
	          var toRemove = '';
	          forEach(data, function(status, className) {
	            var hasClass = !!existing[className];
	            if (status !== hasClass) {
	              if (status) {
	                toAdd += (toAdd.length ? ' ' : '') + className;
	              } else {
	                toRemove += (toRemove.length ? ' ' : '') + className;
	              }
	            }
	          });

	          forEach(element, function(elm) {
	            if (toAdd) {
	              jqLiteAddClass(elm, toAdd);
	            }
	            if (toRemove) {
	              jqLiteRemoveClass(elm, toRemove);
	            }
	          });
	          postDigestQueue.remove(element);
	        }
	      });
	      postDigestElements.length = 0;
	    }


	    function addRemoveClassesPostDigest(element, add, remove) {
	      var data = postDigestQueue.get(element) || {};

	      var classesAdded = updateData(data, add, true);
	      var classesRemoved = updateData(data, remove, false);

	      if (classesAdded || classesRemoved) {

	        postDigestQueue.put(element, data);
	        postDigestElements.push(element);

	        if (postDigestElements.length === 1) {
	          $rootScope.$$postDigest(handleCSSClassChanges);
	        }
	      }
	    }
	  }];
	};

	/**
	 * @ngdoc provider
	 * @name $animateProvider
	 *
	 * @description
	 * Default implementation of $animate that doesn't perform any animations, instead just
	 * synchronously performs DOM updates and resolves the returned runner promise.
	 *
	 * In order to enable animations the `ngAnimate` module has to be loaded.
	 *
	 * To see the functional implementation check out `src/ngAnimate/animate.js`.
	 */
	var $AnimateProvider = ['$provide', /** @this */ function($provide) {
	  var provider = this;

	  this.$$registeredAnimations = Object.create(null);

	   /**
	   * @ngdoc method
	   * @name $animateProvider#register
	   *
	   * @description
	   * Registers a new injectable animation factory function. The factory function produces the
	   * animation object which contains callback functions for each event that is expected to be
	   * animated.
	   *
	   *   * `eventFn`: `function(element, ... , doneFunction, options)`
	   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
	   *   on the type of animation additional arguments will be injected into the animation function. The
	   *   list below explains the function signatures for the different animation methods:
	   *
	   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
	   *   - addClass: function(element, addedClasses, doneFunction, options)
	   *   - removeClass: function(element, removedClasses, doneFunction, options)
	   *   - enter, leave, move: function(element, doneFunction, options)
	   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
	   *
	   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
	   *
	   * ```js
	   *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
	   * ```
	   *
	   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
	   * @param {Function} factory The factory function that will be executed to return the animation
	   *                           object.
	   */
	  this.register = function(name, factory) {
	    if (name && name.charAt(0) !== '.') {
	      throw $animateMinErr('notcsel', 'Expecting class selector starting with \'.\' got \'{0}\'.', name);
	    }

	    var key = name + '-animation';
	    provider.$$registeredAnimations[name.substr(1)] = key;
	    $provide.factory(key, factory);
	  };

	  /**
	   * @ngdoc method
	   * @name $animateProvider#classNameFilter
	   *
	   * @description
	   * Sets and/or returns the CSS class regular expression that is checked when performing
	   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
	   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
	   * When setting the `classNameFilter` value, animations will only be performed on elements
	   * that successfully match the filter expression. This in turn can boost performance
	   * for low-powered devices as well as applications containing a lot of structural operations.
	   * @param {RegExp=} expression The className expression which will be checked against all animations
	   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
	   */
	  this.classNameFilter = function(expression) {
	    if (arguments.length === 1) {
	      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
	      if (this.$$classNameFilter) {
	        var reservedRegex = new RegExp('(\\s+|\\/)' + NG_ANIMATE_CLASSNAME + '(\\s+|\\/)');
	        if (reservedRegex.test(this.$$classNameFilter.toString())) {
	          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
	        }
	      }
	    }
	    return this.$$classNameFilter;
	  };

	  this.$get = ['$$animateQueue', function($$animateQueue) {
	    function domInsert(element, parentElement, afterElement) {
	      // if for some reason the previous element was removed
	      // from the dom sometime before this code runs then let's
	      // just stick to using the parent element as the anchor
	      if (afterElement) {
	        var afterNode = extractElementNode(afterElement);
	        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
	          afterElement = null;
	        }
	      }
	      if (afterElement) {
	        afterElement.after(element);
	      } else {
	        parentElement.prepend(element);
	      }
	    }

	    /**
	     * @ngdoc service
	     * @name $animate
	     * @description The $animate service exposes a series of DOM utility methods that provide support
	     * for animation hooks. The default behavior is the application of DOM operations, however,
	     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
	     * to ensure that animation runs with the triggered DOM operation.
	     *
	     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
	     * included and only when it is active then the animation hooks that `$animate` triggers will be
	     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
	     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
	     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
	     *
	     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
	     *
	     * To learn more about enabling animation support, click here to visit the
	     * {@link ngAnimate ngAnimate module page}.
	     */
	    return {
	      // we don't call it directly since non-existant arguments may
	      // be interpreted as null within the sub enabled function

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#on
	       * @kind function
	       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
	       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
	       *    is fired with the following params:
	       *
	       * ```js
	       * $animate.on('enter', container,
	       *    function callback(element, phase) {
	       *      // cool we detected an enter animation within the container
	       *    }
	       * );
	       * ```
	       *
	       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
	       *     as well as among its children
	       * @param {Function} callback the callback function that will be fired when the listener is triggered
	       *
	       * The arguments present in the callback function are:
	       * * `element` - The captured DOM element that the animation was fired on.
	       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
	       */
	      on: $$animateQueue.on,

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#off
	       * @kind function
	       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
	       * can be used in three different ways depending on the arguments:
	       *
	       * ```js
	       * // remove all the animation event listeners listening for `enter`
	       * $animate.off('enter');
	       *
	       * // remove listeners for all animation events from the container element
	       * $animate.off(container);
	       *
	       * // remove all the animation event listeners listening for `enter` on the given element and its children
	       * $animate.off('enter', container);
	       *
	       * // remove the event listener function provided by `callback` that is set
	       * // to listen for `enter` on the given `container` as well as its children
	       * $animate.off('enter', container, callback);
	       * ```
	       *
	       * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
	       * addClass, removeClass, etc...), or the container element. If it is the element, all other
	       * arguments are ignored.
	       * @param {DOMElement=} container the container element the event listener was placed on
	       * @param {Function=} callback the callback function that was registered as the listener
	       */
	      off: $$animateQueue.off,

	      /**
	       * @ngdoc method
	       * @name $animate#pin
	       * @kind function
	       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
	       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
	       *    element despite being outside the realm of the application or within another application. Say for example if the application
	       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
	       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
	       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
	       *
	       *    Note that this feature is only active when the `ngAnimate` module is used.
	       *
	       * @param {DOMElement} element the external element that will be pinned
	       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
	       */
	      pin: $$animateQueue.pin,

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enabled
	       * @kind function
	       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
	       * function can be called in four ways:
	       *
	       * ```js
	       * // returns true or false
	       * $animate.enabled();
	       *
	       * // changes the enabled state for all animations
	       * $animate.enabled(false);
	       * $animate.enabled(true);
	       *
	       * // returns true or false if animations are enabled for an element
	       * $animate.enabled(element);
	       *
	       * // changes the enabled state for an element and its children
	       * $animate.enabled(element, true);
	       * $animate.enabled(element, false);
	       * ```
	       *
	       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
	       * @param {boolean=} enabled whether or not the animations will be enabled for the element
	       *
	       * @return {boolean} whether or not animations are enabled
	       */
	      enabled: $$animateQueue.enabled,

	      /**
	       * @ngdoc method
	       * @name $animate#cancel
	       * @kind function
	       * @description Cancels the provided animation.
	       *
	       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
	       */
	      cancel: function(runner) {
	        if (runner.end) {
	          runner.end();
	        }
	      },

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enter
	       * @kind function
	       * @description Inserts the element into the DOM either after the `after` element (if provided) or
	       *   as the first child within the `parent` element and then triggers an animation.
	       *   A promise is returned that will be resolved during the next digest once the animation
	       *   has completed.
	       *
	       * @param {DOMElement} element the element which will be inserted into the DOM
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      enter: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
	      },

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#move
	       * @kind function
	       * @description Inserts (moves) the element into its new position in the DOM either after
	       *   the `after` element (if provided) or as the first child within the `parent` element
	       *   and then triggers an animation. A promise is returned that will be resolved
	       *   during the next digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be moved into the new DOM position
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      move: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#leave
	       * @kind function
	       * @description Triggers an animation and then removes the element from the DOM.
	       * When the function is called a promise is returned that will be resolved during the next
	       * digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be removed from the DOM
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      leave: function(element, options) {
	        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {
	          element.remove();
	        });
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#addClass
	       * @kind function
	       *
	       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
	       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element already contains the CSS class or if the class is removed at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      addClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addclass, className);
	        return $$animateQueue.push(element, 'addClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#removeClass
	       * @kind function
	       *
	       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
	       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element does not contain the CSS class or if the class is added at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      removeClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.removeClass = mergeClasses(options.removeClass, className);
	        return $$animateQueue.push(element, 'removeClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#setClass
	       * @kind function
	       *
	       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
	       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
	       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
	       *    passed. Note that class-based animations are treated differently compared to structural animations
	       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *    depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      setClass: function(element, add, remove, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addClass, add);
	        options.removeClass = mergeClasses(options.removeClass, remove);
	        return $$animateQueue.push(element, 'setClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#animate
	       * @kind function
	       *
	       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
	       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
	       * on the provided styles. For example, if a transition animation is set for the given className, then the provided `from` and
	       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
	       * style in `to`, the style in `from` is applied immediately, and no animation is run.
	       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
	       * method (or as part of the `options` parameter):
	       *
	       * ```js
	       * ngModule.animation('.my-inline-animation', function() {
	       *   return {
	       *     animate : function(element, from, to, done, options) {
	       *       //animation
	       *       done();
	       *     }
	       *   }
	       * });
	       * ```
	       *
	       * @param {DOMElement} element the element which the CSS styles will be applied to
	       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
	       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
	       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
	       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
	       *    (Note that if no animation is detected then this value will not be applied to the element.)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      animate: function(element, from, to, className, options) {
	        options = prepareAnimateOptions(options);
	        options.from = options.from ? extend(options.from, from) : from;
	        options.to   = options.to   ? extend(options.to, to)     : to;

	        className = className || 'ng-inline-animate';
	        options.tempClasses = mergeClasses(options.tempClasses, className);
	        return $$animateQueue.push(element, 'animate', options);
	      }
	    };
	  }];
	}];

	var $$AnimateAsyncRunFactoryProvider = /** @this */ function() {
	  this.$get = ['$$rAF', function($$rAF) {
	    var waitQueue = [];

	    function waitForTick(fn) {
	      waitQueue.push(fn);
	      if (waitQueue.length > 1) return;
	      $$rAF(function() {
	        for (var i = 0; i < waitQueue.length; i++) {
	          waitQueue[i]();
	        }
	        waitQueue = [];
	      });
	    }

	    return function() {
	      var passed = false;
	      waitForTick(function() {
	        passed = true;
	      });
	      return function(callback) {
	        if (passed) {
	          callback();
	        } else {
	          waitForTick(callback);
	        }
	      };
	    };
	  }];
	};

	var $$AnimateRunnerFactoryProvider = /** @this */ function() {
	  this.$get = ['$q', '$sniffer', '$$animateAsyncRun', '$$isDocumentHidden', '$timeout',
	       function($q,   $sniffer,   $$animateAsyncRun,   $$isDocumentHidden,   $timeout) {

	    var INITIAL_STATE = 0;
	    var DONE_PENDING_STATE = 1;
	    var DONE_COMPLETE_STATE = 2;

	    AnimateRunner.chain = function(chain, callback) {
	      var index = 0;

	      next();
	      function next() {
	        if (index === chain.length) {
	          callback(true);
	          return;
	        }

	        chain[index](function(response) {
	          if (response === false) {
	            callback(false);
	            return;
	          }
	          index++;
	          next();
	        });
	      }
	    };

	    AnimateRunner.all = function(runners, callback) {
	      var count = 0;
	      var status = true;
	      forEach(runners, function(runner) {
	        runner.done(onProgress);
	      });

	      function onProgress(response) {
	        status = status && response;
	        if (++count === runners.length) {
	          callback(status);
	        }
	      }
	    };

	    function AnimateRunner(host) {
	      this.setHost(host);

	      var rafTick = $$animateAsyncRun();
	      var timeoutTick = function(fn) {
	        $timeout(fn, 0, false);
	      };

	      this._doneCallbacks = [];
	      this._tick = function(fn) {
	        if ($$isDocumentHidden()) {
	          timeoutTick(fn);
	        } else {
	          rafTick(fn);
	        }
	      };
	      this._state = 0;
	    }

	    AnimateRunner.prototype = {
	      setHost: function(host) {
	        this.host = host || {};
	      },

	      done: function(fn) {
	        if (this._state === DONE_COMPLETE_STATE) {
	          fn();
	        } else {
	          this._doneCallbacks.push(fn);
	        }
	      },

	      progress: noop,

	      getPromise: function() {
	        if (!this.promise) {
	          var self = this;
	          this.promise = $q(function(resolve, reject) {
	            self.done(function(status) {
	              if (status === false) {
	                reject();
	              } else {
	                resolve();
	              }
	            });
	          });
	        }
	        return this.promise;
	      },

	      then: function(resolveHandler, rejectHandler) {
	        return this.getPromise().then(resolveHandler, rejectHandler);
	      },

	      'catch': function(handler) {
	        return this.getPromise()['catch'](handler);
	      },

	      'finally': function(handler) {
	        return this.getPromise()['finally'](handler);
	      },

	      pause: function() {
	        if (this.host.pause) {
	          this.host.pause();
	        }
	      },

	      resume: function() {
	        if (this.host.resume) {
	          this.host.resume();
	        }
	      },

	      end: function() {
	        if (this.host.end) {
	          this.host.end();
	        }
	        this._resolve(true);
	      },

	      cancel: function() {
	        if (this.host.cancel) {
	          this.host.cancel();
	        }
	        this._resolve(false);
	      },

	      complete: function(response) {
	        var self = this;
	        if (self._state === INITIAL_STATE) {
	          self._state = DONE_PENDING_STATE;
	          self._tick(function() {
	            self._resolve(response);
	          });
	        }
	      },

	      _resolve: function(response) {
	        if (this._state !== DONE_COMPLETE_STATE) {
	          forEach(this._doneCallbacks, function(fn) {
	            fn(response);
	          });
	          this._doneCallbacks.length = 0;
	          this._state = DONE_COMPLETE_STATE;
	        }
	      }
	    };

	    return AnimateRunner;
	  }];
	};

	/* exported $CoreAnimateCssProvider */

	/**
	 * @ngdoc service
	 * @name $animateCss
	 * @kind object
	 * @this
	 *
	 * @description
	 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
	 * then the `$animateCss` service will actually perform animations.
	 *
	 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
	 */
	var $CoreAnimateCssProvider = function() {
	  this.$get = ['$$rAF', '$q', '$$AnimateRunner', function($$rAF, $q, $$AnimateRunner) {

	    return function(element, initialOptions) {
	      // all of the animation functions should create
	      // a copy of the options data, however, if a
	      // parent service has already created a copy then
	      // we should stick to using that
	      var options = initialOptions || {};
	      if (!options.$$prepared) {
	        options = copy(options);
	      }

	      // there is no point in applying the styles since
	      // there is no animation that goes on at all in
	      // this version of $animateCss.
	      if (options.cleanupStyles) {
	        options.from = options.to = null;
	      }

	      if (options.from) {
	        element.css(options.from);
	        options.from = null;
	      }

	      var closed, runner = new $$AnimateRunner();
	      return {
	        start: run,
	        end: run
	      };

	      function run() {
	        $$rAF(function() {
	          applyAnimationContents();
	          if (!closed) {
	            runner.complete();
	          }
	          closed = true;
	        });
	        return runner;
	      }

	      function applyAnimationContents() {
	        if (options.addClass) {
	          element.addClass(options.addClass);
	          options.addClass = null;
	        }
	        if (options.removeClass) {
	          element.removeClass(options.removeClass);
	          options.removeClass = null;
	        }
	        if (options.to) {
	          element.css(options.to);
	          options.to = null;
	        }
	      }
	    };
	  }];
	};

	/* global stripHash: true */

	/**
	 * ! This is a private undocumented service !
	 *
	 * @name $browser
	 * @requires $log
	 * @description
	 * This object has two goals:
	 *
	 * - hide all the global state in the browser caused by the window object
	 * - abstract away all the browser specific features and inconsistencies
	 *
	 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
	 * service, which can be used for convenient testing of the application without the interaction with
	 * the real browser apis.
	 */
	/**
	 * @param {object} window The global window object.
	 * @param {object} document jQuery wrapped document.
	 * @param {object} $log window.console or an object with the same interface.
	 * @param {object} $sniffer $sniffer service
	 */
	function Browser(window, document, $log, $sniffer) {
	  var self = this,
	      location = window.location,
	      history = window.history,
	      setTimeout = window.setTimeout,
	      clearTimeout = window.clearTimeout,
	      pendingDeferIds = {};

	  self.isMock = false;

	  var outstandingRequestCount = 0;
	  var outstandingRequestCallbacks = [];

	  // TODO(vojta): remove this temporary api
	  self.$$completeOutstandingRequest = completeOutstandingRequest;
	  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

	  /**
	   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
	   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
	   */
	  function completeOutstandingRequest(fn) {
	    try {
	      fn.apply(null, sliceArgs(arguments, 1));
	    } finally {
	      outstandingRequestCount--;
	      if (outstandingRequestCount === 0) {
	        while (outstandingRequestCallbacks.length) {
	          try {
	            outstandingRequestCallbacks.pop()();
	          } catch (e) {
	            $log.error(e);
	          }
	        }
	      }
	    }
	  }

	  function getHash(url) {
	    var index = url.indexOf('#');
	    return index === -1 ? '' : url.substr(index);
	  }

	  /**
	   * @private
	   * Note: this method is used only by scenario runner
	   * TODO(vojta): prefix this method with $$ ?
	   * @param {function()} callback Function that will be called when no outstanding request
	   */
	  self.notifyWhenNoOutstandingRequests = function(callback) {
	    if (outstandingRequestCount === 0) {
	      callback();
	    } else {
	      outstandingRequestCallbacks.push(callback);
	    }
	  };

	  //////////////////////////////////////////////////////////////
	  // URL API
	  //////////////////////////////////////////////////////////////

	  var cachedState, lastHistoryState,
	      lastBrowserUrl = location.href,
	      baseElement = document.find('base'),
	      pendingLocation = null,
	      getCurrentState = !$sniffer.history ? noop : function getCurrentState() {
	        try {
	          return history.state;
	        } catch (e) {
	          // MSIE can reportedly throw when there is no state (UNCONFIRMED).
	        }
	      };

	  cacheState();
	  lastHistoryState = cachedState;

	  /**
	   * @name $browser#url
	   *
	   * @description
	   * GETTER:
	   * Without any argument, this method just returns current value of location.href.
	   *
	   * SETTER:
	   * With at least one argument, this method sets url to new value.
	   * If html5 history api supported, pushState/replaceState is used, otherwise
	   * location.href/location.replace is used.
	   * Returns its own instance to allow chaining
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to change url.
	   *
	   * @param {string} url New url (when used as setter)
	   * @param {boolean=} replace Should new url replace current history record?
	   * @param {object=} state object to use with pushState/replaceState
	   */
	  self.url = function(url, replace, state) {
	    // In modern browsers `history.state` is `null` by default; treating it separately
	    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
	    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
	    if (isUndefined(state)) {
	      state = null;
	    }

	    // Android Browser BFCache causes location, history reference to become stale.
	    if (location !== window.location) location = window.location;
	    if (history !== window.history) history = window.history;

	    // setter
	    if (url) {
	      var sameState = lastHistoryState === state;

	      // Don't change anything if previous and current URLs and states match. This also prevents
	      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
	      // See https://github.com/angular/angular.js/commit/ffb2701
	      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
	        return self;
	      }
	      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
	      lastBrowserUrl = url;
	      lastHistoryState = state;
	      // Don't use history API if only the hash changed
	      // due to a bug in IE10/IE11 which leads
	      // to not firing a `hashchange` nor `popstate` event
	      // in some cases (see #9143).
	      if ($sniffer.history && (!sameBase || !sameState)) {
	        history[replace ? 'replaceState' : 'pushState'](state, '', url);
	        cacheState();
	        // Do the assignment again so that those two variables are referentially identical.
	        lastHistoryState = cachedState;
	      } else {
	        if (!sameBase) {
	          pendingLocation = url;
	        }
	        if (replace) {
	          location.replace(url);
	        } else if (!sameBase) {
	          location.href = url;
	        } else {
	          location.hash = getHash(url);
	        }
	        if (location.href !== url) {
	          pendingLocation = url;
	        }
	      }
	      if (pendingLocation) {
	        pendingLocation = url;
	      }
	      return self;
	    // getter
	    } else {
	      // - pendingLocation is needed as browsers don't allow to read out
	      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
	      //   https://openradar.appspot.com/22186109).
	      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
	      return pendingLocation || location.href.replace(/%27/g,'\'');
	    }
	  };

	  /**
	   * @name $browser#state
	   *
	   * @description
	   * This method is a getter.
	   *
	   * Return history.state or null if history.state is undefined.
	   *
	   * @returns {object} state
	   */
	  self.state = function() {
	    return cachedState;
	  };

	  var urlChangeListeners = [],
	      urlChangeInit = false;

	  function cacheStateAndFireUrlChange() {
	    pendingLocation = null;
	    cacheState();
	    fireUrlChange();
	  }

	  // This variable should be used *only* inside the cacheState function.
	  var lastCachedState = null;
	  function cacheState() {
	    // This should be the only place in $browser where `history.state` is read.
	    cachedState = getCurrentState();
	    cachedState = isUndefined(cachedState) ? null : cachedState;

	    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
	    if (equals(cachedState, lastCachedState)) {
	      cachedState = lastCachedState;
	    }
	    lastCachedState = cachedState;
	  }

	  function fireUrlChange() {
	    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
	      return;
	    }

	    lastBrowserUrl = self.url();
	    lastHistoryState = cachedState;
	    forEach(urlChangeListeners, function(listener) {
	      listener(self.url(), cachedState);
	    });
	  }

	  /**
	   * @name $browser#onUrlChange
	   *
	   * @description
	   * Register callback function that will be called, when url changes.
	   *
	   * It's only called when the url is changed from outside of angular:
	   * - user types different url into address bar
	   * - user clicks on history (forward/back) button
	   * - user clicks on a link
	   *
	   * It's not called when url is changed by $browser.url() method
	   *
	   * The listener gets called with new url as parameter.
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to monitor url changes in angular apps.
	   *
	   * @param {function(string)} listener Listener function to be called when url changes.
	   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
	   */
	  self.onUrlChange = function(callback) {
	    // TODO(vojta): refactor to use node's syntax for events
	    if (!urlChangeInit) {
	      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
	      // don't fire popstate when user change the address bar and don't fire hashchange when url
	      // changed by push/replaceState

	      // html5 history api - popstate event
	      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
	      // hashchange event
	      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

	      urlChangeInit = true;
	    }

	    urlChangeListeners.push(callback);
	    return callback;
	  };

	  /**
	   * @private
	   * Remove popstate and hashchange handler from window.
	   *
	   * NOTE: this api is intended for use only by $rootScope.
	   */
	  self.$$applicationDestroyed = function() {
	    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
	  };

	  /**
	   * Checks whether the url has changed outside of Angular.
	   * Needs to be exported to be able to check for changes that have been done in sync,
	   * as hashchange/popstate events fire in async.
	   */
	  self.$$checkUrlChange = fireUrlChange;

	  //////////////////////////////////////////////////////////////
	  // Misc API
	  //////////////////////////////////////////////////////////////

	  /**
	   * @name $browser#baseHref
	   *
	   * @description
	   * Returns current <base href>
	   * (always relative - without domain)
	   *
	   * @returns {string} The current base href
	   */
	  self.baseHref = function() {
	    var href = baseElement.attr('href');
	    return href ? href.replace(/^(https?:)?\/\/[^/]*/, '') : '';
	  };

	  /**
	   * @name $browser#defer
	   * @param {function()} fn A function, who's execution should be deferred.
	   * @param {number=} [delay=0] of milliseconds to defer the function execution.
	   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
	   *
	   * @description
	   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
	   *
	   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
	   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
	   * via `$browser.defer.flush()`.
	   *
	   */
	  self.defer = function(fn, delay) {
	    var timeoutId;
	    outstandingRequestCount++;
	    timeoutId = setTimeout(function() {
	      delete pendingDeferIds[timeoutId];
	      completeOutstandingRequest(fn);
	    }, delay || 0);
	    pendingDeferIds[timeoutId] = true;
	    return timeoutId;
	  };


	  /**
	   * @name $browser#defer.cancel
	   *
	   * @description
	   * Cancels a deferred task identified with `deferId`.
	   *
	   * @param {*} deferId Token returned by the `$browser.defer` function.
	   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	   *                    canceled.
	   */
	  self.defer.cancel = function(deferId) {
	    if (pendingDeferIds[deferId]) {
	      delete pendingDeferIds[deferId];
	      clearTimeout(deferId);
	      completeOutstandingRequest(noop);
	      return true;
	    }
	    return false;
	  };

	}

	/** @this */
	function $BrowserProvider() {
	  this.$get = ['$window', '$log', '$sniffer', '$document',
	      function($window, $log, $sniffer, $document) {
	        return new Browser($window, $document, $log, $sniffer);
	      }];
	}

	/**
	 * @ngdoc service
	 * @name $cacheFactory
	 * @this
	 *
	 * @description
	 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
	 * them.
	 *
	 * ```js
	 *
	 *  var cache = $cacheFactory('cacheId');
	 *  expect($cacheFactory.get('cacheId')).toBe(cache);
	 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
	 *
	 *  cache.put("key", "value");
	 *  cache.put("another key", "another value");
	 *
	 *  // We've specified no options on creation
	 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
	 *
	 * ```
	 *
	 *
	 * @param {string} cacheId Name or id of the newly created cache.
	 * @param {object=} options Options object that specifies the cache behavior. Properties:
	 *
	 *   - `{number=}` `capacity` — turns the cache into LRU cache.
	 *
	 * @returns {object} Newly created cache object with the following set of methods:
	 *
	 * - `{object}` `info()` — Returns id, size, and options of cache.
	 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
	 *   it.
	 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
	 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
	 * - `{void}` `removeAll()` — Removes all cached values.
	 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
	 *
	 * @example
	   <example module="cacheExampleApp" name="cache-factory">
	     <file name="index.html">
	       <div ng-controller="CacheController">
	         <input ng-model="newCacheKey" placeholder="Key">
	         <input ng-model="newCacheValue" placeholder="Value">
	         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

	         <p ng-if="keys.length">Cached Values</p>
	         <div ng-repeat="key in keys">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="cache.get(key)"></b>
	         </div>

	         <p>Cache Info</p>
	         <div ng-repeat="(key, value) in cache.info()">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="value"></b>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('cacheExampleApp', []).
	         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if (angular.isUndefined($scope.cache.get(key))) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       p {
	         margin: 10px 0 3px;
	       }
	     </file>
	   </example>
	 */
	function $CacheFactoryProvider() {

	  this.$get = function() {
	    var caches = {};

	    function cacheFactory(cacheId, options) {
	      if (cacheId in caches) {
	        throw minErr('$cacheFactory')('iid', 'CacheId \'{0}\' is already taken!', cacheId);
	      }

	      var size = 0,
	          stats = extend({}, options, {id: cacheId}),
	          data = createMap(),
	          capacity = (options && options.capacity) || Number.MAX_VALUE,
	          lruHash = createMap(),
	          freshEnd = null,
	          staleEnd = null;

	      /**
	       * @ngdoc type
	       * @name $cacheFactory.Cache
	       *
	       * @description
	       * A cache object used to store and retrieve data, primarily used by
	       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
	       * templates and other data.
	       *
	       * ```js
	       *  angular.module('superCache')
	       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
	       * ```
	       *
	       * Example test:
	       *
	       * ```js
	       *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
	       * ```
	       */
	      return (caches[cacheId] = {

	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#put
	         * @kind function
	         *
	         * @description
	         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
	         * retrieved later, and incrementing the size of the cache if the key was not already
	         * present in the cache. If behaving like an LRU cache, it will also remove stale
	         * entries from the set.
	         *
	         * It will not insert undefined values into the cache.
	         *
	         * @param {string} key the key under which the cached data is stored.
	         * @param {*} value the value to store alongside the key. If it is undefined, the key
	         *    will not be stored.
	         * @returns {*} the value stored.
	         */
	        put: function(key, value) {
	          if (isUndefined(value)) return;
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

	            refresh(lruEntry);
	          }

	          if (!(key in data)) size++;
	          data[key] = value;

	          if (size > capacity) {
	            this.remove(staleEnd.key);
	          }

	          return value;
	        },

	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#get
	         * @kind function
	         *
	         * @description
	         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the data to be retrieved
	         * @returns {*} the value stored.
	         */
	        get: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];

	            if (!lruEntry) return;

	            refresh(lruEntry);
	          }

	          return data[key];
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#remove
	         * @kind function
	         *
	         * @description
	         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the entry to be removed
	         */
	        remove: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];

	            if (!lruEntry) return;

	            if (lruEntry === freshEnd) freshEnd = lruEntry.p;
	            if (lruEntry === staleEnd) staleEnd = lruEntry.n;
	            link(lruEntry.n,lruEntry.p);

	            delete lruHash[key];
	          }

	          if (!(key in data)) return;

	          delete data[key];
	          size--;
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#removeAll
	         * @kind function
	         *
	         * @description
	         * Clears the cache object of any entries.
	         */
	        removeAll: function() {
	          data = createMap();
	          size = 0;
	          lruHash = createMap();
	          freshEnd = staleEnd = null;
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#destroy
	         * @kind function
	         *
	         * @description
	         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
	         * removing it from the {@link $cacheFactory $cacheFactory} set.
	         */
	        destroy: function() {
	          data = null;
	          stats = null;
	          lruHash = null;
	          delete caches[cacheId];
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#info
	         * @kind function
	         *
	         * @description
	         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
	         *
	         * @returns {object} an object with the following properties:
	         *   <ul>
	         *     <li>**id**: the id of the cache instance</li>
	         *     <li>**size**: the number of entries kept in the cache instance</li>
	         *     <li>**...**: any additional properties from the options object when creating the
	         *       cache.</li>
	         *   </ul>
	         */
	        info: function() {
	          return extend({}, stats, {size: size});
	        }
	      });


	      /**
	       * makes the `entry` the freshEnd of the LRU linked list
	       */
	      function refresh(entry) {
	        if (entry !== freshEnd) {
	          if (!staleEnd) {
	            staleEnd = entry;
	          } else if (staleEnd === entry) {
	            staleEnd = entry.n;
	          }

	          link(entry.n, entry.p);
	          link(entry, freshEnd);
	          freshEnd = entry;
	          freshEnd.n = null;
	        }
	      }


	      /**
	       * bidirectionally links two entries of the LRU linked list
	       */
	      function link(nextEntry, prevEntry) {
	        if (nextEntry !== prevEntry) {
	          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
	          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
	        }
	      }
	    }


	  /**
	   * @ngdoc method
	   * @name $cacheFactory#info
	   *
	   * @description
	   * Get information about all the caches that have been created
	   *
	   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
	   */
	    cacheFactory.info = function() {
	      var info = {};
	      forEach(caches, function(cache, cacheId) {
	        info[cacheId] = cache.info();
	      });
	      return info;
	    };


	  /**
	   * @ngdoc method
	   * @name $cacheFactory#get
	   *
	   * @description
	   * Get access to a cache object by the `cacheId` used when it was created.
	   *
	   * @param {string} cacheId Name or id of a cache to access.
	   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
	   */
	    cacheFactory.get = function(cacheId) {
	      return caches[cacheId];
	    };


	    return cacheFactory;
	  };
	}

	/**
	 * @ngdoc service
	 * @name $templateCache
	 * @this
	 *
	 * @description
	 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
	 * can load templates directly into the cache in a `script` tag, or by consuming the
	 * `$templateCache` service directly.
	 *
	 * Adding via the `script` tag:
	 *
	 * ```html
	 *   <script type="text/ng-template" id="templateId.html">
	 *     <p>This is the content of the template</p>
	 *   </script>
	 * ```
	 *
	 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
	 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
	 * element with ng-app attribute), otherwise the template will be ignored.
	 *
	 * Adding via the `$templateCache` service:
	 *
	 * ```js
	 * var myApp = angular.module('myApp', []);
	 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
	 * ```
	 *
	 * To retrieve the template later, simply use it in your component:
	 * ```js
	 * myApp.component('myComponent', {
	 *    templateUrl: 'templateId.html'
	 * });
	 * ```
	 *
	 * or get it via the `$templateCache` service:
	 * ```js
	 * $templateCache.get('templateId.html')
	 * ```
	 *
	 * See {@link ng.$cacheFactory $cacheFactory}.
	 *
	 */
	function $TemplateCacheProvider() {
	  this.$get = ['$cacheFactory', function($cacheFactory) {
	    return $cacheFactory('templates');
	  }];
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables like document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
	 *
	 * DOM-related variables:
	 *
	 * - "node" - DOM Node
	 * - "element" - DOM Element or Node
	 * - "$node" or "$element" - jqLite-wrapped node or element
	 *
	 *
	 * Compiler related stuff:
	 *
	 * - "linkFn" - linking fn of a single directive
	 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
	 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
	 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
	 */


	/**
	 * @ngdoc service
	 * @name $compile
	 * @kind function
	 *
	 * @description
	 * Compiles an HTML string or DOM into a template and produces a template function, which
	 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
	 *
	 * The compilation is a process of walking the DOM tree and matching DOM elements to
	 * {@link ng.$compileProvider#directive directives}.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** This document is an in-depth reference of all directive options.
	 * For a gentle introduction to directives with examples of common use cases,
	 * see the {@link guide/directive directive guide}.
	 * </div>
	 *
	 * ## Comprehensive Directive API
	 *
	 * There are many different options for a directive.
	 *
	 * The difference resides in the return value of the factory function.
	 * You can either return a {@link $compile#directive-definition-object Directive Definition Object (see below)}
	 * that defines the directive properties, or just the `postLink` function (all other properties will have
	 * the default values).
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's recommended to use the "directive definition object" form.
	 * </div>
	 *
	 * Here's an example directive declared with a Directive Definition Object:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       {@link $compile#-priority- priority}: 0,
	 *       {@link $compile#-template- template}: '<div></div>', // or // function(tElement, tAttrs) { ... },
	 *       // or
	 *       // {@link $compile#-templateurl- templateUrl}: 'directive.html', // or // function(tElement, tAttrs) { ... },
	 *       {@link $compile#-transclude- transclude}: false,
	 *       {@link $compile#-restrict- restrict}: 'A',
	 *       {@link $compile#-templatenamespace- templateNamespace}: 'html',
	 *       {@link $compile#-scope- scope}: false,
	 *       {@link $compile#-controller- controller}: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
	 *       {@link $compile#-controlleras- controllerAs}: 'stringIdentifier',
	 *       {@link $compile#-bindtocontroller- bindToController}: false,
	 *       {@link $compile#-require- require}: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
	 *       {@link $compile#-multielement- multiElement}: false,
	 *       {@link $compile#-compile- compile}: function compile(tElement, tAttrs, transclude) {
	 *         return {
	 *            {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *            {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *         }
	 *         // or
	 *         // return function postLink( ... ) { ... }
	 *       },
	 *       // or
	 *       // {@link $compile#-link- link}: {
	 *       //  {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *       //  {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *       // }
	 *       // or
	 *       // {@link $compile#-link- link}: function postLink( ... ) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *   });
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Any unspecified options will use the default value. You can see the default values below.
	 * </div>
	 *
	 * Therefore the above can be simplified as:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       link: function postLink(scope, iElement, iAttrs) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *     // or
	 *     // return function postLink(scope, iElement, iAttrs) { ... }
	 *   });
	 * ```
	 *
	 * ### Life-cycle hooks
	 * Directive controllers can provide the following methods that are called by Angular at points in the life-cycle of the
	 * directive:
	 * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and
	 *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
	 *   this element). This is a good place to put initialization code for your controller.
	 * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The
	 *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an
	 *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a
	 *   component such as cloning the bound value to prevent accidental mutation of the outer value.
	 * * `$doCheck()` - Called on each turn of the digest cycle. Provides an opportunity to detect and act on
	 *   changes. Any actions that you wish to take in response to the changes that you detect must be
	 *   invoked from this hook; implementing this has no effect on when `$onChanges` is called. For example, this hook
	 *   could be useful if you wish to perform a deep equality check, or to check a Date object, changes to which would not
	 *   be detected by Angular's change detector and thus not trigger `$onChanges`. This hook is invoked with no arguments;
	 *   if detecting changes, you must store the previous value(s) for comparison to the current values.
	 * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
	 *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in
	 *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent
	 *   components will have their `$onDestroy()` hook called before child components.
	 * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link
	 *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
	 *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
	 *   they are waiting for their template to load asynchronously and their own compilation and linking has been
	 *   suspended until that occurs.
	 *
	 * #### Comparison with Angular 2 life-cycle hooks
	 * Angular 2 also uses life-cycle hooks for its components. While the Angular 1 life-cycle hooks are similar there are
	 * some differences that you should be aware of, especially when it comes to moving your code from Angular 1 to Angular 2:
	 *
	 * * Angular 1 hooks are prefixed with `$`, such as `$onInit`. Angular 2 hooks are prefixed with `ng`, such as `ngOnInit`.
	 * * Angular 1 hooks can be defined on the controller prototype or added to the controller inside its constructor.
	 *   In Angular 2 you can only define hooks on the prototype of the Component class.
	 * * Due to the differences in change-detection, you may get many more calls to `$doCheck` in Angular 1 than you would to
	 *   `ngDoCheck` in Angular 2
	 * * Changes to the model inside `$doCheck` will trigger new turns of the digest loop, which will cause the changes to be
	 *   propagated throughout the application.
	 *   Angular 2 does not allow the `ngDoCheck` hook to trigger a change outside of the component. It will either throw an
	 *   error or do nothing depending upon the state of `enableProdMode()`.
	 *
	 * #### Life-cycle hook examples
	 *
	 * This example shows how you can check for mutations to a Date object even though the identity of the object
	 * has not changed.
	 *
	 * <example name="doCheckDateExample" module="do-check-module">
	 *   <file name="app.js">
	 *     angular.module('do-check-module', [])
	 *       .component('app', {
	 *         template:
	 *           'Month: <input ng-model="$ctrl.month" ng-change="$ctrl.updateDate()">' +
	 *           'Date: {{ $ctrl.date }}' +
	 *           '<test date="$ctrl.date"></test>',
	 *         controller: function() {
	 *           this.date = new Date();
	 *           this.month = this.date.getMonth();
	 *           this.updateDate = function() {
	 *             this.date.setMonth(this.month);
	 *           };
	 *         }
	 *       })
	 *       .component('test', {
	 *         bindings: { date: '<' },
	 *         template:
	 *           '<pre>{{ $ctrl.log | json }}</pre>',
	 *         controller: function() {
	 *           var previousValue;
	 *           this.log = [];
	 *           this.$doCheck = function() {
	 *             var currentValue = this.date && this.date.valueOf();
	 *             if (previousValue !== currentValue) {
	 *               this.log.push('doCheck: date mutated: ' + this.date);
	 *               previousValue = currentValue;
	 *             }
	 *           };
	 *         }
	 *       });
	 *   </file>
	 *   <file name="index.html">
	 *     <app></app>
	 *   </file>
	 * </example>
	 *
	 * This example show how you might use `$doCheck` to trigger changes in your component's inputs even if the
	 * actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large
	 * arrays or objects can have a negative impact on your application performance)
	 *
	 * <example name="doCheckArrayExample" module="do-check-module">
	 *   <file name="index.html">
	 *     <div ng-init="items = []">
	 *       <button ng-click="items.push(items.length)">Add Item</button>
	 *       <button ng-click="items = []">Reset Items</button>
	 *       <pre>{{ items }}</pre>
	 *       <test items="items"></test>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *      angular.module('do-check-module', [])
	 *        .component('test', {
	 *          bindings: { items: '<' },
	 *          template:
	 *            '<pre>{{ $ctrl.log | json }}</pre>',
	 *          controller: function() {
	 *            this.log = [];
	 *
	 *            this.$doCheck = function() {
	 *              if (this.items_ref !== this.items) {
	 *                this.log.push('doCheck: items changed');
	 *                this.items_ref = this.items;
	 *              }
	 *              if (!angular.equals(this.items_clone, this.items)) {
	 *                this.log.push('doCheck: items mutated');
	 *                this.items_clone = angular.copy(this.items);
	 *              }
	 *            };
	 *          }
	 *        });
	 *   </file>
	 * </example>
	 *
	 *
	 * ### Directive Definition Object
	 *
	 * The directive definition object provides instructions to the {@link ng.$compile
	 * compiler}. The attributes are:
	 *
	 * #### `multiElement`
	 * When this property is set to true (default is `false`), the HTML compiler will collect DOM nodes between
	 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
	 * together as the directive elements. It is recommended that this feature be used on directives
	 * which are not strictly behavioral (such as {@link ngClick}), and which
	 * do not manipulate or replace child nodes (such as {@link ngInclude}).
	 *
	 * #### `priority`
	 * When there are multiple directives defined on a single DOM element, sometimes it
	 * is necessary to specify the order in which the directives are applied. The `priority` is used
	 * to sort the directives before their `compile` functions get called. Priority is defined as a
	 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
	 * are also run in priority order, but post-link functions are run in reverse order. The order
	 * of directives with the same priority is undefined. The default priority is `0`.
	 *
	 * #### `terminal`
	 * If set to true then the current `priority` will be the last set of directives
	 * which will execute (any directives at the current priority will still execute
	 * as the order of execution on same `priority` is undefined). Note that expressions
	 * and other directives used in the directive's template will also be excluded from execution.
	 *
	 * #### `scope`
	 * The scope property can be `false`, `true`, or an object:
	 *
	 * * **`false` (default):** No scope will be created for the directive. The directive will use its
	 * parent's scope.
	 *
	 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
	 * the directive's element. If multiple directives on the same element request a new scope,
	 * only one new scope is created.
	 *
	 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
	 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
	 * scope. This is useful when creating reusable components, which should not accidentally read or modify
	 * data in the parent scope.
	 *
	 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
	 * directive's element. These local properties are useful for aliasing values for templates. The keys in
	 * the object hash map to the name of the property on the isolate scope; the values define how the property
	 * is bound to the parent scope, via matching attributes on the directive's element:
	 *
	 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
	 *   always a string since DOM attributes are strings. If no `attr` name is specified then the
	 *   attribute name is assumed to be the same as the local name. Given `<my-component
	 *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
	 *   the directive's scope property `localName` will reflect the interpolated value of `hello
	 *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
	 *   scope. The `name` is read from the parent scope (not the directive's scope).
	 *
	 * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
	 *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
	 *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
	 *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
	 *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
	 *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
	 *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:
	 *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't
	 *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})
	 *   will be thrown upon discovering changes to the local value, since it will be impossible to sync
	 *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
	 *   method is used for tracking changes, and the equality check is based on object identity.
	 *   However, if an object literal or an array literal is passed as the binding expression, the
	 *   equality check is done by value (using the {@link angular.equals} function). It's also possible
	 *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
	 *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).
	 *
	  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
	 *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
	 *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
	 *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.
	 *
	 *   For example, given `<my-component my-attr="parentModel">` and directive definition of
	 *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
	 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
	 *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
	 *   two caveats:
	 *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
	 *     sets the same value. That means if your bound value is an object, changes to its properties
	 *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
	 *     2. one-way binding watches changes to the **identity** of the parent value. That means the
	 *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
	 *     to the value has changed. In most cases, this should not be of concern, but can be important
	 *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
	 *     If you now change a property of the object in your parent scope, the change will not be
	 *     propagated to the isolated scope, because the identity of the object on the parent scope
	 *     has not changed. Instead you must assign a new object.
	 *
	 *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
	 *   back to the parent. However, it does not make this completely impossible.
	 *
	 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
	 *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
	 *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
	 *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
	 *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
	 *   via an expression to the parent scope. This can be done by passing a map of local variable names
	 *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
	 *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
	 *
	 * In general it's possible to apply more than one directive to one element, but there might be limitations
	 * depending on the type of scope required by the directives. The following points will help explain these limitations.
	 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
	 *
	 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
	 * * **child scope** + **no scope** =>  Both directives will share one single child scope
	 * * **child scope** + **child scope** =>  Both directives will share one single child scope
	 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
	 * its parent's scope
	 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
	 * be applied to the same element.
	 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
	 * cannot be applied to the same element.
	 *
	 *
	 * #### `bindToController`
	 * This property is used to bind scope properties directly to the controller. It can be either
	 * `true` or an object hash with the same format as the `scope` property.
	 *
	 * When an isolate scope is used for a directive (see above), `bindToController: true` will
	 * allow a component to have its properties bound to the controller, rather than to scope.
	 *
	 * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
	 * properties. You can access these bindings once they have been initialized by providing a controller method called
	 * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
	 * initialized.
	 *
	 * <div class="alert alert-warning">
	 * **Deprecation warning:** although bindings for non-ES6 class controllers are currently
	 * bound to `this` before the controller constructor is called, this use is now deprecated. Please place initialization
	 * code that relies upon bindings inside a `$onInit` method on the controller, instead.
	 * </div>
	 *
	 * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
	 * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
	 * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
	 * scope (useful for component directives).
	 *
	 * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
	 *
	 *
	 * #### `controller`
	 * Controller constructor function. The controller is instantiated before the
	 * pre-linking phase and can be accessed by other directives (see
	 * `require` attribute). This allows the directives to communicate with each other and augment
	 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
	 *
	 * * `$scope` - Current scope associated with the element
	 * * `$element` - Current element
	 * * `$attrs` - Current attributes object for the element
	 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
	 *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
	 *    * `scope`: (optional) override the scope.
	 *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
	 *    * `futureParentElement` (optional):
	 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
	 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
	 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
	 *          and when the `cloneLinkingFn` is passed,
	 *          as those elements need to created and cloned in a special way when they are defined outside their
	 *          usual containers (e.g. like `<svg>`).
	 *        * See also the `directive.templateNamespace` property.
	 *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
	 *      then the default transclusion is provided.
	 *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
	 *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
	 *
	 * #### `require`
	 * Require another directive and inject its controller as the fourth argument to the linking function. The
	 * `require` property can be a string, an array or an object:
	 * * a **string** containing the name of the directive to pass to the linking function
	 * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
	 * linking function will be an array of controllers in the same order as the names in the `require` property
	 * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
	 * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
	 * controllers.
	 *
	 * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
	 * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
	 * have been constructed but before `$onInit` is called.
	 * If the name of the required controller is the same as the local name (the key), the name can be
	 * omitted. For example, `{parentDir: '^^'}` is equivalent to `{parentDir: '^^parentDir'}`.
	 * See the {@link $compileProvider#component} helper for an example of how this can be used.
	 * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
	 * raised (unless no link function is specified and the required controllers are not being bound to the directive
	 * controller, in which case error checking is skipped). The name can be prefixed with:
	 *
	 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
	 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
	 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
	 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
	 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
	 *   `null` to the `link` fn if not found.
	 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
	 *   `null` to the `link` fn if not found.
	 *
	 *
	 * #### `controllerAs`
	 * Identifier name for a reference to the controller in the directive's scope.
	 * This allows the controller to be referenced from the directive template. This is especially
	 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
	 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
	 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
	 *
	 *
	 * #### `restrict`
	 * String of subset of `EACM` which restricts the directive to a specific directive
	 * declaration style. If omitted, the defaults (elements and attributes) are used.
	 *
	 * * `E` - Element name (default): `<my-directive></my-directive>`
	 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
	 * * `C` - Class: `<div class="my-directive: exp;"></div>`
	 * * `M` - Comment: `<!-- directive: my-directive exp -->`
	 *
	 *
	 * #### `templateNamespace`
	 * String representing the document type used by the markup in the template.
	 * AngularJS needs this information as those elements need to be created and cloned
	 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
	 *
	 * * `html` - All root nodes in the template are HTML. Root nodes may also be
	 *   top-level elements such as `<svg>` or `<math>`.
	 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
	 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
	 *
	 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
	 *
	 * #### `template`
	 * HTML markup that may:
	 * * Replace the contents of the directive's element (default).
	 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
	 * * Wrap the contents of the directive's element (if `transclude` is true).
	 *
	 * Value may be:
	 *
	 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
	 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
	 *   function api below) and returns a string value.
	 *
	 *
	 * #### `templateUrl`
	 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
	 *
	 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
	 * for later when the template has been resolved.  In the meantime it will continue to compile and link
	 * sibling and parent elements as though this element had not contained any directives.
	 *
	 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
	 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
	 * case when only one deeply nested directive has `templateUrl`.
	 *
	 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
	 *
	 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
	 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
	 * a string value representing the url.  In either case, the template URL is passed through {@link
	 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
	 *
	 *
	 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
	 * specify what the template should replace. Defaults to `false`.
	 *
	 * * `true` - the template will replace the directive's element.
	 * * `false` - the template will replace the contents of the directive's element.
	 *
	 * The replacement process migrates all of the attributes / classes from the old element to the new
	 * one. See the {@link guide/directive#template-expanding-directive
	 * Directives Guide} for an example.
	 *
	 * There are very few scenarios where element replacement is required for the application function,
	 * the main one being reusable custom components that are used within SVG contexts
	 * (because SVG doesn't work with custom elements in the DOM tree).
	 *
	 * #### `transclude`
	 * Extract the contents of the element where the directive appears and make it available to the directive.
	 * The contents are compiled and provided to the directive as a **transclusion function**. See the
	 * {@link $compile#transclusion Transclusion} section below.
	 *
	 *
	 * #### `compile`
	 *
	 * ```js
	 *   function compile(tElement, tAttrs, transclude) { ... }
	 * ```
	 *
	 * The compile function deals with transforming the template DOM. Since most directives do not do
	 * template transformation, it is not used often. The compile function takes the following arguments:
	 *
	 *   * `tElement` - template element - The element where the directive has been declared. It is
	 *     safe to do template transformation on the element and child elements only.
	 *
	 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
	 *     between all directive compile functions.
	 *
	 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
	 *
	 * <div class="alert alert-warning">
	 * **Note:** The template instance and the link instance may be different objects if the template has
	 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
	 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
	 * should be done in a linking function rather than in a compile function.
	 * </div>

	 * <div class="alert alert-warning">
	 * **Note:** The compile function cannot handle directives that recursively use themselves in their
	 * own templates or compile functions. Compiling these directives results in an infinite loop and
	 * stack overflow errors.
	 *
	 * This can be avoided by manually using $compile in the postLink function to imperatively compile
	 * a directive's template instead of relying on automatic template compilation via `template` or
	 * `templateUrl` declaration or manual compilation inside the compile function.
	 * </div>
	 *
	 * <div class="alert alert-danger">
	 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
	 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
	 *   to the link function instead.
	 * </div>

	 * A compile function can have a return value which can be either a function or an object.
	 *
	 * * returning a (post-link) function - is equivalent to registering the linking function via the
	 *   `link` property of the config object when the compile function is empty.
	 *
	 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
	 *   control when a linking function should be called during the linking phase. See info about
	 *   pre-linking and post-linking functions below.
	 *
	 *
	 * #### `link`
	 * This property is used only if the `compile` property is not defined.
	 *
	 * ```js
	 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
	 * ```
	 *
	 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
	 * executed after the template has been cloned. This is where most of the directive logic will be
	 * put.
	 *
	 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
	 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
	 *
	 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
	 *     manipulate the children of the element only in `postLink` function since the children have
	 *     already been linked.
	 *
	 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
	 *     between all directive linking functions.
	 *
	 *   * `controller` - the directive's required controller instance(s) - Instances are shared
	 *     among all directives, which allows the directives to use the controllers as a communication
	 *     channel. The exact value depends on the directive's `require` property:
	 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
	 *       * `string`: the controller instance
	 *       * `array`: array of controller instances
	 *
	 *     If a required controller cannot be found, and it is optional, the instance is `null`,
	 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
	 *
	 *     Note that you can also require the directive's own controller - it will be made available like
	 *     any other controller.
	 *
	 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
	 *     This is the same as the `$transclude` parameter of directive controllers,
	 *     see {@link ng.$compile#-controller- the controller section for details}.
	 *     `function([scope], cloneLinkingFn, futureParentElement)`.
	 *
	 * #### Pre-linking function
	 *
	 * Executed before the child elements are linked. Not safe to do DOM transformation since the
	 * compiler linking function will fail to locate the correct elements for linking.
	 *
	 * #### Post-linking function
	 *
	 * Executed after the child elements are linked.
	 *
	 * Note that child elements that contain `templateUrl` directives will not have been compiled
	 * and linked since they are waiting for their template to load asynchronously and their own
	 * compilation and linking has been suspended until that occurs.
	 *
	 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
	 * for their async templates to be resolved.
	 *
	 *
	 * ### Transclusion
	 *
	 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
	 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
	 * scope from where they were taken.
	 *
	 * Transclusion is used (often with {@link ngTransclude}) to insert the
	 * original contents of a directive's element into a specified place in the template of the directive.
	 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
	 * content has access to the properties on the scope from which it was taken, even if the directive
	 * has isolated scope.
	 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
	 *
	 * This makes it possible for the widget to have private state for its template, while the transcluded
	 * content has access to its originating scope.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
	 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
	 * Testing Transclusion Directives}.
	 * </div>
	 *
	 * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
	 * directive's element, the entire element or multiple parts of the element contents:
	 *
	 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
	 * * `'element'` - transclude the whole of the directive's element including any directives on this
	 *   element that defined at a lower priority than this directive. When used, the `template`
	 *   property is ignored.
	 * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
	 *
	 * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.
	 *
	 * This object is a map where the keys are the name of the slot to fill and the value is an element selector
	 * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
	 * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
	 *
	 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	 *
	 * If the element selector is prefixed with a `?` then that slot is optional.
	 *
	 * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
	 * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
	 *
	 * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
	 * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
	 * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
	 * injectable into the directive's controller.
	 *
	 *
	 * #### Transclusion Functions
	 *
	 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
	 * function** to the directive's `link` function and `controller`. This transclusion function is a special
	 * **linking function** that will return the compiled contents linked to a new transclusion scope.
	 *
	 * <div class="alert alert-info">
	 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
	 * ngTransclude will deal with it for us.
	 * </div>
	 *
	 * If you want to manually control the insertion and removal of the transcluded content in your directive
	 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
	 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
	 *
	 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
	 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
	 * content and the `scope` is the newly created transclusion scope, which the clone will be linked to.
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
	 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
	 * </div>
	 *
	 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
	 * attach function**:
	 *
	 * ```js
	 * var transcludedContent, transclusionScope;
	 *
	 * $transclude(function(clone, scope) {
	 *   element.append(clone);
	 *   transcludedContent = clone;
	 *   transclusionScope = scope;
	 * });
	 * ```
	 *
	 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
	 * associated transclusion scope:
	 *
	 * ```js
	 * transcludedContent.remove();
	 * transclusionScope.$destroy();
	 * ```
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
	 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
	 * then you are also responsible for calling `$destroy` on the transclusion scope.
	 * </div>
	 *
	 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
	 * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
	 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
	 *
	 *
	 * #### Transclusion Scopes
	 *
	 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
	 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
	 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
	 * was taken.
	 *
	 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
	 * like this:
	 *
	 * ```html
	 * <div ng-app>
	 *   <div isolate>
	 *     <div transclusion>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `$parent` scope hierarchy will look like this:
	 *
	   ```
	   - $rootScope
	     - isolate
	       - transclusion
	   ```
	 *
	 * but the scopes will inherit prototypically from different scopes to their `$parent`.
	 *
	   ```
	   - $rootScope
	     - transclusion
	   - isolate
	   ```
	 *
	 *
	 * ### Attributes
	 *
	 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
	 * `link()` or `compile()` functions. It has a variety of uses.
	 *
	 * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:
	 *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access
	 *   to the attributes.
	 *
	 * * *Directive inter-communication:* All directives share the same instance of the attributes
	 *   object which allows the directives to use the attributes object as inter directive
	 *   communication.
	 *
	 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
	 *   allowing other directives to read the interpolated value.
	 *
	 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
	 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
	 *   the only way to easily get the actual value because during the linking phase the interpolation
	 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
	 *
	 * ```js
	 * function linkingFn(scope, elm, attrs, ctrl) {
	 *   // get the attribute value
	 *   console.log(attrs.ngModel);
	 *
	 *   // change the attribute
	 *   attrs.$set('ngModel', 'new value');
	 *
	 *   // observe changes to interpolated attribute
	 *   attrs.$observe('ngModel', function(value) {
	 *     console.log('ngModel has changed value to ' + value);
	 *   });
	 * }
	 * ```
	 *
	 * ## Example
	 *
	 * <div class="alert alert-warning">
	 * **Note**: Typically directives are registered with `module.directive`. The example below is
	 * to illustrate how `$compile` works.
	 * </div>
	 *
	 <example module="compileExample" name="compile">
	   <file name="index.html">
	    <script>
	      angular.module('compileExample', [], function($compileProvider) {
	        // configure new 'compile' directive by passing a directive
	        // factory function. The factory function injects the '$compile'
	        $compileProvider.directive('compile', function($compile) {
	          // directive factory creates a link function
	          return function(scope, element, attrs) {
	            scope.$watch(
	              function(scope) {
	                 // watch the 'compile' expression for changes
	                return scope.$eval(attrs.compile);
	              },
	              function(value) {
	                // when the 'compile' expression changes
	                // assign it into the current DOM
	                element.html(value);

	                // compile the new DOM and link it to the current
	                // scope.
	                // NOTE: we only compile .childNodes so that
	                // we don't get into infinite loop compiling ourselves
	                $compile(element.contents())(scope);
	              }
	            );
	          };
	        });
	      })
	      .controller('GreeterController', ['$scope', function($scope) {
	        $scope.name = 'Angular';
	        $scope.html = 'Hello {{name}}';
	      }]);
	    </script>
	    <div ng-controller="GreeterController">
	      <input ng-model="name"> <br/>
	      <textarea ng-model="html"></textarea> <br/>
	      <div compile="html"></div>
	    </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should auto compile', function() {
	       var textarea = $('textarea');
	       var output = $('div[compile]');
	       // The initial state reads 'Hello Angular'.
	       expect(output.getText()).toBe('Hello Angular');
	       textarea.clear();
	       textarea.sendKeys('{{name}}!');
	       expect(output.getText()).toBe('Angular!');
	     });
	   </file>
	 </example>

	 *
	 *
	 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
	 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
	 *
	 * <div class="alert alert-danger">
	 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
	 *   e.g. will not use the right outer scope. Please pass the transclude function as a
	 *   `parentBoundTranscludeFn` to the link function instead.
	 * </div>
	 *
	 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
	 *                 root element(s), not their children)
	 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
	 * (a DOM element/tree) to a scope. Where:
	 *
	 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
	 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
	 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
	 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
	 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
	 *
	 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
	 *      * `scope` - is the current scope with which the linking function is working with.
	 *
	 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
	 *  keys may be used to control linking behavior:
	 *
	 *      * `parentBoundTranscludeFn` - the transclude function made available to
	 *        directives; if given, it will be passed through to the link functions of
	 *        directives found in `element` during compilation.
	 *      * `transcludeControllers` - an object hash with keys that map controller names
	 *        to a hash with the key `instance`, which maps to the controller instance;
	 *        if given, it will make the controllers available to directives on the compileNode:
	 *        ```
	 *        {
	 *          parent: {
	 *            instance: parentControllerInstance
	 *          }
	 *        }
	 *        ```
	 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
	 *        the cloned elements; only needed for transcludes that are allowed to contain non html
	 *        elements (e.g. SVG elements). See also the directive.controller property.
	 *
	 * Calling the linking function returns the element of the template. It is either the original
	 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
	 *
	 * After linking the view is not updated until after a call to $digest which typically is done by
	 * Angular automatically.
	 *
	 * If you need access to the bound view, there are two ways to do it:
	 *
	 * - If you are not asking the linking function to clone the template, create the DOM element(s)
	 *   before you send them to the compiler and keep this reference around.
	 *   ```js
	 *     var element = $compile('<p>{{total}}</p>')(scope);
	 *   ```
	 *
	 * - if on the other hand, you need the element to be cloned, the view reference from the original
	 *   example would not point to the clone, but rather to the original template that was cloned. In
	 *   this case, you can access the clone via the cloneAttachFn:
	 *   ```js
	 *     var templateElement = angular.element('<p>{{total}}</p>'),
	 *         scope = ....;
	 *
	 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
	 *       //attach the clone to DOM document at the right place
	 *     });
	 *
	 *     //now we have reference to the cloned DOM via `clonedElement`
	 *   ```
	 *
	 *
	 * For information on how the compiler works, see the
	 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
	 *
	 * @knownIssue
	 *
	 * ### Double Compilation
	 *
	   Double compilation occurs when an already compiled part of the DOM gets
	   compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues,
	   and memory leaks. Refer to the Compiler Guide {@link guide/compiler#double-compilation-and-how-to-avoid-it
	   section on double compilation} for an in-depth explanation and ways to avoid it.
	 *
	 */

	var $compileMinErr = minErr('$compile');

	function UNINITIALIZED_VALUE() {}
	var _UNINITIALIZED_VALUE = new UNINITIALIZED_VALUE();

	/**
	 * @ngdoc provider
	 * @name $compileProvider
	 *
	 * @description
	 */
	$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
	/** @this */
	function $CompileProvider($provide, $$sanitizeUriProvider) {
	  var hasDirectives = {},
	      Suffix = 'Directive',
	      COMMENT_DIRECTIVE_REGEXP = /^\s*directive:\s*([\w-]+)\s+(.*)$/,
	      CLASS_DIRECTIVE_REGEXP = /(([\w-]+)(?::([^;]+))?;?)/,
	      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
	      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

	  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
	  // The assumption is that future DOM event attribute names will begin with
	  // 'on' and be composed of only English letters.
	  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
	  var bindingCache = createMap();

	  function parseIsolateBindings(scope, directiveName, isController) {
	    var LOCAL_REGEXP = /^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/;

	    var bindings = createMap();

	    forEach(scope, function(definition, scopeName) {
	      if (definition in bindingCache) {
	        bindings[scopeName] = bindingCache[definition];
	        return;
	      }
	      var match = definition.match(LOCAL_REGEXP);

	      if (!match) {
	        throw $compileMinErr('iscp',
	            'Invalid {3} for directive \'{0}\'.' +
	            ' Definition: {... {1}: \'{2}\' ...}',
	            directiveName, scopeName, definition,
	            (isController ? 'controller bindings definition' :
	            'isolate scope definition'));
	      }

	      bindings[scopeName] = {
	        mode: match[1][0],
	        collection: match[2] === '*',
	        optional: match[3] === '?',
	        attrName: match[4] || scopeName
	      };
	      if (match[4]) {
	        bindingCache[definition] = bindings[scopeName];
	      }
	    });

	    return bindings;
	  }

	  function parseDirectiveBindings(directive, directiveName) {
	    var bindings = {
	      isolateScope: null,
	      bindToController: null
	    };
	    if (isObject(directive.scope)) {
	      if (directive.bindToController === true) {
	        bindings.bindToController = parseIsolateBindings(directive.scope,
	                                                         directiveName, true);
	        bindings.isolateScope = {};
	      } else {
	        bindings.isolateScope = parseIsolateBindings(directive.scope,
	                                                     directiveName, false);
	      }
	    }
	    if (isObject(directive.bindToController)) {
	      bindings.bindToController =
	          parseIsolateBindings(directive.bindToController, directiveName, true);
	    }
	    if (bindings.bindToController && !directive.controller) {
	      // There is no controller
	      throw $compileMinErr('noctrl',
	            'Cannot bind to controller without directive \'{0}\'s controller.',
	            directiveName);
	    }
	    return bindings;
	  }

	  function assertValidDirectiveName(name) {
	    var letter = name.charAt(0);
	    if (!letter || letter !== lowercase(letter)) {
	      throw $compileMinErr('baddir', 'Directive/Component name \'{0}\' is invalid. The first character must be a lowercase letter', name);
	    }
	    if (name !== name.trim()) {
	      throw $compileMinErr('baddir',
	            'Directive/Component name \'{0}\' is invalid. The name should not contain leading or trailing whitespaces',
	            name);
	    }
	  }

	  function getDirectiveRequire(directive) {
	    var require = directive.require || (directive.controller && directive.name);

	    if (!isArray(require) && isObject(require)) {
	      forEach(require, function(value, key) {
	        var match = value.match(REQUIRE_PREFIX_REGEXP);
	        var name = value.substring(match[0].length);
	        if (!name) require[key] = match[0] + key;
	      });
	    }

	    return require;
	  }

	  function getDirectiveRestrict(restrict, name) {
	    if (restrict && !(isString(restrict) && /[EACM]/.test(restrict))) {
	      throw $compileMinErr('badrestrict',
	          'Restrict property \'{0}\' of directive \'{1}\' is invalid',
	          restrict,
	          name);
	    }

	    return restrict || 'EA';
	  }

	  /**
	   * @ngdoc method
	   * @name $compileProvider#directive
	   * @kind function
	   *
	   * @description
	   * Register a new directive with the compiler.
	   *
	   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
	   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
	   *    names and the values are the factories.
	   * @param {Function|Array} directiveFactory An injectable directive factory function. See the
	   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
	   * @returns {ng.$compileProvider} Self for chaining.
	   */
	  this.directive = function registerDirective(name, directiveFactory) {
	    assertArg(name, 'name');
	    assertNotHasOwnProperty(name, 'directive');
	    if (isString(name)) {
	      assertValidDirectiveName(name);
	      assertArg(directiveFactory, 'directiveFactory');
	      if (!hasDirectives.hasOwnProperty(name)) {
	        hasDirectives[name] = [];
	        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
	          function($injector, $exceptionHandler) {
	            var directives = [];
	            forEach(hasDirectives[name], function(directiveFactory, index) {
	              try {
	                var directive = $injector.invoke(directiveFactory);
	                if (isFunction(directive)) {
	                  directive = { compile: valueFn(directive) };
	                } else if (!directive.compile && directive.link) {
	                  directive.compile = valueFn(directive.link);
	                }
	                directive.priority = directive.priority || 0;
	                directive.index = index;
	                directive.name = directive.name || name;
	                directive.require = getDirectiveRequire(directive);
	                directive.restrict = getDirectiveRestrict(directive.restrict, name);
	                directive.$$moduleName = directiveFactory.$$moduleName;
	                directives.push(directive);
	              } catch (e) {
	                $exceptionHandler(e);
	              }
	            });
	            return directives;
	          }]);
	      }
	      hasDirectives[name].push(directiveFactory);
	    } else {
	      forEach(name, reverseParams(registerDirective));
	    }
	    return this;
	  };

	  /**
	   * @ngdoc method
	   * @name $compileProvider#component
	   * @module ng
	   * @param {string} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`)
	   * @param {Object} options Component definition object (a simplified
	   *    {@link ng.$compile#directive-definition-object directive definition object}),
	   *    with the following properties (all optional):
	   *
	   *    - `controller` – `{(string|function()=}` – controller constructor function that should be
	   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
	   *      registered controller} if passed as a string. An empty `noop` function by default.
	   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
	   *      If present, the controller will be published to scope under the `controllerAs` name.
	   *      If not present, this will default to be `$ctrl`.
	   *    - `template` – `{string=|function()=}` – html template as a string or a function that
	   *      returns an html template as a string which should be used as the contents of this component.
	   *      Empty string by default.
	   *
	   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
	   *      template that should be used  as the contents of this component.
	   *
	   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
	   *      Component properties are always bound to the component controller and not to the scope.
	   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
	   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
	   *      Disabled by default.
	   *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
	   *      this component's controller. The object keys specify the property names under which the required
	   *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
	   *    - `$...` – additional properties to attach to the directive factory function and the controller
	   *      constructor function. (This is used by the component router to annotate)
	   *
	   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
	   * @description
	   * Register a **component definition** with the compiler. This is a shorthand for registering a special
	   * type of directive, which represents a self-contained UI component in your application. Such components
	   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
	   *
	   * Component definitions are very simple and do not require as much configuration as defining general
	   * directives. Component definitions usually consist only of a template and a controller backing it.
	   *
	   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
	   * `bindToController`. They always have **isolate scope** and are restricted to elements.
	   *
	   * Here are a few examples of how you would usually define components:
	   *
	   * ```js
	   *   var myMod = angular.module(...);
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     controller: function() {
	   *       this.name = 'shahar';
	   *     }
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     templateUrl: 'views/my-comp.html',
	   *     controller: 'MyCtrl',
	   *     controllerAs: 'ctrl',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   * ```
	   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
	   *
	   * <br />
	   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
	   */
	  this.component = function registerComponent(name, options) {
	    var controller = options.controller || function() {};

	    function factory($injector) {
	      function makeInjectable(fn) {
	        if (isFunction(fn) || isArray(fn)) {
	          return /** @this */ function(tElement, tAttrs) {
	            return $injector.invoke(fn, this, {$element: tElement, $attrs: tAttrs});
	          };
	        } else {
	          return fn;
	        }
	      }

	      var template = (!options.template && !options.templateUrl ? '' : options.template);
	      var ddo = {
	        controller: controller,
	        controllerAs: identifierForController(options.controller) || options.controllerAs || '$ctrl',
	        template: makeInjectable(template),
	        templateUrl: makeInjectable(options.templateUrl),
	        transclude: options.transclude,
	        scope: {},
	        bindToController: options.bindings || {},
	        restrict: 'E',
	        require: options.require
	      };

	      // Copy annotations (starting with $) over to the DDO
	      forEach(options, function(val, key) {
	        if (key.charAt(0) === '$') ddo[key] = val;
	      });

	      return ddo;
	    }

	    // TODO(pete) remove the following `forEach` before we release 1.6.0
	    // The component-router@0.2.0 looks for the annotations on the controller constructor
	    // Nothing in Angular looks for annotations on the factory function but we can't remove
	    // it from 1.5.x yet.

	    // Copy any annotation properties (starting with $) over to the factory and controller constructor functions
	    // These could be used by libraries such as the new component router
	    forEach(options, function(val, key) {
	      if (key.charAt(0) === '$') {
	        factory[key] = val;
	        // Don't try to copy over annotations to named controller
	        if (isFunction(controller)) controller[key] = val;
	      }
	    });

	    factory.$inject = ['$injector'];

	    return this.directive(name, factory);
	  };


	  /**
	   * @ngdoc method
	   * @name $compileProvider#aHrefSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
	    }
	  };


	  /**
	   * @ngdoc method
	   * @name $compileProvider#imgSrcSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name  $compileProvider#debugInfoEnabled
	   *
	   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
	   * current debugInfoEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable various debug runtime information in the compiler such as adding
	   * binding information and a reference to the current scope on to DOM elements.
	   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
	   * * `ng-binding` CSS class
	   * * `$binding` data property containing an array of the binding expressions
	   *
	   * You may want to disable this in production for a significant performance boost. See
	   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
	   *
	   * The default value is true.
	   */
	  var debugInfoEnabled = true;
	  this.debugInfoEnabled = function(enabled) {
	    if (isDefined(enabled)) {
	      debugInfoEnabled = enabled;
	      return this;
	    }
	    return debugInfoEnabled;
	  };

	  /**
	   * @ngdoc method
	   * @name  $compileProvider#preAssignBindingsEnabled
	   *
	   * @param {boolean=} enabled update the preAssignBindingsEnabled state if provided, otherwise just return the
	   * current preAssignBindingsEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable whether directive controllers are assigned bindings before
	   * calling the controller's constructor.
	   * If enabled (true), the compiler assigns the value of each of the bindings to the
	   * properties of the controller object before the constructor of this object is called.
	   *
	   * If disabled (false), the compiler calls the constructor first before assigning bindings.
	   *
	   * The default value is true in Angular 1.5.x but will switch to false in Angular 1.6.x.
	   */
	  var preAssignBindingsEnabled = false;
	  this.preAssignBindingsEnabled = function(enabled) {
	    if (isDefined(enabled)) {
	      preAssignBindingsEnabled = enabled;
	      return this;
	    }
	    return preAssignBindingsEnabled;
	  };


	  var TTL = 10;
	  /**
	   * @ngdoc method
	   * @name $compileProvider#onChangesTtl
	   * @description
	   *
	   * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
	   * assuming that the model is unstable.
	   *
	   * The current default is 10 iterations.
	   *
	   * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
	   * in several iterations of calls to these hooks. However if an application needs more than the default 10
	   * iterations to stabilize then you should investigate what is causing the model to continuously change during
	   * the `$onChanges` hook execution.
	   *
	   * Increasing the TTL could have performance implications, so you should not change it without proper justification.
	   *
	   * @param {number} limit The number of `$onChanges` hook iterations.
	   * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
	   */
	  this.onChangesTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	      return this;
	    }
	    return TTL;
	  };

	  var commentDirectivesEnabledConfig = true;
	  /**
	   * @ngdoc method
	   * @name $compileProvider#commentDirectivesEnabled
	   * @description
	   *
	   * It indicates to the compiler
	   * whether or not directives on comments should be compiled.
	   * Defaults to `true`.
	   *
	   * Calling this function with false disables the compilation of directives
	   * on comments for the whole application.
	   * This results in a compilation performance gain,
	   * as the compiler doesn't have to check comments when looking for directives.
	   * This should however only be used if you are sure that no comment directives are used in
	   * the application (including any 3rd party directives).
	   *
	   * @param {boolean} enabled `false` if the compiler may ignore directives on comments
	   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
	   */
	  this.commentDirectivesEnabled = function(value) {
	    if (arguments.length) {
	      commentDirectivesEnabledConfig = value;
	      return this;
	    }
	    return commentDirectivesEnabledConfig;
	  };


	  var cssClassDirectivesEnabledConfig = true;
	  /**
	   * @ngdoc method
	   * @name $compileProvider#cssClassDirectivesEnabled
	   * @description
	   *
	   * It indicates to the compiler
	   * whether or not directives on element classes should be compiled.
	   * Defaults to `true`.
	   *
	   * Calling this function with false disables the compilation of directives
	   * on element classes for the whole application.
	   * This results in a compilation performance gain,
	   * as the compiler doesn't have to check element classes when looking for directives.
	   * This should however only be used if you are sure that no class directives are used in
	   * the application (including any 3rd party directives).
	   *
	   * @param {boolean} enabled `false` if the compiler may ignore directives on element classes
	   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
	   */
	  this.cssClassDirectivesEnabled = function(value) {
	    if (arguments.length) {
	      cssClassDirectivesEnabledConfig = value;
	      return this;
	    }
	    return cssClassDirectivesEnabledConfig;
	  };

	  this.$get = [
	            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
	            '$controller', '$rootScope', '$sce', '$animate', '$$sanitizeUri',
	    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
	             $controller,   $rootScope,   $sce,   $animate,   $$sanitizeUri) {

	    var SIMPLE_ATTR_NAME = /^\w/;
	    var specialAttrHolder = window.document.createElement('div');


	    var commentDirectivesEnabled = commentDirectivesEnabledConfig;
	    var cssClassDirectivesEnabled = cssClassDirectivesEnabledConfig;


	    var onChangesTtl = TTL;
	    // The onChanges hooks should all be run together in a single digest
	    // When changes occur, the call to trigger their hooks will be added to this queue
	    var onChangesQueue;

	    // This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
	    function flushOnChangesQueue() {
	      try {
	        if (!(--onChangesTtl)) {
	          // We have hit the TTL limit so reset everything
	          onChangesQueue = undefined;
	          throw $compileMinErr('infchng', '{0} $onChanges() iterations reached. Aborting!\n', TTL);
	        }
	        // We must run this hook in an apply since the $$postDigest runs outside apply
	        $rootScope.$apply(function() {
	          var errors = [];
	          for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {
	            try {
	              onChangesQueue[i]();
	            } catch (e) {
	              errors.push(e);
	            }
	          }
	          // Reset the queue to trigger a new schedule next time there is a change
	          onChangesQueue = undefined;
	          if (errors.length) {
	            throw errors;
	          }
	        });
	      } finally {
	        onChangesTtl++;
	      }
	    }


	    function Attributes(element, attributesToCopy) {
	      if (attributesToCopy) {
	        var keys = Object.keys(attributesToCopy);
	        var i, l, key;

	        for (i = 0, l = keys.length; i < l; i++) {
	          key = keys[i];
	          this[key] = attributesToCopy[key];
	        }
	      } else {
	        this.$attr = {};
	      }

	      this.$$element = element;
	    }

	    Attributes.prototype = {
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$normalize
	       * @kind function
	       *
	       * @description
	       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
	       * `data-`) to its normalized, camelCase form.
	       *
	       * Also there is special case for Moz prefix starting with upper case letter.
	       *
	       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	       *
	       * @param {string} name Name to normalize
	       */
	      $normalize: directiveNormalize,


	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$addClass
	       * @kind function
	       *
	       * @description
	       * Adds the CSS class value specified by the classVal parameter to the element. If animations
	       * are enabled then an animation will be triggered for the class addition.
	       *
	       * @param {string} classVal The className value that will be added to the element
	       */
	      $addClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.addClass(this.$$element, classVal);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$removeClass
	       * @kind function
	       *
	       * @description
	       * Removes the CSS class value specified by the classVal parameter from the element. If
	       * animations are enabled then an animation will be triggered for the class removal.
	       *
	       * @param {string} classVal The className value that will be removed from the element
	       */
	      $removeClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.removeClass(this.$$element, classVal);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$updateClass
	       * @kind function
	       *
	       * @description
	       * Adds and removes the appropriate CSS class values to the element based on the difference
	       * between the new and old CSS class values (specified as newClasses and oldClasses).
	       *
	       * @param {string} newClasses The current CSS className value
	       * @param {string} oldClasses The former CSS className value
	       */
	      $updateClass: function(newClasses, oldClasses) {
	        var toAdd = tokenDifference(newClasses, oldClasses);
	        if (toAdd && toAdd.length) {
	          $animate.addClass(this.$$element, toAdd);
	        }

	        var toRemove = tokenDifference(oldClasses, newClasses);
	        if (toRemove && toRemove.length) {
	          $animate.removeClass(this.$$element, toRemove);
	        }
	      },

	      /**
	       * Set a normalized attribute on the element in a way such that all directives
	       * can share the attribute. This function properly handles boolean attributes.
	       * @param {string} key Normalized key. (ie ngAttribute)
	       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
	       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
	       *     Defaults to true.
	       * @param {string=} attrName Optional none normalized name. Defaults to key.
	       */
	      $set: function(key, value, writeAttr, attrName) {
	        // TODO: decide whether or not to throw an error if "class"
	        //is set through this function since it may cause $updateClass to
	        //become unstable.

	        var node = this.$$element[0],
	            booleanKey = getBooleanAttrName(node, key),
	            aliasedKey = getAliasedAttrName(key),
	            observer = key,
	            nodeName;

	        if (booleanKey) {
	          this.$$element.prop(key, value);
	          attrName = booleanKey;
	        } else if (aliasedKey) {
	          this[aliasedKey] = value;
	          observer = aliasedKey;
	        }

	        this[key] = value;

	        // translate normalized key to actual key
	        if (attrName) {
	          this.$attr[key] = attrName;
	        } else {
	          attrName = this.$attr[key];
	          if (!attrName) {
	            this.$attr[key] = attrName = snake_case(key, '-');
	          }
	        }

	        nodeName = nodeName_(this.$$element);

	        if ((nodeName === 'a' && (key === 'href' || key === 'xlinkHref')) ||
	            (nodeName === 'img' && key === 'src')) {
	          // sanitize a[href] and img[src] values
	          this[key] = value = $$sanitizeUri(value, key === 'src');
	        } else if (nodeName === 'img' && key === 'srcset' && isDefined(value)) {
	          // sanitize img[srcset] values
	          var result = '';

	          // first check if there are spaces because it's not the same pattern
	          var trimmedSrcset = trim(value);
	          //                (   999x   ,|   999w   ,|   ,|,   )
	          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
	          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

	          // split srcset into tuple of uri and descriptor except for the last item
	          var rawUris = trimmedSrcset.split(pattern);

	          // for each tuples
	          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
	          for (var i = 0; i < nbrUrisWith2parts; i++) {
	            var innerIdx = i * 2;
	            // sanitize the uri
	            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
	            // add the descriptor
	            result += (' ' + trim(rawUris[innerIdx + 1]));
	          }

	          // split the last item into uri and descriptor
	          var lastTuple = trim(rawUris[i * 2]).split(/\s/);

	          // sanitize the last uri
	          result += $$sanitizeUri(trim(lastTuple[0]), true);

	          // and add the last descriptor if any
	          if (lastTuple.length === 2) {
	            result += (' ' + trim(lastTuple[1]));
	          }
	          this[key] = value = result;
	        }

	        if (writeAttr !== false) {
	          if (value === null || isUndefined(value)) {
	            this.$$element.removeAttr(attrName);
	          } else {
	            if (SIMPLE_ATTR_NAME.test(attrName)) {
	              this.$$element.attr(attrName, value);
	            } else {
	              setSpecialAttr(this.$$element[0], attrName, value);
	            }
	          }
	        }

	        // fire observers
	        var $$observers = this.$$observers;
	        if ($$observers) {
	          forEach($$observers[observer], function(fn) {
	            try {
	              fn(value);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          });
	        }
	      },


	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$observe
	       * @kind function
	       *
	       * @description
	       * Observes an interpolated attribute.
	       *
	       * The observer function will be invoked once during the next `$digest` following
	       * compilation. The observer is then invoked whenever the interpolated value
	       * changes.
	       *
	       * @param {string} key Normalized key. (ie ngAttribute) .
	       * @param {function(interpolatedValue)} fn Function that will be called whenever
	                the interpolated value of the attribute changes.
	       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
	       *        guide} for more info.
	       * @returns {function()} Returns a deregistration function for this observer.
	       */
	      $observe: function(key, fn) {
	        var attrs = this,
	            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
	            listeners = ($$observers[key] || ($$observers[key] = []));

	        listeners.push(fn);
	        $rootScope.$evalAsync(function() {
	          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
	            // no one registered attribute interpolation function, so lets call it manually
	            fn(attrs[key]);
	          }
	        });

	        return function() {
	          arrayRemove(listeners, fn);
	        };
	      }
	    };

	    function setSpecialAttr(element, attrName, value) {
	      // Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
	      // so we have to jump through some hoops to get such an attribute
	      // https://github.com/angular/angular.js/pull/13318
	      specialAttrHolder.innerHTML = '<span ' + attrName + '>';
	      var attributes = specialAttrHolder.firstChild.attributes;
	      var attribute = attributes[0];
	      // We have to remove the attribute from its container element before we can add it to the destination element
	      attributes.removeNamedItem(attribute.name);
	      attribute.value = value;
	      element.attributes.setNamedItem(attribute);
	    }

	    function safeAddClass($element, className) {
	      try {
	        $element.addClass(className);
	      } catch (e) {
	        // ignore, since it means that we are trying to set class on
	        // SVG element, where class name is read-only.
	      }
	    }


	    var startSymbol = $interpolate.startSymbol(),
	        endSymbol = $interpolate.endSymbol(),
	        denormalizeTemplate = (startSymbol === '{{' && endSymbol  === '}}')
	            ? identity
	            : function denormalizeTemplate(template) {
	              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
	        },
	        NG_ATTR_BINDING = /^ngAttr[A-Z]/;
	    var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;

	    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
	      var bindings = $element.data('$binding') || [];

	      if (isArray(binding)) {
	        bindings = bindings.concat(binding);
	      } else {
	        bindings.push(binding);
	      }

	      $element.data('$binding', bindings);
	    } : noop;

	    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
	      safeAddClass($element, 'ng-binding');
	    } : noop;

	    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
	      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
	      $element.data(dataName, scope);
	    } : noop;

	    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
	      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
	    } : noop;

	    compile.$$createComment = function(directiveName, comment) {
	      var content = '';
	      if (debugInfoEnabled) {
	        content = ' ' + (directiveName || '') + ': ';
	        if (comment) content += comment + ' ';
	      }
	      return window.document.createComment(content);
	    };

	    return compile;

	    //================================

	    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
	                        previousCompileContext) {
	      if (!($compileNodes instanceof jqLite)) {
	        // jquery always rewraps, whereas we need to preserve the original selector so that we can
	        // modify it.
	        $compileNodes = jqLite($compileNodes);
	      }
	      var compositeLinkFn =
	              compileNodes($compileNodes, transcludeFn, $compileNodes,
	                           maxPriority, ignoreDirective, previousCompileContext);
	      compile.$$addScopeClass($compileNodes);
	      var namespace = null;
	      return function publicLinkFn(scope, cloneConnectFn, options) {
	        if (!$compileNodes) {
	          throw $compileMinErr('multilink', 'This element has already been linked.');
	        }
	        assertArg(scope, 'scope');

	        if (previousCompileContext && previousCompileContext.needsNewScope) {
	          // A parent directive did a replace and a directive on this element asked
	          // for transclusion, which caused us to lose a layer of element on which
	          // we could hold the new transclusion scope, so we will create it manually
	          // here.
	          scope = scope.$parent.$new();
	        }

	        options = options || {};
	        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
	          transcludeControllers = options.transcludeControllers,
	          futureParentElement = options.futureParentElement;

	        // When `parentBoundTranscludeFn` is passed, it is a
	        // `controllersBoundTransclude` function (it was previously passed
	        // as `transclude` to directive.link) so we must unwrap it to get
	        // its `boundTranscludeFn`
	        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
	          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
	        }

	        if (!namespace) {
	          namespace = detectNamespaceForChildElements(futureParentElement);
	        }
	        var $linkNode;
	        if (namespace !== 'html') {
	          // When using a directive with replace:true and templateUrl the $compileNodes
	          // (or a child element inside of them)
	          // might change, so we need to recreate the namespace adapted compileNodes
	          // for call to the link function.
	          // Note: This will already clone the nodes...
	          $linkNode = jqLite(
	            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
	          );
	        } else if (cloneConnectFn) {
	          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
	          // and sometimes changes the structure of the DOM.
	          $linkNode = JQLitePrototype.clone.call($compileNodes);
	        } else {
	          $linkNode = $compileNodes;
	        }

	        if (transcludeControllers) {
	          for (var controllerName in transcludeControllers) {
	            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
	          }
	        }

	        compile.$$addScopeInfo($linkNode, scope);

	        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
	        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);

	        if (!cloneConnectFn) {
	          $compileNodes = compositeLinkFn = null;
	        }
	        return $linkNode;
	      };
	    }

	    function detectNamespaceForChildElements(parentElement) {
	      // TODO: Make this detect MathML as well...
	      var node = parentElement && parentElement[0];
	      if (!node) {
	        return 'html';
	      } else {
	        return nodeName_(node) !== 'foreignobject' && toString.call(node).match(/SVG/) ? 'svg' : 'html';
	      }
	    }

	    /**
	     * Compile function matches each node in nodeList against the directives. Once all directives
	     * for a particular node are collected their compile functions are executed. The compile
	     * functions return values - the linking functions - are combined into a composite linking
	     * function, which is the a linking function for the node.
	     *
	     * @param {NodeList} nodeList an array of nodes or NodeList to compile
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *        scope argument is auto-generated to the new child of the transcluded parent scope.
	     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
	     *        the rootElement must be set the jqLite collection of the compile root. This is
	     *        needed so that the jqLite collection items can be replaced with widgets.
	     * @param {number=} maxPriority Max directive priority.
	     * @returns {Function} A composite linking function of all of the matched directives or null.
	     */
	    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
	                            previousCompileContext) {
	      var linkFns = [],
	          // `nodeList` can be either an element's `.childNodes` (live NodeList)
	          // or a jqLite/jQuery collection or an array
	          notLiveList = isArray(nodeList) || (nodeList instanceof jqLite),
	          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;


	      for (var i = 0; i < nodeList.length; i++) {
	        attrs = new Attributes();

	        // Support: IE 11 only
	        // Workaround for #11781 and #14924
	        if (msie === 11) {
	          mergeConsecutiveTextNodes(nodeList, i, notLiveList);
	        }

	        // We must always refer to `nodeList[i]` hereafter,
	        // since the nodes can be replaced underneath us.
	        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
	                                        ignoreDirective);

	        nodeLinkFn = (directives.length)
	            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
	                                      null, [], [], previousCompileContext)
	            : null;

	        if (nodeLinkFn && nodeLinkFn.scope) {
	          compile.$$addScopeClass(attrs.$$element);
	        }

	        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
	                      !(childNodes = nodeList[i].childNodes) ||
	                      !childNodes.length)
	            ? null
	            : compileNodes(childNodes,
	                 nodeLinkFn ? (
	                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
	                     && nodeLinkFn.transclude) : transcludeFn);

	        if (nodeLinkFn || childLinkFn) {
	          linkFns.push(i, nodeLinkFn, childLinkFn);
	          linkFnFound = true;
	          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
	        }

	        //use the previous context only for the first element in the virtual group
	        previousCompileContext = null;
	      }

	      // return a linking function if we have found anything, null otherwise
	      return linkFnFound ? compositeLinkFn : null;

	      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
	        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
	        var stableNodeList;


	        if (nodeLinkFnFound) {
	          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
	          // offsets don't get screwed up
	          var nodeListLength = nodeList.length;
	          stableNodeList = new Array(nodeListLength);

	          // create a sparse array by only copying the elements which have a linkFn
	          for (i = 0; i < linkFns.length; i += 3) {
	            idx = linkFns[i];
	            stableNodeList[idx] = nodeList[idx];
	          }
	        } else {
	          stableNodeList = nodeList;
	        }

	        for (i = 0, ii = linkFns.length; i < ii;) {
	          node = stableNodeList[linkFns[i++]];
	          nodeLinkFn = linkFns[i++];
	          childLinkFn = linkFns[i++];

	          if (nodeLinkFn) {
	            if (nodeLinkFn.scope) {
	              childScope = scope.$new();
	              compile.$$addScopeInfo(jqLite(node), childScope);
	            } else {
	              childScope = scope;
	            }

	            if (nodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(
	                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);

	            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
	              childBoundTranscludeFn = parentBoundTranscludeFn;

	            } else if (!parentBoundTranscludeFn && transcludeFn) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

	            } else {
	              childBoundTranscludeFn = null;
	            }

	            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);

	          } else if (childLinkFn) {
	            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
	          }
	        }
	      }
	    }

	    function mergeConsecutiveTextNodes(nodeList, idx, notLiveList) {
	      var node = nodeList[idx];
	      var parent = node.parentNode;
	      var sibling;

	      if (node.nodeType !== NODE_TYPE_TEXT) {
	        return;
	      }

	      while (true) {
	        sibling = parent ? node.nextSibling : nodeList[idx + 1];
	        if (!sibling || sibling.nodeType !== NODE_TYPE_TEXT) {
	          break;
	        }

	        node.nodeValue = node.nodeValue + sibling.nodeValue;

	        if (sibling.parentNode) {
	          sibling.parentNode.removeChild(sibling);
	        }
	        if (notLiveList && sibling === nodeList[idx + 1]) {
	          nodeList.splice(idx + 1, 1);
	        }
	      }
	    }

	    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
	      function boundTranscludeFn(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

	        if (!transcludedScope) {
	          transcludedScope = scope.$new(false, containingScope);
	          transcludedScope.$$transcluded = true;
	        }

	        return transcludeFn(transcludedScope, cloneFn, {
	          parentBoundTranscludeFn: previousBoundTranscludeFn,
	          transcludeControllers: controllers,
	          futureParentElement: futureParentElement
	        });
	      }

	      // We need  to attach the transclusion slots onto the `boundTranscludeFn`
	      // so that they are available inside the `controllersBoundTransclude` function
	      var boundSlots = boundTranscludeFn.$$slots = createMap();
	      for (var slotName in transcludeFn.$$slots) {
	        if (transcludeFn.$$slots[slotName]) {
	          boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn);
	        } else {
	          boundSlots[slotName] = null;
	        }
	      }

	      return boundTranscludeFn;
	    }

	    /**
	     * Looks for directives on the given node and adds them to the directive collection which is
	     * sorted.
	     *
	     * @param node Node to search.
	     * @param directives An array to which the directives are added to. This array is sorted before
	     *        the function returns.
	     * @param attrs The shared attrs object which is used to populate the normalized attributes.
	     * @param {number=} maxPriority Max directive priority.
	     */
	    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
	      var nodeType = node.nodeType,
	          attrsMap = attrs.$attr,
	          match,
	          nodeName,
	          className;

	      switch (nodeType) {
	        case NODE_TYPE_ELEMENT: /* Element */

	          nodeName = nodeName_(node);

	          // use the node name: <directive>
	          addDirective(directives,
	              directiveNormalize(nodeName), 'E', maxPriority, ignoreDirective);

	          // iterate over the attributes
	          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
	                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
	            var attrStartName = false;
	            var attrEndName = false;

	            attr = nAttrs[j];
	            name = attr.name;
	            value = attr.value;

	            // support ngAttr attribute binding
	            ngAttrName = directiveNormalize(name);
	            isNgAttr = NG_ATTR_BINDING.test(ngAttrName);
	            if (isNgAttr) {
	              name = name.replace(PREFIX_REGEXP, '')
	                .substr(8).replace(/_(.)/g, function(match, letter) {
	                  return letter.toUpperCase();
	                });
	            }

	            var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);
	            if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {
	              attrStartName = name;
	              attrEndName = name.substr(0, name.length - 5) + 'end';
	              name = name.substr(0, name.length - 6);
	            }

	            nName = directiveNormalize(name.toLowerCase());
	            attrsMap[nName] = name;
	            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
	                attrs[nName] = value;
	                if (getBooleanAttrName(node, nName)) {
	                  attrs[nName] = true; // presence means true
	                }
	            }
	            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
	            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
	                          attrEndName);
	          }

	          if (nodeName === 'input' && node.getAttribute('type') === 'hidden') {
	            // Hidden input elements can have strange behaviour when navigating back to the page
	            // This tells the browser not to try to cache and reinstate previous values
	            node.setAttribute('autocomplete', 'off');
	          }

	          // use class as directive
	          if (!cssClassDirectivesEnabled) break;
	          className = node.className;
	          if (isObject(className)) {
	              // Maybe SVGAnimatedString
	              className = className.animVal;
	          }
	          if (isString(className) && className !== '') {
	            while ((match = CLASS_DIRECTIVE_REGEXP.exec(className))) {
	              nName = directiveNormalize(match[2]);
	              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[3]);
	              }
	              className = className.substr(match.index + match[0].length);
	            }
	          }
	          break;
	        case NODE_TYPE_TEXT: /* Text Node */
	          addTextInterpolateDirective(directives, node.nodeValue);
	          break;
	        case NODE_TYPE_COMMENT: /* Comment */
	          if (!commentDirectivesEnabled) break;
	          collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective);
	          break;
	      }

	      directives.sort(byPriority);
	      return directives;
	    }

	    function collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
	      // function created because of performance, try/catch disables
	      // the optimization of the whole function #14848
	      try {
	        var match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
	        if (match) {
	          var nName = directiveNormalize(match[1]);
	          if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
	            attrs[nName] = trim(match[2]);
	          }
	        }
	      } catch (e) {
	        // turns out that under some circumstances IE9 throws errors when one attempts to read
	        // comment's node value.
	        // Just ignore it and continue. (Can't seem to reproduce in test case.)
	      }
	    }

	    /**
	     * Given a node with a directive-start it collects all of the siblings until it finds
	     * directive-end.
	     * @param node
	     * @param attrStart
	     * @param attrEnd
	     * @returns {*}
	     */
	    function groupScan(node, attrStart, attrEnd) {
	      var nodes = [];
	      var depth = 0;
	      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
	        do {
	          if (!node) {
	            throw $compileMinErr('uterdir',
	                      'Unterminated attribute, found \'{0}\' but no matching \'{1}\' found.',
	                      attrStart, attrEnd);
	          }
	          if (node.nodeType === NODE_TYPE_ELEMENT) {
	            if (node.hasAttribute(attrStart)) depth++;
	            if (node.hasAttribute(attrEnd)) depth--;
	          }
	          nodes.push(node);
	          node = node.nextSibling;
	        } while (depth > 0);
	      } else {
	        nodes.push(node);
	      }

	      return jqLite(nodes);
	    }

	    /**
	     * Wrapper for linking function which converts normal linking function into a grouped
	     * linking function.
	     * @param linkFn
	     * @param attrStart
	     * @param attrEnd
	     * @returns {Function}
	     */
	    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
	      return function groupedElementsLink(scope, element, attrs, controllers, transcludeFn) {
	        element = groupScan(element[0], attrStart, attrEnd);
	        return linkFn(scope, element, attrs, controllers, transcludeFn);
	      };
	    }

	    /**
	     * A function generator that is used to support both eager and lazy compilation
	     * linking function.
	     * @param eager
	     * @param $compileNodes
	     * @param transcludeFn
	     * @param maxPriority
	     * @param ignoreDirective
	     * @param previousCompileContext
	     * @returns {Function}
	     */
	    function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
	      var compiled;

	      if (eager) {
	        return compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
	      }
	      return /** @this */ function lazyCompilation() {
	        if (!compiled) {
	          compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);

	          // Null out all of these references in order to make them eligible for garbage collection
	          // since this is a potentially long lived closure
	          $compileNodes = transcludeFn = previousCompileContext = null;
	        }
	        return compiled.apply(this, arguments);
	      };
	    }

	    /**
	     * Once the directives have been collected, their compile functions are executed. This method
	     * is responsible for inlining directive templates as well as terminating the application
	     * of the directives if the terminal directive has been reached.
	     *
	     * @param {Array} directives Array of collected directives to execute their compile function.
	     *        this needs to be pre-sorted by priority order.
	     * @param {Node} compileNode The raw DOM node to apply the compile functions to
	     * @param {Object} templateAttrs The shared attribute function
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *                                                  scope argument is auto-generated to the new
	     *                                                  child of the transcluded parent scope.
	     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
	     *                              argument has the root jqLite array so that we can replace nodes
	     *                              on it.
	     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
	     *                                           compiling the transclusion.
	     * @param {Array.<Function>} preLinkFns
	     * @param {Array.<Function>} postLinkFns
	     * @param {Object} previousCompileContext Context used for previous compilation of the current
	     *                                        node
	     * @returns {Function} linkFn
	     */
	    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
	                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
	                                   previousCompileContext) {
	      previousCompileContext = previousCompileContext || {};

	      var terminalPriority = -Number.MAX_VALUE,
	          newScopeDirective = previousCompileContext.newScopeDirective,
	          controllerDirectives = previousCompileContext.controllerDirectives,
	          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
	          templateDirective = previousCompileContext.templateDirective,
	          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
	          hasTranscludeDirective = false,
	          hasTemplate = false,
	          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
	          $compileNode = templateAttrs.$$element = jqLite(compileNode),
	          directive,
	          directiveName,
	          $template,
	          replaceDirective = originalReplaceDirective,
	          childTranscludeFn = transcludeFn,
	          linkFn,
	          didScanForMultipleTransclusion = false,
	          mightHaveMultipleTransclusionError = false,
	          directiveValue;

	      // executes all directives on the current element
	      for (var i = 0, ii = directives.length; i < ii; i++) {
	        directive = directives[i];
	        var attrStart = directive.$$start;
	        var attrEnd = directive.$$end;

	        // collect multiblock sections
	        if (attrStart) {
	          $compileNode = groupScan(compileNode, attrStart, attrEnd);
	        }
	        $template = undefined;

	        if (terminalPriority > directive.priority) {
	          break; // prevent further processing of directives
	        }

	        directiveValue = directive.scope;

	        if (directiveValue) {

	          // skip the check for directives with async templates, we'll check the derived sync
	          // directive when the template arrives
	          if (!directive.templateUrl) {
	            if (isObject(directiveValue)) {
	              // This directive is trying to add an isolated scope.
	              // Check that there is no scope of any kind already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
	                                directive, $compileNode);
	              newIsolateScopeDirective = directive;
	            } else {
	              // This directive is trying to add a child scope.
	              // Check that there is no isolated scope already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
	                                $compileNode);
	            }
	          }

	          newScopeDirective = newScopeDirective || directive;
	        }

	        directiveName = directive.name;

	        // If we encounter a condition that can result in transclusion on the directive,
	        // then scan ahead in the remaining directives for others that may cause a multiple
	        // transclusion error to be thrown during the compilation process.  If a matching directive
	        // is found, then we know that when we encounter a transcluded directive, we need to eagerly
	        // compile the `transclude` function rather than doing it lazily in order to throw
	        // exceptions at the correct time
	        if (!didScanForMultipleTransclusion && ((directive.replace && (directive.templateUrl || directive.template))
	            || (directive.transclude && !directive.$$tlb))) {
	                var candidateDirective;

	                for (var scanningIndex = i + 1; (candidateDirective = directives[scanningIndex++]);) {
	                    if ((candidateDirective.transclude && !candidateDirective.$$tlb)
	                        || (candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template))) {
	                        mightHaveMultipleTransclusionError = true;
	                        break;
	                    }
	                }

	                didScanForMultipleTransclusion = true;
	        }

	        if (!directive.templateUrl && directive.controller) {
	          controllerDirectives = controllerDirectives || createMap();
	          assertNoDuplicate('\'' + directiveName + '\' controller',
	              controllerDirectives[directiveName], directive, $compileNode);
	          controllerDirectives[directiveName] = directive;
	        }

	        directiveValue = directive.transclude;

	        if (directiveValue) {
	          hasTranscludeDirective = true;

	          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
	          // This option should only be used by directives that know how to safely handle element transclusion,
	          // where the transcluded nodes are added or replaced after linking.
	          if (!directive.$$tlb) {
	            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
	            nonTlbTranscludeDirective = directive;
	          }

	          if (directiveValue === 'element') {
	            hasElementTranscludeDirective = true;
	            terminalPriority = directive.priority;
	            $template = $compileNode;
	            $compileNode = templateAttrs.$$element =
	                jqLite(compile.$$createComment(directiveName, templateAttrs[directiveName]));
	            compileNode = $compileNode[0];
	            replaceWith(jqCollection, sliceArgs($template), compileNode);

	            // Support: Chrome < 50
	            // https://github.com/angular/angular.js/issues/14041

	            // In the versions of V8 prior to Chrome 50, the document fragment that is created
	            // in the `replaceWith` function is improperly garbage collected despite still
	            // being referenced by the `parentNode` property of all of the child nodes.  By adding
	            // a reference to the fragment via a different property, we can avoid that incorrect
	            // behavior.
	            // TODO: remove this line after Chrome 50 has been released
	            $template[0].$$parentNode = $template[0].parentNode;

	            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority,
	                                        replaceDirective && replaceDirective.name, {
	                                          // Don't pass in:
	                                          // - controllerDirectives - otherwise we'll create duplicates controllers
	                                          // - newIsolateScopeDirective or templateDirective - combining templates with
	                                          //   element transclusion doesn't make sense.
	                                          //
	                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
	                                          // on the same element more than once.
	                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
	                                        });
	          } else {

	            var slots = createMap();

	            if (!isObject(directiveValue)) {
	              $template = jqLite(jqLiteClone(compileNode)).contents();
	            } else {

	              // We have transclusion slots,
	              // collect them up, compile them and store their transclusion functions
	              $template = [];

	              var slotMap = createMap();
	              var filledSlots = createMap();

	              // Parse the element selectors
	              forEach(directiveValue, function(elementSelector, slotName) {
	                // If an element selector starts with a ? then it is optional
	                var optional = (elementSelector.charAt(0) === '?');
	                elementSelector = optional ? elementSelector.substring(1) : elementSelector;

	                slotMap[elementSelector] = slotName;

	                // We explicitly assign `null` since this implies that a slot was defined but not filled.
	                // Later when calling boundTransclusion functions with a slot name we only error if the
	                // slot is `undefined`
	                slots[slotName] = null;

	                // filledSlots contains `true` for all slots that are either optional or have been
	                // filled. This is used to check that we have not missed any required slots
	                filledSlots[slotName] = optional;
	              });

	              // Add the matching elements into their slot
	              forEach($compileNode.contents(), function(node) {
	                var slotName = slotMap[directiveNormalize(nodeName_(node))];
	                if (slotName) {
	                  filledSlots[slotName] = true;
	                  slots[slotName] = slots[slotName] || [];
	                  slots[slotName].push(node);
	                } else {
	                  $template.push(node);
	                }
	              });

	              // Check for required slots that were not filled
	              forEach(filledSlots, function(filled, slotName) {
	                if (!filled) {
	                  throw $compileMinErr('reqslot', 'Required transclusion slot `{0}` was not filled.', slotName);
	                }
	              });

	              for (var slotName in slots) {
	                if (slots[slotName]) {
	                  // Only define a transclusion function if the slot was filled
	                  slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slots[slotName], transcludeFn);
	                }
	              }
	            }

	            $compileNode.empty(); // clear contents
	            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, undefined,
	                undefined, { needsNewScope: directive.$$isolateScope || directive.$$newScope});
	            childTranscludeFn.$$slots = slots;
	          }
	        }

	        if (directive.template) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;

	          directiveValue = (isFunction(directive.template))
	              ? directive.template($compileNode, templateAttrs)
	              : directive.template;

	          directiveValue = denormalizeTemplate(directiveValue);

	          if (directive.replace) {
	            replaceDirective = directive;
	            if (jqLiteIsTextNode(directiveValue)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
	            }
	            compileNode = $template[0];

	            if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  'Template for directive \'{0}\' must have exactly one root element. {1}',
	                  directiveName, '');
	            }

	            replaceWith(jqCollection, $compileNode, compileNode);

	            var newTemplateAttrs = {$attr: {}};

	            // combine directives from the original node and from the template:
	            // - take the array of directives for this element
	            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
	            // - collect directives from the template and sort them by priority
	            // - combine directives as: processed + template + unprocessed
	            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
	            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

	            if (newIsolateScopeDirective || newScopeDirective) {
	              // The original directive caused the current element to be replaced but this element
	              // also needs to have a new scope, so we need to tell the template directives
	              // that they would need to get their scope from further up, if they require transclusion
	              markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
	            }
	            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
	            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

	            ii = directives.length;
	          } else {
	            $compileNode.html(directiveValue);
	          }
	        }

	        if (directive.templateUrl) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;

	          if (directive.replace) {
	            replaceDirective = directive;
	          }

	          // eslint-disable-next-line no-func-assign
	          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
	              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
	                controllerDirectives: controllerDirectives,
	                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,
	                newIsolateScopeDirective: newIsolateScopeDirective,
	                templateDirective: templateDirective,
	                nonTlbTranscludeDirective: nonTlbTranscludeDirective
	              });
	          ii = directives.length;
	        } else if (directive.compile) {
	          try {
	            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
	            var context = directive.$$originalDirective || directive;
	            if (isFunction(linkFn)) {
	              addLinkFns(null, bind(context, linkFn), attrStart, attrEnd);
	            } else if (linkFn) {
	              addLinkFns(bind(context, linkFn.pre), bind(context, linkFn.post), attrStart, attrEnd);
	            }
	          } catch (e) {
	            $exceptionHandler(e, startingTag($compileNode));
	          }
	        }

	        if (directive.terminal) {
	          nodeLinkFn.terminal = true;
	          terminalPriority = Math.max(terminalPriority, directive.priority);
	        }

	      }

	      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
	      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
	      nodeLinkFn.templateOnThisElement = hasTemplate;
	      nodeLinkFn.transclude = childTranscludeFn;

	      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

	      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
	      return nodeLinkFn;

	      ////////////////////

	      function addLinkFns(pre, post, attrStart, attrEnd) {
	        if (pre) {
	          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
	          pre.require = directive.require;
	          pre.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
	          }
	          preLinkFns.push(pre);
	        }
	        if (post) {
	          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
	          post.require = directive.require;
	          post.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            post = cloneAndAnnotateFn(post, {isolateScope: true});
	          }
	          postLinkFns.push(post);
	        }
	      }

	      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
	        var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element,
	            attrs, scopeBindingInfo;

	        if (compileNode === linkNode) {
	          attrs = templateAttrs;
	          $element = templateAttrs.$$element;
	        } else {
	          $element = jqLite(linkNode);
	          attrs = new Attributes($element, templateAttrs);
	        }

	        controllerScope = scope;
	        if (newIsolateScopeDirective) {
	          isolateScope = scope.$new(true);
	        } else if (newScopeDirective) {
	          controllerScope = scope.$parent;
	        }

	        if (boundTranscludeFn) {
	          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
	          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
	          transcludeFn = controllersBoundTransclude;
	          transcludeFn.$$boundTransclude = boundTranscludeFn;
	          // expose the slots on the `$transclude` function
	          transcludeFn.isSlotFilled = function(slotName) {
	            return !!boundTranscludeFn.$$slots[slotName];
	          };
	        }

	        if (controllerDirectives) {
	          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective);
	        }

	        if (newIsolateScopeDirective) {
	          // Initialize isolate scope bindings for new isolate scope directive.
	          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
	              templateDirective === newIsolateScopeDirective.$$originalDirective)));
	          compile.$$addScopeClass($element, true);
	          isolateScope.$$isolateBindings =
	              newIsolateScopeDirective.$$isolateBindings;
	          scopeBindingInfo = initializeDirectiveBindings(scope, attrs, isolateScope,
	                                        isolateScope.$$isolateBindings,
	                                        newIsolateScopeDirective);
	          if (scopeBindingInfo.removeWatches) {
	            isolateScope.$on('$destroy', scopeBindingInfo.removeWatches);
	          }
	        }

	        // Initialize bindToController bindings
	        for (var name in elementControllers) {
	          var controllerDirective = controllerDirectives[name];
	          var controller = elementControllers[name];
	          var bindings = controllerDirective.$$bindings.bindToController;

	          if (preAssignBindingsEnabled) {
	            if (bindings) {
	              controller.bindingInfo =
	                initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	            } else {
	              controller.bindingInfo = {};
	            }

	            var controllerResult = controller();
	            if (controllerResult !== controller.instance) {
	              // If the controller constructor has a return value, overwrite the instance
	              // from setupControllers
	              controller.instance = controllerResult;
	              $element.data('$' + controllerDirective.name + 'Controller', controllerResult);
	              if (controller.bindingInfo.removeWatches) {
	                controller.bindingInfo.removeWatches();
	              }
	              controller.bindingInfo =
	                initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	            }
	          } else {
	            controller.instance = controller();
	            $element.data('$' + controllerDirective.name + 'Controller', controller.instance);
	            controller.bindingInfo =
	              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	          }
	        }

	        // Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
	        forEach(controllerDirectives, function(controllerDirective, name) {
	          var require = controllerDirective.require;
	          if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {
	            extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));
	          }
	        });

	        // Handle the init and destroy lifecycle hooks on all controllers that have them
	        forEach(elementControllers, function(controller) {
	          var controllerInstance = controller.instance;
	          if (isFunction(controllerInstance.$onChanges)) {
	            try {
	              controllerInstance.$onChanges(controller.bindingInfo.initialChanges);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          if (isFunction(controllerInstance.$onInit)) {
	            try {
	              controllerInstance.$onInit();
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          if (isFunction(controllerInstance.$doCheck)) {
	            controllerScope.$watch(function() { controllerInstance.$doCheck(); });
	            controllerInstance.$doCheck();
	          }
	          if (isFunction(controllerInstance.$onDestroy)) {
	            controllerScope.$on('$destroy', function callOnDestroyHook() {
	              controllerInstance.$onDestroy();
	            });
	          }
	        });

	        // PRELINKING
	        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
	          linkFn = preLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }

	        // RECURSION
	        // We only pass the isolate scope, if the isolate directive has a template,
	        // otherwise the child elements do not belong to the isolate directive.
	        var scopeToChild = scope;
	        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
	          scopeToChild = isolateScope;
	        }
	        if (childLinkFn) {
	          childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
	        }

	        // POSTLINKING
	        for (i = postLinkFns.length - 1; i >= 0; i--) {
	          linkFn = postLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }

	        // Trigger $postLink lifecycle hooks
	        forEach(elementControllers, function(controller) {
	          var controllerInstance = controller.instance;
	          if (isFunction(controllerInstance.$postLink)) {
	            controllerInstance.$postLink();
	          }
	        });

	        // This is the function that is injected as `$transclude`.
	        // Note: all arguments are optional!
	        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement, slotName) {
	          var transcludeControllers;
	          // No scope passed in:
	          if (!isScope(scope)) {
	            slotName = futureParentElement;
	            futureParentElement = cloneAttachFn;
	            cloneAttachFn = scope;
	            scope = undefined;
	          }

	          if (hasElementTranscludeDirective) {
	            transcludeControllers = elementControllers;
	          }
	          if (!futureParentElement) {
	            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
	          }
	          if (slotName) {
	            // slotTranscludeFn can be one of three things:
	            //  * a transclude function - a filled slot
	            //  * `null` - an optional slot that was not filled
	            //  * `undefined` - a slot that was not declared (i.e. invalid)
	            var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];
	            if (slotTranscludeFn) {
	              return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	            } else if (isUndefined(slotTranscludeFn)) {
	              throw $compileMinErr('noslot',
	               'No parent directive that requires a transclusion with slot name "{0}". ' +
	               'Element: {1}',
	               slotName, startingTag($element));
	            }
	          } else {
	            return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	          }
	        }
	      }
	    }

	    function getControllers(directiveName, require, $element, elementControllers) {
	      var value;

	      if (isString(require)) {
	        var match = require.match(REQUIRE_PREFIX_REGEXP);
	        var name = require.substring(match[0].length);
	        var inheritType = match[1] || match[3];
	        var optional = match[2] === '?';

	        //If only parents then start at the parent element
	        if (inheritType === '^^') {
	          $element = $element.parent();
	        //Otherwise attempt getting the controller from elementControllers in case
	        //the element is transcluded (and has no data) and to avoid .data if possible
	        } else {
	          value = elementControllers && elementControllers[name];
	          value = value && value.instance;
	        }

	        if (!value) {
	          var dataName = '$' + name + 'Controller';
	          value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
	        }

	        if (!value && !optional) {
	          throw $compileMinErr('ctreq',
	              'Controller \'{0}\', required by directive \'{1}\', can\'t be found!',
	              name, directiveName);
	        }
	      } else if (isArray(require)) {
	        value = [];
	        for (var i = 0, ii = require.length; i < ii; i++) {
	          value[i] = getControllers(directiveName, require[i], $element, elementControllers);
	        }
	      } else if (isObject(require)) {
	        value = {};
	        forEach(require, function(controller, property) {
	          value[property] = getControllers(directiveName, controller, $element, elementControllers);
	        });
	      }

	      return value || null;
	    }

	    function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective) {
	      var elementControllers = createMap();
	      for (var controllerKey in controllerDirectives) {
	        var directive = controllerDirectives[controllerKey];
	        var locals = {
	          $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
	          $element: $element,
	          $attrs: attrs,
	          $transclude: transcludeFn
	        };

	        var controller = directive.controller;
	        if (controller === '@') {
	          controller = attrs[directive.name];
	        }

	        var controllerInstance = $controller(controller, locals, true, directive.controllerAs);

	        // For directives with element transclusion the element is a comment.
	        // In this case .data will not attach any data.
	        // Instead, we save the controllers for the element in a local hash and attach to .data
	        // later, once we have the actual element.
	        elementControllers[directive.name] = controllerInstance;
	        $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
	      }
	      return elementControllers;
	    }

	    // Depending upon the context in which a directive finds itself it might need to have a new isolated
	    // or child scope created. For instance:
	    // * if the directive has been pulled into a template because another directive with a higher priority
	    // asked for element transclusion
	    // * if the directive itself asks for transclusion but it is at the root of a template and the original
	    // element was replaced. See https://github.com/angular/angular.js/issues/12936
	    function markDirectiveScope(directives, isolateScope, newScope) {
	      for (var j = 0, jj = directives.length; j < jj; j++) {
	        directives[j] = inherit(directives[j], {$$isolateScope: isolateScope, $$newScope: newScope});
	      }
	    }

	    /**
	     * looks up the directive and decorates it with exception handling and proper parameters. We
	     * call this the boundDirective.
	     *
	     * @param {string} name name of the directive to look up.
	     * @param {string} location The directive must be found in specific format.
	     *   String containing any of theses characters:
	     *
	     *   * `E`: element name
	     *   * `A': attribute
	     *   * `C`: class
	     *   * `M`: comment
	     * @returns {boolean} true if directive was added.
	     */
	    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
	                          endAttrName) {
	      if (name === ignoreDirective) return null;
	      var match = null;
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          directive = directives[i];
	          if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&
	               directive.restrict.indexOf(location) !== -1) {
	            if (startAttrName) {
	              directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
	            }
	            if (!directive.$$bindings) {
	              var bindings = directive.$$bindings =
	                  parseDirectiveBindings(directive, directive.name);
	              if (isObject(bindings.isolateScope)) {
	                directive.$$isolateBindings = bindings.isolateScope;
	              }
	            }
	            tDirectives.push(directive);
	            match = directive;
	          }
	        }
	      }
	      return match;
	    }


	    /**
	     * looks up the directive and returns true if it is a multi-element directive,
	     * and therefore requires DOM nodes between -start and -end markers to be grouped
	     * together.
	     *
	     * @param {string} name name of the directive to look up.
	     * @returns true if directive was registered as multi-element.
	     */
	    function directiveIsMultiElement(name) {
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          directive = directives[i];
	          if (directive.multiElement) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }

	    /**
	     * When the element is replaced with HTML template then the new attributes
	     * on the template need to be merged with the existing attributes in the DOM.
	     * The desired effect is to have both of the attributes present.
	     *
	     * @param {object} dst destination attributes (original DOM)
	     * @param {object} src source attributes (from the directive template)
	     */
	    function mergeTemplateAttributes(dst, src) {
	      var srcAttr = src.$attr,
	          dstAttr = dst.$attr;

	      // reapply the old attributes to the new element
	      forEach(dst, function(value, key) {
	        if (key.charAt(0) !== '$') {
	          if (src[key] && src[key] !== value) {
	            if (value.length) {
	              value += (key === 'style' ? ';' : ' ') + src[key];
	            } else {
	              value = src[key];
	            }
	          }
	          dst.$set(key, value, true, srcAttr[key]);
	        }
	      });

	      // copy the new attributes on the old attrs object
	      forEach(src, function(value, key) {
	        // Check if we already set this attribute in the loop above.
	        // `dst` will never contain hasOwnProperty as DOM parser won't let it.
	        // You will get an "InvalidCharacterError: DOM Exception 5" error if you
	        // have an attribute like "has-own-property" or "data-has-own-property", etc.
	        if (!dst.hasOwnProperty(key) && key.charAt(0) !== '$') {
	          dst[key] = value;

	          if (key !== 'class' && key !== 'style') {
	            dstAttr[key] = srcAttr[key];
	          }
	        }
	      });
	    }


	    function compileTemplateUrl(directives, $compileNode, tAttrs,
	        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
	      var linkQueue = [],
	          afterTemplateNodeLinkFn,
	          afterTemplateChildLinkFn,
	          beforeTemplateCompileNode = $compileNode[0],
	          origAsyncDirective = directives.shift(),
	          derivedSyncDirective = inherit(origAsyncDirective, {
	            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
	          }),
	          templateUrl = (isFunction(origAsyncDirective.templateUrl))
	              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
	              : origAsyncDirective.templateUrl,
	          templateNamespace = origAsyncDirective.templateNamespace;

	      $compileNode.empty();

	      $templateRequest(templateUrl)
	        .then(function(content) {
	          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

	          content = denormalizeTemplate(content);

	          if (origAsyncDirective.replace) {
	            if (jqLiteIsTextNode(content)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
	            }
	            compileNode = $template[0];

	            if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  'Template for directive \'{0}\' must have exactly one root element. {1}',
	                  origAsyncDirective.name, templateUrl);
	            }

	            tempTemplateAttrs = {$attr: {}};
	            replaceWith($rootElement, $compileNode, compileNode);
	            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

	            if (isObject(origAsyncDirective.scope)) {
	              // the original directive that caused the template to be loaded async required
	              // an isolate scope
	              markDirectiveScope(templateDirectives, true);
	            }
	            directives = templateDirectives.concat(directives);
	            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
	          } else {
	            compileNode = beforeTemplateCompileNode;
	            $compileNode.html(content);
	          }

	          directives.unshift(derivedSyncDirective);

	          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
	              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
	              previousCompileContext);
	          forEach($rootElement, function(node, i) {
	            if (node === compileNode) {
	              $rootElement[i] = $compileNode[0];
	            }
	          });
	          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

	          while (linkQueue.length) {
	            var scope = linkQueue.shift(),
	                beforeTemplateLinkNode = linkQueue.shift(),
	                linkRootElement = linkQueue.shift(),
	                boundTranscludeFn = linkQueue.shift(),
	                linkNode = $compileNode[0];

	            if (scope.$$destroyed) continue;

	            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
	              var oldClasses = beforeTemplateLinkNode.className;

	              if (!(previousCompileContext.hasElementTranscludeDirective &&
	                  origAsyncDirective.replace)) {
	                // it was cloned therefore we have to clone as well.
	                linkNode = jqLiteClone(compileNode);
	              }
	              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

	              // Copy in CSS classes from original node
	              safeAddClass(jqLite(linkNode), oldClasses);
	            }
	            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	            } else {
	              childBoundTranscludeFn = boundTranscludeFn;
	            }
	            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
	              childBoundTranscludeFn);
	          }
	          linkQueue = null;
	        }).catch(function(error) {
	          if (error instanceof Error) {
	            $exceptionHandler(error);
	          }
	        }).catch(noop);

	      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
	        var childBoundTranscludeFn = boundTranscludeFn;
	        if (scope.$$destroyed) return;
	        if (linkQueue) {
	          linkQueue.push(scope,
	                         node,
	                         rootElement,
	                         childBoundTranscludeFn);
	        } else {
	          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	          }
	          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
	        }
	      };
	    }


	    /**
	     * Sorting function for bound directives.
	     */
	    function byPriority(a, b) {
	      var diff = b.priority - a.priority;
	      if (diff !== 0) return diff;
	      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
	      return a.index - b.index;
	    }

	    function assertNoDuplicate(what, previousDirective, directive, element) {

	      function wrapModuleNameIfDefined(moduleName) {
	        return moduleName ?
	          (' (module: ' + moduleName + ')') :
	          '';
	      }

	      if (previousDirective) {
	        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',
	            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),
	            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
	      }
	    }


	    function addTextInterpolateDirective(directives, text) {
	      var interpolateFn = $interpolate(text, true);
	      if (interpolateFn) {
	        directives.push({
	          priority: 0,
	          compile: function textInterpolateCompileFn(templateNode) {
	            var templateNodeParent = templateNode.parent(),
	                hasCompileParent = !!templateNodeParent.length;

	            // When transcluding a template that has bindings in the root
	            // we don't have a parent and thus need to add the class during linking fn.
	            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

	            return function textInterpolateLinkFn(scope, node) {
	              var parent = node.parent();
	              if (!hasCompileParent) compile.$$addBindingClass(parent);
	              compile.$$addBindingInfo(parent, interpolateFn.expressions);
	              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
	                node[0].nodeValue = value;
	              });
	            };
	          }
	        });
	      }
	    }


	    function wrapTemplate(type, template) {
	      type = lowercase(type || 'html');
	      switch (type) {
	      case 'svg':
	      case 'math':
	        var wrapper = window.document.createElement('div');
	        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
	        return wrapper.childNodes[0].childNodes;
	      default:
	        return template;
	      }
	    }


	    function getTrustedContext(node, attrNormalizedName) {
	      if (attrNormalizedName === 'srcdoc') {
	        return $sce.HTML;
	      }
	      var tag = nodeName_(node);
	      // All tags with src attributes require a RESOURCE_URL value, except for
	      // img and various html5 media tags.
	      if (attrNormalizedName === 'src' || attrNormalizedName === 'ngSrc') {
	        if (['img', 'video', 'audio', 'source', 'track'].indexOf(tag) === -1) {
	          return $sce.RESOURCE_URL;
	        }
	      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
	      } else if (attrNormalizedName === 'xlinkHref' ||
	          (tag === 'form' && attrNormalizedName === 'action') ||
	          // links can be stylesheets or imports, which can run script in the current origin
	          (tag === 'link' && attrNormalizedName === 'href')
	      ) {
	        return $sce.RESOURCE_URL;
	      }
	    }


	    function addAttrInterpolateDirective(node, directives, value, name, isNgAttr) {
	      var trustedContext = getTrustedContext(node, name);
	      var mustHaveExpression = !isNgAttr;
	      var allOrNothing = ALL_OR_NOTHING_ATTRS[name] || isNgAttr;

	      var interpolateFn = $interpolate(value, mustHaveExpression, trustedContext, allOrNothing);

	      // no interpolation found -> ignore
	      if (!interpolateFn) return;

	      if (name === 'multiple' && nodeName_(node) === 'select') {
	        throw $compileMinErr('selmulti',
	            'Binding to the \'multiple\' attribute is not supported. Element: {0}',
	            startingTag(node));
	      }

	      if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
	        throw $compileMinErr('nodomevents',
	            'Interpolations for HTML DOM event attributes are disallowed.  Please use the ' +
	                'ng- versions (such as ng-click instead of onclick) instead.');
	      }

	      directives.push({
	        priority: 100,
	        compile: function() {
	            return {
	              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
	                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));

	                // If the attribute has changed since last $interpolate()ed
	                var newValue = attr[name];
	                if (newValue !== value) {
	                  // we need to interpolate again since the attribute value has been updated
	                  // (e.g. by another directive's compile function)
	                  // ensure unset/empty values make interpolateFn falsy
	                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
	                  value = newValue;
	                }

	                // if attribute was updated so that there is no interpolation going on we don't want to
	                // register any observers
	                if (!interpolateFn) return;

	                // initialize attr object so that it's ready in case we need the value for isolate
	                // scope initialization, otherwise the value would not be available from isolate
	                // directive's linking fn during linking phase
	                attr[name] = interpolateFn(scope);

	                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
	                (attr.$$observers && attr.$$observers[name].$$scope || scope).
	                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
	                    //special case for class attribute addition + removal
	                    //so that class changes can tap into the animation
	                    //hooks provided by the $animate service. Be sure to
	                    //skip animations when the first digest occurs (when
	                    //both the new and the old values are the same) since
	                    //the CSS classes are the non-interpolated values
	                    if (name === 'class' && newValue !== oldValue) {
	                      attr.$updateClass(newValue, oldValue);
	                    } else {
	                      attr.$set(name, newValue);
	                    }
	                  });
	              }
	            };
	          }
	      });
	    }


	    /**
	     * This is a special jqLite.replaceWith, which can replace items which
	     * have no parents, provided that the containing jqLite collection is provided.
	     *
	     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
	     *                               in the root of the tree.
	     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
	     *                                  the shell, but replace its DOM node reference.
	     * @param {Node} newNode The new DOM node.
	     */
	    function replaceWith($rootElement, elementsToRemove, newNode) {
	      var firstElementToRemove = elementsToRemove[0],
	          removeCount = elementsToRemove.length,
	          parent = firstElementToRemove.parentNode,
	          i, ii;

	      if ($rootElement) {
	        for (i = 0, ii = $rootElement.length; i < ii; i++) {
	          if ($rootElement[i] === firstElementToRemove) {
	            $rootElement[i++] = newNode;
	            for (var j = i, j2 = j + removeCount - 1,
	                     jj = $rootElement.length;
	                 j < jj; j++, j2++) {
	              if (j2 < jj) {
	                $rootElement[j] = $rootElement[j2];
	              } else {
	                delete $rootElement[j];
	              }
	            }
	            $rootElement.length -= removeCount - 1;

	            // If the replaced element is also the jQuery .context then replace it
	            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
	            // http://api.jquery.com/context/
	            if ($rootElement.context === firstElementToRemove) {
	              $rootElement.context = newNode;
	            }
	            break;
	          }
	        }
	      }

	      if (parent) {
	        parent.replaceChild(newNode, firstElementToRemove);
	      }

	      // Append all the `elementsToRemove` to a fragment. This will...
	      // - remove them from the DOM
	      // - allow them to still be traversed with .nextSibling
	      // - allow a single fragment.qSA to fetch all elements being removed
	      var fragment = window.document.createDocumentFragment();
	      for (i = 0; i < removeCount; i++) {
	        fragment.appendChild(elementsToRemove[i]);
	      }

	      if (jqLite.hasData(firstElementToRemove)) {
	        // Copy over user data (that includes Angular's $scope etc.). Don't copy private
	        // data here because there's no public interface in jQuery to do that and copying over
	        // event listeners (which is the main use of private data) wouldn't work anyway.
	        jqLite.data(newNode, jqLite.data(firstElementToRemove));

	        // Remove $destroy event listeners from `firstElementToRemove`
	        jqLite(firstElementToRemove).off('$destroy');
	      }

	      // Cleanup any data/listeners on the elements and children.
	      // This includes invoking the $destroy event on any elements with listeners.
	      jqLite.cleanData(fragment.querySelectorAll('*'));

	      // Update the jqLite collection to only contain the `newNode`
	      for (i = 1; i < removeCount; i++) {
	        delete elementsToRemove[i];
	      }
	      elementsToRemove[0] = newNode;
	      elementsToRemove.length = 1;
	    }


	    function cloneAndAnnotateFn(fn, annotation) {
	      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
	    }


	    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
	      try {
	        linkFn(scope, $element, attrs, controllers, transcludeFn);
	      } catch (e) {
	        $exceptionHandler(e, startingTag($element));
	      }
	    }


	    // Set up $watches for isolate scope and controller bindings.
	    function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
	      var removeWatchCollection = [];
	      var initialChanges = {};
	      var changes;
	      forEach(bindings, function initializeBinding(definition, scopeName) {
	        var attrName = definition.attrName,
	        optional = definition.optional,
	        mode = definition.mode, // @, =, <, or &
	        lastValue,
	        parentGet, parentSet, compare, removeWatch;

	        switch (mode) {

	          case '@':
	            if (!optional && !hasOwnProperty.call(attrs, attrName)) {
	              destination[scopeName] = attrs[attrName] = undefined;
	            }
	            removeWatch = attrs.$observe(attrName, function(value) {
	              if (isString(value) || isBoolean(value)) {
	                var oldValue = destination[scopeName];
	                recordChanges(scopeName, value, oldValue);
	                destination[scopeName] = value;
	              }
	            });
	            attrs.$$observers[attrName].$$scope = scope;
	            lastValue = attrs[attrName];
	            if (isString(lastValue)) {
	              // If the attribute has been provided then we trigger an interpolation to ensure
	              // the value is there for use in the link fn
	              destination[scopeName] = $interpolate(lastValue)(scope);
	            } else if (isBoolean(lastValue)) {
	              // If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
	              // the value to boolean rather than a string, so we special case this situation
	              destination[scopeName] = lastValue;
	            }
	            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
	            removeWatchCollection.push(removeWatch);
	            break;

	          case '=':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = undefined;
	            }
	            if (optional && !attrs[attrName]) break;

	            parentGet = $parse(attrs[attrName]);
	            if (parentGet.literal) {
	              compare = equals;
	            } else {
	              // eslint-disable-next-line no-self-compare
	              compare = function simpleCompare(a, b) { return a === b || (a !== a && b !== b); };
	            }
	            parentSet = parentGet.assign || function() {
	              // reset the change, or we will throw this exception on every $digest
	              lastValue = destination[scopeName] = parentGet(scope);
	              throw $compileMinErr('nonassign',
	                  'Expression \'{0}\' in attribute \'{1}\' used with directive \'{2}\' is non-assignable!',
	                  attrs[attrName], attrName, directive.name);
	            };
	            lastValue = destination[scopeName] = parentGet(scope);
	            var parentValueWatch = function parentValueWatch(parentValue) {
	              if (!compare(parentValue, destination[scopeName])) {
	                // we are out of sync and need to copy
	                if (!compare(parentValue, lastValue)) {
	                  // parent changed and it has precedence
	                  destination[scopeName] = parentValue;
	                } else {
	                  // if the parent can be assigned then do so
	                  parentSet(scope, parentValue = destination[scopeName]);
	                }
	              }
	              lastValue = parentValue;
	              return lastValue;
	            };
	            parentValueWatch.$stateful = true;
	            if (definition.collection) {
	              removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
	            } else {
	              removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
	            }
	            removeWatchCollection.push(removeWatch);
	            break;

	          case '<':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = undefined;
	            }
	            if (optional && !attrs[attrName]) break;

	            parentGet = $parse(attrs[attrName]);
	            var deepWatch = parentGet.literal;

	            var initialValue = destination[scopeName] = parentGet(scope);
	            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);

	            removeWatch = scope.$watch(parentGet, function parentValueWatchAction(newValue, oldValue) {
	              if (oldValue === newValue) {
	                if (oldValue === initialValue || (deepWatch && equals(oldValue, initialValue))) {
	                  return;
	                }
	                oldValue = initialValue;
	              }
	              recordChanges(scopeName, newValue, oldValue);
	              destination[scopeName] = newValue;
	            }, deepWatch);

	            removeWatchCollection.push(removeWatch);
	            break;

	          case '&':
	            // Don't assign Object.prototype method to scope
	            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;

	            // Don't assign noop to destination if expression is not valid
	            if (parentGet === noop && optional) break;

	            destination[scopeName] = function(locals) {
	              return parentGet(scope, locals);
	            };
	            break;
	        }
	      });

	      function recordChanges(key, currentValue, previousValue) {
	        if (isFunction(destination.$onChanges) && currentValue !== previousValue &&
	            // eslint-disable-next-line no-self-compare
	            (currentValue === currentValue || previousValue === previousValue)) {
	          // If we have not already scheduled the top level onChangesQueue handler then do so now
	          if (!onChangesQueue) {
	            scope.$$postDigest(flushOnChangesQueue);
	            onChangesQueue = [];
	          }
	          // If we have not already queued a trigger of onChanges for this controller then do so now
	          if (!changes) {
	            changes = {};
	            onChangesQueue.push(triggerOnChangesHook);
	          }
	          // If the has been a change on this property already then we need to reuse the previous value
	          if (changes[key]) {
	            previousValue = changes[key].previousValue;
	          }
	          // Store this change
	          changes[key] = new SimpleChange(previousValue, currentValue);
	        }
	      }

	      function triggerOnChangesHook() {
	        destination.$onChanges(changes);
	        // Now clear the changes so that we schedule onChanges when more changes arrive
	        changes = undefined;
	      }

	      return {
	        initialChanges: initialChanges,
	        removeWatches: removeWatchCollection.length && function removeWatches() {
	          for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {
	            removeWatchCollection[i]();
	          }
	        }
	      };
	    }
	  }];
	}

	function SimpleChange(previous, current) {
	  this.previousValue = previous;
	  this.currentValue = current;
	}
	SimpleChange.prototype.isFirstChange = function() { return this.previousValue === _UNINITIALIZED_VALUE; };


	var PREFIX_REGEXP = /^((?:x|data)[:\-_])/i;
	var SPECIAL_CHARS_REGEXP = /[:\-_]+(.)/g;

	/**
	 * Converts all accepted directives format into proper directive name.
	 * @param name Name to normalize
	 */
	function directiveNormalize(name) {
	  return name
	    .replace(PREFIX_REGEXP, '')
	    .replace(SPECIAL_CHARS_REGEXP, fnCamelCaseReplace);
	}

	/**
	 * @ngdoc type
	 * @name $compile.directive.Attributes
	 *
	 * @description
	 * A shared object between directive compile / linking functions which contains normalized DOM
	 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
	 * needed since all of these are treated as equivalent in Angular:
	 *
	 * ```
	 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
	 * ```
	 */

	/**
	 * @ngdoc property
	 * @name $compile.directive.Attributes#$attr
	 *
	 * @description
	 * A map of DOM element attribute names to the normalized name. This is
	 * needed to do reverse lookup from normalized name back to actual name.
	 */


	/**
	 * @ngdoc method
	 * @name $compile.directive.Attributes#$set
	 * @kind function
	 *
	 * @description
	 * Set DOM element attribute value.
	 *
	 *
	 * @param {string} name Normalized element attribute name of the property to modify. The name is
	 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
	 *          property to the original name.
	 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
	 */



	/**
	 * Closure compiler type information
	 */

	function nodesetLinkingFn(
	  /* angular.Scope */ scope,
	  /* NodeList */ nodeList,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}

	function directiveLinkingFn(
	  /* nodesetLinkingFn */ nodesetLinkingFn,
	  /* angular.Scope */ scope,
	  /* Node */ node,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}

	function tokenDifference(str1, str2) {
	  var values = '',
	      tokens1 = str1.split(/\s+/),
	      tokens2 = str2.split(/\s+/);

	  outer:
	  for (var i = 0; i < tokens1.length; i++) {
	    var token = tokens1[i];
	    for (var j = 0; j < tokens2.length; j++) {
	      if (token === tokens2[j]) continue outer;
	    }
	    values += (values.length > 0 ? ' ' : '') + token;
	  }
	  return values;
	}

	function removeComments(jqNodes) {
	  jqNodes = jqLite(jqNodes);
	  var i = jqNodes.length;

	  if (i <= 1) {
	    return jqNodes;
	  }

	  while (i--) {
	    var node = jqNodes[i];
	    if (node.nodeType === NODE_TYPE_COMMENT ||
	       (node.nodeType === NODE_TYPE_TEXT && node.nodeValue.trim() === '')) {
	         splice.call(jqNodes, i, 1);
	    }
	  }
	  return jqNodes;
	}

	var $controllerMinErr = minErr('$controller');


	var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
	function identifierForController(controller, ident) {
	  if (ident && isString(ident)) return ident;
	  if (isString(controller)) {
	    var match = CNTRL_REG.exec(controller);
	    if (match) return match[3];
	  }
	}


	/**
	 * @ngdoc provider
	 * @name $controllerProvider
	 * @this
	 *
	 * @description
	 * The {@link ng.$controller $controller service} is used by Angular to create new
	 * controllers.
	 *
	 * This provider allows controller registration via the
	 * {@link ng.$controllerProvider#register register} method.
	 */
	function $ControllerProvider() {
	  var controllers = {},
	      globals = false;

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#has
	   * @param {string} name Controller name to check.
	   */
	  this.has = function(name) {
	    return controllers.hasOwnProperty(name);
	  };

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#register
	   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
	   *    the names and the values are the constructors.
	   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
	   *    annotations in the array notation).
	   */
	  this.register = function(name, constructor) {
	    assertNotHasOwnProperty(name, 'controller');
	    if (isObject(name)) {
	      extend(controllers, name);
	    } else {
	      controllers[name] = constructor;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#allowGlobals
	   * @description If called, allows `$controller` to find controller constructors on `window`
	   *
	   * @deprecated
	   * sinceVersion="v1.3.0"
	   * removeVersion="v1.7.0"
	   * This method of finding controllers has been deprecated.
	   */
	  this.allowGlobals = function() {
	    globals = true;
	  };


	  this.$get = ['$injector', '$window', function($injector, $window) {

	    /**
	     * @ngdoc service
	     * @name $controller
	     * @requires $injector
	     *
	     * @param {Function|string} constructor If called with a function then it's considered to be the
	     *    controller constructor function. Otherwise it's considered to be a string which is used
	     *    to retrieve the controller constructor using the following steps:
	     *
	     *    * check if a controller with given name is registered via `$controllerProvider`
	     *    * check if evaluating the string on the current scope returns a constructor
	     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
	     *      `window` object (deprecated, not recommended)
	     *
	     *    The string can use the `controller as property` syntax, where the controller instance is published
	     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
	     *    to work correctly.
	     *
	     * @param {Object} locals Injection locals for Controller.
	     * @return {Object} Instance of given controller.
	     *
	     * @description
	     * `$controller` service is responsible for instantiating controllers.
	     *
	     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
	     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
	     */
	    return function $controller(expression, locals, later, ident) {
	      // PRIVATE API:
	      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
	      //                     If true, $controller will allocate the object with the correct
	      //                     prototype chain, but will not invoke the controller until a returned
	      //                     callback is invoked.
	      //   param `ident` --- An optional label which overrides the label parsed from the controller
	      //                     expression, if any.
	      var instance, match, constructor, identifier;
	      later = later === true;
	      if (ident && isString(ident)) {
	        identifier = ident;
	      }

	      if (isString(expression)) {
	        match = expression.match(CNTRL_REG);
	        if (!match) {
	          throw $controllerMinErr('ctrlfmt',
	            'Badly formed controller string \'{0}\'. ' +
	            'Must match `__name__ as __id__` or `__name__`.', expression);
	        }
	        constructor = match[1];
	        identifier = identifier || match[3];
	        expression = controllers.hasOwnProperty(constructor)
	            ? controllers[constructor]
	            : getter(locals.$scope, constructor, true) ||
	                (globals ? getter($window, constructor, true) : undefined);

	        if (!expression) {
	          throw $controllerMinErr('ctrlreg',
	            'The controller with the name \'{0}\' is not registered.', constructor);
	        }

	        assertArgFn(expression, constructor, true);
	      }

	      if (later) {
	        // Instantiate controller later:
	        // This machinery is used to create an instance of the object before calling the
	        // controller's constructor itself.
	        //
	        // This allows properties to be added to the controller before the constructor is
	        // invoked. Primarily, this is used for isolate scope bindings in $compile.
	        //
	        // This feature is not intended for use by applications, and is thus not documented
	        // publicly.
	        // Object creation: http://jsperf.com/create-constructor/2
	        var controllerPrototype = (isArray(expression) ?
	          expression[expression.length - 1] : expression).prototype;
	        instance = Object.create(controllerPrototype || null);

	        if (identifier) {
	          addIdentifier(locals, identifier, instance, constructor || expression.name);
	        }

	        return extend(function $controllerInit() {
	          var result = $injector.invoke(expression, instance, locals, constructor);
	          if (result !== instance && (isObject(result) || isFunction(result))) {
	            instance = result;
	            if (identifier) {
	              // If result changed, re-assign controllerAs value to scope.
	              addIdentifier(locals, identifier, instance, constructor || expression.name);
	            }
	          }
	          return instance;
	        }, {
	          instance: instance,
	          identifier: identifier
	        });
	      }

	      instance = $injector.instantiate(expression, locals, constructor);

	      if (identifier) {
	        addIdentifier(locals, identifier, instance, constructor || expression.name);
	      }

	      return instance;
	    };

	    function addIdentifier(locals, identifier, instance, name) {
	      if (!(locals && isObject(locals.$scope))) {
	        throw minErr('$controller')('noscp',
	          'Cannot export controller \'{0}\' as \'{1}\'! No $scope object provided via `locals`.',
	          name, identifier);
	      }

	      locals.$scope[identifier] = instance;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $document
	 * @requires $window
	 * @this
	 *
	 * @description
	 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
	 *
	 * @example
	   <example module="documentExample" name="document">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <p>$document title: <b ng-bind="title"></b></p>
	         <p>window.document title: <b ng-bind="windowTitle"></b></p>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('documentExample', [])
	         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
	     </file>
	   </example>
	 */
	function $DocumentProvider() {
	  this.$get = ['$window', function(window) {
	    return jqLite(window.document);
	  }];
	}


	/**
	 * @private
	 * @this
	 * Listens for document visibility change and makes the current status accessible.
	 */
	function $$IsDocumentHiddenProvider() {
	  this.$get = ['$document', '$rootScope', function($document, $rootScope) {
	    var doc = $document[0];
	    var hidden = doc && doc.hidden;

	    $document.on('visibilitychange', changeListener);

	    $rootScope.$on('$destroy', function() {
	      $document.off('visibilitychange', changeListener);
	    });

	    function changeListener() {
	      hidden = doc.hidden;
	    }

	    return function() {
	      return hidden;
	    };
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $exceptionHandler
	 * @requires ng.$log
	 * @this
	 *
	 * @description
	 * Any uncaught exception in angular expressions is delegated to this service.
	 * The default implementation simply delegates to `$log.error` which logs it into
	 * the browser console.
	 *
	 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
	 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
	 *
	 * ## Example:
	 *
	 * The example below will overwrite the default `$exceptionHandler` in order to (a) log uncaught
	 * errors to the backend for later inspection by the developers and (b) to use `$log.warn()` instead
	 * of `$log.error()`.
	 *
	 * ```js
	 *   angular.
	 *     module('exceptionOverwrite', []).
	 *     factory('$exceptionHandler', ['$log', 'logErrorsToBackend', function($log, logErrorsToBackend) {
	 *       return function myExceptionHandler(exception, cause) {
	 *         logErrorsToBackend(exception, cause);
	 *         $log.warn(exception, cause);
	 *       };
	 *     }]);
	 * ```
	 *
	 * <hr />
	 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
	 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
	 * (unless executed during a digest).
	 *
	 * If you wish, you can manually delegate exceptions, e.g.
	 * `try { ... } catch(e) { $exceptionHandler(e); }`
	 *
	 * @param {Error} exception Exception associated with the error.
	 * @param {string=} cause Optional information about the context in which
	 *       the error was thrown.
	 *
	 */
	function $ExceptionHandlerProvider() {
	  this.$get = ['$log', function($log) {
	    return function(exception, cause) {
	      $log.error.apply($log, arguments);
	    };
	  }];
	}

	var $$ForceReflowProvider = /** @this */ function() {
	  this.$get = ['$document', function($document) {
	    return function(domNode) {
	      //the line below will force the browser to perform a repaint so
	      //that all the animated elements within the animation frame will
	      //be properly updated and drawn on screen. This is required to
	      //ensure that the preparation animation is properly flushed so that
	      //the active state picks up from there. DO NOT REMOVE THIS LINE.
	      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
	      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
	      //WILL TAKE YEARS AWAY FROM YOUR LIFE.
	      if (domNode) {
	        if (!domNode.nodeType && domNode instanceof jqLite) {
	          domNode = domNode[0];
	        }
	      } else {
	        domNode = $document[0].body;
	      }
	      return domNode.offsetWidth + 1;
	    };
	  }];
	};

	var APPLICATION_JSON = 'application/json';
	var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
	var JSON_START = /^\[|^\{(?!\{)/;
	var JSON_ENDS = {
	  '[': /]$/,
	  '{': /}$/
	};
	var JSON_PROTECTION_PREFIX = /^\)]\}',?\n/;
	var $httpMinErr = minErr('$http');

	function serializeValue(v) {
	  if (isObject(v)) {
	    return isDate(v) ? v.toISOString() : toJson(v);
	  }
	  return v;
	}


	/** @this */
	function $HttpParamSerializerProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializer
	   * @description
	   *
	   * Default {@link $http `$http`} params serializer that converts objects to strings
	   * according to the following rules:
	   *
	   * * `{'foo': 'bar'}` results in `foo=bar`
	   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
	   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
	   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D` (stringified and encoded representation of an object)
	   *
	   * Note that serializer will sort the request parameters alphabetically.
	   * */

	  this.$get = function() {
	    return function ngParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      forEachSorted(params, function(value, key) {
	        if (value === null || isUndefined(value)) return;
	        if (isArray(value)) {
	          forEach(value, function(v) {
	            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));
	          });
	        } else {
	          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
	        }
	      });

	      return parts.join('&');
	    };
	  };
	}

	/** @this */
	function $HttpParamSerializerJQLikeProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializerJQLike
	   *
	   * @description
	   *
	   * Alternative {@link $http `$http`} params serializer that follows
	   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
	   * The serializer will also sort the params alphabetically.
	   *
	   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
	   *
	   * ```js
	   * $http({
	   *   url: myUrl,
	   *   method: 'GET',
	   *   params: myParams,
	   *   paramSerializer: '$httpParamSerializerJQLike'
	   * });
	   * ```
	   *
	   * It is also possible to set it as the default `paramSerializer` in the
	   * {@link $httpProvider#defaults `$httpProvider`}.
	   *
	   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
	   * form data for submission:
	   *
	   * ```js
	   * .controller(function($http, $httpParamSerializerJQLike) {
	   *   //...
	   *
	   *   $http({
	   *     url: myUrl,
	   *     method: 'POST',
	   *     data: $httpParamSerializerJQLike(myData),
	   *     headers: {
	   *       'Content-Type': 'application/x-www-form-urlencoded'
	   *     }
	   *   });
	   *
	   * });
	   * ```
	   *
	   * */
	  this.$get = function() {
	    return function jQueryLikeParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      serialize(params, '', true);
	      return parts.join('&');

	      function serialize(toSerialize, prefix, topLevel) {
	        if (toSerialize === null || isUndefined(toSerialize)) return;
	        if (isArray(toSerialize)) {
	          forEach(toSerialize, function(value, index) {
	            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');
	          });
	        } else if (isObject(toSerialize) && !isDate(toSerialize)) {
	          forEachSorted(toSerialize, function(value, key) {
	            serialize(value, prefix +
	                (topLevel ? '' : '[') +
	                key +
	                (topLevel ? '' : ']'));
	          });
	        } else {
	          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
	        }
	      }
	    };
	  };
	}

	function defaultHttpResponseTransform(data, headers) {
	  if (isString(data)) {
	    // Strip json vulnerability protection prefix and trim whitespace
	    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

	    if (tempData) {
	      var contentType = headers('Content-Type');
	      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
	        data = fromJson(tempData);
	      }
	    }
	  }

	  return data;
	}

	function isJsonLike(str) {
	    var jsonStart = str.match(JSON_START);
	    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
	}

	/**
	 * Parse headers into key value object
	 *
	 * @param {string} headers Raw headers as a string
	 * @returns {Object} Parsed headers as key value object
	 */
	function parseHeaders(headers) {
	  var parsed = createMap(), i;

	  function fillInParsed(key, val) {
	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  }

	  if (isString(headers)) {
	    forEach(headers.split('\n'), function(line) {
	      i = line.indexOf(':');
	      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
	    });
	  } else if (isObject(headers)) {
	    forEach(headers, function(headerVal, headerKey) {
	      fillInParsed(lowercase(headerKey), trim(headerVal));
	    });
	  }

	  return parsed;
	}


	/**
	 * Returns a function that provides access to parsed headers.
	 *
	 * Headers are lazy parsed when first requested.
	 * @see parseHeaders
	 *
	 * @param {(string|Object)} headers Headers to provide access to.
	 * @returns {function(string=)} Returns a getter function which if called with:
	 *
	 *   - if called with an argument returns a single header value or null
	 *   - if called with no arguments returns an object containing all headers.
	 */
	function headersGetter(headers) {
	  var headersObj;

	  return function(name) {
	    if (!headersObj) headersObj =  parseHeaders(headers);

	    if (name) {
	      var value = headersObj[lowercase(name)];
	      if (value === undefined) {
	        value = null;
	      }
	      return value;
	    }

	    return headersObj;
	  };
	}


	/**
	 * Chain all given functions
	 *
	 * This function is used for both request and response transforming
	 *
	 * @param {*} data Data to transform.
	 * @param {function(string=)} headers HTTP headers getter fn.
	 * @param {number} status HTTP status code of the response.
	 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
	 * @returns {*} Transformed data.
	 */
	function transformData(data, headers, status, fns) {
	  if (isFunction(fns)) {
	    return fns(data, headers, status);
	  }

	  forEach(fns, function(fn) {
	    data = fn(data, headers, status);
	  });

	  return data;
	}


	function isSuccess(status) {
	  return 200 <= status && status < 300;
	}


	/**
	 * @ngdoc provider
	 * @name $httpProvider
	 * @this
	 *
	 * @description
	 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
	 * */
	function $HttpProvider() {
	  /**
	   * @ngdoc property
	   * @name $httpProvider#defaults
	   * @description
	   *
	   * Object containing default values for all {@link ng.$http $http} requests.
	   *
	   * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
	   * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
	   * by default. See {@link $http#caching $http Caching} for more information.
	   *
	   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
	   * Defaults value is `'XSRF-TOKEN'`.
	   *
	   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
	   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
	   *
	   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
	   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
	   * setting default headers.
	   *     - **`defaults.headers.common`**
	   *     - **`defaults.headers.post`**
	   *     - **`defaults.headers.put`**
	   *     - **`defaults.headers.patch`**
	   *
	   *
	   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
	   *  used to the prepare string representation of request parameters (specified as an object).
	   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
	   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
	   *
	   * - **`defaults.jsonpCallbackParam`** - `{string}` - the name of the query parameter that passes the name of the
	   * callback in a JSONP request. The value of this parameter will be replaced with the expression generated by the
	   * {@link $jsonpCallbacks} service. Defaults to `'callback'`.
	   *
	   **/
	  var defaults = this.defaults = {
	    // transform incoming response data
	    transformResponse: [defaultHttpResponseTransform],

	    // transform outgoing request data
	    transformRequest: [function(d) {
	      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
	    }],

	    // default headers
	    headers: {
	      common: {
	        'Accept': 'application/json, text/plain, */*'
	      },
	      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
	    },

	    xsrfCookieName: 'XSRF-TOKEN',
	    xsrfHeaderName: 'X-XSRF-TOKEN',

	    paramSerializer: '$httpParamSerializer',

	    jsonpCallbackParam: 'callback'
	  };

	  var useApplyAsync = false;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useApplyAsync
	   * @description
	   *
	   * Configure $http service to combine processing of multiple http responses received at around
	   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
	   * significant performance improvement for bigger applications that make many HTTP requests
	   * concurrently (common during application bootstrap).
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
	   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
	   *    to load and share the same digest cycle.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useApplyAsync = function(value) {
	    if (isDefined(value)) {
	      useApplyAsync = !!value;
	      return this;
	    }
	    return useApplyAsync;
	  };

	  /**
	   * @ngdoc property
	   * @name $httpProvider#interceptors
	   * @description
	   *
	   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
	   * pre-processing of request or postprocessing of responses.
	   *
	   * These service factories are ordered by request, i.e. they are applied in the same order as the
	   * array, on request, but reverse order, on response.
	   *
	   * {@link ng.$http#interceptors Interceptors detailed info}
	   **/
	  var interceptorFactories = this.interceptors = [];

	  this.$get = ['$browser', '$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector', '$sce',
	      function($browser, $httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector, $sce) {

	    var defaultCache = $cacheFactory('$http');

	    /**
	     * Make sure that default param serializer is exposed as a function
	     */
	    defaults.paramSerializer = isString(defaults.paramSerializer) ?
	      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;

	    /**
	     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
	     * The reversal is needed so that we can build up the interception chain around the
	     * server request.
	     */
	    var reversedInterceptors = [];

	    forEach(interceptorFactories, function(interceptorFactory) {
	      reversedInterceptors.unshift(isString(interceptorFactory)
	          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
	    });

	    /**
	     * @ngdoc service
	     * @kind function
	     * @name $http
	     * @requires ng.$httpBackend
	     * @requires $cacheFactory
	     * @requires $rootScope
	     * @requires $q
	     * @requires $injector
	     *
	     * @description
	     * The `$http` service is a core Angular service that facilitates communication with the remote
	     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
	     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
	     *
	     * For unit testing applications that use `$http` service, see
	     * {@link ngMock.$httpBackend $httpBackend mock}.
	     *
	     * For a higher level of abstraction, please check out the {@link ngResource.$resource
	     * $resource} service.
	     *
	     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
	     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
	     * it is important to familiarize yourself with these APIs and the guarantees they provide.
	     *
	     *
	     * ## General usage
	     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
	     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
	     *
	     * ```js
	     *   // Simple GET request example:
	     *   $http({
	     *     method: 'GET',
	     *     url: '/someUrl'
	     *   }).then(function successCallback(response) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }, function errorCallback(response) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     * The response object has these properties:
	     *
	     *   - **data** – `{string|Object}` – The response body transformed with the transform
	     *     functions.
	     *   - **status** – `{number}` – HTTP status code of the response.
	     *   - **headers** – `{function([headerName])}` – Header getter function.
	     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
	     *   - **statusText** – `{string}` – HTTP status text of the response.
	     *
	     * A response status code between 200 and 299 is considered a success status and will result in
	     * the success callback being called. Any response status code outside of that range is
	     * considered an error status and will result in the error callback being called.
	     * Also, status codes less than -1 are normalized to zero. -1 usually means the request was
	     * aborted, e.g. using a `config.timeout`.
	     * Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning
	     * that the outcome (success or error) will be determined by the final response status code.
	     *
	     *
	     * ## Shortcut methods
	     *
	     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
	     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
	     * last argument.
	     *
	     * ```js
	     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
	     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
	     * ```
	     *
	     * Complete list of shortcut methods:
	     *
	     * - {@link ng.$http#get $http.get}
	     * - {@link ng.$http#head $http.head}
	     * - {@link ng.$http#post $http.post}
	     * - {@link ng.$http#put $http.put}
	     * - {@link ng.$http#delete $http.delete}
	     * - {@link ng.$http#jsonp $http.jsonp}
	     * - {@link ng.$http#patch $http.patch}
	     *
	     *
	     * ## Writing Unit Tests that use $http
	     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
	     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
	     * request using trained responses.
	     *
	     * ```
	     * $httpBackend.expectGET(...);
	     * $http.get(...);
	     * $httpBackend.flush();
	     * ```
	     *
	     * ## Setting HTTP Headers
	     *
	     * The $http service will automatically add certain HTTP headers to all requests. These defaults
	     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
	     * object, which currently contains this default configuration:
	     *
	     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
	     *   - <code>Accept: application/json, text/plain, \*&#65279;/&#65279;\*</code>
	     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
	     *   - `Content-Type: application/json`
	     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
	     *   - `Content-Type: application/json`
	     *
	     * To add or overwrite these defaults, simply add or remove a property from these configuration
	     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
	     * with the lowercased HTTP method name as the key, e.g.
	     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
	     *
	     * The defaults can also be set at runtime via the `$http.defaults` object in the same
	     * fashion. For example:
	     *
	     * ```
	     * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
	     * });
	     * ```
	     *
	     * In addition, you can supply a `headers` property in the config object passed when
	     * calling `$http(config)`, which overrides the defaults without changing them globally.
	     *
	     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
	     * Use the `headers` property, setting the desired header to `undefined`. For example:
	     *
	     * ```js
	     * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
	     *
	     * $http(req).then(function(){...}, function(){...});
	     * ```
	     *
	     * ## Transforming Requests and Responses
	     *
	     * Both requests and responses can be transformed using transformation functions: `transformRequest`
	     * and `transformResponse`. These properties can be a single function that returns
	     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
	     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
	     *
	     * <div class="alert alert-warning">
	     * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
	     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
	     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
	     * function will be reflected on the scope and in any templates where the object is data-bound.
	     * To prevent this, transform functions should have no side-effects.
	     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
	     * </div>
	     *
	     * ### Default Transformations
	     *
	     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
	     * `defaults.transformResponse` properties. If a request does not provide its own transformations
	     * then these will be applied.
	     *
	     * You can augment or replace the default transformations by modifying these properties by adding to or
	     * replacing the array.
	     *
	     * Angular provides the following default transformations:
	     *
	     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
	     *
	     * - If the `data` property of the request configuration object contains an object, serialize it
	     *   into JSON format.
	     *
	     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
	     *
	     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
	     *  - If JSON response is detected, deserialize it using a JSON parser.
	     *
	     *
	     * ### Overriding the Default Transformations Per Request
	     *
	     * If you wish to override the request/response transformations only for a single request then provide
	     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
	     * into `$http`.
	     *
	     * Note that if you provide these properties on the config object the default transformations will be
	     * overwritten. If you wish to augment the default transformations then you must include them in your
	     * local transformation array.
	     *
	     * The following code demonstrates adding a new response transformation to be run after the default response
	     * transformations have been run.
	     *
	     * ```js
	     * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
	     *
	     * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
	     * ```
	     *
	     *
	     * ## Caching
	     *
	     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
	     * set the config.cache value or the default cache value to TRUE or to a cache object (created
	     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
	     * precedence over the default cache value.
	     *
	     * In order to:
	     *   * cache all responses - set the default cache value to TRUE or to a cache object
	     *   * cache a specific response - set config.cache value to TRUE or to a cache object
	     *
	     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
	     * then the default `$cacheFactory("$http")` object is used.
	     *
	     * The default cache value can be set by updating the
	     * {@link ng.$http#defaults `$http.defaults.cache`} property or the
	     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
	     *
	     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
	     * the relevant cache object. The next time the same request is made, the response is returned
	     * from the cache without sending a request to the server.
	     *
	     * Take note that:
	     *
	     *   * Only GET and JSONP requests are cached.
	     *   * The cache key is the request URL including search parameters; headers are not considered.
	     *   * Cached responses are returned asynchronously, in the same way as responses from the server.
	     *   * If multiple identical requests are made using the same cache, which is not yet populated,
	     *     one request will be made to the server and remaining requests will return the same response.
	     *   * A cache-control header on the response does not affect if or how responses are cached.
	     *
	     *
	     * ## Interceptors
	     *
	     * Before you start creating interceptors, be sure to understand the
	     * {@link ng.$q $q and deferred/promise APIs}.
	     *
	     * For purposes of global error handling, authentication, or any kind of synchronous or
	     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
	     * able to intercept requests before they are handed to the server and
	     * responses before they are handed over to the application code that
	     * initiated these requests. The interceptors leverage the {@link ng.$q
	     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
	     *
	     * The interceptors are service factories that are registered with the `$httpProvider` by
	     * adding them to the `$httpProvider.interceptors` array. The factory is called and
	     * injected with dependencies (if specified) and returns the interceptor.
	     *
	     * There are two kinds of interceptors (and two kinds of rejection interceptors):
	     *
	     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
	     *     modify the `config` object or create a new one. The function needs to return the `config`
	     *     object directly, or a promise containing the `config` or a new `config` object.
	     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *   * `response`: interceptors get called with http `response` object. The function is free to
	     *     modify the `response` object or create a new one. The function needs to return the `response`
	     *     object directly, or as a promise containing the `response` or a new `response` object.
	     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *
	     *
	     * ```js
	     *   // register the interceptor as a service
	     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
	     *
	     *   $httpProvider.interceptors.push('myHttpInterceptor');
	     *
	     *
	     *   // alternatively, register the interceptor via an anonymous factory
	     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
	     * ```
	     *
	     * ## Security Considerations
	     *
	     * When designing web applications, consider security threats from:
	     *
	     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
	     *
	     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
	     * pre-configured with strategies that address these issues, but for this to work backend server
	     * cooperation is required.
	     *
	     * ### JSON Vulnerability Protection
	     *
	     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * allows third party website to turn your JSON resource URL into
	     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
	     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
	     * Angular will automatically strip the prefix before processing it as JSON.
	     *
	     * For example if your server needs to return:
	     * ```js
	     * ['one','two']
	     * ```
	     *
	     * which is vulnerable to attack, your server can return:
	     * ```js
	     * )]}',
	     * ['one','two']
	     * ```
	     *
	     * Angular will strip the prefix, before processing the JSON.
	     *
	     *
	     * ### Cross Site Request Forgery (XSRF) Protection
	     *
	     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
	     * which the attacker can trick an authenticated user into unknowingly executing actions on your
	     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
	     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
	     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
	     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
	     * The header will not be set for cross-domain requests.
	     *
	     * To take advantage of this, your server needs to set a token in a JavaScript readable session
	     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
	     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
	     * that only JavaScript running on your domain could have sent the request. The token must be
	     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
	     * making up its own tokens). We recommend that the token is a digest of your site's
	     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
	     * for added security.
	     *
	     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
	     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
	     * or the per-request config object.
	     *
	     * In order to prevent collisions in environments where multiple Angular apps share the
	     * same domain or subdomain, we recommend that each application uses unique cookie name.
	     *
	     * @param {object} config Object describing the request to be made and how it should be
	     *    processed. The object has following properties:
	     *
	     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
	     *    - **url** – `{string|TrustedObject}` – Absolute or relative URL of the resource that is being requested;
	     *      or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
	     *      with the `paramSerializer` and appended as GET parameters.
	     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
	     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
	     *      HTTP headers to send to the server. If the return value of a function is null, the
	     *      header will not be sent. Functions accept a config object as an argument.
	     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
	     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
	     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
	     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
	     *    - **transformRequest** –
	     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      request body and headers and returns its transformed (typically serialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **transformResponse** –
	     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      response body, headers and status and returns its transformed (typically deserialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
	     *      prepare the string representation of request parameters (specified as an object).
	     *      If specified as string, it is interpreted as function registered with the
	     *      {@link $injector $injector}, which means you can create your own serializer
	     *      by registering it as a {@link auto.$provide#service service}.
	     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
	     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
	     *    - **cache** – `{boolean|Object}` – A boolean value or object created with
	     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
	     *      See {@link $http#caching $http Caching} for more information.
	     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
	     *      that should abort the request when resolved.
	     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
	     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
	     *      for more information.
	     *    - **responseType** - `{string}` - see
	     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
	     *
	     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
	     *                        when the request succeeds or fails.
	     *
	     *
	     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
	     *   requests. This is primarily meant to be used for debugging purposes.
	     *
	     *
	     * @example
	<example module="httpExample" name="http-service">
	<file name="index.html">
	  <div ng-controller="FetchController">
	    <select ng-model="method" aria-label="Request method">
	      <option>GET</option>
	      <option>JSONP</option>
	    </select>
	    <input type="text" ng-model="url" size="80" aria-label="URL" />
	    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
	    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
	    <button id="samplejsonpbtn"
	      ng-click="updateModel('JSONP',
	                    'https://angularjs.org/greet.php?name=Super%20Hero')">
	      Sample JSONP
	    </button>
	    <button id="invalidjsonpbtn"
	      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist')">
	        Invalid JSONP
	      </button>
	    <pre>http status code: {{status}}</pre>
	    <pre>http response data: {{data}}</pre>
	  </div>
	</file>
	<file name="script.js">
	  angular.module('httpExample', [])
	    .config(['$sceDelegateProvider', function($sceDelegateProvider) {
	      // We must whitelist the JSONP endpoint that we are using to show that we trust it
	      $sceDelegateProvider.resourceUrlWhitelist([
	        'self',
	        'https://angularjs.org/**'
	      ]);
	    }])
	    .controller('FetchController', ['$scope', '$http', '$templateCache',
	      function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';

	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;

	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            then(function(response) {
	              $scope.status = response.status;
	              $scope.data = response.data;
	            }, function(response) {
	              $scope.data = response.data || 'Request failed';
	              $scope.status = response.status;
	          });
	        };

	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
	</file>
	<file name="http-hello.html">
	  Hello, $http!
	</file>
	<file name="protractor.js" type="protractor">
	  var status = element(by.binding('status'));
	  var data = element(by.binding('data'));
	  var fetchBtn = element(by.id('fetchbtn'));
	  var sampleGetBtn = element(by.id('samplegetbtn'));
	  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

	  it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });

	// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
	// it('should make a JSONP request to angularjs.org', function() {
	//   var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });

	  it('should make JSONP request to invalid URL and invoke the error handler',
	      function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
	</file>
	</example>
	     */
	    function $http(requestConfig) {

	      if (!isObject(requestConfig)) {
	        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
	      }

	      if (!isString($sce.valueOf(requestConfig.url))) {
	        throw minErr('$http')('badreq', 'Http request configuration url must be a string or a $sce trusted object.  Received: {0}', requestConfig.url);
	      }

	      var config = extend({
	        method: 'get',
	        transformRequest: defaults.transformRequest,
	        transformResponse: defaults.transformResponse,
	        paramSerializer: defaults.paramSerializer,
	        jsonpCallbackParam: defaults.jsonpCallbackParam
	      }, requestConfig);

	      config.headers = mergeHeaders(requestConfig);
	      config.method = uppercase(config.method);
	      config.paramSerializer = isString(config.paramSerializer) ?
	          $injector.get(config.paramSerializer) : config.paramSerializer;

	      $browser.$$incOutstandingRequestCount();

	      var requestInterceptors = [];
	      var responseInterceptors = [];
	      var promise = $q.resolve(config);

	      // apply interceptors
	      forEach(reversedInterceptors, function(interceptor) {
	        if (interceptor.request || interceptor.requestError) {
	          requestInterceptors.unshift(interceptor.request, interceptor.requestError);
	        }
	        if (interceptor.response || interceptor.responseError) {
	          responseInterceptors.push(interceptor.response, interceptor.responseError);
	        }
	      });

	      promise = chainInterceptors(promise, requestInterceptors);
	      promise = promise.then(serverRequest);
	      promise = chainInterceptors(promise, responseInterceptors);
	      promise = promise.finally(completeOutstandingRequest);

	      return promise;


	      function chainInterceptors(promise, interceptors) {
	        for (var i = 0, ii = interceptors.length; i < ii;) {
	          var thenFn = interceptors[i++];
	          var rejectFn = interceptors[i++];

	          promise = promise.then(thenFn, rejectFn);
	        }

	        interceptors.length = 0;

	        return promise;
	      }

	      function completeOutstandingRequest() {
	        $browser.$$completeOutstandingRequest(noop);
	      }

	      function executeHeaderFns(headers, config) {
	        var headerContent, processedHeaders = {};

	        forEach(headers, function(headerFn, header) {
	          if (isFunction(headerFn)) {
	            headerContent = headerFn(config);
	            if (headerContent != null) {
	              processedHeaders[header] = headerContent;
	            }
	          } else {
	            processedHeaders[header] = headerFn;
	          }
	        });

	        return processedHeaders;
	      }

	      function mergeHeaders(config) {
	        var defHeaders = defaults.headers,
	            reqHeaders = extend({}, config.headers),
	            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

	        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

	        // using for-in instead of forEach to avoid unnecessary iteration after header has been found
	        defaultHeadersIteration:
	        for (defHeaderName in defHeaders) {
	          lowercaseDefHeaderName = lowercase(defHeaderName);

	          for (reqHeaderName in reqHeaders) {
	            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
	              continue defaultHeadersIteration;
	            }
	          }

	          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
	        }

	        // execute if header value is a function for merged headers
	        return executeHeaderFns(reqHeaders, shallowCopy(config));
	      }

	      function serverRequest(config) {
	        var headers = config.headers;
	        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

	        // strip content-type if data is undefined
	        if (isUndefined(reqData)) {
	          forEach(headers, function(value, header) {
	            if (lowercase(header) === 'content-type') {
	              delete headers[header];
	            }
	          });
	        }

	        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
	          config.withCredentials = defaults.withCredentials;
	        }

	        // send request
	        return sendReq(config, reqData).then(transformResponse, transformResponse);
	      }

	      function transformResponse(response) {
	        // make a copy since the response must be cacheable
	        var resp = extend({}, response);
	        resp.data = transformData(response.data, response.headers, response.status,
	                                  config.transformResponse);
	        return (isSuccess(response.status))
	          ? resp
	          : $q.reject(resp);
	      }
	    }

	    $http.pendingRequests = [];

	    /**
	     * @ngdoc method
	     * @name $http#get
	     *
	     * @description
	     * Shortcut method to perform `GET` request.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#delete
	     *
	     * @description
	     * Shortcut method to perform `DELETE` request.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#head
	     *
	     * @description
	     * Shortcut method to perform `HEAD` request.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#jsonp
	     *
	     * @description
	     * Shortcut method to perform `JSONP` request.
	     *
	     * Note that, since JSONP requests are sensitive because the response is given full access to the browser,
	     * the url must be declared, via {@link $sce} as a trusted resource URL.
	     * You can trust a URL by adding it to the whitelist via
	     * {@link $sceDelegateProvider#resourceUrlWhitelist  `$sceDelegateProvider.resourceUrlWhitelist`} or
	     * by explicitly trusting the URL via {@link $sce#trustAsResourceUrl `$sce.trustAsResourceUrl(url)`}.
	     *
	     * JSONP requests must specify a callback to be used in the response from the server. This callback
	     * is passed as a query parameter in the request. You must specify the name of this parameter by
	     * setting the `jsonpCallbackParam` property on the request config object.
	     *
	     * ```
	     * $http.jsonp('some/trusted/url', {jsonpCallbackParam: 'callback'})
	     * ```
	     *
	     * You can also specify a default callback parameter name in `$http.defaults.jsonpCallbackParam`.
	     * Initially this is set to `'callback'`.
	     *
	     * <div class="alert alert-danger">
	     * You can no longer use the `JSON_CALLBACK` string as a placeholder for specifying where the callback
	     * parameter value should go.
	     * </div>
	     *
	     * If you would like to customise where and how the callbacks are stored then try overriding
	     * or decorating the {@link $jsonpCallbacks} service.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	    createShortMethods('get', 'delete', 'head', 'jsonp');

	    /**
	     * @ngdoc method
	     * @name $http#post
	     *
	     * @description
	     * Shortcut method to perform `POST` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#put
	     *
	     * @description
	     * Shortcut method to perform `PUT` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	     /**
	      * @ngdoc method
	      * @name $http#patch
	      *
	      * @description
	      * Shortcut method to perform `PATCH` request.
	      *
	      * @param {string} url Relative or absolute URL specifying the destination of the request
	      * @param {*} data Request content
	      * @param {Object=} config Optional configuration object
	      * @returns {HttpPromise} Future object
	      */
	    createShortMethodsWithData('post', 'put', 'patch');

	        /**
	         * @ngdoc property
	         * @name $http#defaults
	         *
	         * @description
	         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
	         * default headers, withCredentials as well as request and response transformations.
	         *
	         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
	         */
	    $http.defaults = defaults;


	    return $http;


	    function createShortMethods(names) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url
	          }));
	        };
	      });
	    }


	    function createShortMethodsWithData(name) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, data, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url,
	            data: data
	          }));
	        };
	      });
	    }


	    /**
	     * Makes the request.
	     *
	     * !!! ACCESSES CLOSURE VARS:
	     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
	     */
	    function sendReq(config, reqData) {
	      var deferred = $q.defer(),
	          promise = deferred.promise,
	          cache,
	          cachedResp,
	          reqHeaders = config.headers,
	          isJsonp = lowercase(config.method) === 'jsonp',
	          url = config.url;

	      if (isJsonp) {
	        // JSONP is a pretty sensitive operation where we're allowing a script to have full access to
	        // our DOM and JS space.  So we require that the URL satisfies SCE.RESOURCE_URL.
	        url = $sce.getTrustedResourceUrl(url);
	      } else if (!isString(url)) {
	        // If it is not a string then the URL must be a $sce trusted object
	        url = $sce.valueOf(url);
	      }

	      url = buildUrl(url, config.paramSerializer(config.params));

	      if (isJsonp) {
	        // Check the url and add the JSONP callback placeholder
	        url = sanitizeJsonpCallbackParam(url, config.jsonpCallbackParam);
	      }

	      $http.pendingRequests.push(config);
	      promise.then(removePendingReq, removePendingReq);

	      if ((config.cache || defaults.cache) && config.cache !== false &&
	          (config.method === 'GET' || config.method === 'JSONP')) {
	        cache = isObject(config.cache) ? config.cache
	              : isObject(defaults.cache) ? defaults.cache
	              : defaultCache;
	      }

	      if (cache) {
	        cachedResp = cache.get(url);
	        if (isDefined(cachedResp)) {
	          if (isPromiseLike(cachedResp)) {
	            // cached request has already been sent, but there is no response yet
	            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
	          } else {
	            // serving from cache
	            if (isArray(cachedResp)) {
	              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
	            } else {
	              resolvePromise(cachedResp, 200, {}, 'OK');
	            }
	          }
	        } else {
	          // put the promise for the non-transformed response into cache as a placeholder
	          cache.put(url, promise);
	        }
	      }


	      // if we won't have the response in cache, set the xsrf headers and
	      // send the request to the backend
	      if (isUndefined(cachedResp)) {
	        var xsrfValue = urlIsSameOrigin(config.url)
	            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
	            : undefined;
	        if (xsrfValue) {
	          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
	        }

	        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
	            config.withCredentials, config.responseType,
	            createApplyHandlers(config.eventHandlers),
	            createApplyHandlers(config.uploadEventHandlers));
	      }

	      return promise;

	      function createApplyHandlers(eventHandlers) {
	        if (eventHandlers) {
	          var applyHandlers = {};
	          forEach(eventHandlers, function(eventHandler, key) {
	            applyHandlers[key] = function(event) {
	              if (useApplyAsync) {
	                $rootScope.$applyAsync(callEventHandler);
	              } else if ($rootScope.$$phase) {
	                callEventHandler();
	              } else {
	                $rootScope.$apply(callEventHandler);
	              }

	              function callEventHandler() {
	                eventHandler(event);
	              }
	            };
	          });
	          return applyHandlers;
	        }
	      }


	      /**
	       * Callback registered to $httpBackend():
	       *  - caches the response if desired
	       *  - resolves the raw $http promise
	       *  - calls $apply
	       */
	      function done(status, response, headersString, statusText) {
	        if (cache) {
	          if (isSuccess(status)) {
	            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
	          } else {
	            // remove promise from the cache
	            cache.remove(url);
	          }
	        }

	        function resolveHttpPromise() {
	          resolvePromise(response, status, headersString, statusText);
	        }

	        if (useApplyAsync) {
	          $rootScope.$applyAsync(resolveHttpPromise);
	        } else {
	          resolveHttpPromise();
	          if (!$rootScope.$$phase) $rootScope.$apply();
	        }
	      }


	      /**
	       * Resolves the raw $http promise.
	       */
	      function resolvePromise(response, status, headers, statusText) {
	        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
	        status = status >= -1 ? status : 0;

	        (isSuccess(status) ? deferred.resolve : deferred.reject)({
	          data: response,
	          status: status,
	          headers: headersGetter(headers),
	          config: config,
	          statusText: statusText
	        });
	      }

	      function resolvePromiseWithResult(result) {
	        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
	      }

	      function removePendingReq() {
	        var idx = $http.pendingRequests.indexOf(config);
	        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
	      }
	    }


	    function buildUrl(url, serializedParams) {
	      if (serializedParams.length > 0) {
	        url += ((url.indexOf('?') === -1) ? '?' : '&') + serializedParams;
	      }
	      return url;
	    }

	    function sanitizeJsonpCallbackParam(url, key) {
	      if (/[&?][^=]+=JSON_CALLBACK/.test(url)) {
	        // Throw if the url already contains a reference to JSON_CALLBACK
	        throw $httpMinErr('badjsonp', 'Illegal use of JSON_CALLBACK in url, "{0}"', url);
	      }

	      var callbackParamRegex = new RegExp('[&?]' + key + '=');
	      if (callbackParamRegex.test(url)) {
	        // Throw if the callback param was already provided
	        throw $httpMinErr('badjsonp', 'Illegal use of callback param, "{0}", in url, "{1}"', key, url);
	      }

	      // Add in the JSON_CALLBACK callback param value
	      url += ((url.indexOf('?') === -1) ? '?' : '&') + key + '=JSON_CALLBACK';

	      return url;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $xhrFactory
	 * @this
	 *
	 * @description
	 * Factory function used to create XMLHttpRequest objects.
	 *
	 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
	 *
	 * ```
	 * angular.module('myApp', [])
	 * .factory('$xhrFactory', function() {
	 *   return function createXhr(method, url) {
	 *     return new window.XMLHttpRequest({mozSystem: true});
	 *   };
	 * });
	 * ```
	 *
	 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
	 * @param {string} url URL of the request.
	 */
	function $xhrFactoryProvider() {
	  this.$get = function() {
	    return function createXhr() {
	      return new window.XMLHttpRequest();
	    };
	  };
	}

	/**
	 * @ngdoc service
	 * @name $httpBackend
	 * @requires $jsonpCallbacks
	 * @requires $document
	 * @requires $xhrFactory
	 * @this
	 *
	 * @description
	 * HTTP backend used by the {@link ng.$http service} that delegates to
	 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
	 *
	 * You should never need to use this service directly, instead use the higher-level abstractions:
	 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
	 *
	 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
	 * $httpBackend} which can be trained with responses.
	 */
	function $HttpBackendProvider() {
	  this.$get = ['$browser', '$jsonpCallbacks', '$document', '$xhrFactory', function($browser, $jsonpCallbacks, $document, $xhrFactory) {
	    return createHttpBackend($browser, $xhrFactory, $browser.defer, $jsonpCallbacks, $document[0]);
	  }];
	}

	function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
	  // TODO(vojta): fix the signature
	  return function(method, url, post, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {
	    url = url || $browser.url();

	    if (lowercase(method) === 'jsonp') {
	      var callbackPath = callbacks.createCallback(url);
	      var jsonpDone = jsonpReq(url, callbackPath, function(status, text) {
	        // jsonpReq only ever sets status to 200 (OK), 404 (ERROR) or -1 (WAITING)
	        var response = (status === 200) && callbacks.getResponse(callbackPath);
	        completeRequest(callback, status, response, '', text);
	        callbacks.removeCallback(callbackPath);
	      });
	    } else {

	      var xhr = createXhr(method, url);

	      xhr.open(method, url, true);
	      forEach(headers, function(value, key) {
	        if (isDefined(value)) {
	            xhr.setRequestHeader(key, value);
	        }
	      });

	      xhr.onload = function requestLoaded() {
	        var statusText = xhr.statusText || '';

	        // responseText is the old-school way of retrieving response (supported by IE9)
	        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	        var response = ('response' in xhr) ? xhr.response : xhr.responseText;

	        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	        var status = xhr.status === 1223 ? 204 : xhr.status;

	        // fix status code when it is 0 (0 status is undocumented).
	        // Occurs when accessing file resources or on Android 4.1 stock browser
	        // while retrieving files from application cache.
	        if (status === 0) {
	          status = response ? 200 : urlResolve(url).protocol === 'file' ? 404 : 0;
	        }

	        completeRequest(callback,
	            status,
	            response,
	            xhr.getAllResponseHeaders(),
	            statusText);
	      };

	      var requestError = function() {
	        // The response is always empty
	        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
	        completeRequest(callback, -1, null, null, '');
	      };

	      xhr.onerror = requestError;
	      xhr.onabort = requestError;
	      xhr.ontimeout = requestError;

	      forEach(eventHandlers, function(value, key) {
	          xhr.addEventListener(key, value);
	      });

	      forEach(uploadEventHandlers, function(value, key) {
	        xhr.upload.addEventListener(key, value);
	      });

	      if (withCredentials) {
	        xhr.withCredentials = true;
	      }

	      if (responseType) {
	        try {
	          xhr.responseType = responseType;
	        } catch (e) {
	          // WebKit added support for the json responseType value on 09/03/2013
	          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
	          // known to throw when setting the value "json" as the response type. Other older
	          // browsers implementing the responseType
	          //
	          // The json response type can be ignored if not supported, because JSON payloads are
	          // parsed on the client-side regardless.
	          if (responseType !== 'json') {
	            throw e;
	          }
	        }
	      }

	      xhr.send(isUndefined(post) ? null : post);
	    }

	    if (timeout > 0) {
	      var timeoutId = $browserDefer(timeoutRequest, timeout);
	    } else if (isPromiseLike(timeout)) {
	      timeout.then(timeoutRequest);
	    }


	    function timeoutRequest() {
	      if (jsonpDone) {
	        jsonpDone();
	      }
	      if (xhr) {
	        xhr.abort();
	      }
	    }

	    function completeRequest(callback, status, response, headersString, statusText) {
	      // cancel timeout and subsequent timeout promise resolution
	      if (isDefined(timeoutId)) {
	        $browserDefer.cancel(timeoutId);
	      }
	      jsonpDone = xhr = null;

	      callback(status, response, headersString, statusText);
	    }
	  };

	  function jsonpReq(url, callbackPath, done) {
	    url = url.replace('JSON_CALLBACK', callbackPath);
	    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
	    // - fetches local scripts via XHR and evals them
	    // - adds and immediately removes script elements from the document
	    var script = rawDocument.createElement('script'), callback = null;
	    script.type = 'text/javascript';
	    script.src = url;
	    script.async = true;

	    callback = function(event) {
	      script.removeEventListener('load', callback);
	      script.removeEventListener('error', callback);
	      rawDocument.body.removeChild(script);
	      script = null;
	      var status = -1;
	      var text = 'unknown';

	      if (event) {
	        if (event.type === 'load' && !callbacks.wasCalled(callbackPath)) {
	          event = { type: 'error' };
	        }
	        text = event.type;
	        status = event.type === 'error' ? 404 : 200;
	      }

	      if (done) {
	        done(status, text);
	      }
	    };

	    script.addEventListener('load', callback);
	    script.addEventListener('error', callback);
	    rawDocument.body.appendChild(script);
	    return callback;
	  }
	}

	var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
	$interpolateMinErr.throwNoconcat = function(text) {
	  throw $interpolateMinErr('noconcat',
	      'Error while interpolating: {0}\nStrict Contextual Escaping disallows ' +
	      'interpolations that concatenate multiple expressions when a trusted value is ' +
	      'required.  See http://docs.angularjs.org/api/ng.$sce', text);
	};

	$interpolateMinErr.interr = function(text, err) {
	  return $interpolateMinErr('interr', 'Can\'t interpolate: {0}\n{1}', text, err.toString());
	};

	/**
	 * @ngdoc provider
	 * @name $interpolateProvider
	 * @this
	 *
	 * @description
	 *
	 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
	 *
	 * <div class="alert alert-danger">
	 * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
	 * template within a Python Jinja template (or any other template language). Mixing templating
	 * languages is **very dangerous**. The embedding template language will not safely escape Angular
	 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
	 * security bugs!
	 * </div>
	 *
	 * @example
	<example name="custom-interpolation-markup" module="customInterpolationApp">
	<file name="index.html">
	<script>
	  var customInterpolationApp = angular.module('customInterpolationApp', []);

	  customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });


	  customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
	</script>
	<div ng-controller="DemoController as demo">
	    //demo.label//
	</div>
	</file>
	<file name="protractor.js" type="protractor">
	  it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
	</file>
	</example>
	 */
	function $InterpolateProvider() {
	  var startSymbol = '{{';
	  var endSymbol = '}}';

	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#startSymbol
	   * @description
	   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
	   * @param {string=} value new value to set the starting symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.startSymbol = function(value) {
	    if (value) {
	      startSymbol = value;
	      return this;
	    } else {
	      return startSymbol;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#endSymbol
	   * @description
	   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	   *
	   * @param {string=} value new value to set the ending symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.endSymbol = function(value) {
	    if (value) {
	      endSymbol = value;
	      return this;
	    } else {
	      return endSymbol;
	    }
	  };


	  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
	    var startSymbolLength = startSymbol.length,
	        endSymbolLength = endSymbol.length,
	        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
	        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

	    function escape(ch) {
	      return '\\\\\\' + ch;
	    }

	    function unescapeText(text) {
	      return text.replace(escapedStartRegexp, startSymbol).
	        replace(escapedEndRegexp, endSymbol);
	    }

	    // TODO: this is the same as the constantWatchDelegate in parse.js
	    function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
	      var unwatch = scope.$watch(function constantInterpolateWatch(scope) {
	        unwatch();
	        return constantInterp(scope);
	      }, listener, objectEquality);
	      return unwatch;
	    }

	    /**
	     * @ngdoc service
	     * @name $interpolate
	     * @kind function
	     *
	     * @requires $parse
	     * @requires $sce
	     *
	     * @description
	     *
	     * Compiles a string with markup into an interpolation function. This service is used by the
	     * HTML {@link ng.$compile $compile} service for data binding. See
	     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
	     * interpolation markup.
	     *
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var exp = $interpolate('Hello {{name | uppercase}}!');
	     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
	     * ```
	     *
	     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
	     * `true`, the interpolation function will return `undefined` unless all embedded expressions
	     * evaluate to a value other than `undefined`.
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var context = {greeting: 'Hello', name: undefined };
	     *
	     *   // default "forgiving" mode
	     *   var exp = $interpolate('{{greeting}} {{name}}!');
	     *   expect(exp(context)).toEqual('Hello !');
	     *
	     *   // "allOrNothing" mode
	     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
	     *   expect(exp(context)).toBeUndefined();
	     *   context.name = 'Angular';
	     *   expect(exp(context)).toEqual('Hello Angular!');
	     * ```
	     *
	     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
	     *
	     * #### Escaped Interpolation
	     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
	     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
	     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
	     * or binding.
	     *
	     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
	     * degree, while also enabling code examples to work without relying on the
	     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
	     *
	     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
	     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
	     * interpolation start/end markers with their escaped counterparts.**
	     *
	     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
	     * output when the $interpolate service processes the text. So, for HTML elements interpolated
	     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
	     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
	     * this is typically useful only when user-data is used in rendering a template from the server, or
	     * when otherwise untrusted data is used by a directive.
	     *
	     * <example name="interpolation">
	     *  <file name="index.html">
	     *    <div ng-init="username='A user'">
	     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
	     *        </p>
	     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
	     *        application, but fails to accomplish their task, because the server has correctly
	     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
	     *        characters.</p>
	     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
	     *        from the database by an administrator.</p>
	     *    </div>
	     *  </file>
	     * </example>
	     *
	     * @knownIssue
	     * It is currently not possible for an interpolated expression to contain the interpolation end
	     * symbol. For example, `{{ '}}' }}` will be incorrectly interpreted as `{{ ' }}` + `' }}`, i.e.
	     * an interpolated expression consisting of a single-quote (`'`) and the `' }}` string.
	     *
	     * @knownIssue
	     * All directives and components must use the standard `{{` `}}` interpolation symbols
	     * in their templates. If you change the application interpolation symbols the {@link $compile}
	     * service will attempt to denormalize the standard symbols to the custom symbols.
	     * The denormalization process is not clever enough to know not to replace instances of the standard
	     * symbols where they would not normally be treated as interpolation symbols. For example in the following
	     * code snippet the closing braces of the literal object will get incorrectly denormalized:
	     *
	     * ```
	     * <div data-context='{"context":{"id":3,"type":"page"}}">
	     * ```
	     *
	     * The workaround is to ensure that such instances are separated by whitespace:
	     * ```
	     * <div data-context='{"context":{"id":3,"type":"page"} }">
	     * ```
	     *
	     * See https://github.com/angular/angular.js/pull/14610#issuecomment-219401099 for more information.
	     *
	     * @param {string} text The text with markup to interpolate.
	     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
	     *    embedded expression in order to return an interpolation function. Strings with no
	     *    embedded expression will return null for the interpolation function.
	     * @param {string=} trustedContext when provided, the returned function passes the interpolated
	     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
	     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
	     *    provides Strict Contextual Escaping for details.
	     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
	     *    unless all embedded expressions evaluate to a value other than `undefined`.
	     * @returns {function(context)} an interpolation function which is used to compute the
	     *    interpolated string. The function has these parameters:
	     *
	     * - `context`: evaluation context for all expressions embedded in the interpolated text
	     */
	    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
	      // Provide a quick exit and simplified result function for text with no interpolation
	      if (!text.length || text.indexOf(startSymbol) === -1) {
	        var constantInterp;
	        if (!mustHaveExpression) {
	          var unescapedText = unescapeText(text);
	          constantInterp = valueFn(unescapedText);
	          constantInterp.exp = text;
	          constantInterp.expressions = [];
	          constantInterp.$$watchDelegate = constantWatchDelegate;
	        }
	        return constantInterp;
	      }

	      allOrNothing = !!allOrNothing;
	      var startIndex,
	          endIndex,
	          index = 0,
	          expressions = [],
	          parseFns = [],
	          textLength = text.length,
	          exp,
	          concat = [],
	          expressionPositions = [];

	      while (index < textLength) {
	        if (((startIndex = text.indexOf(startSymbol, index)) !== -1) &&
	             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) !== -1)) {
	          if (index !== startIndex) {
	            concat.push(unescapeText(text.substring(index, startIndex)));
	          }
	          exp = text.substring(startIndex + startSymbolLength, endIndex);
	          expressions.push(exp);
	          parseFns.push($parse(exp, parseStringifyInterceptor));
	          index = endIndex + endSymbolLength;
	          expressionPositions.push(concat.length);
	          concat.push('');
	        } else {
	          // we did not find an interpolation, so we have to add the remainder to the separators array
	          if (index !== textLength) {
	            concat.push(unescapeText(text.substring(index)));
	          }
	          break;
	        }
	      }

	      // Concatenating expressions makes it hard to reason about whether some combination of
	      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
	      // single expression be used for iframe[src], object[src], etc., we ensure that the value
	      // that's used is assigned or constructed by some JS code somewhere that is more testable or
	      // make it obvious that you bound the value to some user controlled value.  This helps reduce
	      // the load when auditing for XSS issues.
	      if (trustedContext && concat.length > 1) {
	          $interpolateMinErr.throwNoconcat(text);
	      }

	      if (!mustHaveExpression || expressions.length) {
	        var compute = function(values) {
	          for (var i = 0, ii = expressions.length; i < ii; i++) {
	            if (allOrNothing && isUndefined(values[i])) return;
	            concat[expressionPositions[i]] = values[i];
	          }
	          return concat.join('');
	        };

	        var getValue = function(value) {
	          return trustedContext ?
	            $sce.getTrusted(trustedContext, value) :
	            $sce.valueOf(value);
	        };

	        return extend(function interpolationFn(context) {
	            var i = 0;
	            var ii = expressions.length;
	            var values = new Array(ii);

	            try {
	              for (; i < ii; i++) {
	                values[i] = parseFns[i](context);
	              }

	              return compute(values);
	            } catch (err) {
	              $exceptionHandler($interpolateMinErr.interr(text, err));
	            }

	          }, {
	          // all of these properties are undocumented for now
	          exp: text, //just for compatibility with regular watchers created via $watch
	          expressions: expressions,
	          $$watchDelegate: function(scope, listener) {
	            var lastValue;
	            return scope.$watchGroup(parseFns, /** @this */ function interpolateFnWatcher(values, oldValues) {
	              var currValue = compute(values);
	              if (isFunction(listener)) {
	                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
	              }
	              lastValue = currValue;
	            });
	          }
	        });
	      }

	      function parseStringifyInterceptor(value) {
	        try {
	          value = getValue(value);
	          return allOrNothing && !isDefined(value) ? value : stringify(value);
	        } catch (err) {
	          $exceptionHandler($interpolateMinErr.interr(text, err));
	        }
	      }
	    }


	    /**
	     * @ngdoc method
	     * @name $interpolate#startSymbol
	     * @description
	     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} start symbol.
	     */
	    $interpolate.startSymbol = function() {
	      return startSymbol;
	    };


	    /**
	     * @ngdoc method
	     * @name $interpolate#endSymbol
	     * @description
	     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	     *
	     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} end symbol.
	     */
	    $interpolate.endSymbol = function() {
	      return endSymbol;
	    };

	    return $interpolate;
	  }];
	}

	/** @this */
	function $IntervalProvider() {
	  this.$get = ['$rootScope', '$window', '$q', '$$q', '$browser',
	       function($rootScope,   $window,   $q,   $$q,   $browser) {
	    var intervals = {};


	     /**
	      * @ngdoc service
	      * @name $interval
	      *
	      * @description
	      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
	      * milliseconds.
	      *
	      * The return value of registering an interval function is a promise. This promise will be
	      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
	      * run indefinitely if `count` is not defined. The value of the notification will be the
	      * number of iterations that have run.
	      * To cancel an interval, call `$interval.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
	      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
	      * time.
	      *
	      * <div class="alert alert-warning">
	      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
	      * with them.  In particular they are not automatically destroyed when a controller's scope or a
	      * directive's element are destroyed.
	      * You should take this into consideration and make sure to always cancel the interval at the
	      * appropriate moment.  See the example below for more details on how and when to do this.
	      * </div>
	      *
	      * @param {function()} fn A function that should be called repeatedly.
	      * @param {number} delay Number of milliseconds between each function call.
	      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
	      *   indefinitely.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {promise} A promise which will be notified on each iteration.
	      *
	      * @example
	      * <example module="intervalExample" name="interval-service">
	      * <file name="index.html">
	      *   <script>
	      *     angular.module('intervalExample', [])
	      *       .controller('ExampleController', ['$scope', '$interval',
	      *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
	      *       // Register the 'myCurrentTime' directive factory method.
	      *       // We inject $interval and dateFilter service since the factory method is DI.
	      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
	      *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
	      *   </script>
	      *
	      *   <div>
	      *     <div ng-controller="ExampleController">
	      *       <label>Date format: <input ng-model="format"></label> <hr/>
	      *       Current time is: <span my-current-time="format"></span>
	      *       <hr/>
	      *       Blood 1 : <font color='red'>{{blood_1}}</font>
	      *       Blood 2 : <font color='red'>{{blood_2}}</font>
	      *       <button type="button" data-ng-click="fight()">Fight</button>
	      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
	      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
	      *     </div>
	      *   </div>
	      *
	      * </file>
	      * </example>
	      */
	    function interval(fn, delay, count, invokeApply) {
	      var hasParams = arguments.length > 4,
	          args = hasParams ? sliceArgs(arguments, 4) : [],
	          setInterval = $window.setInterval,
	          clearInterval = $window.clearInterval,
	          iteration = 0,
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise;

	      count = isDefined(count) ? count : 0;

	      promise.$$intervalId = setInterval(function tick() {
	        if (skipApply) {
	          $browser.defer(callback);
	        } else {
	          $rootScope.$evalAsync(callback);
	        }
	        deferred.notify(iteration++);

	        if (count > 0 && iteration >= count) {
	          deferred.resolve(iteration);
	          clearInterval(promise.$$intervalId);
	          delete intervals[promise.$$intervalId];
	        }

	        if (!skipApply) $rootScope.$apply();

	      }, delay);

	      intervals[promise.$$intervalId] = deferred;

	      return promise;

	      function callback() {
	        if (!hasParams) {
	          fn(iteration);
	        } else {
	          fn.apply(null, args);
	        }
	      }
	    }


	     /**
	      * @ngdoc method
	      * @name $interval#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`.
	      *
	      * @param {Promise=} promise returned by the `$interval` function.
	      * @returns {boolean} Returns `true` if the task was successfully canceled.
	      */
	    interval.cancel = function(promise) {
	      if (promise && promise.$$intervalId in intervals) {
	        // Interval cancels should not report as unhandled promise.
	        intervals[promise.$$intervalId].promise.catch(noop);
	        intervals[promise.$$intervalId].reject('canceled');
	        $window.clearInterval(promise.$$intervalId);
	        delete intervals[promise.$$intervalId];
	        return true;
	      }
	      return false;
	    };

	    return interval;
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $jsonpCallbacks
	 * @requires $window
	 * @description
	 * This service handles the lifecycle of callbacks to handle JSONP requests.
	 * Override this service if you wish to customise where the callbacks are stored and
	 * how they vary compared to the requested url.
	 */
	var $jsonpCallbacksProvider = /** @this */ function() {
	  this.$get = ['$window', function($window) {
	    var callbacks = $window.angular.callbacks;
	    var callbackMap = {};

	    function createCallback(callbackId) {
	      var callback = function(data) {
	        callback.data = data;
	        callback.called = true;
	      };
	      callback.id = callbackId;
	      return callback;
	    }

	    return {
	      /**
	       * @ngdoc method
	       * @name $jsonpCallbacks#createCallback
	       * @param {string} url the url of the JSONP request
	       * @returns {string} the callback path to send to the server as part of the JSONP request
	       * @description
	       * {@link $httpBackend} calls this method to create a callback and get hold of the path to the callback
	       * to pass to the server, which will be used to call the callback with its payload in the JSONP response.
	       */
	      createCallback: function(url) {
	        var callbackId = '_' + (callbacks.$$counter++).toString(36);
	        var callbackPath = 'angular.callbacks.' + callbackId;
	        var callback = createCallback(callbackId);
	        callbackMap[callbackPath] = callbacks[callbackId] = callback;
	        return callbackPath;
	      },
	      /**
	       * @ngdoc method
	       * @name $jsonpCallbacks#wasCalled
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @returns {boolean} whether the callback has been called, as a result of the JSONP response
	       * @description
	       * {@link $httpBackend} calls this method to find out whether the JSONP response actually called the
	       * callback that was passed in the request.
	       */
	      wasCalled: function(callbackPath) {
	        return callbackMap[callbackPath].called;
	      },
	      /**
	       * @ngdoc method
	       * @name $jsonpCallbacks#getResponse
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @returns {*} the data received from the response via the registered callback
	       * @description
	       * {@link $httpBackend} calls this method to get hold of the data that was provided to the callback
	       * in the JSONP response.
	       */
	      getResponse: function(callbackPath) {
	        return callbackMap[callbackPath].data;
	      },
	      /**
	       * @ngdoc method
	       * @name $jsonpCallbacks#removeCallback
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @description
	       * {@link $httpBackend} calls this method to remove the callback after the JSONP request has
	       * completed or timed-out.
	       */
	      removeCallback: function(callbackPath) {
	        var callback = callbackMap[callbackPath];
	        delete callbacks[callback.id];
	        delete callbackMap[callbackPath];
	      }
	    };
	  }];
	};

	/**
	 * @ngdoc service
	 * @name $locale
	 *
	 * @description
	 * $locale service provides localization rules for various Angular components. As of right now the
	 * only public api is:
	 *
	 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
	 */

	var PATH_MATCH = /^([^?#]*)(\?([^#]*))?(#(.*))?$/,
	    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
	var $locationMinErr = minErr('$location');


	/**
	 * Encode path using encodeUriSegment, ignoring forward slashes
	 *
	 * @param {string} path Path to encode
	 * @returns {string}
	 */
	function encodePath(path) {
	  var segments = path.split('/'),
	      i = segments.length;

	  while (i--) {
	    segments[i] = encodeUriSegment(segments[i]);
	  }

	  return segments.join('/');
	}

	function parseAbsoluteUrl(absoluteUrl, locationObj) {
	  var parsedUrl = urlResolve(absoluteUrl);

	  locationObj.$$protocol = parsedUrl.protocol;
	  locationObj.$$host = parsedUrl.hostname;
	  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
	}

	var DOUBLE_SLASH_REGEX = /^\s*[\\/]{2,}/;
	function parseAppUrl(url, locationObj) {

	  if (DOUBLE_SLASH_REGEX.test(url)) {
	    throw $locationMinErr('badpath', 'Invalid url "{0}".', url);
	  }

	  var prefixed = (url.charAt(0) !== '/');
	  if (prefixed) {
	    url = '/' + url;
	  }
	  var match = urlResolve(url);
	  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
	      match.pathname.substring(1) : match.pathname);
	  locationObj.$$search = parseKeyValue(match.search);
	  locationObj.$$hash = decodeURIComponent(match.hash);

	  // make sure path starts with '/';
	  if (locationObj.$$path && locationObj.$$path.charAt(0) !== '/') {
	    locationObj.$$path = '/' + locationObj.$$path;
	  }
	}

	function startsWith(str, search) {
	  return str.slice(0, search.length) === search;
	}

	/**
	 *
	 * @param {string} base
	 * @param {string} url
	 * @returns {string} returns text from `url` after `base` or `undefined` if it does not begin with
	 *                   the expected string.
	 */
	function stripBaseUrl(base, url) {
	  if (startsWith(url, base)) {
	    return url.substr(base.length);
	  }
	}


	function stripHash(url) {
	  var index = url.indexOf('#');
	  return index === -1 ? url : url.substr(0, index);
	}

	function trimEmptyHash(url) {
	  return url.replace(/(#.+)|#$/, '$1');
	}


	function stripFile(url) {
	  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
	}

	/* return the server only (scheme://host:port) */
	function serverBase(url) {
	  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
	}


	/**
	 * LocationHtml5Url represents a URL
	 * This object is exposed as $location service when HTML5 mode is enabled and supported
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} basePrefix URL path prefix
	 */
	function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
	  this.$$html5 = true;
	  basePrefix = basePrefix || '';
	  parseAbsoluteUrl(appBase, this);


	  /**
	   * Parse given HTML5 (regular) URL string into properties
	   * @param {string} url HTML5 URL
	   * @private
	   */
	  this.$$parse = function(url) {
	    var pathUrl = stripBaseUrl(appBaseNoFile, url);
	    if (!isString(pathUrl)) {
	      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
	          appBaseNoFile);
	    }

	    parseAppUrl(pathUrl, this);

	    if (!this.$$path) {
	      this.$$path = '/';
	    }

	    this.$$compose();
	  };

	  /**
	   * Compose url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
	  };

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }
	    var appUrl, prevAppUrl;
	    var rewrittenUrl;


	    if (isDefined(appUrl = stripBaseUrl(appBase, url))) {
	      prevAppUrl = appUrl;
	      if (basePrefix && isDefined(appUrl = stripBaseUrl(basePrefix, appUrl))) {
	        rewrittenUrl = appBaseNoFile + (stripBaseUrl('/', appUrl) || appUrl);
	      } else {
	        rewrittenUrl = appBase + prevAppUrl;
	      }
	    } else if (isDefined(appUrl = stripBaseUrl(appBaseNoFile, url))) {
	      rewrittenUrl = appBaseNoFile + appUrl;
	    } else if (appBaseNoFile === url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };
	}


	/**
	 * LocationHashbangUrl represents URL
	 * This object is exposed as $location service when developer doesn't opt into html5 mode.
	 * It also serves as the base class for html5 mode fallback on legacy browsers.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {

	  parseAbsoluteUrl(appBase, this);


	  /**
	   * Parse given hashbang URL into properties
	   * @param {string} url Hashbang URL
	   * @private
	   */
	  this.$$parse = function(url) {
	    var withoutBaseUrl = stripBaseUrl(appBase, url) || stripBaseUrl(appBaseNoFile, url);
	    var withoutHashUrl;

	    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {

	      // The rest of the URL starts with a hash so we have
	      // got either a hashbang path or a plain hash fragment
	      withoutHashUrl = stripBaseUrl(hashPrefix, withoutBaseUrl);
	      if (isUndefined(withoutHashUrl)) {
	        // There was no hashbang prefix so we just have a hash fragment
	        withoutHashUrl = withoutBaseUrl;
	      }

	    } else {
	      // There was no hashbang path nor hash fragment:
	      // If we are in HTML5 mode we use what is left as the path;
	      // Otherwise we ignore what is left
	      if (this.$$html5) {
	        withoutHashUrl = withoutBaseUrl;
	      } else {
	        withoutHashUrl = '';
	        if (isUndefined(withoutBaseUrl)) {
	          appBase = url;
	          this.replace();
	        }
	      }
	    }

	    parseAppUrl(withoutHashUrl, this);

	    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

	    this.$$compose();

	    /*
	     * In Windows, on an anchor node on documents loaded from
	     * the filesystem, the browser will return a pathname
	     * prefixed with the drive name ('/C:/path') when a
	     * pathname without a drive is set:
	     *  * a.setAttribute('href', '/foo')
	     *   * a.pathname === '/C:/foo' //true
	     *
	     * Inside of Angular, we're always using pathnames that
	     * do not include drive names for routing.
	     */
	    function removeWindowsDriveName(path, url, base) {
	      /*
	      Matches paths for file protocol on windows,
	      such as /C:/foo/bar, and captures only /foo/bar.
	      */
	      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

	      var firstPathSegmentMatch;

	      //Get the relative path from the input URL.
	      if (startsWith(url, base)) {
	        url = url.replace(base, '');
	      }

	      // The input URL intentionally contains a first path segment that ends with a colon.
	      if (windowsFilePathExp.exec(url)) {
	        return path;
	      }

	      firstPathSegmentMatch = windowsFilePathExp.exec(path);
	      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
	    }
	  };

	  /**
	   * Compose hashbang URL and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
	  };

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (stripHash(appBase) === stripHash(url)) {
	      this.$$parse(url);
	      return true;
	    }
	    return false;
	  };
	}


	/**
	 * LocationHashbangUrl represents URL
	 * This object is exposed as $location service when html5 history api is enabled but the browser
	 * does not support it.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
	  this.$$html5 = true;
	  LocationHashbangUrl.apply(this, arguments);

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }

	    var rewrittenUrl;
	    var appUrl;

	    if (appBase === stripHash(url)) {
	      rewrittenUrl = url;
	    } else if ((appUrl = stripBaseUrl(appBaseNoFile, url))) {
	      rewrittenUrl = appBase + hashPrefix + appUrl;
	    } else if (appBaseNoFile === url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };

	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
	    this.$$absUrl = appBase + hashPrefix + this.$$url;
	  };

	}


	var locationPrototype = {

	  /**
	   * Ensure absolute URL is initialized.
	   * @private
	   */
	  $$absUrl:'',

	  /**
	   * Are we in html5 mode?
	   * @private
	   */
	  $$html5: false,

	  /**
	   * Has any change been replacing?
	   * @private
	   */
	  $$replace: false,

	  /**
	   * @ngdoc method
	   * @name $location#absUrl
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return full URL representation with all segments encoded according to rules specified in
	   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var absUrl = $location.absUrl();
	   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @return {string} full URL
	   */
	  absUrl: locationGetter('$$absUrl'),

	  /**
	   * @ngdoc method
	   * @name $location#url
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return URL (e.g. `/path?a=b#hash`) when called without any parameter.
	   *
	   * Change path, search and hash, when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var url = $location.url();
	   * // => "/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @param {string=} url New URL without base prefix (e.g. `/path?a=b#hash`)
	   * @return {string} url
	   */
	  url: function(url) {
	    if (isUndefined(url)) {
	      return this.$$url;
	    }

	    var match = PATH_MATCH.exec(url);
	    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
	    if (match[2] || match[1] || url === '') this.search(match[3] || '');
	    this.hash(match[5] || '');

	    return this;
	  },

	  /**
	   * @ngdoc method
	   * @name $location#protocol
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return protocol of current URL.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var protocol = $location.protocol();
	   * // => "http"
	   * ```
	   *
	   * @return {string} protocol of current URL
	   */
	  protocol: locationGetter('$$protocol'),

	  /**
	   * @ngdoc method
	   * @name $location#host
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return host of current URL.
	   *
	   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var host = $location.host();
	   * // => "example.com"
	   *
	   * // given URL http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
	   * host = $location.host();
	   * // => "example.com"
	   * host = location.host;
	   * // => "example.com:8080"
	   * ```
	   *
	   * @return {string} host of current URL.
	   */
	  host: locationGetter('$$host'),

	  /**
	   * @ngdoc method
	   * @name $location#port
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return port of current URL.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var port = $location.port();
	   * // => 80
	   * ```
	   *
	   * @return {Number} port
	   */
	  port: locationGetter('$$port'),

	  /**
	   * @ngdoc method
	   * @name $location#path
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return path of current URL when called without any parameter.
	   *
	   * Change path when called with parameter and return `$location`.
	   *
	   * Note: Path should always begin with forward slash (/), this method will add the forward slash
	   * if it is missing.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var path = $location.path();
	   * // => "/some/path"
	   * ```
	   *
	   * @param {(string|number)=} path New path
	   * @return {(string|object)} path if called with no parameters, or `$location` if called with a parameter
	   */
	  path: locationGetterSetter('$$path', function(path) {
	    path = path !== null ? path.toString() : '';
	    return path.charAt(0) === '/' ? path : '/' + path;
	  }),

	  /**
	   * @ngdoc method
	   * @name $location#search
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return search part (as object) of current URL when called without any parameter.
	   *
	   * Change search part when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var searchObject = $location.search();
	   * // => {foo: 'bar', baz: 'xoxo'}
	   *
	   * // set foo to 'yipee'
	   * $location.search('foo', 'yipee');
	   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
	   * ```
	   *
	   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
	   * hash object.
	   *
	   * When called with a single argument the method acts as a setter, setting the `search` component
	   * of `$location` to the specified value.
	   *
	   * If the argument is a hash object containing an array of values, these values will be encoded
	   * as duplicate search parameters in the URL.
	   *
	   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
	   * will override only a single search property.
	   *
	   * If `paramValue` is an array, it will override the property of the `search` component of
	   * `$location` specified via the first argument.
	   *
	   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
	   *
	   * If `paramValue` is `true`, the property specified via the first argument will be added with no
	   * value nor trailing equal sign.
	   *
	   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
	   * one or more arguments returns `$location` object itself.
	   */
	  search: function(search, paramValue) {
	    switch (arguments.length) {
	      case 0:
	        return this.$$search;
	      case 1:
	        if (isString(search) || isNumber(search)) {
	          search = search.toString();
	          this.$$search = parseKeyValue(search);
	        } else if (isObject(search)) {
	          search = copy(search, {});
	          // remove object undefined or null properties
	          forEach(search, function(value, key) {
	            if (value == null) delete search[key];
	          });

	          this.$$search = search;
	        } else {
	          throw $locationMinErr('isrcharg',
	              'The first argument of the `$location#search()` call must be a string or an object.');
	        }
	        break;
	      default:
	        if (isUndefined(paramValue) || paramValue === null) {
	          delete this.$$search[search];
	        } else {
	          this.$$search[search] = paramValue;
	        }
	    }

	    this.$$compose();
	    return this;
	  },

	  /**
	   * @ngdoc method
	   * @name $location#hash
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Returns the hash fragment when called without any parameters.
	   *
	   * Changes the hash fragment when called with a parameter and returns `$location`.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
	   * var hash = $location.hash();
	   * // => "hashValue"
	   * ```
	   *
	   * @param {(string|number)=} hash New hash fragment
	   * @return {string} hash
	   */
	  hash: locationGetterSetter('$$hash', function(hash) {
	    return hash !== null ? hash.toString() : '';
	  }),

	  /**
	   * @ngdoc method
	   * @name $location#replace
	   *
	   * @description
	   * If called, all changes to $location during the current `$digest` will replace the current history
	   * record, instead of adding a new one.
	   */
	  replace: function() {
	    this.$$replace = true;
	    return this;
	  }
	};

	forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
	  Location.prototype = Object.create(locationPrototype);

	  /**
	   * @ngdoc method
	   * @name $location#state
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return the history state object when called without any parameter.
	   *
	   * Change the history state object when called with one parameter and return `$location`.
	   * The state object is later passed to `pushState` or `replaceState`.
	   *
	   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
	   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
	   * older browsers (like IE9 or Android < 4.0), don't use this method.
	   *
	   * @param {object=} state State object for pushState or replaceState
	   * @return {object} state
	   */
	  Location.prototype.state = function(state) {
	    if (!arguments.length) {
	      return this.$$state;
	    }

	    if (Location !== LocationHtml5Url || !this.$$html5) {
	      throw $locationMinErr('nostate', 'History API state support is available only ' +
	        'in HTML5 mode and only in browsers supporting HTML5 History API');
	    }
	    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
	    // but we're changing the $$state reference to $browser.state() during the $digest
	    // so the modification window is narrow.
	    this.$$state = isUndefined(state) ? null : state;

	    return this;
	  };
	});


	function locationGetter(property) {
	  return /** @this */ function() {
	    return this[property];
	  };
	}


	function locationGetterSetter(property, preprocess) {
	  return /** @this */ function(value) {
	    if (isUndefined(value)) {
	      return this[property];
	    }

	    this[property] = preprocess(value);
	    this.$$compose();

	    return this;
	  };
	}


	/**
	 * @ngdoc service
	 * @name $location
	 *
	 * @requires $rootElement
	 *
	 * @description
	 * The $location service parses the URL in the browser address bar (based on the
	 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
	 * available to your application. Changes to the URL in the address bar are reflected into
	 * $location service and changes to $location are reflected into the browser address bar.
	 *
	 * **The $location service:**
	 *
	 * - Exposes the current URL in the browser address bar, so you can
	 *   - Watch and observe the URL.
	 *   - Change the URL.
	 * - Synchronizes the URL with the browser when the user
	 *   - Changes the address bar.
	 *   - Clicks the back or forward button (or clicks a History link).
	 *   - Clicks on a link.
	 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
	 *
	 * For more information see {@link guide/$location Developer Guide: Using $location}
	 */

	/**
	 * @ngdoc provider
	 * @name $locationProvider
	 * @this
	 *
	 * @description
	 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
	 */
	function $LocationProvider() {
	  var hashPrefix = '!',
	      html5Mode = {
	        enabled: false,
	        requireBase: true,
	        rewriteLinks: true
	      };

	  /**
	   * @ngdoc method
	   * @name $locationProvider#hashPrefix
	   * @description
	   * The default value for the prefix is `'!'`.
	   * @param {string=} prefix Prefix for hash part (containing path and search)
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.hashPrefix = function(prefix) {
	    if (isDefined(prefix)) {
	      hashPrefix = prefix;
	      return this;
	    } else {
	      return hashPrefix;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $locationProvider#html5Mode
	   * @description
	   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
	   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
	   *   properties:
	   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
	   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
	   *     support `pushState`.
	   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
	   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
	   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
	   *     See the {@link guide/$location $location guide for more information}
	   *   - **rewriteLinks** - `{boolean|string}` - (default: `true`) When html5Mode is enabled,
	   *     enables/disables URL rewriting for relative links. If set to a string, URL rewriting will
	   *     only happen on links with an attribute that matches the given string. For example, if set
	   *     to `'internal-link'`, then the URL will only be rewritten for `<a internal-link>` links.
	   *     Note that [attribute name normalization](guide/directive#normalization) does not apply
	   *     here, so `'internalLink'` will **not** match `'internal-link'`.
	   *
	   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
	   */
	  this.html5Mode = function(mode) {
	    if (isBoolean(mode)) {
	      html5Mode.enabled = mode;
	      return this;
	    } else if (isObject(mode)) {

	      if (isBoolean(mode.enabled)) {
	        html5Mode.enabled = mode.enabled;
	      }

	      if (isBoolean(mode.requireBase)) {
	        html5Mode.requireBase = mode.requireBase;
	      }

	      if (isBoolean(mode.rewriteLinks) || isString(mode.rewriteLinks)) {
	        html5Mode.rewriteLinks = mode.rewriteLinks;
	      }

	      return this;
	    } else {
	      return html5Mode;
	    }
	  };

	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeStart
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted before a URL will change.
	   *
	   * This change can be prevented by calling
	   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
	   * details about event object. Upon successful change
	   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */

	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeSuccess
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted after a URL was changed.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */

	  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
	      function($rootScope, $browser, $sniffer, $rootElement, $window) {
	    var $location,
	        LocationMode,
	        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
	        initialUrl = $browser.url(),
	        appBase;

	    if (html5Mode.enabled) {
	      if (!baseHref && html5Mode.requireBase) {
	        throw $locationMinErr('nobase',
	          '$location in HTML5 mode requires a <base> tag to be present!');
	      }
	      appBase = serverBase(initialUrl) + (baseHref || '/');
	      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
	    } else {
	      appBase = stripHash(initialUrl);
	      LocationMode = LocationHashbangUrl;
	    }
	    var appBaseNoFile = stripFile(appBase);

	    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);
	    $location.$$parseLinkUrl(initialUrl, initialUrl);

	    $location.$$state = $browser.state();

	    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

	    function setBrowserUrlWithFallback(url, replace, state) {
	      var oldUrl = $location.url();
	      var oldState = $location.$$state;
	      try {
	        $browser.url(url, replace, state);

	        // Make sure $location.state() returns referentially identical (not just deeply equal)
	        // state object; this makes possible quick checking if the state changed in the digest
	        // loop. Checking deep equality would be too expensive.
	        $location.$$state = $browser.state();
	      } catch (e) {
	        // Restore old values if pushState fails
	        $location.url(oldUrl);
	        $location.$$state = oldState;

	        throw e;
	      }
	    }

	    $rootElement.on('click', function(event) {
	      var rewriteLinks = html5Mode.rewriteLinks;
	      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
	      // currently we open nice url link and redirect then

	      if (!rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which === 2 || event.button === 2) return;

	      var elm = jqLite(event.target);

	      // traverse the DOM up to find first A tag
	      while (nodeName_(elm[0]) !== 'a') {
	        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
	        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
	      }

	      if (isString(rewriteLinks) && isUndefined(elm.attr(rewriteLinks))) return;

	      var absHref = elm.prop('href');
	      // get the actual href attribute - see
	      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
	      var relHref = elm.attr('href') || elm.attr('xlink:href');

	      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
	        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
	        // an animation.
	        absHref = urlResolve(absHref.animVal).href;
	      }

	      // Ignore when url is started with javascript: or mailto:
	      if (IGNORE_URI_REGEXP.test(absHref)) return;

	      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
	        if ($location.$$parseLinkUrl(absHref, relHref)) {
	          // We do a preventDefault for all urls that are part of the angular application,
	          // in html5mode and also without, so that we are able to abort navigation without
	          // getting double entries in the location history.
	          event.preventDefault();
	          // update location manually
	          if ($location.absUrl() !== $browser.url()) {
	            $rootScope.$apply();
	            // hack to work around FF6 bug 684208 when scenario runner clicks on links
	            $window.angular['ff-684208-preventDefault'] = true;
	          }
	        }
	      }
	    });


	    // rewrite hashbang url <> html5 url
	    if (trimEmptyHash($location.absUrl()) !== trimEmptyHash(initialUrl)) {
	      $browser.url($location.absUrl(), true);
	    }

	    var initializing = true;

	    // update $location when $browser url changes
	    $browser.onUrlChange(function(newUrl, newState) {

	      if (!startsWith(newUrl, appBaseNoFile)) {
	        // If we are navigating outside of the app then force a reload
	        $window.location.href = newUrl;
	        return;
	      }

	      $rootScope.$evalAsync(function() {
	        var oldUrl = $location.absUrl();
	        var oldState = $location.$$state;
	        var defaultPrevented;
	        newUrl = trimEmptyHash(newUrl);
	        $location.$$parse(newUrl);
	        $location.$$state = newState;

	        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	            newState, oldState).defaultPrevented;

	        // if the location was changed by a `$locationChangeStart` handler then stop
	        // processing this location change
	        if ($location.absUrl() !== newUrl) return;

	        if (defaultPrevented) {
	          $location.$$parse(oldUrl);
	          $location.$$state = oldState;
	          setBrowserUrlWithFallback(oldUrl, false, oldState);
	        } else {
	          initializing = false;
	          afterLocationChange(oldUrl, oldState);
	        }
	      });
	      if (!$rootScope.$$phase) $rootScope.$digest();
	    });

	    // update browser
	    $rootScope.$watch(function $locationWatch() {
	      var oldUrl = trimEmptyHash($browser.url());
	      var newUrl = trimEmptyHash($location.absUrl());
	      var oldState = $browser.state();
	      var currentReplace = $location.$$replace;
	      var urlOrStateChanged = oldUrl !== newUrl ||
	        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);

	      if (initializing || urlOrStateChanged) {
	        initializing = false;

	        $rootScope.$evalAsync(function() {
	          var newUrl = $location.absUrl();
	          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	              $location.$$state, oldState).defaultPrevented;

	          // if the location was changed by a `$locationChangeStart` handler then stop
	          // processing this location change
	          if ($location.absUrl() !== newUrl) return;

	          if (defaultPrevented) {
	            $location.$$parse(oldUrl);
	            $location.$$state = oldState;
	          } else {
	            if (urlOrStateChanged) {
	              setBrowserUrlWithFallback(newUrl, currentReplace,
	                                        oldState === $location.$$state ? null : $location.$$state);
	            }
	            afterLocationChange(oldUrl, oldState);
	          }
	        });
	      }

	      $location.$$replace = false;

	      // we don't need to return anything because $evalAsync will make the digest loop dirty when
	      // there is a change
	    });

	    return $location;

	    function afterLocationChange(oldUrl, oldState) {
	      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
	        $location.$$state, oldState);
	    }
	}];
	}

	/**
	 * @ngdoc service
	 * @name $log
	 * @requires $window
	 *
	 * @description
	 * Simple service for logging. Default implementation safely writes the message
	 * into the browser's console (if present).
	 *
	 * The main purpose of this service is to simplify debugging and troubleshooting.
	 *
	 * The default is to log `debug` messages. You can use
	 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
	 *
	 * @example
	   <example module="logExample" name="log-service">
	     <file name="script.js">
	       angular.module('logExample', [])
	         .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
	     </file>
	     <file name="index.html">
	       <div ng-controller="LogController">
	         <p>Reload this page with open console, enter text and hit the log button...</p>
	         <label>Message:
	         <input type="text" ng-model="message" /></label>
	         <button ng-click="$log.log(message)">log</button>
	         <button ng-click="$log.warn(message)">warn</button>
	         <button ng-click="$log.info(message)">info</button>
	         <button ng-click="$log.error(message)">error</button>
	         <button ng-click="$log.debug(message)">debug</button>
	       </div>
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc provider
	 * @name $logProvider
	 * @this
	 *
	 * @description
	 * Use the `$logProvider` to configure how the application logs messages
	 */
	function $LogProvider() {
	  var debug = true,
	      self = this;

	  /**
	   * @ngdoc method
	   * @name $logProvider#debugEnabled
	   * @description
	   * @param {boolean=} flag enable or disable debug level messages
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.debugEnabled = function(flag) {
	    if (isDefined(flag)) {
	      debug = flag;
	    return this;
	    } else {
	      return debug;
	    }
	  };

	  this.$get = ['$window', function($window) {
	    return {
	      /**
	       * @ngdoc method
	       * @name $log#log
	       *
	       * @description
	       * Write a log message
	       */
	      log: consoleLog('log'),

	      /**
	       * @ngdoc method
	       * @name $log#info
	       *
	       * @description
	       * Write an information message
	       */
	      info: consoleLog('info'),

	      /**
	       * @ngdoc method
	       * @name $log#warn
	       *
	       * @description
	       * Write a warning message
	       */
	      warn: consoleLog('warn'),

	      /**
	       * @ngdoc method
	       * @name $log#error
	       *
	       * @description
	       * Write an error message
	       */
	      error: consoleLog('error'),

	      /**
	       * @ngdoc method
	       * @name $log#debug
	       *
	       * @description
	       * Write a debug message
	       */
	      debug: (function() {
	        var fn = consoleLog('debug');

	        return function() {
	          if (debug) {
	            fn.apply(self, arguments);
	          }
	        };
	      })()
	    };

	    function formatError(arg) {
	      if (arg instanceof Error) {
	        if (arg.stack) {
	          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
	              ? 'Error: ' + arg.message + '\n' + arg.stack
	              : arg.stack;
	        } else if (arg.sourceURL) {
	          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
	        }
	      }
	      return arg;
	    }

	    function consoleLog(type) {
	      var console = $window.console || {},
	          logFn = console[type] || console.log || noop,
	          hasApply = false;

	      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
	      // The reason behind this is that console.log has type "object" in IE8...
	      try {
	        hasApply = !!logFn.apply;
	      } catch (e) { /* empty */ }

	      if (hasApply) {
	        return function() {
	          var args = [];
	          forEach(arguments, function(arg) {
	            args.push(formatError(arg));
	          });
	          return logFn.apply(console, args);
	        };
	      }

	      // we are IE which either doesn't have window.console => this is noop and we do nothing,
	      // or we are IE where console.log doesn't have apply so we log at least first 2 args
	      return function(arg1, arg2) {
	        logFn(arg1, arg2 == null ? '' : arg2);
	      };
	    }
	  }];
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	var $parseMinErr = minErr('$parse');

	var objectValueOf = {}.constructor.prototype.valueOf;

	// Sandboxing Angular Expressions
	// ------------------------------
	// Angular expressions are no longer sandboxed. So it is now even easier to access arbitrary JS code by
	// various means such as obtaining a reference to native JS functions like the Function constructor.
	//
	// As an example, consider the following Angular expression:
	//
	//   {}.toString.constructor('alert("evil JS code")')
	//
	// It is important to realize that if you create an expression from a string that contains user provided
	// content then it is possible that your application contains a security vulnerability to an XSS style attack.
	//
	// See https://docs.angularjs.org/guide/security


	function getStringValue(name) {
	  // Property names must be strings. This means that non-string objects cannot be used
	  // as keys in an object. Any non-string object, including a number, is typecasted
	  // into a string via the toString method.
	  // -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
	  //
	  // So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
	  // to a string. It's not always possible. If `name` is an object and its `toString` method is
	  // 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
	  //
	  // TypeError: Cannot convert object to primitive value
	  //
	  // For performance reasons, we don't catch this error here and allow it to propagate up the call
	  // stack. Note that you'll get the same error in JavaScript if you try to access a property using
	  // such a 'broken' object as a key.
	  return name + '';
	}


	var OPERATORS = createMap();
	forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
	var ESCAPE = {'n':'\n', 'f':'\f', 'r':'\r', 't':'\t', 'v':'\v', '\'':'\'', '"':'"'};


	/////////////////////////////////////////


	/**
	 * @constructor
	 */
	var Lexer = function Lexer(options) {
	  this.options = options;
	};

	Lexer.prototype = {
	  constructor: Lexer,

	  lex: function(text) {
	    this.text = text;
	    this.index = 0;
	    this.tokens = [];

	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      if (ch === '"' || ch === '\'') {
	        this.readString(ch);
	      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
	        this.readNumber();
	      } else if (this.isIdentifierStart(this.peekMultichar())) {
	        this.readIdent();
	      } else if (this.is(ch, '(){}[].,;:?')) {
	        this.tokens.push({index: this.index, text: ch});
	        this.index++;
	      } else if (this.isWhitespace(ch)) {
	        this.index++;
	      } else {
	        var ch2 = ch + this.peek();
	        var ch3 = ch2 + this.peek(2);
	        var op1 = OPERATORS[ch];
	        var op2 = OPERATORS[ch2];
	        var op3 = OPERATORS[ch3];
	        if (op1 || op2 || op3) {
	          var token = op3 ? ch3 : (op2 ? ch2 : ch);
	          this.tokens.push({index: this.index, text: token, operator: true});
	          this.index += token.length;
	        } else {
	          this.throwError('Unexpected next character ', this.index, this.index + 1);
	        }
	      }
	    }
	    return this.tokens;
	  },

	  is: function(ch, chars) {
	    return chars.indexOf(ch) !== -1;
	  },

	  peek: function(i) {
	    var num = i || 1;
	    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
	  },

	  isNumber: function(ch) {
	    return ('0' <= ch && ch <= '9') && typeof ch === 'string';
	  },

	  isWhitespace: function(ch) {
	    // IE treats non-breaking space as \u00A0
	    return (ch === ' ' || ch === '\r' || ch === '\t' ||
	            ch === '\n' || ch === '\v' || ch === '\u00A0');
	  },

	  isIdentifierStart: function(ch) {
	    return this.options.isIdentifierStart ?
	        this.options.isIdentifierStart(ch, this.codePointAt(ch)) :
	        this.isValidIdentifierStart(ch);
	  },

	  isValidIdentifierStart: function(ch) {
	    return ('a' <= ch && ch <= 'z' ||
	            'A' <= ch && ch <= 'Z' ||
	            '_' === ch || ch === '$');
	  },

	  isIdentifierContinue: function(ch) {
	    return this.options.isIdentifierContinue ?
	        this.options.isIdentifierContinue(ch, this.codePointAt(ch)) :
	        this.isValidIdentifierContinue(ch);
	  },

	  isValidIdentifierContinue: function(ch, cp) {
	    return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch);
	  },

	  codePointAt: function(ch) {
	    if (ch.length === 1) return ch.charCodeAt(0);
	    // eslint-disable-next-line no-bitwise
	    return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 0x35FDC00;
	  },

	  peekMultichar: function() {
	    var ch = this.text.charAt(this.index);
	    var peek = this.peek();
	    if (!peek) {
	      return ch;
	    }
	    var cp1 = ch.charCodeAt(0);
	    var cp2 = peek.charCodeAt(0);
	    if (cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF) {
	      return ch + peek;
	    }
	    return ch;
	  },

	  isExpOperator: function(ch) {
	    return (ch === '-' || ch === '+' || this.isNumber(ch));
	  },

	  throwError: function(error, start, end) {
	    end = end || this.index;
	    var colStr = (isDefined(start)
	            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
	            : ' ' + end);
	    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
	        error, colStr, this.text);
	  },

	  readNumber: function() {
	    var number = '';
	    var start = this.index;
	    while (this.index < this.text.length) {
	      var ch = lowercase(this.text.charAt(this.index));
	      if (ch === '.' || this.isNumber(ch)) {
	        number += ch;
	      } else {
	        var peekCh = this.peek();
	        if (ch === 'e' && this.isExpOperator(peekCh)) {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            peekCh && this.isNumber(peekCh) &&
	            number.charAt(number.length - 1) === 'e') {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            (!peekCh || !this.isNumber(peekCh)) &&
	            number.charAt(number.length - 1) === 'e') {
	          this.throwError('Invalid exponent');
	        } else {
	          break;
	        }
	      }
	      this.index++;
	    }
	    this.tokens.push({
	      index: start,
	      text: number,
	      constant: true,
	      value: Number(number)
	    });
	  },

	  readIdent: function() {
	    var start = this.index;
	    this.index += this.peekMultichar().length;
	    while (this.index < this.text.length) {
	      var ch = this.peekMultichar();
	      if (!this.isIdentifierContinue(ch)) {
	        break;
	      }
	      this.index += ch.length;
	    }
	    this.tokens.push({
	      index: start,
	      text: this.text.slice(start, this.index),
	      identifier: true
	    });
	  },

	  readString: function(quote) {
	    var start = this.index;
	    this.index++;
	    var string = '';
	    var rawString = quote;
	    var escape = false;
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      rawString += ch;
	      if (escape) {
	        if (ch === 'u') {
	          var hex = this.text.substring(this.index + 1, this.index + 5);
	          if (!hex.match(/[\da-f]{4}/i)) {
	            this.throwError('Invalid unicode escape [\\u' + hex + ']');
	          }
	          this.index += 4;
	          string += String.fromCharCode(parseInt(hex, 16));
	        } else {
	          var rep = ESCAPE[ch];
	          string = string + (rep || ch);
	        }
	        escape = false;
	      } else if (ch === '\\') {
	        escape = true;
	      } else if (ch === quote) {
	        this.index++;
	        this.tokens.push({
	          index: start,
	          text: rawString,
	          constant: true,
	          value: string
	        });
	        return;
	      } else {
	        string += ch;
	      }
	      this.index++;
	    }
	    this.throwError('Unterminated quote', start);
	  }
	};

	var AST = function AST(lexer, options) {
	  this.lexer = lexer;
	  this.options = options;
	};

	AST.Program = 'Program';
	AST.ExpressionStatement = 'ExpressionStatement';
	AST.AssignmentExpression = 'AssignmentExpression';
	AST.ConditionalExpression = 'ConditionalExpression';
	AST.LogicalExpression = 'LogicalExpression';
	AST.BinaryExpression = 'BinaryExpression';
	AST.UnaryExpression = 'UnaryExpression';
	AST.CallExpression = 'CallExpression';
	AST.MemberExpression = 'MemberExpression';
	AST.Identifier = 'Identifier';
	AST.Literal = 'Literal';
	AST.ArrayExpression = 'ArrayExpression';
	AST.Property = 'Property';
	AST.ObjectExpression = 'ObjectExpression';
	AST.ThisExpression = 'ThisExpression';
	AST.LocalsExpression = 'LocalsExpression';

	// Internal use only
	AST.NGValueParameter = 'NGValueParameter';

	AST.prototype = {
	  ast: function(text) {
	    this.text = text;
	    this.tokens = this.lexer.lex(text);

	    var value = this.program();

	    if (this.tokens.length !== 0) {
	      this.throwError('is an unexpected token', this.tokens[0]);
	    }

	    return value;
	  },

	  program: function() {
	    var body = [];
	    while (true) {
	      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
	        body.push(this.expressionStatement());
	      if (!this.expect(';')) {
	        return { type: AST.Program, body: body};
	      }
	    }
	  },

	  expressionStatement: function() {
	    return { type: AST.ExpressionStatement, expression: this.filterChain() };
	  },

	  filterChain: function() {
	    var left = this.expression();
	    while (this.expect('|')) {
	      left = this.filter(left);
	    }
	    return left;
	  },

	  expression: function() {
	    return this.assignment();
	  },

	  assignment: function() {
	    var result = this.ternary();
	    if (this.expect('=')) {
	      if (!isAssignable(result)) {
	        throw $parseMinErr('lval', 'Trying to assign a value to a non l-value');
	      }

	      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};
	    }
	    return result;
	  },

	  ternary: function() {
	    var test = this.logicalOR();
	    var alternate;
	    var consequent;
	    if (this.expect('?')) {
	      alternate = this.expression();
	      if (this.consume(':')) {
	        consequent = this.expression();
	        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};
	      }
	    }
	    return test;
	  },

	  logicalOR: function() {
	    var left = this.logicalAND();
	    while (this.expect('||')) {
	      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
	    }
	    return left;
	  },

	  logicalAND: function() {
	    var left = this.equality();
	    while (this.expect('&&')) {
	      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
	    }
	    return left;
	  },

	  equality: function() {
	    var left = this.relational();
	    var token;
	    while ((token = this.expect('==','!=','===','!=='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
	    }
	    return left;
	  },

	  relational: function() {
	    var left = this.additive();
	    var token;
	    while ((token = this.expect('<', '>', '<=', '>='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
	    }
	    return left;
	  },

	  additive: function() {
	    var left = this.multiplicative();
	    var token;
	    while ((token = this.expect('+','-'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
	    }
	    return left;
	  },

	  multiplicative: function() {
	    var left = this.unary();
	    var token;
	    while ((token = this.expect('*','/','%'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
	    }
	    return left;
	  },

	  unary: function() {
	    var token;
	    if ((token = this.expect('+', '-', '!'))) {
	      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
	    } else {
	      return this.primary();
	    }
	  },

	  primary: function() {
	    var primary;
	    if (this.expect('(')) {
	      primary = this.filterChain();
	      this.consume(')');
	    } else if (this.expect('[')) {
	      primary = this.arrayDeclaration();
	    } else if (this.expect('{')) {
	      primary = this.object();
	    } else if (this.selfReferential.hasOwnProperty(this.peek().text)) {
	      primary = copy(this.selfReferential[this.consume().text]);
	    } else if (this.options.literals.hasOwnProperty(this.peek().text)) {
	      primary = { type: AST.Literal, value: this.options.literals[this.consume().text]};
	    } else if (this.peek().identifier) {
	      primary = this.identifier();
	    } else if (this.peek().constant) {
	      primary = this.constant();
	    } else {
	      this.throwError('not a primary expression', this.peek());
	    }

	    var next;
	    while ((next = this.expect('(', '[', '.'))) {
	      if (next.text === '(') {
	        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
	        this.consume(')');
	      } else if (next.text === '[') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
	        this.consume(']');
	      } else if (next.text === '.') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
	      } else {
	        this.throwError('IMPOSSIBLE');
	      }
	    }
	    return primary;
	  },

	  filter: function(baseExpression) {
	    var args = [baseExpression];
	    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};

	    while (this.expect(':')) {
	      args.push(this.expression());
	    }

	    return result;
	  },

	  parseArguments: function() {
	    var args = [];
	    if (this.peekToken().text !== ')') {
	      do {
	        args.push(this.filterChain());
	      } while (this.expect(','));
	    }
	    return args;
	  },

	  identifier: function() {
	    var token = this.consume();
	    if (!token.identifier) {
	      this.throwError('is not a valid identifier', token);
	    }
	    return { type: AST.Identifier, name: token.text };
	  },

	  constant: function() {
	    // TODO check that it is a constant
	    return { type: AST.Literal, value: this.consume().value };
	  },

	  arrayDeclaration: function() {
	    var elements = [];
	    if (this.peekToken().text !== ']') {
	      do {
	        if (this.peek(']')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        elements.push(this.expression());
	      } while (this.expect(','));
	    }
	    this.consume(']');

	    return { type: AST.ArrayExpression, elements: elements };
	  },

	  object: function() {
	    var properties = [], property;
	    if (this.peekToken().text !== '}') {
	      do {
	        if (this.peek('}')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        property = {type: AST.Property, kind: 'init'};
	        if (this.peek().constant) {
	          property.key = this.constant();
	          property.computed = false;
	          this.consume(':');
	          property.value = this.expression();
	        } else if (this.peek().identifier) {
	          property.key = this.identifier();
	          property.computed = false;
	          if (this.peek(':')) {
	            this.consume(':');
	            property.value = this.expression();
	          } else {
	            property.value = property.key;
	          }
	        } else if (this.peek('[')) {
	          this.consume('[');
	          property.key = this.expression();
	          this.consume(']');
	          property.computed = true;
	          this.consume(':');
	          property.value = this.expression();
	        } else {
	          this.throwError('invalid key', this.peek());
	        }
	        properties.push(property);
	      } while (this.expect(','));
	    }
	    this.consume('}');

	    return {type: AST.ObjectExpression, properties: properties };
	  },

	  throwError: function(msg, token) {
	    throw $parseMinErr('syntax',
	        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
	          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
	  },

	  consume: function(e1) {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }

	    var token = this.expect(e1);
	    if (!token) {
	      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
	    }
	    return token;
	  },

	  peekToken: function() {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }
	    return this.tokens[0];
	  },

	  peek: function(e1, e2, e3, e4) {
	    return this.peekAhead(0, e1, e2, e3, e4);
	  },

	  peekAhead: function(i, e1, e2, e3, e4) {
	    if (this.tokens.length > i) {
	      var token = this.tokens[i];
	      var t = token.text;
	      if (t === e1 || t === e2 || t === e3 || t === e4 ||
	          (!e1 && !e2 && !e3 && !e4)) {
	        return token;
	      }
	    }
	    return false;
	  },

	  expect: function(e1, e2, e3, e4) {
	    var token = this.peek(e1, e2, e3, e4);
	    if (token) {
	      this.tokens.shift();
	      return token;
	    }
	    return false;
	  },

	  selfReferential: {
	    'this': {type: AST.ThisExpression },
	    '$locals': {type: AST.LocalsExpression }
	  }
	};

	function ifDefined(v, d) {
	  return typeof v !== 'undefined' ? v : d;
	}

	function plusFn(l, r) {
	  if (typeof l === 'undefined') return r;
	  if (typeof r === 'undefined') return l;
	  return l + r;
	}

	function isStateless($filter, filterName) {
	  var fn = $filter(filterName);
	  return !fn.$stateful;
	}

	function findConstantAndWatchExpressions(ast, $filter) {
	  var allConstants;
	  var argsToWatch;
	  var isStatelessFilter;
	  switch (ast.type) {
	  case AST.Program:
	    allConstants = true;
	    forEach(ast.body, function(expr) {
	      findConstantAndWatchExpressions(expr.expression, $filter);
	      allConstants = allConstants && expr.expression.constant;
	    });
	    ast.constant = allConstants;
	    break;
	  case AST.Literal:
	    ast.constant = true;
	    ast.toWatch = [];
	    break;
	  case AST.UnaryExpression:
	    findConstantAndWatchExpressions(ast.argument, $filter);
	    ast.constant = ast.argument.constant;
	    ast.toWatch = ast.argument.toWatch;
	    break;
	  case AST.BinaryExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
	    break;
	  case AST.LogicalExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.ConditionalExpression:
	    findConstantAndWatchExpressions(ast.test, $filter);
	    findConstantAndWatchExpressions(ast.alternate, $filter);
	    findConstantAndWatchExpressions(ast.consequent, $filter);
	    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.Identifier:
	    ast.constant = false;
	    ast.toWatch = [ast];
	    break;
	  case AST.MemberExpression:
	    findConstantAndWatchExpressions(ast.object, $filter);
	    if (ast.computed) {
	      findConstantAndWatchExpressions(ast.property, $filter);
	    }
	    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
	    ast.toWatch = [ast];
	    break;
	  case AST.CallExpression:
	    isStatelessFilter = ast.filter ? isStateless($filter, ast.callee.name) : false;
	    allConstants = isStatelessFilter;
	    argsToWatch = [];
	    forEach(ast.arguments, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = isStatelessFilter ? argsToWatch : [ast];
	    break;
	  case AST.AssignmentExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = [ast];
	    break;
	  case AST.ArrayExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.elements, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ObjectExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.properties, function(property) {
	      findConstantAndWatchExpressions(property.value, $filter);
	      allConstants = allConstants && property.value.constant && !property.computed;
	      if (!property.value.constant) {
	        argsToWatch.push.apply(argsToWatch, property.value.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ThisExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  case AST.LocalsExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  }
	}

	function getInputs(body) {
	  if (body.length !== 1) return;
	  var lastExpression = body[0].expression;
	  var candidate = lastExpression.toWatch;
	  if (candidate.length !== 1) return candidate;
	  return candidate[0] !== lastExpression ? candidate : undefined;
	}

	function isAssignable(ast) {
	  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
	}

	function assignableAST(ast) {
	  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
	    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
	  }
	}

	function isLiteral(ast) {
	  return ast.body.length === 0 ||
	      ast.body.length === 1 && (
	      ast.body[0].expression.type === AST.Literal ||
	      ast.body[0].expression.type === AST.ArrayExpression ||
	      ast.body[0].expression.type === AST.ObjectExpression);
	}

	function isConstant(ast) {
	  return ast.constant;
	}

	function ASTCompiler(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}

	ASTCompiler.prototype = {
	  compile: function(expression) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.state = {
	      nextId: 0,
	      filters: {},
	      fn: {vars: [], body: [], own: {}},
	      assign: {vars: [], body: [], own: {}},
	      inputs: []
	    };
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var extra = '';
	    var assignable;
	    this.stage = 'assign';
	    if ((assignable = assignableAST(ast))) {
	      this.state.computing = 'assign';
	      var result = this.nextId();
	      this.recurse(assignable, result);
	      this.return_(result);
	      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
	    }
	    var toWatch = getInputs(ast.body);
	    self.stage = 'inputs';
	    forEach(toWatch, function(watch, key) {
	      var fnKey = 'fn' + key;
	      self.state[fnKey] = {vars: [], body: [], own: {}};
	      self.state.computing = fnKey;
	      var intoId = self.nextId();
	      self.recurse(watch, intoId);
	      self.return_(intoId);
	      self.state.inputs.push(fnKey);
	      watch.watchId = key;
	    });
	    this.state.computing = 'fn';
	    this.stage = 'main';
	    this.recurse(ast);
	    var fnString =
	      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
	      // This is a workaround for this until we do a better job at only removing the prefix only when we should.
	      '"' + this.USE + ' ' + this.STRICT + '";\n' +
	      this.filterPrefix() +
	      'var fn=' + this.generateFunction('fn', 's,l,a,i') +
	      extra +
	      this.watchFns() +
	      'return fn;';

	    // eslint-disable-next-line no-new-func
	    var fn = (new Function('$filter',
	        'getStringValue',
	        'ifDefined',
	        'plus',
	        fnString))(
	          this.$filter,
	          getStringValue,
	          ifDefined,
	          plusFn);
	    this.state = this.stage = undefined;
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },

	  USE: 'use',

	  STRICT: 'strict',

	  watchFns: function() {
	    var result = [];
	    var fns = this.state.inputs;
	    var self = this;
	    forEach(fns, function(name) {
	      result.push('var ' + name + '=' + self.generateFunction(name, 's'));
	    });
	    if (fns.length) {
	      result.push('fn.inputs=[' + fns.join(',') + '];');
	    }
	    return result.join('');
	  },

	  generateFunction: function(name, params) {
	    return 'function(' + params + '){' +
	        this.varsPrefix(name) +
	        this.body(name) +
	        '};';
	  },

	  filterPrefix: function() {
	    var parts = [];
	    var self = this;
	    forEach(this.state.filters, function(id, filter) {
	      parts.push(id + '=$filter(' + self.escape(filter) + ')');
	    });
	    if (parts.length) return 'var ' + parts.join(',') + ';';
	    return '';
	  },

	  varsPrefix: function(section) {
	    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
	  },

	  body: function(section) {
	    return this.state[section].body.join('');
	  },

	  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var left, right, self = this, args, expression, computed;
	    recursionFn = recursionFn || noop;
	    if (!skipWatchIdCheck && isDefined(ast.watchId)) {
	      intoId = intoId || this.nextId();
	      this.if_('i',
	        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
	        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
	      );
	      return;
	    }
	    switch (ast.type) {
	    case AST.Program:
	      forEach(ast.body, function(expression, pos) {
	        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });
	        if (pos !== ast.body.length - 1) {
	          self.current().body.push(right, ';');
	        } else {
	          self.return_(right);
	        }
	      });
	      break;
	    case AST.Literal:
	      expression = this.escape(ast.value);
	      this.assign(intoId, expression);
	      recursionFn(intoId || expression);
	      break;
	    case AST.UnaryExpression:
	      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });
	      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.BinaryExpression:
	      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });
	      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });
	      if (ast.operator === '+') {
	        expression = this.plus(left, right);
	      } else if (ast.operator === '-') {
	        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
	      } else {
	        expression = '(' + left + ')' + ast.operator + '(' + right + ')';
	      }
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.LogicalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.left, intoId);
	      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.ConditionalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.test, intoId);
	      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.Identifier:
	      intoId = intoId || this.nextId();
	      if (nameId) {
	        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
	        nameId.computed = false;
	        nameId.name = ast.name;
	      }
	      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
	        function() {
	          self.if_(self.stage === 'inputs' || 's', function() {
	            if (create && create !== 1) {
	              self.if_(
	                self.isNull(self.nonComputedMember('s', ast.name)),
	                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
	            }
	            self.assign(intoId, self.nonComputedMember('s', ast.name));
	          });
	        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
	        );
	      recursionFn(intoId);
	      break;
	    case AST.MemberExpression:
	      left = nameId && (nameId.context = this.nextId()) || this.nextId();
	      intoId = intoId || this.nextId();
	      self.recurse(ast.object, left, undefined, function() {
	        self.if_(self.notNull(left), function() {
	          if (ast.computed) {
	            right = self.nextId();
	            self.recurse(ast.property, right);
	            self.getStringValue(right);
	            if (create && create !== 1) {
	              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
	            }
	            expression = self.computedMember(left, right);
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = true;
	              nameId.name = right;
	            }
	          } else {
	            if (create && create !== 1) {
	              self.if_(self.isNull(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
	            }
	            expression = self.nonComputedMember(left, ast.property.name);
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = false;
	              nameId.name = ast.property.name;
	            }
	          }
	        }, function() {
	          self.assign(intoId, 'undefined');
	        });
	        recursionFn(intoId);
	      }, !!create);
	      break;
	    case AST.CallExpression:
	      intoId = intoId || this.nextId();
	      if (ast.filter) {
	        right = self.filter(ast.callee.name);
	        args = [];
	        forEach(ast.arguments, function(expr) {
	          var argument = self.nextId();
	          self.recurse(expr, argument);
	          args.push(argument);
	        });
	        expression = right + '(' + args.join(',') + ')';
	        self.assign(intoId, expression);
	        recursionFn(intoId);
	      } else {
	        right = self.nextId();
	        left = {};
	        args = [];
	        self.recurse(ast.callee, right, left, function() {
	          self.if_(self.notNull(right), function() {
	            forEach(ast.arguments, function(expr) {
	              self.recurse(expr, ast.constant ? undefined : self.nextId(), undefined, function(argument) {
	                args.push(argument);
	              });
	            });
	            if (left.name) {
	              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
	            } else {
	              expression = right + '(' + args.join(',') + ')';
	            }
	            self.assign(intoId, expression);
	          }, function() {
	            self.assign(intoId, 'undefined');
	          });
	          recursionFn(intoId);
	        });
	      }
	      break;
	    case AST.AssignmentExpression:
	      right = this.nextId();
	      left = {};
	      this.recurse(ast.left, undefined, left, function() {
	        self.if_(self.notNull(left.context), function() {
	          self.recurse(ast.right, right);
	          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
	          self.assign(intoId, expression);
	          recursionFn(intoId || expression);
	        });
	      }, 1);
	      break;
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        self.recurse(expr, ast.constant ? undefined : self.nextId(), undefined, function(argument) {
	          args.push(argument);
	        });
	      });
	      expression = '[' + args.join(',') + ']';
	      this.assign(intoId, expression);
	      recursionFn(intoId || expression);
	      break;
	    case AST.ObjectExpression:
	      args = [];
	      computed = false;
	      forEach(ast.properties, function(property) {
	        if (property.computed) {
	          computed = true;
	        }
	      });
	      if (computed) {
	        intoId = intoId || this.nextId();
	        this.assign(intoId, '{}');
	        forEach(ast.properties, function(property) {
	          if (property.computed) {
	            left = self.nextId();
	            self.recurse(property.key, left);
	          } else {
	            left = property.key.type === AST.Identifier ?
	                       property.key.name :
	                       ('' + property.key.value);
	          }
	          right = self.nextId();
	          self.recurse(property.value, right);
	          self.assign(self.member(intoId, left, property.computed), right);
	        });
	      } else {
	        forEach(ast.properties, function(property) {
	          self.recurse(property.value, ast.constant ? undefined : self.nextId(), undefined, function(expr) {
	            args.push(self.escape(
	                property.key.type === AST.Identifier ? property.key.name :
	                  ('' + property.key.value)) +
	                ':' + expr);
	          });
	        });
	        expression = '{' + args.join(',') + '}';
	        this.assign(intoId, expression);
	      }
	      recursionFn(intoId || expression);
	      break;
	    case AST.ThisExpression:
	      this.assign(intoId, 's');
	      recursionFn(intoId || 's');
	      break;
	    case AST.LocalsExpression:
	      this.assign(intoId, 'l');
	      recursionFn(intoId || 'l');
	      break;
	    case AST.NGValueParameter:
	      this.assign(intoId, 'v');
	      recursionFn(intoId || 'v');
	      break;
	    }
	  },

	  getHasOwnProperty: function(element, property) {
	    var key = element + '.' + property;
	    var own = this.current().own;
	    if (!own.hasOwnProperty(key)) {
	      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
	    }
	    return own[key];
	  },

	  assign: function(id, value) {
	    if (!id) return;
	    this.current().body.push(id, '=', value, ';');
	    return id;
	  },

	  filter: function(filterName) {
	    if (!this.state.filters.hasOwnProperty(filterName)) {
	      this.state.filters[filterName] = this.nextId(true);
	    }
	    return this.state.filters[filterName];
	  },

	  ifDefined: function(id, defaultValue) {
	    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
	  },

	  plus: function(left, right) {
	    return 'plus(' + left + ',' + right + ')';
	  },

	  return_: function(id) {
	    this.current().body.push('return ', id, ';');
	  },

	  if_: function(test, alternate, consequent) {
	    if (test === true) {
	      alternate();
	    } else {
	      var body = this.current().body;
	      body.push('if(', test, '){');
	      alternate();
	      body.push('}');
	      if (consequent) {
	        body.push('else{');
	        consequent();
	        body.push('}');
	      }
	    }
	  },

	  not: function(expression) {
	    return '!(' + expression + ')';
	  },

	  isNull: function(expression) {
	    return expression + '==null';
	  },

	  notNull: function(expression) {
	    return expression + '!=null';
	  },

	  nonComputedMember: function(left, right) {
	    var SAFE_IDENTIFIER = /^[$_a-zA-Z][$_a-zA-Z0-9]*$/;
	    var UNSAFE_CHARACTERS = /[^$_a-zA-Z0-9]/g;
	    if (SAFE_IDENTIFIER.test(right)) {
	      return left + '.' + right;
	    } else {
	      return left  + '["' + right.replace(UNSAFE_CHARACTERS, this.stringEscapeFn) + '"]';
	    }
	  },

	  computedMember: function(left, right) {
	    return left + '[' + right + ']';
	  },

	  member: function(left, right, computed) {
	    if (computed) return this.computedMember(left, right);
	    return this.nonComputedMember(left, right);
	  },

	  getStringValue: function(item) {
	    this.assign(item, 'getStringValue(' + item + ')');
	  },

	  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var self = this;
	    return function() {
	      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
	    };
	  },

	  lazyAssign: function(id, value) {
	    var self = this;
	    return function() {
	      self.assign(id, value);
	    };
	  },

	  stringEscapeRegex: /[^ a-zA-Z0-9]/g,

	  stringEscapeFn: function(c) {
	    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
	  },

	  escape: function(value) {
	    if (isString(value)) return '\'' + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + '\'';
	    if (isNumber(value)) return value.toString();
	    if (value === true) return 'true';
	    if (value === false) return 'false';
	    if (value === null) return 'null';
	    if (typeof value === 'undefined') return 'undefined';

	    throw $parseMinErr('esc', 'IMPOSSIBLE');
	  },

	  nextId: function(skip, init) {
	    var id = 'v' + (this.state.nextId++);
	    if (!skip) {
	      this.current().vars.push(id + (init ? '=' + init : ''));
	    }
	    return id;
	  },

	  current: function() {
	    return this.state[this.state.computing];
	  }
	};


	function ASTInterpreter(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}

	ASTInterpreter.prototype = {
	  compile: function(expression) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var assignable;
	    var assign;
	    if ((assignable = assignableAST(ast))) {
	      assign = this.recurse(assignable);
	    }
	    var toWatch = getInputs(ast.body);
	    var inputs;
	    if (toWatch) {
	      inputs = [];
	      forEach(toWatch, function(watch, key) {
	        var input = self.recurse(watch);
	        watch.input = input;
	        inputs.push(input);
	        watch.watchId = key;
	      });
	    }
	    var expressions = [];
	    forEach(ast.body, function(expression) {
	      expressions.push(self.recurse(expression.expression));
	    });
	    var fn = ast.body.length === 0 ? noop :
	             ast.body.length === 1 ? expressions[0] :
	             function(scope, locals) {
	               var lastValue;
	               forEach(expressions, function(exp) {
	                 lastValue = exp(scope, locals);
	               });
	               return lastValue;
	             };
	    if (assign) {
	      fn.assign = function(scope, value, locals) {
	        return assign(scope, locals, value);
	      };
	    }
	    if (inputs) {
	      fn.inputs = inputs;
	    }
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },

	  recurse: function(ast, context, create) {
	    var left, right, self = this, args;
	    if (ast.input) {
	      return this.inputs(ast.input, ast.watchId);
	    }
	    switch (ast.type) {
	    case AST.Literal:
	      return this.value(ast.value, context);
	    case AST.UnaryExpression:
	      right = this.recurse(ast.argument);
	      return this['unary' + ast.operator](right, context);
	    case AST.BinaryExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.LogicalExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.ConditionalExpression:
	      return this['ternary?:'](
	        this.recurse(ast.test),
	        this.recurse(ast.alternate),
	        this.recurse(ast.consequent),
	        context
	      );
	    case AST.Identifier:
	      return self.identifier(ast.name, context, create);
	    case AST.MemberExpression:
	      left = this.recurse(ast.object, false, !!create);
	      if (!ast.computed) {
	        right = ast.property.name;
	      }
	      if (ast.computed) right = this.recurse(ast.property);
	      return ast.computed ?
	        this.computedMember(left, right, context, create) :
	        this.nonComputedMember(left, right, context, create);
	    case AST.CallExpression:
	      args = [];
	      forEach(ast.arguments, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      if (ast.filter) right = this.$filter(ast.callee.name);
	      if (!ast.filter) right = this.recurse(ast.callee, true);
	      return ast.filter ?
	        function(scope, locals, assign, inputs) {
	          var values = [];
	          for (var i = 0; i < args.length; ++i) {
	            values.push(args[i](scope, locals, assign, inputs));
	          }
	          var value = right.apply(undefined, values, inputs);
	          return context ? {context: undefined, name: undefined, value: value} : value;
	        } :
	        function(scope, locals, assign, inputs) {
	          var rhs = right(scope, locals, assign, inputs);
	          var value;
	          if (rhs.value != null) {
	            var values = [];
	            for (var i = 0; i < args.length; ++i) {
	              values.push(args[i](scope, locals, assign, inputs));
	            }
	            value = rhs.value.apply(rhs.context, values);
	          }
	          return context ? {value: value} : value;
	        };
	    case AST.AssignmentExpression:
	      left = this.recurse(ast.left, true, 1);
	      right = this.recurse(ast.right);
	      return function(scope, locals, assign, inputs) {
	        var lhs = left(scope, locals, assign, inputs);
	        var rhs = right(scope, locals, assign, inputs);
	        lhs.context[lhs.name] = rhs;
	        return context ? {value: rhs} : rhs;
	      };
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = [];
	        for (var i = 0; i < args.length; ++i) {
	          value.push(args[i](scope, locals, assign, inputs));
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ObjectExpression:
	      args = [];
	      forEach(ast.properties, function(property) {
	        if (property.computed) {
	          args.push({key: self.recurse(property.key),
	                     computed: true,
	                     value: self.recurse(property.value)
	          });
	        } else {
	          args.push({key: property.key.type === AST.Identifier ?
	                          property.key.name :
	                          ('' + property.key.value),
	                     computed: false,
	                     value: self.recurse(property.value)
	          });
	        }
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = {};
	        for (var i = 0; i < args.length; ++i) {
	          if (args[i].computed) {
	            value[args[i].key(scope, locals, assign, inputs)] = args[i].value(scope, locals, assign, inputs);
	          } else {
	            value[args[i].key] = args[i].value(scope, locals, assign, inputs);
	          }
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ThisExpression:
	      return function(scope) {
	        return context ? {value: scope} : scope;
	      };
	    case AST.LocalsExpression:
	      return function(scope, locals) {
	        return context ? {value: locals} : locals;
	      };
	    case AST.NGValueParameter:
	      return function(scope, locals, assign) {
	        return context ? {value: assign} : assign;
	      };
	    }
	  },

	  'unary+': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = +arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary-': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = -arg;
	      } else {
	        arg = -0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary!': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = !argument(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary+': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = plusFn(lhs, rhs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary-': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary*': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary/': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary%': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary===': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      // eslint-disable-next-line eqeqeq
	      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      // eslint-disable-next-line eqeqeq
	      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary&&': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary||': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'ternary?:': function(test, alternate, consequent, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  value: function(value, context) {
	    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };
	  },
	  identifier: function(name, context, create) {
	    return function(scope, locals, assign, inputs) {
	      var base = locals && (name in locals) ? locals : scope;
	      if (create && create !== 1 && base && base[name] == null) {
	        base[name] = {};
	      }
	      var value = base ? base[name] : undefined;
	      if (context) {
	        return {context: base, name: name, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  computedMember: function(left, right, context, create) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs;
	      var value;
	      if (lhs != null) {
	        rhs = right(scope, locals, assign, inputs);
	        rhs = getStringValue(rhs);
	        if (create && create !== 1) {
	          if (lhs && !(lhs[rhs])) {
	            lhs[rhs] = {};
	          }
	        }
	        value = lhs[rhs];
	      }
	      if (context) {
	        return {context: lhs, name: rhs, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  nonComputedMember: function(left, right, context, create) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      if (create && create !== 1) {
	        if (lhs && lhs[right] == null) {
	          lhs[right] = {};
	        }
	      }
	      var value = lhs != null ? lhs[right] : undefined;
	      if (context) {
	        return {context: lhs, name: right, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  inputs: function(input, watchId) {
	    return function(scope, value, locals, inputs) {
	      if (inputs) return inputs[watchId];
	      return input(scope, value, locals);
	    };
	  }
	};

	/**
	 * @constructor
	 */
	var Parser = function Parser(lexer, $filter, options) {
	  this.lexer = lexer;
	  this.$filter = $filter;
	  this.options = options;
	  this.ast = new AST(lexer, options);
	  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
	                                   new ASTCompiler(this.ast, $filter);
	};

	Parser.prototype = {
	  constructor: Parser,

	  parse: function(text) {
	    return this.astCompiler.compile(text);
	  }
	};

	function getValueOf(value) {
	  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
	}

	///////////////////////////////////

	/**
	 * @ngdoc service
	 * @name $parse
	 * @kind function
	 *
	 * @description
	 *
	 * Converts Angular {@link guide/expression expression} into a function.
	 *
	 * ```js
	 *   var getter = $parse('user.name');
	 *   var setter = getter.assign;
	 *   var context = {user:{name:'angular'}};
	 *   var locals = {user:{name:'local'}};
	 *
	 *   expect(getter(context)).toEqual('angular');
	 *   setter(context, 'newValue');
	 *   expect(context.user.name).toEqual('newValue');
	 *   expect(getter(context, locals)).toEqual('local');
	 * ```
	 *
	 *
	 * @param {string} expression String expression to compile.
	 * @returns {function(context, locals)} a function which represents the compiled expression:
	 *
	 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	 *      are evaluated against (typically a scope object).
	 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	 *      `context`.
	 *
	 *    The returned function also has the following properties:
	 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
	 *        literal.
	 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
	 *        constant literals.
	 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
	 *        set to a function to change its value on the given context.
	 *
	 */


	/**
	 * @ngdoc provider
	 * @name $parseProvider
	 * @this
	 *
	 * @description
	 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
	 *  service.
	 */
	function $ParseProvider() {
	  var cache = createMap();
	  var literals = {
	    'true': true,
	    'false': false,
	    'null': null,
	    'undefined': undefined
	  };
	  var identStart, identContinue;

	  /**
	   * @ngdoc method
	   * @name $parseProvider#addLiteral
	   * @description
	   *
	   * Configure $parse service to add literal values that will be present as literal at expressions.
	   *
	   * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
	   * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
	   *
	   **/
	  this.addLiteral = function(literalName, literalValue) {
	    literals[literalName] = literalValue;
	  };

	 /**
	  * @ngdoc method
	  * @name $parseProvider#setIdentifierFns
	  *
	  * @description
	  *
	  * Allows defining the set of characters that are allowed in Angular expressions. The function
	  * `identifierStart` will get called to know if a given character is a valid character to be the
	  * first character for an identifier. The function `identifierContinue` will get called to know if
	  * a given character is a valid character to be a follow-up identifier character. The functions
	  * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
	  * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
	  * mind that the `string` parameter can be two characters long depending on the character
	  * representation. It is expected for the function to return `true` or `false`, whether that
	  * character is allowed or not.
	  *
	  * Since this function will be called extensively, keep the implementation of these functions fast,
	  * as the performance of these functions have a direct impact on the expressions parsing speed.
	  *
	  * @param {function=} identifierStart The function that will decide whether the given character is
	  *   a valid identifier start character.
	  * @param {function=} identifierContinue The function that will decide whether the given character is
	  *   a valid identifier continue character.
	  */
	  this.setIdentifierFns = function(identifierStart, identifierContinue) {
	    identStart = identifierStart;
	    identContinue = identifierContinue;
	    return this;
	  };

	  this.$get = ['$filter', function($filter) {
	    var noUnsafeEval = csp().noUnsafeEval;
	    var $parseOptions = {
	          csp: noUnsafeEval,
	          literals: copy(literals),
	          isIdentifierStart: isFunction(identStart) && identStart,
	          isIdentifierContinue: isFunction(identContinue) && identContinue
	        };
	    return $parse;

	    function $parse(exp, interceptorFn) {
	      var parsedExpression, oneTime, cacheKey;

	      switch (typeof exp) {
	        case 'string':
	          exp = exp.trim();
	          cacheKey = exp;

	          parsedExpression = cache[cacheKey];

	          if (!parsedExpression) {
	            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
	              oneTime = true;
	              exp = exp.substring(2);
	            }
	            var lexer = new Lexer($parseOptions);
	            var parser = new Parser(lexer, $filter, $parseOptions);
	            parsedExpression = parser.parse(exp);
	            if (parsedExpression.constant) {
	              parsedExpression.$$watchDelegate = constantWatchDelegate;
	            } else if (oneTime) {
	              parsedExpression.$$watchDelegate = parsedExpression.literal ?
	                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
	            } else if (parsedExpression.inputs) {
	              parsedExpression.$$watchDelegate = inputsWatchDelegate;
	            }
	            cache[cacheKey] = parsedExpression;
	          }
	          return addInterceptor(parsedExpression, interceptorFn);

	        case 'function':
	          return addInterceptor(exp, interceptorFn);

	        default:
	          return addInterceptor(noop, interceptorFn);
	      }
	    }

	    function expressionInputDirtyCheck(newValue, oldValueOfValue) {

	      if (newValue == null || oldValueOfValue == null) { // null/undefined
	        return newValue === oldValueOfValue;
	      }

	      if (typeof newValue === 'object') {

	        // attempt to convert the value to a primitive type
	        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
	        //             be cheaply dirty-checked
	        newValue = getValueOf(newValue);

	        if (typeof newValue === 'object') {
	          // objects/arrays are not supported - deep-watching them would be too expensive
	          return false;
	        }

	        // fall-through to the primitive equality check
	      }

	      //Primitive or NaN
	      // eslint-disable-next-line no-self-compare
	      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
	    }

	    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
	      var inputExpressions = parsedExpression.inputs;
	      var lastResult;

	      if (inputExpressions.length === 1) {
	        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        inputExpressions = inputExpressions[0];
	        return scope.$watch(function expressionInputWatch(scope) {
	          var newInputValue = inputExpressions(scope);
	          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
	            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
	            oldInputValueOf = newInputValue && getValueOf(newInputValue);
	          }
	          return lastResult;
	        }, listener, objectEquality, prettyPrintExpression);
	      }

	      var oldInputValueOfValues = [];
	      var oldInputValues = [];
	      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        oldInputValues[i] = null;
	      }

	      return scope.$watch(function expressionInputsWatch(scope) {
	        var changed = false;

	        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	          var newInputValue = inputExpressions[i](scope);
	          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
	            oldInputValues[i] = newInputValue;
	            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
	          }
	        }

	        if (changed) {
	          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
	        }

	        return lastResult;
	      }, listener, objectEquality, prettyPrintExpression);
	    }

	    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
	      var unwatch, lastValue;
	      if (parsedExpression.inputs) {
	        unwatch = inputsWatchDelegate(scope, oneTimeListener, objectEquality, parsedExpression, prettyPrintExpression);
	      } else {
	        unwatch = scope.$watch(oneTimeWatch, oneTimeListener, objectEquality);
	      }
	      return unwatch;

	      function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }
	      function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener(value, old, scope);
	        }
	        if (isDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isDefined(lastValue)) {
	              unwatch();
	            }
	          });
	        }
	      }
	    }

	    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener(value, old, scope);
	        }
	        if (isAllDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isAllDefined(lastValue)) unwatch();
	          });
	        }
	      }, objectEquality);

	      return unwatch;

	      function isAllDefined(value) {
	        var allDefined = true;
	        forEach(value, function(val) {
	          if (!isDefined(val)) allDefined = false;
	        });
	        return allDefined;
	      }
	    }

	    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch = scope.$watch(function constantWatch(scope) {
	        unwatch();
	        return parsedExpression(scope);
	      }, listener, objectEquality);
	      return unwatch;
	    }

	    function addInterceptor(parsedExpression, interceptorFn) {
	      if (!interceptorFn) return parsedExpression;
	      var watchDelegate = parsedExpression.$$watchDelegate;
	      var useInputs = false;

	      var regularWatch =
	          watchDelegate !== oneTimeLiteralWatchDelegate &&
	          watchDelegate !== oneTimeWatchDelegate;

	      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
	        var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
	        return interceptorFn(value, scope, locals);
	      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
	        var value = parsedExpression(scope, locals, assign, inputs);
	        var result = interceptorFn(value, scope, locals);
	        // we only return the interceptor's result if the
	        // initial value is defined (for bind-once)
	        return isDefined(value) ? result : value;
	      };

	      // Propagate $$watchDelegates other then inputsWatchDelegate
	      useInputs = !parsedExpression.inputs;
	      if (parsedExpression.$$watchDelegate &&
	          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
	        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
	        fn.inputs = parsedExpression.inputs;
	      } else if (!interceptorFn.$stateful) {
	        // If there is an interceptor, but no watchDelegate then treat the interceptor like
	        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
	        fn.$$watchDelegate = inputsWatchDelegate;
	        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
	      }

	      return fn;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $q
	 * @requires $rootScope
	 *
	 * @description
	 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
	 * when they are done processing.
	 *
	 * This is a [Promises/A+](https://promisesaplus.com/)-compliant implementation of promises/deferred
	 * objects inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
	 *
	 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
	 * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
	 *
	 * # $q constructor
	 *
	 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
	 * function as the first argument. This is similar to the native Promise implementation from ES6,
	 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
	 *
	 * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
	 * available yet.
	 *
	 * It can be used like so:
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
	 * ```
	 *
	 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
	 *
	 * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
	 *
	 * However, the more traditional CommonJS-style usage is still available, and documented below.
	 *
	 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
	 * interface for interacting with an object that represents the result of an action that is
	 * performed asynchronously, and may or may not be finished at any given point in time.
	 *
	 * From the perspective of dealing with error handling, deferred and promise APIs are to
	 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
	 * ```
	 *
	 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
	 * comes in the way of guarantees that promise and deferred APIs make, see
	 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
	 *
	 * Additionally the promise api allows for composition that is very hard to do with the
	 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
	 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
	 * section on serial or parallel joining of promises.
	 *
	 * # The Deferred API
	 *
	 * A new instance of deferred is constructed by calling `$q.defer()`.
	 *
	 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
	 * that can be used for signaling the successful or unsuccessful completion, as well as the status
	 * of the task.
	 *
	 * **Methods**
	 *
	 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
	 *   constructed via `$q.reject`, the promise will be rejected instead.
	 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
	 *   resolving it with a rejection constructed via `$q.reject`.
	 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
	 *   multiple times before the promise is either resolved or rejected.
	 *
	 * **Properties**
	 *
	 * - promise – `{Promise}` – promise object associated with this deferred.
	 *
	 *
	 * # The Promise API
	 *
	 * A new promise instance is created when a deferred instance is created and can be retrieved by
	 * calling `deferred.promise`.
	 *
	 * The purpose of the promise object is to allow for interested parties to get access to the result
	 * of the deferred task when it completes.
	 *
	 * **Methods**
	 *
	 * - `then(successCallback, [errorCallback], [notifyCallback])` – regardless of when the promise was or
	 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
	 *   as soon as the result is available. The callbacks are called with a single argument: the result
	 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
	 *   provide a progress indication, before the promise is resolved or rejected.
	 *
	 *   This method *returns a new promise* which is resolved or rejected via the return value of the
	 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
	 *   with the value which is resolved in that promise using
	 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
	 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
	 *   resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback
	 *   arguments are optional.
	 *
	 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
	 *
	 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
	 *   but to do so without modifying the final value. This is useful to release resources or do some
	 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
	 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
	 *   more information.
	 *
	 * # Chaining promises
	 *
	 * Because calling the `then` method of a promise returns a new derived promise, it is easily
	 * possible to create a chain of promises:
	 *
	 * ```js
	 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
	 *
	 *   // promiseB will be resolved immediately after promiseA is resolved and its value
	 *   // will be the result of promiseA incremented by 1
	 * ```
	 *
	 * It is possible to create chains of any length and since a promise can be resolved with another
	 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
	 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
	 * $http's response interceptors.
	 *
	 *
	 * # Differences between Kris Kowal's Q and $q
	 *
	 *  There are two main differences:
	 *
	 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
	 *   mechanism in angular, which means faster propagation of resolution or rejection into your
	 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
	 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
	 *   all the important functionality needed for common async tasks.
	 *
	 * # Testing
	 *
	 *  ```js
	 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
	 *  ```
	 *
	 * @param {function(function, function)} resolver Function which is responsible for resolving or
	 *   rejecting the newly created promise. The first parameter is a function which resolves the
	 *   promise, the second parameter is a function which rejects the promise.
	 *
	 * @returns {Promise} The newly created promise.
	 */
	/**
	 * @ngdoc provider
	 * @name $qProvider
	 * @this
	 *
	 * @description
	 */
	function $QProvider() {
	  var errorOnUnhandledRejections = true;
	  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $rootScope.$evalAsync(callback);
	    }, $exceptionHandler, errorOnUnhandledRejections);
	  }];

	  /**
	   * @ngdoc method
	   * @name $qProvider#errorOnUnhandledRejections
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides whether to generate an error when a rejected promise is not handled.
	   *
	   * @param {boolean=} value Whether to generate an error when a rejected promise is not handled.
	   * @returns {boolean|ng.$qProvider} Current value when called without a new value or self for
	   *    chaining otherwise.
	   */
	  this.errorOnUnhandledRejections = function(value) {
	    if (isDefined(value)) {
	      errorOnUnhandledRejections = value;
	      return this;
	    } else {
	      return errorOnUnhandledRejections;
	    }
	  };
	}

	/** @this */
	function $$QProvider() {
	  var errorOnUnhandledRejections = true;
	  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $browser.defer(callback);
	    }, $exceptionHandler, errorOnUnhandledRejections);
	  }];

	  this.errorOnUnhandledRejections = function(value) {
	    if (isDefined(value)) {
	      errorOnUnhandledRejections = value;
	      return this;
	    } else {
	      return errorOnUnhandledRejections;
	    }
	  };
	}

	/**
	 * Constructs a promise manager.
	 *
	 * @param {function(function)} nextTick Function for executing functions in the next turn.
	 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
	 *     debugging purposes.
	 @ param {=boolean} errorOnUnhandledRejections Whether an error should be generated on unhandled
	 *     promises rejections.
	 * @returns {object} Promise manager.
	 */
	function qFactory(nextTick, exceptionHandler, errorOnUnhandledRejections) {
	  var $qMinErr = minErr('$q', TypeError);
	  var queueSize = 0;
	  var checkQueue = [];

	  /**
	   * @ngdoc method
	   * @name ng.$q#defer
	   * @kind function
	   *
	   * @description
	   * Creates a `Deferred` object which represents a task which will finish in the future.
	   *
	   * @returns {Deferred} Returns a new instance of deferred.
	   */
	  function defer() {
	    return new Deferred();
	  }

	  function Deferred() {
	    var promise = this.promise = new Promise();
	    //Non prototype methods necessary to support unbound execution :/
	    this.resolve = function(val) { resolvePromise(promise, val); };
	    this.reject = function(reason) { rejectPromise(promise, reason); };
	    this.notify = function(progress) { notifyPromise(promise, progress); };
	  }


	  function Promise() {
	    this.$$state = { status: 0 };
	  }

	  extend(Promise.prototype, {
	    then: function(onFulfilled, onRejected, progressBack) {
	      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
	        return this;
	      }
	      var result = new Promise();

	      this.$$state.pending = this.$$state.pending || [];
	      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
	      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

	      return result;
	    },

	    'catch': function(callback) {
	      return this.then(null, callback);
	    },

	    'finally': function(callback, progressBack) {
	      return this.then(function(value) {
	        return handleCallback(value, resolve, callback);
	      }, function(error) {
	        return handleCallback(error, reject, callback);
	      }, progressBack);
	    }
	  });

	  function processQueue(state) {
	    var fn, promise, pending;

	    pending = state.pending;
	    state.processScheduled = false;
	    state.pending = undefined;
	    try {
	      for (var i = 0, ii = pending.length; i < ii; ++i) {
	        state.pur = true;
	        promise = pending[i][0];
	        fn = pending[i][state.status];
	        try {
	          if (isFunction(fn)) {
	            resolvePromise(promise, fn(state.value));
	          } else if (state.status === 1) {
	            resolvePromise(promise, state.value);
	          } else {
	            rejectPromise(promise, state.value);
	          }
	        } catch (e) {
	          rejectPromise(promise, e);
	        }
	      }
	    } finally {
	      --queueSize;
	      if (errorOnUnhandledRejections && queueSize === 0) {
	        nextTick(processChecks);
	      }
	    }
	  }

	  function processChecks() {
	    // eslint-disable-next-line no-unmodified-loop-condition
	    while (!queueSize && checkQueue.length) {
	      var toCheck = checkQueue.shift();
	      if (!toCheck.pur) {
	        toCheck.pur = true;
	        var errorMessage = 'Possibly unhandled rejection: ' + toDebugString(toCheck.value);
	        exceptionHandler(errorMessage);
	      }
	    }
	  }

	  function scheduleProcessQueue(state) {
	    if (errorOnUnhandledRejections && !state.pending && state.status === 2 && !state.pur) {
	      if (queueSize === 0 && checkQueue.length === 0) {
	        nextTick(processChecks);
	      }
	      checkQueue.push(state);
	    }
	    if (state.processScheduled || !state.pending) return;
	    state.processScheduled = true;
	    ++queueSize;
	    nextTick(function() { processQueue(state); });
	  }

	  function resolvePromise(promise, val) {
	    if (promise.$$state.status) return;
	    if (val === promise) {
	      $$reject(promise, $qMinErr(
	        'qcycle',
	        'Expected promise to be resolved with value other than itself \'{0}\'',
	        val));
	    } else {
	      $$resolve(promise, val);
	    }

	  }

	  function $$resolve(promise, val) {
	    var then;
	    var done = false;
	    try {
	      if (isObject(val) || isFunction(val)) then = val.then;
	      if (isFunction(then)) {
	        promise.$$state.status = -1;
	        then.call(val, doResolve, doReject, doNotify);
	      } else {
	        promise.$$state.value = val;
	        promise.$$state.status = 1;
	        scheduleProcessQueue(promise.$$state);
	      }
	    } catch (e) {
	      doReject(e);
	    }

	    function doResolve(val) {
	      if (done) return;
	      done = true;
	      $$resolve(promise, val);
	    }
	    function doReject(val) {
	      if (done) return;
	      done = true;
	      $$reject(promise, val);
	    }
	    function doNotify(progress) {
	      notifyPromise(promise, progress);
	    }
	  }

	  function rejectPromise(promise, reason) {
	    if (promise.$$state.status) return;
	    $$reject(promise, reason);
	  }

	  function $$reject(promise, reason) {
	    promise.$$state.value = reason;
	    promise.$$state.status = 2;
	    scheduleProcessQueue(promise.$$state);
	  }

	  function notifyPromise(promise, progress) {
	    var callbacks = promise.$$state.pending;

	    if ((promise.$$state.status <= 0) && callbacks && callbacks.length) {
	      nextTick(function() {
	        var callback, result;
	        for (var i = 0, ii = callbacks.length; i < ii; i++) {
	          result = callbacks[i][0];
	          callback = callbacks[i][3];
	          try {
	            notifyPromise(result, isFunction(callback) ? callback(progress) : progress);
	          } catch (e) {
	            exceptionHandler(e);
	          }
	        }
	      });
	    }
	  }

	  /**
	   * @ngdoc method
	   * @name $q#reject
	   * @kind function
	   *
	   * @description
	   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
	   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
	   * a promise chain, you don't need to worry about it.
	   *
	   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
	   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
	   * a promise error callback and you want to forward the error to the promise derived from the
	   * current promise, you have to "rethrow" the error by returning a rejection constructed via
	   * `reject`.
	   *
	   * ```js
	   *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
	   * ```
	   *
	   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
	   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
	   */
	  function reject(reason) {
	    var result = new Promise();
	    rejectPromise(result, reason);
	    return result;
	  }

	  function handleCallback(value, resolver, callback) {
	    var callbackOutput = null;
	    try {
	      if (isFunction(callback)) callbackOutput = callback();
	    } catch (e) {
	      return reject(e);
	    }
	    if (isPromiseLike(callbackOutput)) {
	      return callbackOutput.then(function() {
	        return resolver(value);
	      }, reject);
	    } else {
	      return resolver(value);
	    }
	  }

	  /**
	   * @ngdoc method
	   * @name $q#when
	   * @kind function
	   *
	   * @description
	   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
	   * This is useful when you are dealing with an object that might or might not be a promise, or if
	   * the promise comes from a source that can't be trusted.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */


	  function when(value, callback, errback, progressBack) {
	    var result = new Promise();
	    resolvePromise(result, value);
	    return result.then(callback, errback, progressBack);
	  }

	  /**
	   * @ngdoc method
	   * @name $q#resolve
	   * @kind function
	   *
	   * @description
	   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */
	  var resolve = when;

	  /**
	   * @ngdoc method
	   * @name $q#all
	   * @kind function
	   *
	   * @description
	   * Combines multiple promises into a single promise that is resolved when all of the input
	   * promises are resolved.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
	   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
	   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
	   *   with the same rejection value.
	   */

	  function all(promises) {
	    var result = new Promise(),
	        counter = 0,
	        results = isArray(promises) ? [] : {};

	    forEach(promises, function(promise, key) {
	      counter++;
	      when(promise).then(function(value) {
	        results[key] = value;
	        if (!(--counter)) resolvePromise(result, results);
	      }, function(reason) {
	        rejectPromise(result, reason);
	      });
	    });

	    if (counter === 0) {
	      resolvePromise(result, results);
	    }

	    return result;
	  }

	  /**
	   * @ngdoc method
	   * @name $q#race
	   * @kind function
	   *
	   * @description
	   * Returns a promise that resolves or rejects as soon as one of those promises
	   * resolves or rejects, with the value or reason from that promise.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} a promise that resolves or rejects as soon as one of the `promises`
	   * resolves or rejects, with the value or reason from that promise.
	   */

	  function race(promises) {
	    var deferred = defer();

	    forEach(promises, function(promise) {
	      when(promise).then(deferred.resolve, deferred.reject);
	    });

	    return deferred.promise;
	  }

	  function $Q(resolver) {
	    if (!isFunction(resolver)) {
	      throw $qMinErr('norslvr', 'Expected resolverFn, got \'{0}\'', resolver);
	    }

	    var promise = new Promise();

	    function resolveFn(value) {
	      resolvePromise(promise, value);
	    }

	    function rejectFn(reason) {
	      rejectPromise(promise, reason);
	    }

	    resolver(resolveFn, rejectFn);

	    return promise;
	  }

	  // Let's make the instanceof operator work for promises, so that
	  // `new $q(fn) instanceof $q` would evaluate to true.
	  $Q.prototype = Promise.prototype;

	  $Q.defer = defer;
	  $Q.reject = reject;
	  $Q.when = when;
	  $Q.resolve = resolve;
	  $Q.all = all;
	  $Q.race = race;

	  return $Q;
	}

	/** @this */
	function $$RAFProvider() { //rAF
	  this.$get = ['$window', '$timeout', function($window, $timeout) {
	    var requestAnimationFrame = $window.requestAnimationFrame ||
	                                $window.webkitRequestAnimationFrame;

	    var cancelAnimationFrame = $window.cancelAnimationFrame ||
	                               $window.webkitCancelAnimationFrame ||
	                               $window.webkitCancelRequestAnimationFrame;

	    var rafSupported = !!requestAnimationFrame;
	    var raf = rafSupported
	      ? function(fn) {
	          var id = requestAnimationFrame(fn);
	          return function() {
	            cancelAnimationFrame(id);
	          };
	        }
	      : function(fn) {
	          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
	          return function() {
	            $timeout.cancel(timer);
	          };
	        };

	    raf.supported = rafSupported;

	    return raf;
	  }];
	}

	/**
	 * DESIGN NOTES
	 *
	 * The design decisions behind the scope are heavily favored for speed and memory consumption.
	 *
	 * The typical use of scope is to watch the expressions, which most of the time return the same
	 * value as last time so we optimize the operation.
	 *
	 * Closures construction is expensive in terms of speed as well as memory:
	 *   - No closures, instead use prototypical inheritance for API
	 *   - Internal state needs to be stored on scope directly, which means that private state is
	 *     exposed as $$____ properties
	 *
	 * Loop operations are optimized by using while(count--) { ... }
	 *   - This means that in order to keep the same order of execution as addition we have to add
	 *     items to the array at the beginning (unshift) instead of at the end (push)
	 *
	 * Child scopes are created and removed often
	 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
	 *
	 * There are fewer watches than observers. This is why you don't want the observer to be implemented
	 * in the same way as watch. Watch requires return of the initialization function which is expensive
	 * to construct.
	 */


	/**
	 * @ngdoc provider
	 * @name $rootScopeProvider
	 * @description
	 *
	 * Provider for the $rootScope service.
	 */

	/**
	 * @ngdoc method
	 * @name $rootScopeProvider#digestTtl
	 * @description
	 *
	 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
	 * assuming that the model is unstable.
	 *
	 * The current default is 10 iterations.
	 *
	 * In complex applications it's possible that the dependencies between `$watch`s will result in
	 * several digest iterations. However if an application needs more than the default 10 digest
	 * iterations for its model to stabilize then you should investigate what is causing the model to
	 * continuously change during the digest.
	 *
	 * Increasing the TTL could have performance implications, so you should not change it without
	 * proper justification.
	 *
	 * @param {number} limit The number of digest iterations.
	 */


	/**
	 * @ngdoc service
	 * @name $rootScope
	 * @this
	 *
	 * @description
	 *
	 * Every application has a single root {@link ng.$rootScope.Scope scope}.
	 * All other scopes are descendant scopes of the root scope. Scopes provide separation
	 * between the model and the view, via a mechanism for watching the model for changes.
	 * They also provide event emission/broadcast and subscription facility. See the
	 * {@link guide/scope developer guide on scopes}.
	 */
	function $RootScopeProvider() {
	  var TTL = 10;
	  var $rootScopeMinErr = minErr('$rootScope');
	  var lastDirtyWatch = null;
	  var applyAsyncId = null;

	  this.digestTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	    }
	    return TTL;
	  };

	  function createChildScopeClass(parent) {
	    function ChildScope() {
	      this.$$watchers = this.$$nextSibling =
	          this.$$childHead = this.$$childTail = null;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$id = nextUid();
	      this.$$ChildScope = null;
	    }
	    ChildScope.prototype = parent;
	    return ChildScope;
	  }

	  this.$get = ['$exceptionHandler', '$parse', '$browser',
	      function($exceptionHandler, $parse, $browser) {

	    function destroyChildScope($event) {
	        $event.currentScope.$$destroyed = true;
	    }

	    function cleanUpScope($scope) {

	      // Support: IE 9 only
	      if (msie === 9) {
	        // There is a memory leak in IE9 if all child scopes are not disconnected
	        // completely when a scope is destroyed. So this code will recurse up through
	        // all this scopes children
	        //
	        // See issue https://github.com/angular/angular.js/issues/10706
	        if ($scope.$$childHead) {
	          cleanUpScope($scope.$$childHead);
	        }
	        if ($scope.$$nextSibling) {
	          cleanUpScope($scope.$$nextSibling);
	        }
	      }

	      // The code below works around IE9 and V8's memory leaks
	      //
	      // See:
	      // - https://code.google.com/p/v8/issues/detail?id=2073#c26
	      // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
	      // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

	      $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead =
	          $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
	    }

	    /**
	     * @ngdoc type
	     * @name $rootScope.Scope
	     *
	     * @description
	     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
	     * {@link auto.$injector $injector}. Child scopes are created using the
	     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
	     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
	     * an in-depth introduction and usage examples.
	     *
	     *
	     * # Inheritance
	     * A scope can inherit from a parent scope, as in this example:
	     * ```js
	         var parent = $rootScope;
	         var child = parent.$new();

	         parent.salutation = "Hello";
	         expect(child.salutation).toEqual('Hello');

	         child.salutation = "Welcome";
	         expect(child.salutation).toEqual('Welcome');
	         expect(parent.salutation).toEqual('Hello');
	     * ```
	     *
	     * When interacting with `Scope` in tests, additional helper methods are available on the
	     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
	     * details.
	     *
	     *
	     * @param {Object.<string, function()>=} providers Map of service factory which need to be
	     *                                       provided for the current scope. Defaults to {@link ng}.
	     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
	     *                              append/override services provided by `providers`. This is handy
	     *                              when unit-testing and having the need to override a default
	     *                              service.
	     * @returns {Object} Newly created scope.
	     *
	     */
	    function Scope() {
	      this.$id = nextUid();
	      this.$$phase = this.$parent = this.$$watchers =
	                     this.$$nextSibling = this.$$prevSibling =
	                     this.$$childHead = this.$$childTail = null;
	      this.$root = this;
	      this.$$destroyed = false;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$$isolateBindings = null;
	    }

	    /**
	     * @ngdoc property
	     * @name $rootScope.Scope#$id
	     *
	     * @description
	     * Unique scope ID (monotonically increasing) useful for debugging.
	     */

	     /**
	      * @ngdoc property
	      * @name $rootScope.Scope#$parent
	      *
	      * @description
	      * Reference to the parent scope.
	      */

	      /**
	       * @ngdoc property
	       * @name $rootScope.Scope#$root
	       *
	       * @description
	       * Reference to the root scope.
	       */

	    Scope.prototype = {
	      constructor: Scope,
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$new
	       * @kind function
	       *
	       * @description
	       * Creates a new child {@link ng.$rootScope.Scope scope}.
	       *
	       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
	       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
	       *
	       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
	       * desired for the scope and its child scopes to be permanently detached from the parent and
	       * thus stop participating in model change detection and listener notification by invoking.
	       *
	       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
	       *         parent scope. The scope is isolated, as it can not see parent scope properties.
	       *         When creating widgets, it is useful for the widget to not accidentally read parent
	       *         state.
	       *
	       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
	       *                              of the newly created scope. Defaults to `this` scope if not provided.
	       *                              This is used when creating a transclude scope to correctly place it
	       *                              in the scope hierarchy while maintaining the correct prototypical
	       *                              inheritance.
	       *
	       * @returns {Object} The newly created child scope.
	       *
	       */
	      $new: function(isolate, parent) {
	        var child;

	        parent = parent || this;

	        if (isolate) {
	          child = new Scope();
	          child.$root = this.$root;
	        } else {
	          // Only create a child scope class if somebody asks for one,
	          // but cache it to allow the VM to optimize lookups.
	          if (!this.$$ChildScope) {
	            this.$$ChildScope = createChildScopeClass(this);
	          }
	          child = new this.$$ChildScope();
	        }
	        child.$parent = parent;
	        child.$$prevSibling = parent.$$childTail;
	        if (parent.$$childHead) {
	          parent.$$childTail.$$nextSibling = child;
	          parent.$$childTail = child;
	        } else {
	          parent.$$childHead = parent.$$childTail = child;
	        }

	        // When the new scope is not isolated or we inherit from `this`, and
	        // the parent scope is destroyed, the property `$$destroyed` is inherited
	        // prototypically. In all other cases, this property needs to be set
	        // when the parent scope is destroyed.
	        // The listener needs to be added after the parent is set
	        if (isolate || parent !== this) child.$on('$destroy', destroyChildScope);

	        return child;
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watch
	       * @kind function
	       *
	       * @description
	       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
	       *
	       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
	       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
	       *   its value when executed multiple times with the same input because it may be executed multiple
	       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
	       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).)
	       * - The `listener` is called only when the value from the current `watchExpression` and the
	       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
	       *   see below). Inequality is determined according to reference inequality,
	       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
	       *    via the `!==` Javascript operator, unless `objectEquality == true`
	       *   (see next point)
	       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
	       *   according to the {@link angular.equals} function. To save the value of the object for
	       *   later comparison, the {@link angular.copy} function is used. This therefore means that
	       *   watching complex objects will have adverse memory and performance implications.
	       * - This should not be used to watch for changes in objects that are
	       *   or contain [File](https://developer.mozilla.org/docs/Web/API/File) objects due to limitations with {@link angular.copy `angular.copy`}.
	       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
	       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
	       *   iteration limit is 10 to prevent an infinite loop deadlock.
	       *
	       *
	       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
	       * you can register a `watchExpression` function with no `listener`. (Be prepared for
	       * multiple calls to your `watchExpression` because it will execute multiple times in a
	       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
	       *
	       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
	       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
	       * watcher. In rare cases, this is undesirable because the listener is called when the result
	       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
	       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
	       * listener was called due to initialization.
	       *
	       *
	       *
	       * # Example
	       * ```js
	           // let's assume that scope was dependency injected as the $rootScope
	           var scope = $rootScope;
	           scope.name = 'misko';
	           scope.counter = 0;

	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);

	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);

	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);

	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);



	           // Using a function as a watchExpression
	           var food;
	           scope.foodCounter = 0;
	           expect(scope.foodCounter).toEqual(0);
	           scope.$watch(
	             // This function returns the value being watched. It is called for each turn of the $digest loop
	             function() { return food; },
	             // This is the change listener, called when the value returned from the above function changes
	             function(newValue, oldValue) {
	               if ( newValue !== oldValue ) {
	                 // Only increment the counter if the value changed
	                 scope.foodCounter = scope.foodCounter + 1;
	               }
	             }
	           );
	           // No digest has been run so the counter will be zero
	           expect(scope.foodCounter).toEqual(0);

	           // Run the digest but since food has not changed count will still be zero
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(0);

	           // Update food and run digest.  Now the counter will increment
	           food = 'cheeseburger';
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(1);

	       * ```
	       *
	       *
	       *
	       * @param {(function()|string)} watchExpression Expression that is evaluated on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
	       *    a call to the `listener`.
	       *
	       *    - `string`: Evaluated as {@link guide/expression expression}
	       *    - `function(scope)`: called with current `scope` as a parameter.
	       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
	       *    of `watchExpression` changes.
	       *
	       *    - `newVal` contains the current value of the `watchExpression`
	       *    - `oldVal` contains the previous value of the `watchExpression`
	       *    - `scope` refers to the current scope
	       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
	       *     comparing for reference equality.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
	        var get = $parse(watchExp);

	        if (get.$$watchDelegate) {
	          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
	        }
	        var scope = this,
	            array = scope.$$watchers,
	            watcher = {
	              fn: listener,
	              last: initWatchVal,
	              get: get,
	              exp: prettyPrintExpression || watchExp,
	              eq: !!objectEquality
	            };

	        lastDirtyWatch = null;

	        if (!isFunction(listener)) {
	          watcher.fn = noop;
	        }

	        if (!array) {
	          array = scope.$$watchers = [];
	        }
	        // we use unshift since we use a while loop in $digest for speed.
	        // the while loop reads in reverse order.
	        array.unshift(watcher);
	        incrementWatchersCount(this, 1);

	        return function deregisterWatch() {
	          if (arrayRemove(array, watcher) >= 0) {
	            incrementWatchersCount(scope, -1);
	          }
	          lastDirtyWatch = null;
	        };
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchGroup
	       * @kind function
	       *
	       * @description
	       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
	       * If any one expression in the collection changes the `listener` is executed.
	       *
	       * - The items in the `watchExpressions` array are observed via the standard `$watch` operation. Their return
	       *   values are examined for changes on every call to `$digest`.
	       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
	       *
	       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
	       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
	       *
	       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
	       *    expression in `watchExpressions` changes
	       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    The `scope` refers to the current scope.
	       * @returns {function()} Returns a de-registration function for all listeners.
	       */
	      $watchGroup: function(watchExpressions, listener) {
	        var oldValues = new Array(watchExpressions.length);
	        var newValues = new Array(watchExpressions.length);
	        var deregisterFns = [];
	        var self = this;
	        var changeReactionScheduled = false;
	        var firstRun = true;

	        if (!watchExpressions.length) {
	          // No expressions means we call the listener ASAP
	          var shouldCall = true;
	          self.$evalAsync(function() {
	            if (shouldCall) listener(newValues, newValues, self);
	          });
	          return function deregisterWatchGroup() {
	            shouldCall = false;
	          };
	        }

	        if (watchExpressions.length === 1) {
	          // Special case size of one
	          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
	            newValues[0] = value;
	            oldValues[0] = oldValue;
	            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
	          });
	        }

	        forEach(watchExpressions, function(expr, i) {
	          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
	            newValues[i] = value;
	            oldValues[i] = oldValue;
	            if (!changeReactionScheduled) {
	              changeReactionScheduled = true;
	              self.$evalAsync(watchGroupAction);
	            }
	          });
	          deregisterFns.push(unwatchFn);
	        });

	        function watchGroupAction() {
	          changeReactionScheduled = false;

	          if (firstRun) {
	            firstRun = false;
	            listener(newValues, newValues, self);
	          } else {
	            listener(newValues, oldValues, self);
	          }
	        }

	        return function deregisterWatchGroup() {
	          while (deregisterFns.length) {
	            deregisterFns.shift()();
	          }
	        };
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchCollection
	       * @kind function
	       *
	       * @description
	       * Shallow watches the properties of an object and fires whenever any of the properties change
	       * (for arrays, this implies watching the array items; for object maps, this implies watching
	       * the properties). If a change is detected, the `listener` callback is fired.
	       *
	       * - The `obj` collection is observed via standard $watch operation and is examined on every
	       *   call to $digest() to see if any items have been added, removed, or moved.
	       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
	       *   adding, removing, and moving items belonging to an object or array.
	       *
	       *
	       * # Example
	       * ```js
	          $scope.names = ['igor', 'matias', 'misko', 'james'];
	          $scope.dataCount = 4;

	          $scope.$watchCollection('names', function(newNames, oldNames) {
	            $scope.dataCount = newNames.length;
	          });

	          expect($scope.dataCount).toEqual(4);
	          $scope.$digest();

	          //still at 4 ... no changes
	          expect($scope.dataCount).toEqual(4);

	          $scope.names.pop();
	          $scope.$digest();

	          //now there's been a change
	          expect($scope.dataCount).toEqual(3);
	       * ```
	       *
	       *
	       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
	       *    expression value should evaluate to an object or an array which is observed on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
	       *    collection will trigger a call to the `listener`.
	       *
	       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
	       *    when a change is detected.
	       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
	       *    - The `oldCollection` object is a copy of the former collection data.
	       *      Due to performance considerations, the`oldCollection` value is computed only if the
	       *      `listener` function declares two or more arguments.
	       *    - The `scope` argument refers to the current scope.
	       *
	       * @returns {function()} Returns a de-registration function for this listener. When the
	       *    de-registration function is executed, the internal watch operation is terminated.
	       */
	      $watchCollection: function(obj, listener) {
	        $watchCollectionInterceptor.$stateful = true;

	        var self = this;
	        // the current value, updated on each dirty-check run
	        var newValue;
	        // a shallow copy of the newValue from the last dirty-check run,
	        // updated to match newValue during dirty-check run
	        var oldValue;
	        // a shallow copy of the newValue from when the last change happened
	        var veryOldValue;
	        // only track veryOldValue if the listener is asking for it
	        var trackVeryOldValue = (listener.length > 1);
	        var changeDetected = 0;
	        var changeDetector = $parse(obj, $watchCollectionInterceptor);
	        var internalArray = [];
	        var internalObject = {};
	        var initRun = true;
	        var oldLength = 0;

	        function $watchCollectionInterceptor(_value) {
	          newValue = _value;
	          var newLength, key, bothNaN, newItem, oldItem;

	          // If the new value is undefined, then return undefined as the watch may be a one-time watch
	          if (isUndefined(newValue)) return;

	          if (!isObject(newValue)) { // if primitive
	            if (oldValue !== newValue) {
	              oldValue = newValue;
	              changeDetected++;
	            }
	          } else if (isArrayLike(newValue)) {
	            if (oldValue !== internalArray) {
	              // we are transitioning from something which was not an array into array.
	              oldValue = internalArray;
	              oldLength = oldValue.length = 0;
	              changeDetected++;
	            }

	            newLength = newValue.length;

	            if (oldLength !== newLength) {
	              // if lengths do not match we need to trigger change notification
	              changeDetected++;
	              oldValue.length = oldLength = newLength;
	            }
	            // copy the items to oldValue and look for changes.
	            for (var i = 0; i < newLength; i++) {
	              oldItem = oldValue[i];
	              newItem = newValue[i];

	              // eslint-disable-next-line no-self-compare
	              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	              if (!bothNaN && (oldItem !== newItem)) {
	                changeDetected++;
	                oldValue[i] = newItem;
	              }
	            }
	          } else {
	            if (oldValue !== internalObject) {
	              // we are transitioning from something which was not an object into object.
	              oldValue = internalObject = {};
	              oldLength = 0;
	              changeDetected++;
	            }
	            // copy the items to oldValue and look for changes.
	            newLength = 0;
	            for (key in newValue) {
	              if (hasOwnProperty.call(newValue, key)) {
	                newLength++;
	                newItem = newValue[key];
	                oldItem = oldValue[key];

	                if (key in oldValue) {
	                  // eslint-disable-next-line no-self-compare
	                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	                  if (!bothNaN && (oldItem !== newItem)) {
	                    changeDetected++;
	                    oldValue[key] = newItem;
	                  }
	                } else {
	                  oldLength++;
	                  oldValue[key] = newItem;
	                  changeDetected++;
	                }
	              }
	            }
	            if (oldLength > newLength) {
	              // we used to have more keys, need to find them and destroy them.
	              changeDetected++;
	              for (key in oldValue) {
	                if (!hasOwnProperty.call(newValue, key)) {
	                  oldLength--;
	                  delete oldValue[key];
	                }
	              }
	            }
	          }
	          return changeDetected;
	        }

	        function $watchCollectionAction() {
	          if (initRun) {
	            initRun = false;
	            listener(newValue, newValue, self);
	          } else {
	            listener(newValue, veryOldValue, self);
	          }

	          // make a copy for the next time a collection is changed
	          if (trackVeryOldValue) {
	            if (!isObject(newValue)) {
	              //primitive
	              veryOldValue = newValue;
	            } else if (isArrayLike(newValue)) {
	              veryOldValue = new Array(newValue.length);
	              for (var i = 0; i < newValue.length; i++) {
	                veryOldValue[i] = newValue[i];
	              }
	            } else { // if object
	              veryOldValue = {};
	              for (var key in newValue) {
	                if (hasOwnProperty.call(newValue, key)) {
	                  veryOldValue[key] = newValue[key];
	                }
	              }
	            }
	          }
	        }

	        return this.$watch(changeDetector, $watchCollectionAction);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$digest
	       * @kind function
	       *
	       * @description
	       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
	       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
	       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
	       * until no more listeners are firing. This means that it is possible to get into an infinite
	       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
	       * iterations exceeds 10.
	       *
	       * Usually, you don't call `$digest()` directly in
	       * {@link ng.directive:ngController controllers} or in
	       * {@link ng.$compileProvider#directive directives}.
	       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
	       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
	       *
	       * If you want to be notified whenever `$digest()` is called,
	       * you can register a `watchExpression` function with
	       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
	       *
	       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
	       *
	       * # Example
	       * ```js
	           var scope = ...;
	           scope.name = 'misko';
	           scope.counter = 0;

	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);

	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);

	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);

	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	       * ```
	       *
	       */
	      $digest: function() {
	        var watch, value, last, fn, get,
	            watchers,
	            length,
	            dirty, ttl = TTL,
	            next, current, target = this,
	            watchLog = [],
	            logIdx, asyncTask;

	        beginPhase('$digest');
	        // Check for changes to browser url that happened in sync before the call to $digest
	        $browser.$$checkUrlChange();

	        if (this === $rootScope && applyAsyncId !== null) {
	          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
	          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
	          $browser.defer.cancel(applyAsyncId);
	          flushApplyAsync();
	        }

	        lastDirtyWatch = null;

	        do { // "while dirty" loop
	          dirty = false;
	          current = target;

	          // It's safe for asyncQueuePosition to be a local variable here because this loop can't
	          // be reentered recursively. Calling $digest from a function passed to $applyAsync would
	          // lead to a '$digest already in progress' error.
	          for (var asyncQueuePosition = 0; asyncQueuePosition < asyncQueue.length; asyncQueuePosition++) {
	            try {
	              asyncTask = asyncQueue[asyncQueuePosition];
	              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	            lastDirtyWatch = null;
	          }
	          asyncQueue.length = 0;

	          traverseScopesLoop:
	          do { // "traverse the scopes" loop
	            if ((watchers = current.$$watchers)) {
	              // process our watches
	              length = watchers.length;
	              while (length--) {
	                try {
	                  watch = watchers[length];
	                  // Most common watches are on primitives, in which case we can short
	                  // circuit it with === operator, only when === fails do we use .equals
	                  if (watch) {
	                    get = watch.get;
	                    if ((value = get(current)) !== (last = watch.last) &&
	                        !(watch.eq
	                            ? equals(value, last)
	                            : (isNumberNaN(value) && isNumberNaN(last)))) {
	                      dirty = true;
	                      lastDirtyWatch = watch;
	                      watch.last = watch.eq ? copy(value, null) : value;
	                      fn = watch.fn;
	                      fn(value, ((last === initWatchVal) ? value : last), current);
	                      if (ttl < 5) {
	                        logIdx = 4 - ttl;
	                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
	                        watchLog[logIdx].push({
	                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
	                          newVal: value,
	                          oldVal: last
	                        });
	                      }
	                    } else if (watch === lastDirtyWatch) {
	                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
	                      // have already been tested.
	                      dirty = false;
	                      break traverseScopesLoop;
	                    }
	                  }
	                } catch (e) {
	                  $exceptionHandler(e);
	                }
	              }
	            }

	            // Insanity Warning: scope depth-first traversal
	            // yes, this code is a bit crazy, but it works and we have tests to prove it!
	            // this piece should be kept in sync with the traversal in $broadcast
	            if (!(next = ((current.$$watchersCount && current.$$childHead) ||
	                (current !== target && current.$$nextSibling)))) {
	              while (current !== target && !(next = current.$$nextSibling)) {
	                current = current.$parent;
	              }
	            }
	          } while ((current = next));

	          // `break traverseScopesLoop;` takes us to here

	          if ((dirty || asyncQueue.length) && !(ttl--)) {
	            clearPhase();
	            throw $rootScopeMinErr('infdig',
	                '{0} $digest() iterations reached. Aborting!\n' +
	                'Watchers fired in the last 5 iterations: {1}',
	                TTL, watchLog);
	          }

	        } while (dirty || asyncQueue.length);

	        clearPhase();

	        // postDigestQueuePosition isn't local here because this loop can be reentered recursively.
	        while (postDigestQueuePosition < postDigestQueue.length) {
	          try {
	            postDigestQueue[postDigestQueuePosition++]();
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        }
	        postDigestQueue.length = postDigestQueuePosition = 0;
	      },


	      /**
	       * @ngdoc event
	       * @name $rootScope.Scope#$destroy
	       * @eventType broadcast on scope being destroyed
	       *
	       * @description
	       * Broadcasted when a scope and its children are being destroyed.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$destroy
	       * @kind function
	       *
	       * @description
	       * Removes the current scope (and all of its children) from the parent scope. Removal implies
	       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
	       * propagate to the current scope and its children. Removal also implies that the current
	       * scope is eligible for garbage collection.
	       *
	       * The `$destroy()` is usually used by directives such as
	       * {@link ng.directive:ngRepeat ngRepeat} for managing the
	       * unrolling of the loop.
	       *
	       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
	       * Application code can register a `$destroy` event handler that will give it a chance to
	       * perform any necessary cleanup.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
	      $destroy: function() {
	        // We can't destroy a scope that has been already destroyed.
	        if (this.$$destroyed) return;
	        var parent = this.$parent;

	        this.$broadcast('$destroy');
	        this.$$destroyed = true;

	        if (this === $rootScope) {
	          //Remove handlers attached to window when $rootScope is removed
	          $browser.$$applicationDestroyed();
	        }

	        incrementWatchersCount(this, -this.$$watchersCount);
	        for (var eventName in this.$$listenerCount) {
	          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
	        }

	        // sever all the references to parent scopes (after this cleanup, the current scope should
	        // not be retained by any of our references and should be eligible for garbage collection)
	        if (parent && parent.$$childHead === this) parent.$$childHead = this.$$nextSibling;
	        if (parent && parent.$$childTail === this) parent.$$childTail = this.$$prevSibling;
	        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
	        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

	        // Disable listeners, watchers and apply/digest methods
	        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
	        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
	        this.$$listeners = {};

	        // Disconnect the next sibling to prevent `cleanUpScope` destroying those too
	        this.$$nextSibling = null;
	        cleanUpScope(this);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$eval
	       * @kind function
	       *
	       * @description
	       * Executes the `expression` on the current scope and returns the result. Any exceptions in
	       * the expression are propagated (uncaught). This is useful when evaluating Angular
	       * expressions.
	       *
	       * # Example
	       * ```js
	           var scope = ng.$rootScope.Scope();
	           scope.a = 1;
	           scope.b = 2;

	           expect(scope.$eval('a+b')).toEqual(3);
	           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
	       * ```
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       * @returns {*} The result of evaluating the expression.
	       */
	      $eval: function(expr, locals) {
	        return $parse(expr)(this, locals);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$evalAsync
	       * @kind function
	       *
	       * @description
	       * Executes the expression on the current scope at a later point in time.
	       *
	       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
	       * that:
	       *
	       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
	       *     rendering).
	       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
	       *     `expression` execution.
	       *
	       * Any exceptions from the execution of the expression are forwarded to the
	       * {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
	       * will be scheduled. However, it is encouraged to always call code that changes the model
	       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       */
	      $evalAsync: function(expr, locals) {
	        // if we are outside of an $digest loop and this is the first time we are scheduling async
	        // task also schedule async auto-flush
	        if (!$rootScope.$$phase && !asyncQueue.length) {
	          $browser.defer(function() {
	            if (asyncQueue.length) {
	              $rootScope.$digest();
	            }
	          });
	        }

	        asyncQueue.push({scope: this, expression: $parse(expr), locals: locals});
	      },

	      $$postDigest: function(fn) {
	        postDigestQueue.push(fn);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$apply
	       * @kind function
	       *
	       * @description
	       * `$apply()` is used to execute an expression in angular from outside of the angular
	       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
	       * Because we are calling into the angular framework we need to perform proper scope life
	       * cycle of {@link ng.$exceptionHandler exception handling},
	       * {@link ng.$rootScope.Scope#$digest executing watches}.
	       *
	       * ## Life cycle
	       *
	       * # Pseudo-Code of `$apply()`
	       * ```js
	           function $apply(expr) {
	             try {
	               return $eval(expr);
	             } catch (e) {
	               $exceptionHandler(e);
	             } finally {
	               $root.$digest();
	             }
	           }
	       * ```
	       *
	       *
	       * Scope's `$apply()` method transitions through the following stages:
	       *
	       * 1. The {@link guide/expression expression} is executed using the
	       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
	       * 2. Any exceptions from the execution of the expression are forwarded to the
	       *    {@link ng.$exceptionHandler $exceptionHandler} service.
	       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
	       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
	       *
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       *
	       * @returns {*} The result of evaluating the expression.
	       */
	      $apply: function(expr) {
	        try {
	          beginPhase('$apply');
	          try {
	            return this.$eval(expr);
	          } finally {
	            clearPhase();
	          }
	        } catch (e) {
	          $exceptionHandler(e);
	        } finally {
	          try {
	            $rootScope.$digest();
	          } catch (e) {
	            $exceptionHandler(e);
	            // eslint-disable-next-line no-unsafe-finally
	            throw e;
	          }
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$applyAsync
	       * @kind function
	       *
	       * @description
	       * Schedule the invocation of $apply to occur at a later time. The actual time difference
	       * varies across browsers, but is typically around ~10 milliseconds.
	       *
	       * This can be used to queue up multiple expressions which need to be evaluated in the same
	       * digest.
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       */
	      $applyAsync: function(expr) {
	        var scope = this;
	        if (expr) {
	          applyAsyncQueue.push($applyAsyncExpression);
	        }
	        expr = $parse(expr);
	        scheduleApplyAsync();

	        function $applyAsyncExpression() {
	          scope.$eval(expr);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$on
	       * @kind function
	       *
	       * @description
	       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
	       * discussion of event life cycle.
	       *
	       * The event listener function format is: `function(event, args...)`. The `event` object
	       * passed into the listener has the following attributes:
	       *
	       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
	       *     `$broadcast`-ed.
	       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
	       *     event propagates through the scope hierarchy, this property is set to null.
	       *   - `name` - `{string}`: name of the event.
	       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
	       *     further event propagation (available only for events that were `$emit`-ed).
	       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
	       *     to true.
	       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
	       *
	       * @param {string} name Event name to listen on.
	       * @param {function(event, ...args)} listener Function to call when the event is emitted.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $on: function(name, listener) {
	        var namedListeners = this.$$listeners[name];
	        if (!namedListeners) {
	          this.$$listeners[name] = namedListeners = [];
	        }
	        namedListeners.push(listener);

	        var current = this;
	        do {
	          if (!current.$$listenerCount[name]) {
	            current.$$listenerCount[name] = 0;
	          }
	          current.$$listenerCount[name]++;
	        } while ((current = current.$parent));

	        var self = this;
	        return function() {
	          var indexOfListener = namedListeners.indexOf(listener);
	          if (indexOfListener !== -1) {
	            namedListeners[indexOfListener] = null;
	            decrementListenerCount(self, 1, name);
	          }
	        };
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$emit
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` upwards through the scope hierarchy notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$emit` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
	       * registered listeners along the way. The event will stop propagating if one of the listeners
	       * cancels it.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to emit.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
	       */
	      $emit: function(name, args) {
	        var empty = [],
	            namedListeners,
	            scope = this,
	            stopPropagation = false,
	            event = {
	              name: name,
	              targetScope: scope,
	              stopPropagation: function() {stopPropagation = true;},
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            },
	            listenerArgs = concat([event], arguments, 1),
	            i, length;

	        do {
	          namedListeners = scope.$$listeners[name] || empty;
	          event.currentScope = scope;
	          for (i = 0, length = namedListeners.length; i < length; i++) {

	            // if listeners were deregistered, defragment the array
	            if (!namedListeners[i]) {
	              namedListeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }
	            try {
	              //allow all listeners attached to the current scope to run
	              namedListeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          //if any listener on the current scope stops propagation, prevent bubbling
	          if (stopPropagation) {
	            event.currentScope = null;
	            return event;
	          }
	          //traverse upwards
	          scope = scope.$parent;
	        } while (scope);

	        event.currentScope = null;

	        return event;
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$broadcast
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$broadcast` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
	       * scope and calls all registered listeners along the way. The event cannot be canceled.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to broadcast.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
	       */
	      $broadcast: function(name, args) {
	        var target = this,
	            current = target,
	            next = target,
	            event = {
	              name: name,
	              targetScope: target,
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            };

	        if (!target.$$listenerCount[name]) return event;

	        var listenerArgs = concat([event], arguments, 1),
	            listeners, i, length;

	        //down while you can, then up and next sibling or up and next sibling until back at root
	        while ((current = next)) {
	          event.currentScope = current;
	          listeners = current.$$listeners[name] || [];
	          for (i = 0, length = listeners.length; i < length; i++) {
	            // if listeners were deregistered, defragment the array
	            if (!listeners[i]) {
	              listeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }

	            try {
	              listeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }

	          // Insanity Warning: scope depth-first traversal
	          // yes, this code is a bit crazy, but it works and we have tests to prove it!
	          // this piece should be kept in sync with the traversal in $digest
	          // (though it differs due to having the extra check for $$listenerCount)
	          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
	              (current !== target && current.$$nextSibling)))) {
	            while (current !== target && !(next = current.$$nextSibling)) {
	              current = current.$parent;
	            }
	          }
	        }

	        event.currentScope = null;
	        return event;
	      }
	    };

	    var $rootScope = new Scope();

	    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
	    var asyncQueue = $rootScope.$$asyncQueue = [];
	    var postDigestQueue = $rootScope.$$postDigestQueue = [];
	    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

	    var postDigestQueuePosition = 0;

	    return $rootScope;


	    function beginPhase(phase) {
	      if ($rootScope.$$phase) {
	        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
	      }

	      $rootScope.$$phase = phase;
	    }

	    function clearPhase() {
	      $rootScope.$$phase = null;
	    }

	    function incrementWatchersCount(current, count) {
	      do {
	        current.$$watchersCount += count;
	      } while ((current = current.$parent));
	    }

	    function decrementListenerCount(current, count, name) {
	      do {
	        current.$$listenerCount[name] -= count;

	        if (current.$$listenerCount[name] === 0) {
	          delete current.$$listenerCount[name];
	        }
	      } while ((current = current.$parent));
	    }

	    /**
	     * function used as an initial value for watchers.
	     * because it's unique we can easily tell it apart from other values
	     */
	    function initWatchVal() {}

	    function flushApplyAsync() {
	      while (applyAsyncQueue.length) {
	        try {
	          applyAsyncQueue.shift()();
	        } catch (e) {
	          $exceptionHandler(e);
	        }
	      }
	      applyAsyncId = null;
	    }

	    function scheduleApplyAsync() {
	      if (applyAsyncId === null) {
	        applyAsyncId = $browser.defer(function() {
	          $rootScope.$apply(flushApplyAsync);
	        });
	      }
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $rootElement
	 *
	 * @description
	 * The root element of Angular application. This is either the element where {@link
	 * ng.directive:ngApp ngApp} was declared or the element passed into
	 * {@link angular.bootstrap}. The element represents the root element of application. It is also the
	 * location where the application's {@link auto.$injector $injector} service gets
	 * published, and can be retrieved using `$rootElement.injector()`.
	 */


	// the implementation is in angular.bootstrap

	/**
	 * @this
	 * @description
	 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
	 */
	function $$SanitizeUriProvider() {
	  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
	    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      aHrefSanitizationWhitelist = regexp;
	      return this;
	    }
	    return aHrefSanitizationWhitelist;
	  };


	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      imgSrcSanitizationWhitelist = regexp;
	      return this;
	    }
	    return imgSrcSanitizationWhitelist;
	  };

	  this.$get = function() {
	    return function sanitizeUri(uri, isImage) {
	      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
	      var normalizedVal;
	      normalizedVal = urlResolve(uri).href;
	      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
	        return 'unsafe:' + normalizedVal;
	      }
	      return uri;
	    };
	  };
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/* exported $SceProvider, $SceDelegateProvider */

	var $sceMinErr = minErr('$sce');

	var SCE_CONTEXTS = {
	  HTML: 'html',
	  CSS: 'css',
	  URL: 'url',
	  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
	  // url.  (e.g. ng-include, script src, templateUrl)
	  RESOURCE_URL: 'resourceUrl',
	  JS: 'js'
	};

	// Helper functions follow.

	var UNDERSCORE_LOWERCASE_REGEXP = /_([a-z])/g;

	function snakeToCamel(name) {
	  return name
	    .replace(UNDERSCORE_LOWERCASE_REGEXP, fnCamelCaseReplace);
	}

	function adjustMatcher(matcher) {
	  if (matcher === 'self') {
	    return matcher;
	  } else if (isString(matcher)) {
	    // Strings match exactly except for 2 wildcards - '*' and '**'.
	    // '*' matches any character except those from the set ':/.?&'.
	    // '**' matches any character (like .* in a RegExp).
	    // More than 2 *'s raises an error as it's ill defined.
	    if (matcher.indexOf('***') > -1) {
	      throw $sceMinErr('iwcard',
	          'Illegal sequence *** in string matcher.  String: {0}', matcher);
	    }
	    matcher = escapeForRegexp(matcher).
	                  replace(/\\\*\\\*/g, '.*').
	                  replace(/\\\*/g, '[^:/.?&;]*');
	    return new RegExp('^' + matcher + '$');
	  } else if (isRegExp(matcher)) {
	    // The only other type of matcher allowed is a Regexp.
	    // Match entire URL / disallow partial matches.
	    // Flags are reset (i.e. no global, ignoreCase or multiline)
	    return new RegExp('^' + matcher.source + '$');
	  } else {
	    throw $sceMinErr('imatcher',
	        'Matchers may only be "self", string patterns or RegExp objects');
	  }
	}


	function adjustMatchers(matchers) {
	  var adjustedMatchers = [];
	  if (isDefined(matchers)) {
	    forEach(matchers, function(matcher) {
	      adjustedMatchers.push(adjustMatcher(matcher));
	    });
	  }
	  return adjustedMatchers;
	}


	/**
	 * @ngdoc service
	 * @name $sceDelegate
	 * @kind function
	 *
	 * @description
	 *
	 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
	 * Contextual Escaping (SCE)} services to AngularJS.
	 *
	 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
	 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
	 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
	 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
	 * work because `$sce` delegates to `$sceDelegate` for these operations.
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
	 *
	 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
	 * can override it completely to change the behavior of `$sce`, the common case would
	 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
	 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
	 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
	 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 */

	/**
	 * @ngdoc provider
	 * @name $sceDelegateProvider
	 * @this
	 *
	 * @description
	 *
	 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
	 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
	 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
	 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *
	 * For the general details about this service in Angular, read the main page for {@link ng.$sce
	 * Strict Contextual Escaping (SCE)}.
	 *
	 * **Example**:  Consider the following case. <a name="example"></a>
	 *
	 * - your app is hosted at url `http://myapp.example.com/`
	 * - but some of your templates are hosted on other domains you control such as
	 *   `http://srv01.assets.example.com/`, `http://srv02.assets.example.com/`, etc.
	 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
	 *
	 * Here is what a secure configuration for this scenario might look like:
	 *
	 * ```
	 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
	 * ```
	 */

	function $SceDelegateProvider() {
	  this.SCE_CONTEXTS = SCE_CONTEXTS;

	  // Resource URLs can also be trusted by policy.
	  var resourceUrlWhitelist = ['self'],
	      resourceUrlBlacklist = [];

	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlWhitelist
	   * @kind function
	   *
	   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** an empty whitelist array will block all URLs!
	   *    </div>
	   *
	   * @return {Array} the currently set whitelist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
	   * same origin resource requests.
	   *
	   * @description
	   * Sets/Gets the whitelist of trusted resource URLs.
	   */
	  this.resourceUrlWhitelist = function(value) {
	    if (arguments.length) {
	      resourceUrlWhitelist = adjustMatchers(value);
	    }
	    return resourceUrlWhitelist;
	  };

	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlBlacklist
	   * @kind function
	   *
	   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    The typical usage for the blacklist is to **block
	   *    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
	   *    these would otherwise be trusted but actually return content from the redirected domain.
	   *
	   *    Finally, **the blacklist overrides the whitelist** and has the final say.
	   *
	   * @return {Array} the currently set blacklist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
	   * is no blacklist.)
	   *
	   * @description
	   * Sets/Gets the blacklist of trusted resource URLs.
	   */

	  this.resourceUrlBlacklist = function(value) {
	    if (arguments.length) {
	      resourceUrlBlacklist = adjustMatchers(value);
	    }
	    return resourceUrlBlacklist;
	  };

	  this.$get = ['$injector', function($injector) {

	    var htmlSanitizer = function htmlSanitizer(html) {
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    };

	    if ($injector.has('$sanitize')) {
	      htmlSanitizer = $injector.get('$sanitize');
	    }


	    function matchUrl(matcher, parsedUrl) {
	      if (matcher === 'self') {
	        return urlIsSameOrigin(parsedUrl);
	      } else {
	        // definitely a regex.  See adjustMatchers()
	        return !!matcher.exec(parsedUrl.href);
	      }
	    }

	    function isResourceUrlAllowedByPolicy(url) {
	      var parsedUrl = urlResolve(url.toString());
	      var i, n, allowed = false;
	      // Ensure that at least one item from the whitelist allows this url.
	      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
	        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
	          allowed = true;
	          break;
	        }
	      }
	      if (allowed) {
	        // Ensure that no item from the blacklist blocked this url.
	        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
	          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
	            allowed = false;
	            break;
	          }
	        }
	      }
	      return allowed;
	    }

	    function generateHolderType(Base) {
	      var holderType = function TrustedValueHolderType(trustedValue) {
	        this.$$unwrapTrustedValue = function() {
	          return trustedValue;
	        };
	      };
	      if (Base) {
	        holderType.prototype = new Base();
	      }
	      holderType.prototype.valueOf = function sceValueOf() {
	        return this.$$unwrapTrustedValue();
	      };
	      holderType.prototype.toString = function sceToString() {
	        return this.$$unwrapTrustedValue().toString();
	      };
	      return holderType;
	    }

	    var trustedValueHolderBase = generateHolderType(),
	        byType = {};

	    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#trustAs
	     *
	     * @description
	     * Returns an object that is trusted by angular for use in specified strict
	     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
	     * attribute interpolation, any dom event binding attribute interpolation
	     * such as for onclick,  etc.) that uses the provided value.
	     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
	    function trustAs(type, trustedValue) {
	      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (!Constructor) {
	        throw $sceMinErr('icontext',
	            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
	            type, trustedValue);
	      }
	      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
	        return trustedValue;
	      }
	      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
	      // mutable objects, we ensure here that the value passed in is actually a string.
	      if (typeof trustedValue !== 'string') {
	        throw $sceMinErr('itype',
	            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
	            type);
	      }
	      return new Constructor(trustedValue);
	    }

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#valueOf
	     *
	     * @description
	     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
	     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
	     *
	     * If the passed parameter is not a value that had been returned by {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
	     *
	     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
	     *      call or anything else.
	     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
	     *     `value` unchanged.
	     */
	    function valueOf(maybeTrusted) {
	      if (maybeTrusted instanceof trustedValueHolderBase) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      } else {
	        return maybeTrusted;
	      }
	    }

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#getTrusted
	     *
	     * @description
	     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
	     * returns the originally supplied value if the queried context type is a supertype of the
	     * created type.  If this condition isn't satisfied, throws an exception.
	     *
	     * <div class="alert alert-danger">
	     * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting
	     * (XSS) vulnerability in your application.
	     * </div>
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} call.
	     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
	     */
	    function getTrusted(type, maybeTrusted) {
	      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
	        return maybeTrusted;
	      }
	      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (constructor && maybeTrusted instanceof constructor) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      }
	      // If we get here, then we may only take one of two actions.
	      // 1. sanitize the value for the requested type, or
	      // 2. throw an exception.
	      if (type === SCE_CONTEXTS.RESOURCE_URL) {
	        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
	          return maybeTrusted;
	        } else {
	          throw $sceMinErr('insecurl',
	              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
	              maybeTrusted.toString());
	        }
	      } else if (type === SCE_CONTEXTS.HTML) {
	        return htmlSanitizer(maybeTrusted);
	      }
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    }

	    return { trustAs: trustAs,
	             getTrusted: getTrusted,
	             valueOf: valueOf };
	  }];
	}


	/**
	 * @ngdoc provider
	 * @name $sceProvider
	 * @this
	 *
	 * @description
	 *
	 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
	 * -   enable/disable Strict Contextual Escaping (SCE) in a module
	 * -   override the default implementation with a custom delegate
	 *
	 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 */

	/**
	 * @ngdoc service
	 * @name $sce
	 * @kind function
	 *
	 * @description
	 *
	 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
	 *
	 * # Strict Contextual Escaping
	 *
	 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
	 * contexts to result in a value that is marked as safe to use for that context.  One example of
	 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
	 * to these contexts as privileged or SCE contexts.
	 *
	 * As of version 1.2, Angular ships with SCE enabled by default.
	 *
	 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
	 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
	 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
	 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
	 * to the top of your HTML document.
	 *
	 * SCE assists in writing code in a way that (a) is secure by default and (b) makes auditing for
	 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
	 *
	 * Here's an example of a binding in a privileged context:
	 *
	 * ```
	 * <input ng-model="userHtml" aria-label="User input">
	 * <div ng-bind-html="userHtml"></div>
	 * ```
	 *
	 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
	 * disabled, this application allows the user to render arbitrary HTML into the DIV.
	 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
	 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
	 * security vulnerabilities.)
	 *
	 * For the case of HTML, you might use a library, either on the client side, or on the server side,
	 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
	 *
	 * How would you ensure that every place that used these types of bindings was bound to a value that
	 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
	 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
	 * properties/fields and forgot to update the binding to the sanitized value?
	 *
	 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
	 * determine that something explicitly says it's safe to use a value for binding in that
	 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
	 * for those values that you can easily tell are safe - because they were received from your server,
	 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
	 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
	 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
	 *
	 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
	 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
	 * obtain values that will be accepted by SCE / privileged contexts.
	 *
	 *
	 * ## How does it work?
	 *
	 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
	 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
	 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
	 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
	 *
	 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
	 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
	 * simplified):
	 *
	 * ```
	 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
	 * ```
	 *
	 * ## Impact on loading templates
	 *
	 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
	 * `templateUrl`'s specified by {@link guide/directive directives}.
	 *
	 * By default, Angular only loads templates from the same domain and protocol as the application
	 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
	 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
	 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
	 *
	 * *Please note*:
	 * The browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy apply in addition to this and may further restrict whether the template is successfully
	 * loaded.  This means that without the right CORS policy, loading templates from a different domain
	 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
	 * browsers.
	 *
	 * ## This feels like too much overhead
	 *
	 * It's important to remember that SCE only applies to interpolation expressions.
	 *
	 * If your expressions are constant literals, they're automatically trusted and you don't need to
	 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
	 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
	 *
	 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
	 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
	 *
	 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
	 * templates in `ng-include` from your application's domain without having to even know about SCE.
	 * It blocks loading templates from other domains or loading templates over http from an https
	 * served document.  You can change these by setting your own custom {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
	 *
	 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
	 * application that's secure and can be audited to verify that with much more ease than bolting
	 * security onto an application later.
	 *
	 * <a name="contexts"></a>
	 * ## What trusted context types are supported?
	 *
	 * | Context             | Notes          |
	 * |---------------------|----------------|
	 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
	 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
	 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
	 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG`, `VIDEO`, `AUDIO`, `SOURCE`, and `TRACK` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
	 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
	 *
	 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
	 *
	 *  Each element in these arrays must be one of the following:
	 *
	 *  - **'self'**
	 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
	 *      domain** as the application document using the **same protocol**.
	 *  - **String** (except the special value `'self'`)
	 *    - The string is matched against the full *normalized / absolute URL* of the resource
	 *      being tested (substring matches are not good enough.)
	 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
	 *      match themselves.
	 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
	 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
	 *      in a whitelist.
	 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
	 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
	 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
	 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
	 *      http://foo.example.com/templates/**).
	 *  - **RegExp** (*see caveat below*)
	 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
	 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
	 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
	 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
	 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
	 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
	 *      is highly recommended to use the string patterns and only fall back to regular expressions
	 *      as a last resort.
	 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
	 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
	 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
	 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
	 *    - If you are generating your JavaScript from some other templating engine (not
	 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
	 *      remember to escape your regular expression (and be aware that you might need more than
	 *      one level of escaping depending on your templating engine and the way you interpolated
	 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
	 *      enough before coding your own.  E.g. Ruby has
	 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
	 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
	 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
	 *      Closure library's [goog.string.regExpEscape(s)](
	 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
	 *
	 * ## Show me an example using SCE.
	 *
	 * <example module="mySceApp" deps="angular-sanitize.js" name="sce-service">
	 * <file name="index.html">
	 *   <div ng-controller="AppController as myCtrl">
	 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
	 *     <b>User comments</b><br>
	 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
	 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
	 *     exploit.
	 *     <div class="well">
	 *       <div ng-repeat="userComment in myCtrl.userComments">
	 *         <b>{{userComment.name}}</b>:
	 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
	 *         <br>
	 *       </div>
	 *     </div>
	 *   </div>
	 * </file>
	 *
	 * <file name="script.js">
	 *   angular.module('mySceApp', ['ngSanitize'])
	 *     .controller('AppController', ['$http', '$templateCache', '$sce',
	 *       function AppController($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get('test_data.json', {cache: $templateCache}).then(function(response) {
	 *           self.userComments = response.data;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
	 * </file>
	 *
	 * <file name="test_data.json">
	 * [
	 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
	 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
	 * ]
	 * </file>
	 *
	 * <file name="protractor.js" type="protractor">
	 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getAttribute('innerHTML'))
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getAttribute('innerHTML')).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
	 * </file>
	 * </example>
	 *
	 *
	 *
	 * ## Can I disable SCE completely?
	 *
	 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
	 * for little coding overhead.  It will be much harder to take an SCE disabled application and
	 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
	 * for cases where you have a lot of existing code that was written before SCE was introduced and
	 * you're migrating them a module at a time.
	 *
	 * That said, here's how you can completely disable SCE:
	 *
	 * ```
	 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects.
	 *   $sceProvider.enabled(false);
	 * });
	 * ```
	 *
	 */

	function $SceProvider() {
	  var enabled = true;

	  /**
	   * @ngdoc method
	   * @name $sceProvider#enabled
	   * @kind function
	   *
	   * @param {boolean=} value If provided, then enables/disables SCE.
	   * @return {boolean} true if SCE is enabled, false otherwise.
	   *
	   * @description
	   * Enables/disables SCE and returns the current value.
	   */
	  this.enabled = function(value) {
	    if (arguments.length) {
	      enabled = !!value;
	    }
	    return enabled;
	  };


	  /* Design notes on the default implementation for SCE.
	   *
	   * The API contract for the SCE delegate
	   * -------------------------------------
	   * The SCE delegate object must provide the following 3 methods:
	   *
	   * - trustAs(contextEnum, value)
	   *     This method is used to tell the SCE service that the provided value is OK to use in the
	   *     contexts specified by contextEnum.  It must return an object that will be accepted by
	   *     getTrusted() for a compatible contextEnum and return this value.
	   *
	   * - valueOf(value)
	   *     For values that were not produced by trustAs(), return them as is.  For values that were
	   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
	   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
	   *     such a value.
	   *
	   * - getTrusted(contextEnum, value)
	   *     This function should return the a value that is safe to use in the context specified by
	   *     contextEnum or throw and exception otherwise.
	   *
	   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
	   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
	   * instance, an implementation could maintain a registry of all trusted objects by context.  In
	   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
	   * return the same object passed in if it was found in the registry under a compatible context or
	   * throw an exception otherwise.  An implementation might only wrap values some of the time based
	   * on some criteria.  getTrusted() might return a value and not throw an exception for special
	   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
	   *
	   *
	   * A note on the inheritance model for SCE contexts
	   * ------------------------------------------------
	   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
	   * is purely an implementation details.
	   *
	   * The contract is simply this:
	   *
	   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
	   *     will also succeed.
	   *
	   * Inheritance happens to capture this in a natural way.  In some future, we
	   * may not use inheritance anymore.  That is OK because no code outside of
	   * sce.js and sceSpecs.js would need to be aware of this detail.
	   */

	  this.$get = ['$parse', '$sceDelegate', function(
	                $parse,   $sceDelegate) {
	    // Support: IE 9-11 only
	    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
	    // the "expression(javascript expression)" syntax which is insecure.
	    if (enabled && msie < 8) {
	      throw $sceMinErr('iequirks',
	        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
	        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
	        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
	    }

	    var sce = shallowCopy(SCE_CONTEXTS);

	    /**
	     * @ngdoc method
	     * @name $sce#isEnabled
	     * @kind function
	     *
	     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
	     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
	     *
	     * @description
	     * Returns a boolean indicating if SCE is enabled.
	     */
	    sce.isEnabled = function() {
	      return enabled;
	    };
	    sce.trustAs = $sceDelegate.trustAs;
	    sce.getTrusted = $sceDelegate.getTrusted;
	    sce.valueOf = $sceDelegate.valueOf;

	    if (!enabled) {
	      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
	      sce.valueOf = identity;
	    }

	    /**
	     * @ngdoc method
	     * @name $sce#parseAs
	     *
	     * @description
	     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
	     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
	     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
	     * *result*)}
	     *
	     * @param {string} type The kind of SCE context in which this result will be used.
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	    sce.parseAs = function sceParseAs(type, expr) {
	      var parsed = $parse(expr);
	      if (parsed.literal && parsed.constant) {
	        return parsed;
	      } else {
	        return $parse(expr, function(value) {
	          return sce.getTrusted(type, value);
	        });
	      }
	    };

	    /**
	     * @ngdoc method
	     * @name $sce#trustAs
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
	     * returns an object that is trusted by angular for use in specified strict contextual
	     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
	     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
	     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
	     * escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsHtml(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
	     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
	     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
	     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the return
	     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsJs(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
	     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrusted
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
	     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
	     * originally supplied value if the queried context type is a supertype of the created type.
	     * If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
	     *                         call.
	     * @returns {*} The value the was originally provided to
	     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
	     *              Otherwise, throws an exception.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedHtml(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedCss
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedCss(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedJs
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedJs(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsCss(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsJs(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    // Shorthand delegations.
	    var parse = sce.parseAs,
	        getTrusted = sce.getTrusted,
	        trustAs = sce.trustAs;

	    forEach(SCE_CONTEXTS, function(enumValue, name) {
	      var lName = lowercase(name);
	      sce[snakeToCamel('parse_as_' + lName)] = function(expr) {
	        return parse(enumValue, expr);
	      };
	      sce[snakeToCamel('get_trusted_' + lName)] = function(value) {
	        return getTrusted(enumValue, value);
	      };
	      sce[snakeToCamel('trust_as_' + lName)] = function(value) {
	        return trustAs(enumValue, value);
	      };
	    });

	    return sce;
	  }];
	}

	/* exported $SnifferProvider */

	/**
	 * !!! This is an undocumented "private" service !!!
	 *
	 * @name $sniffer
	 * @requires $window
	 * @requires $document
	 * @this
	 *
	 * @property {boolean} history Does the browser support html5 history api ?
	 * @property {boolean} transitions Does the browser support CSS transition events ?
	 * @property {boolean} animations Does the browser support CSS animation events ?
	 *
	 * @description
	 * This is very simple implementation of testing browser's features.
	 */
	function $SnifferProvider() {
	  this.$get = ['$window', '$document', function($window, $document) {
	    var eventSupport = {},
	        // Chrome Packaged Apps are not allowed to access `history.pushState`.
	        // If not sandboxed, they can be detected by the presence of `chrome.app.runtime`
	        // (see https://developer.chrome.com/apps/api_index). If sandboxed, they can be detected by
	        // the presence of an extension runtime ID and the absence of other Chrome runtime APIs
	        // (see https://developer.chrome.com/apps/manifest/sandbox).
	        isChromePackagedApp =
	            $window.chrome &&
	            ($window.chrome.app && $window.chrome.app.runtime ||
	                !$window.chrome.app && $window.chrome.runtime && $window.chrome.runtime.id),
	        hasHistoryPushState = !isChromePackagedApp && $window.history && $window.history.pushState,
	        android =
	          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
	        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
	        document = $document[0] || {},
	        bodyStyle = document.body && document.body.style,
	        transitions = false,
	        animations = false;

	    if (bodyStyle) {
	      // Support: Android <5, Blackberry Browser 10, default Chrome in Android 4.4.x
	      // Mentioned browsers need a -webkit- prefix for transitions & animations.
	      transitions = !!('transition' in bodyStyle || 'webkitTransition' in bodyStyle);
	      animations = !!('animation' in bodyStyle || 'webkitAnimation' in bodyStyle);
	    }


	    return {
	      // Android has history.pushState, but it does not update location correctly
	      // so let's not use the history API at all.
	      // http://code.google.com/p/android/issues/detail?id=17471
	      // https://github.com/angular/angular.js/issues/904

	      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
	      // so let's not use the history API also
	      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
	      history: !!(hasHistoryPushState && !(android < 4) && !boxee),
	      hasEvent: function(event) {
	        // Support: IE 9-11 only
	        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
	        // it. In particular the event is not fired when backspace or delete key are pressed or
	        // when cut operation is performed.
	        // IE10+ implements 'input' event but it erroneously fires under various situations,
	        // e.g. when placeholder changes, or a form is focused.
	        if (event === 'input' && msie) return false;

	        if (isUndefined(eventSupport[event])) {
	          var divElm = document.createElement('div');
	          eventSupport[event] = 'on' + event in divElm;
	        }

	        return eventSupport[event];
	      },
	      csp: csp(),
	      transitions: transitions,
	      animations: animations,
	      android: android
	    };
	  }];
	}

	var $templateRequestMinErr = minErr('$compile');

	/**
	 * @ngdoc provider
	 * @name $templateRequestProvider
	 * @this
	 *
	 * @description
	 * Used to configure the options passed to the {@link $http} service when making a template request.
	 *
	 * For example, it can be used for specifying the "Accept" header that is sent to the server, when
	 * requesting a template.
	 */
	function $TemplateRequestProvider() {

	  var httpOptions;

	  /**
	   * @ngdoc method
	   * @name $templateRequestProvider#httpOptions
	   * @description
	   * The options to be passed to the {@link $http} service when making the request.
	   * You can use this to override options such as the "Accept" header for template requests.
	   *
	   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
	   * options if not overridden here.
	   *
	   * @param {string=} value new value for the {@link $http} options.
	   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
	   */
	  this.httpOptions = function(val) {
	    if (val) {
	      httpOptions = val;
	      return this;
	    }
	    return httpOptions;
	  };

	  /**
	   * @ngdoc service
	   * @name $templateRequest
	   *
	   * @description
	   * The `$templateRequest` service runs security checks then downloads the provided template using
	   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
	   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
	   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
	   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
	   * when `tpl` is of type string and `$templateCache` has the matching entry.
	   *
	   * If you want to pass custom options to the `$http` service, such as setting the Accept header you
	   * can configure this via {@link $templateRequestProvider#httpOptions}.
	   *
	   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
	   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
	   *
	   * @return {Promise} a promise for the HTTP response data of the given URL.
	   *
	   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
	   */
	  this.$get = ['$exceptionHandler', '$templateCache', '$http', '$q', '$sce',
	    function($exceptionHandler, $templateCache, $http, $q, $sce) {

	      function handleRequestFn(tpl, ignoreRequestError) {
	        handleRequestFn.totalPendingRequests++;

	        // We consider the template cache holds only trusted templates, so
	        // there's no need to go through whitelisting again for keys that already
	        // are included in there. This also makes Angular accept any script
	        // directive, no matter its name. However, we still need to unwrap trusted
	        // types.
	        if (!isString(tpl) || isUndefined($templateCache.get(tpl))) {
	          tpl = $sce.getTrustedResourceUrl(tpl);
	        }

	        var transformResponse = $http.defaults && $http.defaults.transformResponse;

	        if (isArray(transformResponse)) {
	          transformResponse = transformResponse.filter(function(transformer) {
	            return transformer !== defaultHttpResponseTransform;
	          });
	        } else if (transformResponse === defaultHttpResponseTransform) {
	          transformResponse = null;
	        }

	        return $http.get(tpl, extend({
	            cache: $templateCache,
	            transformResponse: transformResponse
	          }, httpOptions))
	          .finally(function() {
	            handleRequestFn.totalPendingRequests--;
	          })
	          .then(function(response) {
	            $templateCache.put(tpl, response.data);
	            return response.data;
	          }, handleError);

	        function handleError(resp) {
	          if (!ignoreRequestError) {
	            resp = $templateRequestMinErr('tpload',
	                'Failed to load template: {0} (HTTP status: {1} {2})',
	                tpl, resp.status, resp.statusText);

	            $exceptionHandler(resp);
	          }

	          return $q.reject(resp);
	        }
	      }

	      handleRequestFn.totalPendingRequests = 0;

	      return handleRequestFn;
	    }
	  ];
	}

	/** @this */
	function $$TestabilityProvider() {
	  this.$get = ['$rootScope', '$browser', '$location',
	       function($rootScope,   $browser,   $location) {

	    /**
	     * @name $testability
	     *
	     * @description
	     * The private $$testability service provides a collection of methods for use when debugging
	     * or by automated test and debugging tools.
	     */
	    var testability = {};

	    /**
	     * @name $$testability#findBindings
	     *
	     * @description
	     * Returns an array of elements that are bound (via ng-bind or {{}})
	     * to expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The binding expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression. Filters and whitespace are ignored.
	     */
	    testability.findBindings = function(element, expression, opt_exactMatch) {
	      var bindings = element.getElementsByClassName('ng-binding');
	      var matches = [];
	      forEach(bindings, function(binding) {
	        var dataBinding = angular.element(binding).data('$binding');
	        if (dataBinding) {
	          forEach(dataBinding, function(bindingName) {
	            if (opt_exactMatch) {
	              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
	              if (matcher.test(bindingName)) {
	                matches.push(binding);
	              }
	            } else {
	              if (bindingName.indexOf(expression) !== -1) {
	                matches.push(binding);
	              }
	            }
	          });
	        }
	      });
	      return matches;
	    };

	    /**
	     * @name $$testability#findModels
	     *
	     * @description
	     * Returns an array of elements that are two-way found via ng-model to
	     * expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The model expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression.
	     */
	    testability.findModels = function(element, expression, opt_exactMatch) {
	      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
	      for (var p = 0; p < prefixes.length; ++p) {
	        var attributeEquals = opt_exactMatch ? '=' : '*=';
	        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
	        var elements = element.querySelectorAll(selector);
	        if (elements.length) {
	          return elements;
	        }
	      }
	    };

	    /**
	     * @name $$testability#getLocation
	     *
	     * @description
	     * Shortcut for getting the location in a browser agnostic way. Returns
	     *     the path, search, and hash. (e.g. /path?a=b#hash)
	     */
	    testability.getLocation = function() {
	      return $location.url();
	    };

	    /**
	     * @name $$testability#setLocation
	     *
	     * @description
	     * Shortcut for navigating to a location without doing a full page reload.
	     *
	     * @param {string} url The location url (path, search and hash,
	     *     e.g. /path?a=b#hash) to go to.
	     */
	    testability.setLocation = function(url) {
	      if (url !== $location.url()) {
	        $location.url(url);
	        $rootScope.$digest();
	      }
	    };

	    /**
	     * @name $$testability#whenStable
	     *
	     * @description
	     * Calls the callback when $timeout and $http requests are completed.
	     *
	     * @param {function} callback
	     */
	    testability.whenStable = function(callback) {
	      $browser.notifyWhenNoOutstandingRequests(callback);
	    };

	    return testability;
	  }];
	}

	/** @this */
	function $TimeoutProvider() {
	  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
	       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {

	    var deferreds = {};


	     /**
	      * @ngdoc service
	      * @name $timeout
	      *
	      * @description
	      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
	      * block and delegates any exceptions to
	      * {@link ng.$exceptionHandler $exceptionHandler} service.
	      *
	      * The return value of calling `$timeout` is a promise, which will be resolved when
	      * the delay has passed and the timeout function, if provided, is executed.
	      *
	      * To cancel a timeout request, call `$timeout.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
	      * synchronously flush the queue of deferred functions.
	      *
	      * If you only want a promise that will be resolved after some specified delay
	      * then you can call `$timeout` without the `fn` function.
	      *
	      * @param {function()=} fn A function, whose execution should be delayed.
	      * @param {number=} [delay=0] Delay in milliseconds.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
	      *   will be resolved with the return value of the `fn` function.
	      *
	      */
	    function timeout(fn, delay, invokeApply) {
	      if (!isFunction(fn)) {
	        invokeApply = delay;
	        delay = fn;
	        fn = noop;
	      }

	      var args = sliceArgs(arguments, 3),
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise,
	          timeoutId;

	      timeoutId = $browser.defer(function() {
	        try {
	          deferred.resolve(fn.apply(null, args));
	        } catch (e) {
	          deferred.reject(e);
	          $exceptionHandler(e);
	        } finally {
	          delete deferreds[promise.$$timeoutId];
	        }

	        if (!skipApply) $rootScope.$apply();
	      }, delay);

	      promise.$$timeoutId = timeoutId;
	      deferreds[timeoutId] = deferred;

	      return promise;
	    }


	     /**
	      * @ngdoc method
	      * @name $timeout#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`. As a result of this, the promise will be
	      * resolved with a rejection.
	      *
	      * @param {Promise=} promise Promise returned by the `$timeout` function.
	      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	      *   canceled.
	      */
	    timeout.cancel = function(promise) {
	      if (promise && promise.$$timeoutId in deferreds) {
	        // Timeout cancels should not report an unhandled promise.
	        deferreds[promise.$$timeoutId].promise.catch(noop);
	        deferreds[promise.$$timeoutId].reject('canceled');
	        delete deferreds[promise.$$timeoutId];
	        return $browser.defer.cancel(promise.$$timeoutId);
	      }
	      return false;
	    };

	    return timeout;
	  }];
	}

	// NOTE:  The usage of window and document instead of $window and $document here is
	// deliberate.  This service depends on the specific behavior of anchor nodes created by the
	// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
	// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
	// doesn't know about mocked locations and resolves URLs to the real document - which is
	// exactly the behavior needed here.  There is little value is mocking these out for this
	// service.
	var urlParsingNode = window.document.createElement('a');
	var originUrl = urlResolve(window.location.href);


	/**
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */
	function urlResolve(url) {
	  var href = url;

	  // Support: IE 9-11 only
	  if (msie) {
	    // Normalize before parse.  Refer Implementation Notes on why this is
	    // done in two steps on IE.
	    urlParsingNode.setAttribute('href', href);
	    href = urlParsingNode.href;
	  }

	  urlParsingNode.setAttribute('href', href);

	  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	  return {
	    href: urlParsingNode.href,
	    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	    host: urlParsingNode.host,
	    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	    hostname: urlParsingNode.hostname,
	    port: urlParsingNode.port,
	    pathname: (urlParsingNode.pathname.charAt(0) === '/')
	      ? urlParsingNode.pathname
	      : '/' + urlParsingNode.pathname
	  };
	}

	/**
	 * Parse a request URL and determine whether this is a same-origin request as the application document.
	 *
	 * @param {string|object} requestUrl The url of the request as a string that will be resolved
	 * or a parsed URL object.
	 * @returns {boolean} Whether the request is for the same origin as the application document.
	 */
	function urlIsSameOrigin(requestUrl) {
	  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
	  return (parsed.protocol === originUrl.protocol &&
	          parsed.host === originUrl.host);
	}

	/**
	 * @ngdoc service
	 * @name $window
	 * @this
	 *
	 * @description
	 * A reference to the browser's `window` object. While `window`
	 * is globally available in JavaScript, it causes testability problems, because
	 * it is a global variable. In angular we always refer to it through the
	 * `$window` service, so it may be overridden, removed or mocked for testing.
	 *
	 * Expressions, like the one defined for the `ngClick` directive in the example
	 * below, are evaluated with respect to the current scope.  Therefore, there is
	 * no risk of inadvertently coding in a dependency on a global value in such an
	 * expression.
	 *
	 * @example
	   <example module="windowExample" name="window-service">
	     <file name="index.html">
	       <script>
	         angular.module('windowExample', [])
	           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="text" ng-model="greeting" aria-label="greeting" />
	         <button ng-click="doGreeting(greeting)">ALERT</button>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	      it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
	     </file>
	   </example>
	 */
	function $WindowProvider() {
	  this.$get = valueFn(window);
	}

	/**
	 * @name $$cookieReader
	 * @requires $document
	 *
	 * @description
	 * This is a private service for reading cookies used by $http and ngCookies
	 *
	 * @return {Object} a key/value map of the current cookies
	 */
	function $$CookieReader($document) {
	  var rawDocument = $document[0] || {};
	  var lastCookies = {};
	  var lastCookieString = '';

	  function safeDecodeURIComponent(str) {
	    try {
	      return decodeURIComponent(str);
	    } catch (e) {
	      return str;
	    }
	  }

	  return function() {
	    var cookieArray, cookie, i, index, name;
	    var currentCookieString = rawDocument.cookie || '';

	    if (currentCookieString !== lastCookieString) {
	      lastCookieString = currentCookieString;
	      cookieArray = lastCookieString.split('; ');
	      lastCookies = {};

	      for (i = 0; i < cookieArray.length; i++) {
	        cookie = cookieArray[i];
	        index = cookie.indexOf('=');
	        if (index > 0) { //ignore nameless cookies
	          name = safeDecodeURIComponent(cookie.substring(0, index));
	          // the first value that is seen for a cookie is the most
	          // specific one.  values for the same cookie name that
	          // follow are for less specific paths.
	          if (isUndefined(lastCookies[name])) {
	            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
	          }
	        }
	      }
	    }
	    return lastCookies;
	  };
	}

	$$CookieReader.$inject = ['$document'];

	/** @this */
	function $$CookieReaderProvider() {
	  this.$get = $$CookieReader;
	}

	/* global currencyFilter: true,
	 dateFilter: true,
	 filterFilter: true,
	 jsonFilter: true,
	 limitToFilter: true,
	 lowercaseFilter: true,
	 numberFilter: true,
	 orderByFilter: true,
	 uppercaseFilter: true,
	 */

	/**
	 * @ngdoc provider
	 * @name $filterProvider
	 * @description
	 *
	 * Filters are just functions which transform input to an output. However filters need to be
	 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
	 * annotated with dependencies and is responsible for creating a filter function.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	 * (`myapp_subsection_filterx`).
	 * </div>
	 *
	 * ```js
	 *   // Filter registration
	 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
	 * ```
	 *
	 * The filter function is registered with the `$injector` under the filter name suffix with
	 * `Filter`.
	 *
	 * ```js
	 *   it('should be the same instance', inject(
	 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
	 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
	 * ```
	 *
	 *
	 * For more information about how angular filters work, and how to create your own filters, see
	 * {@link guide/filter Filters} in the Angular Developer Guide.
	 */

	/**
	 * @ngdoc service
	 * @name $filter
	 * @kind function
	 * @description
	 * Filters are used for formatting data displayed to the user.
	 *
	 * They can be used in view templates, controllers or services.Angular comes
	 * with a collection of [built-in filters](api/ng/filter), but it is easy to
	 * define your own as well.
	 *
	 * The general syntax in templates is as follows:
	 *
	 * ```html
	 * {{ expression [| filter_name[:parameter_value] ... ] }}
	 * ```
	 *
	 * @param {String} name Name of the filter function to retrieve
	 * @return {Function} the filter function
	 * @example
	   <example name="$filter" module="filterExample">
	     <file name="index.html">
	       <div ng-controller="MainCtrl">
	        <h3>{{ originalText }}</h3>
	        <h3>{{ filteredText }}</h3>
	       </div>
	     </file>

	     <file name="script.js">
	      angular.module('filterExample', [])
	      .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
	     </file>
	   </example>
	  */
	$FilterProvider.$inject = ['$provide'];
	/** @this */
	function $FilterProvider($provide) {
	  var suffix = 'Filter';

	  /**
	   * @ngdoc method
	   * @name $filterProvider#register
	   * @param {string|Object} name Name of the filter function, or an object map of filters where
	   *    the keys are the filter names and the values are the filter factories.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	   *    (`myapp_subsection_filterx`).
	   *    </div>
	    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
	   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
	   *    of the registered filter instances.
	   */
	  function register(name, factory) {
	    if (isObject(name)) {
	      var filters = {};
	      forEach(name, function(filter, key) {
	        filters[key] = register(key, filter);
	      });
	      return filters;
	    } else {
	      return $provide.factory(name + suffix, factory);
	    }
	  }
	  this.register = register;

	  this.$get = ['$injector', function($injector) {
	    return function(name) {
	      return $injector.get(name + suffix);
	    };
	  }];

	  ////////////////////////////////////////

	  /* global
	    currencyFilter: false,
	    dateFilter: false,
	    filterFilter: false,
	    jsonFilter: false,
	    limitToFilter: false,
	    lowercaseFilter: false,
	    numberFilter: false,
	    orderByFilter: false,
	    uppercaseFilter: false
	  */

	  register('currency', currencyFilter);
	  register('date', dateFilter);
	  register('filter', filterFilter);
	  register('json', jsonFilter);
	  register('limitTo', limitToFilter);
	  register('lowercase', lowercaseFilter);
	  register('number', numberFilter);
	  register('orderBy', orderByFilter);
	  register('uppercase', uppercaseFilter);
	}

	/**
	 * @ngdoc filter
	 * @name filter
	 * @kind function
	 *
	 * @description
	 * Selects a subset of items from `array` and returns it as a new array.
	 *
	 * @param {Array} array The source array.
	 * @param {string|Object|function()} expression The predicate to be used for selecting items from
	 *   `array`.
	 *
	 *   Can be one of:
	 *
	 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
	 *     objects with string properties in `array` that match this string will be returned. This also
	 *     applies to nested object properties.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *
	 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
	 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
	 *     which have property `name` containing "M" and property `phone` containing "1". A special
	 *     property name (`$` by default) can be used (e.g. as in `{$: "text"}`) to accept a match
	 *     against any property of the object or its nested object properties. That's equivalent to the
	 *     simple substring match with a `string` as described above. The special property name can be
	 *     overwritten, using the `anyPropertyKey` parameter.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
	 *     not containing "M".
	 *
	 *     Note that a named property will match properties on the same level only, while the special
	 *     `$` property will match properties on the same level or deeper. E.g. an array item like
	 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
	 *     **will** be matched by `{$: 'John'}`.
	 *
	 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
	 *     The function is called for each element of the array, with the element, its index, and
	 *     the entire array itself as arguments.
	 *
	 *     The final result is an array of those elements that the predicate returned true for.
	 *
	 * @param {function(actual, expected)|true|false} [comparator] Comparator which is used in
	 *     determining if the expected value (from the filter expression) and actual value (from
	 *     the object in the array) should be considered a match.
	 *
	 *   Can be one of:
	 *
	 *   - `function(actual, expected)`:
	 *     The function will be given the object value and the predicate value to compare and
	 *     should return true if both values should be considered equal.
	 *
	 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
	 *     This is essentially strict comparison of expected and actual.
	 *
	 *   - `false`: A short hand for a function which will look for a substring match in a case
	 *     insensitive way. Primitive values are converted to strings. Objects are not compared against
	 *     primitives, unless they have a custom `toString` method (e.g. `Date` objects).
	 *
	 *
	 *   Defaults to `false`.
	 *
	 * @param {string} [anyPropertyKey] The special property name that matches against any property.
	 *     By default `$`.
	 *
	 * @example
	   <example name="filter-filter">
	     <file name="index.html">
	       <div ng-init="friends = [{name:'John', phone:'555-1276'},
	                                {name:'Mary', phone:'800-BIG-MARY'},
	                                {name:'Mike', phone:'555-4321'},
	                                {name:'Adam', phone:'555-5678'},
	                                {name:'Julie', phone:'555-8765'},
	                                {name:'Juliette', phone:'555-5678'}]"></div>

	       <label>Search: <input ng-model="searchText"></label>
	       <table id="searchTextResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friend in friends | filter:searchText">
	           <td>{{friend.name}}</td>
	           <td>{{friend.phone}}</td>
	         </tr>
	       </table>
	       <hr>
	       <label>Any: <input ng-model="search.$"></label> <br>
	       <label>Name only <input ng-model="search.name"></label><br>
	       <label>Phone only <input ng-model="search.phone"></label><br>
	       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
	       <table id="searchObjResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friendObj in friends | filter:search:strict">
	           <td>{{friendObj.name}}</td>
	           <td>{{friendObj.phone}}</td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };

	       it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });

	       it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
	       it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
	     </file>
	   </example>
	 */

	function filterFilter() {
	  return function(array, expression, comparator, anyPropertyKey) {
	    if (!isArrayLike(array)) {
	      if (array == null) {
	        return array;
	      } else {
	        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
	      }
	    }

	    anyPropertyKey = anyPropertyKey || '$';
	    var expressionType = getTypeForFilter(expression);
	    var predicateFn;
	    var matchAgainstAnyProp;

	    switch (expressionType) {
	      case 'function':
	        predicateFn = expression;
	        break;
	      case 'boolean':
	      case 'null':
	      case 'number':
	      case 'string':
	        matchAgainstAnyProp = true;
	        // falls through
	      case 'object':
	        predicateFn = createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp);
	        break;
	      default:
	        return array;
	    }

	    return Array.prototype.filter.call(array, predicateFn);
	  };
	}

	// Helper functions for `filterFilter`
	function createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp) {
	  var shouldMatchPrimitives = isObject(expression) && (anyPropertyKey in expression);
	  var predicateFn;

	  if (comparator === true) {
	    comparator = equals;
	  } else if (!isFunction(comparator)) {
	    comparator = function(actual, expected) {
	      if (isUndefined(actual)) {
	        // No substring matching against `undefined`
	        return false;
	      }
	      if ((actual === null) || (expected === null)) {
	        // No substring matching against `null`; only match against `null`
	        return actual === expected;
	      }
	      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
	        // Should not compare primitives against objects, unless they have custom `toString` method
	        return false;
	      }

	      actual = lowercase('' + actual);
	      expected = lowercase('' + expected);
	      return actual.indexOf(expected) !== -1;
	    };
	  }

	  predicateFn = function(item) {
	    if (shouldMatchPrimitives && !isObject(item)) {
	      return deepCompare(item, expression[anyPropertyKey], comparator, anyPropertyKey, false);
	    }
	    return deepCompare(item, expression, comparator, anyPropertyKey, matchAgainstAnyProp);
	  };

	  return predicateFn;
	}

	function deepCompare(actual, expected, comparator, anyPropertyKey, matchAgainstAnyProp, dontMatchWholeObject) {
	  var actualType = getTypeForFilter(actual);
	  var expectedType = getTypeForFilter(expected);

	  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
	    return !deepCompare(actual, expected.substring(1), comparator, anyPropertyKey, matchAgainstAnyProp);
	  } else if (isArray(actual)) {
	    // In case `actual` is an array, consider it a match
	    // if ANY of it's items matches `expected`
	    return actual.some(function(item) {
	      return deepCompare(item, expected, comparator, anyPropertyKey, matchAgainstAnyProp);
	    });
	  }

	  switch (actualType) {
	    case 'object':
	      var key;
	      if (matchAgainstAnyProp) {
	        for (key in actual) {
	          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, anyPropertyKey, true)) {
	            return true;
	          }
	        }
	        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, anyPropertyKey, false);
	      } else if (expectedType === 'object') {
	        for (key in expected) {
	          var expectedVal = expected[key];
	          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
	            continue;
	          }

	          var matchAnyProperty = key === anyPropertyKey;
	          var actualVal = matchAnyProperty ? actual : actual[key];
	          if (!deepCompare(actualVal, expectedVal, comparator, anyPropertyKey, matchAnyProperty, matchAnyProperty)) {
	            return false;
	          }
	        }
	        return true;
	      } else {
	        return comparator(actual, expected);
	      }
	    case 'function':
	      return false;
	    default:
	      return comparator(actual, expected);
	  }
	}

	// Used for easily differentiating between `null` and actual `object`
	function getTypeForFilter(val) {
	  return (val === null) ? 'null' : typeof val;
	}

	var MAX_DIGITS = 22;
	var DECIMAL_SEP = '.';
	var ZERO_CHAR = '0';

	/**
	 * @ngdoc filter
	 * @name currency
	 * @kind function
	 *
	 * @description
	 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
	 * symbol for current locale is used.
	 *
	 * @param {number} amount Input to filter.
	 * @param {string=} symbol Currency symbol or identifier to be displayed.
	 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
	 * @returns {string} Formatted number.
	 *
	 *
	 * @example
	   <example module="currencyExample" name="currency-filter">
	     <file name="index.html">
	       <script>
	         angular.module('currencyExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="number" ng-model="amount" aria-label="amount"> <br>
	         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
	         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span><br>
	         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
	       it('should update', function() {
	         if (browser.params.browser === 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
	         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
	       });
	     </file>
	   </example>
	 */
	currencyFilter.$inject = ['$locale'];
	function currencyFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(amount, currencySymbol, fractionSize) {
	    if (isUndefined(currencySymbol)) {
	      currencySymbol = formats.CURRENCY_SYM;
	    }

	    if (isUndefined(fractionSize)) {
	      fractionSize = formats.PATTERNS[1].maxFrac;
	    }

	    // if null or undefined pass it through
	    return (amount == null)
	        ? amount
	        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
	            replace(/\u00A4/g, currencySymbol);
	  };
	}

	/**
	 * @ngdoc filter
	 * @name number
	 * @kind function
	 *
	 * @description
	 * Formats a number as text.
	 *
	 * If the input is null or undefined, it will just be returned.
	 * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
	 * If the input is not a number an empty string is returned.
	 *
	 *
	 * @param {number|string} number Number to format.
	 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
	 * If this is not provided then the fraction size is computed from the current locale's number
	 * formatting pattern. In the case of the default locale, it will be 3.
	 * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
	 *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
	 *                   include "," group separators after each third digit).
	 *
	 * @example
	   <example module="numberFilterExample" name="number-filter">
	     <file name="index.html">
	       <script>
	         angular.module('numberFilterExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter number: <input ng-model='val'></label><br>
	         Default formatting: <span id='number-default'>{{val | number}}</span><br>
	         No fractions: <span>{{val | number:0}}</span><br>
	         Negative number: <span>{{-val | number:4}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });

	       it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
	     </file>
	   </example>
	 */
	numberFilter.$inject = ['$locale'];
	function numberFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(number, fractionSize) {

	    // if null or undefined pass it through
	    return (number == null)
	        ? number
	        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
	                       fractionSize);
	  };
	}

	/**
	 * Parse a number (as a string) into three components that can be used
	 * for formatting the number.
	 *
	 * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
	 *
	 * @param  {string} numStr The number to parse
	 * @return {object} An object describing this number, containing the following keys:
	 *  - d : an array of digits containing leading zeros as necessary
	 *  - i : the number of the digits in `d` that are to the left of the decimal point
	 *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
	 *
	 */
	function parse(numStr) {
	  var exponent = 0, digits, numberOfIntegerDigits;
	  var i, j, zeros;

	  // Decimal point?
	  if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {
	    numStr = numStr.replace(DECIMAL_SEP, '');
	  }

	  // Exponential form?
	  if ((i = numStr.search(/e/i)) > 0) {
	    // Work out the exponent.
	    if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i;
	    numberOfIntegerDigits += +numStr.slice(i + 1);
	    numStr = numStr.substring(0, i);
	  } else if (numberOfIntegerDigits < 0) {
	    // There was no decimal point or exponent so it is an integer.
	    numberOfIntegerDigits = numStr.length;
	  }

	  // Count the number of leading zeros.
	  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */ }

	  if (i === (zeros = numStr.length)) {
	    // The digits are all zero.
	    digits = [0];
	    numberOfIntegerDigits = 1;
	  } else {
	    // Count the number of trailing zeros
	    zeros--;
	    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;

	    // Trailing zeros are insignificant so ignore them
	    numberOfIntegerDigits -= i;
	    digits = [];
	    // Convert string to array of digits without leading/trailing zeros.
	    for (j = 0; i <= zeros; i++, j++) {
	      digits[j] = +numStr.charAt(i);
	    }
	  }

	  // If the number overflows the maximum allowed digits then use an exponent.
	  if (numberOfIntegerDigits > MAX_DIGITS) {
	    digits = digits.splice(0, MAX_DIGITS - 1);
	    exponent = numberOfIntegerDigits - 1;
	    numberOfIntegerDigits = 1;
	  }

	  return { d: digits, e: exponent, i: numberOfIntegerDigits };
	}

	/**
	 * Round the parsed number to the specified number of decimal places
	 * This function changed the parsedNumber in-place
	 */
	function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
	    var digits = parsedNumber.d;
	    var fractionLen = digits.length - parsedNumber.i;

	    // determine fractionSize if it is not specified; `+fractionSize` converts it to a number
	    fractionSize = (isUndefined(fractionSize)) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;

	    // The index of the digit to where rounding is to occur
	    var roundAt = fractionSize + parsedNumber.i;
	    var digit = digits[roundAt];

	    if (roundAt > 0) {
	      // Drop fractional digits beyond `roundAt`
	      digits.splice(Math.max(parsedNumber.i, roundAt));

	      // Set non-fractional digits beyond `roundAt` to 0
	      for (var j = roundAt; j < digits.length; j++) {
	        digits[j] = 0;
	      }
	    } else {
	      // We rounded to zero so reset the parsedNumber
	      fractionLen = Math.max(0, fractionLen);
	      parsedNumber.i = 1;
	      digits.length = Math.max(1, roundAt = fractionSize + 1);
	      digits[0] = 0;
	      for (var i = 1; i < roundAt; i++) digits[i] = 0;
	    }

	    if (digit >= 5) {
	      if (roundAt - 1 < 0) {
	        for (var k = 0; k > roundAt; k--) {
	          digits.unshift(0);
	          parsedNumber.i++;
	        }
	        digits.unshift(1);
	        parsedNumber.i++;
	      } else {
	        digits[roundAt - 1]++;
	      }
	    }

	    // Pad out with zeros to get the required fraction length
	    for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);


	    // Do any carrying, e.g. a digit was rounded up to 10
	    var carry = digits.reduceRight(function(carry, d, i, digits) {
	      d = d + carry;
	      digits[i] = d % 10;
	      return Math.floor(d / 10);
	    }, 0);
	    if (carry) {
	      digits.unshift(carry);
	      parsedNumber.i++;
	    }
	}

	/**
	 * Format a number into a string
	 * @param  {number} number       The number to format
	 * @param  {{
	 *           minFrac, // the minimum number of digits required in the fraction part of the number
	 *           maxFrac, // the maximum number of digits required in the fraction part of the number
	 *           gSize,   // number of digits in each group of separated digits
	 *           lgSize,  // number of digits in the last group of digits before the decimal separator
	 *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
	 *           posPre,  // the string to go in front of a positive number
	 *           negSuf,  // the string to go after a negative number (e.g. `)`)
	 *           posSuf   // the string to go after a positive number
	 *         }} pattern
	 * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
	 * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
	 * @param  {[type]} fractionSize The size of the fractional part of the number
	 * @return {string}              The number formatted as a string
	 */
	function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {

	  if (!(isString(number) || isNumber(number)) || isNaN(number)) return '';

	  var isInfinity = !isFinite(number);
	  var isZero = false;
	  var numStr = Math.abs(number) + '',
	      formattedText = '',
	      parsedNumber;

	  if (isInfinity) {
	    formattedText = '\u221e';
	  } else {
	    parsedNumber = parse(numStr);

	    roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);

	    var digits = parsedNumber.d;
	    var integerLen = parsedNumber.i;
	    var exponent = parsedNumber.e;
	    var decimals = [];
	    isZero = digits.reduce(function(isZero, d) { return isZero && !d; }, true);

	    // pad zeros for small numbers
	    while (integerLen < 0) {
	      digits.unshift(0);
	      integerLen++;
	    }

	    // extract decimals digits
	    if (integerLen > 0) {
	      decimals = digits.splice(integerLen, digits.length);
	    } else {
	      decimals = digits;
	      digits = [0];
	    }

	    // format the integer digits with grouping separators
	    var groups = [];
	    if (digits.length >= pattern.lgSize) {
	      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
	    }
	    while (digits.length > pattern.gSize) {
	      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
	    }
	    if (digits.length) {
	      groups.unshift(digits.join(''));
	    }
	    formattedText = groups.join(groupSep);

	    // append the decimal digits
	    if (decimals.length) {
	      formattedText += decimalSep + decimals.join('');
	    }

	    if (exponent) {
	      formattedText += 'e+' + exponent;
	    }
	  }
	  if (number < 0 && !isZero) {
	    return pattern.negPre + formattedText + pattern.negSuf;
	  } else {
	    return pattern.posPre + formattedText + pattern.posSuf;
	  }
	}

	function padNumber(num, digits, trim, negWrap) {
	  var neg = '';
	  if (num < 0 || (negWrap && num <= 0)) {
	    if (negWrap) {
	      num = -num + 1;
	    } else {
	      num = -num;
	      neg = '-';
	    }
	  }
	  num = '' + num;
	  while (num.length < digits) num = ZERO_CHAR + num;
	  if (trim) {
	    num = num.substr(num.length - digits);
	  }
	  return neg + num;
	}


	function dateGetter(name, size, offset, trim, negWrap) {
	  offset = offset || 0;
	  return function(date) {
	    var value = date['get' + name]();
	    if (offset > 0 || value > -offset) {
	      value += offset;
	    }
	    if (value === 0 && offset === -12) value = 12;
	    return padNumber(value, size, trim, negWrap);
	  };
	}

	function dateStrGetter(name, shortForm, standAlone) {
	  return function(date, formats) {
	    var value = date['get' + name]();
	    var propPrefix = (standAlone ? 'STANDALONE' : '') + (shortForm ? 'SHORT' : '');
	    var get = uppercase(propPrefix + name);

	    return formats[get][value];
	  };
	}

	function timeZoneGetter(date, formats, offset) {
	  var zone = -1 * offset;
	  var paddedZone = (zone >= 0) ? '+' : '';

	  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
	                padNumber(Math.abs(zone % 60), 2);

	  return paddedZone;
	}

	function getFirstThursdayOfYear(year) {
	    // 0 = index of January
	    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
	    // 4 = index of Thursday (+1 to account for 1st = 5)
	    // 11 = index of *next* Thursday (+1 account for 1st = 12)
	    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
	}

	function getThursdayThisWeek(datetime) {
	    return new Date(datetime.getFullYear(), datetime.getMonth(),
	      // 4 = index of Thursday
	      datetime.getDate() + (4 - datetime.getDay()));
	}

	function weekGetter(size) {
	   return function(date) {
	      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
	         thisThurs = getThursdayThisWeek(date);

	      var diff = +thisThurs - +firstThurs,
	         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

	      return padNumber(result, size);
	   };
	}

	function ampmGetter(date, formats) {
	  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
	}

	function eraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
	}

	function longEraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
	}

	var DATE_FORMATS = {
	  yyyy: dateGetter('FullYear', 4, 0, false, true),
	    yy: dateGetter('FullYear', 2, 0, true, true),
	     y: dateGetter('FullYear', 1, 0, false, true),
	  MMMM: dateStrGetter('Month'),
	   MMM: dateStrGetter('Month', true),
	    MM: dateGetter('Month', 2, 1),
	     M: dateGetter('Month', 1, 1),
	  LLLL: dateStrGetter('Month', false, true),
	    dd: dateGetter('Date', 2),
	     d: dateGetter('Date', 1),
	    HH: dateGetter('Hours', 2),
	     H: dateGetter('Hours', 1),
	    hh: dateGetter('Hours', 2, -12),
	     h: dateGetter('Hours', 1, -12),
	    mm: dateGetter('Minutes', 2),
	     m: dateGetter('Minutes', 1),
	    ss: dateGetter('Seconds', 2),
	     s: dateGetter('Seconds', 1),
	     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
	   sss: dateGetter('Milliseconds', 3),
	  EEEE: dateStrGetter('Day'),
	   EEE: dateStrGetter('Day', true),
	     a: ampmGetter,
	     Z: timeZoneGetter,
	    ww: weekGetter(2),
	     w: weekGetter(1),
	     G: eraGetter,
	     GG: eraGetter,
	     GGG: eraGetter,
	     GGGG: longEraGetter
	};

	var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
	    NUMBER_STRING = /^-?\d+$/;

	/**
	 * @ngdoc filter
	 * @name date
	 * @kind function
	 *
	 * @description
	 *   Formats `date` to a string based on the requested `format`.
	 *
	 *   `format` string can be composed of the following elements:
	 *
	 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
	 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
	 *   * `'MMMM'`: Month in year (January-December)
	 *   * `'MMM'`: Month in year (Jan-Dec)
	 *   * `'MM'`: Month in year, padded (01-12)
	 *   * `'M'`: Month in year (1-12)
	 *   * `'LLLL'`: Stand-alone month in year (January-December)
	 *   * `'dd'`: Day in month, padded (01-31)
	 *   * `'d'`: Day in month (1-31)
	 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
	 *   * `'EEE'`: Day in Week, (Sun-Sat)
	 *   * `'HH'`: Hour in day, padded (00-23)
	 *   * `'H'`: Hour in day (0-23)
	 *   * `'hh'`: Hour in AM/PM, padded (01-12)
	 *   * `'h'`: Hour in AM/PM, (1-12)
	 *   * `'mm'`: Minute in hour, padded (00-59)
	 *   * `'m'`: Minute in hour (0-59)
	 *   * `'ss'`: Second in minute, padded (00-59)
	 *   * `'s'`: Second in minute (0-59)
	 *   * `'sss'`: Millisecond in second, padded (000-999)
	 *   * `'a'`: AM/PM marker
	 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
	 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
	 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
	 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
	 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
	 *
	 *   `format` string can also be one of the following predefined
	 *   {@link guide/i18n localizable formats}:
	 *
	 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
	 *     (e.g. Sep 3, 2010 12:05:08 PM)
	 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
	 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
	 *     (e.g. Friday, September 3, 2010)
	 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
	 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
	 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
	 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
	 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
	 *
	 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
	 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
	 *   (e.g. `"h 'o''clock'"`).
	 *
	 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
	 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
	 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
	 *    specified in the string input, the time is considered to be in the local timezone.
	 * @param {string=} format Formatting rules (see Description). If not specified,
	 *    `mediumDate` is used.
	 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
	 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *    If not specified, the timezone of the browser will be used.
	 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
	 *
	 * @example
	   <example name="filter-date">
	     <file name="index.html">
	       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
	           <span>{{1288323623006 | date:'medium'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
	          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
	          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
	          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010-10-2\d \d{2}:\d{2}:\d{2} (-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
	     </file>
	   </example>
	 */
	dateFilter.$inject = ['$locale'];
	function dateFilter($locale) {


	  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	                     // 1        2       3         4          5          6          7          8  9     10      11
	  function jsonStringToDate(string) {
	    var match;
	    if ((match = string.match(R_ISO8601_STR))) {
	      var date = new Date(0),
	          tzHour = 0,
	          tzMin  = 0,
	          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
	          timeSetter = match[8] ? date.setUTCHours : date.setHours;

	      if (match[9]) {
	        tzHour = toInt(match[9] + match[10]);
	        tzMin = toInt(match[9] + match[11]);
	      }
	      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
	      var h = toInt(match[4] || 0) - tzHour;
	      var m = toInt(match[5] || 0) - tzMin;
	      var s = toInt(match[6] || 0);
	      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	      timeSetter.call(date, h, m, s, ms);
	      return date;
	    }
	    return string;
	  }


	  return function(date, format, timezone) {
	    var text = '',
	        parts = [],
	        fn, match;

	    format = format || 'mediumDate';
	    format = $locale.DATETIME_FORMATS[format] || format;
	    if (isString(date)) {
	      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
	    }

	    if (isNumber(date)) {
	      date = new Date(date);
	    }

	    if (!isDate(date) || !isFinite(date.getTime())) {
	      return date;
	    }

	    while (format) {
	      match = DATE_FORMATS_SPLIT.exec(format);
	      if (match) {
	        parts = concat(parts, match, 1);
	        format = parts.pop();
	      } else {
	        parts.push(format);
	        format = null;
	      }
	    }

	    var dateTimezoneOffset = date.getTimezoneOffset();
	    if (timezone) {
	      dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	      date = convertTimezoneToLocal(date, timezone, true);
	    }
	    forEach(parts, function(value) {
	      fn = DATE_FORMATS[value];
	      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
	                 : value === '\'\'' ? '\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
	    });

	    return text;
	  };
	}


	/**
	 * @ngdoc filter
	 * @name json
	 * @kind function
	 *
	 * @description
	 *   Allows you to convert a JavaScript object into JSON string.
	 *
	 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
	 *   the binding is automatically converted to JSON.
	 *
	 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
	 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
	 * @returns {string} JSON string.
	 *
	 *
	 * @example
	   <example name="filter-json">
	     <file name="index.html">
	       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
	       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n {2}"name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n {4}"name": ?"value"\n}/);
	       });
	     </file>
	   </example>
	 *
	 */
	function jsonFilter() {
	  return function(object, spacing) {
	    if (isUndefined(spacing)) {
	        spacing = 2;
	    }
	    return toJson(object, spacing);
	  };
	}


	/**
	 * @ngdoc filter
	 * @name lowercase
	 * @kind function
	 * @description
	 * Converts string to lowercase.
	 * @see angular.lowercase
	 */
	var lowercaseFilter = valueFn(lowercase);


	/**
	 * @ngdoc filter
	 * @name uppercase
	 * @kind function
	 * @description
	 * Converts string to uppercase.
	 * @see angular.uppercase
	 */
	var uppercaseFilter = valueFn(uppercase);

	/**
	 * @ngdoc filter
	 * @name limitTo
	 * @kind function
	 *
	 * @description
	 * Creates a new array or string containing only a specified number of elements. The elements are
	 * taken from either the beginning or the end of the source array, string or number, as specified by
	 * the value and sign (positive or negative) of `limit`. Other array-like objects are also supported
	 * (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input,
	 * it is converted to a string.
	 *
	 * @param {Array|ArrayLike|string|number} input - Array/array-like, string or number to be limited.
	 * @param {string|number} limit - The length of the returned array or string. If the `limit` number
	 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
	 *     If the number is negative, `limit` number  of items from the end of the source array/string
	 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
	 *     the input will be returned unchanged.
	 * @param {(string|number)=} begin - Index at which to begin limitation. As a negative index,
	 *     `begin` indicates an offset from the end of `input`. Defaults to `0`.
	 * @returns {Array|string} A new sub-array or substring of length `limit` or less if the input had
	 *     less than `limit` elements.
	 *
	 * @example
	   <example module="limitToExample" name="limit-to-filter">
	     <file name="index.html">
	       <script>
	         angular.module('limitToExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>
	            Limit {{numbers}} to:
	            <input type="number" step="1" ng-model="numLimit">
	         </label>
	         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
	         <label>
	            Limit {{letters}} to:
	            <input type="number" step="1" ng-model="letterLimit">
	         </label>
	         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
	         <label>
	            Limit {{longNumber}} to:
	            <input type="number" step="1" ng-model="longNumberLimit">
	         </label>
	         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var numLimitInput = element(by.model('numLimit'));
	       var letterLimitInput = element(by.model('letterLimit'));
	       var longNumberLimitInput = element(by.model('longNumberLimit'));
	       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
	       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
	       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

	       it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });

	       // There is a bug in safari and protractor that doesn't like the minus key
	       // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });

	       it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
	     </file>
	   </example>
	*/
	function limitToFilter() {
	  return function(input, limit, begin) {
	    if (Math.abs(Number(limit)) === Infinity) {
	      limit = Number(limit);
	    } else {
	      limit = toInt(limit);
	    }
	    if (isNumberNaN(limit)) return input;

	    if (isNumber(input)) input = input.toString();
	    if (!isArrayLike(input)) return input;

	    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
	    begin = (begin < 0) ? Math.max(0, input.length + begin) : begin;

	    if (limit >= 0) {
	      return sliceFn(input, begin, begin + limit);
	    } else {
	      if (begin === 0) {
	        return sliceFn(input, limit, input.length);
	      } else {
	        return sliceFn(input, Math.max(0, begin + limit), begin);
	      }
	    }
	  };
	}

	function sliceFn(input, begin, end) {
	  if (isString(input)) return input.slice(begin, end);

	  return slice.call(input, begin, end);
	}

	/**
	 * @ngdoc filter
	 * @name orderBy
	 * @kind function
	 *
	 * @description
	 * Returns an array containing the items from the specified `collection`, ordered by a `comparator`
	 * function based on the values computed using the `expression` predicate.
	 *
	 * For example, `[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'` would result in
	 * `[{id: 'bar'}, {id: 'foo'}]`.
	 *
	 * The `collection` can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray,
	 * String, etc).
	 *
	 * The `expression` can be a single predicate, or a list of predicates each serving as a tie-breaker
	 * for the preceding one. The `expression` is evaluated against each item and the output is used
	 * for comparing with other items.
	 *
	 * You can change the sorting order by setting `reverse` to `true`. By default, items are sorted in
	 * ascending order.
	 *
	 * The comparison is done using the `comparator` function. If none is specified, a default, built-in
	 * comparator is used (see below for details - in a nutshell, it compares numbers numerically and
	 * strings alphabetically).
	 *
	 * ### Under the hood
	 *
	 * Ordering the specified `collection` happens in two phases:
	 *
	 * 1. All items are passed through the predicate (or predicates), and the returned values are saved
	 *    along with their type (`string`, `number` etc). For example, an item `{label: 'foo'}`, passed
	 *    through a predicate that extracts the value of the `label` property, would be transformed to:
	 *    ```
	 *    {
	 *      value: 'foo',
	 *      type: 'string',
	 *      index: ...
	 *    }
	 *    ```
	 * 2. The comparator function is used to sort the items, based on the derived values, types and
	 *    indices.
	 *
	 * If you use a custom comparator, it will be called with pairs of objects of the form
	 * `{value: ..., type: '...', index: ...}` and is expected to return `0` if the objects are equal
	 * (as far as the comparator is concerned), `-1` if the 1st one should be ranked higher than the
	 * second, or `1` otherwise.
	 *
	 * In order to ensure that the sorting will be deterministic across platforms, if none of the
	 * specified predicates can distinguish between two items, `orderBy` will automatically introduce a
	 * dummy predicate that returns the item's index as `value`.
	 * (If you are using a custom comparator, make sure it can handle this predicate as well.)
	 *
	 * Finally, in an attempt to simplify things, if a predicate returns an object as the extracted
	 * value for an item, `orderBy` will try to convert that object to a primitive value, before passing
	 * it to the comparator. The following rules govern the conversion:
	 *
	 * 1. If the object has a `valueOf()` method that returns a primitive, its return value will be
	 *    used instead.<br />
	 *    (If the object has a `valueOf()` method that returns another object, then the returned object
	 *    will be used in subsequent steps.)
	 * 2. If the object has a custom `toString()` method (i.e. not the one inherited from `Object`) that
	 *    returns a primitive, its return value will be used instead.<br />
	 *    (If the object has a `toString()` method that returns another object, then the returned object
	 *    will be used in subsequent steps.)
	 * 3. No conversion; the object itself is used.
	 *
	 * ### The default comparator
	 *
	 * The default, built-in comparator should be sufficient for most usecases. In short, it compares
	 * numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to
	 * using their index in the original collection, and sorts values of different types by type.
	 *
	 * More specifically, it follows these steps to determine the relative order of items:
	 *
	 * 1. If the compared values are of different types, compare the types themselves alphabetically.
	 * 2. If both values are of type `string`, compare them alphabetically in a case- and
	 *    locale-insensitive way.
	 * 3. If both values are objects, compare their indices instead.
	 * 4. Otherwise, return:
	 *    -  `0`, if the values are equal (by strict equality comparison, i.e. using `===`).
	 *    - `-1`, if the 1st value is "less than" the 2nd value (compared using the `<` operator).
	 *    -  `1`, otherwise.
	 *
	 * **Note:** If you notice numbers not being sorted as expected, make sure they are actually being
	 *           saved as numbers and not strings.
	 * **Note:** For the purpose of sorting, `null` values are treated as the string `'null'` (i.e.
	 *           `type: 'string'`, `value: 'null'`). This may cause unexpected sort order relative to
	 *           other values.
	 *
	 * @param {Array|ArrayLike} collection - The collection (array or array-like object) to sort.
	 * @param {(Function|string|Array.<Function|string>)=} expression - A predicate (or list of
	 *    predicates) to be used by the comparator to determine the order of elements.
	 *
	 *    Can be one of:
	 *
	 *    - `Function`: A getter function. This function will be called with each item as argument and
	 *      the return value will be used for sorting.
	 *    - `string`: An Angular expression. This expression will be evaluated against each item and the
	 *      result will be used for sorting. For example, use `'label'` to sort by a property called
	 *      `label` or `'label.substring(0, 3)'` to sort by the first 3 characters of the `label`
	 *      property.<br />
	 *      (The result of a constant expression is interpreted as a property name to be used for
	 *      comparison. For example, use `'"special name"'` (note the extra pair of quotes) to sort by a
	 *      property called `special name`.)<br />
	 *      An expression can be optionally prefixed with `+` or `-` to control the sorting direction,
	 *      ascending or descending. For example, `'+label'` or `'-label'`. If no property is provided,
	 *      (e.g. `'+'` or `'-'`), the collection element itself is used in comparisons.
	 *    - `Array`: An array of function and/or string predicates. If a predicate cannot determine the
	 *      relative order of two items, the next predicate is used as a tie-breaker.
	 *
	 * **Note:** If the predicate is missing or empty then it defaults to `'+'`.
	 *
	 * @param {boolean=} reverse - If `true`, reverse the sorting order.
	 * @param {(Function)=} comparator - The comparator function used to determine the relative order of
	 *    value pairs. If omitted, the built-in comparator will be used.
	 *
	 * @returns {Array} - The sorted array.
	 *
	 *
	 * @example
	 * ### Ordering a table with `ngRepeat`
	 *
	 * The example below demonstrates a simple {@link ngRepeat ngRepeat}, where the data is sorted by
	 * age in descending order (expression is set to `'-age'`). The `comparator` is not set, which means
	 * it defaults to the built-in comparator.
	 *
	   <example name="orderBy-static" module="orderByExample1">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <table class="friends">
	           <tr>
	             <th>Name</th>
	             <th>Phone Number</th>
	             <th>Age</th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:'-age'">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample1', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }

	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var names = element.all(by.repeater('friends').column('friend.name'));

	       it('should sort friends by age in reverse order', function() {
	         expect(names.get(0).getText()).toBe('Adam');
	         expect(names.get(1).getText()).toBe('Julie');
	         expect(names.get(2).getText()).toBe('Mike');
	         expect(names.get(3).getText()).toBe('Mary');
	         expect(names.get(4).getText()).toBe('John');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Changing parameters dynamically
	 *
	 * All parameters can be changed dynamically. The next example shows how you can make the columns of
	 * a table sortable, by binding the `expression` and `reverse` parameters to scope properties.
	 *
	   <example name="orderBy-dynamic" module="orderByExample2">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="propertyName = null; reverse = false">Set to unsorted</button>
	         <hr/>
	         <table class="friends">
	           <tr>
	             <th>
	               <button ng-click="sortBy('name')">Name</button>
	               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('phone')">Phone Number</button>
	               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('age')">Age</button>
	               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:propertyName:reverse">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample2', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];

	           $scope.propertyName = 'age';
	           $scope.reverse = true;
	           $scope.friends = friends;

	           $scope.sortBy = function(propertyName) {
	             $scope.reverse = ($scope.propertyName === propertyName) ? !$scope.reverse : false;
	             $scope.propertyName = propertyName;
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }

	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }

	       .sortorder:after {
	         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var unsortButton = element(by.partialButtonText('unsorted'));
	       var nameHeader = element(by.partialButtonText('Name'));
	       var phoneHeader = element(by.partialButtonText('Phone'));
	       var ageHeader = element(by.partialButtonText('Age'));
	       var firstName = element(by.repeater('friends').column('friend.name').row(0));
	       var lastName = element(by.repeater('friends').column('friend.name').row(4));

	       it('should sort friends by some property, when clicking on the column header', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         phoneHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Mary');

	         nameHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('Mike');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	       });

	       it('should sort friends in reverse order, when clicking on the same column', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	       });

	       it('should restore the original order, when clicking "Set to unsorted"', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         unsortButton.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Using `orderBy` inside a controller
	 *
	 * It is also possible to call the `orderBy` filter manually, by injecting `orderByFilter`, and
	 * calling it with the desired parameters. (Alternatively, you could inject the `$filter` factory
	 * and retrieve the `orderBy` filter with `$filter('orderBy')`.)
	 *
	   <example name="orderBy-call-manually" module="orderByExample3">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="sortBy(null)">Set to unsorted</button>
	         <hr/>
	         <table class="friends">
	           <tr>
	             <th>
	               <button ng-click="sortBy('name')">Name</button>
	               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('phone')">Phone Number</button>
	               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('age')">Age</button>
	               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample3', [])
	         .controller('ExampleController', ['$scope', 'orderByFilter', function($scope, orderBy) {
	           var friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];

	           $scope.propertyName = 'age';
	           $scope.reverse = true;
	           $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);

	           $scope.sortBy = function(propertyName) {
	             $scope.reverse = (propertyName !== null && $scope.propertyName === propertyName)
	                 ? !$scope.reverse : false;
	             $scope.propertyName = propertyName;
	             $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }

	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }

	       .sortorder:after {
	         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var unsortButton = element(by.partialButtonText('unsorted'));
	       var nameHeader = element(by.partialButtonText('Name'));
	       var phoneHeader = element(by.partialButtonText('Phone'));
	       var ageHeader = element(by.partialButtonText('Age'));
	       var firstName = element(by.repeater('friends').column('friend.name').row(0));
	       var lastName = element(by.repeater('friends').column('friend.name').row(4));

	       it('should sort friends by some property, when clicking on the column header', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         phoneHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Mary');

	         nameHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('Mike');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	       });

	       it('should sort friends in reverse order, when clicking on the same column', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	       });

	       it('should restore the original order, when clicking "Set to unsorted"', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         unsortButton.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Using a custom comparator
	 *
	 * If you have very specific requirements about the way items are sorted, you can pass your own
	 * comparator function. For example, you might need to compare some strings in a locale-sensitive
	 * way. (When specifying a custom comparator, you also need to pass a value for the `reverse`
	 * argument - passing `false` retains the default sorting order, i.e. ascending.)
	 *
	   <example name="orderBy-custom-comparator" module="orderByExample4">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <div class="friends-container custom-comparator">
	           <h3>Locale-sensitive Comparator</h3>
	           <table class="friends">
	             <tr>
	               <th>Name</th>
	               <th>Favorite Letter</th>
	             </tr>
	             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter':false:localeSensitiveComparator">
	               <td>{{friend.name}}</td>
	               <td>{{friend.favoriteLetter}}</td>
	             </tr>
	           </table>
	         </div>
	         <div class="friends-container default-comparator">
	           <h3>Default Comparator</h3>
	           <table class="friends">
	             <tr>
	               <th>Name</th>
	               <th>Favorite Letter</th>
	             </tr>
	             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter'">
	               <td>{{friend.name}}</td>
	               <td>{{friend.favoriteLetter}}</td>
	             </tr>
	           </table>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample4', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends = [
	             {name: 'John',   favoriteLetter: 'Ä'},
	             {name: 'Mary',   favoriteLetter: 'Ü'},
	             {name: 'Mike',   favoriteLetter: 'Ö'},
	             {name: 'Adam',   favoriteLetter: 'H'},
	             {name: 'Julie',  favoriteLetter: 'Z'}
	           ];

	           $scope.localeSensitiveComparator = function(v1, v2) {
	             // If we don't get strings, just compare by index
	             if (v1.type !== 'string' || v2.type !== 'string') {
	               return (v1.index < v2.index) ? -1 : 1;
	             }

	             // Compare strings alphabetically, taking locale into account
	             return v1.value.localeCompare(v2.value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends-container {
	         display: inline-block;
	         margin: 0 30px;
	       }

	       .friends {
	         border-collapse: collapse;
	       }

	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var container = element(by.css('.custom-comparator'));
	       var names = container.all(by.repeater('friends').column('friend.name'));

	       it('should sort friends by favorite letter (in correct alphabetical order)', function() {
	         expect(names.get(0).getText()).toBe('John');
	         expect(names.get(1).getText()).toBe('Adam');
	         expect(names.get(2).getText()).toBe('Mike');
	         expect(names.get(3).getText()).toBe('Mary');
	         expect(names.get(4).getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 *
	 */
	orderByFilter.$inject = ['$parse'];
	function orderByFilter($parse) {
	  return function(array, sortPredicate, reverseOrder, compareFn) {

	    if (array == null) return array;
	    if (!isArrayLike(array)) {
	      throw minErr('orderBy')('notarray', 'Expected array but received: {0}', array);
	    }

	    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }
	    if (sortPredicate.length === 0) { sortPredicate = ['+']; }

	    var predicates = processPredicates(sortPredicate);

	    var descending = reverseOrder ? -1 : 1;

	    // Define the `compare()` function. Use a default comparator if none is specified.
	    var compare = isFunction(compareFn) ? compareFn : defaultCompare;

	    // The next three lines are a version of a Swartzian Transform idiom from Perl
	    // (sometimes called the Decorate-Sort-Undecorate idiom)
	    // See https://en.wikipedia.org/wiki/Schwartzian_transform
	    var compareValues = Array.prototype.map.call(array, getComparisonObject);
	    compareValues.sort(doComparison);
	    array = compareValues.map(function(item) { return item.value; });

	    return array;

	    function getComparisonObject(value, index) {
	      // NOTE: We are adding an extra `tieBreaker` value based on the element's index.
	      // This will be used to keep the sort stable when none of the input predicates can
	      // distinguish between two elements.
	      return {
	        value: value,
	        tieBreaker: {value: index, type: 'number', index: index},
	        predicateValues: predicates.map(function(predicate) {
	          return getPredicateValue(predicate.get(value), index);
	        })
	      };
	    }

	    function doComparison(v1, v2) {
	      for (var i = 0, ii = predicates.length; i < ii; i++) {
	        var result = compare(v1.predicateValues[i], v2.predicateValues[i]);
	        if (result) {
	          return result * predicates[i].descending * descending;
	        }
	      }

	      return compare(v1.tieBreaker, v2.tieBreaker) * descending;
	    }
	  };

	  function processPredicates(sortPredicates) {
	    return sortPredicates.map(function(predicate) {
	      var descending = 1, get = identity;

	      if (isFunction(predicate)) {
	        get = predicate;
	      } else if (isString(predicate)) {
	        if ((predicate.charAt(0) === '+' || predicate.charAt(0) === '-')) {
	          descending = predicate.charAt(0) === '-' ? -1 : 1;
	          predicate = predicate.substring(1);
	        }
	        if (predicate !== '') {
	          get = $parse(predicate);
	          if (get.constant) {
	            var key = get();
	            get = function(value) { return value[key]; };
	          }
	        }
	      }
	      return {get: get, descending: descending};
	    });
	  }

	  function isPrimitive(value) {
	    switch (typeof value) {
	      case 'number': /* falls through */
	      case 'boolean': /* falls through */
	      case 'string':
	        return true;
	      default:
	        return false;
	    }
	  }

	  function objectValue(value) {
	    // If `valueOf` is a valid function use that
	    if (isFunction(value.valueOf)) {
	      value = value.valueOf();
	      if (isPrimitive(value)) return value;
	    }
	    // If `toString` is a valid function and not the one from `Object.prototype` use that
	    if (hasCustomToString(value)) {
	      value = value.toString();
	      if (isPrimitive(value)) return value;
	    }

	    return value;
	  }

	  function getPredicateValue(value, index) {
	    var type = typeof value;
	    if (value === null) {
	      type = 'string';
	      value = 'null';
	    } else if (type === 'object') {
	      value = objectValue(value);
	    }
	    return {value: value, type: type, index: index};
	  }

	  function defaultCompare(v1, v2) {
	    var result = 0;
	    var type1 = v1.type;
	    var type2 = v2.type;

	    if (type1 === type2) {
	      var value1 = v1.value;
	      var value2 = v2.value;

	      if (type1 === 'string') {
	        // Compare strings case-insensitively
	        value1 = value1.toLowerCase();
	        value2 = value2.toLowerCase();
	      } else if (type1 === 'object') {
	        // For basic objects, use the position of the object
	        // in the collection instead of the value
	        if (isObject(value1)) value1 = v1.index;
	        if (isObject(value2)) value2 = v2.index;
	      }

	      if (value1 !== value2) {
	        result = value1 < value2 ? -1 : 1;
	      }
	    } else {
	      result = type1 < type2 ? -1 : 1;
	    }

	    return result;
	  }
	}

	function ngDirective(directive) {
	  if (isFunction(directive)) {
	    directive = {
	      link: directive
	    };
	  }
	  directive.restrict = directive.restrict || 'AC';
	  return valueFn(directive);
	}

	/**
	 * @ngdoc directive
	 * @name a
	 * @restrict E
	 *
	 * @description
	 * Modifies the default behavior of the html a tag so that the default action is prevented when
	 * the href attribute is empty.
	 *
	 * For dynamically creating `href` attributes for a tags, see the {@link ng.ngHref `ngHref`} directive.
	 */
	var htmlAnchorDirective = valueFn({
	  restrict: 'E',
	  compile: function(element, attr) {
	    if (!attr.href && !attr.xlinkHref) {
	      return function(scope, element) {
	        // If the linked element is not an anchor tag anymore, do nothing
	        if (element[0].nodeName.toLowerCase() !== 'a') return;

	        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
	                   'xlink:href' : 'href';
	        element.on('click', function(event) {
	          // if we have no href url, then don't navigate anywhere.
	          if (!element.attr(href)) {
	            event.preventDefault();
	          }
	        });
	      };
	    }
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngHref
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in an href attribute will
	 * make the link go to the wrong URL if the user clicks it before
	 * Angular has a chance to replace the `{{hash}}` markup with its
	 * value. Until Angular replaces the markup the link will be broken
	 * and will most likely return a 404 error. The `ngHref` directive
	 * solves this problem.
	 *
	 * The wrong way to write it:
	 * ```html
	 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * @element A
	 * @param {template} ngHref any string which can contain `{{}}` markup.
	 *
	 * @example
	 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
	 * in links and their different behaviors:
	    <example name="ng-href">
	      <file name="index.html">
	        <input ng-model="value" /><br />
	        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
	        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
	        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
	        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
	        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
	        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should execute ng-click but not reload when href without value', function() {
	          element(by.id('link-1')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
	          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when href empty string', function() {
	          element(by.id('link-2')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
	          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click and change url when ng-href specified', function() {
	          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

	          element(by.id('link-3')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.

	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/123$/);
	            });
	          }, 5000, 'page should navigate to /123');
	        });

	        it('should execute ng-click but not reload when href empty string and name specified', function() {
	          element(by.id('link-4')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
	          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when no href but name specified', function() {
	          element(by.id('link-5')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
	          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
	        });

	        it('should only change url when only ng-href', function() {
	          element(by.model('value')).clear();
	          element(by.model('value')).sendKeys('6');
	          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

	          element(by.id('link-6')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/6$/);
	            });
	          }, 5000, 'page should navigate to /6');
	        });
	      </file>
	    </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngSrc
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrc` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrc any string which can contain `{{}}` markup.
	 */

	/**
	 * @ngdoc directive
	 * @name ngSrcset
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrcset` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrcset any string which can contain `{{}}` markup.
	 */

	/**
	 * @ngdoc directive
	 * @name ngDisabled
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * This directive sets the `disabled` attribute on the element if the
	 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `disabled`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example name="ng-disabled">
	      <file name="index.html">
	        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
	        <button ng-model="button" ng-disabled="checked">Button</button>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle button', function() {
	          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
	 *     then the `disabled` attribute will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngChecked
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
	 *
	 * Note that this directive should not be used together with {@link ngModel `ngModel`},
	 * as this can lead to unexpected behavior.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `checked`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example name="ng-checked">
	      <file name="index.html">
	        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
	        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should check both checkBoxes', function() {
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
	          element(by.model('master')).click();
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
	 *     then the `checked` attribute will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngReadonly
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `readonly` attribute on the element, if the expression inside `ngReadonly` is truthy.
	 * Note that `readonly` applies only to `input` elements with specific types. [See the input docs on
	 * MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) for more information.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `readonly`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example name="ng-readonly">
	      <file name="index.html">
	        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
	        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle readonly attr', function() {
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
	 *     then special attribute "readonly" will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngSelected
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `selected`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * <div class="alert alert-warning">
	 *   **Note:** `ngSelected` does not interact with the `select` and `ngModel` directives, it only
	 *   sets the `selected` attribute on the element. If you are using `ngModel` on the select, you
	 *   should not use `ngSelected` on the options, as `ngModel` will set the select value and
	 *   selected options.
	 * </div>
	 *
	 * @example
	    <example name="ng-selected">
	      <file name="index.html">
	        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
	        <select aria-label="ngSelected demo">
	          <option>Hello!</option>
	          <option id="greet" ng-selected="selected">Greetings!</option>
	        </select>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should select Greetings!', function() {
	          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
	          element(by.model('selected')).click();
	          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element OPTION
	 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
	 *     then special attribute "selected" will be set on the element
	 */

	/**
	 * @ngdoc directive
	 * @name ngOpen
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `open`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * ## A note about browser compatibility
	 *
	 * Edge, Firefox, and Internet Explorer do not support the `details` element, it is
	 * recommended to use {@link ng.ngShow} and {@link ng.ngHide} instead.
	 *
	 * @example
	     <example name="ng-open">
	       <file name="index.html">
	         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
	         <details id="details" ng-open="open">
	            <summary>Show/Hide me</summary>
	         </details>
	       </file>
	       <file name="protractor.js" type="protractor">
	         it('should toggle open', function() {
	           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
	           element(by.model('open')).click();
	           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
	         });
	       </file>
	     </example>
	 *
	 * @element DETAILS
	 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
	 *     then special attribute "open" will be set on the element
	 */

	var ngAttributeAliasDirectives = {};

	// boolean attrs are evaluated
	forEach(BOOLEAN_ATTR, function(propName, attrName) {
	  // binding to multiple is not supported
	  if (propName === 'multiple') return;

	  function defaultLinkFn(scope, element, attr) {
	    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
	      attr.$set(attrName, !!value);
	    });
	  }

	  var normalized = directiveNormalize('ng-' + attrName);
	  var linkFn = defaultLinkFn;

	  if (propName === 'checked') {
	    linkFn = function(scope, element, attr) {
	      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
	      if (attr.ngModel !== attr[normalized]) {
	        defaultLinkFn(scope, element, attr);
	      }
	    };
	  }

	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      restrict: 'A',
	      priority: 100,
	      link: linkFn
	    };
	  };
	});

	// aliased input attrs are evaluated
	forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
	  ngAttributeAliasDirectives[ngAttr] = function() {
	    return {
	      priority: 100,
	      link: function(scope, element, attr) {
	        //special case ngPattern when a literal regular expression value
	        //is used as the expression (this way we don't have to watch anything).
	        if (ngAttr === 'ngPattern' && attr.ngPattern.charAt(0) === '/') {
	          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
	          if (match) {
	            attr.$set('ngPattern', new RegExp(match[1], match[2]));
	            return;
	          }
	        }

	        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
	          attr.$set(ngAttr, value);
	        });
	      }
	    };
	  };
	});

	// ng-src, ng-srcset, ng-href are interpolated
	forEach(['src', 'srcset', 'href'], function(attrName) {
	  var normalized = directiveNormalize('ng-' + attrName);
	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      priority: 99, // it needs to run after the attributes are interpolated
	      link: function(scope, element, attr) {
	        var propName = attrName,
	            name = attrName;

	        if (attrName === 'href' &&
	            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
	          name = 'xlinkHref';
	          attr.$attr[name] = 'xlink:href';
	          propName = null;
	        }

	        attr.$observe(normalized, function(value) {
	          if (!value) {
	            if (attrName === 'href') {
	              attr.$set(name, null);
	            }
	            return;
	          }

	          attr.$set(name, value);

	          // Support: IE 9-11 only
	          // On IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
	          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
	          // to set the property as well to achieve the desired effect.
	          // We use attr[attrName] value since $set can sanitize the url.
	          if (msie && propName) element.prop(propName, attr[name]);
	        });
	      }
	    };
	  };
	});

	/* global -nullFormCtrl, -PENDING_CLASS, -SUBMITTED_CLASS
	 */
	var nullFormCtrl = {
	  $addControl: noop,
	  $$renameControl: nullFormRenameControl,
	  $removeControl: noop,
	  $setValidity: noop,
	  $setDirty: noop,
	  $setPristine: noop,
	  $setSubmitted: noop
	},
	PENDING_CLASS = 'ng-pending',
	SUBMITTED_CLASS = 'ng-submitted';

	function nullFormRenameControl(control, name) {
	  control.$name = name;
	}

	/**
	 * @ngdoc type
	 * @name form.FormController
	 *
	 * @property {boolean} $pristine True if user has not interacted with the form yet.
	 * @property {boolean} $dirty True if user has already interacted with the form.
	 * @property {boolean} $valid True if all of the containing forms and controls are valid.
	 * @property {boolean} $invalid True if at least one containing control or form is invalid.
	 * @property {boolean} $pending True if at least one containing control or form is pending.
	 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
	 *
	 * @property {Object} $error Is an object hash, containing references to controls or
	 *  forms with failing validators, where:
	 *
	 *  - keys are validation tokens (error names),
	 *  - values are arrays of controls or forms that have a failing validator for given error name.
	 *
	 *  Built-in validation tokens:
	 *
	 *  - `email`
	 *  - `max`
	 *  - `maxlength`
	 *  - `min`
	 *  - `minlength`
	 *  - `number`
	 *  - `pattern`
	 *  - `required`
	 *  - `url`
	 *  - `date`
	 *  - `datetimelocal`
	 *  - `time`
	 *  - `week`
	 *  - `month`
	 *
	 * @description
	 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
	 * such as being valid/invalid or dirty/pristine.
	 *
	 * Each {@link ng.directive:form form} directive creates an instance
	 * of `FormController`.
	 *
	 */
	//asks for $scope to fool the BC controller module
	FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
	function FormController($element, $attrs, $scope, $animate, $interpolate) {
	  this.$$controls = [];

	  // init state
	  this.$error = {};
	  this.$$success = {};
	  this.$pending = undefined;
	  this.$name = $interpolate($attrs.name || $attrs.ngForm || '')($scope);
	  this.$dirty = false;
	  this.$pristine = true;
	  this.$valid = true;
	  this.$invalid = false;
	  this.$submitted = false;
	  this.$$parentForm = nullFormCtrl;

	  this.$$element = $element;
	  this.$$animate = $animate;

	  setupValidity(this);
	}

	FormController.prototype = {
	  /**
	   * @ngdoc method
	   * @name form.FormController#$rollbackViewValue
	   *
	   * @description
	   * Rollback all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is typically needed by the reset button of
	   * a form that uses `ng-model-options` to pend updates.
	   */
	  $rollbackViewValue: function() {
	    forEach(this.$$controls, function(control) {
	      control.$rollbackViewValue();
	    });
	  },

	  /**
	   * @ngdoc method
	   * @name form.FormController#$commitViewValue
	   *
	   * @description
	   * Commit all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  $commitViewValue: function() {
	    forEach(this.$$controls, function(control) {
	      control.$commitViewValue();
	    });
	  },

	  /**
	   * @ngdoc method
	   * @name form.FormController#$addControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Register a control with the form. Input elements using ngModelController do this automatically
	   * when they are linked.
	   *
	   * Note that the current state of the control will not be reflected on the new parent form. This
	   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
	   * state.
	   *
	   * However, if the method is used programmatically, for example by adding dynamically created controls,
	   * or controls that have been previously removed without destroying their corresponding DOM element,
	   * it's the developers responsibility to make sure the current state propagates to the parent form.
	   *
	   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
	   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
	   */
	  $addControl: function(control) {
	    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
	    // and not added to the scope.  Now we throw an error.
	    assertNotHasOwnProperty(control.$name, 'input');
	    this.$$controls.push(control);

	    if (control.$name) {
	      this[control.$name] = control;
	    }

	    control.$$parentForm = this;
	  },

	  // Private API: rename a form control
	  $$renameControl: function(control, newName) {
	    var oldName = control.$name;

	    if (this[oldName] === control) {
	      delete this[oldName];
	    }
	    this[newName] = control;
	    control.$name = newName;
	  },

	  /**
	   * @ngdoc method
	   * @name form.FormController#$removeControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Deregister a control from the form.
	   *
	   * Input elements using ngModelController do this automatically when they are destroyed.
	   *
	   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
	   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
	   * different from case to case. For example, removing the only `$dirty` control from a form may or
	   * may not mean that the form is still `$dirty`.
	   */
	  $removeControl: function(control) {
	    if (control.$name && this[control.$name] === control) {
	      delete this[control.$name];
	    }
	    forEach(this.$pending, function(value, name) {
	      // eslint-disable-next-line no-invalid-this
	      this.$setValidity(name, null, control);
	    }, this);
	    forEach(this.$error, function(value, name) {
	      // eslint-disable-next-line no-invalid-this
	      this.$setValidity(name, null, control);
	    }, this);
	    forEach(this.$$success, function(value, name) {
	      // eslint-disable-next-line no-invalid-this
	      this.$setValidity(name, null, control);
	    }, this);

	    arrayRemove(this.$$controls, control);
	    control.$$parentForm = nullFormCtrl;
	  },

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setDirty
	   *
	   * @description
	   * Sets the form to a dirty state.
	   *
	   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
	   * state (ng-dirty class). This method will also propagate to parent forms.
	   */
	  $setDirty: function() {
	    this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);
	    this.$$animate.addClass(this.$$element, DIRTY_CLASS);
	    this.$dirty = true;
	    this.$pristine = false;
	    this.$$parentForm.$setDirty();
	  },

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setPristine
	   *
	   * @description
	   * Sets the form to its pristine state.
	   *
	   * This method sets the form's `$pristine` state to true, the `$dirty` state to false, removes
	   * the `ng-dirty` class and adds the `ng-pristine` class. Additionally, it sets the `$submitted`
	   * state to false.
	   *
	   * This method will also propagate to all the controls contained in this form.
	   *
	   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
	   * saving or resetting it.
	   */
	  $setPristine: function() {
	    this.$$animate.setClass(this.$$element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
	    this.$dirty = false;
	    this.$pristine = true;
	    this.$submitted = false;
	    forEach(this.$$controls, function(control) {
	      control.$setPristine();
	    });
	  },

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setUntouched
	   *
	   * @description
	   * Sets the form to its untouched state.
	   *
	   * This method can be called to remove the 'ng-touched' class and set the form controls to their
	   * untouched state (ng-untouched class).
	   *
	   * Setting a form controls back to their untouched state is often useful when setting the form
	   * back to its pristine state.
	   */
	  $setUntouched: function() {
	    forEach(this.$$controls, function(control) {
	      control.$setUntouched();
	    });
	  },

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setSubmitted
	   *
	   * @description
	   * Sets the form to its submitted state.
	   */
	  $setSubmitted: function() {
	    this.$$animate.addClass(this.$$element, SUBMITTED_CLASS);
	    this.$submitted = true;
	    this.$$parentForm.$setSubmitted();
	  }
	};

	/**
	 * @ngdoc method
	 * @name form.FormController#$setValidity
	 *
	 * @description
	 * Sets the validity of a form control.
	 *
	 * This method will also propagate to parent forms.
	 */
	addSetValidityMethod({
	  clazz: FormController,
	  set: function(object, property, controller) {
	    var list = object[property];
	    if (!list) {
	      object[property] = [controller];
	    } else {
	      var index = list.indexOf(controller);
	      if (index === -1) {
	        list.push(controller);
	      }
	    }
	  },
	  unset: function(object, property, controller) {
	    var list = object[property];
	    if (!list) {
	      return;
	    }
	    arrayRemove(list, controller);
	    if (list.length === 0) {
	      delete object[property];
	    }
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngForm
	 * @restrict EAC
	 *
	 * @description
	 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
	 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
	 * sub-group of controls needs to be determined.
	 *
	 * Note: the purpose of `ngForm` is to group controls,
	 * but not to be a replacement for the `<form>` tag with all of its capabilities
	 * (e.g. posting to the server, ...).
	 *
	 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 *
	 */

	 /**
	 * @ngdoc directive
	 * @name form
	 * @restrict E
	 *
	 * @description
	 * Directive that instantiates
	 * {@link form.FormController FormController}.
	 *
	 * If the `name` attribute is specified, the form controller is published onto the current scope under
	 * this name.
	 *
	 * # Alias: {@link ng.directive:ngForm `ngForm`}
	 *
	 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
	 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
	 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
	 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
	 * of controls needs to be determined.
	 *
	 * # CSS classes
	 *  - `ng-valid` is set if the form is valid.
	 *  - `ng-invalid` is set if the form is invalid.
	 *  - `ng-pending` is set if the form is pending.
	 *  - `ng-pristine` is set if the form is pristine.
	 *  - `ng-dirty` is set if the form is dirty.
	 *  - `ng-submitted` is set if the form was submitted.
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 *
	 * # Submitting a form and preventing the default action
	 *
	 * Since the role of forms in client-side Angular applications is different than in classical
	 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
	 * page reload that sends the data to the server. Instead some javascript logic should be triggered
	 * to handle the form submission in an application-specific way.
	 *
	 * For this reason, Angular prevents the default action (form submission to the server) unless the
	 * `<form>` element has an `action` attribute specified.
	 *
	 * You can use one of the following two ways to specify what javascript method should be called when
	 * a form is submitted:
	 *
	 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
	 * - {@link ng.directive:ngClick ngClick} directive on the first
	  *  button or input field of type submit (input[type=submit])
	 *
	 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
	 * or {@link ng.directive:ngClick ngClick} directives.
	 * This is because of the following form submission rules in the HTML specification:
	 *
	 * - If a form has only one input field then hitting enter in this field triggers form submit
	 * (`ngSubmit`)
	 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
	 * doesn't trigger submit
	 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
	 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
	 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
	 *
	 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
	 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * ## Animation Hooks
	 *
	 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
	 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
	 * other validations that are performed within the form. Animations in ngForm are similar to how
	 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
	 * as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style a form element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	    <example name="ng-form" deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
	      <file name="index.html">
	       <script>
	         angular.module('formExample', [])
	           .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
	       </script>
	       <style>
	        .my-form {
	          transition:all linear 0.5s;
	          background: transparent;
	        }
	        .my-form.ng-invalid {
	          background: red;
	        }
	       </style>
	       <form name="myForm" ng-controller="FormController" class="my-form">
	         userType: <input name="input" ng-model="userType" required>
	         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
	         <code>userType = {{userType}}</code><br>
	         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
	         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
	         <code>myForm.$valid = {{myForm.$valid}}</code><br>
	         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));

	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });

	        it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));

	          userInput.clear();
	          userInput.sendKeys('');

	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 *
	 * @param {string=} name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 */
	var formDirectiveFactory = function(isNgForm) {
	  return ['$timeout', '$parse', function($timeout, $parse) {
	    var formDirective = {
	      name: 'form',
	      restrict: isNgForm ? 'EAC' : 'E',
	      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form
	      controller: FormController,
	      compile: function ngFormCompile(formElement, attr) {
	        // Setup initial state of the control
	        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

	        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);

	        return {
	          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
	            var controller = ctrls[0];

	            // if `action` attr is not present on the form, prevent the default action (submission)
	            if (!('action' in attr)) {
	              // we can't use jq events because if a form is destroyed during submission the default
	              // action is not prevented. see #1238
	              //
	              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
	              // page reload if the form was destroyed by submission of the form via a click handler
	              // on a button in the form. Looks like an IE9 specific bug.
	              var handleFormSubmission = function(event) {
	                scope.$apply(function() {
	                  controller.$commitViewValue();
	                  controller.$setSubmitted();
	                });

	                event.preventDefault();
	              };

	              formElement[0].addEventListener('submit', handleFormSubmission);

	              // unregister the preventDefault listener so that we don't not leak memory but in a
	              // way that will achieve the prevention of the default action.
	              formElement.on('$destroy', function() {
	                $timeout(function() {
	                  formElement[0].removeEventListener('submit', handleFormSubmission);
	                }, 0, false);
	              });
	            }

	            var parentFormCtrl = ctrls[1] || controller.$$parentForm;
	            parentFormCtrl.$addControl(controller);

	            var setter = nameAttr ? getSetter(controller.$name) : noop;

	            if (nameAttr) {
	              setter(scope, controller);
	              attr.$observe(nameAttr, function(newValue) {
	                if (controller.$name === newValue) return;
	                setter(scope, undefined);
	                controller.$$parentForm.$$renameControl(controller, newValue);
	                setter = getSetter(controller.$name);
	                setter(scope, controller);
	              });
	            }
	            formElement.on('$destroy', function() {
	              controller.$$parentForm.$removeControl(controller);
	              setter(scope, undefined);
	              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
	            });
	          }
	        };
	      }
	    };

	    return formDirective;

	    function getSetter(expression) {
	      if (expression === '') {
	        //create an assignable expression, so forms with an empty name can be renamed later
	        return $parse('this[""]').assign;
	      }
	      return $parse(expression).assign || noop;
	    }
	  }];
	};

	var formDirective = formDirectiveFactory();
	var ngFormDirective = formDirectiveFactory(true);



	// helper methods
	function setupValidity(instance) {
	  instance.$$classCache = {};
	  instance.$$classCache[INVALID_CLASS] = !(instance.$$classCache[VALID_CLASS] = instance.$$element.hasClass(VALID_CLASS));
	}
	function addSetValidityMethod(context) {
	  var clazz = context.clazz,
	      set = context.set,
	      unset = context.unset;

	  clazz.prototype.$setValidity = function(validationErrorKey, state, controller) {
	    if (isUndefined(state)) {
	      createAndSet(this, '$pending', validationErrorKey, controller);
	    } else {
	      unsetAndCleanup(this, '$pending', validationErrorKey, controller);
	    }
	    if (!isBoolean(state)) {
	      unset(this.$error, validationErrorKey, controller);
	      unset(this.$$success, validationErrorKey, controller);
	    } else {
	      if (state) {
	        unset(this.$error, validationErrorKey, controller);
	        set(this.$$success, validationErrorKey, controller);
	      } else {
	        set(this.$error, validationErrorKey, controller);
	        unset(this.$$success, validationErrorKey, controller);
	      }
	    }
	    if (this.$pending) {
	      cachedToggleClass(this, PENDING_CLASS, true);
	      this.$valid = this.$invalid = undefined;
	      toggleValidationCss(this, '', null);
	    } else {
	      cachedToggleClass(this, PENDING_CLASS, false);
	      this.$valid = isObjectEmpty(this.$error);
	      this.$invalid = !this.$valid;
	      toggleValidationCss(this, '', this.$valid);
	    }

	    // re-read the state as the set/unset methods could have
	    // combined state in this.$error[validationError] (used for forms),
	    // where setting/unsetting only increments/decrements the value,
	    // and does not replace it.
	    var combinedState;
	    if (this.$pending && this.$pending[validationErrorKey]) {
	      combinedState = undefined;
	    } else if (this.$error[validationErrorKey]) {
	      combinedState = false;
	    } else if (this.$$success[validationErrorKey]) {
	      combinedState = true;
	    } else {
	      combinedState = null;
	    }

	    toggleValidationCss(this, validationErrorKey, combinedState);
	    this.$$parentForm.$setValidity(validationErrorKey, combinedState, this);
	  };

	  function createAndSet(ctrl, name, value, controller) {
	    if (!ctrl[name]) {
	      ctrl[name] = {};
	    }
	    set(ctrl[name], value, controller);
	  }

	  function unsetAndCleanup(ctrl, name, value, controller) {
	    if (ctrl[name]) {
	      unset(ctrl[name], value, controller);
	    }
	    if (isObjectEmpty(ctrl[name])) {
	      ctrl[name] = undefined;
	    }
	  }

	  function cachedToggleClass(ctrl, className, switchValue) {
	    if (switchValue && !ctrl.$$classCache[className]) {
	      ctrl.$$animate.addClass(ctrl.$$element, className);
	      ctrl.$$classCache[className] = true;
	    } else if (!switchValue && ctrl.$$classCache[className]) {
	      ctrl.$$animate.removeClass(ctrl.$$element, className);
	      ctrl.$$classCache[className] = false;
	    }
	  }

	  function toggleValidationCss(ctrl, validationErrorKey, isValid) {
	    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

	    cachedToggleClass(ctrl, VALID_CLASS + validationErrorKey, isValid === true);
	    cachedToggleClass(ctrl, INVALID_CLASS + validationErrorKey, isValid === false);
	  }
	}

	function isObjectEmpty(obj) {
	  if (obj) {
	    for (var prop in obj) {
	      if (obj.hasOwnProperty(prop)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	/* global
	  VALID_CLASS: false,
	  INVALID_CLASS: false,
	  PRISTINE_CLASS: false,
	  DIRTY_CLASS: false,
	  ngModelMinErr: false
	*/

	// Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
	var ISO_DATE_REGEXP = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;
	// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
	// Note: We are being more lenient, because browsers are too.
	//   1. Scheme
	//   2. Slashes
	//   3. Username
	//   4. Password
	//   5. Hostname
	//   6. Port
	//   7. Path
	//   8. Query
	//   9. Fragment
	//                 1111111111111111 222   333333    44444        55555555555555555555555     666     77777777     8888888     999
	var URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;
	// eslint-disable-next-line max-len
	var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
	var NUMBER_REGEXP = /^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
	var DATE_REGEXP = /^(\d{4,})-(\d{2})-(\d{2})$/;
	var DATETIMELOCAL_REGEXP = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
	var WEEK_REGEXP = /^(\d{4,})-W(\d\d)$/;
	var MONTH_REGEXP = /^(\d{4,})-(\d\d)$/;
	var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

	var PARTIAL_VALIDATION_EVENTS = 'keydown wheel mousedown';
	var PARTIAL_VALIDATION_TYPES = createMap();
	forEach('date,datetime-local,month,time,week'.split(','), function(type) {
	  PARTIAL_VALIDATION_TYPES[type] = true;
	});

	var inputType = {

	  /**
	   * @ngdoc input
	   * @name input[text]
	   *
	   * @description
	   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Adds `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	   *    This parameter is ignored for input[type=password] controls, which will never trim the
	   *    input.
	   *
	   * @example
	      <example name="text-input-directive" module="textInputExample">
	        <file name="index.html">
	         <script>
	           angular.module('textInputExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 text: 'guest',
	                 word: /^\s*\w*\s*$/
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Single word:
	             <input type="text" name="input" ng-model="example.text"
	                    ng-pattern="example.word" required ng-trim="false">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.pattern">
	               Single word only!</span>
	           </div>
	           <code>text = {{example.text}}</code><br/>
	           <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br/>
	           <code>myForm.input.$error = {{myForm.input.$error}}</code><br/>
	           <code>myForm.$valid = {{myForm.$valid}}</code><br/>
	           <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('example.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('guest');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');

	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if multi word', function() {
	            input.clear();
	            input.sendKeys('hello world');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'text': textInputType,

	    /**
	     * @ngdoc input
	     * @name input[date]
	     *
	     * @description
	     * Input with date validation and transformation. In browsers that do not yet support
	     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
	     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
	     * modern browsers do not yet support this input type, it is important to provide cues to users on the
	     * expected input format via a placeholder or label.
	     *
	     * The model must always be a Date object, otherwise Angular will throw an error.
	     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	     *
	     * The timezone to be used to read/write the `Date` instance in the model can be defined using
	     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	     *
	     * @param {string} ngModel Assignable angular expression to data-bind to.
	     * @param {string=} name Property name of the form under which the control is published.
	     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
	     *   constraint validation.
	     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
	     *   constraint validation.
	     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
	     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
	     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	     * @param {string=} required Sets `required` validation error key if the value is not entered.
	     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	     *    `required` when you want to data-bind to the `required` attribute.
	     * @param {string=} ngChange Angular expression to be executed when input changes due to user
	     *    interaction with the input element.
	     *
	     * @example
	     <example name="date-input-directive" module="dateInputExample">
	     <file name="index.html">
	       <script>
	          angular.module('dateInputExample', [])
	            .controller('DateController', ['$scope', function($scope) {
	              $scope.example = {
	                value: new Date(2013, 9, 22)
	              };
	            }]);
	       </script>
	       <form name="myForm" ng-controller="DateController as dateCtrl">
	          <label for="exampleInput">Pick a date in 2013:</label>
	          <input type="date" id="exampleInput" name="input" ng-model="example.value"
	              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
	          <div role="alert">
	            <span class="error" ng-show="myForm.input.$error.required">
	                Required!</span>
	            <span class="error" ng-show="myForm.input.$error.date">
	                Not a valid date!</span>
	           </div>
	           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	       </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
	        var valid = element(by.binding('myForm.input.$valid'));

	        // currently protractor/webdriver does not support
	        // sending keys to all known HTML5 input controls
	        // for various browsers (see https://github.com/angular/protractor/issues/562).
	        function setInput(val) {
	          // set the value of the element and force validation.
	          var scr = "var ipt = document.getElementById('exampleInput'); " +
	          "ipt.value = '" + val + "';" +
	          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	          browser.executeScript(scr);
	        }

	        it('should initialize to model', function() {
	          expect(value.getText()).toContain('2013-10-22');
	          expect(valid.getText()).toContain('myForm.input.$valid = true');
	        });

	        it('should be invalid if empty', function() {
	          setInput('');
	          expect(value.getText()).toEqual('value =');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });

	        it('should be invalid if over max', function() {
	          setInput('2015-01-01');
	          expect(value.getText()).toContain('');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	     </file>
	     </example>
	     */
	  'date': createDateInputType('date', DATE_REGEXP,
	         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
	         'yyyy-MM-dd'),

	   /**
	    * @ngdoc input
	    * @name input[datetime-local]
	    *
	    * @description
	    * Input with datetime validation and transformation. In browsers that do not yet support
	    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `min` will also add native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `max` will also add native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="datetimelocal-input-directive" module="dateExample">
	    <file name="index.html">
	      <script>
	        angular.module('dateExample', [])
	          .controller('DateController', ['$scope', function($scope) {
	            $scope.example = {
	              value: new Date(2010, 11, 28, 14, 57)
	            };
	          }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a date between in 2013:</label>
	        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.datetimelocal">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2010-12-28T14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-01-01T23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
	      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
	      'yyyy-MM-ddTHH:mm:ss.sss'),

	  /**
	   * @ngdoc input
	   * @name input[time]
	   *
	   * @description
	   * Input with time validation and transformation. In browsers that do not yet support
	   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
	   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
	   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
	   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="time-input-directive" module="timeExample">
	   <file name="index.html">
	     <script>
	      angular.module('timeExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(1970, 0, 1, 14, 57, 0)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a time between 8am and 5pm:</label>
	        <input type="time" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.time">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'time': createDateInputType('time', TIME_REGEXP,
	      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
	     'HH:mm:ss.sss'),

	   /**
	    * @ngdoc input
	    * @name input[week]
	    *
	    * @description
	    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
	    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * week format (yyyy-W##), for example: `2013-W02`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
	    *   native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
	    *   native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="week-input-directive" module="weekExample">
	    <file name="index.html">
	      <script>
	      angular.module('weekExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 0, 3)
	          };
	        }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label>Pick a date between in 2013:
	          <input id="exampleInput" type="week" name="input" ng-model="example.value"
	                 placeholder="YYYY-W##" min="2012-W32"
	                 max="2013-W52" required />
	        </label>
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.week">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-Www"'));
	      var valid = element(by.binding('myForm.input.$valid'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-W01');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-W01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

	  /**
	   * @ngdoc input
	   * @name input[month]
	   *
	   * @description
	   * Input with month validation and transformation. In browsers that do not yet support
	   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * month format (yyyy-MM), for example: `2009-01`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   * If the model is not set to the first of the month, the next view to model update will set it
	   * to the first of the month.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.

	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="month-input-directive" module="monthExample">
	   <file name="index.html">
	     <script>
	      angular.module('monthExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 9, 1)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	       <label for="exampleInput">Pick a month in 2013:</label>
	       <input id="exampleInput" type="month" name="input" ng-model="example.value"
	          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
	       <div role="alert">
	         <span class="error" ng-show="myForm.input.$error.required">
	            Required!</span>
	         <span class="error" ng-show="myForm.input.$error.month">
	            Not a valid month!</span>
	       </div>
	       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
	       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM"'));
	      var valid = element(by.binding('myForm.input.$valid'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-10');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'month': createDateInputType('month', MONTH_REGEXP,
	     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
	     'yyyy-MM'),

	  /**
	   * @ngdoc input
	   * @name input[number]
	   *
	   * @description
	   * Text input with number validation and transformation. Sets the `number` validation
	   * error if not a valid number.
	   *
	   * <div class="alert alert-warning">
	   * The model must always be of type `number` otherwise Angular will throw an error.
	   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
	   * error docs for more information and an example of how to convert your model if necessary.
	   * </div>
	   *
	   * ## Issues with HTML5 constraint validation
	   *
	   * In browsers that follow the
	   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
	   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
	   * If a non-number is entered in the input, the browser will report the value as an empty string,
	   * which means the view / model values in `ngModel` and subsequently the scope value
	   * will also be an empty string.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *    Can be interpolated.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *    Can be interpolated.
	   * @param {string=} ngMin Like `min`, sets the `min` validation error key if the value entered is less than `ngMin`,
	   *    but does not trigger HTML5 native validation. Takes an expression.
	   * @param {string=} ngMax Like `max`, sets the `max` validation error key if the value entered is greater than `ngMax`,
	   *    but does not trigger HTML5 native validation. Takes an expression.
	   * @param {string=} step Sets the `step` validation error key if the value entered does not fit the `step` constraint.
	   *    Can be interpolated.
	   * @param {string=} ngStep Like `step`, sets the `step` validation error key if the value entered does not fit the `ngStep` constraint,
	   *    but does not trigger HTML5 native validation. Takes an expression.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="number-input-directive" module="numberExample">
	        <file name="index.html">
	         <script>
	           angular.module('numberExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 value: 12
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Number:
	             <input type="number" name="input" ng-model="example.value"
	                    min="0" max="99" required>
	          </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.number">
	               Not valid number!</span>
	           </div>
	           <tt>value = {{example.value}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var value = element(by.binding('example.value'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.value'));

	          it('should initialize to model', function() {
	            expect(value.getText()).toContain('12');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if over max', function() {
	            input.clear();
	            input.sendKeys('123');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'number': numberInputType,


	  /**
	   * @ngdoc input
	   * @name input[url]
	   *
	   * @description
	   * Text input with URL validation. Sets the `url` validation error key if the content is not a
	   * valid URL.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
	   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
	   * the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="url-input-directive" module="urlExample">
	        <file name="index.html">
	         <script>
	           angular.module('urlExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.url = {
	                 text: 'http://google.com'
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>URL:
	             <input type="url" name="input" ng-model="url.text" required>
	           <label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.url">
	               Not valid url!</span>
	           </div>
	           <tt>text = {{url.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('url.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('url.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('http://google.com');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');

	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if not url', function() {
	            input.clear();
	            input.sendKeys('box');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'url': urlInputType,


	  /**
	   * @ngdoc input
	   * @name input[email]
	   *
	   * @description
	   * Text input with email validation. Sets the `email` validation error key if not a valid email
	   * address.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
	   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
	   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="email-input-directive" module="emailExample">
	        <file name="index.html">
	         <script>
	           angular.module('emailExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.email = {
	                 text: 'me@example.com'
	               };
	             }]);
	         </script>
	           <form name="myForm" ng-controller="ExampleController">
	             <label>Email:
	               <input type="email" name="input" ng-model="email.text" required>
	             </label>
	             <div role="alert">
	               <span class="error" ng-show="myForm.input.$error.required">
	                 Required!</span>
	               <span class="error" ng-show="myForm.input.$error.email">
	                 Not valid email!</span>
	             </div>
	             <tt>text = {{email.text}}</tt><br/>
	             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
	           </form>
	         </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('email.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('email.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('me@example.com');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if not email', function() {
	            input.clear();
	            input.sendKeys('xxx');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'email': emailInputType,


	  /**
	   * @ngdoc input
	   * @name input[radio]
	   *
	   * @description
	   * HTML radio button.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string} value The value to which the `ngModel` expression should be set when selected.
	   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
	   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
	   *    is selected. Should be used instead of the `value` attribute if you need
	   *    a non-string `ngModel` (`boolean`, `array`, ...).
	   *
	   * @example
	      <example name="radio-input-directive" module="radioExample">
	        <file name="index.html">
	         <script>
	           angular.module('radioExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.color = {
	                 name: 'blue'
	               };
	               $scope.specialValue = {
	                 "id": "12345",
	                 "value": "green"
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>
	             <input type="radio" ng-model="color.name" value="red">
	             Red
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" ng-value="specialValue">
	             Green
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" value="blue">
	             Blue
	           </label><br/>
	           <tt>color = {{color.name | json}}</tt><br/>
	          </form>
	          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var inputs = element.all(by.model('color.name'));
	            var color = element(by.binding('color.name'));

	            expect(color.getText()).toContain('blue');

	            inputs.get(0).click();
	            expect(color.getText()).toContain('red');

	            inputs.get(1).click();
	            expect(color.getText()).toContain('green');
	          });
	        </file>
	      </example>
	   */
	  'radio': radioInputType,

	  /**
	   * @ngdoc input
	   * @name input[range]
	   *
	   * @description
	   * Native range input with validation and transformation.
	   *
	   * The model for the range input must always be a `Number`.
	   *
	   * IE9 and other browsers that do not support the `range` type fall back
	   * to a text input without any default values for `min`, `max` and `step`. Model binding,
	   * validation and number parsing are nevertheless supported.
	   *
	   * Browsers that support range (latest Chrome, Safari, Firefox, Edge) treat `input[range]`
	   * in a way that never allows the input to hold an invalid value. That means:
	   * - any non-numerical value is set to `(max + min) / 2`.
	   * - any numerical value that is less than the current min val, or greater than the current max val
	   * is set to the min / max val respectively.
	   * - additionally, the current `step` is respected, so the nearest value that satisfies a step
	   * is used.
	   *
	   * See the [HTML Spec on input[type=range]](https://www.w3.org/TR/html5/forms.html#range-state-(type=range))
	   * for more info.
	   *
	   * This has the following consequences for Angular:
	   *
	   * Since the element value should always reflect the current model value, a range input
	   * will set the bound ngModel expression to the value that the browser has set for the
	   * input element. For example, in the following input `<input type="range" ng-model="model.value">`,
	   * if the application sets `model.value = null`, the browser will set the input to `'50'`.
	   * Angular will then set the model to `50`, to prevent input and model value being out of sync.
	   *
	   * That means the model for range will immediately be set to `50` after `ngModel` has been
	   * initialized. It also means a range input can never have the required error.
	   *
	   * This does not only affect changes to the model value, but also to the values of the `min`,
	   * `max`, and `step` attributes. When these change in a way that will cause the browser to modify
	   * the input value, Angular will also update the model value.
	   *
	   * Automatic value adjustment also means that a range input element can never have the `required`,
	   * `min`, or `max` errors.
	   *
	   * However, `step` is currently only fully implemented by Firefox. Other browsers have problems
	   * when the step value changes dynamically - they do not adjust the element value correctly, but
	   * instead may set the `stepMismatch` error. If that's the case, the Angular will set the `step`
	   * error on the input, and set the model to `undefined`.
	   *
	   * Note that `input[range]` is not compatible with`ngMax`, `ngMin`, and `ngStep`, because they do
	   * not set the `min` and `max` attributes, which means that the browser won't automatically adjust
	   * the input value based on their values, and will always assume min = 0, max = 100, and step = 1.
	   *
	   * @param {string}  ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation to ensure that the value entered is greater
	   *                  than `min`. Can be interpolated.
	   * @param {string=} max Sets the `max` validation to ensure that the value entered is less than `max`.
	   *                  Can be interpolated.
	   * @param {string=} step Sets the `step` validation to ensure that the value entered matches the `step`
	   *                  Can be interpolated.
	   * @param {string=} ngChange Angular expression to be executed when the ngModel value changes due
	   *                  to user interaction with the input element.
	   * @param {expression=} ngChecked If the expression is truthy, then the `checked` attribute will be set on the
	   *                      element. **Note** : `ngChecked` should not be used alongside `ngModel`.
	   *                      Checkout {@link ng.directive:ngChecked ngChecked} for usage.
	   *
	   * @example
	      <example name="range-input-directive" module="rangeExample">
	        <file name="index.html">
	          <script>
	            angular.module('rangeExample', [])
	              .controller('ExampleController', ['$scope', function($scope) {
	                $scope.value = 75;
	                $scope.min = 10;
	                $scope.max = 90;
	              }]);
	          </script>
	          <form name="myForm" ng-controller="ExampleController">

	            Model as range: <input type="range" name="range" ng-model="value" min="{{min}}"  max="{{max}}">
	            <hr>
	            Model as number: <input type="number" ng-model="value"><br>
	            Min: <input type="number" ng-model="min"><br>
	            Max: <input type="number" ng-model="max"><br>
	            value = <code>{{value}}</code><br/>
	            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
	            myForm.range.$error = <code>{{myForm.range.$error}}</code>
	          </form>
	        </file>
	      </example>

	   * ## Range Input with ngMin & ngMax attributes

	   * @example
	      <example name="range-input-directive-ng" module="rangeExample">
	        <file name="index.html">
	          <script>
	            angular.module('rangeExample', [])
	              .controller('ExampleController', ['$scope', function($scope) {
	                $scope.value = 75;
	                $scope.min = 10;
	                $scope.max = 90;
	              }]);
	          </script>
	          <form name="myForm" ng-controller="ExampleController">
	            Model as range: <input type="range" name="range" ng-model="value" ng-min="min" ng-max="max">
	            <hr>
	            Model as number: <input type="number" ng-model="value"><br>
	            Min: <input type="number" ng-model="min"><br>
	            Max: <input type="number" ng-model="max"><br>
	            value = <code>{{value}}</code><br/>
	            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
	            myForm.range.$error = <code>{{myForm.range.$error}}</code>
	          </form>
	        </file>
	      </example>

	   */
	  'range': rangeInputType,

	  /**
	   * @ngdoc input
	   * @name input[checkbox]
	   *
	   * @description
	   * HTML checkbox.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
	   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="checkbox-input-directive" module="checkboxExample">
	        <file name="index.html">
	         <script>
	           angular.module('checkboxExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.checkboxModel = {
	                value1 : true,
	                value2 : 'YES'
	              };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Value1:
	             <input type="checkbox" ng-model="checkboxModel.value1">
	           </label><br/>
	           <label>Value2:
	             <input type="checkbox" ng-model="checkboxModel.value2"
	                    ng-true-value="'YES'" ng-false-value="'NO'">
	            </label><br/>
	           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
	           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var value1 = element(by.binding('checkboxModel.value1'));
	            var value2 = element(by.binding('checkboxModel.value2'));

	            expect(value1.getText()).toContain('true');
	            expect(value2.getText()).toContain('YES');

	            element(by.model('checkboxModel.value1')).click();
	            element(by.model('checkboxModel.value2')).click();

	            expect(value1.getText()).toContain('false');
	            expect(value2.getText()).toContain('NO');
	          });
	        </file>
	      </example>
	   */
	  'checkbox': checkboxInputType,

	  'hidden': noop,
	  'button': noop,
	  'submit': noop,
	  'reset': noop,
	  'file': noop
	};

	function stringBasedInputType(ctrl) {
	  ctrl.$formatters.push(function(value) {
	    return ctrl.$isEmpty(value) ? value : value.toString();
	  });
	}

	function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	}

	function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  var type = lowercase(element[0].type);

	  // In composition mode, users are still inputting intermediate text buffer,
	  // hold the listener until composition is done.
	  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
	  if (!$sniffer.android) {
	    var composing = false;

	    element.on('compositionstart', function() {
	      composing = true;
	    });

	    element.on('compositionend', function() {
	      composing = false;
	      listener();
	    });
	  }

	  var timeout;

	  var listener = function(ev) {
	    if (timeout) {
	      $browser.defer.cancel(timeout);
	      timeout = null;
	    }
	    if (composing) return;
	    var value = element.val(),
	        event = ev && ev.type;

	    // By default we will trim the value
	    // If the attribute ng-trim exists we will avoid trimming
	    // If input type is 'password', the value is never trimmed
	    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
	      value = trim(value);
	    }

	    // If a control is suffering from bad input (due to native validators), browsers discard its
	    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
	    // control's value is the same empty value twice in a row.
	    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
	      ctrl.$setViewValue(value, event);
	    }
	  };

	  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
	  // input event on backspace, delete or cut
	  if ($sniffer.hasEvent('input')) {
	    element.on('input', listener);
	  } else {
	    var deferListener = function(ev, input, origValue) {
	      if (!timeout) {
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (!input || input.value !== origValue) {
	            listener(ev);
	          }
	        });
	      }
	    };

	    element.on('keydown', /** @this */ function(event) {
	      var key = event.keyCode;

	      // ignore
	      //    command            modifiers                   arrows
	      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

	      deferListener(event, this, this.value);
	    });

	    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
	    if ($sniffer.hasEvent('paste')) {
	      element.on('paste cut', deferListener);
	    }
	  }

	  // if user paste into input using mouse on older browser
	  // or form autocomplete on newer browser, we need "change" event to catch it
	  element.on('change', listener);

	  // Some native input types (date-family) have the ability to change validity without
	  // firing any input/change events.
	  // For these event types, when native validators are present and the browser supports the type,
	  // check for validity changes on various DOM events.
	  if (PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type) {
	    element.on(PARTIAL_VALIDATION_EVENTS, /** @this */ function(ev) {
	      if (!timeout) {
	        var validity = this[VALIDITY_STATE_PROPERTY];
	        var origBadInput = validity.badInput;
	        var origTypeMismatch = validity.typeMismatch;
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (validity.badInput !== origBadInput || validity.typeMismatch !== origTypeMismatch) {
	            listener(ev);
	          }
	        });
	      }
	    });
	  }

	  ctrl.$render = function() {
	    // Workaround for Firefox validation #12102.
	    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;
	    if (element.val() !== value) {
	      element.val(value);
	    }
	  };
	}

	function weekParser(isoWeek, existingDate) {
	  if (isDate(isoWeek)) {
	    return isoWeek;
	  }

	  if (isString(isoWeek)) {
	    WEEK_REGEXP.lastIndex = 0;
	    var parts = WEEK_REGEXP.exec(isoWeek);
	    if (parts) {
	      var year = +parts[1],
	          week = +parts[2],
	          hours = 0,
	          minutes = 0,
	          seconds = 0,
	          milliseconds = 0,
	          firstThurs = getFirstThursdayOfYear(year),
	          addDays = (week - 1) * 7;

	      if (existingDate) {
	        hours = existingDate.getHours();
	        minutes = existingDate.getMinutes();
	        seconds = existingDate.getSeconds();
	        milliseconds = existingDate.getMilliseconds();
	      }

	      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
	    }
	  }

	  return NaN;
	}

	function createDateParser(regexp, mapping) {
	  return function(iso, date) {
	    var parts, map;

	    if (isDate(iso)) {
	      return iso;
	    }

	    if (isString(iso)) {
	      // When a date is JSON'ified to wraps itself inside of an extra
	      // set of double quotes. This makes the date parsing code unable
	      // to match the date string and parse it as a date.
	      if (iso.charAt(0) === '"' && iso.charAt(iso.length - 1) === '"') {
	        iso = iso.substring(1, iso.length - 1);
	      }
	      if (ISO_DATE_REGEXP.test(iso)) {
	        return new Date(iso);
	      }
	      regexp.lastIndex = 0;
	      parts = regexp.exec(iso);

	      if (parts) {
	        parts.shift();
	        if (date) {
	          map = {
	            yyyy: date.getFullYear(),
	            MM: date.getMonth() + 1,
	            dd: date.getDate(),
	            HH: date.getHours(),
	            mm: date.getMinutes(),
	            ss: date.getSeconds(),
	            sss: date.getMilliseconds() / 1000
	          };
	        } else {
	          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
	        }

	        forEach(parts, function(part, index) {
	          if (index < mapping.length) {
	            map[mapping[index]] = +part;
	          }
	        });
	        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
	      }
	    }

	    return NaN;
	  };
	}

	function createDateInputType(type, regexp, parseDate, format) {
	  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
	    badInputChecker(scope, element, attr, ctrl);
	    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	    var timezone = ctrl && ctrl.$options.getOption('timezone');
	    var previousDate;

	    ctrl.$$parserName = type;
	    ctrl.$parsers.push(function(value) {
	      if (ctrl.$isEmpty(value)) return null;
	      if (regexp.test(value)) {
	        // Note: We cannot read ctrl.$modelValue, as there might be a different
	        // parser/formatter in the processing chain so that the model
	        // contains some different data format!
	        var parsedDate = parseDate(value, previousDate);
	        if (timezone) {
	          parsedDate = convertTimezoneToLocal(parsedDate, timezone);
	        }
	        return parsedDate;
	      }
	      return undefined;
	    });

	    ctrl.$formatters.push(function(value) {
	      if (value && !isDate(value)) {
	        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
	      }
	      if (isValidDate(value)) {
	        previousDate = value;
	        if (previousDate && timezone) {
	          previousDate = convertTimezoneToLocal(previousDate, timezone, true);
	        }
	        return $filter('date')(value, format, timezone);
	      } else {
	        previousDate = null;
	        return '';
	      }
	    });

	    if (isDefined(attr.min) || attr.ngMin) {
	      var minVal;
	      ctrl.$validators.min = function(value) {
	        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
	      };
	      attr.$observe('min', function(val) {
	        minVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }

	    if (isDefined(attr.max) || attr.ngMax) {
	      var maxVal;
	      ctrl.$validators.max = function(value) {
	        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
	      };
	      attr.$observe('max', function(val) {
	        maxVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }

	    function isValidDate(value) {
	      // Invalid Date: getTime() returns NaN
	      return value && !(value.getTime && value.getTime() !== value.getTime());
	    }

	    function parseObservedDateValue(val) {
	      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
	    }
	  };
	}

	function badInputChecker(scope, element, attr, ctrl) {
	  var node = element[0];
	  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
	  if (nativeValidation) {
	    ctrl.$parsers.push(function(value) {
	      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
	      return validity.badInput || validity.typeMismatch ? undefined : value;
	    });
	  }
	}

	function numberFormatterParser(ctrl) {
	  ctrl.$$parserName = 'number';
	  ctrl.$parsers.push(function(value) {
	    if (ctrl.$isEmpty(value))      return null;
	    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
	    return undefined;
	  });

	  ctrl.$formatters.push(function(value) {
	    if (!ctrl.$isEmpty(value)) {
	      if (!isNumber(value)) {
	        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
	      }
	      value = value.toString();
	    }
	    return value;
	  });
	}

	function parseNumberAttrVal(val) {
	  if (isDefined(val) && !isNumber(val)) {
	    val = parseFloat(val);
	  }
	  return !isNumberNaN(val) ? val : undefined;
	}

	function isNumberInteger(num) {
	  // See http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#14794066
	  // (minus the assumption that `num` is a number)

	  // eslint-disable-next-line no-bitwise
	  return (num | 0) === num;
	}

	function countDecimals(num) {
	  var numString = num.toString();
	  var decimalSymbolIndex = numString.indexOf('.');

	  if (decimalSymbolIndex === -1) {
	    if (-1 < num && num < 1) {
	      // It may be in the exponential notation format (`1e-X`)
	      var match = /e-(\d+)$/.exec(numString);

	      if (match) {
	        return Number(match[1]);
	      }
	    }

	    return 0;
	  }

	  return numString.length - decimalSymbolIndex - 1;
	}

	function isValidForStep(viewValue, stepBase, step) {
	  // At this point `stepBase` and `step` are expected to be non-NaN values
	  // and `viewValue` is expected to be a valid stringified number.
	  var value = Number(viewValue);

	  // Due to limitations in Floating Point Arithmetic (e.g. `0.3 - 0.2 !== 0.1` or
	  // `0.5 % 0.1 !== 0`), we need to convert all numbers to integers.
	  if (!isNumberInteger(value) || !isNumberInteger(stepBase) || !isNumberInteger(step)) {
	    var decimalCount = Math.max(countDecimals(value), countDecimals(stepBase), countDecimals(step));
	    var multiplier = Math.pow(10, decimalCount);

	    value = value * multiplier;
	    stepBase = stepBase * multiplier;
	    step = step * multiplier;
	  }

	  return (value - stepBase) % step === 0;
	}

	function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  badInputChecker(scope, element, attr, ctrl);
	  numberFormatterParser(ctrl);
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

	  var minVal;
	  var maxVal;

	  if (isDefined(attr.min) || attr.ngMin) {
	    ctrl.$validators.min = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
	    };

	    attr.$observe('min', function(val) {
	      minVal = parseNumberAttrVal(val);
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }

	  if (isDefined(attr.max) || attr.ngMax) {
	    ctrl.$validators.max = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
	    };

	    attr.$observe('max', function(val) {
	      maxVal = parseNumberAttrVal(val);
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }

	  if (isDefined(attr.step) || attr.ngStep) {
	    var stepVal;
	    ctrl.$validators.step = function(modelValue, viewValue) {
	      return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) ||
	             isValidForStep(viewValue, minVal || 0, stepVal);
	    };

	    attr.$observe('step', function(val) {
	      stepVal = parseNumberAttrVal(val);
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }
	}

	function rangeInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  badInputChecker(scope, element, attr, ctrl);
	  numberFormatterParser(ctrl);
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

	  var supportsRange = ctrl.$$hasNativeValidators && element[0].type === 'range',
	      minVal = supportsRange ? 0 : undefined,
	      maxVal = supportsRange ? 100 : undefined,
	      stepVal = supportsRange ? 1 : undefined,
	      validity = element[0].validity,
	      hasMinAttr = isDefined(attr.min),
	      hasMaxAttr = isDefined(attr.max),
	      hasStepAttr = isDefined(attr.step);

	  var originalRender = ctrl.$render;

	  ctrl.$render = supportsRange && isDefined(validity.rangeUnderflow) && isDefined(validity.rangeOverflow) ?
	    //Browsers that implement range will set these values automatically, but reading the adjusted values after
	    //$render would cause the min / max validators to be applied with the wrong value
	    function rangeRender() {
	      originalRender();
	      ctrl.$setViewValue(element.val());
	    } :
	    originalRender;

	  if (hasMinAttr) {
	    ctrl.$validators.min = supportsRange ?
	      // Since all browsers set the input to a valid value, we don't need to check validity
	      function noopMinValidator() { return true; } :
	      // non-support browsers validate the min val
	      function minValidator(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || isUndefined(minVal) || viewValue >= minVal;
	      };

	    setInitialValueAndObserver('min', minChange);
	  }

	  if (hasMaxAttr) {
	    ctrl.$validators.max = supportsRange ?
	      // Since all browsers set the input to a valid value, we don't need to check validity
	      function noopMaxValidator() { return true; } :
	      // non-support browsers validate the max val
	      function maxValidator(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || isUndefined(maxVal) || viewValue <= maxVal;
	      };

	    setInitialValueAndObserver('max', maxChange);
	  }

	  if (hasStepAttr) {
	    ctrl.$validators.step = supportsRange ?
	      function nativeStepValidator() {
	        // Currently, only FF implements the spec on step change correctly (i.e. adjusting the
	        // input element value to a valid value). It's possible that other browsers set the stepMismatch
	        // validity error instead, so we can at least report an error in that case.
	        return !validity.stepMismatch;
	      } :
	      // ngStep doesn't set the setp attr, so the browser doesn't adjust the input value as setting step would
	      function stepValidator(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) ||
	               isValidForStep(viewValue, minVal || 0, stepVal);
	      };

	    setInitialValueAndObserver('step', stepChange);
	  }

	  function setInitialValueAndObserver(htmlAttrName, changeFn) {
	    // interpolated attributes set the attribute value only after a digest, but we need the
	    // attribute value when the input is first rendered, so that the browser can adjust the
	    // input value based on the min/max value
	    element.attr(htmlAttrName, attr[htmlAttrName]);
	    attr.$observe(htmlAttrName, changeFn);
	  }

	  function minChange(val) {
	    minVal = parseNumberAttrVal(val);
	    // ignore changes before model is initialized
	    if (isNumberNaN(ctrl.$modelValue)) {
	      return;
	    }

	    if (supportsRange) {
	      var elVal = element.val();
	      // IE11 doesn't set the el val correctly if the minVal is greater than the element value
	      if (minVal > elVal) {
	        elVal = minVal;
	        element.val(elVal);
	      }
	      ctrl.$setViewValue(elVal);
	    } else {
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    }
	  }

	  function maxChange(val) {
	    maxVal = parseNumberAttrVal(val);
	    // ignore changes before model is initialized
	    if (isNumberNaN(ctrl.$modelValue)) {
	      return;
	    }

	    if (supportsRange) {
	      var elVal = element.val();
	      // IE11 doesn't set the el val correctly if the maxVal is less than the element value
	      if (maxVal < elVal) {
	        element.val(maxVal);
	        // IE11 and Chrome don't set the value to the minVal when max < min
	        elVal = maxVal < minVal ? minVal : maxVal;
	      }
	      ctrl.$setViewValue(elVal);
	    } else {
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    }
	  }

	  function stepChange(val) {
	    stepVal = parseNumberAttrVal(val);
	    // ignore changes before model is initialized
	    if (isNumberNaN(ctrl.$modelValue)) {
	      return;
	    }

	    // Some browsers don't adjust the input value correctly, but set the stepMismatch error
	    if (supportsRange && ctrl.$viewValue !== element.val()) {
	      ctrl.$setViewValue(element.val());
	    } else {
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    }
	  }
	}

	function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);

	  ctrl.$$parserName = 'url';
	  ctrl.$validators.url = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
	  };
	}

	function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);

	  ctrl.$$parserName = 'email';
	  ctrl.$validators.email = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
	  };
	}

	function radioInputType(scope, element, attr, ctrl) {
	  var doTrim = !attr.ngTrim || trim(attr.ngTrim) !== 'false';
	  // make the name unique, if not defined
	  if (isUndefined(attr.name)) {
	    element.attr('name', nextUid());
	  }

	  var listener = function(ev) {
	    var value;
	    if (element[0].checked) {
	      value = attr.value;
	      if (doTrim) {
	        value = trim(value);
	      }
	      ctrl.$setViewValue(value, ev && ev.type);
	    }
	  };

	  element.on('click', listener);

	  ctrl.$render = function() {
	    var value = attr.value;
	    if (doTrim) {
	      value = trim(value);
	    }
	    element[0].checked = (value === ctrl.$viewValue);
	  };

	  attr.$observe('value', ctrl.$render);
	}

	function parseConstantExpr($parse, context, name, expression, fallback) {
	  var parseFn;
	  if (isDefined(expression)) {
	    parseFn = $parse(expression);
	    if (!parseFn.constant) {
	      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +
	                                   '`{1}`.', name, expression);
	    }
	    return parseFn(context);
	  }
	  return fallback;
	}

	function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
	  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
	  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

	  var listener = function(ev) {
	    ctrl.$setViewValue(element[0].checked, ev && ev.type);
	  };

	  element.on('click', listener);

	  ctrl.$render = function() {
	    element[0].checked = ctrl.$viewValue;
	  };

	  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
	  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
	  // it to a boolean.
	  ctrl.$isEmpty = function(value) {
	    return value === false;
	  };

	  ctrl.$formatters.push(function(value) {
	    return equals(value, trueValue);
	  });

	  ctrl.$parsers.push(function(value) {
	    return value ? trueValue : falseValue;
	  });
	}


	/**
	 * @ngdoc directive
	 * @name textarea
	 * @restrict E
	 *
	 * @description
	 * HTML textarea element control with angular data-binding. The data-binding and validation
	 * properties of this element are exactly the same as those of the
	 * {@link ng.directive:input input element}.
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *
	 * @knownIssue
	 *
	 * When specifying the `placeholder` attribute of `<textarea>`, Internet Explorer will temporarily
	 * insert the placeholder value as the textarea's content. If the placeholder value contains
	 * interpolation (`{{ ... }}`), an error will be logged in the console when Angular tries to update
	 * the value of the by-then-removed text node. This doesn't affect the functionality of the
	 * textarea, but can be undesirable.
	 *
	 * You can work around this Internet Explorer issue by using `ng-attr-placeholder` instead of
	 * `placeholder` on textareas, whenever you need interpolation in the placeholder value. You can
	 * find more details on `ngAttr` in the
	 * [Interpolation](guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes) section of the
	 * Developer Guide.
	 */


	/**
	 * @ngdoc directive
	 * @name input
	 * @restrict E
	 *
	 * @description
	 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
	 * input state control, and validation.
	 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Not every feature offered is available for all input types.
	 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
	 * </div>
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {boolean=} ngRequired Sets `required` attribute if set to true
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *    This parameter is ignored for input[type=password] controls, which will never trim the
	 *    input.
	 *
	 * @example
	    <example name="input-directive" module="inputExample">
	      <file name="index.html">
	       <script>
	          angular.module('inputExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.user = {name: 'guest', last: 'visitor'};
	            }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <form name="myForm">
	           <label>
	              User name:
	              <input type="text" name="userName" ng-model="user.name" required>
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.userName.$error.required">
	              Required!</span>
	           </div>
	           <label>
	              Last name:
	              <input type="text" name="lastName" ng-model="user.last"
	              ng-minlength="3" ng-maxlength="10">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.lastName.$error.minlength">
	               Too short!</span>
	             <span class="error" ng-show="myForm.lastName.$error.maxlength">
	               Too long!</span>
	           </div>
	         </form>
	         <hr>
	         <tt>user = {{user}}</tt><br/>
	         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
	         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
	         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
	         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
	         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
	         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
	       </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var user = element(by.exactBinding('user'));
	        var userNameValid = element(by.binding('myForm.userName.$valid'));
	        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
	        var lastNameError = element(by.binding('myForm.lastName.$error'));
	        var formValid = element(by.binding('myForm.$valid'));
	        var userNameInput = element(by.model('user.name'));
	        var userLastInput = element(by.model('user.last'));

	        it('should initialize to model', function() {
	          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
	          expect(userNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if empty when required', function() {
	          userNameInput.clear();
	          userNameInput.sendKeys('');

	          expect(user.getText()).toContain('{"last":"visitor"}');
	          expect(userNameValid.getText()).toContain('false');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be valid if empty when min length is set', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('');

	          expect(user.getText()).toContain('{"name":"guest","last":""}');
	          expect(lastNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if less than required min length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('xx');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('minlength');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be invalid if longer than max length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('some ridiculously long name');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('maxlength');
	          expect(formValid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 */
	var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
	    function($browser, $sniffer, $filter, $parse) {
	  return {
	    restrict: 'E',
	    require: ['?ngModel'],
	    link: {
	      pre: function(scope, element, attr, ctrls) {
	        if (ctrls[0]) {
	          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
	                                                              $browser, $filter, $parse);
	        }
	      }
	    }
	  };
	}];



	var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
	/**
	 * @ngdoc directive
	 * @name ngValue
	 *
	 * @description
	 * Binds the given expression to the value of the element.
	 *
	 * It is mainly used on {@link input[radio] `input[radio]`} and option elements,
	 * so that when the element is selected, the {@link ngModel `ngModel`} of that element (or its
	 * {@link select `select`} parent element) is set to the bound value. It is especially useful
	 * for dynamically generated lists using {@link ngRepeat `ngRepeat`}, as shown below.
	 *
	 * It can also be used to achieve one-way binding of a given expression to an input element
	 * such as an `input[text]` or a `textarea`, when that element does not use ngModel.
	 *
	 * @element input
	 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
	 * and `value` property of the element.
	 *
	 * @example
	    <example name="ngValue-directive" module="valueExample">
	      <file name="index.html">
	       <script>
	          angular.module('valueExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.names = ['pizza', 'unicorns', 'robots'];
	              $scope.my = { favorite: 'unicorns' };
	            }]);
	       </script>
	        <form ng-controller="ExampleController">
	          <h2>Which is your favorite?</h2>
	            <label ng-repeat="name in names" for="{{name}}">
	              {{name}}
	              <input type="radio"
	                     ng-model="my.favorite"
	                     ng-value="name"
	                     id="{{name}}"
	                     name="favorite">
	            </label>
	          <div>You chose {{my.favorite}}</div>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var favorite = element(by.binding('my.favorite'));

	        it('should initialize to model', function() {
	          expect(favorite.getText()).toContain('unicorns');
	        });
	        it('should bind the values to the inputs', function() {
	          element.all(by.model('my.favorite')).get(0).click();
	          expect(favorite.getText()).toContain('pizza');
	        });
	      </file>
	    </example>
	 */
	var ngValueDirective = function() {
	  /**
	   *  inputs use the value attribute as their default value if the value property is not set.
	   *  Once the value property has been set (by adding input), it will not react to changes to
	   *  the value attribute anymore. Setting both attribute and property fixes this behavior, and
	   *  makes it possible to use ngValue as a sort of one-way bind.
	   */
	  function updateElementValue(element, attr, value) {
	    element.prop('value', value);
	    attr.$set('value', value);
	  }

	  return {
	    restrict: 'A',
	    priority: 100,
	    compile: function(tpl, tplAttr) {
	      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
	        return function ngValueConstantLink(scope, elm, attr) {
	          var value = scope.$eval(attr.ngValue);
	          updateElementValue(elm, attr, value);
	        };
	      } else {
	        return function ngValueLink(scope, elm, attr) {
	          scope.$watch(attr.ngValue, function valueWatchAction(value) {
	            updateElementValue(elm, attr, value);
	          });
	        };
	      }
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngBind
	 * @restrict AC
	 *
	 * @description
	 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
	 * with the value of a given expression, and to update the text content when the value of that
	 * expression changes.
	 *
	 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
	 * `{{ expression }}` which is similar but less verbose.
	 *
	 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
	 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
	 * element attribute, it makes the bindings invisible to the user while the page is loading.
	 *
	 * An alternative solution to this problem would be using the
	 * {@link ng.directive:ngCloak ngCloak} directive.
	 *
	 *
	 * @element ANY
	 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
	   <example module="bindExample" name="ng-bind">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.name = 'Whirled';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter name: <input type="text" ng-model="name"></label><br>
	         Hello <span ng-bind="name"></span>!
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var nameInput = element(by.model('name'));

	         expect(element(by.binding('name')).getText()).toBe('Whirled');
	         nameInput.clear();
	         nameInput.sendKeys('world');
	         expect(element(by.binding('name')).getText()).toBe('world');
	       });
	     </file>
	   </example>
	 */
	var ngBindDirective = ['$compile', function($compile) {
	  return {
	    restrict: 'AC',
	    compile: function ngBindCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBind);
	        element = element[0];
	        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
	          element.textContent = stringify(value);
	        });
	      };
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngBindTemplate
	 *
	 * @description
	 * The `ngBindTemplate` directive specifies that the element
	 * text content should be replaced with the interpolation of the template
	 * in the `ngBindTemplate` attribute.
	 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
	 * expressions. This directive is needed since some HTML elements
	 * (such as TITLE and OPTION) cannot contain SPAN elements.
	 *
	 * @element ANY
	 * @param {string} ngBindTemplate template of form
	 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
	 *
	 * @example
	 * Try it here: enter text in text box and watch the greeting change.
	   <example module="bindExample" name="ng-bind-template">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.salutation = 'Hello';
	             $scope.name = 'World';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
	        <label>Name: <input type="text" ng-model="name"></label><br>
	        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var salutationElem = element(by.binding('salutation'));
	         var salutationInput = element(by.model('salutation'));
	         var nameInput = element(by.model('name'));

	         expect(salutationElem.getText()).toBe('Hello World!');

	         salutationInput.clear();
	         salutationInput.sendKeys('Greetings');
	         nameInput.clear();
	         nameInput.sendKeys('user');

	         expect(salutationElem.getText()).toBe('Greetings user!');
	       });
	     </file>
	   </example>
	 */
	var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
	  return {
	    compile: function ngBindTemplateCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindTemplateLink(scope, element, attr) {
	        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
	        $compile.$$addBindingInfo(element, interpolateFn.expressions);
	        element = element[0];
	        attr.$observe('ngBindTemplate', function(value) {
	          element.textContent = isUndefined(value) ? '' : value;
	        });
	      };
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngBindHtml
	 *
	 * @description
	 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
	 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
	 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
	 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
	 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
	 *
	 * You may also bypass sanitization for values you know are safe. To do so, bind to
	 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
	 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
	 *
	 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
	 * will have an exception (instead of an exploit.)
	 *
	 * @element ANY
	 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
	 *
	 * @example

	   <example module="bindHtmlExample" deps="angular-sanitize.js" name="ng-bind-html">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	        <p ng-bind-html="myHTML"></p>
	       </div>
	     </file>

	     <file name="script.js">
	       angular.module('bindHtmlExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.myHTML =
	              'I am an <code>HTML</code>string with ' +
	              '<a href="#">links!</a> and other <em>stuff</em>';
	         }]);
	     </file>

	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind-html', function() {
	         expect(element(by.binding('myHTML')).getText()).toBe(
	             'I am an HTMLstring with links! and other stuff');
	       });
	     </file>
	   </example>
	 */
	var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
	  return {
	    restrict: 'A',
	    compile: function ngBindHtmlCompile(tElement, tAttrs) {
	      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
	      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function sceValueOf(val) {
	        // Unwrap the value to compare the actual inner safe value, not the wrapper object.
	        return $sce.valueOf(val);
	      });
	      $compile.$$addBindingClass(tElement);

	      return function ngBindHtmlLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBindHtml);

	        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
	          // The watched value is the unwrapped value. To avoid re-escaping, use the direct getter.
	          var value = ngBindHtmlGetter(scope);
	          element.html($sce.getTrustedHtml(value) || '');
	        });
	      };
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngChange
	 *
	 * @description
	 * Evaluate the given expression when the user changes the input.
	 * The expression is evaluated immediately, unlike the JavaScript onchange event
	 * which only triggers at the end of a change (usually, when the user leaves the
	 * form element or presses the return key).
	 *
	 * The `ngChange` expression is only evaluated when a change in the input value causes
	 * a new value to be committed to the model.
	 *
	 * It will not be evaluated:
	 * * if the value returned from the `$parsers` transformation pipeline has not changed
	 * * if the input has continued to be invalid since the model will stay `null`
	 * * if the model is changed programmatically and not by a change to the input value
	 *
	 *
	 * Note, this directive requires `ngModel` to be present.
	 *
	 * @element input
	 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
	 * in input value.
	 *
	 * @example
	 * <example name="ngChange-directive" module="changeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('changeExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.counter = 0;
	 *           $scope.change = function() {
	 *             $scope.counter++;
	 *           };
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
	 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
	 *       <label for="ng-change-example2">Confirmed</label><br />
	 *       <tt>debug = {{confirmed}}</tt><br/>
	 *       <tt>counter = {{counter}}</tt><br/>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var counter = element(by.binding('counter'));
	 *     var debug = element(by.binding('confirmed'));
	 *
	 *     it('should evaluate the expression if changing from view', function() {
	 *       expect(counter.getText()).toContain('0');
	 *
	 *       element(by.id('ng-change-example1')).click();
	 *
	 *       expect(counter.getText()).toContain('1');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *
	 *     it('should not evaluate the expression if changing from model', function() {
	 *       element(by.id('ng-change-example2')).click();

	 *       expect(counter.getText()).toContain('0');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *   </file>
	 * </example>
	 */
	var ngChangeDirective = valueFn({
	  restrict: 'A',
	  require: 'ngModel',
	  link: function(scope, element, attr, ctrl) {
	    ctrl.$viewChangeListeners.push(function() {
	      scope.$eval(attr.ngChange);
	    });
	  }
	});

	/* exported
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective
	*/

	function classDirective(name, selector) {
	  name = 'ngClass' + name;
	  return ['$animate', function($animate) {
	    return {
	      restrict: 'AC',
	      link: function(scope, element, attr) {
	        var oldVal;

	        scope.$watch(attr[name], ngClassWatchAction, true);

	        attr.$observe('class', function(value) {
	          ngClassWatchAction(scope.$eval(attr[name]));
	        });


	        if (name !== 'ngClass') {
	          scope.$watch('$index', function($index, old$index) {
	            /* eslint-disable no-bitwise */
	            var mod = $index & 1;
	            if (mod !== (old$index & 1)) {
	              var classes = arrayClasses(scope.$eval(attr[name]));
	              if (mod === selector) {
	                addClasses(classes);
	              } else {
	                removeClasses(classes);
	              }
	            }
	            /* eslint-enable */
	          });
	        }

	        function addClasses(classes) {
	          var newClasses = digestClassCounts(classes, 1);
	          attr.$addClass(newClasses);
	        }

	        function removeClasses(classes) {
	          var newClasses = digestClassCounts(classes, -1);
	          attr.$removeClass(newClasses);
	        }

	        function digestClassCounts(classes, count) {
	          // Use createMap() to prevent class assumptions involving property
	          // names in Object.prototype
	          var classCounts = element.data('$classCounts') || createMap();
	          var classesToUpdate = [];
	          forEach(classes, function(className) {
	            if (count > 0 || classCounts[className]) {
	              classCounts[className] = (classCounts[className] || 0) + count;
	              if (classCounts[className] === +(count > 0)) {
	                classesToUpdate.push(className);
	              }
	            }
	          });
	          element.data('$classCounts', classCounts);
	          return classesToUpdate.join(' ');
	        }

	        function updateClasses(oldClasses, newClasses) {
	          var toAdd = arrayDifference(newClasses, oldClasses);
	          var toRemove = arrayDifference(oldClasses, newClasses);
	          toAdd = digestClassCounts(toAdd, 1);
	          toRemove = digestClassCounts(toRemove, -1);
	          if (toAdd && toAdd.length) {
	            $animate.addClass(element, toAdd);
	          }
	          if (toRemove && toRemove.length) {
	            $animate.removeClass(element, toRemove);
	          }
	        }

	        function ngClassWatchAction(newVal) {
	          // eslint-disable-next-line no-bitwise
	          if (selector === true || (scope.$index & 1) === selector) {
	            var newClasses = arrayClasses(newVal || []);
	            if (!oldVal) {
	              addClasses(newClasses);
	            } else if (!equals(newVal,oldVal)) {
	              var oldClasses = arrayClasses(oldVal);
	              updateClasses(oldClasses, newClasses);
	            }
	          }
	          if (isArray(newVal)) {
	            oldVal = newVal.map(function(v) { return shallowCopy(v); });
	          } else {
	            oldVal = shallowCopy(newVal);
	          }
	        }
	      }
	    };

	    function arrayDifference(tokens1, tokens2) {
	      var values = [];

	      outer:
	      for (var i = 0; i < tokens1.length; i++) {
	        var token = tokens1[i];
	        for (var j = 0; j < tokens2.length; j++) {
	          if (token === tokens2[j]) continue outer;
	        }
	        values.push(token);
	      }
	      return values;
	    }

	    function arrayClasses(classVal) {
	      var classes = [];
	      if (isArray(classVal)) {
	        forEach(classVal, function(v) {
	          classes = classes.concat(arrayClasses(v));
	        });
	        return classes;
	      } else if (isString(classVal)) {
	        return classVal.split(' ');
	      } else if (isObject(classVal)) {
	        forEach(classVal, function(v, k) {
	          if (v) {
	            classes = classes.concat(k.split(' '));
	          }
	        });
	        return classes;
	      }
	      return classVal;
	    }
	  }];
	}

	/**
	 * @ngdoc directive
	 * @name ngClass
	 * @restrict AC
	 *
	 * @description
	 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
	 * an expression that represents all classes to be added.
	 *
	 * The directive operates in three different ways, depending on which of three types the expression
	 * evaluates to:
	 *
	 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
	 * names.
	 *
	 * 2. If the expression evaluates to an object, then for each key-value pair of the
	 * object with a truthy value the corresponding key is used as a class name.
	 *
	 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
	 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
	 * to give you more control over what CSS classes appear. See the code below for an example of this.
	 *
	 *
	 * The directive won't add duplicate classes if a particular class was already set.
	 *
	 * When the expression changes, the previously added classes are removed and only then are the
	 * new classes added.
	 *
	 * @knownIssue
	 * You should not use {@link guide/interpolation interpolation} in the value of the `class`
	 * attribute, when using the `ngClass` directive on the same element.
	 * See {@link guide/interpolation#known-issues here} for more info.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
	 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
	 *
	 * @element ANY
	 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class
	 *   names, an array, or a map of class names to boolean values. In the case of a map, the
	 *   names of the properties whose values are truthy will be added as css classes to the
	 *   element.
	 *
	 * @example Example that demonstrates basic bindings via ngClass directive.
	   <example name="ng-class">
	     <file name="index.html">
	       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
	       <label>
	          <input type="checkbox" ng-model="deleted">
	          deleted (apply "strike" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="important">
	          important (apply "bold" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="error">
	          error (apply "has-error" class)
	       </label>
	       <hr>
	       <p ng-class="style">Using String Syntax</p>
	       <input type="text" ng-model="style"
	              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
	       <hr>
	       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
	       <input ng-model="style1"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
	       <input ng-model="style2"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
	       <input ng-model="style3"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
	       <hr>
	       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
	       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
	       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
	     </file>
	     <file name="style.css">
	       .strike {
	           text-decoration: line-through;
	       }
	       .bold {
	           font-weight: bold;
	       }
	       .red {
	           color: red;
	       }
	       .has-error {
	           color: red;
	           background-color: yellow;
	       }
	       .orange {
	           color: orange;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var ps = element.all(by.css('p'));

	       it('should let you toggle the class', function() {

	         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
	         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);

	         element(by.model('important')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/bold/);

	         element(by.model('error')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
	       });

	       it('should let you toggle string example', function() {
	         expect(ps.get(1).getAttribute('class')).toBe('');
	         element(by.model('style')).clear();
	         element(by.model('style')).sendKeys('red');
	         expect(ps.get(1).getAttribute('class')).toBe('red');
	       });

	       it('array example should have 3 classes', function() {
	         expect(ps.get(2).getAttribute('class')).toBe('');
	         element(by.model('style1')).sendKeys('bold');
	         element(by.model('style2')).sendKeys('strike');
	         element(by.model('style3')).sendKeys('red');
	         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
	       });

	       it('array with map example should have 2 classes', function() {
	         expect(ps.last().getAttribute('class')).toBe('');
	         element(by.model('style4')).sendKeys('bold');
	         element(by.model('warning')).click();
	         expect(ps.last().getAttribute('class')).toBe('bold orange');
	       });
	     </file>
	   </example>

	   ## Animations

	   The example below demonstrates how to perform animations using ngClass.

	   <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-class">
	     <file name="index.html">
	      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
	      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
	      <br>
	      <span class="base-class" ng-class="myVar">Sample Text</span>
	     </file>
	     <file name="style.css">
	       .base-class {
	         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	       }

	       .base-class.my-class {
	         color: red;
	         font-size:3em;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class', function() {
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);

	         element(by.id('setbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).
	           toMatch(/my-class/);

	         element(by.id('clearbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	       });
	     </file>
	   </example>


	   ## ngClass and pre-existing CSS3 Transitions/Animations
	   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
	   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
	   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
	   to view the step by step details of {@link $animate#addClass $animate.addClass} and
	   {@link $animate#removeClass $animate.removeClass}.
	 */
	var ngClassDirective = classDirective('', true);

	/**
	 * @ngdoc directive
	 * @name ngClassOdd
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example name="ng-class-odd">
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}}
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassOddDirective = classDirective('Odd', 0);

	/**
	 * @ngdoc directive
	 * @name ngClassEven
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
	 *   result of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example name="ng-class-even">
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}} &nbsp; &nbsp; &nbsp;
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassEvenDirective = classDirective('Even', 1);

	/**
	 * @ngdoc directive
	 * @name ngCloak
	 * @restrict AC
	 *
	 * @description
	 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
	 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
	 * directive to avoid the undesirable flicker effect caused by the html template display.
	 *
	 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
	 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
	 * of the browser view.
	 *
	 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
	 * `angular.min.js`.
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```css
	 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
	 *   display: none !important;
	 * }
	 * ```
	 *
	 * When this css rule is loaded by the browser, all html elements (including their children) that
	 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
	 * during the compilation of the template it deletes the `ngCloak` element attribute, making
	 * the compiled element visible.
	 *
	 * For the best result, the `angular.js` script must be loaded in the head section of the html
	 * document; alternatively, the css rule above must be included in the external stylesheet of the
	 * application.
	 *
	 * @element ANY
	 *
	 * @example
	   <example name="ng-cloak">
	     <file name="index.html">
	        <div id="template1" ng-cloak>{{ 'hello' }}</div>
	        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should remove the template directive and css class', function() {
	         expect($('#template1').getAttribute('ng-cloak')).
	           toBeNull();
	         expect($('#template2').getAttribute('ng-cloak')).
	           toBeNull();
	       });
	     </file>
	   </example>
	 *
	 */
	var ngCloakDirective = ngDirective({
	  compile: function(element, attr) {
	    attr.$set('ngCloak', undefined);
	    element.removeClass('ng-cloak');
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngController
	 *
	 * @description
	 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
	 * supports the principles behind the Model-View-Controller design pattern.
	 *
	 * MVC components in angular:
	 *
	 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
	 *   are accessed through bindings.
	 * * View — The template (HTML with data bindings) that is rendered into the View.
	 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
	 *   logic behind the application to decorate the scope with functions and values
	 *
	 * Note that you can also attach controllers to the DOM by declaring it in a route definition
	 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
	 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
	 * and executed twice.
	 *
	 * @element ANY
	 * @scope
	 * @priority 500
	 * @param {expression} ngController Name of a constructor function registered with the current
	 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
	 * that on the current scope evaluates to a constructor function.
	 *
	 * The controller instance can be published into a scope property by specifying
	 * `ng-controller="as propertyName"`.
	 *
	 * If the current `$controllerProvider` is configured to use globals (via
	 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
	 * also be the name of a globally accessible constructor function (deprecated, not recommended).
	 *
	 * @example
	 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
	 * greeting are methods declared on the controller (see source tab). These methods can
	 * easily be called from the angular markup. Any changes to the data are automatically reflected
	 * in the View without the need for a manual update.
	 *
	 * Two different declaration styles are included below:
	 *
	 * * one binds methods and properties directly onto the controller using `this`:
	 * `ng-controller="SettingsController1 as settings"`
	 * * one injects `$scope` into the controller:
	 * `ng-controller="SettingsController2"`
	 *
	 * The second option is more common in the Angular community, and is generally used in boilerplates
	 * and in this guide. However, there are advantages to binding properties directly to the controller
	 * and avoiding scope.
	 *
	 * * Using `controller as` makes it obvious which controller you are accessing in the template when
	 * multiple controllers apply to an element.
	 * * If you are writing your controllers as classes you have easier access to the properties and
	 * methods, which will appear on the scope, from inside the controller code.
	 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
	 * inheritance masking primitives.
	 *
	 * This example demonstrates the `controller as` syntax.
	 *
	 * <example name="ngControllerAs" module="controllerAsExample">
	 *   <file name="index.html">
	 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
	 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
	 *      <button ng-click="settings.greet()">greet</button><br/>
	 *      Contact:
	 *      <ul>
	 *        <li ng-repeat="contact in settings.contacts">
	 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
	 *             <option>phone</option>
	 *             <option>email</option>
	 *          </select>
	 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *          <button ng-click="settings.clearContact(contact)">clear</button>
	 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
	 *        </li>
	 *        <li><button ng-click="settings.addContact()">add</button></li>
	 *     </ul>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('controllerAsExample', [])
	 *      .controller('SettingsController1', SettingsController1);
	 *
	 *    function SettingsController1() {
	 *      this.name = 'John Smith';
	 *      this.contacts = [
	 *        {type: 'phone', value: '408 555 1212'},
	 *        {type: 'email', value: 'john.smith@example.org'}
	 *      ];
	 *    }
	 *
	 *    SettingsController1.prototype.greet = function() {
	 *      alert(this.name);
	 *    };
	 *
	 *    SettingsController1.prototype.addContact = function() {
	 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
	 *    };
	 *
	 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
	 *     var index = this.contacts.indexOf(contactToRemove);
	 *      this.contacts.splice(index, 1);
	 *    };
	 *
	 *    SettingsController1.prototype.clearContact = function(contact) {
	 *      contact.type = 'phone';
	 *      contact.value = '';
	 *    };
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should check controller as', function() {
	 *       var container = element(by.id('ctrl-as-exmpl'));
	 *         expect(container.element(by.model('settings.name'))
	 *           .getAttribute('value')).toBe('John Smith');
	 *
	 *       var firstRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(0));
	 *       var secondRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(1));
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('408 555 1212');
	 *
	 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('john.smith@example.org');
	 *
	 *       firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('');
	 *
	 *       container.element(by.buttonText('add')).click();
	 *
	 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
	 *           .element(by.model('contact.value'))
	 *           .getAttribute('value'))
	 *           .toBe('yourname@example.org');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * This example demonstrates the "attach to `$scope`" style of controller.
	 *
	 * <example name="ngController" module="controllerExample">
	 *  <file name="index.html">
	 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
	 *     <label>Name: <input type="text" ng-model="name"/></label>
	 *     <button ng-click="greet()">greet</button><br/>
	 *     Contact:
	 *     <ul>
	 *       <li ng-repeat="contact in contacts">
	 *         <select ng-model="contact.type" id="select_{{$index}}">
	 *            <option>phone</option>
	 *            <option>email</option>
	 *         </select>
	 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *         <button ng-click="clearContact(contact)">clear</button>
	 *         <button ng-click="removeContact(contact)">X</button>
	 *       </li>
	 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
	 *    </ul>
	 *   </div>
	 *  </file>
	 *  <file name="app.js">
	 *   angular.module('controllerExample', [])
	 *     .controller('SettingsController2', ['$scope', SettingsController2]);
	 *
	 *   function SettingsController2($scope) {
	 *     $scope.name = 'John Smith';
	 *     $scope.contacts = [
	 *       {type:'phone', value:'408 555 1212'},
	 *       {type:'email', value:'john.smith@example.org'}
	 *     ];
	 *
	 *     $scope.greet = function() {
	 *       alert($scope.name);
	 *     };
	 *
	 *     $scope.addContact = function() {
	 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
	 *     };
	 *
	 *     $scope.removeContact = function(contactToRemove) {
	 *       var index = $scope.contacts.indexOf(contactToRemove);
	 *       $scope.contacts.splice(index, 1);
	 *     };
	 *
	 *     $scope.clearContact = function(contact) {
	 *       contact.type = 'phone';
	 *       contact.value = '';
	 *     };
	 *   }
	 *  </file>
	 *  <file name="protractor.js" type="protractor">
	 *    it('should check controller', function() {
	 *      var container = element(by.id('ctrl-exmpl'));
	 *
	 *      expect(container.element(by.model('name'))
	 *          .getAttribute('value')).toBe('John Smith');
	 *
	 *      var firstRepeat =
	 *          container.element(by.repeater('contact in contacts').row(0));
	 *      var secondRepeat =
	 *          container.element(by.repeater('contact in contacts').row(1));
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('408 555 1212');
	 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('john.smith@example.org');
	 *
	 *      firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('');
	 *
	 *      container.element(by.buttonText('add')).click();
	 *
	 *      expect(container.element(by.repeater('contact in contacts').row(2))
	 *          .element(by.model('contact.value'))
	 *          .getAttribute('value'))
	 *          .toBe('yourname@example.org');
	 *    });
	 *  </file>
	 *</example>

	 */
	var ngControllerDirective = [function() {
	  return {
	    restrict: 'A',
	    scope: true,
	    controller: '@',
	    priority: 500
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngCsp
	 *
	 * @restrict A
	 * @element ANY
	 * @description
	 *
	 * Angular has some features that can conflict with certain restrictions that are applied when using
	 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
	 *
	 * If you intend to implement CSP with these rules then you must tell Angular not to use these
	 * features.
	 *
	 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
	 *
	 *
	 * The following default rules in CSP affect Angular:
	 *
	 * * The use of `eval()`, `Function(string)` and similar functions to dynamically create and execute
	 * code from strings is forbidden. Angular makes use of this in the {@link $parse} service to
	 * provide a 30% increase in the speed of evaluating Angular expressions. (This CSP rule can be
	 * disabled with the CSP keyword `unsafe-eval`, but it is generally not recommended as it would
	 * weaken the protections offered by CSP.)
	 *
	 * * The use of inline resources, such as inline `<script>` and `<style>` elements, are forbidden.
	 * This prevents apps from injecting custom styles directly into the document. Angular makes use of
	 * this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}). To make these
	 * directives work when a CSP rule is blocking inline styles, you must link to the `angular-csp.css`
	 * in your HTML manually. (This CSP rule can be disabled with the CSP keyword `unsafe-inline`, but
	 * it is generally not recommended as it would weaken the protections offered by CSP.)
	 *
	 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking dynamic code
	 * creation from strings (e.g., `unsafe-eval` not specified in CSP header) and automatically
	 * deactivates this feature in the {@link $parse} service. This autodetection, however, triggers a
	 * CSP error to be logged in the console:
	 *
	 * ```
	 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
	 * script in the following Content Security Policy directive: "default-src 'self'". Note that
	 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
	 * ```
	 *
	 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
	 * directive on an element of the HTML document that appears before the `<script>` tag that loads
	 * the `angular.js` file.
	 *
	 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
	 *
	 * You can specify which of the CSP related Angular features should be deactivated by providing
	 * a value for the `ng-csp` attribute. The options are as follows:
	 *
	 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
	 *
	 * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings
	 *
	 * You can use these values in the following combinations:
	 *
	 *
	 * * No declaration means that Angular will assume that you can do inline styles, but it will do
	 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous
	 * versions of Angular.
	 *
	 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
	 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous
	 * versions of Angular.
	 *
	 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can
	 * inject inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
	 *
	 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
	 * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
	 *
	 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
	 * styles nor use eval, which is the same as an empty: ng-csp.
	 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
	 *
	 * @example
	 * This example shows how to apply the `ngCsp` directive to the `html` tag.
	   ```html
	     <!doctype html>
	     <html ng-app ng-csp>
	     ...
	     ...
	     </html>
	   ```
	  * @example
	      <!-- Note: the `.csp` suffix in the example name triggers CSP mode in our http server! -->
	      <example name="example.csp" module="cspExample" ng-csp="true">
	        <file name="index.html">
	          <div ng-controller="MainController as ctrl">
	            <div>
	              <button ng-click="ctrl.inc()" id="inc">Increment</button>
	              <span id="counter">
	                {{ctrl.counter}}
	              </span>
	            </div>

	            <div>
	              <button ng-click="ctrl.evil()" id="evil">Evil</button>
	              <span id="evilError">
	                {{ctrl.evilError}}
	              </span>
	            </div>
	          </div>
	        </file>
	        <file name="script.js">
	           angular.module('cspExample', [])
	             .controller('MainController', function MainController() {
	                this.counter = 0;
	                this.inc = function() {
	                  this.counter++;
	                };
	                this.evil = function() {
	                  try {
	                    eval('1+2'); // eslint-disable-line no-eval
	                  } catch (e) {
	                    this.evilError = e.message;
	                  }
	                };
	              });
	        </file>
	        <file name="protractor.js" type="protractor">
	          var util, webdriver;

	          var incBtn = element(by.id('inc'));
	          var counter = element(by.id('counter'));
	          var evilBtn = element(by.id('evil'));
	          var evilError = element(by.id('evilError'));

	          function getAndClearSevereErrors() {
	            return browser.manage().logs().get('browser').then(function(browserLog) {
	              return browserLog.filter(function(logEntry) {
	                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
	              });
	            });
	          }

	          function clearErrors() {
	            getAndClearSevereErrors();
	          }

	          function expectNoErrors() {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              expect(filteredLog.length).toEqual(0);
	              if (filteredLog.length) {
	                console.log('browser console errors: ' + util.inspect(filteredLog));
	              }
	            });
	          }

	          function expectError(regex) {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              var found = false;
	              filteredLog.forEach(function(log) {
	                if (log.message.match(regex)) {
	                  found = true;
	                }
	              });
	              if (!found) {
	                throw new Error('expected an error that matches ' + regex);
	              }
	            });
	          }

	          beforeEach(function() {
	            util = require('util');
	            webdriver = require('selenium-webdriver');
	          });

	          // For now, we only test on Chrome,
	          // as Safari does not load the page with Protractor's injected scripts,
	          // and Firefox webdriver always disables content security policy (#6358)
	          if (browser.params.browser !== 'chrome') {
	            return;
	          }

	          it('should not report errors when the page is loaded', function() {
	            // clear errors so we are not dependent on previous tests
	            clearErrors();
	            // Need to reload the page as the page is already loaded when
	            // we come here
	            browser.driver.getCurrentUrl().then(function(url) {
	              browser.get(url);
	            });
	            expectNoErrors();
	          });

	          it('should evaluate expressions', function() {
	            expect(counter.getText()).toEqual('0');
	            incBtn.click();
	            expect(counter.getText()).toEqual('1');
	            expectNoErrors();
	          });

	          it('should throw and report an error when using "eval"', function() {
	            evilBtn.click();
	            expect(evilError.getText()).toMatch(/Content Security Policy/);
	            expectError(/Content Security Policy/);
	          });
	        </file>
	      </example>
	  */

	// `ngCsp` is not implemented as a proper directive any more, because we need it be processed while
	// we bootstrap the app (before `$parse` is instantiated). For this reason, we just have the `csp()`
	// fn that looks for the `ng-csp` attribute anywhere in the current doc.

	/**
	 * @ngdoc directive
	 * @name ngClick
	 *
	 * @description
	 * The ngClick directive allows you to specify custom behavior when
	 * an element is clicked.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
	 * click. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-click">
	     <file name="index.html">
	      <button ng-click="count = count + 1" ng-init="count=0">
	        Increment
	      </button>
	      <span>
	        count: {{count}}
	      </span>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-click', function() {
	         expect(element(by.binding('count')).getText()).toMatch('0');
	         element(by.css('button')).click();
	         expect(element(by.binding('count')).getText()).toMatch('1');
	       });
	     </file>
	   </example>
	 */
	/*
	 * A collection of directives that allows creation of custom event handlers that are defined as
	 * angular expressions and are compiled and executed within the current scope.
	 */
	var ngEventDirectives = {};

	// For events that might fire synchronously during DOM manipulation
	// we need to execute their event handlers asynchronously using $evalAsync,
	// so that they are not executed in an inconsistent state.
	var forceAsyncEvents = {
	  'blur': true,
	  'focus': true
	};
	forEach(
	  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
	  function(eventName) {
	    var directiveName = directiveNormalize('ng-' + eventName);
	    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
	      return {
	        restrict: 'A',
	        compile: function($element, attr) {
	          // We expose the powerful $event object on the scope that provides access to the Window,
	          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
	          // checks at the cost of speed since event handler expressions are not executed as
	          // frequently as regular change detection.
	          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
	          return function ngEventHandler(scope, element) {
	            element.on(eventName, function(event) {
	              var callback = function() {
	                fn(scope, {$event:event});
	              };
	              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
	                scope.$evalAsync(callback);
	              } else {
	                scope.$apply(callback);
	              }
	            });
	          };
	        }
	      };
	    }];
	  }
	);

	/**
	 * @ngdoc directive
	 * @name ngDblclick
	 *
	 * @description
	 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
	 * a dblclick. (The Event object is available as `$event`)
	 *
	 * @example
	   <example name="ng-dblclick">
	     <file name="index.html">
	      <button ng-dblclick="count = count + 1" ng-init="count=0">
	        Increment (on double click)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMousedown
	 *
	 * @description
	 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
	 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mousedown">
	     <file name="index.html">
	      <button ng-mousedown="count = count + 1" ng-init="count=0">
	        Increment (on mouse down)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseup
	 *
	 * @description
	 * Specify custom behavior on mouseup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
	 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseup">
	     <file name="index.html">
	      <button ng-mouseup="count = count + 1" ng-init="count=0">
	        Increment (on mouse up)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngMouseover
	 *
	 * @description
	 * Specify custom behavior on mouseover event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
	 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseover">
	     <file name="index.html">
	      <button ng-mouseover="count = count + 1" ng-init="count=0">
	        Increment (when mouse is over)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseenter
	 *
	 * @description
	 * Specify custom behavior on mouseenter event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
	 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseenter">
	     <file name="index.html">
	      <button ng-mouseenter="count = count + 1" ng-init="count=0">
	        Increment (when mouse enters)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseleave
	 *
	 * @description
	 * Specify custom behavior on mouseleave event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
	 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseleave">
	     <file name="index.html">
	      <button ng-mouseleave="count = count + 1" ng-init="count=0">
	        Increment (when mouse leaves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMousemove
	 *
	 * @description
	 * Specify custom behavior on mousemove event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
	 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mousemove">
	     <file name="index.html">
	      <button ng-mousemove="count = count + 1" ng-init="count=0">
	        Increment (when mouse moves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeydown
	 *
	 * @description
	 * Specify custom behavior on keydown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
	 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example name="ng-keydown">
	     <file name="index.html">
	      <input ng-keydown="count = count + 1" ng-init="count=0">
	      key down count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeyup
	 *
	 * @description
	 * Specify custom behavior on keyup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
	 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example name="ng-keyup">
	     <file name="index.html">
	       <p>Typing in the input box below updates the key count</p>
	       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

	       <p>Typing in the input box below updates the keycode</p>
	       <input ng-keyup="event=$event">
	       <p>event keyCode: {{ event.keyCode }}</p>
	       <p>event altKey: {{ event.altKey }}</p>
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeypress
	 *
	 * @description
	 * Specify custom behavior on keypress event.
	 *
	 * @element ANY
	 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
	 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
	 * and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example name="ng-keypress">
	     <file name="index.html">
	      <input ng-keypress="count = count + 1" ng-init="count=0">
	      key press count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngSubmit
	 *
	 * @description
	 * Enables binding angular expressions to onsubmit events.
	 *
	 * Additionally it prevents the default action (which for form means sending the request to the
	 * server and reloading the current page), but only if the form does not contain `action`,
	 * `data-action`, or `x-action` attributes.
	 *
	 * <div class="alert alert-warning">
	 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
	 * `ngSubmit` handlers together. See the
	 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
	 * for a detailed discussion of when `ngSubmit` may be triggered.
	 * </div>
	 *
	 * @element form
	 * @priority 0
	 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
	 * ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example module="submitExample" name="ng-submit">
	     <file name="index.html">
	      <script>
	        angular.module('submitExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
	      </script>
	      <form ng-submit="submit()" ng-controller="ExampleController">
	        Enter text and hit enter:
	        <input type="text" ng-model="text" name="text" />
	        <input type="submit" id="submit" value="Submit" />
	        <pre>list={{list}}</pre>
	      </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
	       it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngFocus
	 *
	 * @description
	 * Specify custom behavior on focus event.
	 *
	 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
	 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */

	/**
	 * @ngdoc directive
	 * @name ngBlur
	 *
	 * @description
	 * Specify custom behavior on blur event.
	 *
	 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
	 * an element has lost focus.
	 *
	 * Note: As the `blur` event is executed synchronously also during DOM manipulations
	 * (e.g. removing a focussed input),
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
	 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */

	/**
	 * @ngdoc directive
	 * @name ngCopy
	 *
	 * @description
	 * Specify custom behavior on copy event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
	 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-copy">
	     <file name="index.html">
	      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
	      copied: {{copied}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngCut
	 *
	 * @description
	 * Specify custom behavior on cut event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
	 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-cut">
	     <file name="index.html">
	      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
	      cut: {{cut}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngPaste
	 *
	 * @description
	 * Specify custom behavior on paste event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
	 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-paste">
	     <file name="index.html">
	      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
	      pasted: {{paste}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngIf
	 * @restrict A
	 * @multiElement
	 *
	 * @description
	 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
	 * {expression}. If the expression assigned to `ngIf` evaluates to a false
	 * value then the element is removed from the DOM, otherwise a clone of the
	 * element is reinserted into the DOM.
	 *
	 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
	 * element in the DOM rather than changing its visibility via the `display` css property.  A common
	 * case when this difference is significant is when using css selectors that rely on an element's
	 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
	 *
	 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
	 * is created when the element is restored.  The scope created within `ngIf` inherits from
	 * its parent scope using
	 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
	 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
	 * a javascript primitive defined in the parent scope. In this case any modifications made to the
	 * variable within the child scope will override (hide) the value in the parent scope.
	 *
	 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
	 * is if an element's class attribute is directly modified after it's compiled, using something like
	 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
	 * the added class will be lost because the original compiled state is used to regenerate the element.
	 *
	 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
	 * and `leave` effects.
	 *
	 * @animations
	 * | Animation                        | Occurs                               |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
	 * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
	 *
	 * @element ANY
	 * @scope
	 * @priority 600
	 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
	 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
	 *     element is added to the DOM tree.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-if">
	    <file name="index.html">
	      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
	      Show when checked:
	      <span ng-if="checked" class="animate-if">
	        This is removed when the checkbox is unchecked.
	      </span>
	    </file>
	    <file name="animations.css">
	      .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }

	      .animate-if.ng-enter, .animate-if.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }

	      .animate-if.ng-enter,
	      .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }

	      .animate-if.ng-leave,
	      .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
	    </file>
	  </example>
	 */
	var ngIfDirective = ['$animate', '$compile', function($animate, $compile) {
	  return {
	    multiElement: true,
	    transclude: 'element',
	    priority: 600,
	    terminal: true,
	    restrict: 'A',
	    $$tlb: true,
	    link: function($scope, $element, $attr, ctrl, $transclude) {
	        var block, childScope, previousElements;
	        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

	          if (value) {
	            if (!childScope) {
	              $transclude(function(clone, newScope) {
	                childScope = newScope;
	                clone[clone.length++] = $compile.$$createComment('end ngIf', $attr.ngIf);
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block = {
	                  clone: clone
	                };
	                $animate.enter(clone, $element.parent(), $element);
	              });
	            }
	          } else {
	            if (previousElements) {
	              previousElements.remove();
	              previousElements = null;
	            }
	            if (childScope) {
	              childScope.$destroy();
	              childScope = null;
	            }
	            if (block) {
	              previousElements = getBlockNodes(block.clone);
	              $animate.leave(previousElements).done(function(response) {
	                if (response !== false) previousElements = null;
	              });
	              block = null;
	            }
	          }
	        });
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngInclude
	 * @restrict ECA
	 *
	 * @description
	 * Fetches, compiles and includes an external HTML fragment.
	 *
	 * By default, the template URL is restricted to the same domain and protocol as the
	 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
	 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
	 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
	 * ng.$sce Strict Contextual Escaping}.
	 *
	 * In addition, the browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy may further restrict whether the template is successfully loaded.
	 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
	 * access on some browsers.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |
	 * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |
	 *
	 * The enter and leave animation occur concurrently.
	 *
	 * @scope
	 * @priority 400
	 *
	 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
	 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
	 * @param {string=} onload Expression to evaluate when a new partial is loaded.
	 *                  <div class="alert alert-warning">
	 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
	 *                  a function with the name on the window element, which will usually throw a
	 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
	 *                  different form that {@link guide/directive#normalization matches} `onload`.
	 *                  </div>
	   *
	 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
	 *                  $anchorScroll} to scroll the viewport after the content is loaded.
	 *
	 *                  - If the attribute is not set, disable scrolling.
	 *                  - If the attribute is set without value, enable scrolling.
	 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
	 *
	 * @example
	  <example module="includeExample" deps="angular-animate.js" animations="true" name="ng-include">
	    <file name="index.html">
	     <div ng-controller="ExampleController">
	       <select ng-model="template" ng-options="t.name for t in templates">
	        <option value="">(blank)</option>
	       </select>
	       url of the template: <code>{{template.url}}</code>
	       <hr/>
	       <div class="slide-animate-container">
	         <div class="slide-animate" ng-include="template.url"></div>
	       </div>
	     </div>
	    </file>
	    <file name="script.js">
	      angular.module('includeExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.templates =
	            [{ name: 'template1.html', url: 'template1.html'},
	             { name: 'template2.html', url: 'template2.html'}];
	          $scope.template = $scope.templates[0];
	        }]);
	     </file>
	    <file name="template1.html">
	      Content of template1.html
	    </file>
	    <file name="template2.html">
	      Content of template2.html
	    </file>
	    <file name="animations.css">
	      .slide-animate-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .slide-animate {
	        padding:10px;
	      }

	      .slide-animate.ng-enter, .slide-animate.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	        display:block;
	        padding:10px;
	      }

	      .slide-animate.ng-enter {
	        top:-50px;
	      }
	      .slide-animate.ng-enter.ng-enter-active {
	        top:0;
	      }

	      .slide-animate.ng-leave {
	        top:0;
	      }
	      .slide-animate.ng-leave.ng-leave-active {
	        top:50px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var templateSelect = element(by.model('template'));
	      var includeElem = element(by.css('[ng-include]'));

	      it('should load template1.html', function() {
	        expect(includeElem.getText()).toMatch(/Content of template1.html/);
	      });

	      it('should load template2.html', function() {
	        if (browser.params.browser === 'firefox') {
	          // Firefox can't handle using selects
	          // See https://github.com/angular/protractor/issues/480
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(2).click();
	        expect(includeElem.getText()).toMatch(/Content of template2.html/);
	      });

	      it('should change to blank', function() {
	        if (browser.params.browser === 'firefox') {
	          // Firefox can't handle using selects
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(0).click();
	        expect(includeElem.isPresent()).toBe(false);
	      });
	    </file>
	  </example>
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentRequested
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted every time the ngInclude content is requested.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentLoaded
	 * @eventType emit on the current ngInclude scope
	 * @description
	 * Emitted every time the ngInclude content is reloaded.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentError
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',
	                  function($templateRequest,   $anchorScroll,   $animate) {
	  return {
	    restrict: 'ECA',
	    priority: 400,
	    terminal: true,
	    transclude: 'element',
	    controller: angular.noop,
	    compile: function(element, attr) {
	      var srcExp = attr.ngInclude || attr.src,
	          onloadExp = attr.onload || '',
	          autoScrollExp = attr.autoscroll;

	      return function(scope, $element, $attr, ctrl, $transclude) {
	        var changeCounter = 0,
	            currentScope,
	            previousElement,
	            currentElement;

	        var cleanupLastIncludeContent = function() {
	          if (previousElement) {
	            previousElement.remove();
	            previousElement = null;
	          }
	          if (currentScope) {
	            currentScope.$destroy();
	            currentScope = null;
	          }
	          if (currentElement) {
	            $animate.leave(currentElement).done(function(response) {
	              if (response !== false) previousElement = null;
	            });
	            previousElement = currentElement;
	            currentElement = null;
	          }
	        };

	        scope.$watch(srcExp, function ngIncludeWatchAction(src) {
	          var afterAnimation = function(response) {
	            if (response !== false && isDefined(autoScrollExp) &&
	              (!autoScrollExp || scope.$eval(autoScrollExp))) {
	                $anchorScroll();
	            }
	          };
	          var thisChangeId = ++changeCounter;

	          if (src) {
	            //set the 2nd param to true to ignore the template request error so that the inner
	            //contents and scope can be cleaned up.
	            $templateRequest(src, true).then(function(response) {
	              if (scope.$$destroyed) return;

	              if (thisChangeId !== changeCounter) return;
	              var newScope = scope.$new();
	              ctrl.template = response;

	              // Note: This will also link all children of ng-include that were contained in the original
	              // html. If that content contains controllers, ... they could pollute/change the scope.
	              // However, using ng-include on an element with additional content does not make sense...
	              // Note: We can't remove them in the cloneAttchFn of $transclude as that
	              // function is called before linking the content, which would apply child
	              // directives to non existing elements.
	              var clone = $transclude(newScope, function(clone) {
	                cleanupLastIncludeContent();
	                $animate.enter(clone, null, $element).done(afterAnimation);
	              });

	              currentScope = newScope;
	              currentElement = clone;

	              currentScope.$emit('$includeContentLoaded', src);
	              scope.$eval(onloadExp);
	            }, function() {
	              if (scope.$$destroyed) return;

	              if (thisChangeId === changeCounter) {
	                cleanupLastIncludeContent();
	                scope.$emit('$includeContentError', src);
	              }
	            });
	            scope.$emit('$includeContentRequested', src);
	          } else {
	            cleanupLastIncludeContent();
	            ctrl.template = null;
	          }
	        });
	      };
	    }
	  };
	}];

	// This directive is called during the $transclude call of the first `ngInclude` directive.
	// It will replace and compile the content of the element with the loaded template.
	// We need this directive so that the element content is already filled when
	// the link function of another directive on the same element as ngInclude
	// is called.
	var ngIncludeFillContentDirective = ['$compile',
	  function($compile) {
	    return {
	      restrict: 'ECA',
	      priority: -400,
	      require: 'ngInclude',
	      link: function(scope, $element, $attr, ctrl) {
	        if (toString.call($element[0]).match(/SVG/)) {
	          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
	          // support innerHTML, so detect this here and try to generate the contents
	          // specially.
	          $element.empty();
	          $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(scope,
	              function namespaceAdaptedClone(clone) {
	            $element.append(clone);
	          }, {futureParentElement: $element});
	          return;
	        }

	        $element.html(ctrl.template);
	        $compile($element.contents())(scope);
	      }
	    };
	  }];

	/**
	 * @ngdoc directive
	 * @name ngInit
	 * @restrict AC
	 *
	 * @description
	 * The `ngInit` directive allows you to evaluate an expression in the
	 * current scope.
	 *
	 * <div class="alert alert-danger">
	 * This directive can be abused to add unnecessary amounts of logic into your templates.
	 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
	 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
	 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
	 * rather than `ngInit` to initialize values on a scope.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
	 * sure you have parentheses to ensure correct operator precedence:
	 * <pre class="prettyprint">
	 * `<div ng-init="test1 = ($index | toString)"></div>`
	 * </pre>
	 * </div>
	 *
	 * @priority 450
	 *
	 * @element ANY
	 * @param {expression} ngInit {@link guide/expression Expression} to eval.
	 *
	 * @example
	   <example module="initExample" name="ng-init">
	     <file name="index.html">
	   <script>
	     angular.module('initExample', [])
	       .controller('ExampleController', ['$scope', function($scope) {
	         $scope.list = [['a', 'b'], ['c', 'd']];
	       }]);
	   </script>
	   <div ng-controller="ExampleController">
	     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
	       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
	          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
	       </div>
	     </div>
	   </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should alias index positions', function() {
	         var elements = element.all(by.css('.example-init'));
	         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
	         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
	         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
	         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
	       });
	     </file>
	   </example>
	 */
	var ngInitDirective = ngDirective({
	  priority: 450,
	  compile: function() {
	    return {
	      pre: function(scope, element, attrs) {
	        scope.$eval(attrs.ngInit);
	      }
	    };
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngList
	 *
	 * @description
	 * Text input that converts between a delimited string and an array of strings. The default
	 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
	 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
	 *
	 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
	 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
	 *   list item is respected. This implies that the user of the directive is responsible for
	 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
	 *   tab or newline character.
	 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
	 *   when joining the list items back together) and whitespace around each list item is stripped
	 *   before it is added to the model.
	 *
	 * ### Example with Validation
	 *
	 * <example name="ngList-directive" module="listExample">
	 *   <file name="app.js">
	 *      angular.module('listExample', [])
	 *        .controller('ExampleController', ['$scope', function($scope) {
	 *          $scope.names = ['morpheus', 'neo', 'trinity'];
	 *        }]);
	 *   </file>
	 *   <file name="index.html">
	 *    <form name="myForm" ng-controller="ExampleController">
	 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
	 *      <span role="alert">
	 *        <span class="error" ng-show="myForm.namesInput.$error.required">
	 *        Required!</span>
	 *      </span>
	 *      <br>
	 *      <tt>names = {{names}}</tt><br/>
	 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
	 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
	 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	 *     </form>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var listInput = element(by.model('names'));
	 *     var names = element(by.exactBinding('names'));
	 *     var valid = element(by.binding('myForm.namesInput.$valid'));
	 *     var error = element(by.css('span.error'));
	 *
	 *     it('should initialize to model', function() {
	 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
	 *       expect(valid.getText()).toContain('true');
	 *       expect(error.getCssValue('display')).toBe('none');
	 *     });
	 *
	 *     it('should be invalid if empty', function() {
	 *       listInput.clear();
	 *       listInput.sendKeys('');
	 *
	 *       expect(names.getText()).toContain('');
	 *       expect(valid.getText()).toContain('false');
	 *       expect(error.getCssValue('display')).not.toBe('none');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * ### Example - splitting on newline
	 * <example name="ngList-directive-newlines">
	 *   <file name="index.html">
	 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
	 *    <pre>{{ list | json }}</pre>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it("should split the text by newlines", function() {
	 *       var listInput = element(by.model('list'));
	 *       var output = element(by.binding('list | json'));
	 *       listInput.sendKeys('abc\ndef\nghi');
	 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * @element input
	 * @param {string=} ngList optional delimiter that should be used to split the value.
	 */
	var ngListDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    require: 'ngModel',
	    link: function(scope, element, attr, ctrl) {
	      var ngList = attr.ngList || ', ';
	      var trimValues = attr.ngTrim !== 'false';
	      var separator = trimValues ? trim(ngList) : ngList;

	      var parse = function(viewValue) {
	        // If the viewValue is invalid (say required but empty) it will be `undefined`
	        if (isUndefined(viewValue)) return;

	        var list = [];

	        if (viewValue) {
	          forEach(viewValue.split(separator), function(value) {
	            if (value) list.push(trimValues ? trim(value) : value);
	          });
	        }

	        return list;
	      };

	      ctrl.$parsers.push(parse);
	      ctrl.$formatters.push(function(value) {
	        if (isArray(value)) {
	          return value.join(ngList);
	        }

	        return undefined;
	      });

	      // Override the standard $isEmpty because an empty array means the input is empty.
	      ctrl.$isEmpty = function(value) {
	        return !value || !value.length;
	      };
	    }
	  };
	};

	/* global VALID_CLASS: true,
	  INVALID_CLASS: true,
	  PRISTINE_CLASS: true,
	  DIRTY_CLASS: true,
	  UNTOUCHED_CLASS: true,
	  TOUCHED_CLASS: true,
	  PENDING_CLASS: true,
	  addSetValidityMethod: true,
	  setupValidity: true,
	  defaultModelOptions: false
	*/


	var VALID_CLASS = 'ng-valid',
	    INVALID_CLASS = 'ng-invalid',
	    PRISTINE_CLASS = 'ng-pristine',
	    DIRTY_CLASS = 'ng-dirty',
	    UNTOUCHED_CLASS = 'ng-untouched',
	    TOUCHED_CLASS = 'ng-touched',
	    EMPTY_CLASS = 'ng-empty',
	    NOT_EMPTY_CLASS = 'ng-not-empty';

	var ngModelMinErr = minErr('ngModel');

	/**
	 * @ngdoc type
	 * @name ngModel.NgModelController
	 *
	 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
	 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
	 * is set.
	 * @property {*} $modelValue The value in the model that the control is bound to.
	 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
	       the control reads value from the DOM. The functions are called in array order, each passing
	       its return value through to the next. The last return value is forwarded to the
	       {@link ngModel.NgModelController#$validators `$validators`} collection.

	Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
	`$viewValue`}.

	Returning `undefined` from a parser means a parse error occurred. In that case,
	no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
	will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
	is set to `true`. The parse error is stored in `ngModel.$error.parse`.

	 *
	 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
	       the model value changes. The functions are called in reverse array order, each passing the value through to the
	       next. The last return value is used as the actual DOM value.
	       Used to format / convert values for display in the control.
	 * ```js
	 * function formatter(value) {
	 *   if (value) {
	 *     return value.toUpperCase();
	 *   }
	 * }
	 * ngModel.$formatters.push(formatter);
	 * ```
	 *
	 * @property {Object.<string, function>} $validators A collection of validators that are applied
	 *      whenever the model value changes. The key value within the object refers to the name of the
	 *      validator while the function refers to the validation operation. The validation operation is
	 *      provided with the model value as an argument and must return a true or false value depending
	 *      on the response of that validation.
	 *
	 * ```js
	 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *   return /[0-9]+/.test(value) &&
	 *          /[a-z]+/.test(value) &&
	 *          /[A-Z]+/.test(value) &&
	 *          /\W+/.test(value);
	 * };
	 * ```
	 *
	 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
	 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
	 *      is expected to return a promise when it is run during the model validation process. Once the promise
	 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
	 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
	 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
	 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
	 *      will only run once all synchronous validators have passed.
	 *
	 * Please note that if $http is used then it is important that the server returns a success HTTP response code
	 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
	 *
	 * ```js
	 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *
	 *   // Lookup user by username
	 *   return $http.get('/api/users/' + value).
	 *      then(function resolved() {
	 *        //username exists, this means validation fails
	 *        return $q.reject('exists');
	 *      }, function rejected() {
	 *        //username does not exist, therefore this validation passes
	 *        return true;
	 *      });
	 * };
	 * ```
	 *
	 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
	 *     view value has changed. It is called with no arguments, and its return value is ignored.
	 *     This can be used in place of additional $watches against the model value.
	 *
	 * @property {Object} $error An object hash with all failing validator ids as keys.
	 * @property {Object} $pending An object hash with all pending validator ids as keys.
	 *
	 * @property {boolean} $untouched True if control has not lost focus yet.
	 * @property {boolean} $touched True if control has lost focus.
	 * @property {boolean} $pristine True if user has not interacted with the control yet.
	 * @property {boolean} $dirty True if user has already interacted with the control.
	 * @property {boolean} $valid True if there is no error.
	 * @property {boolean} $invalid True if at least one error on the control.
	 * @property {string} $name The name attribute of the control.
	 *
	 * @description
	 *
	 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
	 * The controller contains services for data-binding, validation, CSS updates, and value formatting
	 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
	 * listening to DOM events.
	 * Such DOM related logic should be provided by other directives which make use of
	 * `NgModelController` for data-binding to control elements.
	 * Angular provides this DOM logic for most {@link input `input`} elements.
	 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
	 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
	 *
	 * @example
	 * ### Custom Control Example
	 * This example shows how to use `NgModelController` with a custom control to achieve
	 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
	 * collaborate together to achieve the desired result.
	 *
	 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
	 * contents be edited in place by the user.
	 *
	 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
	 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
	 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
	 * that content using the `$sce` service.
	 *
	 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
	    <file name="style.css">
	      [contenteditable] {
	        border: 1px solid black;
	        background-color: white;
	        min-height: 20px;
	      }

	      .ng-invalid {
	        border: 1px solid red;
	      }

	    </file>
	    <file name="script.js">
	      angular.module('customControl', ['ngSanitize']).
	        directive('contenteditable', ['$sce', function($sce) {
	          return {
	            restrict: 'A', // only activate on element attribute
	            require: '?ngModel', // get a hold of NgModelController
	            link: function(scope, element, attrs, ngModel) {
	              if (!ngModel) return; // do nothing if no ng-model

	              // Specify how UI should be updated
	              ngModel.$render = function() {
	                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
	              };

	              // Listen for change events to enable binding
	              element.on('blur keyup change', function() {
	                scope.$evalAsync(read);
	              });
	              read(); // initialize

	              // Write data to the model
	              function read() {
	                var html = element.html();
	                // When we clear the content editable the browser leaves a <br> behind
	                // If strip-br attribute is provided then we strip this out
	                if (attrs.stripBr && html === '<br>') {
	                  html = '';
	                }
	                ngModel.$setViewValue(html);
	              }
	            }
	          };
	        }]);
	    </file>
	    <file name="index.html">
	      <form name="myForm">
	       <div contenteditable
	            name="myWidget" ng-model="userContent"
	            strip-br="true"
	            required>Change me!</div>
	        <span ng-show="myForm.myWidget.$error.required">Required!</span>
	       <hr>
	       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	    it('should data-bind and become invalid', function() {
	      if (browser.params.browser === 'safari' || browser.params.browser === 'firefox') {
	        // SafariDriver can't handle contenteditable
	        // and Firefox driver can't clear contenteditables very well
	        return;
	      }
	      var contentEditable = element(by.css('[contenteditable]'));
	      var content = 'Change me!';

	      expect(contentEditable.getText()).toEqual(content);

	      contentEditable.clear();
	      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
	      expect(contentEditable.getText()).toEqual('');
	      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
	    });
	    </file>
	 * </example>
	 *
	 *
	 */
	NgModelController.$inject = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$q', '$interpolate'];
	function NgModelController($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $q, $interpolate) {
	  this.$viewValue = Number.NaN;
	  this.$modelValue = Number.NaN;
	  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
	  this.$validators = {};
	  this.$asyncValidators = {};
	  this.$parsers = [];
	  this.$formatters = [];
	  this.$viewChangeListeners = [];
	  this.$untouched = true;
	  this.$touched = false;
	  this.$pristine = true;
	  this.$dirty = false;
	  this.$valid = true;
	  this.$invalid = false;
	  this.$error = {}; // keep invalid keys here
	  this.$$success = {}; // keep valid keys here
	  this.$pending = undefined; // keep pending keys here
	  this.$name = $interpolate($attr.name || '', false)($scope);
	  this.$$parentForm = nullFormCtrl;
	  this.$options = defaultModelOptions;

	  this.$$parsedNgModel = $parse($attr.ngModel);
	  this.$$parsedNgModelAssign = this.$$parsedNgModel.assign;
	  this.$$ngModelGet = this.$$parsedNgModel;
	  this.$$ngModelSet = this.$$parsedNgModelAssign;
	  this.$$pendingDebounce = null;
	  this.$$parserValid = undefined;

	  this.$$currentValidationRunId = 0;

	  this.$$scope = $scope;
	  this.$$attr = $attr;
	  this.$$element = $element;
	  this.$$animate = $animate;
	  this.$$timeout = $timeout;
	  this.$$parse = $parse;
	  this.$$q = $q;
	  this.$$exceptionHandler = $exceptionHandler;

	  setupValidity(this);
	  setupModelWatcher(this);
	}

	NgModelController.prototype = {
	  $$initGetterSetters: function() {
	    if (this.$options.getOption('getterSetter')) {
	      var invokeModelGetter = this.$$parse(this.$$attr.ngModel + '()'),
	          invokeModelSetter = this.$$parse(this.$$attr.ngModel + '($$$p)');

	      this.$$ngModelGet = function($scope) {
	        var modelValue = this.$$parsedNgModel($scope);
	        if (isFunction(modelValue)) {
	          modelValue = invokeModelGetter($scope);
	        }
	        return modelValue;
	      };
	      this.$$ngModelSet = function($scope, newValue) {
	        if (isFunction(this.$$parsedNgModel($scope))) {
	          invokeModelSetter($scope, {$$$p: newValue});
	        } else {
	          this.$$parsedNgModelAssign($scope, newValue);
	        }
	      };
	    } else if (!this.$$parsedNgModel.assign) {
	      throw ngModelMinErr('nonassign', 'Expression \'{0}\' is non-assignable. Element: {1}',
	          this.$$attr.ngModel, startingTag(this.$$element));
	    }
	  },


	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$render
	   *
	   * @description
	   * Called when the view needs to be updated. It is expected that the user of the ng-model
	   * directive will implement this method.
	   *
	   * The `$render()` method is invoked in the following situations:
	   *
	   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
	   *   committed value then `$render()` is called to update the input control.
	   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
	   *   the `$viewValue` are different from last time.
	   *
	   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
	   * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
	   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
	   * invoked if you only change a property on the objects.
	   */
	  $render: noop,

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$isEmpty
	   *
	   * @description
	   * This is called when we need to determine if the value of an input is empty.
	   *
	   * For instance, the required directive does this to work out if the input has data or not.
	   *
	   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
	   *
	   * You can override this for input directives whose concept of being empty is different from the
	   * default. The `checkboxInputType` directive does this because in its case a value of `false`
	   * implies empty.
	   *
	   * @param {*} value The value of the input to check for emptiness.
	   * @returns {boolean} True if `value` is "empty".
	   */
	  $isEmpty: function(value) {
	    // eslint-disable-next-line no-self-compare
	    return isUndefined(value) || value === '' || value === null || value !== value;
	  },

	  $$updateEmptyClasses: function(value) {
	    if (this.$isEmpty(value)) {
	      this.$$animate.removeClass(this.$$element, NOT_EMPTY_CLASS);
	      this.$$animate.addClass(this.$$element, EMPTY_CLASS);
	    } else {
	      this.$$animate.removeClass(this.$$element, EMPTY_CLASS);
	      this.$$animate.addClass(this.$$element, NOT_EMPTY_CLASS);
	    }
	  },

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setPristine
	   *
	   * @description
	   * Sets the control to its pristine state.
	   *
	   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
	   * state (`ng-pristine` class). A model is considered to be pristine when the control
	   * has not been changed from when first compiled.
	   */
	  $setPristine: function() {
	    this.$dirty = false;
	    this.$pristine = true;
	    this.$$animate.removeClass(this.$$element, DIRTY_CLASS);
	    this.$$animate.addClass(this.$$element, PRISTINE_CLASS);
	  },

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setDirty
	   *
	   * @description
	   * Sets the control to its dirty state.
	   *
	   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
	   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
	   * from when first compiled.
	   */
	  $setDirty: function() {
	    this.$dirty = true;
	    this.$pristine = false;
	    this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);
	    this.$$animate.addClass(this.$$element, DIRTY_CLASS);
	    this.$$parentForm.$setDirty();
	  },

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setUntouched
	   *
	   * @description
	   * Sets the control to its untouched state.
	   *
	   * This method can be called to remove the `ng-touched` class and set the control to its
	   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
	   * by default, however this function can be used to restore that state if the model has
	   * already been touched by the user.
	   */
	  $setUntouched: function() {
	    this.$touched = false;
	    this.$untouched = true;
	    this.$$animate.setClass(this.$$element, UNTOUCHED_CLASS, TOUCHED_CLASS);
	  },

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setTouched
	   *
	   * @description
	   * Sets the control to its touched state.
	   *
	   * This method can be called to remove the `ng-untouched` class and set the control to its
	   * touched state (`ng-touched` class). A model is considered to be touched when the user has
	   * first focused the control element and then shifted focus away from the control (blur event).
	   */
	  $setTouched: function() {
	    this.$touched = true;
	    this.$untouched = false;
	    this.$$animate.setClass(this.$$element, TOUCHED_CLASS, UNTOUCHED_CLASS);
	  },

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$rollbackViewValue
	   *
	   * @description
	   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
	   * which may be caused by a pending debounced event or because the input is waiting for some
	   * future event.
	   *
	   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
	   * depend on special events such as `blur`, there can be a period when the `$viewValue` is out of
	   * sync with the ngModel's `$modelValue`.
	   *
	   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
	   * and reset the input to the last committed view value.
	   *
	   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
	   * programmatically before these debounced/future events have resolved/occurred, because Angular's
	   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
	   *
	   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
	   * input which may have such events pending. This is important in order to make sure that the
	   * input field will be updated with the new model value and any pending operations are cancelled.
	   *
	   * <example name="ng-model-cancel-update" module="cancel-update-example">
	   *   <file name="app.js">
	   *     angular.module('cancel-update-example', [])
	   *
	   *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.model = {value1: '', value2: ''};
	   *
	   *       $scope.setEmpty = function(e, value, rollback) {
	   *         if (e.keyCode === 27) {
	   *           e.preventDefault();
	   *           if (rollback) {
	   *             $scope.myForm[value].$rollbackViewValue();
	   *           }
	   *           $scope.model[value] = '';
	   *         }
	   *       };
	   *     }]);
	   *   </file>
	   *   <file name="index.html">
	   *     <div ng-controller="CancelUpdateController">
	   *       <p>Both of these inputs are only updated if they are blurred. Hitting escape should
	   *       empty them. Follow these steps and observe the difference:</p>
	   *       <ol>
	   *         <li>Type something in the input. You will see that the model is not yet updated</li>
	   *         <li>Press the Escape key.
	   *           <ol>
	   *             <li> In the first example, nothing happens, because the model is already '', and no
	   *             update is detected. If you blur the input, the model will be set to the current view.
	   *             </li>
	   *             <li> In the second example, the pending update is cancelled, and the input is set back
	   *             to the last committed view value (''). Blurring the input does nothing.
	   *             </li>
	   *           </ol>
	   *         </li>
	   *       </ol>
	   *
	   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
	   *         <div>
	   *           <p id="inputDescription1">Without $rollbackViewValue():</p>
	   *           <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
	   *                  ng-keydown="setEmpty($event, 'value1')">
	   *           value1: "{{ model.value1 }}"
	   *         </div>
	   *
	   *         <div>
	   *           <p id="inputDescription2">With $rollbackViewValue():</p>
	   *           <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
	   *                  ng-keydown="setEmpty($event, 'value2', true)">
	   *           value2: "{{ model.value2 }}"
	   *         </div>
	   *       </form>
	   *     </div>
	   *   </file>
	       <file name="style.css">
	          div {
	            display: table-cell;
	          }
	          div:nth-child(1) {
	            padding-right: 30px;
	          }

	        </file>
	   * </example>
	   */
	  $rollbackViewValue: function() {
	    this.$$timeout.cancel(this.$$pendingDebounce);
	    this.$viewValue = this.$$lastCommittedViewValue;
	    this.$render();
	  },

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$validate
	   *
	   * @description
	   * Runs each of the registered validators (first synchronous validators and then
	   * asynchronous validators).
	   * If the validity changes to invalid, the model will be set to `undefined`,
	   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
	   * If the validity changes to valid, it will set the model to the last available valid
	   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
	   */
	  $validate: function() {
	    // ignore $validate before model is initialized
	    if (isNumberNaN(this.$modelValue)) {
	      return;
	    }

	    var viewValue = this.$$lastCommittedViewValue;
	    // Note: we use the $$rawModelValue as $modelValue might have been
	    // set to undefined during a view -> model update that found validation
	    // errors. We can't parse the view here, since that could change
	    // the model although neither viewValue nor the model on the scope changed
	    var modelValue = this.$$rawModelValue;

	    var prevValid = this.$valid;
	    var prevModelValue = this.$modelValue;

	    var allowInvalid = this.$options.getOption('allowInvalid');

	    var that = this;
	    this.$$runValidators(modelValue, viewValue, function(allValid) {
	      // If there was no change in validity, don't update the model
	      // This prevents changing an invalid modelValue to undefined
	      if (!allowInvalid && prevValid !== allValid) {
	        // Note: Don't check this.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        that.$modelValue = allValid ? modelValue : undefined;

	        if (that.$modelValue !== prevModelValue) {
	          that.$$writeModelToScope();
	        }
	      }
	    });
	  },

	  $$runValidators: function(modelValue, viewValue, doneCallback) {
	    this.$$currentValidationRunId++;
	    var localValidationRunId = this.$$currentValidationRunId;
	    var that = this;

	    // check parser error
	    if (!processParseErrors()) {
	      validationDone(false);
	      return;
	    }
	    if (!processSyncValidators()) {
	      validationDone(false);
	      return;
	    }
	    processAsyncValidators();

	    function processParseErrors() {
	      var errorKey = that.$$parserName || 'parse';
	      if (isUndefined(that.$$parserValid)) {
	        setValidity(errorKey, null);
	      } else {
	        if (!that.$$parserValid) {
	          forEach(that.$validators, function(v, name) {
	            setValidity(name, null);
	          });
	          forEach(that.$asyncValidators, function(v, name) {
	            setValidity(name, null);
	          });
	        }
	        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
	        setValidity(errorKey, that.$$parserValid);
	        return that.$$parserValid;
	      }
	      return true;
	    }

	    function processSyncValidators() {
	      var syncValidatorsValid = true;
	      forEach(that.$validators, function(validator, name) {
	        var result = Boolean(validator(modelValue, viewValue));
	        syncValidatorsValid = syncValidatorsValid && result;
	        setValidity(name, result);
	      });
	      if (!syncValidatorsValid) {
	        forEach(that.$asyncValidators, function(v, name) {
	          setValidity(name, null);
	        });
	        return false;
	      }
	      return true;
	    }

	    function processAsyncValidators() {
	      var validatorPromises = [];
	      var allValid = true;
	      forEach(that.$asyncValidators, function(validator, name) {
	        var promise = validator(modelValue, viewValue);
	        if (!isPromiseLike(promise)) {
	          throw ngModelMinErr('nopromise',
	            'Expected asynchronous validator to return a promise but got \'{0}\' instead.', promise);
	        }
	        setValidity(name, undefined);
	        validatorPromises.push(promise.then(function() {
	          setValidity(name, true);
	        }, function() {
	          allValid = false;
	          setValidity(name, false);
	        }));
	      });
	      if (!validatorPromises.length) {
	        validationDone(true);
	      } else {
	        that.$$q.all(validatorPromises).then(function() {
	          validationDone(allValid);
	        }, noop);
	      }
	    }

	    function setValidity(name, isValid) {
	      if (localValidationRunId === that.$$currentValidationRunId) {
	        that.$setValidity(name, isValid);
	      }
	    }

	    function validationDone(allValid) {
	      if (localValidationRunId === that.$$currentValidationRunId) {

	        doneCallback(allValid);
	      }
	    }
	  },

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$commitViewValue
	   *
	   * @description
	   * Commit a pending update to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  $commitViewValue: function() {
	    var viewValue = this.$viewValue;

	    this.$$timeout.cancel(this.$$pendingDebounce);

	    // If the view value has not changed then we should just exit, except in the case where there is
	    // a native validator on the element. In this case the validation state may have changed even though
	    // the viewValue has stayed empty.
	    if (this.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !this.$$hasNativeValidators)) {
	      return;
	    }
	    this.$$updateEmptyClasses(viewValue);
	    this.$$lastCommittedViewValue = viewValue;

	    // change to dirty
	    if (this.$pristine) {
	      this.$setDirty();
	    }
	    this.$$parseAndValidate();
	  },

	  $$parseAndValidate: function() {
	    var viewValue = this.$$lastCommittedViewValue;
	    var modelValue = viewValue;
	    var that = this;

	    this.$$parserValid = isUndefined(modelValue) ? undefined : true;

	    if (this.$$parserValid) {
	      for (var i = 0; i < this.$parsers.length; i++) {
	        modelValue = this.$parsers[i](modelValue);
	        if (isUndefined(modelValue)) {
	          this.$$parserValid = false;
	          break;
	        }
	      }
	    }
	    if (isNumberNaN(this.$modelValue)) {
	      // this.$modelValue has not been touched yet...
	      this.$modelValue = this.$$ngModelGet(this.$$scope);
	    }
	    var prevModelValue = this.$modelValue;
	    var allowInvalid = this.$options.getOption('allowInvalid');
	    this.$$rawModelValue = modelValue;

	    if (allowInvalid) {
	      this.$modelValue = modelValue;
	      writeToModelIfNeeded();
	    }

	    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
	    // This can happen if e.g. $setViewValue is called from inside a parser
	    this.$$runValidators(modelValue, this.$$lastCommittedViewValue, function(allValid) {
	      if (!allowInvalid) {
	        // Note: Don't check this.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        that.$modelValue = allValid ? modelValue : undefined;
	        writeToModelIfNeeded();
	      }
	    });

	    function writeToModelIfNeeded() {
	      if (that.$modelValue !== prevModelValue) {
	        that.$$writeModelToScope();
	      }
	    }
	  },

	  $$writeModelToScope: function() {
	    this.$$ngModelSet(this.$$scope, this.$modelValue);
	    forEach(this.$viewChangeListeners, function(listener) {
	      try {
	        listener();
	      } catch (e) {
	        // eslint-disable-next-line no-invalid-this
	        this.$$exceptionHandler(e);
	      }
	    }, this);
	  },

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setViewValue
	   *
	   * @description
	   * Update the view value.
	   *
	   * This method should be called when a control wants to change the view value; typically,
	   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
	   * directive calls it when the value of the input changes and {@link ng.directive:select select}
	   * calls it when an option is selected.
	   *
	   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
	   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
	   * value sent directly for processing, finally to be applied to `$modelValue` and then the
	   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
	   * in the `$viewChangeListeners` list, are called.
	   *
	   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
	   * and the `default` trigger is not listed, all those actions will remain pending until one of the
	   * `updateOn` events is triggered on the DOM element.
	   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
	   * directive is used with a custom debounce for this particular event.
	   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
	   * is specified, once the timer runs out.
	   *
	   * When used with standard inputs, the view value will always be a string (which is in some cases
	   * parsed into another type, such as a `Date` object for `input[date]`.)
	   * However, custom controls might also pass objects to this method. In this case, we should make
	   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
	   * perform a deep watch of objects, it only looks for a change of identity. If you only change
	   * the property of the object then ngModel will not realize that the object has changed and
	   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
	   * not change properties of the copy once it has been passed to `$setViewValue`.
	   * Otherwise you may cause the model value on the scope to change incorrectly.
	   *
	   * <div class="alert alert-info">
	   * In any case, the value passed to the method should always reflect the current value
	   * of the control. For example, if you are calling `$setViewValue` for an input element,
	   * you should pass the input DOM value. Otherwise, the control and the scope model become
	   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
	   * the control's DOM value in any way. If we want to change the control's DOM value
	   * programmatically, we should update the `ngModel` scope expression. Its new value will be
	   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
	   * to update the DOM, and finally call `$validate` on it.
	   * </div>
	   *
	   * @param {*} value value from the view.
	   * @param {string} trigger Event that triggered the update.
	   */
	  $setViewValue: function(value, trigger) {
	    this.$viewValue = value;
	    if (this.$options.getOption('updateOnDefault')) {
	      this.$$debounceViewValueCommit(trigger);
	    }
	  },

	  $$debounceViewValueCommit: function(trigger) {
	    var debounceDelay = this.$options.getOption('debounce');

	    if (isNumber(debounceDelay[trigger])) {
	      debounceDelay = debounceDelay[trigger];
	    } else if (isNumber(debounceDelay['default'])) {
	      debounceDelay = debounceDelay['default'];
	    }

	    this.$$timeout.cancel(this.$$pendingDebounce);
	    var that = this;
	    if (debounceDelay > 0) { // this fails if debounceDelay is an object
	      this.$$pendingDebounce = this.$$timeout(function() {
	        that.$commitViewValue();
	      }, debounceDelay);
	    } else if (this.$$scope.$root.$$phase) {
	      this.$commitViewValue();
	    } else {
	      this.$$scope.$apply(function() {
	        that.$commitViewValue();
	      });
	    }
	  }
	};

	function setupModelWatcher(ctrl) {
	  // model -> value
	  // Note: we cannot use a normal scope.$watch as we want to detect the following:
	  // 1. scope value is 'a'
	  // 2. user enters 'b'
	  // 3. ng-change kicks in and reverts scope value to 'a'
	  //    -> scope value did not change since the last digest as
	  //       ng-change executes in apply phase
	  // 4. view should be changed back to 'a'
	  ctrl.$$scope.$watch(function ngModelWatch() {
	    var modelValue = ctrl.$$ngModelGet(ctrl.$$scope);

	    // if scope model value and ngModel value are out of sync
	    // TODO(perf): why not move this to the action fn?
	    if (modelValue !== ctrl.$modelValue &&
	       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
	        // eslint-disable-next-line no-self-compare
	       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
	    ) {
	      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
	      ctrl.$$parserValid = undefined;

	      var formatters = ctrl.$formatters,
	          idx = formatters.length;

	      var viewValue = modelValue;
	      while (idx--) {
	        viewValue = formatters[idx](viewValue);
	      }
	      if (ctrl.$viewValue !== viewValue) {
	        ctrl.$$updateEmptyClasses(viewValue);
	        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
	        ctrl.$render();

	        // It is possible that model and view value have been updated during render
	        ctrl.$$runValidators(ctrl.$modelValue, ctrl.$viewValue, noop);
	      }
	    }

	    return modelValue;
	  });
	}

	/**
	 * @ngdoc method
	 * @name ngModel.NgModelController#$setValidity
	 *
	 * @description
	 * Change the validity state, and notify the form.
	 *
	 * This method can be called within $parsers/$formatters or a custom validation implementation.
	 * However, in most cases it should be sufficient to use the `ngModel.$validators` and
	 * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
	 *
	 * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
	 *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
	 *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
	 *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
	 *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
	 *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
	 * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
	 *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
	 *                          Skipped is used by Angular when validators do not run because of parse errors and
	 *                          when `$asyncValidators` do not run because any of the `$validators` failed.
	 */
	addSetValidityMethod({
	  clazz: NgModelController,
	  set: function(object, property) {
	    object[property] = true;
	  },
	  unset: function(object, property) {
	    delete object[property];
	  }
	});


	/**
	 * @ngdoc directive
	 * @name ngModel
	 *
	 * @element input
	 * @priority 1
	 *
	 * @description
	 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
	 * property on the scope using {@link ngModel.NgModelController NgModelController},
	 * which is created and exposed by this directive.
	 *
	 * `ngModel` is responsible for:
	 *
	 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
	 *   require.
	 * - Providing validation behavior (i.e. required, number, email, url).
	 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
	 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
	 *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
	 * - Registering the control with its parent {@link ng.directive:form form}.
	 *
	 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
	 * current scope. If the property doesn't already exist on this scope, it will be created
	 * implicitly and added to the scope.
	 *
	 * For best practices on using `ngModel`, see:
	 *
	 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
	 *
	 * For basic examples, how to use `ngModel`, see:
	 *
	 *  - {@link ng.directive:input input}
	 *    - {@link input[text] text}
	 *    - {@link input[checkbox] checkbox}
	 *    - {@link input[radio] radio}
	 *    - {@link input[number] number}
	 *    - {@link input[email] email}
	 *    - {@link input[url] url}
	 *    - {@link input[date] date}
	 *    - {@link input[datetime-local] datetime-local}
	 *    - {@link input[time] time}
	 *    - {@link input[month] month}
	 *    - {@link input[week] week}
	 *  - {@link ng.directive:select select}
	 *  - {@link ng.directive:textarea textarea}
	 *
	 * # Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
	 * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
	 *
	 * The model must be assigned an entirely new object or collection before a re-rendering will occur.
	 *
	 * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
	 * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
	 * if the select is given the `multiple` attribute.
	 *
	 * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
	 * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
	 * not trigger a re-rendering of the model.
	 *
	 * # CSS classes
	 * The following CSS classes are added and removed on the associated input/select/textarea element
	 * depending on the validity of the model.
	 *
	 *  - `ng-valid`: the model is valid
	 *  - `ng-invalid`: the model is invalid
	 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
	 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
	 *  - `ng-pristine`: the control hasn't been interacted with yet
	 *  - `ng-dirty`: the control has been interacted with
	 *  - `ng-touched`: the control has been blurred
	 *  - `ng-untouched`: the control hasn't been blurred
	 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
	 *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
	 *     by the {@link ngModel.NgModelController#$isEmpty} method
	 *  - `ng-not-empty`: the view contains a non-empty value
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 * ## Animation Hooks
	 *
	 * Animations within models are triggered when any of the associated CSS classes are added and removed
	 * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
	 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
	 * The animations that are triggered within ngModel are similar to how they work in ngClass and
	 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style an input element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-input {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-input.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample" name="ng-model">
	     <file name="index.html">
	       <script>
	        angular.module('inputExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.val = '1';
	          }]);
	       </script>
	       <style>
	         .my-input {
	           transition:all linear 0.5s;
	           background: transparent;
	         }
	         .my-input.ng-invalid {
	           color:white;
	           background: red;
	         }
	       </style>
	       <p id="inputDescription">
	        Update input to see transitions when valid/invalid.
	        Integer is a valid value.
	       </p>
	       <form name="testForm" ng-controller="ExampleController">
	         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
	                aria-describedby="inputDescription" />
	       </form>
	     </file>
	 * </example>
	 *
	 * ## Binding to a getter/setter
	 *
	 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
	 * function that returns a representation of the model when called with zero arguments, and sets
	 * the internal state of a model when called with an argument. It's sometimes useful to use this
	 * for models that have an internal representation that's different from what the model exposes
	 * to the view.
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
	 * frequently than other parts of your code.
	 * </div>
	 *
	 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
	 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
	 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
	 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
	 *
	 * The following example shows how to use `ngModel` with a getter/setter:
	 *
	 * @example
	 * <example name="ngModel-getter-setter" module="getterSetterExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <form name="userForm">
	           <label>Name:
	             <input type="text" name="userName"
	                    ng-model="user.name"
	                    ng-model-options="{ getterSetter: true }" />
	           </label>
	         </form>
	         <pre>user.name = <span ng-bind="user.name()"></span></pre>
	       </div>
	     </file>
	     <file name="app.js">
	       angular.module('getterSetterExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var _name = 'Brian';
	           $scope.user = {
	             name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	             }
	           };
	         }]);
	     </file>
	 * </example>
	 */
	var ngModelDirective = ['$rootScope', function($rootScope) {
	  return {
	    restrict: 'A',
	    require: ['ngModel', '^?form', '^?ngModelOptions'],
	    controller: NgModelController,
	    // Prelink needs to run before any input directive
	    // so that we can set the NgModelOptions in NgModelController
	    // before anyone else uses it.
	    priority: 1,
	    compile: function ngModelCompile(element) {
	      // Setup initial state of the control
	      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

	      return {
	        pre: function ngModelPreLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0],
	              formCtrl = ctrls[1] || modelCtrl.$$parentForm,
	              optionsCtrl = ctrls[2];

	          if (optionsCtrl) {
	            modelCtrl.$options = optionsCtrl.$options;
	          }

	          modelCtrl.$$initGetterSetters();

	          // notify others, especially parent forms
	          formCtrl.$addControl(modelCtrl);

	          attr.$observe('name', function(newValue) {
	            if (modelCtrl.$name !== newValue) {
	              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
	            }
	          });

	          scope.$on('$destroy', function() {
	            modelCtrl.$$parentForm.$removeControl(modelCtrl);
	          });
	        },
	        post: function ngModelPostLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0];
	          if (modelCtrl.$options.getOption('updateOn')) {
	            element.on(modelCtrl.$options.getOption('updateOn'), function(ev) {
	              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
	            });
	          }

	          function setTouched() {
	            modelCtrl.$setTouched();
	          }

	          element.on('blur', function() {
	            if (modelCtrl.$touched) return;

	            if ($rootScope.$$phase) {
	              scope.$evalAsync(setTouched);
	            } else {
	              scope.$apply(setTouched);
	            }
	          });
	        }
	      };
	    }
	  };
	}];

	/* exported defaultModelOptions */
	var defaultModelOptions;
	var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

	/**
	 * @ngdoc type
	 * @name ModelOptions
	 * @description
	 * A container for the options set by the {@link ngModelOptions} directive
	 */
	function ModelOptions(options) {
	  this.$$options = options;
	}

	ModelOptions.prototype = {

	  /**
	   * @ngdoc method
	   * @name ModelOptions#getOption
	   * @param {string} name the name of the option to retrieve
	   * @returns {*} the value of the option
	   * @description
	   * Returns the value of the given option
	   */
	  getOption: function(name) {
	    return this.$$options[name];
	  },

	  /**
	   * @ngdoc method
	   * @name ModelOptions#createChild
	   * @param {Object} options a hash of options for the new child that will override the parent's options
	   * @return {ModelOptions} a new `ModelOptions` object initialized with the given options.
	   */
	  createChild: function(options) {
	    var inheritAll = false;

	    // make a shallow copy
	    options = extend({}, options);

	    // Inherit options from the parent if specified by the value `"$inherit"`
	    forEach(options, /* @this */ function(option, key) {
	      if (option === '$inherit') {
	        if (key === '*') {
	          inheritAll = true;
	        } else {
	          options[key] = this.$$options[key];
	          // `updateOn` is special so we must also inherit the `updateOnDefault` option
	          if (key === 'updateOn') {
	            options.updateOnDefault = this.$$options.updateOnDefault;
	          }
	        }
	      } else {
	        if (key === 'updateOn') {
	          // If the `updateOn` property contains the `default` event then we have to remove
	          // it from the event list and set the `updateOnDefault` flag.
	          options.updateOnDefault = false;
	          options[key] = trim(option.replace(DEFAULT_REGEXP, function() {
	            options.updateOnDefault = true;
	            return ' ';
	          }));
	        }
	      }
	    }, this);

	    if (inheritAll) {
	      // We have a property of the form: `"*": "$inherit"`
	      delete options['*'];
	      defaults(options, this.$$options);
	    }

	    // Finally add in any missing defaults
	    defaults(options, defaultModelOptions.$$options);

	    return new ModelOptions(options);
	  }
	};


	defaultModelOptions = new ModelOptions({
	  updateOn: '',
	  updateOnDefault: true,
	  debounce: 0,
	  getterSetter: false,
	  allowInvalid: false,
	  timezone: null
	});


	/**
	 * @ngdoc directive
	 * @name ngModelOptions
	 *
	 * @description
	 * This directive allows you to modify the behaviour of {@link ngModel} directives within your
	 * application. You can specify an `ngModelOptions` directive on any element. All {@link ngModel}
	 * directives will use the options of their nearest `ngModelOptions` ancestor.
	 *
	 * The `ngModelOptions` settings are found by evaluating the value of the attribute directive as
	 * an Angular expression. This expression should evaluate to an object, whose properties contain
	 * the settings. For example: `<div "ng-model-options"="{ debounce: 100 }"`.
	 *
	 * ## Inheriting Options
	 *
	 * You can specify that an `ngModelOptions` setting should be inherited from a parent `ngModelOptions`
	 * directive by giving it the value of `"$inherit"`.
	 * Then it will inherit that setting from the first `ngModelOptions` directive found by traversing up the
	 * DOM tree. If there is no ancestor element containing an `ngModelOptions` directive then default settings
	 * will be used.
	 *
	 * For example given the following fragment of HTML
	 *
	 *
	 * ```html
	 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
	 *   <form ng-model-options="{ updateOn: 'blur', allowInvalid: '$inherit' }">
	 *     <input ng-model-options="{ updateOn: 'default', allowInvalid: '$inherit' }" />
	 *   </form>
	 * </div>
	 * ```
	 *
	 * the `input` element will have the following settings
	 *
	 * ```js
	 * { allowInvalid: true, updateOn: 'default', debounce: 0 }
	 * ```
	 *
	 * Notice that the `debounce` setting was not inherited and used the default value instead.
	 *
	 * You can specify that all undefined settings are automatically inherited from an ancestor by
	 * including a property with key of `"*"` and value of `"$inherit"`.
	 *
	 * For example given the following fragment of HTML
	 *
	 *
	 * ```html
	 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
	 *   <form ng-model-options="{ updateOn: 'blur', "*": '$inherit' }">
	 *     <input ng-model-options="{ updateOn: 'default', "*": '$inherit' }" />
	 *   </form>
	 * </div>
	 * ```
	 *
	 * the `input` element will have the following settings
	 *
	 * ```js
	 * { allowInvalid: true, updateOn: 'default', debounce: 200 }
	 * ```
	 *
	 * Notice that the `debounce` setting now inherits the value from the outer `<div>` element.
	 *
	 * If you are creating a reusable component then you should be careful when using `"*": "$inherit"`
	 * since you may inadvertently inherit a setting in the future that changes the behavior of your component.
	 *
	 *
	 * ## Triggering and debouncing model updates
	 *
	 * The `updateOn` and `debounce` properties allow you to specify a custom list of events that will
	 * trigger a model update and/or a debouncing delay so that the actual update only takes place when
	 * a timer expires; this timer will be reset after another change takes place.
	 *
	 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
	 * be different from the value in the actual model. This means that if you update the model you
	 * should also invoke {@link ngModel.NgModelController#$rollbackViewValue} on the relevant input field in
	 * order to make sure it is synchronized with the model and that any debounced action is canceled.
	 *
	 * The easiest way to reference the control's {@link ngModel.NgModelController#$rollbackViewValue}
	 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
	 * important because `form` controllers are published to the related scope under the name in their
	 * `name` attribute.
	 *
	 * Any pending changes will take place immediately when an enclosing form is submitted via the
	 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * The following example shows how to override immediate updates. Changes on the inputs within the
	 * form will update the model only when the control loses focus (blur event). If `escape` key is
	 * pressed while the input field is focused, the value is reset to the value in the current model.
	 *
	 * <example name="ngModelOptions-directive-blur" module="optionsExample">
	 *   <file name="index.html">
	 *     <div ng-controller="ExampleController">
	 *       <form name="userForm">
	 *         <label>
	 *           Name:
	 *           <input type="text" name="userName"
	 *                  ng-model="user.name"
	 *                  ng-model-options="{ updateOn: 'blur' }"
	 *                  ng-keyup="cancel($event)" />
	 *         </label><br />
	 *         <label>
	 *           Other data:
	 *           <input type="text" ng-model="user.data" />
	 *         </label><br />
	 *       </form>
	 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('optionsExample', [])
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.user = { name: 'say', data: '' };
	 *
	 *         $scope.cancel = function(e) {
	 *           if (e.keyCode === 27) {
	 *             $scope.userForm.userName.$rollbackViewValue();
	 *           }
	 *         };
	 *       }]);
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var model = element(by.binding('user.name'));
	 *     var input = element(by.model('user.name'));
	 *     var other = element(by.model('user.data'));
	 *
	 *     it('should allow custom events', function() {
	 *       input.sendKeys(' hello');
	 *       input.click();
	 *       expect(model.getText()).toEqual('say');
	 *       other.click();
	 *       expect(model.getText()).toEqual('say hello');
	 *     });
	 *
	 *     it('should $rollbackViewValue when model changes', function() {
	 *       input.sendKeys(' hello');
	 *       expect(input.getAttribute('value')).toEqual('say hello');
	 *       input.sendKeys(protractor.Key.ESCAPE);
	 *       expect(input.getAttribute('value')).toEqual('say');
	 *       other.click();
	 *       expect(model.getText()).toEqual('say');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * The next example shows how to debounce model changes. Model will be updated only 1 sec after last change.
	 * If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.
	 *
	 * <example name="ngModelOptions-directive-debounce" module="optionsExample">
	 *   <file name="index.html">
	 *     <div ng-controller="ExampleController">
	 *       <form name="userForm">
	 *         Name:
	 *         <input type="text" name="userName"
	 *                ng-model="user.name"
	 *                ng-model-options="{ debounce: 1000 }" />
	 *         <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />
	 *       </form>
	 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('optionsExample', [])
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.user = { name: 'say' };
	 *       }]);
	 *   </file>
	 * </example>
	 *
	 * ## Model updates and validation
	 *
	 * The default behaviour in `ngModel` is that the model value is set to `undefined` when the
	 * validation determines that the value is invalid. By setting the `allowInvalid` property to true,
	 * the model will still be updated even if the value is invalid.
	 *
	 *
	 * ## Connecting to the scope
	 *
	 * By setting the `getterSetter` property to true you are telling ngModel that the `ngModel` expression
	 * on the scope refers to a "getter/setter" function rather than the value itself.
	 *
	 * The following example shows how to bind to getter/setters:
	 *
	 * <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
	 *   <file name="index.html">
	 *     <div ng-controller="ExampleController">
	 *       <form name="userForm">
	 *         <label>
	 *           Name:
	 *           <input type="text" name="userName"
	 *                  ng-model="user.name"
	 *                  ng-model-options="{ getterSetter: true }" />
	 *         </label>
	 *       </form>
	 *       <pre>user.name = <span ng-bind="user.name()"></span></pre>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('getterSetterExample', [])
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         var _name = 'Brian';
	 *         $scope.user = {
	 *           name: function(newName) {
	 *             return angular.isDefined(newName) ? (_name = newName) : _name;
	 *           }
	 *         };
	 *       }]);
	 *   </file>
	 * </example>
	 *
	 *
	 * ## Specifying timezones
	 *
	 * You can specify the timezone that date/time input directives expect by providing its name in the
	 * `timezone` property.
	 *
	 * @param {Object} ngModelOptions options to apply to {@link ngModel} directives on this element and
	 *   and its descendents. Valid keys are:
	 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
	 *     events using an space delimited list. There is a special event called `default` that
	 *     matches the default events belonging to the control.
	 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
	 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
	 *     custom value for each event. For example:
	 *     ```
	 *     ng-model-options="{
	 *       updateOn: 'default blur',
	 *       debounce: { 'default': 500, 'blur': 0 }
	 *     }"
	 *     ```
	 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
	 *     not validate correctly instead of the default behavior of setting the model to undefined.
	 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
	 *     `ngModel` as getters/setters.
	 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
	 *     `<input type="date" />`, `<input type="time" />`, ... . It understands UTC/GMT and the
	 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *     If not specified, the timezone of the browser will be used.
	 *
	 */
	var ngModelOptionsDirective = function() {
	  return {
	    restrict: 'A',
	    // ngModelOptions needs to run before ngModel and input directives
	    priority: 10,
	    require: ['ngModelOptions', '?^^ngModelOptions'],
	    controller: function NgModelOptionsController() {},
	    link: {
	      pre: function ngModelOptionsPreLinkFn(scope, element, attrs, ctrls) {
	        var optionsCtrl = ctrls[0];
	        var parentOptions = ctrls[1] ? ctrls[1].$options : defaultModelOptions;
	        optionsCtrl.$options = parentOptions.createChild(scope.$eval(attrs.ngModelOptions));
	      }
	    }
	  };
	};


	// shallow copy over values from `src` that are not already specified on `dst`
	function defaults(dst, src) {
	  forEach(src, function(value, key) {
	    if (!isDefined(dst[key])) {
	      dst[key] = value;
	    }
	  });
	}

	/**
	 * @ngdoc directive
	 * @name ngNonBindable
	 * @restrict AC
	 * @priority 1000
	 *
	 * @description
	 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * @element ANY
	 *
	 * @example
	 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
	 * but the one wrapped in `ngNonBindable` is left alone.
	 *
	 * @example
	    <example name="ng-non-bindable">
	      <file name="index.html">
	        <div>Normal: {{1 + 2}}</div>
	        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
	      </file>
	      <file name="protractor.js" type="protractor">
	       it('should check ng-non-bindable', function() {
	         expect(element(by.binding('1 + 2')).getText()).toContain('3');
	         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
	       });
	      </file>
	    </example>
	 */
	var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

	/* exported ngOptionsDirective */

	/* global jqLiteRemove */

	var ngOptionsMinErr = minErr('ngOptions');

	/**
	 * @ngdoc directive
	 * @name ngOptions
	 * @restrict A
	 *
	 * @description
	 *
	 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
	 * elements for the `<select>` element using the array or object obtained by evaluating the
	 * `ngOptions` comprehension expression.
	 *
	 * In many cases, {@link ng.directive:ngRepeat ngRepeat} can be used on `<option>` elements instead of
	 * `ngOptions` to achieve a similar result. However, `ngOptions` provides some benefits:
	 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression
	 * - reduced memory consumption by not creating a new scope for each repeated instance
	 * - increased render speed by creating the options in a documentFragment instead of individually
	 *
	 * When an item in the `<select>` menu is selected, the array element or object property
	 * represented by the selected option will be bound to the model identified by the `ngModel`
	 * directive.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding the select to a model that is an object or a collection.
	 *
	 * One issue occurs if you want to preselect an option. For example, if you set
	 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
	 * because the objects are not identical. So by default, you should always reference the item in your collection
	 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
	 *
	 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
	 * of the item not by reference, but by the result of the `track by` expression. For example, if your
	 * collection items have an id property, you would `track by item.id`.
	 *
	 * A different issue with objects or collections is that ngModel won't detect if an object property or
	 * a collection item changes. For that reason, `ngOptions` additionally watches the model using
	 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
	 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
	 * has not changed identity, but only a property on the object or an item in the collection changes.
	 *
	 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
	 * if the model is an array). This means that changing a property deeper than the first level inside the
	 * object/collection will not trigger a re-rendering.
	 *
	 * ## `select` **`as`**
	 *
	 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
	 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
	 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
	 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
	 *
	 *
	 * ### `select` **`as`** and **`track by`**
	 *
	 * <div class="alert alert-warning">
	 * Be careful when using `select` **`as`** and **`track by`** in the same expression.
	 * </div>
	 *
	 * Given this array of items on the $scope:
	 *
	 * ```js
	 * $scope.items = [{
	 *   id: 1,
	 *   label: 'aLabel',
	 *   subItem: { name: 'aSubItem' }
	 * }, {
	 *   id: 2,
	 *   label: 'bLabel',
	 *   subItem: { name: 'bSubItem' }
	 * }];
	 * ```
	 *
	 * This will work:
	 *
	 * ```html
	 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0];
	 * ```
	 *
	 * but this will not work:
	 *
	 * ```html
	 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0].subItem;
	 * ```
	 *
	 * In both examples, the **`track by`** expression is applied successfully to each `item` in the
	 * `items` array. Because the selected option has been set programmatically in the controller, the
	 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
	 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
	 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
	 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
	 * is not matched against any `<option>` and the `<select>` appears as having no selected value.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required The control is considered valid only if value is entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {comprehension_expression=} ngOptions in one of the following forms:
	 *
	 *   * for array data sources:
	 *     * `label` **`for`** `value` **`in`** `array`
	 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
	 *        (for including a filter with `track by`)
	 *   * for object data sources:
	 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`group by`** `group`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`disable when`** `disable`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *
	 * Where:
	 *
	 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
	 *   * `value`: local variable which will refer to each item in the `array` or each property value
	 *      of `object` during iteration.
	 *   * `key`: local variable which will refer to a property name in `object` during iteration.
	 *   * `label`: The result of this expression will be the label for `<option>` element. The
	 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
	 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
	 *      element. If not specified, `select` expression will default to `value`.
	 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
	 *      DOM element.
	 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
	 *      element. Return `true` to disable.
	 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
	 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
	 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
	 *      even when the options are recreated (e.g. reloaded from the server).
	 *
	 * @example
	    <example module="selectExample" name="select">
	      <file name="index.html">
	        <script>
	        angular.module('selectExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.colors = [
	              {name:'black', shade:'dark'},
	              {name:'white', shade:'light', notAnOption: true},
	              {name:'red', shade:'dark'},
	              {name:'blue', shade:'dark', notAnOption: true},
	              {name:'yellow', shade:'light', notAnOption: false}
	            ];
	            $scope.myColor = $scope.colors[2]; // red
	          }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <ul>
	            <li ng-repeat="color in colors">
	              <label>Name: <input ng-model="color.name"></label>
	              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
	              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
	            </li>
	            <li>
	              <button ng-click="colors.push({})">add</button>
	            </li>
	          </ul>
	          <hr/>
	          <label>Color (null not allowed):
	            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
	          </label><br/>
	          <label>Color (null allowed):
	          <span  class="nullable">
	            <select ng-model="myColor" ng-options="color.name for color in colors">
	              <option value="">-- choose color --</option>
	            </select>
	          </span></label><br/>

	          <label>Color grouped by shade:
	            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
	            </select>
	          </label><br/>

	          <label>Color grouped by shade, with some disabled:
	            <select ng-model="myColor"
	                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
	            </select>
	          </label><br/>



	          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
	          <br/>
	          <hr/>
	          Currently selected: {{ {selected_color:myColor} }}
	          <div style="border:solid 1px black; height:20px"
	               ng-style="{'background-color':myColor.name}">
	          </div>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	         it('should check ng-options', function() {
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
	           element.all(by.model('myColor')).first().click();
	           element.all(by.css('select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
	           element(by.css('.nullable select[ng-model="myColor"]')).click();
	           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
	         });
	      </file>
	    </example>
	 */

	/* eslint-disable max-len */
	//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555000000000666666666666600000007777777777777000000000000000888888888800000000000000000009999999999
	var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
	                        // 1: value expression (valueFn)
	                        // 2: label expression (displayFn)
	                        // 3: group by expression (groupByFn)
	                        // 4: disable when expression (disableWhenFn)
	                        // 5: array item variable name
	                        // 6: object item key variable name
	                        // 7: object item value variable name
	                        // 8: collection expression
	                        // 9: track by expression
	/* eslint-enable */


	var ngOptionsDirective = ['$compile', '$document', '$parse', function($compile, $document, $parse) {

	  function parseOptionsExpression(optionsExp, selectElement, scope) {

	    var match = optionsExp.match(NG_OPTIONS_REGEXP);
	    if (!(match)) {
	      throw ngOptionsMinErr('iexp',
	        'Expected expression in form of ' +
	        '\'_select_ (as _label_)? for (_key_,)?_value_ in _collection_\'' +
	        ' but got \'{0}\'. Element: {1}',
	        optionsExp, startingTag(selectElement));
	    }

	    // Extract the parts from the ngOptions expression

	    // The variable name for the value of the item in the collection
	    var valueName = match[5] || match[7];
	    // The variable name for the key of the item in the collection
	    var keyName = match[6];

	    // An expression that generates the viewValue for an option if there is a label expression
	    var selectAs = / as /.test(match[0]) && match[1];
	    // An expression that is used to track the id of each object in the options collection
	    var trackBy = match[9];
	    // An expression that generates the viewValue for an option if there is no label expression
	    var valueFn = $parse(match[2] ? match[1] : valueName);
	    var selectAsFn = selectAs && $parse(selectAs);
	    var viewValueFn = selectAsFn || valueFn;
	    var trackByFn = trackBy && $parse(trackBy);

	    // Get the value by which we are going to track the option
	    // if we have a trackFn then use that (passing scope and locals)
	    // otherwise just hash the given viewValue
	    var getTrackByValueFn = trackBy ?
	                              function(value, locals) { return trackByFn(scope, locals); } :
	                              function getHashOfValue(value) { return hashKey(value); };
	    var getTrackByValue = function(value, key) {
	      return getTrackByValueFn(value, getLocals(value, key));
	    };

	    var displayFn = $parse(match[2] || match[1]);
	    var groupByFn = $parse(match[3] || '');
	    var disableWhenFn = $parse(match[4] || '');
	    var valuesFn = $parse(match[8]);

	    var locals = {};
	    var getLocals = keyName ? function(value, key) {
	      locals[keyName] = key;
	      locals[valueName] = value;
	      return locals;
	    } : function(value) {
	      locals[valueName] = value;
	      return locals;
	    };


	    function Option(selectValue, viewValue, label, group, disabled) {
	      this.selectValue = selectValue;
	      this.viewValue = viewValue;
	      this.label = label;
	      this.group = group;
	      this.disabled = disabled;
	    }

	    function getOptionValuesKeys(optionValues) {
	      var optionValuesKeys;

	      if (!keyName && isArrayLike(optionValues)) {
	        optionValuesKeys = optionValues;
	      } else {
	        // if object, extract keys, in enumeration order, unsorted
	        optionValuesKeys = [];
	        for (var itemKey in optionValues) {
	          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
	            optionValuesKeys.push(itemKey);
	          }
	        }
	      }
	      return optionValuesKeys;
	    }

	    return {
	      trackBy: trackBy,
	      getTrackByValue: getTrackByValue,
	      getWatchables: $parse(valuesFn, function(optionValues) {
	        // Create a collection of things that we would like to watch (watchedArray)
	        // so that they can all be watched using a single $watchCollection
	        // that only runs the handler once if anything changes
	        var watchedArray = [];
	        optionValues = optionValues || [];

	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;
	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];

	          var locals = getLocals(value, key);
	          var selectValue = getTrackByValueFn(value, locals);
	          watchedArray.push(selectValue);

	          // Only need to watch the displayFn if there is a specific label expression
	          if (match[2] || match[1]) {
	            var label = displayFn(scope, locals);
	            watchedArray.push(label);
	          }

	          // Only need to watch the disableWhenFn if there is a specific disable expression
	          if (match[4]) {
	            var disableWhen = disableWhenFn(scope, locals);
	            watchedArray.push(disableWhen);
	          }
	        }
	        return watchedArray;
	      }),

	      getOptions: function() {

	        var optionItems = [];
	        var selectValueMap = {};

	        // The option values were already computed in the `getWatchables` fn,
	        // which must have been called to trigger `getOptions`
	        var optionValues = valuesFn(scope) || [];
	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;

	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];
	          var locals = getLocals(value, key);
	          var viewValue = viewValueFn(scope, locals);
	          var selectValue = getTrackByValueFn(viewValue, locals);
	          var label = displayFn(scope, locals);
	          var group = groupByFn(scope, locals);
	          var disabled = disableWhenFn(scope, locals);
	          var optionItem = new Option(selectValue, viewValue, label, group, disabled);

	          optionItems.push(optionItem);
	          selectValueMap[selectValue] = optionItem;
	        }

	        return {
	          items: optionItems,
	          selectValueMap: selectValueMap,
	          getOptionFromViewValue: function(value) {
	            return selectValueMap[getTrackByValue(value)];
	          },
	          getViewValueFromOption: function(option) {
	            // If the viewValue could be an object that may be mutated by the application,
	            // we need to make a copy and not return the reference to the value on the option.
	            return trackBy ? copy(option.viewValue) : option.viewValue;
	          }
	        };
	      }
	    };
	  }


	  // we can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  var optionTemplate = window.document.createElement('option'),
	      optGroupTemplate = window.document.createElement('optgroup');

	    function ngOptionsPostLink(scope, selectElement, attr, ctrls) {

	      var selectCtrl = ctrls[0];
	      var ngModelCtrl = ctrls[1];
	      var multiple = attr.multiple;

	      // The emptyOption allows the application developer to provide their own custom "empty"
	      // option when the viewValue does not match any of the option values.
	      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
	        if (children[i].value === '') {
	          selectCtrl.hasEmptyOption = true;
	          selectCtrl.emptyOption = children.eq(i);
	          break;
	        }
	      }

	      var providedEmptyOption = !!selectCtrl.emptyOption;

	      var unknownOption = jqLite(optionTemplate.cloneNode(false));
	      unknownOption.val('?');

	      var options;
	      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);
	      // This stores the newly created options before they are appended to the select.
	      // Since the contents are removed from the fragment when it is appended,
	      // we only need to create it once.
	      var listFragment = $document[0].createDocumentFragment();

	      // Overwrite the implementation. ngOptions doesn't use hashes
	      selectCtrl.generateUnknownOptionValue = function(val) {
	        return '?';
	      };

	      // Update the controller methods for multiple selectable options
	      if (!multiple) {

	        selectCtrl.writeValue = function writeNgOptionsValue(value) {
	          var selectedOption = options.selectValueMap[selectElement.val()];
	          var option = options.getOptionFromViewValue(value);

	          // Make sure to remove the selected attribute from the previously selected option
	          // Otherwise, screen readers might get confused
	          if (selectedOption) selectedOption.element.removeAttribute('selected');

	          if (option) {
	            // Don't update the option when it is already selected.
	            // For example, the browser will select the first option by default. In that case,
	            // most properties are set automatically - except the `selected` attribute, which we
	            // set always

	            if (selectElement[0].value !== option.selectValue) {
	              selectCtrl.removeUnknownOption();
	              selectCtrl.unselectEmptyOption();

	              selectElement[0].value = option.selectValue;
	              option.element.selected = true;
	            }

	            option.element.setAttribute('selected', 'selected');
	          } else {

	            if (providedEmptyOption) {
	              selectCtrl.selectEmptyOption();
	            } else if (selectCtrl.unknownOption.parent().length) {
	              selectCtrl.updateUnknownOption(value);
	            } else {
	              selectCtrl.renderUnknownOption(value);
	            }
	          }
	        };

	        selectCtrl.readValue = function readNgOptionsValue() {

	          var selectedOption = options.selectValueMap[selectElement.val()];

	          if (selectedOption && !selectedOption.disabled) {
	            selectCtrl.unselectEmptyOption();
	            selectCtrl.removeUnknownOption();
	            return options.getViewValueFromOption(selectedOption);
	          }
	          return null;
	        };

	        // If we are using `track by` then we must watch the tracked value on the model
	        // since ngModel only watches for object identity change
	        // FIXME: When a user selects an option, this watch will fire needlessly
	        if (ngOptions.trackBy) {
	          scope.$watch(
	            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },
	            function() { ngModelCtrl.$render(); }
	          );
	        }

	      } else {

	        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
	          options.items.forEach(function(option) {
	            option.element.selected = false;
	          });

	          if (value) {
	            value.forEach(function(item) {
	              var option = options.getOptionFromViewValue(item);
	              if (option) option.element.selected = true;
	            });
	          }
	        };


	        selectCtrl.readValue = function readNgOptionsMultiple() {
	          var selectedValues = selectElement.val() || [],
	              selections = [];

	          forEach(selectedValues, function(value) {
	            var option = options.selectValueMap[value];
	            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
	          });

	          return selections;
	        };

	        // If we are using `track by` then we must watch these tracked values on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {

	          scope.$watchCollection(function() {
	            if (isArray(ngModelCtrl.$viewValue)) {
	              return ngModelCtrl.$viewValue.map(function(value) {
	                return ngOptions.getTrackByValue(value);
	              });
	            }
	          }, function() {
	            ngModelCtrl.$render();
	          });

	        }
	      }

	      if (providedEmptyOption) {

	        // we need to remove it before calling selectElement.empty() because otherwise IE will
	        // remove the label from the element. wtf?
	        selectCtrl.emptyOption.remove();

	        // compile the element since there might be bindings in it
	        $compile(selectCtrl.emptyOption)(scope);

	        if (selectCtrl.emptyOption[0].nodeType === NODE_TYPE_COMMENT) {
	          // This means the empty option has currently no actual DOM node, probably because
	          // it has been modified by a transclusion directive.
	          selectCtrl.hasEmptyOption = false;

	          // Redefine the registerOption function, which will catch
	          // options that are added by ngIf etc. (rendering of the node is async because of
	          // lazy transclusion)
	          selectCtrl.registerOption = function(optionScope, optionEl) {
	            if (optionEl.val() === '') {
	              selectCtrl.hasEmptyOption = true;
	              selectCtrl.emptyOption = optionEl;
	              selectCtrl.emptyOption.removeClass('ng-scope');
	              // This ensures the new empty option is selected if previously no option was selected
	              ngModelCtrl.$render();

	              optionEl.on('$destroy', function() {
	                selectCtrl.hasEmptyOption = false;
	                selectCtrl.emptyOption = undefined;
	              });
	            }
	          };

	        } else {
	          // remove the class, which is added automatically because we recompile the element and it
	          // becomes the compilation root
	          selectCtrl.emptyOption.removeClass('ng-scope');
	        }

	      }

	      selectElement.empty();

	      // We need to do this here to ensure that the options object is defined
	      // when we first hit it in writeNgOptionsValue
	      updateOptions();

	      // We will re-render the option elements if the option values or labels change
	      scope.$watchCollection(ngOptions.getWatchables, updateOptions);

	      // ------------------------------------------------------------------ //

	      function addOptionElement(option, parent) {
	        var optionElement = optionTemplate.cloneNode(false);
	        parent.appendChild(optionElement);
	        updateOptionElement(option, optionElement);
	      }


	      function updateOptionElement(option, element) {
	        option.element = element;
	        element.disabled = option.disabled;
	        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
	        // selects in certain circumstances when multiple selects are next to each other and display
	        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
	        // See https://github.com/angular/angular.js/issues/11314 for more info.
	        // This is unfortunately untestable with unit / e2e tests
	        if (option.label !== element.label) {
	          element.label = option.label;
	          element.textContent = option.label;
	        }
	        element.value = option.selectValue;
	      }

	      function updateOptions() {
	        var previousValue = options && selectCtrl.readValue();

	        // We must remove all current options, but cannot simply set innerHTML = null
	        // since the providedEmptyOption might have an ngIf on it that inserts comments which we
	        // must preserve.
	        // Instead, iterate over the current option elements and remove them or their optgroup
	        // parents
	        if (options) {

	          for (var i = options.items.length - 1; i >= 0; i--) {
	            var option = options.items[i];
	            if (isDefined(option.group)) {
	              jqLiteRemove(option.element.parentNode);
	            } else {
	              jqLiteRemove(option.element);
	            }
	          }
	        }

	        options = ngOptions.getOptions();

	        var groupElementMap = {};

	        // Ensure that the empty option is always there if it was explicitly provided
	        if (providedEmptyOption) {
	          selectElement.prepend(selectCtrl.emptyOption);
	        }

	        options.items.forEach(function addOption(option) {
	          var groupElement;

	          if (isDefined(option.group)) {

	            // This option is to live in a group
	            // See if we have already created this group
	            groupElement = groupElementMap[option.group];

	            if (!groupElement) {

	              groupElement = optGroupTemplate.cloneNode(false);
	              listFragment.appendChild(groupElement);

	              // Update the label on the group element
	              // "null" is special cased because of Safari
	              groupElement.label = option.group === null ? 'null' : option.group;

	              // Store it for use later
	              groupElementMap[option.group] = groupElement;
	            }

	            addOptionElement(option, groupElement);

	          } else {

	            // This option is not in a group
	            addOptionElement(option, listFragment);
	          }
	        });

	        selectElement[0].appendChild(listFragment);

	        ngModelCtrl.$render();

	        // Check to see if the value has changed due to the update to the options
	        if (!ngModelCtrl.$isEmpty(previousValue)) {
	          var nextValue = selectCtrl.readValue();
	          var isNotPrimitive = ngOptions.trackBy || multiple;
	          if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
	            ngModelCtrl.$setViewValue(nextValue);
	            ngModelCtrl.$render();
	          }
	        }

	      }
	  }

	  return {
	    restrict: 'A',
	    terminal: true,
	    require: ['select', 'ngModel'],
	    link: {
	      pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {
	        // Deactivate the SelectController.register method to prevent
	        // option directives from accidentally registering themselves
	        // (and unwanted $destroy handlers etc.)
	        ctrls[0].registerOption = noop;
	      },
	      post: ngOptionsPostLink
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngPluralize
	 * @restrict EA
	 *
	 * @description
	 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
	 * These rules are bundled with angular.js, but can be overridden
	 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
	 * by specifying the mappings between
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * and the strings to be displayed.
	 *
	 * # Plural categories and explicit number rules
	 * There are two
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * in Angular's default en-US locale: "one" and "other".
	 *
	 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
	 * any number that is not 1), an explicit number rule can only match one number. For example, the
	 * explicit number rule for "3" matches the number 3. There are examples of plural categories
	 * and explicit number rules throughout the rest of this documentation.
	 *
	 * # Configuring ngPluralize
	 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
	 * You can also provide an optional attribute, `offset`.
	 *
	 * The value of the `count` attribute can be either a string or an {@link guide/expression
	 * Angular expression}; these are evaluated on the current scope for its bound value.
	 *
	 * The `when` attribute specifies the mappings between plural categories and the actual
	 * string to be displayed. The value of the attribute should be a JSON object.
	 *
	 * The following example shows how to configure ngPluralize:
	 *
	 * ```html
	 * <ng-pluralize count="personCount"
	                 when="{'0': 'Nobody is viewing.',
	 *                      'one': '1 person is viewing.',
	 *                      'other': '{} people are viewing.'}">
	 * </ng-pluralize>
	 *```
	 *
	 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
	 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
	 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
	 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
	 * show "a dozen people are viewing".
	 *
	 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
	 * into pluralized strings. In the previous example, Angular will replace `{}` with
	 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
	 * for <span ng-non-bindable>{{numberExpression}}</span>.
	 *
	 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
	 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
	 *
	 * # Configuring ngPluralize with offset
	 * The `offset` attribute allows further customization of pluralized text, which can result in
	 * a better user experience. For example, instead of the message "4 people are viewing this document",
	 * you might display "John, Kate and 2 others are viewing this document".
	 * The offset attribute allows you to offset a number by any desired value.
	 * Let's take a look at an example:
	 *
	 * ```html
	 * <ng-pluralize count="personCount" offset=2
	 *               when="{'0': 'Nobody is viewing.',
	 *                      '1': '{{person1}} is viewing.',
	 *                      '2': '{{person1}} and {{person2}} are viewing.',
	 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
	 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	 * </ng-pluralize>
	 * ```
	 *
	 * Notice that we are still using two plural categories(one, other), but we added
	 * three explicit number rules 0, 1 and 2.
	 * When one person, perhaps John, views the document, "John is viewing" will be shown.
	 * When three people view the document, no explicit number rule is found, so
	 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
	 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
	 * is shown.
	 *
	 * Note that when you specify offsets, you must provide explicit number rules for
	 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
	 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
	 * plural categories "one" and "other".
	 *
	 * @param {string|expression} count The variable to be bound to.
	 * @param {string} when The mapping between plural category to its corresponding strings.
	 * @param {number=} offset Offset to deduct from the total number.
	 *
	 * @example
	    <example module="pluralizeExample" name="ng-pluralize">
	      <file name="index.html">
	        <script>
	          angular.module('pluralizeExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.person1 = 'Igor';
	              $scope.person2 = 'Misko';
	              $scope.personCount = 1;
	            }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
	          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
	          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

	          <!--- Example with simple pluralization rules for en locale --->
	          Without Offset:
	          <ng-pluralize count="personCount"
	                        when="{'0': 'Nobody is viewing.',
	                               'one': '1 person is viewing.',
	                               'other': '{} people are viewing.'}">
	          </ng-pluralize><br>

	          <!--- Example with offset --->
	          With Offset(2):
	          <ng-pluralize count="personCount" offset=2
	                        when="{'0': 'Nobody is viewing.',
	                               '1': '{{person1}} is viewing.',
	                               '2': '{{person1}} and {{person2}} are viewing.',
	                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
	                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	          </ng-pluralize>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should show correct pluralized string', function() {
	          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var countInput = element(by.model('personCount'));

	          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
	          expect(withOffset.getText()).toEqual('Igor is viewing.');

	          countInput.clear();
	          countInput.sendKeys('0');

	          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
	          expect(withOffset.getText()).toEqual('Nobody is viewing.');

	          countInput.clear();
	          countInput.sendKeys('2');

	          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

	          countInput.clear();
	          countInput.sendKeys('3');

	          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

	          countInput.clear();
	          countInput.sendKeys('4');

	          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
	        });
	        it('should show data-bound names', function() {
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var personCount = element(by.model('personCount'));
	          var person1 = element(by.model('person1'));
	          var person2 = element(by.model('person2'));
	          personCount.clear();
	          personCount.sendKeys('4');
	          person1.clear();
	          person1.sendKeys('Di');
	          person2.clear();
	          person2.sendKeys('Vojta');
	          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
	        });
	      </file>
	    </example>
	 */
	var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {
	  var BRACE = /{}/g,
	      IS_WHEN = /^when(Minus)?(.+)$/;

	  return {
	    link: function(scope, element, attr) {
	      var numberExp = attr.count,
	          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
	          offset = attr.offset || 0,
	          whens = scope.$eval(whenExp) || {},
	          whensExpFns = {},
	          startSymbol = $interpolate.startSymbol(),
	          endSymbol = $interpolate.endSymbol(),
	          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
	          watchRemover = angular.noop,
	          lastCount;

	      forEach(attr, function(expression, attributeName) {
	        var tmpMatch = IS_WHEN.exec(attributeName);
	        if (tmpMatch) {
	          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
	          whens[whenKey] = element.attr(attr.$attr[attributeName]);
	        }
	      });
	      forEach(whens, function(expression, key) {
	        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));

	      });

	      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
	        var count = parseFloat(newVal);
	        var countIsNaN = isNumberNaN(count);

	        if (!countIsNaN && !(count in whens)) {
	          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
	          // Otherwise, check it against pluralization rules in $locale service.
	          count = $locale.pluralCat(count - offset);
	        }

	        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
	        // In JS `NaN !== NaN`, so we have to explicitly check.
	        if ((count !== lastCount) && !(countIsNaN && isNumberNaN(lastCount))) {
	          watchRemover();
	          var whenExpFn = whensExpFns[count];
	          if (isUndefined(whenExpFn)) {
	            if (newVal != null) {
	              $log.debug('ngPluralize: no rule defined for \'' + count + '\' in ' + whenExp);
	            }
	            watchRemover = noop;
	            updateElementText();
	          } else {
	            watchRemover = scope.$watch(whenExpFn, updateElementText);
	          }
	          lastCount = count;
	        }
	      });

	      function updateElementText(newText) {
	        element.text(newText || '');
	      }
	    }
	  };
	}];

	/* exported ngRepeatDirective */

	/**
	 * @ngdoc directive
	 * @name ngRepeat
	 * @multiElement
	 *
	 * @description
	 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
	 * instance gets its own scope, where the given loop variable is set to the current collection item,
	 * and `$index` is set to the item index or key.
	 *
	 * Special properties are exposed on the local scope of each template instance, including:
	 *
	 * | Variable  | Type            | Details                                                                     |
	 * |-----------|-----------------|-----------------------------------------------------------------------------|
	 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
	 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
	 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
	 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
	 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
	 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
	 *
	 * <div class="alert alert-info">
	 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
	 *   This may be useful when, for instance, nesting ngRepeats.
	 * </div>
	 *
	 *
	 * # Iterating over object properties
	 *
	 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
	 * syntax:
	 *
	 * ```js
	 * <div ng-repeat="(key, value) in myObj"> ... </div>
	 * ```
	 *
	 * However, there are a few limitations compared to array iteration:
	 *
	 * - The JavaScript specification does not define the order of keys
	 *   returned for an object, so Angular relies on the order returned by the browser
	 *   when running `for key in myObj`. Browsers generally follow the strategy of providing
	 *   keys in the order in which they were defined, although there are exceptions when keys are deleted
	 *   and reinstated. See the
	 *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
	 *
	 * - `ngRepeat` will silently *ignore* object keys starting with `$`, because
	 *   it's a prefix used by Angular for public (`$`) and private (`$$`) properties.
	 *
	 * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with
	 *   objects, and will throw an error if used with one.
	 *
	 * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array
	 * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could
	 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
	 * or implement a `$watch` on the object yourself.
	 *
	 *
	 * # Tracking and Duplicates
	 *
	 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
	 * the collection. When a change happens, `ngRepeat` then makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * To minimize creation of DOM elements, `ngRepeat` uses a function
	 * to "keep track" of all items in the collection and their corresponding DOM elements.
	 * For example, if an item is added to the collection, `ngRepeat` will know that all other items
	 * already have DOM elements, and will not re-render them.
	 *
	 * The default tracking function (which tracks items by their identity) does not allow
	 * duplicate items in arrays. This is because when there are duplicates, it is not possible
	 * to maintain a one-to-one mapping between collection items and DOM elements.
	 *
	 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
	 * with your own using the `track by` expression.
	 *
	 * For example, you may track items by the index of each item in the collection, using the
	 * special scope property `$index`:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * You may also use arbitrary expressions in `track by`, including references to custom functions
	 * on the scope:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-success">
	 * If you are working with objects that have a unique identifier property, you should track
	 * by this identifier instead of the object instance. Should you reload your data later, `ngRepeat`
	 * will not have to rebuild the DOM elements for items it has already rendered, even if the
	 * JavaScript objects in the collection have been substituted for new ones. For large collections,
	 * this significantly improves rendering performance. If you don't have a unique identifier,
	 * `track by $index` can also provide a performance boost.
	 * </div>
	 *
	 * ```html
	 *    <div ng-repeat="model in collection track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 * Avoid using `track by $index` when the repeated template contains
	 * {@link guide/expression#one-time-binding one-time bindings}. In such cases, the `nth` DOM
	 * element will always be matched with the `nth` item of the array, so the bindings on that element
	 * will not be updated even when the corresponding item changes, essentially causing the view to get
	 * out-of-sync with the underlying data.
	 * </div>
	 *
	 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
	 * `$id` function, which tracks items by their identity:
	 * ```html
	 *    <div ng-repeat="obj in collection track by $id(obj)">
	 *      {{obj.prop}}
	 *    </div>
	 * ```
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 * **Note:** `track by` must always be the last expression:
	 * </div>
	 * ```
	 *    <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 *
	 * # Special repeat start and end points
	 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
	 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
	 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
	 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
	 *
	 * The example below makes use of this feature:
	 * ```html
	 *   <header ng-repeat-start="item in items">
	 *     Header {{ item }}
	 *   </header>
	 *   <div class="body">
	 *     Body {{ item }}
	 *   </div>
	 *   <footer ng-repeat-end>
	 *     Footer {{ item }}
	 *   </footer>
	 * ```
	 *
	 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
	 * ```html
	 *   <header>
	 *     Header A
	 *   </header>
	 *   <div class="body">
	 *     Body A
	 *   </div>
	 *   <footer>
	 *     Footer A
	 *   </footer>
	 *   <header>
	 *     Header B
	 *   </header>
	 *   <div class="body">
	 *     Body B
	 *   </div>
	 *   <footer>
	 *     Footer B
	 *   </footer>
	 * ```
	 *
	 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
	 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |
	 * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |
	 * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |
	 *
	 * See the example below for defining CSS animations with ngRepeat.
	 *
	 * @element ANY
	 * @scope
	 * @priority 1000
	 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
	 *   formats are currently supported:
	 *
	 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
	 *     is a scope expression giving the collection to enumerate.
	 *
	 *     For example: `album in artist.albums`.
	 *
	 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
	 *     and `expression` is the scope expression giving the collection to enumerate.
	 *
	 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
	 *
	 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
	 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
	 *     is specified, ng-repeat associates elements by identity. It is an error to have
	 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
	 *     mapped to the same DOM element, which is not possible.)
	 *
	 *     Note that the tracking expression must come last, after any filters, and the alias expression.
	 *
	 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
	 *     will be associated by item identity in the array.
	 *
	 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
	 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
	 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
	 *     element in the same way in the DOM.
	 *
	 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
	 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
	 *     property is same.
	 *
	 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
	 *     to items in conjunction with a tracking expression.
	 *
	 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
	 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
	 *     when a filter is active on the repeater, but the filtered result set is empty.
	 *
	 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
	 *     the items have been processed through the filter.
	 *
	 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
	 *     (and not as operator, inside an expression).
	 *
	 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
	 *
	 * @example
	 * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
	 * results by name or by age. New (entering) and removed (leaving) items are animated.
	  <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true" name="ng-repeat">
	    <file name="index.html">
	      <div ng-controller="repeatController">
	        I have {{friends.length}} friends. They are:
	        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
	        <ul class="example-animate-container">
	          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
	            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
	          </li>
	          <li class="animate-repeat" ng-if="results.length === 0">
	            <strong>No results found...</strong>
	          </li>
	        </ul>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
	        $scope.friends = [
	          {name:'John', age:25, gender:'boy'},
	          {name:'Jessie', age:30, gender:'girl'},
	          {name:'Johanna', age:28, gender:'girl'},
	          {name:'Joy', age:15, gender:'girl'},
	          {name:'Mary', age:28, gender:'girl'},
	          {name:'Peter', age:95, gender:'boy'},
	          {name:'Sebastian', age:50, gender:'boy'},
	          {name:'Erika', age:27, gender:'girl'},
	          {name:'Patrick', age:40, gender:'boy'},
	          {name:'Samantha', age:60, gender:'girl'}
	        ];
	      });
	    </file>
	    <file name="animations.css">
	      .example-animate-container {
	        background:white;
	        border:1px solid black;
	        list-style:none;
	        margin:0;
	        padding:0 10px;
	      }

	      .animate-repeat {
	        line-height:30px;
	        list-style:none;
	        box-sizing:border-box;
	      }

	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter,
	      .animate-repeat.ng-leave {
	        transition:all linear 0.5s;
	      }

	      .animate-repeat.ng-leave.ng-leave-active,
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter {
	        opacity:0;
	        max-height:0;
	      }

	      .animate-repeat.ng-leave,
	      .animate-repeat.ng-move.ng-move-active,
	      .animate-repeat.ng-enter.ng-enter-active {
	        opacity:1;
	        max-height:30px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var friends = element.all(by.repeater('friend in friends'));

	      it('should render initial data set', function() {
	        expect(friends.count()).toBe(10);
	        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
	        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
	        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
	        expect(element(by.binding('friends.length')).getText())
	            .toMatch("I have 10 friends. They are:");
	      });

	       it('should update repeater when filter predicate changes', function() {
	         expect(friends.count()).toBe(10);

	         element(by.model('q')).sendKeys('ma');

	         expect(friends.count()).toBe(2);
	         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
	         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
	       });
	      </file>
	    </example>
	 */
	var ngRepeatDirective = ['$parse', '$animate', '$compile', function($parse, $animate, $compile) {
	  var NG_REMOVED = '$$NG_REMOVED';
	  var ngRepeatMinErr = minErr('ngRepeat');

	  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
	    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
	    scope[valueIdentifier] = value;
	    if (keyIdentifier) scope[keyIdentifier] = key;
	    scope.$index = index;
	    scope.$first = (index === 0);
	    scope.$last = (index === (arrayLength - 1));
	    scope.$middle = !(scope.$first || scope.$last);
	    // eslint-disable-next-line no-bitwise
	    scope.$odd = !(scope.$even = (index & 1) === 0);
	  };

	  var getBlockStart = function(block) {
	    return block.clone[0];
	  };

	  var getBlockEnd = function(block) {
	    return block.clone[block.clone.length - 1];
	  };


	  return {
	    restrict: 'A',
	    multiElement: true,
	    transclude: 'element',
	    priority: 1000,
	    terminal: true,
	    $$tlb: true,
	    compile: function ngRepeatCompile($element, $attr) {
	      var expression = $attr.ngRepeat;
	      var ngRepeatEndComment = $compile.$$createComment('end ngRepeat', expression);

	      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

	      if (!match) {
	        throw ngRepeatMinErr('iexp', 'Expected expression in form of \'_item_ in _collection_[ track by _id_]\' but got \'{0}\'.',
	            expression);
	      }

	      var lhs = match[1];
	      var rhs = match[2];
	      var aliasAs = match[3];
	      var trackByExp = match[4];

	      match = lhs.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/);

	      if (!match) {
	        throw ngRepeatMinErr('iidexp', '\'_item_\' in \'_item_ in _collection_\' should be an identifier or \'(_key_, _value_)\' expression, but got \'{0}\'.',
	            lhs);
	      }
	      var valueIdentifier = match[3] || match[1];
	      var keyIdentifier = match[2];

	      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
	          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
	        throw ngRepeatMinErr('badident', 'alias \'{0}\' is invalid --- must be a valid JS identifier which is not a reserved name.',
	          aliasAs);
	      }

	      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
	      var hashFnLocals = {$id: hashKey};

	      if (trackByExp) {
	        trackByExpGetter = $parse(trackByExp);
	      } else {
	        trackByIdArrayFn = function(key, value) {
	          return hashKey(value);
	        };
	        trackByIdObjFn = function(key) {
	          return key;
	        };
	      }

	      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

	        if (trackByExpGetter) {
	          trackByIdExpFn = function(key, value, index) {
	            // assign key, value, and $index to the locals so that they can be used in hash functions
	            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
	            hashFnLocals[valueIdentifier] = value;
	            hashFnLocals.$index = index;
	            return trackByExpGetter($scope, hashFnLocals);
	          };
	        }

	        // Store a list of elements from previous run. This is a hash where key is the item from the
	        // iterator, and the value is objects with following properties.
	        //   - scope: bound scope
	        //   - element: previous element.
	        //   - index: position
	        //
	        // We are using no-proto object so that we don't need to guard against inherited props via
	        // hasOwnProperty.
	        var lastBlockMap = createMap();

	        //watch props
	        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
	          var index, length,
	              previousNode = $element[0],     // node that cloned nodes should be inserted after
	                                              // initialized to the comment node anchor
	              nextNode,
	              // Same as lastBlockMap but it has the current state. It will become the
	              // lastBlockMap on the next iteration.
	              nextBlockMap = createMap(),
	              collectionLength,
	              key, value, // key/value of iteration
	              trackById,
	              trackByIdFn,
	              collectionKeys,
	              block,       // last object information {scope, element, id}
	              nextBlockOrder,
	              elementsToRemove;

	          if (aliasAs) {
	            $scope[aliasAs] = collection;
	          }

	          if (isArrayLike(collection)) {
	            collectionKeys = collection;
	            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
	          } else {
	            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
	            // if object, extract keys, in enumeration order, unsorted
	            collectionKeys = [];
	            for (var itemKey in collection) {
	              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
	                collectionKeys.push(itemKey);
	              }
	            }
	          }

	          collectionLength = collectionKeys.length;
	          nextBlockOrder = new Array(collectionLength);

	          // locate existing items
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            trackById = trackByIdFn(key, value, index);
	            if (lastBlockMap[trackById]) {
	              // found previously seen block
	              block = lastBlockMap[trackById];
	              delete lastBlockMap[trackById];
	              nextBlockMap[trackById] = block;
	              nextBlockOrder[index] = block;
	            } else if (nextBlockMap[trackById]) {
	              // if collision detected. restore lastBlockMap and throw an error
	              forEach(nextBlockOrder, function(block) {
	                if (block && block.scope) lastBlockMap[block.id] = block;
	              });
	              throw ngRepeatMinErr('dupes',
	                  'Duplicates in a repeater are not allowed. Use \'track by\' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}',
	                  expression, trackById, value);
	            } else {
	              // new never before seen block
	              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
	              nextBlockMap[trackById] = true;
	            }
	          }

	          // remove leftover items
	          for (var blockKey in lastBlockMap) {
	            block = lastBlockMap[blockKey];
	            elementsToRemove = getBlockNodes(block.clone);
	            $animate.leave(elementsToRemove);
	            if (elementsToRemove[0].parentNode) {
	              // if the element was not removed yet because of pending animation, mark it as deleted
	              // so that we can ignore it later
	              for (index = 0, length = elementsToRemove.length; index < length; index++) {
	                elementsToRemove[index][NG_REMOVED] = true;
	              }
	            }
	            block.scope.$destroy();
	          }

	          // we are not using forEach for perf reasons (trying to avoid #call)
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            block = nextBlockOrder[index];

	            if (block.scope) {
	              // if we have already seen this object, then we need to reuse the
	              // associated scope/element

	              nextNode = previousNode;

	              // skip nodes that are already pending removal via leave animation
	              do {
	                nextNode = nextNode.nextSibling;
	              } while (nextNode && nextNode[NG_REMOVED]);

	              if (getBlockStart(block) !== nextNode) {
	                // existing item which got moved
	                $animate.move(getBlockNodes(block.clone), null, previousNode);
	              }
	              previousNode = getBlockEnd(block);
	              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	            } else {
	              // new item which we don't know about
	              $transclude(function ngRepeatTransclude(clone, scope) {
	                block.scope = scope;
	                // http://jsperf.com/clone-vs-createcomment
	                var endNode = ngRepeatEndComment.cloneNode(false);
	                clone[clone.length++] = endNode;

	                $animate.enter(clone, null, previousNode);
	                previousNode = endNode;
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block.clone = clone;
	                nextBlockMap[block.id] = block;
	                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	              });
	            }
	          }
	          lastBlockMap = nextBlockMap;
	        });
	      };
	    }
	  };
	}];

	var NG_HIDE_CLASS = 'ng-hide';
	var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
	/**
	 * @ngdoc directive
	 * @name ngShow
	 * @multiElement
	 *
	 * @description
	 * The `ngShow` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
	 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is visible) -->
	 * <div ng-show="myValue"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is hidden) -->
	 * <div ng-show="myValue" class="ng-hide"></div>
	 * ```
	 *
	 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
	 * with extra animation classes that can be added.
	 *
	 * ```css
	 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngShow`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass except that
	 * you must also include the !important flag to override the display property
	 * so that you can perform an animation when the element is hidden during the time of the animation.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   /&#42; this is required as of 1.3x to properly
	 *      apply all styling in a show/hide animation &#42;/
	 *   transition: 0s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add-active,
	 * .my-element.ng-hide-remove-active {
	 *   /&#42; the transition is defined in the active class &#42;/
	 *   transition: 1s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngShow` expression evaluates to a truthy value and just before contents are set to visible |
	 *
	 * @element ANY
	 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
	 *     then the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-show">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-show" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-show" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-show {
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {
	        transition: all linear 0.5s;
	      }

	      .animate-show.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngShowDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
	        // we're adding a temporary, animation-specific class for ng-hide since this way
	        // we can control when the element is actually displayed on screen without having
	        // to have a global/greedy CSS selector that breaks when other animations are run.
	        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
	        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngHide
	 * @multiElement
	 *
	 * @description
	 * The `ngHide` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
	 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is hidden) -->
	 * <div ng-hide="myValue" class="ng-hide"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is visible) -->
	 * <div ng-hide="myValue"></div>
	 * ```
	 *
	 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class in CSS:
	 *
	 * ```css
	 * .ng-hide {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngHide`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
	 * CSS class is added and removed for you instead of your own CSS class.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: 0.5s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible |
	 *
	 *
	 * @element ANY
	 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
	 *     the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-hide">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-hide" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-hide" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-hide {
	        transition: all linear 0.5s;
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-hide.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngHideDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
	        // The comment inside of the ngShowDirective explains why we add and
	        // remove a temporary class for the show/hide animation
	        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngStyle
	 * @restrict AC
	 *
	 * @description
	 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
	 *
	 * @knownIssue
	 * You should not use {@link guide/interpolation interpolation} in the value of the `style`
	 * attribute, when using the `ngStyle` directive on the same element.
	 * See {@link guide/interpolation#known-issues here} for more info.
	 *
	 * @element ANY
	 * @param {expression} ngStyle
	 *
	 * {@link guide/expression Expression} which evals to an
	 * object whose keys are CSS style names and values are corresponding values for those CSS
	 * keys.
	 *
	 * Since some CSS style names are not valid keys for an object, they must be quoted.
	 * See the 'background-color' style in the example below.
	 *
	 * @example
	   <example name="ng-style">
	     <file name="index.html">
	        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
	        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
	        <input type="button" value="clear" ng-click="myStyle={}">
	        <br/>
	        <span ng-style="myStyle">Sample Text</span>
	        <pre>myStyle={{myStyle}}</pre>
	     </file>
	     <file name="style.css">
	       span {
	         color: black;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var colorSpan = element(by.css('span'));

	       it('should check ng-style', function() {
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	         element(by.css('input[value=\'set color\']')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
	         element(by.css('input[value=clear]')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	       });
	     </file>
	   </example>
	 */
	var ngStyleDirective = ngDirective(function(scope, element, attr) {
	  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
	    if (oldStyles && (newStyles !== oldStyles)) {
	      forEach(oldStyles, function(val, style) { element.css(style, '');});
	    }
	    if (newStyles) element.css(newStyles);
	  }, true);
	});

	/**
	 * @ngdoc directive
	 * @name ngSwitch
	 * @restrict EA
	 *
	 * @description
	 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
	 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
	 * as specified in the template.
	 *
	 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
	 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
	 * matches the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`on="..."` attribute**
	 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
	 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
	 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
	 * attribute is displayed.
	 *
	 * <div class="alert alert-info">
	 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
	 * as literal string values to match against.
	 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
	 * value of the expression `$scope.someVal`.
	 * </div>

	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |
	 * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |
	 *
	 * @usage
	 *
	 * ```
	 * <ANY ng-switch="expression">
	 *   <ANY ng-switch-when="matchValue1">...</ANY>
	 *   <ANY ng-switch-when="matchValue2">...</ANY>
	 *   <ANY ng-switch-default>...</ANY>
	 * </ANY>
	 * ```
	 *
	 *
	 * @scope
	 * @priority 1200
	 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
	 * On child elements add:
	 *
	 * * `ngSwitchWhen`: the case statement to match against. If match then this
	 *   case will be displayed. If the same match appears multiple times, all the
	 *   elements will be displayed. It is possible to associate multiple values to
	 *   the same `ngSwitchWhen` by defining the optional attribute
	 *   `ngSwitchWhenSeparator`. The separator will be used to split the value of
	 *   the `ngSwitchWhen` attribute into multiple tokens, and the element will show
	 *   if any of the `ngSwitch` evaluates to any of these tokens.
	 * * `ngSwitchDefault`: the default case when no other case match. If there
	 *   are multiple default cases, all of them will be displayed when no other
	 *   case match.
	 *
	 *
	 * @example
	  <example module="switchExample" deps="angular-animate.js" animations="true" name="ng-switch">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <select ng-model="selection" ng-options="item for item in items">
	        </select>
	        <code>selection={{selection}}</code>
	        <hr/>
	        <div class="animate-switch-container"
	          ng-switch on="selection">
	            <div class="animate-switch" ng-switch-when="settings|options" ng-switch-when-separator="|">Settings Div</div>
	            <div class="animate-switch" ng-switch-when="home">Home Span</div>
	            <div class="animate-switch" ng-switch-default>default</div>
	        </div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('switchExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.items = ['settings', 'home', 'options', 'other'];
	          $scope.selection = $scope.items[0];
	        }]);
	    </file>
	    <file name="animations.css">
	      .animate-switch-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .animate-switch {
	        padding:10px;
	      }

	      .animate-switch.ng-animate {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	      }

	      .animate-switch.ng-leave.ng-leave-active,
	      .animate-switch.ng-enter {
	        top:-50px;
	      }
	      .animate-switch.ng-leave,
	      .animate-switch.ng-enter.ng-enter-active {
	        top:0;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var switchElem = element(by.css('[ng-switch]'));
	      var select = element(by.model('selection'));

	      it('should start in settings', function() {
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should change to home', function() {
	        select.all(by.css('option')).get(1).click();
	        expect(switchElem.getText()).toMatch(/Home Span/);
	      });
	      it('should change to settings via "options"', function() {
	        select.all(by.css('option')).get(2).click();
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should select default', function() {
	        select.all(by.css('option')).get(3).click();
	        expect(switchElem.getText()).toMatch(/default/);
	      });
	    </file>
	  </example>
	 */
	var ngSwitchDirective = ['$animate', '$compile', function($animate, $compile) {
	  return {
	    require: 'ngSwitch',

	    // asks for $scope to fool the BC controller module
	    controller: ['$scope', function NgSwitchController() {
	     this.cases = {};
	    }],
	    link: function(scope, element, attr, ngSwitchController) {
	      var watchExpr = attr.ngSwitch || attr.on,
	          selectedTranscludes = [],
	          selectedElements = [],
	          previousLeaveAnimations = [],
	          selectedScopes = [];

	      var spliceFactory = function(array, index) {
	          return function(response) {
	            if (response !== false) array.splice(index, 1);
	          };
	      };

	      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
	        var i, ii;

	        // Start with the last, in case the array is modified during the loop
	        while (previousLeaveAnimations.length) {
	          $animate.cancel(previousLeaveAnimations.pop());
	        }

	        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
	          var selected = getBlockNodes(selectedElements[i].clone);
	          selectedScopes[i].$destroy();
	          var runner = previousLeaveAnimations[i] = $animate.leave(selected);
	          runner.done(spliceFactory(previousLeaveAnimations, i));
	        }

	        selectedElements.length = 0;
	        selectedScopes.length = 0;

	        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
	          forEach(selectedTranscludes, function(selectedTransclude) {
	            selectedTransclude.transclude(function(caseElement, selectedScope) {
	              selectedScopes.push(selectedScope);
	              var anchor = selectedTransclude.element;
	              caseElement[caseElement.length++] = $compile.$$createComment('end ngSwitchWhen');
	              var block = { clone: caseElement };

	              selectedElements.push(block);
	              $animate.enter(caseElement, anchor.parent(), anchor);
	            });
	          });
	        }
	      });
	    }
	  };
	}];

	var ngSwitchWhenDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attrs, ctrl, $transclude) {

	    var cases = attrs.ngSwitchWhen.split(attrs.ngSwitchWhenSeparator).sort().filter(
	      // Filter duplicate cases
	      function(element, index, array) { return array[index - 1] !== element; }
	    );

	    forEach(cases, function(whenCase) {
	      ctrl.cases['!' + whenCase] = (ctrl.cases['!' + whenCase] || []);
	      ctrl.cases['!' + whenCase].push({ transclude: $transclude, element: element });
	    });
	  }
	});

	var ngSwitchDefaultDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attr, ctrl, $transclude) {
	    ctrl.cases['?'] = (ctrl.cases['?'] || []);
	    ctrl.cases['?'].push({ transclude: $transclude, element: element });
	   }
	});

	/**
	 * @ngdoc directive
	 * @name ngTransclude
	 * @restrict EAC
	 *
	 * @description
	 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
	 *
	 * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
	 * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
	 *
	 * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
	 * content of this element will be removed before the transcluded content is inserted.
	 * If the transcluded content is empty (or only whitespace), the existing content is left intact. This lets you provide fallback
	 * content in the case that no transcluded content is provided.
	 *
	 * @element ANY
	 *
	 * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
	 *                                               or its value is the same as the name of the attribute then the default slot is used.
	 *
	 * @example
	 * ### Basic transclusion
	 * This example demonstrates basic transclusion of content into a component directive.
	 * <example name="simpleTranscludeExample" module="transcludeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('transcludeExample', [])
	 *        .directive('pane', function(){
	 *           return {
	 *             restrict: 'E',
	 *             transclude: true,
	 *             scope: { title:'@' },
	 *             template: '<div style="border: 1px solid black;">' +
	 *                         '<div style="background-color: gray">{{title}}</div>' +
	 *                         '<ng-transclude></ng-transclude>' +
	 *                       '</div>'
	 *           };
	 *       })
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.title = 'Lorem Ipsum';
	 *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *       }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input ng-model="title" aria-label="title"> <br/>
	 *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *       <pane title="{{title}}"><span>{{text}}</span></pane>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *      });
	 *   </file>
	 * </example>
	 *
	 * @example
	 * ### Transclude fallback content
	 * This example shows how to use `NgTransclude` with fallback content, that
	 * is displayed if no transcluded content is provided.
	 *
	 * <example module="transcludeFallbackContentExample" name="ng-transclude">
	 * <file name="index.html">
	 * <script>
	 * angular.module('transcludeFallbackContentExample', [])
	 * .directive('myButton', function(){
	 *             return {
	 *               restrict: 'E',
	 *               transclude: true,
	 *               scope: true,
	 *               template: '<button style="cursor: pointer;">' +
	 *                           '<ng-transclude>' +
	 *                             '<b style="color: red;">Button1</b>' +
	 *                           '</ng-transclude>' +
	 *                         '</button>'
	 *             };
	 *         });
	 * </script>
	 * <!-- fallback button content -->
	 * <my-button id="fallback"></my-button>
	 * <!-- modified button content -->
	 * <my-button id="modified">
	 *   <i style="color: green;">Button2</i>
	 * </my-button>
	 * </file>
	 * <file name="protractor.js" type="protractor">
	 * it('should have different transclude element content', function() {
	 *          expect(element(by.id('fallback')).getText()).toBe('Button1');
	 *          expect(element(by.id('modified')).getText()).toBe('Button2');
	 *        });
	 * </file>
	 * </example>
	 *
	 * @example
	 * ### Multi-slot transclusion
	 * This example demonstrates using multi-slot transclusion in a component directive.
	 * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
	 *   <file name="index.html">
	 *    <style>
	 *      .title, .footer {
	 *        background-color: gray
	 *      }
	 *    </style>
	 *    <div ng-controller="ExampleController">
	 *      <input ng-model="title" aria-label="title"> <br/>
	 *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *      <pane>
	 *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
	 *        <pane-body><p>{{text}}</p></pane-body>
	 *      </pane>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('multiSlotTranscludeExample', [])
	 *     .directive('pane', function() {
	 *        return {
	 *          restrict: 'E',
	 *          transclude: {
	 *            'title': '?paneTitle',
	 *            'body': 'paneBody',
	 *            'footer': '?paneFooter'
	 *          },
	 *          template: '<div style="border: 1px solid black;">' +
	 *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
	 *                      '<div ng-transclude="body"></div>' +
	 *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
	 *                    '</div>'
	 *        };
	 *    })
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.title = 'Lorem Ipsum';
	 *      $scope.link = 'https://google.com';
	 *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *    }]);
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded the title and the body', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
	 *      });
	 *   </file>
	 * </example>
	 */
	var ngTranscludeMinErr = minErr('ngTransclude');
	var ngTranscludeDirective = ['$compile', function($compile) {
	  return {
	    restrict: 'EAC',
	    terminal: true,
	    compile: function ngTranscludeCompile(tElement) {

	      // Remove and cache any original content to act as a fallback
	      var fallbackLinkFn = $compile(tElement.contents());
	      tElement.empty();

	      return function ngTranscludePostLink($scope, $element, $attrs, controller, $transclude) {

	        if (!$transclude) {
	          throw ngTranscludeMinErr('orphan',
	          'Illegal use of ngTransclude directive in the template! ' +
	          'No parent directive that requires a transclusion found. ' +
	          'Element: {0}',
	          startingTag($element));
	        }


	        // If the attribute is of the form: `ng-transclude="ng-transclude"` then treat it like the default
	        if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {
	          $attrs.ngTransclude = '';
	        }
	        var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;

	        // If the slot is required and no transclusion content is provided then this call will throw an error
	        $transclude(ngTranscludeCloneAttachFn, null, slotName);

	        // If the slot is optional and no transclusion content is provided then use the fallback content
	        if (slotName && !$transclude.isSlotFilled(slotName)) {
	          useFallbackContent();
	        }

	        function ngTranscludeCloneAttachFn(clone, transcludedScope) {
	          if (clone.length && notWhitespace(clone)) {
	            $element.append(clone);
	          } else {
	            useFallbackContent();
	            // There is nothing linked against the transcluded scope since no content was available,
	            // so it should be safe to clean up the generated scope.
	            transcludedScope.$destroy();
	          }
	        }

	        function useFallbackContent() {
	          // Since this is the fallback content rather than the transcluded content,
	          // we link against the scope of this directive rather than the transcluded scope
	          fallbackLinkFn($scope, function(clone) {
	            $element.append(clone);
	          });
	        }

	        function notWhitespace(nodes) {
	          for (var i = 0, ii = nodes.length; i < ii; i++) {
	            var node = nodes[i];
	            if (node.nodeType !== NODE_TYPE_TEXT || node.nodeValue.trim()) {
	              return true;
	            }
	          }
	        }
	      };
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name script
	 * @restrict E
	 *
	 * @description
	 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
	 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
	 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
	 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
	 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
	 *
	 * @param {string} type Must be set to `'text/ng-template'`.
	 * @param {string} id Cache name of the template.
	 *
	 * @example
	  <example  name="script-tag">
	    <file name="index.html">
	      <script type="text/ng-template" id="/tpl.html">
	        Content of the template.
	      </script>

	      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
	      <div id="tpl-content" ng-include src="currentTpl"></div>
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should load template defined inside script tag', function() {
	        element(by.css('#tpl-link')).click();
	        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
	      });
	    </file>
	  </example>
	 */
	var scriptDirective = ['$templateCache', function($templateCache) {
	  return {
	    restrict: 'E',
	    terminal: true,
	    compile: function(element, attr) {
	      if (attr.type === 'text/ng-template') {
	        var templateUrl = attr.id,
	            text = element[0].text;

	        $templateCache.put(templateUrl, text);
	      }
	    }
	  };
	}];

	/* exported selectDirective, optionDirective */

	var noopNgModelController = { $setViewValue: noop, $render: noop };

	/**
	 * @ngdoc type
	 * @name  select.SelectController
	 * @description
	 * The controller for the `<select>` directive. This provides support for reading
	 * and writing the selected value(s) of the control and also coordinates dynamically
	 * added `<option>` elements, perhaps by an `ngRepeat` directive.
	 */
	var SelectController =
	        ['$element', '$scope', /** @this */ function($element, $scope) {

	  var self = this,
	      optionsMap = new HashMap();

	  self.selectValueMap = {}; // Keys are the hashed values, values the original values

	  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
	  self.ngModelCtrl = noopNgModelController;
	  self.multiple = false;

	  // The "unknown" option is one that is prepended to the list if the viewValue
	  // does not match any of the options. When it is rendered the value of the unknown
	  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
	  //
	  // We can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  self.unknownOption = jqLite(window.document.createElement('option'));

	  // The empty option is an option with the value '' that te application developer can
	  // provide inside the select. When the model changes to a value that doesn't match an option,
	  // it is selected - so if an empty option is provided, no unknown option is generated.
	  // However, the empty option is not removed when the model matches an option. It is always selectable
	  // and indicates that a "null" selection has been made.
	  self.hasEmptyOption = false;
	  self.emptyOption = undefined;

	  self.renderUnknownOption = function(val) {
	    var unknownVal = self.generateUnknownOptionValue(val);
	    self.unknownOption.val(unknownVal);
	    $element.prepend(self.unknownOption);
	    setOptionAsSelected(self.unknownOption);
	    $element.val(unknownVal);
	  };

	  self.updateUnknownOption = function(val) {
	    var unknownVal = self.generateUnknownOptionValue(val);
	    self.unknownOption.val(unknownVal);
	    setOptionAsSelected(self.unknownOption);
	    $element.val(unknownVal);
	  };

	  self.generateUnknownOptionValue = function(val) {
	    return '? ' + hashKey(val) + ' ?';
	  };

	  self.removeUnknownOption = function() {
	    if (self.unknownOption.parent()) self.unknownOption.remove();
	  };

	  self.selectEmptyOption = function() {
	    if (self.emptyOption) {
	      $element.val('');
	      setOptionAsSelected(self.emptyOption);
	    }
	  };

	  self.unselectEmptyOption = function() {
	    if (self.hasEmptyOption) {
	      self.emptyOption.removeAttr('selected');
	    }
	  };

	  $scope.$on('$destroy', function() {
	    // disable unknown option so that we don't do work when the whole select is being destroyed
	    self.renderUnknownOption = noop;
	  });

	  // Read the value of the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.readValue = function readSingleValue() {
	    var val = $element.val();
	    // ngValue added option values are stored in the selectValueMap, normal interpolations are not
	    var realVal = val in self.selectValueMap ? self.selectValueMap[val] : val;

	    if (self.hasOption(realVal)) {
	      return realVal;
	    }

	    return null;
	  };


	  // Write the value to the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.writeValue = function writeSingleValue(value) {
	    // Make sure to remove the selected attribute from the previously selected option
	    // Otherwise, screen readers might get confused
	    var currentlySelectedOption = $element[0].options[$element[0].selectedIndex];
	    if (currentlySelectedOption) currentlySelectedOption.removeAttribute('selected');

	    if (self.hasOption(value)) {
	      self.removeUnknownOption();

	      var hashedVal = hashKey(value);
	      $element.val(hashedVal in self.selectValueMap ? hashedVal : value);

	      // Set selected attribute and property on selected option for screen readers
	      var selectedOption = $element[0].options[$element[0].selectedIndex];
	      setOptionAsSelected(jqLite(selectedOption));
	    } else {
	      if (value == null && self.emptyOption) {
	        self.removeUnknownOption();
	        self.selectEmptyOption();
	      } else if (self.unknownOption.parent().length) {
	        self.updateUnknownOption(value);
	      } else {
	        self.renderUnknownOption(value);
	      }
	    }
	  };


	  // Tell the select control that an option, with the given value, has been added
	  self.addOption = function(value, element) {
	    // Skip comment nodes, as they only pollute the `optionsMap`
	    if (element[0].nodeType === NODE_TYPE_COMMENT) return;

	    assertNotHasOwnProperty(value, '"option value"');
	    if (value === '') {
	      self.hasEmptyOption = true;
	      self.emptyOption = element;
	    }
	    var count = optionsMap.get(value) || 0;
	    optionsMap.put(value, count + 1);
	    // Only render at the end of a digest. This improves render performance when many options
	    // are added during a digest and ensures all relevant options are correctly marked as selected
	    scheduleRender();
	  };

	  // Tell the select control that an option, with the given value, has been removed
	  self.removeOption = function(value) {
	    var count = optionsMap.get(value);
	    if (count) {
	      if (count === 1) {
	        optionsMap.remove(value);
	        if (value === '') {
	          self.hasEmptyOption = false;
	          self.emptyOption = undefined;
	        }
	      } else {
	        optionsMap.put(value, count - 1);
	      }
	    }
	  };

	  // Check whether the select control has an option matching the given value
	  self.hasOption = function(value) {
	    return !!optionsMap.get(value);
	  };


	  var renderScheduled = false;
	  function scheduleRender() {
	    if (renderScheduled) return;
	    renderScheduled = true;
	    $scope.$$postDigest(function() {
	      renderScheduled = false;
	      self.ngModelCtrl.$render();
	    });
	  }

	  var updateScheduled = false;
	  function scheduleViewValueUpdate(renderAfter) {
	    if (updateScheduled) return;

	    updateScheduled = true;

	    $scope.$$postDigest(function() {
	      if ($scope.$$destroyed) return;

	      updateScheduled = false;
	      self.ngModelCtrl.$setViewValue(self.readValue());
	      if (renderAfter) self.ngModelCtrl.$render();
	    });
	  }


	  self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {

	    if (optionAttrs.$attr.ngValue) {
	      // The value attribute is set by ngValue
	      var oldVal, hashedVal = NaN;
	      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {

	        var removal;
	        var previouslySelected = optionElement.prop('selected');

	        if (isDefined(hashedVal)) {
	          self.removeOption(oldVal);
	          delete self.selectValueMap[hashedVal];
	          removal = true;
	        }

	        hashedVal = hashKey(newVal);
	        oldVal = newVal;
	        self.selectValueMap[hashedVal] = newVal;
	        self.addOption(newVal, optionElement);
	        // Set the attribute directly instead of using optionAttrs.$set - this stops the observer
	        // from firing a second time. Other $observers on value will also get the result of the
	        // ngValue expression, not the hashed value
	        optionElement.attr('value', hashedVal);

	        if (removal && previouslySelected) {
	          scheduleViewValueUpdate();
	        }

	      });
	    } else if (interpolateValueFn) {
	      // The value attribute is interpolated
	      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {
	        // This method is overwritten in ngOptions and has side-effects!
	        self.readValue();

	        var removal;
	        var previouslySelected = optionElement.prop('selected');

	        if (isDefined(oldVal)) {
	          self.removeOption(oldVal);
	          removal = true;
	        }
	        oldVal = newVal;
	        self.addOption(newVal, optionElement);

	        if (removal && previouslySelected) {
	          scheduleViewValueUpdate();
	        }
	      });
	    } else if (interpolateTextFn) {
	      // The text content is interpolated
	      optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {
	        optionAttrs.$set('value', newVal);
	        var previouslySelected = optionElement.prop('selected');
	        if (oldVal !== newVal) {
	          self.removeOption(oldVal);
	        }
	        self.addOption(newVal, optionElement);

	        if (oldVal && previouslySelected) {
	          scheduleViewValueUpdate();
	        }
	      });
	    } else {
	      // The value attribute is static
	      self.addOption(optionAttrs.value, optionElement);
	    }


	    optionAttrs.$observe('disabled', function(newVal) {

	      // Since model updates will also select disabled options (like ngOptions),
	      // we only have to handle options becoming disabled, not enabled

	      if (newVal === 'true' || newVal && optionElement.prop('selected')) {
	        if (self.multiple) {
	          scheduleViewValueUpdate(true);
	        } else {
	          self.ngModelCtrl.$setViewValue(null);
	          self.ngModelCtrl.$render();
	        }
	      }
	    });

	    optionElement.on('$destroy', function() {
	      var currentValue = self.readValue();
	      var removeValue = optionAttrs.value;

	      self.removeOption(removeValue);
	      self.ngModelCtrl.$render();

	      if (self.multiple && currentValue && currentValue.indexOf(removeValue) !== -1 ||
	          currentValue === removeValue
	      ) {
	        // When multiple (selected) options are destroyed at the same time, we don't want
	        // to run a model update for each of them. Instead, run a single update in the $$postDigest
	        scheduleViewValueUpdate(true);
	      }
	    });
	  };

	  function setOptionAsSelected(optionEl) {
	    optionEl.prop('selected', true); // needed for IE
	    optionEl.attr('selected', true);
	  }
	}];

	/**
	 * @ngdoc directive
	 * @name select
	 * @restrict E
	 *
	 * @description
	 * HTML `select` element with angular data-binding.
	 *
	 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
	 * between the scope and the `<select>` control (including setting default values).
	 * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
	 * {@link ngOptions `ngOptions`} directives.
	 *
	 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
	 * to the model identified by the `ngModel` directive. With static or repeated options, this is
	 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
	 * Value and textContent can be interpolated.
	 *
	 * ## Matching model and option values
	 *
	 * In general, the match between the model and an option is evaluated by strictly comparing the model
	 * value against the value of the available options.
	 *
	 * If you are setting the option value with the option's `value` attribute, or textContent, the
	 * value will always be a `string` which means that the model value must also be a string.
	 * Otherwise the `select` directive cannot match them correctly.
	 *
	 * To bind the model to a non-string value, you can use one of the following strategies:
	 * - the {@link ng.ngOptions `ngOptions`} directive
	 *   ({@link ng.select#using-select-with-ngoptions-and-setting-a-default-value})
	 * - the {@link ng.ngValue `ngValue`} directive, which allows arbitrary expressions to be
	 *   option values ({@link ng.select#using-ngvalue-to-bind-the-model-to-an-array-of-objects Example})
	 * - model $parsers / $formatters to convert the string value
	 *   ({@link ng.select#binding-select-to-a-non-string-value-via-ngmodel-parsing-formatting Example})
	 *
	 * If the viewValue of `ngModel` does not match any of the options, then the control
	 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Choosing between `ngRepeat` and `ngOptions`
	 *
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
	 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits:
	 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression
	 * - reduced memory consumption by not creating a new scope for each repeated instance
	 * - increased render speed by creating the options in a documentFragment instead of individually
	 *
	 * Specifically, select with repeated options slows down significantly starting at 2000 options in
	 * Chrome and Internet Explorer / Edge.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} multiple Allows multiple options to be selected. The selected values will be
	 *     bound to the model as an array.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds required attribute and required validation constraint to
	 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
	 * when you want to data-bind to the required attribute.
	 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
	 *    interaction with the select element.
	 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
	 * set on the model on selection. See {@link ngOptions `ngOptions`}.
	 *
	 * @example
	 * ### Simple `select` elements with static options
	 *
	 * <example name="static-select" module="staticSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="singleSelect"> Single select: </label><br>
	 *     <select name="singleSelect" ng-model="data.singleSelect">
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *
	 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
	 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
	 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
	 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
	 *     <tt>singleSelect = {{data.singleSelect}}</tt>
	 *
	 *     <hr>
	 *     <label for="multipleSelect"> Multiple select: </label><br>
	 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *       <option value="option-3">Option 3</option>
	 *     </select><br>
	 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
	 *   </form>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('staticSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       singleSelect: null,
	 *       multipleSelect: [],
	 *       option1: 'option-1'
	 *      };
	 *
	 *      $scope.forceUnknownOption = function() {
	 *        $scope.data.singleSelect = 'nonsense';
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngRepeat` to generate `select` options
	 * <example name="select-ngrepeat" module="ngrepeatSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="repeatSelect"> Repeat select: </label>
	 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.model">
	 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <tt>model = {{data.model}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngrepeatSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       model: null,
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ]
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngValue` to bind the model to an array of objects
	 * <example name="select-ngvalue" module="ngvalueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="ngvalueselect"> ngvalue select: </label>
	 *     <select size="6" name="ngvalueselect" ng-model="data.model" multiple>
	 *       <option ng-repeat="option in data.availableOptions" ng-value="option.value">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <pre>model = {{data.model | json}}</pre><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngvalueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       model: null,
	 *       availableOptions: [
	           {value: 'myString', name: 'string'},
	           {value: 1, name: 'integer'},
	           {value: true, name: 'boolean'},
	           {value: null, name: 'null'},
	           {value: {prop: 'value'}, name: 'object'},
	           {value: ['a'], name: 'array'}
	 *       ]
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `select` with `ngOptions` and setting a default value
	 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
	 *
	 * <example name="select-with-default-values" module="defaultValueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="mySelect">Make a choice:</label>
	 *     <select name="mySelect" id="mySelect"
	 *       ng-options="option.name for option in data.availableOptions track by option.id"
	 *       ng-model="data.selectedOption"></select>
	 *   </form>
	 *   <hr>
	 *   <tt>option = {{data.selectedOption}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('defaultValueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
	 *       };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
	 *
	 * <example name="select-with-non-string-options" module="nonStringSelect">
	 *   <file name="index.html">
	 *     <select ng-model="model.id" convert-to-number>
	 *       <option value="0">Zero</option>
	 *       <option value="1">One</option>
	 *       <option value="2">Two</option>
	 *     </select>
	 *     {{ model }}
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('nonStringSelect', [])
	 *       .run(function($rootScope) {
	 *         $rootScope.model = { id: 2 };
	 *       })
	 *       .directive('convertToNumber', function() {
	 *         return {
	 *           require: 'ngModel',
	 *           link: function(scope, element, attrs, ngModel) {
	 *             ngModel.$parsers.push(function(val) {
	 *               return parseInt(val, 10);
	 *             });
	 *             ngModel.$formatters.push(function(val) {
	 *               return '' + val;
	 *             });
	 *           }
	 *         };
	 *       });
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should initialize to model', function() {
	 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
	 *     });
	 *   </file>
	 * </example>
	 *
	 */
	var selectDirective = function() {

	  return {
	    restrict: 'E',
	    require: ['select', '?ngModel'],
	    controller: SelectController,
	    priority: 1,
	    link: {
	      pre: selectPreLink,
	      post: selectPostLink
	    }
	  };

	  function selectPreLink(scope, element, attr, ctrls) {

	      var selectCtrl = ctrls[0];
	      var ngModelCtrl = ctrls[1];

	      // if ngModel is not defined, we don't need to do anything but set the registerOption
	      // function to noop, so options don't get added internally
	      if (!ngModelCtrl) {
	        selectCtrl.registerOption = noop;
	        return;
	      }


	      selectCtrl.ngModelCtrl = ngModelCtrl;

	      // When the selected item(s) changes we delegate getting the value of the select control
	      // to the `readValue` method, which can be changed if the select can have multiple
	      // selected values or if the options are being generated by `ngOptions`
	      element.on('change', function() {
	        selectCtrl.removeUnknownOption();
	        scope.$apply(function() {
	          ngModelCtrl.$setViewValue(selectCtrl.readValue());
	        });
	      });

	      // If the select allows multiple values then we need to modify how we read and write
	      // values from and to the control; also what it means for the value to be empty and
	      // we have to add an extra watch since ngModel doesn't work well with arrays - it
	      // doesn't trigger rendering if only an item in the array changes.
	      if (attr.multiple) {
	        selectCtrl.multiple = true;

	        // Read value now needs to check each option to see if it is selected
	        selectCtrl.readValue = function readMultipleValue() {
	          var array = [];
	          forEach(element.find('option'), function(option) {
	            if (option.selected && !option.disabled) {
	              var val = option.value;
	              array.push(val in selectCtrl.selectValueMap ? selectCtrl.selectValueMap[val] : val);
	            }
	          });
	          return array;
	        };

	        // Write value now needs to set the selected property of each matching option
	        selectCtrl.writeValue = function writeMultipleValue(value) {
	          var items = new HashMap(value);
	          forEach(element.find('option'), function(option) {
	            option.selected = isDefined(items.get(option.value)) || isDefined(items.get(selectCtrl.selectValueMap[option.value]));
	          });
	        };

	        // we have to do it on each watch since ngModel watches reference, but
	        // we need to work of an array, so we need to see if anything was inserted/removed
	        var lastView, lastViewRef = NaN;
	        scope.$watch(function selectMultipleWatch() {
	          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
	            lastView = shallowCopy(ngModelCtrl.$viewValue);
	            ngModelCtrl.$render();
	          }
	          lastViewRef = ngModelCtrl.$viewValue;
	        });

	        // If we are a multiple select then value is now a collection
	        // so the meaning of $isEmpty changes
	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };

	      }
	    }

	    function selectPostLink(scope, element, attrs, ctrls) {
	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;

	      var selectCtrl = ctrls[0];

	      // We delegate rendering to the `writeValue` method, which can be changed
	      // if the select can have multiple selected values or if the options are being
	      // generated by `ngOptions`.
	      // This must be done in the postLink fn to prevent $render to be called before
	      // all nodes have been linked correctly.
	      ngModelCtrl.$render = function() {
	        selectCtrl.writeValue(ngModelCtrl.$viewValue);
	      };
	    }
	};


	// The option directive is purely designed to communicate the existence (or lack of)
	// of dynamically created (and destroyed) option elements to their containing select
	// directive via its controller.
	var optionDirective = ['$interpolate', function($interpolate) {
	  return {
	    restrict: 'E',
	    priority: 100,
	    compile: function(element, attr) {
	      var interpolateValueFn, interpolateTextFn;

	      if (isDefined(attr.ngValue)) {
	        // Will be handled by registerOption
	      } else if (isDefined(attr.value)) {
	        // If the value attribute is defined, check if it contains an interpolation
	        interpolateValueFn = $interpolate(attr.value, true);
	      } else {
	        // If the value attribute is not defined then we fall back to the
	        // text content of the option element, which may be interpolated
	        interpolateTextFn = $interpolate(element.text(), true);
	        if (!interpolateTextFn) {
	          attr.$set('value', element.text());
	        }
	      }

	      return function(scope, element, attr) {
	        // This is an optimization over using ^^ since we don't want to have to search
	        // all the way to the root of the DOM for every single option element
	        var selectCtrlName = '$selectController',
	            parent = element.parent(),
	            selectCtrl = parent.data(selectCtrlName) ||
	              parent.parent().data(selectCtrlName); // in case we are in optgroup

	        if (selectCtrl) {
	          selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
	        }
	      };
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngRequired
	 * @restrict A
	 *
	 * @description
	 *
	 * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
	 * applied to custom controls.
	 *
	 * The directive sets the `required` attribute on the element if the Angular expression inside
	 * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
	 * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
	 * for more info.
	 *
	 * The validator will set the `required` error key to true if the `required` attribute is set and
	 * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
	 * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
	 * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
	 * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
	 *
	 * @example
	 * <example name="ngRequiredDirective" module="ngRequiredExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngRequiredExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.required = true;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="required">Toggle required: </label>
	 *         <input type="checkbox" ng-model="required" id="required" />
	 *         <br>
	 *         <label for="input">This input must be filled if `required` is true: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
	 *         <hr>
	 *         required error set? = <code>{{form.input.$error.required}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var required = element(by.binding('form.input.$error.required'));
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should set the required error', function() {
	         expect(required.getText()).toContain('true');

	         input.sendKeys('123');
	         expect(required.getText()).not.toContain('true');
	         expect(model.getText()).toContain('123');
	       });
	 *   </file>
	 * </example>
	 */
	var requiredDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	      attr.required = true; // force truthy in case we are on non input element

	      ctrl.$validators.required = function(modelValue, viewValue) {
	        return !attr.required || !ctrl.$isEmpty(viewValue);
	      };

	      attr.$observe('required', function() {
	        ctrl.$validate();
	      });
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngPattern
	 *
	 * @description
	 *
	 * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * does not match a RegExp which is obtained by evaluating the Angular expression given in the
	 * `ngPattern` attribute value:
	 * * If the expression evaluates to a RegExp object, then this is used directly.
	 * * If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
	 * in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
	 *
	 * <div class="alert alert-info">
	 * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 * start at the index of the last search's match, thus not taking the whole input value into
	 * account.
	 * </div>
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
	 *     not available.
	 *   </li>
	 *   <li>
	 *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngPatternDirective" module="ngPatternExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngPatternExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.regex = '\\d+';
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="regex">Set a pattern (regex string): </label>
	 *         <input type="text" ng-model="regex" id="regex" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current pattern: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should validate the input with the default pattern', function() {
	         input.sendKeys('aaa');
	         expect(model.getText()).not.toContain('aaa');

	         input.clear().then(function() {
	           input.sendKeys('123');
	           expect(model.getText()).toContain('123');
	         });
	       });
	 *   </file>
	 * </example>
	 */
	var patternDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var regexp, patternExp = attr.ngPattern || attr.pattern;
	      attr.$observe('pattern', function(regex) {
	        if (isString(regex) && regex.length > 0) {
	          regex = new RegExp('^' + regex + '$');
	        }

	        if (regex && !regex.test) {
	          throw minErr('ngPattern')('noregexp',
	            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
	            regex, startingTag(elm));
	        }

	        regexp = regex || undefined;
	        ctrl.$validate();
	      });

	      ctrl.$validators.pattern = function(modelValue, viewValue) {
	        // HTML5 pattern constraint validates the input value, so we validate the viewValue
	        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
	      };
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngMaxlength
	 *
	 * @description
	 *
	 * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is longer than the integer obtained by evaluating the Angular expression given in the
	 * `ngMaxlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMaxlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.maxlength = 5;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="maxlength">Set a maxlength: </label>
	 *         <input type="number" ng-model="maxlength" id="maxlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current maxlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should validate the input with the default maxlength', function() {
	         input.sendKeys('abcdef');
	         expect(model.getText()).not.toContain('abcdef');

	         input.clear().then(function() {
	           input.sendKeys('abcde');
	           expect(model.getText()).toContain('abcde');
	         });
	       });
	 *   </file>
	 * </example>
	 */
	var maxlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var maxlength = -1;
	      attr.$observe('maxlength', function(value) {
	        var intVal = toInt(value);
	        maxlength = isNumberNaN(intVal) ? -1 : intVal;
	        ctrl.$validate();
	      });
	      ctrl.$validators.maxlength = function(modelValue, viewValue) {
	        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
	      };
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngMinlength
	 *
	 * @description
	 *
	 * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is shorter than the integer obtained by evaluating the Angular expression given in the
	 * `ngMinlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMinlength` value must be an expression, while the `minlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMinlengthDirective" module="ngMinlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMinlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.minlength = 3;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="minlength">Set a minlength: </label>
	 *         <input type="number" ng-model="minlength" id="minlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current minlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should validate the input with the default minlength', function() {
	         input.sendKeys('ab');
	         expect(model.getText()).not.toContain('ab');

	         input.sendKeys('abc');
	         expect(model.getText()).toContain('abc');
	       });
	 *   </file>
	 * </example>
	 */
	var minlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var minlength = 0;
	      attr.$observe('minlength', function(value) {
	        minlength = toInt(value) || 0;
	        ctrl.$validate();
	      });
	      ctrl.$validators.minlength = function(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
	      };
	    }
	  };
	};

	if (window.angular.bootstrap) {
	  // AngularJS is already loaded, so we can return here...
	  if (window.console) {
	    console.log('WARNING: Tried to load angular more than once.');
	  }
	  return;
	}

	// try to bind to jquery now so that one can write jqLite(fn)
	// but we will rebind on bootstrap again.
	bindJQuery();

	publishExternalAPI(angular);

	angular.module("ngLocale", [], ["$provide", function($provide) {
	var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
	function getDecimals(n) {
	  n = n + '';
	  var i = n.indexOf('.');
	  return (i == -1) ? 0 : n.length - i - 1;
	}

	function getVF(n, opt_precision) {
	  var v = opt_precision;

	  if (undefined === v) {
	    v = Math.min(getDecimals(n), 3);
	  }

	  var base = Math.pow(10, v);
	  var f = ((n * base) | 0) % base;
	  return {v: v, f: f};
	}

	$provide.value("$locale", {
	  "DATETIME_FORMATS": {
	    "AMPMS": [
	      "AM",
	      "PM"
	    ],
	    "DAY": [
	      "Sunday",
	      "Monday",
	      "Tuesday",
	      "Wednesday",
	      "Thursday",
	      "Friday",
	      "Saturday"
	    ],
	    "ERANAMES": [
	      "Before Christ",
	      "Anno Domini"
	    ],
	    "ERAS": [
	      "BC",
	      "AD"
	    ],
	    "FIRSTDAYOFWEEK": 6,
	    "MONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "SHORTDAY": [
	      "Sun",
	      "Mon",
	      "Tue",
	      "Wed",
	      "Thu",
	      "Fri",
	      "Sat"
	    ],
	    "SHORTMONTH": [
	      "Jan",
	      "Feb",
	      "Mar",
	      "Apr",
	      "May",
	      "Jun",
	      "Jul",
	      "Aug",
	      "Sep",
	      "Oct",
	      "Nov",
	      "Dec"
	    ],
	    "STANDALONEMONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "WEEKENDRANGE": [
	      5,
	      6
	    ],
	    "fullDate": "EEEE, MMMM d, y",
	    "longDate": "MMMM d, y",
	    "medium": "MMM d, y h:mm:ss a",
	    "mediumDate": "MMM d, y",
	    "mediumTime": "h:mm:ss a",
	    "short": "M/d/yy h:mm a",
	    "shortDate": "M/d/yy",
	    "shortTime": "h:mm a"
	  },
	  "NUMBER_FORMATS": {
	    "CURRENCY_SYM": "$",
	    "DECIMAL_SEP": ".",
	    "GROUP_SEP": ",",
	    "PATTERNS": [
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 3,
	        "minFrac": 0,
	        "minInt": 1,
	        "negPre": "-",
	        "negSuf": "",
	        "posPre": "",
	        "posSuf": ""
	      },
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 2,
	        "minFrac": 2,
	        "minInt": 1,
	        "negPre": "-\u00a4",
	        "negSuf": "",
	        "posPre": "\u00a4",
	        "posSuf": ""
	      }
	    ]
	  },
	  "id": "en-us",
	  "localeID": "en_US",
	  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
	});
	}]);

	  jqLite(function() {
	    angularInit(window.document, bootstrap);
	  });

	})(window);

	!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

/***/ },
/* 25 */
/***/ function(module, exports) {

	'use strict';

	angular.module("ngLocale", [], ["$provide", function ($provide) {
	  var PLURAL_CATEGORY = { ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other" };
	  $provide.value("$locale", {
	    "DATETIME_FORMATS": {
	      "AMPMS": ["\u4E0A\u5348", "\u4E0B\u5348"],
	      "DAY": ["\u661F\u671F\u65E5", "\u661F\u671F\u4E00", "\u661F\u671F\u4E8C", "\u661F\u671F\u4E09", "\u661F\u671F\u56DB", "\u661F\u671F\u4E94", "\u661F\u671F\u516D"],
	      "ERANAMES": ["\u516C\u5143\u524D", "\u516C\u5143"],
	      "ERAS": ["\u516C\u5143\u524D", "\u516C\u5143"],
	      "FIRSTDAYOFWEEK": 6,
	      "MONTH": ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"],
	      "SHORTDAY": ["\u5468\u65E5", "\u5468\u4E00", "\u5468\u4E8C", "\u5468\u4E09", "\u5468\u56DB", "\u5468\u4E94", "\u5468\u516D"],
	      "SHORTMONTH": ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"],
	      "STANDALONEMONTH": ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"],
	      "WEEKENDRANGE": [5, 6],
	      "fullDate": "y\u5E74M\u6708d\u65E5EEEE",
	      "longDate": "y\u5E74M\u6708d\u65E5",
	      "medium": "y\u5E74M\u6708d\u65E5 ah:mm:ss",
	      "mediumDate": "y\u5E74M\u6708d\u65E5",
	      "mediumTime": "ah:mm:ss",
	      "short": "yy/M/d ah:mm",
	      "shortDate": "yy/M/d",
	      "shortTime": "ah:mm"
	    },
	    "NUMBER_FORMATS": {
	      "CURRENCY_SYM": "\xA5",
	      "DECIMAL_SEP": ".",
	      "GROUP_SEP": ",",
	      "PATTERNS": [{
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 3,
	        "minFrac": 0,
	        "minInt": 1,
	        "negPre": "-",
	        "negSuf": "",
	        "posPre": "",
	        "posSuf": ""
	      }, {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 2,
	        "minFrac": 2,
	        "minInt": 1,
	        "negPre": "-\xA4\xA0",
	        "negSuf": "",
	        "posPre": "\xA4\xA0",
	        "posSuf": ""
	      }]
	    },
	    "id": "zh-cn",
	    "localeID": "zh_CN",
	    "pluralCat": function pluralCat(n, opt_precision) {
	      return PLURAL_CATEGORY.OTHER;
	    }
	  });
	}]);

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _index = __webpack_require__(27);

	var _index2 = _interopRequireDefault(_index);

	var _easyuiScm = __webpack_require__(28);

	var _easyuiScm2 = _interopRequireDefault(_easyuiScm);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var indexComponent = {
	    template: _index2.default,
	    style: _easyuiScm2.default
	};

	exports.default = indexComponent;

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = "<div class=\"container-fluid\" style=\"height:100%;padding:0 20px 0 0;background:#E8E9EE;overflow:hidden;\">\n    <div class=\"row\" style=\"float:left;width:100%;height:60px;margin:0;\">\n        <div class=\"col-md-12\" style=\"padding:0;\">\n            <scm-head></scm-head>\n        </div>\n    </div>\n    <div class=\"row newlist\" style=\"padding-top:60px;;margin:0;height:100%;\">\n        <div class=\"col-md-12\" style=\"height:100%;background:#ccc;padding:0;\">\n            <scm-tree></scm-tree>\n        </div>\n    </div>\n</div>\n\n";

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(29);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(47)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept(29, function() {
				var newContent = __webpack_require__(29);
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(30)();
	// imports


	// module
	exports.push([module.id, ".panel {\r\n  overflow: hidden;\r\n  text-align: center;\r\n  margin: 0;\r\n  border: 0;\r\n  -moz-border-radius: 0 0 0 0;\r\n  -webkit-border-radius: 0 0 0 0;\r\n  border-radius: 0 0 0 0;\r\n}\r\n.panel-header,\r\n.panel-body {\r\n  border-width: 1px;\r\n  border-style: solid;\r\n}\r\n.panel-header {\r\n  padding: 5px;\r\n  position: relative;\r\n}\r\n/*.panel-title {\r\n  background: url('../images/blank.gif') no-repeat;\r\n}*/\r\n.panel-header-noborder {\r\n  border-width: 0 0 1px 0;\r\n}\r\n.panel-body {\r\n  overflow: auto;\r\n  border-top-width: 0;\r\n  padding: 0;\r\n}\r\n.panel-body-noheader {\r\n  border-top-width: 1px;\r\n}\r\n.panel-body-noborder {\r\n  border-width: 0px;\r\n}\r\n.panel-body-nobottom {\r\n  border-bottom-width: 0;\r\n}\r\n.panel-with-icon {\r\n  padding-left: 18px;\r\n}\r\n.panel-icon,\r\n.panel-tool {\r\n  position: absolute;\r\n  top: 50%;\r\n  margin-top: -8px;\r\n  height: 16px;\r\n  overflow: hidden;\r\n}\r\n.panel-icon {\r\n  left: 5px;\r\n  width: 16px;\r\n}\r\n.panel-tool {\r\n  right: 5px;\r\n  width: auto;\r\n}\r\n.panel-tool a {\r\n  display: inline-block;\r\n  width: 16px;\r\n  height: 16px;\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n  margin: 0 0 0 2px;\r\n  vertical-align: top;\r\n}\r\n.panel-tool a:hover {\r\n  opacity: 1;\r\n  filter: alpha(opacity=100);\r\n\r\n  -moz-border-radius: 3px 3px 3px 3px;\r\n  -webkit-border-radius: 3px 3px 3px 3px;\r\n  border-radius: 3px 3px 3px 3px;\r\n}\r\n.panel-loading {\r\n  padding: 11px 0px 10px 30px;\r\n}\r\n.panel-noscroll {\r\n  overflow: hidden;\r\n}\r\n.panel-fit,\r\n.panel-fit body {\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  overflow: hidden;\r\n}\r\n/*.panel-loading {\r\n  background: url('../images/loading.gif') no-repeat 10px 10px;\r\n}*/\r\n .panel-tool-close {\r\n  background: url(" + __webpack_require__(31) + ") no-repeat -16px 0px;\r\n}\r\n.panel-tool-min {\r\n  background: url(" + __webpack_require__(31) + ") no-repeat 0px 0px;\r\n}\r\n.panel-tool-max {\r\n  background: url(" + __webpack_require__(31) + ") no-repeat 0px -16px;\r\n}\r\n.panel-tool-restore {\r\n  background: url(" + __webpack_require__(31) + ") no-repeat -16px -16px;\r\n}\r\n.panel-tool-collapse {\r\n  background: url(" + __webpack_require__(31) + ") no-repeat -32px 0;\r\n}\r\n.panel-tool-expand {\r\n  background: url(" + __webpack_require__(31) + ") no-repeat -32px -16px;\r\n}\r\n.panel-header,\r\n.panel-body {\r\n\tborder:none\r\n}\r\n.panel-header {\r\n  background-color: #4E5A6C;\r\n}\r\n.panel-body {\r\n  color: #000;\r\n  font-size: 14px;\r\n}\r\n.panel-title {\r\n  font-size: 14px;\r\n/*   font-weight:bold; */\r\n  color: #47626d;\r\n  height: 30px;\r\n  line-height: 33px;\r\n  text-align: left;\r\n  text-indent:20px;\r\n}\r\n.panel-footer {\r\n  border: 1px solid #95B8E7;\r\n  overflow: hidden;\r\n  background: #F4F4F4;\r\n}\r\n.panel-footer-noborder {\r\n  border-width: 1px 0 0 0;\r\n}\r\n.accordion {\r\n  overflow: hidden;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n}\r\n.accordion .accordion-header {\r\n  border-width: 0 0 1px;\r\n  cursor: pointer;\r\n}\r\n.accordion .accordion-body {\r\n  border-width: 0 0 1px;\r\n}\r\n.accordion-noborder {\r\n  border-width: 0;\r\n}\r\n.accordion-noborder .accordion-header {\r\n  border-width: 0 0 1px;\r\n}\r\n.accordion-noborder .accordion-body {\r\n  border-width: 0 0 1px;\r\n}\r\n.accordion-collapse {\r\n  background: url(" + __webpack_require__(32) + ") no-repeat 0 0;\r\n}\r\n.accordion-expand {\r\n  background: url(" + __webpack_require__(32) + ") no-repeat -16px 0;\r\n}\r\n.accordion {\r\n  background: #ffffff;\r\n  border-color: #95B8E7;\r\n}\r\n.accordion .accordion-header {\r\n  background: #E0ECFF;\r\n  filter: none;\r\n}\r\n.accordion .accordion-header-selected {\r\n  background: #ffe48d;\r\n}\r\n.accordion .accordion-header-selected .panel-title {\r\n  color: #000000;\r\n}\r\n.window {\r\n  overflow: hidden;\r\n}\r\n.window .window-header {\r\n  background-color: #c8cdd3;\r\n  padding: 0px 0px 6px 0px;\r\n}\r\n.window .window-body {\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  border-top-width: 0px;\r\n  border-color: #fff;\r\n}\r\n.window .window-body-noheader {\r\n  border-top-width: 1px;\r\n}\r\n.window .panel-body-nobottom {\r\n  border-bottom-width: 0;\r\n}\r\n.window .window-header .panel-icon,\r\n.window .window-header .panel-tool {\r\n  top: 50%;\r\n  margin-top: -11px;\r\n}\r\n.window .window-header .panel-icon {\r\n  left: 1px;\r\n}\r\n.window .window-header .panel-tool {\r\n  right: 10px;\r\n  top:20px;\r\n}\r\n.window .window-header .panel-with-icon {\r\n  padding-left: 18px;\r\n}\r\n.window-proxy {\r\n  position: absolute;\r\n  overflow: hidden;\r\n}\r\n.window-proxy-mask {\r\n  position: absolute;\r\n  filter: alpha(opacity=5);\r\n  opacity: 0.05;\r\n}\r\n.window-mask {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  filter: alpha(opacity=40);\r\n  opacity: 0.40;\r\n  font-size: 1px;\r\n  overflow: hidden;\r\n}\r\n.window,\r\n.window-shadow {\r\n  position: absolute;\r\n}\r\n.window-shadow {\r\n}\r\n.window\r\n {\r\n  border-color: #434343;\r\n}\r\n.window .window-body {\r\n    color: #47626D;\r\n    background-color: #ffffff;\r\n}\r\n.window {\r\n  background-color: #fff;\r\n}\r\n.window-proxy {\r\n  border: 1px dashed #95B8E7;\r\n}\r\n.window-proxy-mask,\r\n.window-mask {\r\n  background:rgba(0,0,0,1);\r\n}\r\n.window .panel-footer {\r\n  border: 1px solid #95B8E7;\r\n  position: relative;\r\n  top: -1px;\r\n}\r\n.dialog-content {\r\n  overflow: auto;\r\n}\r\n.dialog-toolbar {\r\n  padding: 2px 5px;\r\n}\r\n.dialog-tool-separator {\r\n  float: left;\r\n  height: 24px;\r\n  border-left: 1px solid #ccc;\r\n  border-right: 1px solid #fff;\r\n  margin: 2px 1px;\r\n}\r\n/* .dialog-button {\r\n  padding: 5px;\r\n  text-align: right;\r\n} */\r\n.dialog-button .l-btn {\r\n  margin-left: 20px;\r\n}\r\n.dialog-toolbar,\r\n.dialog-button {\r\n  /* background: #F4F4F4; */\r\n  border-width: 1px;\r\n/*   border-style: solid; */\r\n}\r\n.dialog-toolbar {\r\n  border-color: #95B8E7 #95B8E7 #dddddd #95B8E7;\r\n}\r\n.dialog-button {\r\n  border-color: #434343 #434343 #434343 #434343;\r\n}\r\n.l-btn {\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  overflow: hidden;\r\n  margin: 0;\r\n  padding: 0;\r\n  cursor: pointer;\r\n  outline: none;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  line-height: normal;\r\n}\r\n.l-btn-plain {\r\n  border-width: 0;\r\n  padding: 1px;\r\n}\r\n.l-btn-left {\r\n  display: inline-block;\r\n  position: relative;\r\n  overflow: hidden;\r\n  margin: 0;\r\n  padding: 0;\r\n  vertical-align: top;\r\n}\r\n.l-btn-text {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  width: auto;\r\n  line-height: 28px;\r\n  font-size: 14px;\r\n  padding: 0;\r\n  margin: 0 4px;\r\n}\r\n.l-btn-icon {\r\n  display: inline-block;\r\n  width: 20px;\r\n  height: 20px;\r\n  line-height: 20px;\r\n  position: absolute;\r\n  top: 50%;\r\n  margin-top: -11px;\r\n  font-size: 1px;\r\n  margin-right:20px\r\n}\r\n.l-btn span span .l-btn-empty {\r\n  display: inline-block;\r\n  margin: 0;\r\n  width: 16px;\r\n  height: 24px;\r\n  font-size: 1px;\r\n  vertical-align: top;\r\n}\r\n.l-btn span .l-btn-icon-left {\r\n  padding: 0 0 0 20px;\r\n  background-position: left center;\r\n}\r\n.l-btn span .l-btn-icon-right {\r\n  padding: 0 20px 0 0;\r\n  background-position: right center;\r\n}\r\n.l-btn-icon-left .l-btn-text {\r\n  margin: 0 4px 0 24px;\r\n}\r\n.l-btn-icon-left .l-btn-icon {\r\n  left: 1px;\r\n  top:16px;\r\n}\r\n.l-btn-icon-right .l-btn-text {\r\n  margin: 0 24px 0 4px;\r\n}\r\n.l-btn-icon-right .l-btn-icon {\r\n  right: 4px;\r\n}\r\n.l-btn-icon-top .l-btn-text {\r\n  margin: 20px 4px 0 4px;\r\n}\r\n.l-btn-icon-top .l-btn-icon {\r\n  top: 4px;\r\n  left: 50%;\r\n  margin: 0 0 0 -8px;\r\n}\r\n.l-btn-icon-bottom .l-btn-text {\r\n  margin: 0 4px 20px 4px;\r\n}\r\n.l-btn-icon-bottom .l-btn-icon {\r\n  top: auto;\r\n  bottom: 4px;\r\n  left: 50%;\r\n  margin: 0 0 0 -8px;\r\n}\r\n.l-btn-left .l-btn-empty {\r\n  margin: 0 4px;\r\n  width: 16px;\r\n}\r\n\r\n.l-btn-focus {\r\n  outline: #0000FF dotted thin;\r\n}\r\n.l-btn-large .l-btn-text {\r\n  line-height: 40px;\r\n}\r\n.l-btn-large .l-btn-icon {\r\n  width: 32px;\r\n  height: 32px;\r\n  line-height: 32px;\r\n  margin-top: -16px;\r\n}\r\n.l-btn-large .l-btn-icon-left .l-btn-text {\r\n  margin-left: 40px;\r\n}\r\n.l-btn-large .l-btn-icon-right .l-btn-text {\r\n  margin-right: 40px;\r\n}\r\n.l-btn-large .l-btn-icon-top .l-btn-text {\r\n  margin-top: 36px;\r\n  line-height: 24px;\r\n  min-width: 32px;\r\n}\r\n.l-btn-large .l-btn-icon-top .l-btn-icon {\r\n  margin: 0 0 0 -16px;\r\n}\r\n.l-btn-large .l-btn-icon-bottom .l-btn-text {\r\n  margin-bottom: 36px;\r\n  line-height: 24px;\r\n  min-width: 32px;\r\n}\r\n.l-btn-large .l-btn-icon-bottom .l-btn-icon {\r\n  margin: 0 0 0 -16px;\r\n}\r\n.l-btn-large .l-btn-left .l-btn-empty {\r\n  margin: 0 4px;\r\n  width: 32px;\r\n}\r\n.l-btn {\r\n  color: #444;\r\n  /* background: #fafafa; */\r\n  background-repeat: repeat-x;\r\n  /* border: 1px solid #bbb; */\r\n /*  background: -webkit-linear-gradient(top,#ffffff 0,#eeeeee 100%);\r\n background: -moz-linear-gradient(top,#ffffff 0,#eeeeee 100%);\r\n background: -o-linear-gradient(top,#ffffff 0,#eeeeee 100%);\r\n background: linear-gradient(to bottom,#ffffff 0,#eeeeee 100%); */\r\n  background-repeat: repeat-x;\r\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#ffffff,endColorstr=#eeeeee,GradientType=0);\r\n  -moz-border-radius: 5px 5px 5px 5px;\r\n  -webkit-border-radius: 5px 5px 5px 5px;\r\n  border-radius: 5px 5px 5px 5px;\r\n}\r\n\r\n.l-btn-plain {\r\n  background: transparent;\r\n  border-width: 0;\r\n  filter: none;\r\n  margin-right:0px\r\n}\r\n.l-btn-outline {\r\n  border-width: 1px;\r\n  border-color: #b7d2ff;\r\n  padding: 0;\r\n}\r\n\r\n.l-btn-disabled,\r\n.l-btn-disabled:hover {\r\n  opacity: 0.5;\r\n  cursor: default;\r\n  background: #fafafa;\r\n  color: #444;\r\n  background: -webkit-linear-gradient(top,#ffffff 0,#eeeeee 100%);\r\n  background: -moz-linear-gradient(top,#ffffff 0,#eeeeee 100%);\r\n  background: -o-linear-gradient(top,#ffffff 0,#eeeeee 100%);\r\n  background: linear-gradient(to bottom,#ffffff 0,#eeeeee 100%);\r\n  background-repeat: repeat-x;\r\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#ffffff,endColorstr=#eeeeee,GradientType=0);\r\n}\r\n.l-btn-disabled .l-btn-text,\r\n.l-btn-disabled .l-btn-icon {\r\n  filter: alpha(opacity=50);\r\n}\r\n.l-btn-plain-disabled,\r\n.l-btn-plain-disabled:hover {\r\n  background: transparent;\r\n  filter: alpha(opacity=50);\r\n}\r\n.l-btn-selected,\r\n.l-btn-selected:hover {\r\n  background: #ddd;\r\n  filter: none;\r\n}\r\n.l-btn-plain-selected,\r\n.l-btn-plain-selected:hover {\r\n  background: #ddd;\r\n}\r\n.textbox {\r\n  position: relative;\r\n  border-color:#ccc;\r\n  border-width:1px;\r\n  border-style:solid;\r\n  vertical-align: middle;\r\n  display: inline-block;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  margin: 0;\r\n  padding: 0;\r\n  -moz-border-radius: 2px; -webkit-border-radius: 2px; -ms-border-radius: 2px; border-radius: 2px;\r\n \r\n\r\n}\r\n.textbox .textbox-text {\r\n  font-size: 12px;\r\n  border: 0;\r\n  margin: 0;\r\n  padding: 4px;\r\n  white-space: normal;\r\n  vertical-align: top;\r\n  outline-style: none;\r\n  resize: none; \r\n}\r\n.textbox .textbox-prompt {\r\n  font-size: 12px;\r\n  color: #aaa;\r\n}\r\n.textbox .textbox-button,\r\n.textbox .textbox-button:hover {\r\n  position: absolute;\r\n  top: 0;\r\n  padding: 0;\r\n  vertical-align: top;\r\n  -moz-border-radius: 0 0 0 0;\r\n  -webkit-border-radius: 0 0 0 0;\r\n  border-radius: 0 0 0 0;\r\n}\r\n.textbox-button-right,\r\n.textbox-button-right:hover {\r\n  border-width: 0 0 0 1px;\r\n}\r\n.textbox-button-left,\r\n.textbox-button-left:hover {\r\n  border-width: 0 1px 0 0;\r\n}\r\n.textbox-addon {\r\n  position: absolute;\r\n  top: 0;\r\n}\r\n.textbox-icon {\r\n  display: inline-block;\r\n  width: 18px;\r\n  height: 27px !important;\r\n  overflow: hidden;\r\n  vertical-align: top;\r\n  background-position: center center;\r\n  cursor: pointer;\r\n  opacity: 1;\r\n  filter: alpha(opacity=100);\r\n  text-decoration: none;\r\n  outline-style: none;\r\n}\r\n.textbox-icon-disabled,\r\n.textbox-icon-readonly {\r\n  cursor: default;\r\n}\r\n.textbox-icon:hover {\r\n  opacity: 1.0;\r\n  filter: alpha(opacity=100);\r\n}\r\n.textbox-icon-disabled:hover {\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n}\r\n.textbox-focused {\r\n  border:1px #486dff solid\r\n}\r\n.textbox-invalid {\r\n   border-color: #ffa8a8; \r\n  background-color: #fff3f3;\r\n}\r\n.filebox .textbox-value {\r\n  vertical-align: top;\r\n  position: absolute;\r\n  top: 0;\r\n  left: -5000px;\r\n}\r\n.filebox-label {\r\n  display: inline-block;\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  cursor: pointer;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 10;\r\n}\r\n.l-btn-disabled .filebox-label {\r\n  cursor: default;\r\n}\r\n.combo {\r\n  display: inline-block;\r\n  white-space: nowrap;\r\n  margin: 0;\r\n  padding: 0;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  overflow: hidden;\r\n  vertical-align: middle;\r\n}\r\n.combo .combo-text {\r\n  font-size: 12px;\r\n  border: 0px;\r\n  margin: 0;\r\n  padding: 0px 2px;\r\n  vertical-align: baseline;\r\n}\r\n.combo-arrow {\r\n  width: 18px;\r\n  height: 20px;\r\n  overflow: hidden;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  cursor: pointer;\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n}\r\n.combo-arrow-hover {\r\n  opacity: 1.0;\r\n  filter: alpha(opacity=100);\r\n}\r\n.combo-panel {\r\n  overflow: auto;\r\n}\r\n.combo-arrow {\r\n  background: url(" + __webpack_require__(33) + ") no-repeat center center;\r\n}\r\n.combo-panel {\r\n  background-color: #ffffff;\r\n  color:#000\r\n}\r\n.combo {\r\n   \r\n}\r\n.combo-arrow {\r\n  \r\n}\r\n.combo-arrow-hover {\r\n  background-color: #eaf2ff;\r\n}\r\n.combo-arrow:hover {\r\n  background-color: #eaf2ff;\r\n}\r\n.combo .textbox-icon-disabled:hover {\r\n  cursor: default;\r\n}\r\n.textbox-invalid {\r\n  border-color: #ffa8a8;\r\n  background-color: #fff3f3;\r\n}\r\n.combobox-item,\r\n.combobox-group {\r\n  font-size: 12px;\r\n  padding: 3px;\r\n  padding-left: 5px;\r\n  text-align:left;\r\n}\r\n.combobox-item-disabled {\r\n  opacity: 0.5;\r\n  filter: alpha(opacity=50);\r\n}\r\n.combobox-gitem {\r\n  padding-left: 10px;\r\n}\r\n.combobox-group {\r\n  font-weight: bold;\r\n}\r\n.combobox-item-hover {\r\n  background-color: #4ca4ff;\r\n  color: #000000;\r\n}\r\n.combobox-item-selected {\r\n  background-color: #4ca4ff;\r\n  color: #000000;\r\n}\r\n.layout {\r\n  position: relative;\r\n  overflow: hidden;\r\n  margin: 0;\r\n  padding: 0;\r\n  z-index: 0;\r\n}\r\n.layout-panel {\r\n  position: absolute;\r\n  overflow: hidden;\r\n}\r\n.layout-panel-east,\r\n.layout-panel-west {\r\n  z-index: 2;\r\n}\r\n.layout-panel-north,\r\n.layout-panel-south {\r\n  z-index: 3;\r\n}\r\n.layout-expand {\r\n  position: absolute;\r\n  padding: 0px;\r\n  font-size: 1px;\r\n  cursor: pointer;\r\n  z-index: 1;\r\n}\r\n.layout-expand .panel-header,\r\n.layout-expand .panel-body {\r\n  background: #4e5a6c;\r\n  filter: none;\r\n  overflow: hidden;\r\n}\r\n.layout-expand .panel-header {\r\n  border-bottom-width: 0px;\r\n}\r\n.layout-split-proxy-h,\r\n.layout-split-proxy-v {\r\n  position: absolute;\r\n  font-size: 1px;\r\n  display: none;\r\n  z-index: 5;\r\n}\r\n.layout-split-proxy-h {\r\n  width: 5px;\r\n  cursor: e-resize;\r\n}\r\n.layout-split-proxy-v {\r\n  height: 5px;\r\n  cursor: n-resize;\r\n}\r\n.layout-mask {\r\n  position: absolute;\r\n  background: #fafafa;\r\n  filter: alpha(opacity=10);\r\n  opacity: 0.10;\r\n  z-index: 4;\r\n}\r\n.layout-button-up {\r\n  background: url(" + __webpack_require__(34) + ") no-repeat -16px -16px;\r\n}\r\n.layout-button-down {\r\n  background: url(" + __webpack_require__(34) + ") no-repeat -16px 0;\r\n}\r\n.layout-button-left {\r\n  background: url(" + __webpack_require__(34) + ") no-repeat 0 0;\r\n}\r\n.layout-button-right {\r\n  background: url(" + __webpack_require__(34) + ") no-repeat 0 -16px;\r\n}\r\n.layout-split-proxy-h,\r\n.layout-split-proxy-v {\r\n  background-color: #aac5e7;\r\n}\r\n.layout-split-north {\r\n  border-bottom:none;\r\n}\r\n.layout-split-south {\r\n  border-top:none;\r\n}\r\n.layout-split-east {\r\n  border-left:none;\r\n}\r\n.layout-split-west {\r\n  border-right:none\r\n}\r\n.layout-expand {\r\n  background-color: #E0ECFF;\r\n}\r\n.layout-expand-over {\r\n  background-color: #E0ECFF;\r\n}\r\n.tabs-container {\r\n  overflow: hidden;\r\n}\r\n.tabs-header {\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  border-bottom-width: 0;\r\n  position: relative;\r\n  padding: 0;\r\n  padding-top: 2px;\r\n  overflow: hidden;\r\n}\r\n.tabs-scroller-left,\r\n.tabs-scroller-right {\r\n  position: absolute;\r\n  top: auto;\r\n  bottom: 0;\r\n  width: 18px;\r\n  font-size: 1px;\r\n  display: none;\r\n  cursor: pointer;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n}\r\n.tabs-scroller-left {\r\n  left: 0;\r\n}\r\n.tabs-scroller-right {\r\n  right: 0;\r\n}\r\n.tabs-tool {\r\n  position: absolute;\r\n  bottom: 0;\r\n  padding: 1px;\r\n  overflow: hidden;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n}\r\n.tabs-header-plain .tabs-tool {\r\n  padding: 0 1px;\r\n}\r\n.tabs-wrap {\r\n  position: relative;\r\n  left: 0;\r\n  overflow: hidden;\r\n  width: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  /*background-color:background-color:#054d9f;\r\n\t\t\tbackground: -ms-linear-gradient(top, #054d9f 0, #021737 100%);\r\n    \t\tbackground: -webkit-linear-gradient(top, #054d9f 0, #021737 100%);\r\n\t\t\tbackground: -moz-linear-gradient(top, #054d9f 0, #021737 100%);\r\n\t\t\tbackground: -o-linear-gradient(top, #054d9f 0, #021737 100%);\r\n\t\t\tbackground: linear-gradient(to bottom, #054d9f 0, #021737 100%);\r\n\t\t\tbackground-repeat: repeat-x;\r\n\t\t\tfilter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#054d9f, endColorstr=#021737, GradientType=0))*/\r\n background:#A7A7A7;\r\n}\r\n.tabs-scrolling {\r\n  margin-left: 18px;\r\n  margin-right: 18px;\r\n}\r\n.tabs-disabled {\r\n  opacity: 0.3;\r\n  filter: alpha(opacity=30);\r\n}\r\n.tabs {\r\n  list-style-type: none;\r\n  height: 26px;\r\n  margin: 0px;\r\n  padding: 0px;\r\n  /*padding-left: 4px;*/\r\n  width: 50000px;\r\n  border-style: solid;\r\n  border-width: 0 0 1px 0;\r\n}\r\n.tabs li {\r\n  float: left;\r\n  display: inline-block;\r\n  margin: 0 4px -1px 0;\r\n  padding: 0;\r\n  position: relative;\r\n  border: 0;\r\n}\r\n.tabs li a.tabs-inner {\r\n  display: inline-block;\r\n  text-decoration: none;\r\n  margin: 0;\r\n  padding: 0 10px;\r\n  height: 25px;\r\n  line-height: 25px;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  border-radius:0 10px 0 0;\r\n}\r\n.tabs li.tabs-selected a.tabs-inner {\r\n  font-weight: bold;\r\n  outline: none;\r\n}\r\n.tabs li.tabs-selected a:hover.tabs-inner {\r\n  cursor: default;\r\n  pointer: default;\r\n}\r\n.tabs li a.tabs-close,\r\n.tabs-p-tool {\r\n  position: absolute;\r\n  font-size: 1px;\r\n  display: block;\r\n  height: 12px;\r\n  padding: 0;\r\n  top: 50%;\r\n  margin-top: -6px;\r\n  overflow: hidden;\r\n}\r\n.tabs li a.tabs-close {\r\n  width: 12px;\r\n  right: 5px;\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n}\r\n.tabs-p-tool {\r\n  right: 16px;\r\n}\r\n.tabs-p-tool a {\r\n  display: inline-block;\r\n  font-size: 1px;\r\n  width: 12px;\r\n  height: 12px;\r\n  margin: 0;\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n}\r\n.tabs li a:hover.tabs-close,\r\n.tabs-p-tool a:hover {\r\n  opacity: 1;\r\n  filter: alpha(opacity=100);\r\n  cursor: hand;\r\n  cursor: pointer;\r\n}\r\n.tabs-with-icon {\r\n  padding-left: 18px;\r\n}\r\n.tabs-icon {\r\n  position: absolute;\r\n  width: 16px;\r\n  height: 16px;\r\n  left: 10px;\r\n  top: 50%;\r\n  margin-top: -8px;\r\n}\r\n.tabs-title {\r\n  font-size: 12px;\r\n}\r\n.tabs-closable {\r\n  padding-right: 8px;\r\n}\r\n.tabs-panels {\r\n  margin: 0px;\r\n  padding: 0px;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  border-top-width: 0;\r\n  overflow: hidden;\r\n}\r\n.tabs-header-bottom {\r\n  border-width: 0 1px 1px 1px;\r\n  padding: 0 0 2px 0;\r\n}\r\n.tabs-header-bottom .tabs {\r\n  border-width: 1px 0 0 0;\r\n}\r\n.tabs-header-bottom .tabs li {\r\n  margin: -1px 4px 0 0;\r\n}\r\n.tabs-header-bottom .tabs li a.tabs-inner {\r\n  -moz-border-radius: 0 0 5px 5px;\r\n  -webkit-border-radius: 0 0 5px 5px;\r\n  border-radius: 0 0 5px 5px;\r\n}\r\n.tabs-header-bottom .tabs-tool {\r\n  top: 0;\r\n}\r\n.tabs-header-bottom .tabs-scroller-left,\r\n.tabs-header-bottom .tabs-scroller-right {\r\n  top: 0;\r\n  bottom: auto;\r\n}\r\n.tabs-panels-top {\r\n  border-width: 1px 1px 0 1px;\r\n}\r\n.tabs-header-left {\r\n  float: left;\r\n  border-width: 1px 0 1px 1px;\r\n  padding: 0;\r\n}\r\n.tabs-header-right {\r\n  float: right;\r\n  border-width: 1px 1px 1px 0;\r\n  padding: 0;\r\n}\r\n.tabs-header-left .tabs-wrap,\r\n.tabs-header-right .tabs-wrap {\r\n  height: 100%;\r\n}\r\n.tabs-header-left .tabs {\r\n  height: 100%;\r\n  padding: 4px 0 0 2px;\r\n  border-width: 0 1px 0 0;\r\n}\r\n.tabs-header-right .tabs {\r\n  height: 100%;\r\n  padding: 4px 2px 0 0;\r\n  border-width: 0 0 0 1px;\r\n}\r\n.tabs-header-left .tabs li,\r\n.tabs-header-right .tabs li {\r\n  display: block;\r\n  width: 100%;\r\n  position: relative;\r\n}\r\n.tabs-header-left .tabs li {\r\n  left: auto;\r\n  right: 0;\r\n  margin: 0 -1px 4px 0;\r\n  float: right;\r\n}\r\n.tabs-header-right .tabs li {\r\n  left: 0;\r\n  right: auto;\r\n  margin: 0 0 4px -1px;\r\n  float: left;\r\n}\r\n.tabs-justified li a.tabs-inner {\r\n  padding-left: 0;\r\n  padding-right: 0;\r\n}\r\n.tabs-header-left .tabs li a.tabs-inner {\r\n  display: block;\r\n  text-align: left;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  -moz-border-radius: 5px 0 0 5px;\r\n  -webkit-border-radius: 5px 0 0 5px;\r\n  border-radius: 5px 0 0 5px;\r\n}\r\n.tabs-header-right .tabs li a.tabs-inner {\r\n  display: block;\r\n  text-align: left;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  -moz-border-radius: 0 5px 5px 0;\r\n  -webkit-border-radius: 0 5px 5px 0;\r\n  border-radius: 0 5px 5px 0;\r\n}\r\n.tabs-panels-right {\r\n  float: right;\r\n  border-width: 1px 1px 1px 0;\r\n}\r\n.tabs-panels-left {\r\n  float: left;\r\n  border-width: 1px 0 1px 1px;\r\n}\r\n.tabs-header-noborder,\r\n.tabs-panels-noborder {\r\n  border: 0px;\r\n}\r\n.tabs-header-plain {\r\n  border: 0px;\r\n  background: transparent;\r\n}\r\n.tabs-pill {\r\n  padding-bottom: 3px;\r\n}\r\n.tabs-header-bottom .tabs-pill {\r\n  padding-top: 3px;\r\n  padding-bottom: 0;\r\n}\r\n.tabs-header-left .tabs-pill {\r\n  padding-right: 3px;\r\n}\r\n.tabs-header-right .tabs-pill {\r\n  padding-left: 3px;\r\n}\r\n.tabs-header .tabs-pill li a.tabs-inner {\r\n  -moz-border-radius: 5px 5px 5px 5px;\r\n  -webkit-border-radius: 5px 5px 5px 5px;\r\n  border-radius: 5px 5px 5px 5px;\r\n}\r\n.tabs-header-narrow,\r\n.tabs-header-narrow .tabs-narrow {\r\n  padding: 0;\r\n}\r\n.tabs-narrow li,\r\n.tabs-header-bottom .tabs-narrow li {\r\n  margin-left: 0;\r\n  margin-right: -1px;\r\n}\r\n.tabs-narrow li.tabs-last,\r\n.tabs-header-bottom .tabs-narrow li.tabs-last {\r\n  margin-right: 0;\r\n}\r\n.tabs-header-left .tabs-narrow,\r\n.tabs-header-right .tabs-narrow {\r\n  padding-top: 0;\r\n}\r\n.tabs-header-left .tabs-narrow li {\r\n  margin-bottom: -1px;\r\n  margin-right: -1px;\r\n}\r\n.tabs-header-left .tabs-narrow li.tabs-last,\r\n.tabs-header-right .tabs-narrow li.tabs-last {\r\n  margin-bottom: 0;\r\n}\r\n.tabs-header-right .tabs-narrow li {\r\n  margin-bottom: -1px;\r\n  margin-left: -1px;\r\n}\r\n.tabs-scroller-left {\r\n  background: #636363 url(" + __webpack_require__(35) + ") no-repeat 1px center;\r\n}\r\n.tabs-scroller-right {\r\n  background: #636363 url(" + __webpack_require__(35) + ") no-repeat -15px center;\r\n}\r\n/* .tabs li a.tabs-close {\r\n  background: url('../images/tabs_icons.png') no-repeat -34px center;\r\n} */\r\n.tabs li a.tabs-inner:hover {\r\n  /*background-color:#fefac1;\r\n\t\t\t\tbackground: -ms-linear-gradient(top, #fefac1 0, #e88a03 100%);\r\n\t\t\t\tbackground: -webkit-linear-gradient(top, #fefac1 0, #e88a03 100%);\r\n\t\t\t\tbackground: -moz-linear-gradient(top, #fefac1 0, #e88a03 100%);\r\n\t\t\t\tbackground: -o-linear-gradient(top, #fefac1 0, #e88a03 100%);\r\n\t\t\t\tbackground: linear-gradient(to bottom, #fefac1 0, #e88a03 100%);\r\n\t\t\t\tbackground-repeat: repeat-x;\r\n\t\t\t\tfilter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#fefac1, endColorstr=#e88a03, GradientType=0);\r\n\t\t\tcolor:#ffffff;\r\n\t\t\ttext-shadow:1px 1px 2px #000000;\r\n\t\t\tfont-weight: bold*/\r\n  background:#324D67;\r\n  color:#ffffff;\r\n\r\n}\r\n.tabs li.tabs-selected a.tabs-inner {\r\n  /*background-color:#021737;\r\n\t\t\tbackground: -ms-linear-gradient(top, #021737 0, #054d9f 100%);\r\n    \t\tbackground: -webkit-linear-gradient(top, #021737 0, #054d9f 100%);\r\n\t\t\tbackground: -moz-linear-gradient(top, #021737 0, #054d9f 100%);\r\n\t\t\tbackground: -o-linear-gradient(top, #021737 0, #054d9f 100%);\r\n\t\t\tbackground: linear-gradient(to bottom, #021737 0, #054d9f 100%);\r\n\t\t\tbackground-repeat: repeat-x;\r\n\t\t\tfilter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#021737, endColorstr=#054d9f, GradientType=0);\r\n\t\t\tcolor:#a4cfff;\r\n\t\t\ttext-shadow:1px 1px 2px #000000;\r\n\t\t\tfont-weight:bold*/\r\n    background:#324D67;\r\n  color:#ffffff;\r\n}\r\n.tabs-header-bottom .tabs li.tabs-selected a.tabs-inner {\r\n  background: -webkit-linear-gradient(top,#ffffff 0,#EFF5FF 100%);\r\n  background: -moz-linear-gradient(top,#ffffff 0,#EFF5FF 100%);\r\n  background: -o-linear-gradient(top,#ffffff 0,#EFF5FF 100%);\r\n  background: linear-gradient(to bottom,#ffffff 0,#EFF5FF 100%);\r\n  background-repeat: repeat-x;\r\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#ffffff,endColorstr=#EFF5FF,GradientType=0);\r\n\r\n}\r\n.tabs-header-left .tabs li.tabs-selected a.tabs-inner {\r\n  background: -webkit-linear-gradient(left,#EFF5FF 0,#ffffff 100%);\r\n  background: -moz-linear-gradient(left,#EFF5FF 0,#ffffff 100%);\r\n  background: -o-linear-gradient(left,#EFF5FF 0,#ffffff 100%);\r\n  background: linear-gradient(to right,#EFF5FF 0,#ffffff 100%);\r\n  background-repeat: repeat-y;\r\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#EFF5FF,endColorstr=#ffffff,GradientType=1);\r\n}\r\n.tabs-header-right .tabs li.tabs-selected a.tabs-inner {\r\n  background: -webkit-linear-gradient(left,#ffffff 0,#EFF5FF 100%);\r\n  background: -moz-linear-gradient(left,#ffffff 0,#EFF5FF 100%);\r\n  background: -o-linear-gradient(left,#ffffff 0,#EFF5FF 100%);\r\n  background: linear-gradient(to right,#ffffff 0,#EFF5FF 100%);\r\n  background-repeat: repeat-y;\r\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#ffffff,endColorstr=#EFF5FF,GradientType=1);\r\n}\r\n.tabs li a.tabs-inner {\r\n  /*background-color:#054d9f;\r\n\t\t\tbackground: -ms-linear-gradient(top, #054d9f 0, #021737 100%);\r\n    \t\tbackground: -webkit-linear-gradient(top, #054d9f 0, #021737 100%);\r\n\t\t\tbackground: -moz-linear-gradient(top, #054d9f 0, #021737 100%);\r\n\t\t\tbackground: -o-linear-gradient(top, #054d9f 0, #021737 100%);\r\n\t\t\tbackground: linear-gradient(to bottom, #054d9f 0, #021737 100%);\r\n\t\t\tbackground-repeat: repeat-x;\r\n\t\t\tfilter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#054d9f, endColorstr=#021737, GradientType=0);\r\n\t\t\tcolor:#a4cfff;\r\n\t\t\ttext-shadow:1px 1px 2px #000000;\r\n\t\t\tfont-weight:bold*/\r\n      height:35px !important;\r\n      line-height: 35px !important;\r\n  background:#768B9E;\r\n color:#ffffff;\r\n}\r\n.tabs-header,\r\n.tabs-tool {\r\n /*background-color:#00a138;\r\n\t\t\tbackground: -ms-linear-gradient(top, #00a138 0, #003617 100%);\r\n    \t\tbackground: -webkit-linear-gradient(top, #00a138 0, #003617 100%);\r\n\t\t\tbackground: -moz-linear-gradient(top, #00a138 0, #003617 100%);\r\n\t\t\tbackground: -o-linear-gradient(top, #00a138 0, #003617 100%);\r\n\t\t\tbackground: linear-gradient(to bottom, #00a138 0, #003617 100%);\r\n\t\t\tbackground-repeat: repeat-x;\r\n\t\t\tfilter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#00a138, endColorstr=#003617, GradientType=0)*/\r\n background:#A7A7A7;\r\n \r\n}\r\n.tabs-header-plain {\r\n  background: transparent;\r\n}\r\n.tabs-header,\r\n.tabs-scroller-left,\r\n.tabs-scroller-right,\r\n.tabs-tool,\r\n.tabs-header-bottom .tabs li.tabs-selected a.tabs-inner,\r\n.tabs-header-left .tabs li.tabs-selected a.tabs-inner,\r\n.tabs-header-right .tabs li.tabs-selected a.tabs-inner {\r\n\tborder:none\r\n}\r\n.tabs,\r\n.tabs-panels,\r\n.tabs li a.tabs-inner,\r\n.tabs li.tabs-selected a.tabs-inner{\r\n\tborder:none\r\n\t}\r\n.tabs-p-tool a:hover,\r\n.tabs li a:hover.tabs-close,\r\n.tabs-scroller-over {\r\n  background-color: #eaf2ff;\r\n}\r\n.tabs li.tabs-selected a.tabs-inner {\r\n\tborder:none\r\n}\r\n.tabs-header-bottom .tabs li.tabs-selected a.tabs-inner {\r\n  border-top: 1px solid #ffffff;\r\n}\r\n.tabs-header-left .tabs li.tabs-selected a.tabs-inner {\r\n  border-right: 1px solid #ffffff;\r\n}\r\n.tabs-header-right .tabs li.tabs-selected a.tabs-inner {\r\n  border-left: 1px solid #ffffff;\r\n}\r\n.tabs-header .tabs-pill li.tabs-selected a.tabs-inner {\r\n  background: #ffe48d;\r\n  color: #000000;\r\n  filter: none;\r\n  border-color: #95B8E7;\r\n}\r\n.datagrid .panel-body {\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\n.datagrid-view {\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n.datagrid-view1,\r\n.datagrid-view2 {\r\n  position: absolute;\r\n  overflow: hidden;\r\n  top: 0;\r\n}\r\n\r\n.datagrid-view2 {\r\n\tborder-right-color:#FFF\r\n\t}\r\n.datagrid-view1 {\r\n  left: 0;\r\n}\r\n.datagrid-view2 {\r\n  right: 0;\r\n}\r\n.datagrid-mask {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  opacity: 0.3;\r\n  filter: alpha(opacity=30);\r\n  display: none;\r\n}\r\n.datagrid-mask-msg {\r\n  position: absolute;\r\n  top: 50%;\r\n  margin-top: -20px;\r\n  padding: 10px 5px 10px 30px;\r\n  width: auto;\r\n  height: 16px;\r\n  border-width: 2px;\r\n  border-style: solid;\r\n  display: none;\r\n}\r\n.datagrid-sort-icon {\r\n  padding: 0;\r\n}\r\n.datagrid-toolbar {\r\n  height: auto;\r\n  padding: 1px 2px;\r\n  border-width: 0 0 1px 0;\r\n  border-style: solid;\r\n}\r\n.datagrid-btn-separator {\r\n  float: left;\r\n  height: 24px;\r\n  border-left: 1px solid #ccc;\r\n  border-right: 1px solid #fff;\r\n  margin: 2px 1px;\r\n}\r\n.datagrid .datagrid-pager {\r\n  display: block;\r\n  margin: 0;\r\n  border-width: 1px 0 0 0;\r\n  border-style: solid;\r\n}\r\n.datagrid .datagrid-pager-top {\r\n  border-width: 0 0 1px 0;\r\n}\r\n.datagrid-header {\r\n  overflow: hidden;\r\n  cursor: default;\r\n  border-width: 0 0 1px 0;\r\n  border-style: solid;\r\n}\r\n.datagrid-header-inner {\r\n  float: left;\r\n  width: 10000px;\r\n/*   border-top: 1px solid #fff; */\r\n  background-color: #81899c;\r\n}\r\n.datagrid-row {\r\n\tcolor:#000\r\n\t}\r\n/*单元格颜色变换*/\r\n.datagrid-row:nth-child(odd){\r\n\tbackground-color: #e5e5e5;\r\n}\r\n.datagrid-row:nth-child(even){\r\n\tbackground-color: #e0ecf7;\r\n}\r\n\r\n\r\n.datagrid-header td,\r\n.datagrid-body td,\r\n.datagrid-footer td {\r\n\tborder-bottom:1px #FFFFFF solid;\r\n\tborder-right:1px #FFFFFF solid;\r\n  margin: 0;\r\n  padding: 0;\r\n  height:29px;\r\n}\r\n.datagrid-cell,\r\n.datagrid-cell-group,\r\n.datagrid-header-rownumber,\r\n.datagrid-cell-rownumber {\r\n  margin: 0;\r\n  padding: 0 4px;\r\n  white-space: nowrap;\r\n  word-wrap: normal;\r\n  overflow: hidden;\r\n  height: 29px;\r\n  line-height: 29px;\r\n  font-size: 12px;\r\n}\r\n#datagrid-row-r1-2-0,.datagrid-body-inner .datagrid-row{\r\n  height:30px !important;\r\n}\r\n.datagrid-header .datagrid-cell {\r\n  height: auto;\r\n}\r\n.datagrid-header .datagrid-cell span {\r\n  font-size: 12px;\r\n  color:#fff;\r\n}\r\n.datagrid-cell-group {\r\n  text-align: center;\r\n}\r\n.datagrid-header-rownumber,\r\n.datagrid-cell-rownumber {\r\n  width: 25px;\r\n  text-align: center;\r\n  margin: 0;\r\n  padding: 0;\r\n  height:29px;\r\n}\r\n.datagrid-body {\r\n  margin: 0;\r\n  padding: 0;\r\n  overflow: auto;\r\n  zoom: 1;\r\n  background-color:#fff;\r\n}\r\n.datagrid-view1 .datagrid-body-inner {\r\n  padding-bottom: 20px;\r\n}\r\n.datagrid-view1 .datagrid-body {\r\n  overflow: hidden;\r\n}\r\n.datagrid-footer {\r\n  overflow: hidden;\r\n}\r\n.datagrid-footer-inner {\r\n  border-width: 1px 0 0 0;\r\n  border-style: solid;\r\n  width: 10000px;\r\n  float: left;\r\n}\r\n.datagrid-row-editing .datagrid-cell {\r\n  height: auto;\r\n}\r\n.datagrid-header-check,\r\n.datagrid-cell-check {\r\n  padding: 0;\r\n  width: 27px;\r\n  height: 18px;\r\n  font-size: 1px;\r\n  text-align: center;\r\n  overflow: hidden;\r\n}\r\n.datagrid-header-check input,\r\n.datagrid-cell-check input {\r\n  margin: 0;\r\n  padding: 0;\r\n  width: 15px;\r\n  height: 18px;\r\n}\r\n.datagrid-resize-proxy {\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 10000px;\r\n  top: 0;\r\n  cursor: e-resize;\r\n  display: none;\r\n}\r\n.datagrid-body .datagrid-editable {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n.datagrid-body .datagrid-editable table {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.datagrid-body .datagrid-editable td {\r\n  border: 0;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n.datagrid-view .datagrid-editable-input {\r\n  margin: 0;\r\n  padding: 2px 4px;\r\n  border: 1px solid #95B8E7;\r\n  font-size: 12px;\r\n  outline-style: none;\r\n  -moz-border-radius: 0 0 0 0;\r\n  -webkit-border-radius: 0 0 0 0;\r\n  border-radius: 0 0 0 0;\r\n}\r\n.datagrid-sort-desc .datagrid-sort-icon {\r\n  padding: 0 13px 0 0;\r\n  background: url(" + __webpack_require__(36) + ") no-repeat -16px center;\r\n}\r\n.datagrid-sort-asc .datagrid-sort-icon {\r\n  padding: 0 13px 0 0;\r\n  background: url(" + __webpack_require__(36) + ") no-repeat 0px center;\r\n}\r\n.datagrid-row-collapse {\r\n  background: url(" + __webpack_require__(36) + ") no-repeat -48px center;\r\n}\r\n.datagrid-row-expand {\r\n  background: url(" + __webpack_require__(36) + ") no-repeat -32px center;\r\n}\r\n.datagrid-mask-msg {\r\n  /*background: #ffffff url('../images/loading.gif') no-repeat scroll 5px center;*/\r\n}\r\n\r\n.datagrid-td-rownumber {\r\n  background-color: rgba(255,255,255,0.4);\r\n  color:#47626D;\r\n  font-weight:bold;\r\n  \r\n}\r\n\r\n.datagrid-header{\r\n\tbackground-color:rgba(255,255,255,0.3);\r\n\t color:#47626D;\r\n     font-weight:bold;\r\n\r\n\t}\r\n.datagrid-cell-rownumber {\r\n  color: #000000;\r\n}\r\n.datagrid-resize-proxy {\r\n  background: #aac5e7;\r\n}\r\n.datagrid-mask {\r\n  background: #ccc;\r\n}\r\n.datagrid-mask-msg {\r\n  border-color: #003617;\r\n}\r\n.datagrid-toolbar,\r\n.datagrid-pager {\r\n  background: #E5E5E5;\r\n}\r\n.datagrid-header,\r\n.datagrid-toolbar,\r\n.datagrid-pager,\r\n.datagrid-footer-inner {\r\n  border-color: #dddddd;\r\n}\r\n.datagrid-header td,\r\n.datagrid-body td,\r\n.datagrid-footer td {\r\n\r\n}\r\n.datagrid-htable,\r\n.datagrid-btable,\r\n.datagrid-ftable {\r\n  border-collapse: separate;\r\n}\r\n.datagrid-row-alt {\r\n  background: #fafafa;\r\n}\r\n.datagrid-row-over,\r\n.datagrid-header td.datagrid-header-over {\r\n  cursor: default;\r\n}\r\n.datagrid-row-selected {\r\n  background: #b0c6ff!important;\r\n  color: #0b5429;\r\n  text-shadow:1px 1px 2px #FFFFFF\r\n \r\n}\r\n.datagrid-row-editing .textbox,\r\n.datagrid-row-editing .textbox-text {\r\n  -moz-border-radius: 0 0 0 0;\r\n  -webkit-border-radius: 0 0 0 0;\r\n  border-radius: 0 0 0 0;\r\n}\r\n.propertygrid .datagrid-view1 .datagrid-body td {\r\n  padding-bottom: 1px;\r\n  border-width: 0 1px 0 0;\r\n}\r\n.propertygrid .datagrid-group {\r\n  height: 21px;\r\n  overflow: hidden;\r\n  border-width: 0 0 1px 0;\r\n  border-style: solid;\r\n}\r\n.propertygrid .datagrid-group span {\r\n  font-weight: bold;\r\n}\r\n.propertygrid .datagrid-view1 .datagrid-body td {\r\n  border-color: #dddddd;\r\n}\r\n.propertygrid .datagrid-view1 .datagrid-group {\r\n  border-color: #E0ECFF;\r\n}\r\n.propertygrid .datagrid-view2 .datagrid-group {\r\n  border-color: #dddddd;\r\n}\r\n.propertygrid .datagrid-group,\r\n.propertygrid .datagrid-view1 .datagrid-body,\r\n.propertygrid .datagrid-view1 .datagrid-row-over,\r\n.propertygrid .datagrid-view1 .datagrid-row-selected {\r\n  background: #E0ECFF!important;\r\n}\r\n.datalist .datagrid-header {\r\n  border-width: 0;\r\n}\r\n.datalist .datagrid-group,\r\n.m-list .m-list-group {\r\n  height: 25px;\r\n  line-height: 25px;\r\n  font-weight: bold;\r\n  overflow: hidden;\r\n  background-color: #efefef;\r\n  border-style: solid;\r\n  border-width: 0 0 1px 0;\r\n  border-color: #ccc;\r\n}\r\n.datalist .datagrid-group-expander {\r\n  display: none;\r\n}\r\n.datalist .datagrid-group-title {\r\n  padding: 0 4px;\r\n}\r\n.datalist .datagrid-btable {\r\n  width: 100%;\r\n  table-layout: fixed;\r\n}\r\n.datalist .datagrid-row td {\r\n  border-style: solid;\r\n  border-left-color: transparent;\r\n  border-right-color: transparent;\r\n  border-bottom-width: 0;\r\n}\r\n.datalist-lines .datagrid-row td {\r\n  border-bottom-width: 1px;\r\n}\r\n.datalist .datagrid-cell,\r\n.m-list li {\r\n  width: auto;\r\n  height: auto;\r\n  padding: 2px 4px;\r\n  line-height: 33px;\r\n  position: relative;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n}\r\n.datalist-link,\r\n.m-list li>a {\r\n  display: block;\r\n  position: relative;\r\n  cursor: pointer;\r\n  color: #000000;\r\n  text-decoration: none;\r\n  overflow: hidden;\r\n  margin: -2px -4px;\r\n  padding: 2px 4px;\r\n  padding-right: 16px;\r\n  line-height: 18px;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n}\r\n.datalist-link::after,\r\n.m-list li>a::after {\r\n  position: absolute;\r\n  display: block;\r\n  width: 8px;\r\n  height: 8px;\r\n  content: '';\r\n  right: 6px;\r\n  top: 50%;\r\n  margin-top: -4px;\r\n  border-style: solid;\r\n  border-width: 1px 1px 0 0;\r\n  -ms-transform: rotate(45deg);\r\n  -moz-transform: rotate(45deg);\r\n  -webkit-transform: rotate(45deg);\r\n  -o-transform: rotate(45deg);\r\n  transform: rotate(45deg);\r\n}\r\n.m-list {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\n.m-list li {\r\n  border-style: solid;\r\n  border-width: 0 0 1px 0;\r\n  border-color: #ccc;\r\n}\r\n.m-list li>a:hover {\r\n  background: #eaf2ff;\r\n  color: #000000;\r\n}\r\n.m-list .m-list-group {\r\n  padding: 0 4px;\r\n}\r\n.pagination {\r\n  zoom: 1;\r\n}\r\n.pagination table {\r\n  float: left;\r\n  height: 30px;\r\n}\r\n.pagination td {\r\n  border: 0;\r\n}\r\n.pagination-btn-separator {\r\n  float: left;\r\nheight: 24px;\r\nmargin: 3px 1px;\r\n}\r\n.pagination .pagination-num {\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  margin: 0 2px;\r\n  padding: 0px;\r\n  width: 2em;\r\n  height: 18px;\r\n  text-align:center;\r\n}\r\n.pagination-page-list {\r\n  margin: 0px 0px 0 10px;\r\n\tpadding: 1px 2px;\r\n\twidth: auto;\r\n\theight: 19px;\r\n}\r\n.pagination-info {\r\n  float: right;\r\n  margin: 0 6px 0 0;\r\n  padding: 0;\r\n  height: 30px;\r\n  line-height: 30px;\r\n  font-size: 12px;\r\n}\r\n.pagination span {\r\n  font-size: 12px;\r\ncolor: #000;\r\nline-height: 28px;\r\n}\r\n.pagination-link .l-btn-text {\r\n  width: 24px;\r\n  text-align: center;\r\n  margin: 0;\r\n}\r\n.pagination-first {\r\n  background: url(" + __webpack_require__(37) + ") no-repeat 0 center;\r\n}\r\n.pagination-prev {\r\n  background: url(" + __webpack_require__(37) + ") no-repeat -16px center;\r\n}\r\n.pagination-next {\r\n  background: url(" + __webpack_require__(37) + ") no-repeat -32px center;\r\n}\r\n.pagination-last {\r\n  background: url(" + __webpack_require__(37) + ") no-repeat -46px center;\r\n}\r\n.pagination-load {\r\n  background: url(" + __webpack_require__(37) + ") no-repeat -64px center;\r\n}\r\n/*.pagination-loading {\r\n  background: url('../images/loading.gif') no-repeat center center;\r\n}*/\r\n.pagination-page-list,\r\n.pagination .pagination-num {\r\n\r\n}\r\n.calendar {\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  padding: 0px;\r\n  overflow: hidden;\r\n}\r\n.calendar table {\r\n  table-layout: fixed;\r\n  border-collapse: separate;\r\n  font-size: 12px;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.calendar table td,\r\n.calendar table th {\r\n  font-size: 12px;\r\n}\r\n.calendar-noborder {\r\n  border: 0;\r\n}\r\n.calendar-header {\r\n  position: relative;\r\n  height: 22px;\r\n}\r\n.calendar-title {\r\n  text-align: center;\r\n  height: 22px;\r\n}\r\n.calendar-title span {\r\n  position: relative;\r\n  display: inline-block;\r\n  top: 2px;\r\n  padding: 0 3px;\r\n  height: 18px;\r\n  line-height: 18px;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n  -moz-border-radius: 5px 5px 5px 5px;\r\n  -webkit-border-radius: 5px 5px 5px 5px;\r\n  border-radius: 5px 5px 5px 5px;\r\n}\r\n.calendar-prevmonth,\r\n.calendar-nextmonth,\r\n.calendar-prevyear,\r\n.calendar-nextyear {\r\n  position: absolute;\r\n  top: 50%;\r\n  margin-top: -7px;\r\n  width: 14px;\r\n  height: 14px;\r\n  cursor: pointer;\r\n  font-size: 1px;\r\n  -moz-border-radius: 5px 5px 5px 5px;\r\n  -webkit-border-radius: 5px 5px 5px 5px;\r\n  border-radius: 5px 5px 5px 5px;\r\n}\r\n.calendar-prevmonth {\r\n  left: 20px;\r\n  background: url(" + __webpack_require__(38) + ") no-repeat -18px -2px;\r\n}\r\n.calendar-nextmonth {\r\n  right: 20px;\r\n  background: url(" + __webpack_require__(38) + ") no-repeat -34px -2px;\r\n}\r\n.calendar-prevyear {\r\n  left: 3px;\r\n  background: url(" + __webpack_require__(38) + ") no-repeat -1px -2px;\r\n}\r\n.calendar-nextyear {\r\n  right: 3px;\r\n  background: url(" + __webpack_require__(38) + ") no-repeat -49px -2px;\r\n}\r\n.calendar-body {\r\n  position: relative;\r\n}\r\n.calendar-body th,\r\n.calendar-body td {\r\n  text-align: center;\r\n}\r\n.calendar-day {\r\n  border: 0;\r\n  padding: 1px;\r\n  cursor: pointer;\r\n  -moz-border-radius: 5px 5px 5px 5px;\r\n  -webkit-border-radius: 5px 5px 5px 5px;\r\n  border-radius: 5px 5px 5px 5px;\r\n}\r\n.calendar-other-month {\r\n  opacity: 0.3;\r\n  filter: alpha(opacity=30);\r\n}\r\n.calendar-disabled {\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n  cursor: default;\r\n}\r\n.calendar-menu {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 180px;\r\n  height: 150px;\r\n  padding: 5px;\r\n  font-size: 12px;\r\n  display: none;\r\n  overflow: hidden;\r\n}\r\n.calendar-menu-year-inner {\r\n  text-align: center;\r\n  padding-bottom: 5px;\r\n}\r\n.calendar-menu-year {\r\n  width: 40px;\r\n  text-align: center;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  margin: 0;\r\n  padding: 2px;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n}\r\n.calendar-menu-prev,\r\n.calendar-menu-next {\r\n  display: inline-block;\r\n  width: 21px;\r\n  height: 21px;\r\n  vertical-align: top;\r\n  cursor: pointer;\r\n  -moz-border-radius: 5px 5px 5px 5px;\r\n  -webkit-border-radius: 5px 5px 5px 5px;\r\n  border-radius: 5px 5px 5px 5px;\r\n}\r\n.calendar-menu-prev {\r\n  margin-right: 10px;\r\n  background: url(" + __webpack_require__(38) + ") no-repeat 2px 2px;\r\n}\r\n.calendar-menu-next {\r\n  margin-left: 10px;\r\n  background: url(" + __webpack_require__(38) + ") no-repeat -45px 2px;\r\n}\r\n.calendar-menu-month {\r\n  text-align: center;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  -moz-border-radius: 5px 5px 5px 5px;\r\n  -webkit-border-radius: 5px 5px 5px 5px;\r\n  border-radius: 5px 5px 5px 5px;\r\n}\r\n.calendar-body th,\r\n.calendar-menu-month {\r\n  color: #4d4d4d;\r\n}\r\n.calendar-day {\r\n  color: #000000;\r\n}\r\n.calendar-sunday {\r\n  color: #CC2222;\r\n}\r\n.calendar-saturday {\r\n  color: #00ee00;\r\n}\r\n.calendar-today {\r\n  color: #0000ff;\r\n}\r\n.calendar-menu-year {\r\n  border-color: #95B8E7;\r\n}\r\n.calendar {\r\n  border-color: #95B8E7;\r\n}\r\n.calendar-header {\r\n  background: #4170A9;\r\n}\r\n.calendar-body,\r\n.calendar-menu {\r\n  background: #ffffff;\r\n}\r\n.calendar-body th {\r\n  background: #F4F4F4;\r\n  padding: 2px 0;\r\n}\r\n.calendar-hover,\r\n.calendar-nav-hover,\r\n.calendar-menu-hover {\r\n  background-color: #eaf2ff;\r\n  color: #000000;\r\n}\r\n.calendar-hover {\r\n  border: 1px solid #b7d2ff;\r\n  padding: 0;\r\n}\r\n.calendar-selected {\r\n  background-color: #ffe48d;\r\n  color: #000000;\r\n  border: 1px solid #ffab3f;\r\n  padding: 0;\r\n}\r\n.datebox-calendar-inner {\r\n  height: 180px;\r\n}\r\n.datebox-button {\r\n  height: 18px;\r\n  padding: 2px 5px;\r\n  text-align: center;\r\n}\r\n.datebox-button a {\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n}\r\n.datebox-button a:hover {\r\n  opacity: 1.0;\r\n  filter: alpha(opacity=100);\r\n}\r\n.datebox-current,\r\n.datebox-close {\r\n  float: left;\r\n}\r\n.datebox-close {\r\n  float: right;\r\n}\r\n.datebox .combo-arrow {\r\n  margin-right:2px !important;\r\n /* background-image: url('../../../PUBLIC/img/SCM-01.png');*/\r\n  background-position: center center;\r\n}\r\n.datebox-button {\r\n  background-color: #F4F4F4;\r\n}\r\n.datebox-button a {\r\n  color: #444;\r\n}\r\n.numberbox {\r\n  border: 1px solid #95B8E7;\r\n  margin: 0;\r\n  padding: 0 2px;\r\n  vertical-align: middle;\r\n}\r\n.textbox {\r\n  padding: 0;\r\n}\r\n.spinner {\r\n  display: inline-block;\r\n  white-space: nowrap;\r\n  margin: 0;\r\n  padding: 0;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  overflow: hidden;\r\n  vertical-align: middle;\r\n}\r\n.spinner .spinner-text {\r\n  font-size: 12px;\r\n  border: 0px;\r\n  margin: 0;\r\n  padding: 0 2px;\r\n  vertical-align: baseline;\r\n}\r\n.spinner-arrow {\r\n  display: inline-block;\r\n  overflow: hidden;\r\n  vertical-align: top;\r\n  margin: 0;\r\n  padding: 0;\r\n  opacity: 1.0;\r\n  filter: alpha(opacity=100);\r\n  width: 18px;\r\n}\r\n.spinner-arrow-up,\r\n.spinner-arrow-down {\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n  display: block;\r\n  font-size: 1px;\r\n  width: 18px;\r\n  height: 10px;\r\n  width: 100%;\r\n  height: 50%;\r\n  color: #444;\r\n  outline-style: none;\r\n}\r\n.spinner-arrow-hover {\r\n  background-color: #eaf2ff;\r\n  opacity: 1.0;\r\n  filter: alpha(opacity=100);\r\n}\r\n.spinner-arrow-up:hover,\r\n.spinner-arrow-down:hover {\r\n  opacity: 1.0;\r\n  filter: alpha(opacity=100);\r\n  background-color: #eaf2ff;\r\n}\r\n.textbox-icon-disabled .spinner-arrow-up:hover,\r\n.textbox-icon-disabled .spinner-arrow-down:hover {\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n  background-color: #E0ECFF;\r\n  cursor: default;\r\n}\r\n.spinner .textbox-icon-disabled {\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n}\r\n.spinner-arrow-up {\r\n  background: url(" + __webpack_require__(39) + ") no-repeat 1px center;\r\n}\r\n.spinner-arrow-down {\r\n  background: url(" + __webpack_require__(39) + ") no-repeat -15px center;\r\n}\r\n.spinner {\r\n}\r\n.progressbar {\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  -moz-border-radius: 5px 5px 5px 5px;\r\n  -webkit-border-radius: 5px 5px 5px 5px;\r\n  border-radius: 5px 5px 5px 5px;\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\n.progressbar-text {\r\n  text-align: center;\r\n  position: absolute;\r\n}\r\n.progressbar-value {\r\n  position: relative;\r\n  overflow: hidden;\r\n  width: 0;\r\n  -moz-border-radius: 5px 0 0 5px;\r\n  -webkit-border-radius: 5px 0 0 5px;\r\n  border-radius: 5px 0 0 5px;\r\n}\r\n.progressbar {\r\n  border-color: #95B8E7;\r\n}\r\n.progressbar-text {\r\n  color: #000000;\r\n  font-size: 12px;\r\n}\r\n.progressbar-value .progressbar-text {\r\n  background-color: #ffe48d;\r\n  color: #000000;\r\n}\r\n.searchbox {\r\n  display: inline-block;\r\n  white-space: nowrap;\r\n  margin: 0;\r\n  padding: 0;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  overflow: hidden;\r\n  vertical-align: middle;\r\n}\r\n.searchbox .searchbox-text {\r\n  font-size: 12px;\r\n  border: 0;\r\n  margin: 0;\r\n  padding: 0 2px;\r\n  vertical-align: top;\r\n}\r\n.searchbox .searchbox-prompt {\r\n  font-size: 12px;\r\n  color: #ccc;\r\n}\r\n.searchbox-button {\r\n  width: 18px;\r\n  height: 20px;\r\n  overflow: hidden;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  cursor: pointer;\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n}\r\n.searchbox-button-hover {\r\n  opacity: 1.0;\r\n  filter: alpha(opacity=100);\r\n}\r\n.searchbox .l-btn-plain {\r\n  border: 0;\r\n  padding: 0;\r\n  vertical-align: top;\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n  -moz-border-radius: 0 0 0 0;\r\n  -webkit-border-radius: 0 0 0 0;\r\n  border-radius: 0 0 0 0;\r\n}\r\n\r\n.searchbox a.m-btn-plain-active {\r\n  -moz-border-radius: 0 0 0 0;\r\n  -webkit-border-radius: 0 0 0 0;\r\n  border-radius: 0 0 0 0;\r\n}\r\n.searchbox .m-btn-active {\r\n  border-width: 0 1px 0 0;\r\n  -moz-border-radius: 0 0 0 0;\r\n  -webkit-border-radius: 0 0 0 0;\r\n  border-radius: 0 0 0 0;\r\n}\r\n.searchbox .textbox-button-right {\r\n  border-width: 0 0 0 1px;\r\n}\r\n.searchbox .textbox-button-left {\r\n  border-width: 0 1px 0 0;\r\n}\r\n.searchbox-button {\r\n  background: url(" + __webpack_require__(40) + ") no-repeat center center;\r\n}\r\n.searchbox {\r\n  border-color: #95B8E7;\r\n  background-color: #fff;\r\n}\r\n.searchbox .l-btn-plain {\r\n  background: #E0ECFF;\r\n}\r\n.searchbox .l-btn-plain-disabled,\r\n.searchbox .l-btn-plain-disabled:hover {\r\n  opacity: 0.5;\r\n  filter: alpha(opacity=50);\r\n}\r\n.textbox-invalid {\r\n  /* border-color: #ffa8a8; */\r\n  background-color: #fff3f3;\r\n}\r\n.slider-disabled {\r\n  opacity: 0.5;\r\n  filter: alpha(opacity=50);\r\n}\r\n.slider-h {\r\n  height: 22px;\r\n}\r\n.slider-v {\r\n  width: 22px;\r\n}\r\n.slider-inner {\r\n  position: relative;\r\n  height: 6px;\r\n  top: 7px;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  border-radius: 5px;\r\n}\r\n.slider-handle {\r\n  position: absolute;\r\n  display: block;\r\n  outline: none;\r\n  width: 20px;\r\n  height: 20px;\r\n  top: 50%;\r\n  margin-top: -10px;\r\n  margin-left: -10px;\r\n}\r\n.slider-tip {\r\n  position: absolute;\r\n  display: inline-block;\r\n  line-height: 12px;\r\n  font-size: 12px;\r\n  white-space: nowrap;\r\n  top: -22px;\r\n}\r\n.slider-rule {\r\n  position: relative;\r\n  top: 15px;\r\n}\r\n.slider-rule span {\r\n  position: absolute;\r\n  display: inline-block;\r\n  font-size: 0;\r\n  height: 5px;\r\n  border-width: 0 0 0 1px;\r\n  border-style: solid;\r\n}\r\n.slider-rulelabel {\r\n  position: relative;\r\n  top: 20px;\r\n}\r\n.slider-rulelabel span {\r\n  position: absolute;\r\n  display: inline-block;\r\n  font-size: 12px;\r\n}\r\n.slider-v .slider-inner {\r\n  width: 6px;\r\n  left: 7px;\r\n  top: 0;\r\n  float: left;\r\n}\r\n.slider-v .slider-handle {\r\n  left: 50%;\r\n  margin-top: -10px;\r\n}\r\n.slider-v .slider-tip {\r\n  left: -10px;\r\n  margin-top: -6px;\r\n}\r\n.slider-v .slider-rule {\r\n  float: left;\r\n  top: 0;\r\n  left: 16px;\r\n}\r\n.slider-v .slider-rule span {\r\n  width: 5px;\r\n  height: auto;\r\n  border-left: 0;\r\n  border-width: 1px 0 0 0;\r\n  border-style: solid;\r\n}\r\n.slider-v .slider-rulelabel {\r\n  float: left;\r\n  top: 0;\r\n  left: 23px;\r\n}\r\n.slider-handle {\r\n  background: url(" + __webpack_require__(41) + ") no-repeat;\r\n}\r\n.slider-inner {\r\n  border-color: #95B8E7;\r\n  background: #E0ECFF;\r\n}\r\n.slider-rule span {\r\n  border-color: #95B8E7;\r\n}\r\n.slider-rulelabel span {\r\n  color: #000000;\r\n}\r\n.menu {\r\n  position: absolute;\r\n  margin: 0;\r\n  padding: 2px;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  overflow: hidden;\r\n}\r\n.menu-inline {\r\n  position: relative;\r\n}\r\n.menu-item {\r\n  position: relative;\r\n  margin: 0;\r\n  padding: 0;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n}\r\n.menu-text {\r\n  height: 20px;\r\n  line-height: 20px;\r\n  float: left;\r\n  padding-left: 28px;\r\n}\r\n.menu-icon {\r\n  position: absolute;\r\n  width: 16px;\r\n  height: 16px;\r\n  left: 2px;\r\n  top: 50%;\r\n  margin-top: -8px;\r\n}\r\n.menu-rightarrow {\r\n  position: absolute;\r\n  width: 16px;\r\n  height: 16px;\r\n  right: 0;\r\n  top: 50%;\r\n  margin-top: -8px;\r\n}\r\n.menu-line {\r\n  position: absolute;\r\n  left: 26px;\r\n  top: 0;\r\n  height: 2000px;\r\n  font-size: 1px;\r\n}\r\n.menu-sep {\r\n  margin: 3px 0px 3px 25px;\r\n  font-size: 1px;\r\n}\r\n.menu-noline .menu-line {\r\n  display: none;\r\n}\r\n.menu-noline .menu-sep {\r\n  margin-left: 0;\r\n  margin-right: 0;\r\n}\r\n.menu-active {\r\n  -moz-border-radius: 5px 5px 5px 5px;\r\n  -webkit-border-radius: 5px 5px 5px 5px;\r\n  border-radius: 5px 5px 5px 5px;\r\n}\r\n.menu-item-disabled {\r\n  opacity: 0.5;\r\n  filter: alpha(opacity=50);\r\n  cursor: default;\r\n}\r\n.menu-text,\r\n.menu-text span {\r\n  font-size: 12px;\r\n}\r\n.menu-shadow {\r\n  position: absolute;\r\n  -moz-border-radius: 5px 5px 5px 5px;\r\n  -webkit-border-radius: 5px 5px 5px 5px;\r\n  border-radius: 5px 5px 5px 5px;\r\n  background: #ccc;\r\n  -moz-box-shadow: 2px 2px 3px #cccccc;\r\n  -webkit-box-shadow: 2px 2px 3px #cccccc;\r\n  box-shadow: 2px 2px 3px #cccccc;\r\n  filter: progid:DXImageTransform.Microsoft.Blur(pixelRadius=2,MakeShadow=false,ShadowOpacity=0.2);\r\n}\r\n.menu-rightarrow {\r\n  background: url(" + __webpack_require__(42) + ") no-repeat -32px center;\r\n}\r\n.menu-line {\r\n  border-left: 1px solid #ccc;\r\n  border-right: 1px solid #fff;\r\n}\r\n.menu-sep {\r\n  border-top: 1px solid #ccc;\r\n  border-bottom: 1px solid #fff;\r\n}\r\n.menu {\r\n  background-color: #fafafa;\r\n  border-color: #ddd;\r\n  color: #444;\r\n}\r\n.menu-content {\r\n  background: #ffffff;\r\n}\r\n.menu-item {\r\n  border-color: transparent;\r\n  _border-color: #fafafa;\r\n}\r\n.menu-active {\r\n  border-color: #b7d2ff;\r\n  color: #000000;\r\n  background: #eaf2ff;\r\n}\r\n.menu-active-disabled {\r\n  border-color: transparent;\r\n  background: transparent;\r\n  color: #444;\r\n}\r\n.m-btn-downarrow,\r\n.s-btn-downarrow {\r\n  display: inline-block;\r\n  position: absolute;\r\n  width: 16px;\r\n  height: 16px;\r\n  font-size: 1px;\r\n  right: 0;\r\n  top: 50%;\r\n  margin-top: -8px;\r\n}\r\n.m-btn-active,\r\n.s-btn-active {\r\n  background: #eaf2ff;\r\n  color: #000000;\r\n  border: 1px solid #b7d2ff;\r\n  filter: none;\r\n}\r\n.m-btn-plain-active,\r\n.s-btn-plain-active {\r\n  background: transparent;\r\n  padding: 0;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  -moz-border-radius: 5px 5px 5px 5px;\r\n  -webkit-border-radius: 5px 5px 5px 5px;\r\n  border-radius: 5px 5px 5px 5px;\r\n}\r\n.m-btn .l-btn-left .l-btn-text {\r\n  margin-right: 20px;\r\n}\r\n.m-btn .l-btn-icon-right .l-btn-text {\r\n  margin-right: 40px;\r\n}\r\n.m-btn .l-btn-icon-right .l-btn-icon {\r\n  right: 20px;\r\n}\r\n.m-btn .l-btn-icon-top .l-btn-text {\r\n  margin-right: 4px;\r\n  margin-bottom: 14px;\r\n}\r\n.m-btn .l-btn-icon-bottom .l-btn-text {\r\n  margin-right: 4px;\r\n  margin-bottom: 34px;\r\n}\r\n.m-btn .l-btn-icon-bottom .l-btn-icon {\r\n  top: auto;\r\n  bottom: 20px;\r\n}\r\n.m-btn .l-btn-icon-top .m-btn-downarrow,\r\n.m-btn .l-btn-icon-bottom .m-btn-downarrow {\r\n  top: auto;\r\n  bottom: 0px;\r\n  left: 50%;\r\n  margin-left: -8px;\r\n}\r\n.m-btn-line {\r\n  display: inline-block;\r\n  position: absolute;\r\n  font-size: 1px;\r\n  display: none;\r\n}\r\n.m-btn .l-btn-left .m-btn-line {\r\n  right: 0;\r\n  width: 16px;\r\n  height: 500px;\r\n  border-style: solid;\r\n  border-color: #aac5e7;\r\n  border-width: 0 0 0 1px;\r\n}\r\n.m-btn .l-btn-icon-top .m-btn-line,\r\n.m-btn .l-btn-icon-bottom .m-btn-line {\r\n  left: 0;\r\n  bottom: 0;\r\n  width: 500px;\r\n  height: 16px;\r\n  border-width: 1px 0 0 0;\r\n}\r\n.m-btn-large .l-btn-icon-right .l-btn-text {\r\n  margin-right: 56px;\r\n}\r\n.m-btn-large .l-btn-icon-bottom .l-btn-text {\r\n  margin-bottom: 50px;\r\n}\r\n.m-btn-downarrow,\r\n.s-btn-downarrow {\r\n  background: url(" + __webpack_require__(42) + ") no-repeat 0 center;\r\n}\r\n.m-btn-plain-active,\r\n.s-btn-plain-active {\r\n  border-color: #b7d2ff;\r\n  background-color: #eaf2ff;\r\n  color: #000000;\r\n}\r\n.s-btn:hover .m-btn-line,\r\n.s-btn-active .m-btn-line,\r\n.s-btn-plain-active .m-btn-line {\r\n  display: inline-block;\r\n}\r\n.l-btn:hover .s-btn-downarrow,\r\n.s-btn-active .s-btn-downarrow,\r\n.s-btn-plain-active .s-btn-downarrow {\r\n  border-style: solid;\r\n  border-color: #aac5e7;\r\n  border-width: 0 0 0 1px;\r\n}\r\n.messager-body {\r\n  padding: 15px 10px 10px 10px;\r\n  overflow: hidden;\r\n}\r\n.messager-button {\r\n  text-align: center;\r\n  padding-top: 15px;\r\n}\r\n.messager-button .l-btn {\r\n  width: 104px;\r\n  height:28px;\r\n  background-color: #64a1d7;\r\n  color:#fff;\r\n  font-size:14px;\r\n  outline: none;\r\n}\r\n.messager-button .l-btn:hover{background-color: #7ab936;}\r\n.messager-icon {\r\n  float: left;\r\n  width: 32px;\r\n  height: 32px;\r\n  margin: 0 10px 10px 0;\r\n}\r\n.messager-error {\r\n  background: url(" + __webpack_require__(43) + ") no-repeat scroll -64px 0;\r\n}\r\n.messager-info {\r\n  background: url(" + __webpack_require__(43) + ") no-repeat scroll 0 0;\r\n}\r\n.messager-question {\r\n  background: url(" + __webpack_require__(43) + ") no-repeat scroll -32px 0;\r\n}\r\n.messager-warning {\r\n  background: url(" + __webpack_require__(43) + ") no-repeat scroll -96px 0;\r\n}\r\n.messager-progress {\r\n  padding: 10px;\r\n}\r\n.messager-p-msg {\r\n  margin-bottom: 5px;\r\n}\r\n.messager-body .messager-input {\r\n  width: 100%;\r\n  padding: 1px 0;\r\n  border: 1px solid #95B8E7;\r\n}\r\n.tree {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style-type: none;\r\n}\r\n.tree li {\r\n  white-space: nowrap;\r\n}\r\n.tree li ul {\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n.tree-node {\r\n  height: 32px;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n}\r\n.tree-hit {\r\n  cursor: pointer;\r\n}\r\n\r\n#scmWestTree .tree-folder,\r\n#scmWestTree .tree-file,\r\n.tree-checkbox\r\n {\r\n  display: inline-block;\r\n  width: 24px;\r\n  height: 32px;\r\n  vertical-align: middle;\r\n  overflow: hidden;\r\n}\r\n\r\n#scmWestTree .tree-file,#scmWestTree .tree-folder{\r\n\tmargin-left:0px;\r\n\t}\r\n .tree-indent,.tree-expanded,\r\n.tree-collapsed {\r\n  display: none;\r\n  width: 24px;\r\n  height: 35px;\r\n  vertical-align: middle;\r\n  overflow: hidden;\r\n}\r\n\r\n.tree-file,.tree-folder{\r\n  display: none;\r\n  width: 24px;\r\n  height: 35px;\r\n  vertical-align: middle;\r\n  overflow: hidden;\r\n}\r\n.bluetree .tree-expanded {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -144px 0px;\r\n}\r\n.tree-expanded {\r\n /* background: url('../images/spinner_arrows.png') no-repeat center center;*/\r\n}\r\n.bluetree .tree-expanded-hover {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -50px 0px;\r\n}\r\n.tree-expanded-hover {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -50px 0px;*/\r\n}\r\n.bluetree .tree-collapsed {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -64px 0px;\r\n}\r\n.tree-collapsed {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat center center;*/\r\n}\r\n.bluetree .tree-collapsed-hover {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -32px 0px;\r\n}\r\n.tree-collapsed-hover {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -32px 0px;*/\r\n}\r\n.bluetree .tree-lines .tree-expanded,\r\n.bluetree .tree-lines .tree-root-first .tree-expanded {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -144px 0;\r\n}\r\n.tree-lines .tree-expanded,\r\n.tree-lines .tree-root-first .tree-expanded {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -144px 0;*/\r\n}\r\n.bluetree .tree-lines .tree-collapsed,\r\n.bluetree .tree-lines .tree-root-first .tree-collapsed {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -128px 0;\r\n}\r\n.tree-lines .tree-collapsed,\r\n.tree-lines .tree-root-first .tree-collapsed {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -128px 0;*/\r\n}\r\n.bluetree .tree-lines .tree-node-last .tree-expanded,\r\n.bluetree .tree-lines .tree-root-one .tree-expanded {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -80px 0;\r\n}\r\n.tree-lines .tree-node-last .tree-expanded,\r\n.tree-lines .tree-root-one .tree-expanded {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -80px 0;*/\r\n}\r\n.bluetree .tree-lines .tree-node-last .tree-collapsed,\r\n.bluetree .tree-lines .tree-root-one .tree-collapsed {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -64px 0;\r\n}\r\n.tree-lines .tree-node-last .tree-collapsed,\r\n.tree-lines .tree-root-one .tree-collapsed {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -64px 0;*/\r\n}\r\n.bluetree .tree-line {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -176px 0;\r\n}\r\n.tree-line {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -176px 0;*/\r\n}\r\n.bluetree .tree-join {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -192px 0;\r\n}\r\n.tree-join {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -192px 0;*/\r\n}\r\n.bluetree .tree-joinbottom {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -160px 0;\r\n}\r\n.tree-joinbottom {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -160px 0;*/\r\n}\r\n.bluetree .tree-folder {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -208px 0;\r\n}\r\n.tree-folder {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -208px 0;*/\r\n}\r\n.bluetree .tree-folder-open {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -224px 0;\r\n}\r\n.tree-folder-open {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -224px 0;*/\r\n}\r\n.bluetree .tree-file {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -240px 0;\r\n}\r\n.tree-file {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -240px 0;*/\r\n}\r\n/*.tree-loading {\r\n  background: url('../images/loading.gif') no-repeat center center;\r\n}*/\r\n.bluetree .tree-checkbox0 {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -208px -18px;\r\n}\r\n.tree-checkbox0 {\r\n  background: url(" + __webpack_require__(45) + ") no-repeat 8px 13px;\r\n}\r\n\r\n.bluetree .tree-checkbox1 {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -224px -18px;\r\n}\r\n.tree-checkbox1 {\r\n  background: url(" + __webpack_require__(46) + ") no-repeat 8px 13px;\r\n}\r\n.bluetree .tree-checkbox2 {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -240px -18px;\r\n}\r\n.tree-checkbox2 {\r\n  /*background: url('../images/spinner_arrows.png') no-repeat -240px -18px;*/\r\n}\r\n.bluetree .tree-title {\r\n  font-size: 12px;\r\n  display: inline-block;\r\n  text-decoration: none;\r\n  vertical-align: top;\r\n  white-space: nowrap;\r\n  padding: 0 2px;\r\n  height: 18px;\r\n  line-height: 18px;\r\n  color:#FFF\r\n}\r\n\r\n.tree-title {\r\n  font-size: 14px;\r\n  display: inline-block;\r\n  text-decoration: none;\r\n  vertical-align: middle;\r\n  white-space: nowrap;\r\n  padding-left: 5px;\r\n  height: 32px;\r\n  line-height: 32px;\r\n  color: #fff;\r\n}\r\n\r\n\r\n.tree-node-proxy {\r\n  font-size: 12px;\r\n  line-height: 20px;\r\n  padding: 0 2px 0 20px;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  z-index: 9900000;\r\n}\r\n.tree-dnd-icon {\r\n  display: inline-block;\r\n  position: absolute;\r\n  width: 16px;\r\n  height: 18px;\r\n  left: 2px;\r\n  top: 50%;\r\n  margin-top: -9px;\r\n}\r\n.tree-dnd-yes {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -256px 0;\r\n}\r\n.tree-dnd-no {\r\n  background: url(" + __webpack_require__(44) + ") no-repeat -256px -18px;\r\n}\r\n.tree-node-top {\r\n  border-top: 1px dotted red;\r\n}\r\n.tree-node-bottom {\r\n  border-bottom: 1px dotted red;\r\n}\r\n.tree-node-append .tree-title {\r\n  border: 1px dotted red;\r\n}\r\n.tree-editor {\r\n  border: 1px solid #ccc;\r\n  font-size: 12px;\r\n  height: 14px !important;\r\n  height: 18px;\r\n  line-height: 14px;\r\n  padding: 1px 2px;\r\n  width: 80px;\r\n  position: absolute;\r\n  top: 0;\r\n}\r\n.tree-node-proxy {\r\n  background-color: #ffffff;\r\n  color: #000000;\r\n  border-color: #95B8E7;\r\n}\r\n.tree-node-hover {\r\n  background: #344f6a;\r\n  color: #000000;\r\n}\r\n.tree-node-selected {\r\n  background: #2c60a9;\r\n  color: #000000;\r\n}\r\n.tree-node-hidden {\r\n  display: none;\r\n}\r\n.validatebox-invalid {\r\n  border-color: #ffa8a8;\r\n/*   background-color: #fff3f3; */\r\n  color: #000;\r\n}\r\n.tooltip {\r\n  position: absolute;\r\n  display: none;\r\n  z-index: 9900000;\r\n  outline: none;\r\n  opacity: 1;\r\n  filter: alpha(opacity=100);\r\n  padding: 5px;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  border-radius: 5px;\r\n  -moz-border-radius: 5px 5px 5px 5px;\r\n  -webkit-border-radius: 5px 5px 5px 5px;\r\n  border-radius: 5px 5px 5px 5px;\r\n}\r\n.tooltip-content {\r\n  font-size: 12px;\r\n}\r\n.tooltip-arrow-outer,\r\n.tooltip-arrow {\r\n  position: absolute;\r\n  width: 0;\r\n  height: 0;\r\n  line-height: 0;\r\n  font-size: 0;\r\n  border-style: solid;\r\n  border-width: 6px;\r\n  border-color: transparent;\r\n  _border-color: tomato;\r\n  _filter: chroma(color=tomato);\r\n}\r\n.tooltip-right .tooltip-arrow-outer {\r\n  left: 0;\r\n  top: 50%;\r\n  margin: -6px 0 0 -13px;\r\n}\r\n.tooltip-right .tooltip-arrow {\r\n  left: 0;\r\n  top: 50%;\r\n  margin: -6px 0 0 -12px;\r\n}\r\n.tooltip-left .tooltip-arrow-outer {\r\n  right: 0;\r\n  top: 50%;\r\n  margin: -6px -13px 0 0;\r\n}\r\n.tooltip-left .tooltip-arrow {\r\n  right: 0;\r\n  top: 50%;\r\n  margin: -6px -12px 0 0;\r\n}\r\n.tooltip-top .tooltip-arrow-outer {\r\n  bottom: 0;\r\n  left: 50%;\r\n  margin: 0 0 -13px -6px;\r\n}\r\n.tooltip-top .tooltip-arrow {\r\n  bottom: 0;\r\n  left: 50%;\r\n  margin: 0 0 -12px -6px;\r\n}\r\n.tooltip-bottom .tooltip-arrow-outer {\r\n  top: 0;\r\n  left: 50%;\r\n  margin: -13px 0 0 -6px;\r\n}\r\n.tooltip-bottom .tooltip-arrow {\r\n  top: 0;\r\n  left: 50%;\r\n  margin: -12px 0 0 -6px;\r\n}\r\n.tooltip {\r\n  background-color: #ffffff;\r\n  border-color: #95B8E7;\r\n  color: #000000;\r\n}\r\n.tooltip-right .tooltip-arrow-outer {\r\n  border-right-color: #95B8E7;\r\n}\r\n.tooltip-right .tooltip-arrow {\r\n  border-right-color: #ffffff;\r\n}\r\n.tooltip-left .tooltip-arrow-outer {\r\n  border-left-color: #95B8E7;\r\n}\r\n.tooltip-left .tooltip-arrow {\r\n  border-left-color: #ffffff;\r\n}\r\n.tooltip-top .tooltip-arrow-outer {\r\n  border-top-color: #95B8E7;\r\n}\r\n.tooltip-top .tooltip-arrow {\r\n  border-top-color: #ffffff;\r\n}\r\n.tooltip-bottom .tooltip-arrow-outer {\r\n  border-bottom-color: #95B8E7;\r\n}\r\n.tooltip-bottom .tooltip-arrow {\r\n  border-bottom-color: #ffffff;\r\n}\r\n/*隐藏表格页面的提示内容*/\r\n.pagination-info{ display: none}\t\r\n\r\n.tree-expanded, .tree-collapsed, .tree-folder, .tree-file, .tree-checkbox, .tree-indent {\r\n  display: inline-block;\r\n  width: 8px;\r\n  height: 18px;\r\n  vertical-align: top;\r\n  overflow: hidden;\r\n}\r\n.datagrid-row-over{\r\n  background-color: #b0c6ff !important;\r\n}\r\n.panel.combo-p{width:152px !important; border:1px solid #cdcdcd; border-top:none;}\r\n.pagination > table > tbody > tr > td > a {\r\n    margin-top: 2.5px;\r\n}\r\n.messager-body > div {\r\n    color: #47626D;\r\n    margin-top: 5px;\r\n}\r\n.layout-panel-west .panel-title {\r\n    font-size: 16px;\r\n}\r\n\r\n", ""]);

	// exports


/***/ },
/* 30 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "f692c402e7da18bfa7ee94dbddc0b787.png";

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "0e8eea9c45a9fbf5fee1ec639e324cfa.png";

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "986280c418f41dd89899f8976fdf09e9.png";

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "f96a2944c498a87b6d1ab7640e83a2fc.png";

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "b74a807fdd70ef64ce35663aa096f570.png";

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "10d5035982637e197b6ea02ebdc8e28a.png";

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "7c3eb3922090a0fc3942e0f2c82ed726.png";

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "959c5d4649612c7ab5361d71d83c1888.png";

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "e2a0843de7c9ccc1276c781136da3cd0.png";

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "07f55acc2ec2329b46a537379d5e208c.png";

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "07d648b31e3369ee1810e226ba5e91dc.png";

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "51254a9c2b40aea38758d654f4b6461e.png";

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "c1c7cc19a9481d08d8b42176562b473c.png";

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "b1c9f4a95b8600594ffdfb3da16d20cd.png";

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "02476f9a9533025010868424e5d5b64d.png";

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "28ac8b2498a6b42eb24a3757892904d6.png";

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _treeModule = __webpack_require__(49);

	var _treeModule2 = _interopRequireDefault(_treeModule);

	var _tableModule = __webpack_require__(64);

	var _tableModule2 = _interopRequireDefault(_tableModule);

	var _customerInformationManagerAddModule = __webpack_require__(76);

	var _customerInformationManagerAddModule2 = _interopRequireDefault(_customerInformationManagerAddModule);

	var _pms = __webpack_require__(81);

	var _pms2 = _interopRequireDefault(_pms);

	var _purgroupInformationManagerAddModule = __webpack_require__(86);

	var _purgroupInformationManagerAddModule2 = _interopRequireDefault(_purgroupInformationManagerAddModule);

	var _pms3 = __webpack_require__(91);

	var _pms4 = _interopRequireDefault(_pms3);

	var _commonBoxModule = __webpack_require__(96);

	var _commonBoxModule2 = _interopRequireDefault(_commonBoxModule);

	var _headModule = __webpack_require__(99);

	var _headModule2 = _interopRequireDefault(_headModule);

	var _popupModule = __webpack_require__(107);

	var _popupModule2 = _interopRequireDefault(_popupModule);

	var _commonBoxTree = __webpack_require__(112);

	var _commonBoxTree2 = _interopRequireDefault(_commonBoxTree);

	var _permissionModule = __webpack_require__(117);

	var _permissionModule2 = _interopRequireDefault(_permissionModule);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ComponentsModule = angular.module("components", [_treeModule2.default.name, _tableModule2.default.name, _customerInformationManagerAddModule2.default.name, _pms2.default.name, _purgroupInformationManagerAddModule2.default.name, _commonBoxModule2.default.name, _headModule2.default.name, _popupModule2.default.name, _pms4.default.name, _commonBoxTree2.default.name, _permissionModule2.default.name]);

	exports.default = ComponentsModule;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _tree = __webpack_require__(50);

	var _tree2 = _interopRequireDefault(_tree);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var treeModule = angular.module("scmTree", ['ngAnimate']).component("scmTree", _tree2.default);

	exports.default = treeModule;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _tree = __webpack_require__(51);

	var _tree2 = _interopRequireDefault(_tree);

	__webpack_require__(53);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var treeComponent = {
	    template: _tree2.default,
	    bindings: {
	        option: "<"
	    },
	    controller: function controller($scope, $rootScope, $compile, $element, $http, $log, $timeout, i18nService, $uibModal, ajaxService) {
	        //**************************左侧树*****************************
	        var tree = $scope.tree = [{
	            "id": "11",
	            "text": "首页",
	            "glyphicon": "glyphicon-home",
	            "closed": true,
	            "attributes": {
	                "url": "/INDEX/html/scmIndex.html",
	                "pId": "null"
	            },
	            "target": "_self"
	        }, {
	            "id": "3",
	            "text": "授权管理",
	            "glyphicon": "glyphicon-authorize",
	            "closed": true,
	            "attributes": {
	                "url": "",
	                "pId": "null"
	            },
	            "target": "_self",
	            "children": [{
	                "id": "36",
	                "text": "权限管理",
	                "identify": 'pms001',
	                "iconCls": "glyphicon-authority",
	                "state": "closed",
	                "attributes": {
	                    "url": "/CRM/CRM001/html/CRM001.html",
	                    "pId": "3"
	                },
	                "target": "_self"
	            }, {
	                "id": "37",
	                "text": "租户管理",
	                "identify": 'pms002',
	                "iconCls": "",
	                "state": "closed",
	                "attributes": {
	                    "url": "/CRM/CRM003/html/CRM003.html",
	                    "pId": "3"
	                },
	                "target": "_self"
	            }, {
	                "id": "38",
	                "text": "授权管理",
	                "identify": 'pms003',
	                "iconCls": "",
	                "state": "closed",
	                "attributes": {
	                    "url": "/CRM/CRM004/html/CRM004.html",
	                    "pId": "3"
	                },
	                "target": "_self"
	            }]
	        }, {
	            "id": "3",
	            "text": "权限管理",
	            "glyphicon": "glyphicon-authority",
	            "closed": true,
	            "attributes": {
	                "url": "",
	                "pId": "null"
	            },
	            "target": "_self",
	            "children": [{
	                "id": "36",
	                "text": "客户信息管理",
	                "identify": 'pms004',
	                "iconCls": "",
	                "state": "closed",
	                "attributes": {
	                    "url": "/CRM/CRM001/html/CRM001.html",
	                    "pId": "3"
	                },
	                "target": "_self"
	            }, {
	                "id": "37",
	                "text": "客户联系人管理",
	                "identify": 'pms005',
	                "iconCls": "",
	                "state": "closed",
	                "attributes": {
	                    "url": "/CRM/CRM003/html/CRM003.html",
	                    "pId": "3"
	                },
	                "target": "_self"
	            }, {
	                "id": "38",
	                "text": "销售合同管理",
	                "identify": 'pms006',
	                "iconCls": "",
	                "state": "closed",
	                "attributes": {
	                    "url": "/CRM/CRM004/html/CRM004.html",
	                    "pId": "3"
	                },
	                "target": "_self"
	            }, {
	                "id": "39",
	                "text": "销售报价管理",
	                "identify": 'pms007',
	                "iconCls": "",
	                "state": "closed",
	                "attributes": {
	                    "url": "/CRM/CRM005/html/CRM005.html",
	                    "pId": "3"
	                },
	                "target": "_self"
	            }]
	        }];
	        $scope.ID = 1;
	        $scope.tabs = [{
	            page: {
	                id: 1,
	                type: 2, //定义基本页面的模式，默认且大多数情况下为1,首页为1
	                identify: "home", //页面的标识，标识页面是哪一个页面
	                title: '首页',
	                isActive: true
	            }
	        }];
	        $scope.currentTabId = '1';
	        $scope.onClickTab = function (id) {
	            $scope.currentTabId = id;
	        };
	        $scope.isActiveTab = function (tabId) {
	            return tabId == $scope.currentTabId;
	        };
	        $scope.addTab = function (options) {
	            var tab = {};
	            $scope.ID++;
	            $scope.tabs.forEach(function (res) {
	                res.page.isActive = false;
	            });
	            $scope.currentTabId = $scope.ID;
	            tab.page = {
	                id: $scope.ID,
	                type: options.identify == 'home' ? 2 : 1, //定义基本页面的模式，默认且大多数情况下为1,首页为2；
	                identify: options.identify, //页面的标识，标识页面是哪一个页面
	                title: options.title,
	                isActive: true
	            };
	            $scope.tabs.push(tab);
	            $scope.$broadcast("getTabId", $scope.ID);
	        };
	        $scope.delTab = function (id) {
	            $scope.tabs = $scope.tabs.map(function (tab) {
	                if (tab.page.id != id) {
	                    return tab;
	                } else {
	                    if ($scope.currentTabId == id) {
	                        return 'next';
	                    } else {
	                        return null;
	                    }
	                }
	            });
	            for (var i = 0; i < $scope.tabs.length; i++) {
	                if ($scope.tabs[i] == null) {
	                    $scope.tabs.splice(i, 1);
	                } else if ($scope.tabs[i] == 'next') {
	                    if (i + 1 < $scope.tabs.length) {
	                        $scope.currentTabId = $scope.tabs[i + 1].page.id;
	                    } else if (i + 1 == $scope.tabs.length && $scope.tabs[0] != 'next') {
	                        $scope.currentTabId = $scope.tabs[i - 1].page.id;
	                    }
	                    $scope.tabs.splice(i, 1);
	                }
	            }
	        };
	        $scope.slideW = 0;
	        $scope.tabLeft = 234;
	        $scope.tabNav = 0;
	        $scope.showShade = false;
	        $scope.treeSlide = function () {
	            if ($scope.slideW == 0) {
	                //收缩左侧树的配置
	                $scope.slideW = -184;
	                $scope.tabLeft = 50;
	                $scope.tabNav = 184;
	                $scope.showShade = true;
	            } else {
	                //展开左侧树的配置
	                $scope.slideW = 0;
	                $scope.tabLeft = 234;
	                $scope.tabNav = 0;
	                $scope.showShade = false;
	            }
	        };
	        $scope.showPushBtn = false;
	        $scope.mouseIn = function () {
	            $scope.showPushBtn = true;
	        };
	        $scope.mouseOut = function () {
	            $scope.showPushBtn = false;
	        };
	    }
	};
	exports.default = treeComponent;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div class=\"slidePanel\"  ng-mouseenter=\"mouseIn()\" ng-mouseleave=\"mouseOut()\" style=\"transition:all linear 0.5s;width:234px;height:100%;position:absolute;left:{{slideW}}px\">\n        <div id=\"pushBtn\" ng-click=\"treeSlide()\" ng-show=\"showPushBtn\" style=\"z-index:1000;\"><span class=\"inpush\"></span><span class=\"inpush\"></span></div>\n        <div class=\"user\">\n            <div class=\"userphoto\"></div>\n            <div class=\"username\"><span>王先森</span></div>\n        </div>\n        <div id=\"nav\">\n            <div class=\"panel-body\">\n                <div class=\"tree\">\n                    <ul class=\"nav nav-pills nav-stacked\">\n                        <li ng-repeat=\"item in tree\" ng-class=\"{slideli:item.closed==false}\">\n                            <div ng-if=\"$index == 0\" ng-click=\"addTab({title:item.text,identify:'home'})\">\n                                <span class=\"glyphicon\" ng-class=\"item.glyphicon\" ></span>\n                                <a>{{item.text}}</a>\n                            </div>\n                            <div ng-if=\"$index > 0\" ng-click=\"item.closed=!item.closed\">\n                                <span class=\"glyphicon\" ng-class=\"item.glyphicon\" ></span>\n                                <a>{{item.text}}</a>\n                                <span class=\"glyphicon rightIcon\" ng-class=\" item.closed ? 'glyphicon-chevron-down' : 'glyphicon-chevron-up'\" ng-if=\"item.children != undefined\"></span>\n                            </div>\n                            <ul ng-hide=\"item.closed\" class=\"slideDown\">\n                                <li ng-repeat=\"childItem in item.children\" ng-class=\"{closed:false}\" ng-click=\"addTab({title:childItem.text,identify:childItem.identify})\">\n                                    <a>{{childItem.text}}</a>\n                                </li>\n                            </ul>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <br style=\"clear:both;\"/>\n        </div>\n</div>\n<div id=\"slideShade\" ng-class=\"{showS:showShade,hideS:!showShade}\" ng-mouseenter=\"mouseIn()\" ng-mouseleave=\"mouseOut()\" style=\"transition:all linear 0.5s;\"></div>\n    <div id=\"tabsWrapper\" class=\"\" style=\"transition:all linear 0.5s;width:100%;float:left;padding-left:{{tabLeft}}px;\">\n        <ul class=\"nav nav-tabs\" id=\"tabs\" style=\"transition:all linear 0.5s;padding-left:{{tabNav}}px;\">\n            <li ng-repeat=\"tab in tabs\" ng-class=\"{active:isActiveTab(tab.page.id)}\">\n                <a href='#' data-toggle='tab' aria-expanded='true' ng-click=\"onClickTab(tab.page.id)\">{{tab.page.title}}<span ng-if=\"$index != 0\"ng-click=\"delTab(tab.page.id)\" class=\"delIcon\"></span></a>\n            </li>\n        </ul>\n        <div class=\"tab-content\" id=\"tabContent\" style=\"box-sizing:border-box;\">\n                <div ng-repeat=\"tab in tabs\" class='tab-pane' ng-class=\"{active:isActiveTab(tab.page.id)}\">\n                    <div id=\"{{tab.page.id}}\" class=\"tab-pane fade in active\">\n                        <div ng-if=\"tab.page.type == 1\" id=\"tableIf\">\n                            <scm-table></scm-table>\n                        </div>\n                        <div ng-if=\"tab.page.type == 2\" id=\"homeIf\">\n                            <div id=\"home\">\n                                <img src=\"" + __webpack_require__(52) + "\">\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n";

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "82ffa4a1eb8e95978b69750083b27e12.png";

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(54);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(47)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept(54, function() {
				var newContent = __webpack_require__(54);
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(30)();
	// imports


	// module
	exports.push([module.id, ".user {\n  position: absolute;\n  width: 100%;\n  height: 150px;\n  background: #39495C;\n  padding-top: 30px; }\n  .user .userphoto {\n    width: 80px;\n    height: 80px;\n    margin: 0 auto;\n    border-radius: 50%;\n    background: url(" + __webpack_require__(55) + ");\n    background-size: 100% 100%; }\n  .user .username {\n    font-size: 16px;\n    color: #fefefe;\n    font-family: \"Microsoft YaHei[Regular]\";\n    margin-top: 15px; }\n    .user .username span {\n      display: block;\n      text-align: center;\n      margin: auto; }\n\n.tree {\n  font-size: 16px;\n  color: #ccc; }\n  .tree .nav > li {\n    padding-left: 22px;\n    padding-right: 22px; }\n  .tree li {\n    margin: 0 !important;\n    list-style: none;\n    cursor: pointer;\n    padding-top: 5px !important;\n    padding-bottom: 5px !important; }\n    .tree li ul {\n      padding-left: 20px; }\n    .tree li .rightIcon {\n      position: absolute;\n      top: 8px;\n      right: 30px; }\n    .tree li a {\n      color: #ccc;\n      text-decoration: none; }\n      .tree li a:hover {\n        color: #fff; }\n\n#nav {\n  height: 100%;\n  padding-top: 150px; }\n  #nav .panel-body {\n    background: #39495C;\n    height: 100%; }\n\n.slideli {\n  background: #3B4553; }\n\n#tabsWrapper {\n  margin-top: -29px !important;\n  height: 100%; }\n  #tabsWrapper #tabs li {\n    height: 29px; }\n  #tabsWrapper .nav-tabs {\n    border: 0px; }\n  #tabsWrapper .nav li {\n    padding: 5px 35px; }\n    #tabsWrapper .nav li a {\n      font-size: 16px;\n      color: #2a3542;\n      font-family: \"Microsoft YaHei[Regular]\";\n      border: 0px;\n      padding: 0 !important;\n      text-align: center;\n      background: transparent; }\n  #tabsWrapper .nav li.active {\n    background: url(" + __webpack_require__(56) + ");\n    background-size: 100% 100%; }\n  #tabsWrapper .tab-content {\n    background: #E8E9EE;\n    padding: 10px 0 0 10px;\n    height: 100%; }\n    #tabsWrapper .tab-content .tab-pane {\n      background: #fff;\n      height: 100%; }\n\n.delIcon {\n  display: inline-block;\n  width: 15px;\n  height: 15px;\n  background: url(" + __webpack_require__(57) + ");\n  background-size: 100% 100%;\n  position: relative;\n  top: 3px;\n  left: 8px; }\n\n#homeIf {\n  width: 100%;\n  height: 100%; }\n  #homeIf #home {\n    width: 100%;\n    height: 100%;\n    background-size: 100%;\n    background: url(" + __webpack_require__(58) + ") no-repeat;\n    background-color: #FAFAFA; }\n    #homeIf #home img {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      margin-top: -81px;\n      margin-left: -142px; }\n\n#tableIf {\n  width: 100%;\n  height: 100%; }\n\n#pushBtn, #slideBtn {\n  width: 29px;\n  height: 66px;\n  position: absolute;\n  cursor: pointer;\n  top: 50%;\n  left: 100%;\n  margin-left: -1px;\n  background: url(" + __webpack_require__(59) + ");\n  background-size: 100% 100%; }\n  #pushBtn .inpush, #slideBtn .inpush {\n    background: url(" + __webpack_require__(60) + ");\n    background-size: 100% 100%;\n    width: 12px;\n    height: 40px;\n    display: inline-block;\n    position: absolute;\n    top: 12px; }\n  #pushBtn .inpush:nth-of-type(1), #slideBtn .inpush:nth-of-type(1) {\n    left: 3px; }\n  #pushBtn .inpush:nth-of-type(2), #slideBtn .inpush:nth-of-type(2) {\n    left: 12px; }\n\n#slideShade {\n  height: 100%;\n  background: url(" + __webpack_require__(61) + ");\n  background-size: 100% 100%;\n  position: absolute;\n  top: 0;\n  left: 0; }\n\n.nav .slideDown {\n  height: 100px;\n  transition: height linear 0.5s;\n  overflow: hidden; }\n\n.nav .ng-hide {\n  height: 0; }\n\n.hideS {\n  animation-name: fadeOut;\n  animation-duration: 0;\n  animation-delay: 0;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  /*Safari and Chrome*/\n  -webkit-animation-name: fadeOut;\n  -webkit-animation-duration: 0;\n  -webkit-animation-delay: 0;\n  -webkit-animation-iteration-count: 1;\n  -webkit-animation-fill-mode: forwards; }\n\n.showS {\n  animation-name: fadeIn;\n  animation-duration: 0;\n  animation-delay: 0.5s;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  /*Safari and Chrome*/\n  -webkit-animation-name: fadeIn;\n  -webkit-animation-duration: 0;\n  -webkit-animation-delay: 0.5s;\n  -webkit-animation-iteration-count: 1;\n  -webkit-animation-fill-mode: forwards; }\n\n@-webkit-keyframes fadeOut {\n  0% {\n    width: 65px; }\n  100% {\n    width: 0; } }\n\n@keyframes fadeOut {\n  0% {\n    width: 65px; }\n  100% {\n    width: 0; } }\n\n@-webkit-keyframes fadeIn {\n  0% {\n    width: 0; }\n  100% {\n    width: 65px; } }\n\n@keyframes fadeIn {\n  0% {\n    width: 0; }\n  100% {\n    width: 65px; } }\n\n.glyphicon-authority:before, .glyphicon-authorize:before {\n  content: '';\n  display: block;\n  width: 16px;\n  height: 16px; }\n\n.glyphicon-authority:before, .glyphicon-authorize:before {\n  background: url(" + __webpack_require__(62) + ");\n  background-size: 100% 100%; }\n\n.glyphicon-authorize:before {\n  background: url(" + __webpack_require__(63) + ");\n  background-size: 100% 100%; }\n", ""]);

	// exports


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "b70690d8eefacd4761b86afe4868d190.jpg";

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "5c51d4a001ca55bf73e1b354bd1957f4.png";

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "d999ce0f4acc3e2a30f6a504428e7d69.png";

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "e45a096cc37df4ffac8040878b1d6b17.png";

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "7a8af7a3a6c20c634a189d8882acd6ed.png";

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "a8e96811d1e483f6a425a89e1a199522.png";

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "c5c0ef750bd9d89511b1bd9ea2a1ea67.png";

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "0dfe2b4fe1ec3962f8332d0c4037b6eb.png";

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "97ac8e78d825e0b2329f5015263dd2f2.png";

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _table = __webpack_require__(65);

	var _table2 = _interopRequireDefault(_table);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var tableModule = angular.module("scmTable", ['ui.grid', 'ui.grid.edit', 'ui.grid.selection', 'ui.grid.cellNav', 'ui.grid.pagination']).component("scmTable", _table2.default);

	exports.default = tableModule;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _table = __webpack_require__(66);

	var _table2 = _interopRequireDefault(_table);

	var _public_var = __webpack_require__(67);

	var _public = __webpack_require__(68);

	var _jqueryEasyui = __webpack_require__(69);

	var _jqueryEasyui2 = _interopRequireDefault(_jqueryEasyui);

	var _global_val = __webpack_require__(70);

	__webpack_require__(71);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var tableComponent = {
	    template: _table2.default,
	    easy: _jqueryEasyui2.default,
	    bindings: {
	        option: "<"
	    },
	    controller: function controller($scope, $http, $log, $timeout, i18nService, $uibModal, ajaxService) {
	        $scope.tab = $scope.$parent.$parent.tab;
	        $scope.tag = 1;
	        $scope.panenldialog = false;
	        if ($scope.tab.page.identify == "pms001") {
	            //publicVar.Columns.pms001.pop({ field: 'APPROVED_TIME', title: '操作', width: 150, align: 'center', formatter: formatOpar });
	            //publicVar.Columns.pms001.push({ field: 'APPROVED_TIME', title: '操作', width: 150, align: 'center', formatter: formatOpar });
	            var url = _public_var.publicVar.mainUrl.pms001,
	                column = _public_var.publicVar.pms001.columns,
	                list_param = _public.publicFunction.deepCopy(_public_var.publicVar.param),
	                tableAttr = _public_var.publicVar.pms001;
	        } else if ($scope.tab.page.identify == "pms002") {
	            var url = _public_var.publicVar.mainUrl.pms002,
	                column = _public_var.publicVar.Columns.pms002,
	                list_param = _public.publicFunction.deepCopy(_public_var.publicVar.param);
	            tableAttr = _public_var.publicVar.pms002;
	        } else if ($scope.tab.page.identify == "pms003") {
	            var url = _public_var.publicVar.mainUrl.pms003,
	                column = _public_var.publicVar.Columns.pms003,
	                list_param = _public.publicFunction.deepCopy(_public_var.publicVar.param);
	            tableAttr = _public_var.publicVar.pms003;
	        }
	        initTable(url, column, list_param);
	        getCondProperty(tableAttr, list_param);
	        /**
	         * grid API 事件
	         * @param gridApi
	         */
	        // $scope.gridOptions.onRegisterApi = function(gridApi){
	        //     /**
	        //      * select 选择事件
	        //      */
	        //     gridApi.selection.on.rowSelectionChanged($scope,function(row){
	        //         if(row.isSelected){
	        //             this.selectRows.push(row);
	        //         }else{
	        //             if(this.selectRows.indexOf(row) !== -1){
	        //                 this.selectRows.splice(this.selectRows.indexOf(row),1);
	        //             }
	        //         }
	        //     });
	        //
	        //     /**
	        //      * 分页click事件
	        //      */
	        //     gridApi.pagination.on.paginationChanged($scope,function(newPage, pageSize) {
	        //         refreshTable(newPage,$scope.gridOptions.paginationPageSize,publicVar.interfaceUrl.tenantMgt.get,publicVar.param);
	        //     });
	        //
	        // };

	        /**
	         * 页面加载数据
	         * @param newPage 当前页面
	         * @param pageSize 显示行数
	         * @param href      路径
	         * @param param     请求参数
	         */
	        function initTable(href, column, param) {
	            // $scope.loadFlag=false;
	            if (param) {
	                ajaxService.getAjaxPost(href, param).then(function (res) {
	                    $scope.refreshTable(res.data, column);

	                    /*$("#"+$scope.tab.page.id+' #treeGrid').treegrid({
	                         onDblClickRow : function(field,row){
	                             $scope.$apply(function(){
	                                 $scope.panenldialog=true;
	                             })
	                              $scope.$broadcast("detaildialog",{
	                                 boxContent:CommonComponentBox["detaildialog"],
	                                 boxdata:field,
	                             });
	                           }
	                      });*/
	                });
	            }
	            $scope.loadFlag = true;
	        };

	        /*function formatOpar(val, row, index) {
	            let s = '<a href="#" mce_href="#" style="color:blue" onclick="pmsclone(\'' + index + '\')" >克隆</a> ';
	            let d = '<a href="#" mce_href="#" style="color:blue" onclick="pmsedit(\'' + index + '\')">编辑</a> ';
	            return s + d;
	        }*/

	        $scope.mypanel = false;
	        $scope.$on("cancel", function (e, val) {
	            $scope.mypanel = !val;
	        });
	        $scope.$on("toparent-refresh", function (e, data) {
	            initTable(data.href, data.column, data.param);
	        });

	        /**
	         * 新增 function
	         */
	        $scope.add = function () {
	            $scope.$broadcast("pup_add", {
	                "title": "权限修改",
	                "buttonType": "add"
	            });
	            $scope.mypanel = true;
	        };
	        /**
	         * 修改 function
	         */
	        $scope.modify = function () {
	            var url = tableAttr.save;
	            var _param = { "records": [] };
	            var rows = $("#treeGrid").treegrid("getSelections");
	            if (rows.length == 1) {
	                $scope.$broadcast("setModifyData", { "modifyData": rows[0],
	                    "title": "权限修改",
	                    "buttonType": "modify"
	                });
	                $scope.mypanel = true;
	                $scope.$on("getModifyData", function (e, row) {
	                    if (row) {
	                        $scope.mypanel = false;
	                        _param.records.push(row);
	                        ajaxService.getAjaxPost(url, _param).then(function (res) {
	                            initTable(tableAttr.getList, tableAttr.columns, list_param);
	                            alert(res.retMsg);
	                        });
	                    }
	                });
	            } else if (rows.length > 1) {
	                alert("不能同时修改多条数据！");
	            } else if (rows.length < 1) {
	                alert("请选择一条数据修改！");
	            }
	        };

	        /**
	         * 模糊查询 function
	         */
	        $scope.fuzzySearch = function () {
	            var column = _public_var.publicVar.Columns.pms001,
	                param = _public.publicFunction.deepCopy(_public_var.publicVar.param),
	                tableAttr = _public_var.publicVar.pms001,
	                value = "";
	            if ($scope.tag == 1) {
	                value = $scope.searchSelectValue;
	            } else if ($scope.tag == 3) {
	                value = $scope.selectName.id;
	            }

	            if (value) {
	                console.log(555);
	                param.conditions = [{ "field": $scope.searchSelectType1.code, "value": value, "option": $scope.searchSelectType2.id }];
	                param.cutomerParam = "1";
	                ajaxService.getAjaxPost(tableAttr.getList, param).then(function (res) {
	                    $scope.refreshTable(res.data.items, column);
	                });
	            } else {
	                console.log(666);
	                initTable(tableAttr.getList, tableAttr.columns, param);
	            }
	        };

	        /**
	         * 启用 function
	         */
	        $scope.enabled = function () {
	            var url = tableAttr.enabled;
	            var _param = { "records": [] };
	            var rows = $("#treeGrid").treegrid("getSelections");
	            if (rows.length == 1) {
	                var row = rows[0];
	                _param.records.push({ "id": row.id, "product": "1" });
	                ajaxService.getAjaxPost(url, _param).then(function (res) {
	                    initTable(tableAttr.getList, tableAttr.columns, _public.publicFunction.deepCopy(_public_var.publicVar.param));
	                    alert(res.retMsg);
	                });
	            } else if (rows.length > 1) {
	                alert("不能同时启用多条数据！");
	            } else if (rows.length < 1) {
	                alert("请选择一条数据启用！");
	            }
	        };
	        /**
	         * 禁用 function
	         */
	        $scope.disabled = function () {
	            var url = tableAttr.disabled;
	            var _param = { "records": [] };
	            var rows = $("#treeGrid").treegrid("getSelections");
	            if (rows.length == 1) {
	                var row = rows[0];
	                _param.records.push({ "id": row.id, "product": "1" });
	                ajaxService.getAjaxPost(url, _param).then(function (res) {
	                    initTable(tableAttr.getList, tableAttr.columns, _public.publicFunction.deepCopy(_public_var.publicVar.param));
	                    alert(res.retMsg);
	                });
	            } else if (rows.length > 1) {
	                alert("不能同时禁用多条数据！");
	            } else if (rows.length < 1) {
	                alert("请选择一条数据禁用！");
	            }
	        };

	        /**
	         * 作废 function
	         */
	        $scope.cancelled = function () {
	            var url = tableAttr.cancelled;
	            var _param = { "records": [] };
	            var rows = $("#treeGrid").treegrid("getSelections");
	            if (rows.length >= 1) {
	                for (var i = 0; i < rows.length; i++) {
	                    _param.records.push({ "id": rows[i].id, "product": "1" });
	                }
	                ajaxService.getAjaxPost(url, _param).then(function (res) {
	                    initTable(tableAttr.getList, tableAttr.columns, _public.publicFunction.deepCopy(_public_var.publicVar.param));
	                    alert(res.retMsg);
	                });
	            } else if (rows.length < 1) {
	                alert("请选择只少一条数据作废！");
	            }
	        };
	        /**
	         * 刷新列表 function
	         */
	        $scope.refreshTable = function (data, column) {
	            if (data) {
	                $timeout(function () {
	                    if (data.children != undefined) {
	                        var pmsclone = function pmsclone(index) {
	                            alert(index);
	                        };

	                        $("#" + $scope.tab.page.id + ' #treeGrid').treegrid({
	                            data: data.children,
	                            idField: 'id',
	                            treeField: 'name',
	                            rownumbers: true,
	                            pagination: true,
	                            singleSelect: false,
	                            pagePosition: 'bottom', //页面的位置
	                            columns: [column]

	                        });
	                    } else {
	                        $("#" + $scope.tab.page.id + ' #treeGrid').treegrid({
	                            data: data,
	                            idField: 'id',
	                            treeField: 'name',
	                            rownumbers: true,
	                            pagination: true,
	                            singleSelect: false,
	                            columns: [column]
	                        });
	                    }
	                }, 10);
	            };
	        };

	        $scope.$on("closed", function (e, val) {
	            //权限详情关闭
	            $scope.panenldialog = !val;
	        });
	        /**
	         * 日期框
	         */
	        $scope.today = function () {
	            $scope.dt = new Date();
	        };

	        $scope.today();

	        $scope.clear = function () {
	            $scope.dt = null;
	        };

	        $scope.inlineOptions = {
	            minDate: new Date(),
	            showWeeks: true
	        };

	        $scope.dateOptions = {
	            formatYear: 'yy',
	            maxDate: new Date(2030, 5, 22),
	            minDate: new Date(1970, 5, 22),
	            startingDay: 1
	        };

	        $scope.open = function (val) {
	            //console.log($scope.myForm);
	            $scope.popup[val].opened = true;
	        };

	        $scope.setDate = function (year, month, day) {
	            $scope.dt = new Date(year, month, day);
	        };

	        $scope.popup = [{
	            opened: false
	        }, {
	            opened: false
	        }, {
	            opened: false
	        }];

	        /**
	         * 判断模糊查询输入框类型  function
	         */
	        $scope.Type = function (type) {
	            switch (type.type) {
	                case "string":
	                    $scope.tag = 1;
	                    break;
	                case "date":
	                    $scope.tag = 2;
	                    break;
	                case "int":
	                    $scope.tag = 3;
	                    break;
	            };
	            $scope.selectData = [];
	            if (type.code == "sort") {
	                $scope.selectData = [{
	                    "id": "1",
	                    "text": "页面级"
	                }, {
	                    "id": "2",
	                    "text": "功能级"
	                }];
	            } else if (type.code == "type") {
	                $scope.selectData = [{
	                    "id": "1",
	                    "text": "系统"
	                }, {
	                    "id": "2",
	                    "text": "客户"
	                }, {
	                    "id": "3",
	                    "text": "供应商"
	                }];
	            };
	            $scope.selectName = $scope.selectData[0];
	        };

	        /**
	         * 获取模糊查询下拉框数据  function
	         */
	        function getCondProperty(url, param) {
	            param.conditions = [{ "field": "group", "value": "baseAuthPool_getTreeList", "option": "" }];
	            ajaxService.getAjaxPost(url.getCondProperty, param).then(function (res) {
	                console.log(res);
	                $scope.selectType1 = res.data;
	                $scope.searchSelectType1 = $scope.selectType1[0];
	            });
	        };

	        $scope.selectType2 = [{
	            "id": "6",
	            "text": "包含",
	            "selected": true
	        }, {
	            "id": "1",
	            "text": "大于"
	        }, {
	            "id": "3",
	            "text": "大于等于"
	        }, {
	            "id": "0",
	            "text": "等于"
	        }, {
	            "id": "2",
	            "text": "小于"
	        }, {
	            "id": "4",
	            "text": "小于等于"
	        }, {
	            "id": "8",
	            "text": "不等于"
	        }, {
	            "id": "9",
	            "text": "不包含"
	        }, {
	            "id": "NAME_CN",
	            "text": "介于"
	        }];
	        $scope.searchSelectType2 = $scope.selectType2[0];
	    }
	};
	exports.default = tableComponent;

/***/ },
/* 66 */
/***/ function(module, exports) {

	module.exports = "<div class=\"panel-group\" id=\"tableComponent1\" style=\"margin-bottom:0;\">\n    <div class=\"panel panel-info\">\n        <div class=\"title\">\n            <span class=\"glyphicon glyphicon-search\"></span>\n            检索\n        </div>\n        <div id=\"tableComponentOne\" class=\"panel-collapse collapse in\" role=\"tabpanel\" aria-labelledby=\"tableComponent1\">\n            <div class=\"panel-body\">\n                <form class=\"navbar-form row\" role=\"search\">\n                    <select style=\"min-width:180px;float:left;margin-right:10px\" ng-change=\"Type(searchSelectType1)\" ng-model=\"searchSelectType1\" class=\"form-control\" value=\"\" ng-options=\"item as item.name for item in selectType1 track by item.code\"></select>\n                    <select style=\"min-width:180px;float:left;margin-right:10px\" ng-click=\"look(this)\" ng-model=\"searchSelectType2\" class=\"form-control\" value=\"\" ng-options=\"item as item.text for item in selectType2 track by item.id\"></select>\n                    <span class=\"text_Box\" ng-show=\"tag==1\"  >\n                        <input  style=\"width:20%;float:left;margin-right:10px\"   class=\"form-control\" name=\"searchSelectValue\" placeholder=\"请输入查询条件..\" ng-model=\"searchSelectValue\"/>\n                    </span>\n                    <div class=\"date_Box\" style=\"float:left;width:560px;margin-right:10px\"  ng-show=\"tag==2\">\n                        <input style=\"width:250px;float:left;margin-right:5px\" type=\"text\" placeholder=\"yyyy-mm-dd\" class=\"form-control\" uib-datepicker-popup name=\"END_DATE\" ng-model=\"customer.END_DATE\" is-open=\"popup[1].opened\" datepicker-options=\"dateOptions\" close-text=\"Close\" ng-click=\"open(1)\"/>\n                        <span style=\"float:left;margin-right:5px;text-align: center;line-height: 30px\">至</span>\n                        <input style=\"width:250px;float:left;margin-right:5px\" type=\"text\" placeholder=\"yyyy-mm-dd\" class=\"form-control\" uib-datepicker-popup name=\"END_DATE\" ng-model=\"customer.END_DATE\" is-open=\"popup[1].opened\" datepicker-options=\"dateOptions\" close-text=\"Close\" ng-click=\"open(1)\"/>\n                    </div>\n                    <span class=\"text_Box\"   ng-show=\"tag==3\">\n                        <select  class=\"form-control\" ng-model=\"selectName\" value=\"\" ng-options=\"item as item.text for item in selectData track by item.id\" style=\"width:250px;float:left;margin-right:5px\"></select>\n                    </span>\n                    <button type=\"button\" style=\"float:left;margin-right:10px\" class=\"btn btn-primary\" ng-click=\"fuzzySearch()\">查询</button>\n                    <button type=\"button\" style=\"float:left\" class=\"btn btn-primary\" ng-click=\"$ctrl.highSearch()\">高级查询</button>\n                </form>\n                </div>\n            </div>\n        </div>\n    </div>\n<div class=\"panel-group\" id=\"tableComponent2\" style=\"margin-bottom:0;\">\n    <div class=\"panel panel-info\">\n        <div class=\"title\">\n            <span class=\"glyphicon glyphicon-list\"></span>\n            列表\n        </div>\n        <div id=\"tableComponentTwo\" class=\"panel-collapse collapse in\" role=\"tabpanel\" aria-labelledby=\"tableComponent2\">\n            <!-- 数据内容加载后会load出页面的内容 -->\n            <div class=\"panel-data\" ng-if=\"loadFlag\">\n                <div uib-alert dismiss-on-timeout=\"{{alert.timeout}}\" ng-repeat=\"alert in alerts\" ng-class=\"'alert-' + (alert.type || 'warning')\" close=\"closeAlert($index)\">{{alert.msg}}</div>\n                <button type=\"button\" class=\"btn btn-primary\" ng-click=\"add()\">新增</button>\n                <!--<button type=\"button\" class=\"btn btn-primary\" ng-click=\"modify()\">修改</button>-->\n                <!--<button type=\"button\" class=\"btn btn-primary\" ng-click=\"delete()\">删除</button>-->\n                <button type=\"button\" class=\"btn btn-primary\" ng-click=\"enabled()\">启用</button>\n                <button type=\"button\" class=\"btn btn-primary\" ng-click=\"disabled()\">禁用</button>\n                <button type=\"button\" class=\"btn btn-primary\" ng-click=\"cancelled()\">作废</button>\n                <div class=\"_grid\"><div id=\"treeGrid\" class=\"easyui-treegrid\" data-options=\"fitColumns:true\"></div></div>\n                <div ng-class=\"{showPanel:mypanel,hidePanel:!mypanel}\" ng-show=\"mypanel\" style=\"z-index:1;position:absolute;left:25%\">\n                    <pms001 ng-if=\"tab.page.identify == 'pms001'\"></pms001>\n                    <purgroup-addcomponent ng-if=\"tab.page.identify == 'pms002'\"></purgroup-addcomponent>\n\n                    <pms003 ng-if=\"tab.page.identify == 'pms003'\"></pms003>\n                </div>\n            </div>\n\n            <!-- loading效果部分，可以替换为别的内容来进行替代 -->\n            <div class=\"panel-body\" ng-if=\"loadFlag == false\">\n                <div class=\"progress progress-striped active\">\n                    <div class=\"progress-bar progress-bar-primary\" role=\"progressbar\"\n                         aria-valuenow=\"60\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n                         style=\"width: 100%;\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"permissiondetail\" ng-show=\"panenldialog\">\n    <per-mission></per-mission>\n</div>";

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.publicVar = undefined;

	var _public = __webpack_require__(68);

	var requestIp = "10.99.2.63:8080",
	    BussinesInterfaceURL = "http://" + requestIp + "/pms/",
	    //业务方法url地址
	curPageSize = 10,
	    curPage = 0;

	var publicVar = exports.publicVar = {
	    ssoLoginUrls: {
	        ssoLogin: "http://" + requestIp + "/SSOLogin/login/ssoLogin" },
	    mainUrl: {
	        pms001: BussinesInterfaceURL + "/BaseAuthPool/getTreeList", //权限管理查询
	        pms002: BussinesInterfaceURL + "/BaseAuthPool/getTreeList",
	        pms003: BussinesInterfaceURL + "/BaseAuthPool/getTreeList"
	    },
	    pms001: {
	        getCondProperty: BussinesInterfaceURL + "CondProperty/getCondProperty", //模糊查询下来接口
	        getList: BussinesInterfaceURL + "/BaseAuthPool/getTreeList", //权限管理查询
	        save: BussinesInterfaceURL + "BaseAuthPool/save", //保存
	        modify: BussinesInterfaceURL + "BaseAuthPool/enabledStatus", //修改
	        enabled: BussinesInterfaceURL + "BaseAuthPool/enabledStatus", //启用
	        disabled: BussinesInterfaceURL + "BaseAuthPool/disableStatus", //禁用
	        cancelled: BussinesInterfaceURL + "BaseAuthPool/cancelledStatus", //作废
	        getTreeListByStatus: BussinesInterfaceURL + "BaseAuthPool/getTreeListByStatus", //获取启用和禁用权限树   父级权限弹框树
	        columns: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }, { field: 'APPROVED_TIME', title: '操作', width: 150, align: 'center', formatter: _public.publicFunction.formatOpar }]
	    },
	    pms002: {
	        getCondProperty: BussinesInterfaceURL + "CondProperty/getCondProperty", //模糊查询下来接口
	        getList: BussinesInterfaceURL + "/BaseAuthPool/getTreeList", //权限管理查询
	        save: BussinesInterfaceURL + "BaseAuthPool/save", //保存
	        modify: BussinesInterfaceURL + "BaseAuthPool/enabledStatus", //修改
	        enabled: BussinesInterfaceURL + "BaseAuthPool/enabledStatus", //启用
	        disabled: BussinesInterfaceURL + "BaseAuthPool/disableStatus", //禁用
	        cancelled: BussinesInterfaceURL + "BaseAuthPool/cancelledStatus", //作废
	        columns: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }]
	    },
	    pms003: {
	        getCondProperty: BussinesInterfaceURL + "CondProperty/getCondProperty", //模糊查询下来接口
	        getList: BussinesInterfaceURL + "/BaseAuthPool/getTreeList", //权限管理查询
	        save: BussinesInterfaceURL + "BaseAuthPool/save", //保存
	        modify: BussinesInterfaceURL + "BaseAuthPool/enabledStatus", //修改
	        enabled: BussinesInterfaceURL + "BaseAuthPool/enabledStatus", //启用
	        disabled: BussinesInterfaceURL + "BaseAuthPool/disableStatus", //禁用
	        cancelled: BussinesInterfaceURL + "BaseAuthPool/cancelledStatus", //作废
	        columns: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }]
	    },
	    param: { "conditions": [], "order": [], "cutomerParam": "2", "page": { "currentPage": curPage, "recordsPerPage": curPageSize } },
	    Columns: {
	        pms001: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', sortable: true }],
	        pms002: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }],
	        pms003: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }],
	        pms004: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }],
	        pms005: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }],
	        pms006: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }],
	        pms007: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }]
	    }
	};

/***/ },
/* 68 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*********************************************
	 *function:公共方法
	 *Modify Record：
	 2016-12-22  Create   jinghu
	 *********************************************/

	var publicFunction = exports.publicFunction = {
	    getSessionKey: function getSessionKey() {
	        /*var arr, reg = new RegExp("(^| )" + "cookieUser" + "=([^;]*)(;|$)");
	        if (arr = document.cookie.match(reg)) {
	            return unescape(arr[2]);
	        } else {
	            if (window.location.href.split("?")[1] && window.location.href.split("?")[1].split("=")[0] === "cookieValue") {
	                return window.location.href.split("?")[1].split("=")[1]
	            } else {
	                return "d0bede0a-08da-4840-9ce7-d0f817652415";
	            }
	        }*/
	        return "fd974be1-3c16-46c4-8756-fe84eeba3b3f";
	    },

	    //随机串
	    getRequestId: function getRequestId() {
	        var date = new Date().toJSON(),
	            year = date.split("T")[0].split("-")[0],
	            month = date.split("T")[0].split("-")[1],
	            day = date.split("T")[0].split("-")[2],
	            hours = date.split("T")[1].split(".")[0].split(":")[0],
	            minutes = date.split("T")[1].split(".")[0].split(":")[1],
	            seconds = date.split("T")[1].split(".")[0].split(":")[2],
	            milliseconds = date.split(".")[1].replace("Z", ""),
	            min = Math.ceil(1000),
	            max = Math.floor(9999),
	            random = Math.floor(Math.random() * (max - min + 1)) + min;
	        return "" + year + month + day + hours + minutes + seconds + milliseconds + random;
	    },

	    /*********************************************
	     *function:对象深拷贝
	     *param:
	     *Modify Record：
	     2016-07-26  Create   yshe
	     *********************************************/
	    deepCopy: function deepCopy(obj) {
	        var o;
	        switch (typeof obj === "undefined" ? "undefined" : _typeof(obj)) {
	            case 'undefined':
	                break;
	            case 'string':
	                o = obj + '';break;
	            case 'number':
	                o = obj - 0;break;
	            case 'boolean':
	                o = obj;break;
	            case 'object':
	                if (obj === null) {
	                    o = null;
	                } else {
	                    if (obj instanceof Array) {
	                        o = [];
	                        for (var i = 0, len = obj.length; i < len; i++) {
	                            o.push(this.deepCopy(obj[i]));
	                        }
	                    } else {
	                        o = {};
	                        for (var k in obj) {
	                            o[k] = this.deepCopy(obj[k]);
	                        }
	                    }
	                }
	                break;
	            default:
	                o = obj;break;
	        }
	        return o;
	    },
	    formatOpar: function formatOpar(val, row, index) {
	        var s = '<a href="#" mce_href="#" style="color:blue" onclick="pmsclone(\'' + index + '\')" >克隆</a> ';
	        var d = '<a href="#" mce_href="#" style="color:blue" onclick="pmsedit(\'' + index + '\')">编辑</a> ';
	        return s + d;
	    },

	    /*********************************************
	     *function:详情
	     *********************************************/
	    setFormDataForObject: function setFormDataForObject(data) {
	        for (var key in data) {
	            var input = $('.' + key);

	            if (data[key] != '') {
	                input.attr("value", data[key]);
	            }
	        }
	    }
	};

/***/ },
/* 69 */
/***/ function(module, exports) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	/**
	 * jQuery EasyUI 1.4.2
	 * 
	 * Copyright (c) 2009-2015 www.jeasyui.com. All rights reserved.
	 *
	 * Licensed under the GPL license: http://www.gnu.org/licenses/gpl.txt
	 * To use it on other terms please contact us at info@jeasyui.com
	 *
	 */
	(function ($) {
	  $.parser = { auto: true, onComplete: function onComplete(_1) {}, plugins: ["draggable", "droppable", "resizable", "pagination", "tooltip", "linkbutton", "menu", "menubutton", "splitbutton", "progressbar", "tree", "textbox", "filebox", "combo", "combobox", "combotree", "combogrid", "numberbox", "validatebox", "searchbox", "spinner", "numberspinner", "timespinner", "datetimespinner", "calendar", "datebox", "datetimebox", "slider", "layout", "panel", "datagrid", "propertygrid", "treegrid", "datalist", "tabs", "accordion", "window", "dialog", "form"], parse: function parse(_2) {
	      var aa = [];
	      for (var i = 0; i < $.parser.plugins.length; i++) {
	        var _3 = $.parser.plugins[i];
	        var r = $(".easyui-" + _3, _2);
	        if (r.length) {
	          if (r[_3]) {
	            r[_3]();
	          } else {
	            aa.push({ name: _3, jq: r });
	          }
	        }
	      }
	      if (aa.length && window.easyloader) {
	        var _4 = [];
	        for (var i = 0; i < aa.length; i++) {
	          _4.push(aa[i].name);
	        }
	        easyloader.load(_4, function () {
	          for (var i = 0; i < aa.length; i++) {
	            var _5 = aa[i].name;
	            var jq = aa[i].jq;
	            jq[_5]();
	          }
	          $.parser.onComplete.call($.parser, _2);
	        });
	      } else {
	        $.parser.onComplete.call($.parser, _2);
	      }
	    }, parseValue: function parseValue(_6, _7, _8, _9) {
	      _9 = _9 || 0;
	      var v = $.trim(String(_7 || ""));
	      var _a = v.substr(v.length - 1, 1);
	      if (_a == "%") {
	        v = parseInt(v.substr(0, v.length - 1));
	        if (_6.toLowerCase().indexOf("width") >= 0) {
	          v = Math.floor((_8.width() - _9) * v / 100);
	        } else {
	          v = Math.floor((_8.height() - _9) * v / 100);
	        }
	      } else {
	        v = parseInt(v) || undefined;
	      }
	      return v;
	    }, parseOptions: function parseOptions(_b, _c) {
	      var t = $(_b);
	      var _d = {};
	      var s = $.trim(t.attr("data-options"));
	      if (s) {
	        if (s.substring(0, 1) != "{") {
	          s = "{" + s + "}";
	        }
	        _d = new Function("return " + s)();
	      }
	      $.map(["width", "height", "left", "top", "minWidth", "maxWidth", "minHeight", "maxHeight"], function (p) {
	        var pv = $.trim(_b.style[p] || "");
	        if (pv) {
	          if (pv.indexOf("%") == -1) {
	            pv = parseInt(pv) || undefined;
	          }
	          _d[p] = pv;
	        }
	      });
	      if (_c) {
	        var _e = {};
	        for (var i = 0; i < _c.length; i++) {
	          var pp = _c[i];
	          if (typeof pp == "string") {
	            _e[pp] = t.attr(pp);
	          } else {
	            for (var _f in pp) {
	              var _10 = pp[_f];
	              if (_10 == "boolean") {
	                _e[_f] = t.attr(_f) ? t.attr(_f) == "true" : undefined;
	              } else {
	                if (_10 == "number") {
	                  _e[_f] = t.attr(_f) == "0" ? 0 : parseFloat(t.attr(_f)) || undefined;
	                }
	              }
	            }
	          }
	        }
	        $.extend(_d, _e);
	      }
	      return _d;
	    } };
	  $(function () {
	    var d = $("<div style=\"position:absolute;top:-1000px;width:100px;height:100px;padding:5px\"></div>").appendTo("body");
	    $._boxModel = d.outerWidth() != 100;
	    d.remove();
	    if (!window.easyloader && $.parser.auto) {
	      $.parser.parse();
	    }
	  });
	  $.fn._outerWidth = function (_11) {
	    if (_11 == undefined) {
	      if (this[0] == window) {
	        return this.width() || document.body.clientWidth;
	      }
	      return this.outerWidth() || 0;
	    }
	    return this._size("width", _11);
	  };
	  $.fn._outerHeight = function (_12) {
	    if (_12 == undefined) {
	      if (this[0] == window) {
	        return this.height() || document.body.clientHeight;
	      }
	      return this.outerHeight() || 0;
	    }
	    return this._size("height", _12);
	  };
	  $.fn._scrollLeft = function (_13) {
	    if (_13 == undefined) {
	      return this.scrollLeft();
	    } else {
	      return this.each(function () {
	        $(this).scrollLeft(_13);
	      });
	    }
	  };
	  $.fn._propAttr = $.fn.prop || $.fn.attr;
	  $.fn._size = function (_14, _15) {
	    if (typeof _14 == "string") {
	      if (_14 == "clear") {
	        return this.each(function () {
	          $(this).css({ width: "", minWidth: "", maxWidth: "", height: "", minHeight: "", maxHeight: "" });
	        });
	      } else {
	        if (_14 == "fit") {
	          return this.each(function () {
	            _16(this, this.tagName == "BODY" ? $("body") : $(this).parent(), true);
	          });
	        } else {
	          if (_14 == "unfit") {
	            return this.each(function () {
	              _16(this, $(this).parent(), false);
	            });
	          } else {
	            if (_15 == undefined) {
	              return _17(this[0], _14);
	            } else {
	              return this.each(function () {
	                _17(this, _14, _15);
	              });
	            }
	          }
	        }
	      }
	    } else {
	      return this.each(function () {
	        _15 = _15 || $(this).parent();
	        $.extend(_14, _16(this, _15, _14.fit) || {});
	        var r1 = _18(this, "width", _15, _14);
	        var r2 = _18(this, "height", _15, _14);
	        if (r1 || r2) {
	          $(this).addClass("easyui-fluid");
	        } else {
	          $(this).removeClass("easyui-fluid");
	        }
	      });
	    }
	    function _16(_19, _1a, fit) {
	      if (!_1a.length) {
	        return false;
	      }
	      var t = $(_19)[0];
	      var p = _1a[0];
	      var _1b = p.fcount || 0;
	      if (fit) {
	        if (!t.fitted) {
	          t.fitted = true;
	          p.fcount = _1b + 1;
	          $(p).addClass("panel-noscroll");
	          if (p.tagName == "BODY") {
	            $("html").addClass("panel-fit");
	          }
	        }
	        return { width: $(p).width() || 1, height: $(p).height() || 1 };
	      } else {
	        if (t.fitted) {
	          t.fitted = false;
	          p.fcount = _1b - 1;
	          if (p.fcount == 0) {
	            $(p).removeClass("panel-noscroll");
	            if (p.tagName == "BODY") {
	              $("html").removeClass("panel-fit");
	            }
	          }
	        }
	        return false;
	      }
	    };
	    function _18(_1c, _1d, _1e, _1f) {
	      var t = $(_1c);
	      var p = _1d;
	      var p1 = p.substr(0, 1).toUpperCase() + p.substr(1);
	      var min = $.parser.parseValue("min" + p1, _1f["min" + p1], _1e);
	      var max = $.parser.parseValue("max" + p1, _1f["max" + p1], _1e);
	      var val = $.parser.parseValue(p, _1f[p], _1e);
	      var _20 = String(_1f[p] || "").indexOf("%") >= 0 ? true : false;
	      if (!isNaN(val)) {
	        var v = Math.min(Math.max(val, min || 0), max || 99999);
	        if (!_20) {
	          _1f[p] = v;
	        }
	        t._size("min" + p1, "");
	        t._size("max" + p1, "");
	        t._size(p, v);
	      } else {
	        t._size(p, "");
	        t._size("min" + p1, min);
	        t._size("max" + p1, max);
	      }
	      return _20 || _1f.fit;
	    };
	    function _17(_21, _22, _23) {
	      var t = $(_21);
	      if (_23 == undefined) {
	        _23 = parseInt(_21.style[_22]);
	        if (isNaN(_23)) {
	          return undefined;
	        }
	        if ($._boxModel) {
	          _23 += _24();
	        }
	        return _23;
	      } else {
	        if (_23 === "") {
	          t.css(_22, "");
	        } else {
	          if ($._boxModel) {
	            _23 -= _24();
	            if (_23 < 0) {
	              _23 = 0;
	            }
	          }
	          t.css(_22, _23 + "px");
	        }
	      }
	      function _24() {
	        if (_22.toLowerCase().indexOf("width") >= 0) {
	          return t.outerWidth() - t.width();
	        } else {
	          return t.outerHeight() - t.height();
	        }
	      };
	    };
	  };
	})(jQuery);
	(function ($) {
	  var _25 = null;
	  var _26 = null;
	  var _27 = false;
	  function _28(e) {
	    if (e.touches.length != 1) {
	      return;
	    }
	    if (!_27) {
	      _27 = true;
	      dblClickTimer = setTimeout(function () {
	        _27 = false;
	      }, 500);
	    } else {
	      clearTimeout(dblClickTimer);
	      _27 = false;
	      _29(e, "dblclick");
	    }
	    _25 = setTimeout(function () {
	      _29(e, "contextmenu", 3);
	    }, 1000);
	    _29(e, "mousedown");
	    if ($.fn.draggable.isDragging || $.fn.resizable.isResizing) {
	      e.preventDefault();
	    }
	  };
	  function _2a(e) {
	    if (e.touches.length != 1) {
	      return;
	    }
	    if (_25) {
	      clearTimeout(_25);
	    }
	    _29(e, "mousemove");
	    if ($.fn.draggable.isDragging || $.fn.resizable.isResizing) {
	      e.preventDefault();
	    }
	  };
	  function _2b(e) {
	    if (_25) {
	      clearTimeout(_25);
	    }
	    _29(e, "mouseup");
	    if ($.fn.draggable.isDragging || $.fn.resizable.isResizing) {
	      e.preventDefault();
	    }
	  };
	  function _29(e, _2c, _2d) {
	    var _2e = new $.Event(_2c);
	    _2e.pageX = e.changedTouches[0].pageX;
	    _2e.pageY = e.changedTouches[0].pageY;
	    _2e.which = _2d || 1;
	    $(e.target).trigger(_2e);
	  };
	  if (document.addEventListener) {
	    document.addEventListener("touchstart", _28, true);
	    document.addEventListener("touchmove", _2a, true);
	    document.addEventListener("touchend", _2b, true);
	  }
	})(jQuery);
	(function ($) {
	  function _2f(e) {
	    var _30 = $.data(e.data.target, "draggable");
	    var _31 = _30.options;
	    var _32 = _30.proxy;
	    var _33 = e.data;
	    var _34 = _33.startLeft + e.pageX - _33.startX;
	    var top = _33.startTop + e.pageY - _33.startY;
	    if (_32) {
	      if (_32.parent()[0] == document.body) {
	        if (_31.deltaX != null && _31.deltaX != undefined) {
	          _34 = e.pageX + _31.deltaX;
	        } else {
	          _34 = e.pageX - e.data.offsetWidth;
	        }
	        if (_31.deltaY != null && _31.deltaY != undefined) {
	          top = e.pageY + _31.deltaY;
	        } else {
	          top = e.pageY - e.data.offsetHeight;
	        }
	      } else {
	        if (_31.deltaX != null && _31.deltaX != undefined) {
	          _34 += e.data.offsetWidth + _31.deltaX;
	        }
	        if (_31.deltaY != null && _31.deltaY != undefined) {
	          top += e.data.offsetHeight + _31.deltaY;
	        }
	      }
	    }
	    if (e.data.parent != document.body) {
	      _34 += $(e.data.parent).scrollLeft();
	      top += $(e.data.parent).scrollTop();
	    }
	    if (_31.axis == "h") {
	      _33.left = _34;
	    } else {
	      if (_31.axis == "v") {
	        _33.top = top;
	      } else {
	        _33.left = _34;
	        _33.top = top;
	      }
	    }
	  };
	  function _35(e) {
	    var _36 = $.data(e.data.target, "draggable");
	    var _37 = _36.options;
	    var _38 = _36.proxy;
	    if (!_38) {
	      _38 = $(e.data.target);
	    }
	    _38.css({ left: e.data.left, top: e.data.top });
	    $("body").css("cursor", _37.cursor);
	  };
	  function _39(e) {
	    if (!$.fn.draggable.isDragging) {
	      return false;
	    }
	    var _3a = $.data(e.data.target, "draggable");
	    var _3b = _3a.options;
	    var _3c = $(".droppable").filter(function () {
	      return e.data.target != this;
	    }).filter(function () {
	      var _3d = $.data(this, "droppable").options.accept;
	      if (_3d) {
	        return $(_3d).filter(function () {
	          return this == e.data.target;
	        }).length > 0;
	      } else {
	        return true;
	      }
	    });
	    _3a.droppables = _3c;
	    var _3e = _3a.proxy;
	    if (!_3e) {
	      if (_3b.proxy) {
	        if (_3b.proxy == "clone") {
	          _3e = $(e.data.target).clone().insertAfter(e.data.target);
	        } else {
	          _3e = _3b.proxy.call(e.data.target, e.data.target);
	        }
	        _3a.proxy = _3e;
	      } else {
	        _3e = $(e.data.target);
	      }
	    }
	    _3e.css("position", "absolute");
	    _2f(e);
	    _35(e);
	    _3b.onStartDrag.call(e.data.target, e);
	    return false;
	  };
	  function _3f(e) {
	    if (!$.fn.draggable.isDragging) {
	      return false;
	    }
	    var _40 = $.data(e.data.target, "draggable");
	    _2f(e);
	    if (_40.options.onDrag.call(e.data.target, e) != false) {
	      _35(e);
	    }
	    var _41 = e.data.target;
	    _40.droppables.each(function () {
	      var _42 = $(this);
	      if (_42.droppable("options").disabled) {
	        return;
	      }
	      var p2 = _42.offset();
	      if (e.pageX > p2.left && e.pageX < p2.left + _42.outerWidth() && e.pageY > p2.top && e.pageY < p2.top + _42.outerHeight()) {
	        if (!this.entered) {
	          $(this).trigger("_dragenter", [_41]);
	          this.entered = true;
	        }
	        $(this).trigger("_dragover", [_41]);
	      } else {
	        if (this.entered) {
	          $(this).trigger("_dragleave", [_41]);
	          this.entered = false;
	        }
	      }
	    });
	    return false;
	  };
	  function _43(e) {
	    if (!$.fn.draggable.isDragging) {
	      _44();
	      return false;
	    }
	    _3f(e);
	    var _45 = $.data(e.data.target, "draggable");
	    var _46 = _45.proxy;
	    var _47 = _45.options;
	    if (_47.revert) {
	      if (_48() == true) {
	        $(e.data.target).css({ position: e.data.startPosition, left: e.data.startLeft, top: e.data.startTop });
	      } else {
	        if (_46) {
	          var _49, top;
	          if (_46.parent()[0] == document.body) {
	            _49 = e.data.startX - e.data.offsetWidth;
	            top = e.data.startY - e.data.offsetHeight;
	          } else {
	            _49 = e.data.startLeft;
	            top = e.data.startTop;
	          }
	          _46.animate({ left: _49, top: top }, function () {
	            _4a();
	          });
	        } else {
	          $(e.data.target).animate({ left: e.data.startLeft, top: e.data.startTop }, function () {
	            $(e.data.target).css("position", e.data.startPosition);
	          });
	        }
	      }
	    } else {
	      $(e.data.target).css({ position: "absolute", left: e.data.left, top: e.data.top });
	      _48();
	    }
	    _47.onStopDrag.call(e.data.target, e);
	    _44();
	    function _4a() {
	      if (_46) {
	        _46.remove();
	      }
	      _45.proxy = null;
	    };
	    function _48() {
	      var _4b = false;
	      _45.droppables.each(function () {
	        var _4c = $(this);
	        if (_4c.droppable("options").disabled) {
	          return;
	        }
	        var p2 = _4c.offset();
	        if (e.pageX > p2.left && e.pageX < p2.left + _4c.outerWidth() && e.pageY > p2.top && e.pageY < p2.top + _4c.outerHeight()) {
	          if (_47.revert) {
	            $(e.data.target).css({ position: e.data.startPosition, left: e.data.startLeft, top: e.data.startTop });
	          }
	          $(this).trigger("_drop", [e.data.target]);
	          _4a();
	          _4b = true;
	          this.entered = false;
	          return false;
	        }
	      });
	      if (!_4b && !_47.revert) {
	        _4a();
	      }
	      return _4b;
	    };
	    return false;
	  };
	  function _44() {
	    if ($.fn.draggable.timer) {
	      clearTimeout($.fn.draggable.timer);
	      $.fn.draggable.timer = undefined;
	    }
	    $(document).unbind(".draggable");
	    $.fn.draggable.isDragging = false;
	    setTimeout(function () {
	      $("body").css("cursor", "");
	    }, 100);
	  };
	  $.fn.draggable = function (_4d, _4e) {
	    if (typeof _4d == "string") {
	      return $.fn.draggable.methods[_4d](this, _4e);
	    }
	    return this.each(function () {
	      var _4f;
	      var _50 = $.data(this, "draggable");
	      if (_50) {
	        _50.handle.unbind(".draggable");
	        _4f = $.extend(_50.options, _4d);
	      } else {
	        _4f = $.extend({}, $.fn.draggable.defaults, $.fn.draggable.parseOptions(this), _4d || {});
	      }
	      var _51 = _4f.handle ? typeof _4f.handle == "string" ? $(_4f.handle, this) : _4f.handle : $(this);
	      $.data(this, "draggable", { options: _4f, handle: _51 });
	      if (_4f.disabled) {
	        $(this).css("cursor", "");
	        return;
	      }
	      _51.unbind(".draggable").bind("mousemove.draggable", { target: this }, function (e) {
	        if ($.fn.draggable.isDragging) {
	          return;
	        }
	        var _52 = $.data(e.data.target, "draggable").options;
	        if (_53(e)) {
	          $(this).css("cursor", _52.cursor);
	        } else {
	          $(this).css("cursor", "");
	        }
	      }).bind("mouseleave.draggable", { target: this }, function (e) {
	        $(this).css("cursor", "");
	      }).bind("mousedown.draggable", { target: this }, function (e) {
	        if (_53(e) == false) {
	          return;
	        }
	        $(this).css("cursor", "");
	        var _54 = $(e.data.target).position();
	        var _55 = $(e.data.target).offset();
	        var _56 = { startPosition: $(e.data.target).css("position"), startLeft: _54.left, startTop: _54.top, left: _54.left, top: _54.top, startX: e.pageX, startY: e.pageY, offsetWidth: e.pageX - _55.left, offsetHeight: e.pageY - _55.top, target: e.data.target, parent: $(e.data.target).parent()[0] };
	        $.extend(e.data, _56);
	        var _57 = $.data(e.data.target, "draggable").options;
	        if (_57.onBeforeDrag.call(e.data.target, e) == false) {
	          return;
	        }
	        $(document).bind("mousedown.draggable", e.data, _39);
	        $(document).bind("mousemove.draggable", e.data, _3f);
	        $(document).bind("mouseup.draggable", e.data, _43);
	        $.fn.draggable.timer = setTimeout(function () {
	          $.fn.draggable.isDragging = true;
	          _39(e);
	        }, _57.delay);
	        return false;
	      });
	      function _53(e) {
	        var _58 = $.data(e.data.target, "draggable");
	        var _59 = _58.handle;
	        var _5a = $(_59).offset();
	        var _5b = $(_59).outerWidth();
	        var _5c = $(_59).outerHeight();
	        var t = e.pageY - _5a.top;
	        var r = _5a.left + _5b - e.pageX;
	        var b = _5a.top + _5c - e.pageY;
	        var l = e.pageX - _5a.left;
	        return Math.min(t, r, b, l) > _58.options.edge;
	      };
	    });
	  };
	  $.fn.draggable.methods = { options: function options(jq) {
	      return $.data(jq[0], "draggable").options;
	    }, proxy: function proxy(jq) {
	      return $.data(jq[0], "draggable").proxy;
	    }, enable: function enable(jq) {
	      return jq.each(function () {
	        $(this).draggable({ disabled: false });
	      });
	    }, disable: function disable(jq) {
	      return jq.each(function () {
	        $(this).draggable({ disabled: true });
	      });
	    } };
	  $.fn.draggable.parseOptions = function (_5d) {
	    var t = $(_5d);
	    return $.extend({}, $.parser.parseOptions(_5d, ["cursor", "handle", "axis", { "revert": "boolean", "deltaX": "number", "deltaY": "number", "edge": "number", "delay": "number" }]), { disabled: t.attr("disabled") ? true : undefined });
	  };
	  $.fn.draggable.defaults = { proxy: null, revert: false, cursor: "move", deltaX: null, deltaY: null, handle: null, disabled: false, edge: 0, axis: null, delay: 100, onBeforeDrag: function onBeforeDrag(e) {}, onStartDrag: function onStartDrag(e) {}, onDrag: function onDrag(e) {}, onStopDrag: function onStopDrag(e) {} };
	  $.fn.draggable.isDragging = false;
	})(jQuery);
	(function ($) {
	  function _5e(_5f) {
	    $(_5f).addClass("droppable");
	    $(_5f).bind("_dragenter", function (e, _60) {
	      $.data(_5f, "droppable").options.onDragEnter.apply(_5f, [e, _60]);
	    });
	    $(_5f).bind("_dragleave", function (e, _61) {
	      $.data(_5f, "droppable").options.onDragLeave.apply(_5f, [e, _61]);
	    });
	    $(_5f).bind("_dragover", function (e, _62) {
	      $.data(_5f, "droppable").options.onDragOver.apply(_5f, [e, _62]);
	    });
	    $(_5f).bind("_drop", function (e, _63) {
	      $.data(_5f, "droppable").options.onDrop.apply(_5f, [e, _63]);
	    });
	  };
	  $.fn.droppable = function (_64, _65) {
	    if (typeof _64 == "string") {
	      return $.fn.droppable.methods[_64](this, _65);
	    }
	    _64 = _64 || {};
	    return this.each(function () {
	      var _66 = $.data(this, "droppable");
	      if (_66) {
	        $.extend(_66.options, _64);
	      } else {
	        _5e(this);
	        $.data(this, "droppable", { options: $.extend({}, $.fn.droppable.defaults, $.fn.droppable.parseOptions(this), _64) });
	      }
	    });
	  };
	  $.fn.droppable.methods = { options: function options(jq) {
	      return $.data(jq[0], "droppable").options;
	    }, enable: function enable(jq) {
	      return jq.each(function () {
	        $(this).droppable({ disabled: false });
	      });
	    }, disable: function disable(jq) {
	      return jq.each(function () {
	        $(this).droppable({ disabled: true });
	      });
	    } };
	  $.fn.droppable.parseOptions = function (_67) {
	    var t = $(_67);
	    return $.extend({}, $.parser.parseOptions(_67, ["accept"]), { disabled: t.attr("disabled") ? true : undefined });
	  };
	  $.fn.droppable.defaults = { accept: null, disabled: false, onDragEnter: function onDragEnter(e, _68) {}, onDragOver: function onDragOver(e, _69) {}, onDragLeave: function onDragLeave(e, _6a) {}, onDrop: function onDrop(e, _6b) {} };
	})(jQuery);
	(function ($) {
	  $.fn.resizable = function (_6c, _6d) {
	    if (typeof _6c == "string") {
	      return $.fn.resizable.methods[_6c](this, _6d);
	    }
	    function _6e(e) {
	      var _6f = e.data;
	      var _70 = $.data(_6f.target, "resizable").options;
	      if (_6f.dir.indexOf("e") != -1) {
	        var _71 = _6f.startWidth + e.pageX - _6f.startX;
	        _71 = Math.min(Math.max(_71, _70.minWidth), _70.maxWidth);
	        _6f.width = _71;
	      }
	      if (_6f.dir.indexOf("s") != -1) {
	        var _72 = _6f.startHeight + e.pageY - _6f.startY;
	        _72 = Math.min(Math.max(_72, _70.minHeight), _70.maxHeight);
	        _6f.height = _72;
	      }
	      if (_6f.dir.indexOf("w") != -1) {
	        var _71 = _6f.startWidth - e.pageX + _6f.startX;
	        _71 = Math.min(Math.max(_71, _70.minWidth), _70.maxWidth);
	        _6f.width = _71;
	        _6f.left = _6f.startLeft + _6f.startWidth - _6f.width;
	      }
	      if (_6f.dir.indexOf("n") != -1) {
	        var _72 = _6f.startHeight - e.pageY + _6f.startY;
	        _72 = Math.min(Math.max(_72, _70.minHeight), _70.maxHeight);
	        _6f.height = _72;
	        _6f.top = _6f.startTop + _6f.startHeight - _6f.height;
	      }
	    };
	    function _73(e) {
	      var _74 = e.data;
	      var t = $(_74.target);
	      t.css({ left: _74.left, top: _74.top });
	      if (t.outerWidth() != _74.width) {
	        t._outerWidth(_74.width);
	      }
	      if (t.outerHeight() != _74.height) {
	        t._outerHeight(_74.height);
	      }
	    };
	    function _75(e) {
	      $.fn.resizable.isResizing = true;
	      $.data(e.data.target, "resizable").options.onStartResize.call(e.data.target, e);
	      return false;
	    };
	    function _76(e) {
	      _6e(e);
	      if ($.data(e.data.target, "resizable").options.onResize.call(e.data.target, e) != false) {
	        _73(e);
	      }
	      return false;
	    };
	    function _77(e) {
	      $.fn.resizable.isResizing = false;
	      _6e(e, true);
	      _73(e);
	      $.data(e.data.target, "resizable").options.onStopResize.call(e.data.target, e);
	      $(document).unbind(".resizable");
	      $("body").css("cursor", "");
	      return false;
	    };
	    return this.each(function () {
	      var _78 = null;
	      var _79 = $.data(this, "resizable");
	      if (_79) {
	        $(this).unbind(".resizable");
	        _78 = $.extend(_79.options, _6c || {});
	      } else {
	        _78 = $.extend({}, $.fn.resizable.defaults, $.fn.resizable.parseOptions(this), _6c || {});
	        $.data(this, "resizable", { options: _78 });
	      }
	      if (_78.disabled == true) {
	        return;
	      }
	      $(this).bind("mousemove.resizable", { target: this }, function (e) {
	        if ($.fn.resizable.isResizing) {
	          return;
	        }
	        var dir = _7a(e);
	        if (dir == "") {
	          $(e.data.target).css("cursor", "");
	        } else {
	          $(e.data.target).css("cursor", dir + "-resize");
	        }
	      }).bind("mouseleave.resizable", { target: this }, function (e) {
	        $(e.data.target).css("cursor", "");
	      }).bind("mousedown.resizable", { target: this }, function (e) {
	        var dir = _7a(e);
	        if (dir == "") {
	          return;
	        }
	        function _7b(css) {
	          var val = parseInt($(e.data.target).css(css));
	          if (isNaN(val)) {
	            return 0;
	          } else {
	            return val;
	          }
	        };
	        var _7c = { target: e.data.target, dir: dir, startLeft: _7b("left"), startTop: _7b("top"), left: _7b("left"), top: _7b("top"), startX: e.pageX, startY: e.pageY, startWidth: $(e.data.target).outerWidth(), startHeight: $(e.data.target).outerHeight(), width: $(e.data.target).outerWidth(), height: $(e.data.target).outerHeight(), deltaWidth: $(e.data.target).outerWidth() - $(e.data.target).width(), deltaHeight: $(e.data.target).outerHeight() - $(e.data.target).height() };
	        $(document).bind("mousedown.resizable", _7c, _75);
	        $(document).bind("mousemove.resizable", _7c, _76);
	        $(document).bind("mouseup.resizable", _7c, _77);
	        $("body").css("cursor", dir + "-resize");
	      });
	      function _7a(e) {
	        var tt = $(e.data.target);
	        var dir = "";
	        var _7d = tt.offset();
	        var _7e = tt.outerWidth();
	        var _7f = tt.outerHeight();
	        var _80 = _78.edge;
	        if (e.pageY > _7d.top && e.pageY < _7d.top + _80) {
	          dir += "n";
	        } else {
	          if (e.pageY < _7d.top + _7f && e.pageY > _7d.top + _7f - _80) {
	            dir += "s";
	          }
	        }
	        if (e.pageX > _7d.left && e.pageX < _7d.left + _80) {
	          dir += "w";
	        } else {
	          if (e.pageX < _7d.left + _7e && e.pageX > _7d.left + _7e - _80) {
	            dir += "e";
	          }
	        }
	        var _81 = _78.handles.split(",");
	        for (var i = 0; i < _81.length; i++) {
	          var _82 = _81[i].replace(/(^\s*)|(\s*$)/g, "");
	          if (_82 == "all" || _82 == dir) {
	            return dir;
	          }
	        }
	        return "";
	      };
	    });
	  };
	  $.fn.resizable.methods = { options: function options(jq) {
	      return $.data(jq[0], "resizable").options;
	    }, enable: function enable(jq) {
	      return jq.each(function () {
	        $(this).resizable({ disabled: false });
	      });
	    }, disable: function disable(jq) {
	      return jq.each(function () {
	        $(this).resizable({ disabled: true });
	      });
	    } };
	  $.fn.resizable.parseOptions = function (_83) {
	    var t = $(_83);
	    return $.extend({}, $.parser.parseOptions(_83, ["handles", { minWidth: "number", minHeight: "number", maxWidth: "number", maxHeight: "number", edge: "number" }]), { disabled: t.attr("disabled") ? true : undefined });
	  };
	  $.fn.resizable.defaults = { disabled: false, handles: "n, e, s, w, ne, se, sw, nw, all", minWidth: 10, minHeight: 10, maxWidth: 10000, maxHeight: 10000, edge: 5, onStartResize: function onStartResize(e) {}, onResize: function onResize(e) {}, onStopResize: function onStopResize(e) {} };
	  $.fn.resizable.isResizing = false;
	})(jQuery);
	(function ($) {
	  function _84(_85, _86) {
	    var _87 = $.data(_85, "linkbutton").options;
	    if (_86) {
	      $.extend(_87, _86);
	    }
	    if (_87.width || _87.height || _87.fit) {
	      var btn = $(_85);
	      var _88 = btn.parent();
	      var _89 = btn.is(":visible");
	      if (!_89) {
	        var _8a = $("<div style=\"display:none\"></div>").insertBefore(_85);
	        var _8b = { position: btn.css("position"), display: btn.css("display"), left: btn.css("left") };
	        btn.appendTo("body");
	        btn.css({ position: "absolute", display: "inline-block", left: -20000 });
	      }
	      btn._size(_87, _88);
	      var _8c = btn.find(".l-btn-left");
	      _8c.css("margin-top", 0);
	      _8c.css("margin-top", parseInt((btn.height() - _8c.height()) / 2) + "px");
	      if (!_89) {
	        btn.insertAfter(_8a);
	        btn.css(_8b);
	        _8a.remove();
	      }
	    }
	  };
	  function _8d(_8e) {
	    var _8f = $.data(_8e, "linkbutton").options;
	    var t = $(_8e).empty();
	    t.addClass("l-btn").removeClass("l-btn-plain l-btn-selected l-btn-plain-selected l-btn-outline");
	    t.removeClass("l-btn-small l-btn-medium l-btn-large").addClass("l-btn-" + _8f.size);
	    if (_8f.plain) {
	      t.addClass("l-btn-plain");
	    }
	    if (_8f.outline) {
	      t.addClass("l-btn-outline");
	    }
	    if (_8f.selected) {
	      t.addClass(_8f.plain ? "l-btn-selected l-btn-plain-selected" : "l-btn-selected");
	    }
	    t.attr("group", _8f.group || "");
	    t.attr("id", _8f.id || "");
	    var _90 = $("<span class=\"l-btn-left\"></span>").appendTo(t);
	    if (_8f.text) {
	      $("<span class=\"l-btn-text\"></span>").html(_8f.text).appendTo(_90);
	    } else {
	      $("<span class=\"l-btn-text l-btn-empty\">&nbsp;</span>").appendTo(_90);
	    }
	    if (_8f.iconCls) {
	      $("<span class=\"l-btn-icon\">&nbsp;</span>").addClass(_8f.iconCls).appendTo(_90);
	      _90.addClass("l-btn-icon-" + _8f.iconAlign);
	    }
	    t.unbind(".linkbutton").bind("focus.linkbutton", function () {
	      if (!_8f.disabled) {
	        $(this).addClass("l-btn-focus");
	      }
	    }).bind("blur.linkbutton", function () {
	      $(this).removeClass("l-btn-focus");
	    }).bind("click.linkbutton", function () {
	      if (!_8f.disabled) {
	        if (_8f.toggle) {
	          if (_8f.selected) {
	            $(this).linkbutton("unselect");
	          } else {
	            $(this).linkbutton("select");
	          }
	        }
	        _8f.onClick.call(this);
	      }
	    });
	    _91(_8e, _8f.selected);
	    _92(_8e, _8f.disabled);
	  };
	  function _91(_93, _94) {
	    var _95 = $.data(_93, "linkbutton").options;
	    if (_94) {
	      if (_95.group) {
	        $("a.l-btn[group=\"" + _95.group + "\"]").each(function () {
	          var o = $(this).linkbutton("options");
	          if (o.toggle) {
	            $(this).removeClass("l-btn-selected l-btn-plain-selected");
	            o.selected = false;
	          }
	        });
	      }
	      $(_93).addClass(_95.plain ? "l-btn-selected l-btn-plain-selected" : "l-btn-selected");
	      _95.selected = true;
	    } else {
	      if (!_95.group) {
	        $(_93).removeClass("l-btn-selected l-btn-plain-selected");
	        _95.selected = false;
	      }
	    }
	  };
	  function _92(_96, _97) {
	    var _98 = $.data(_96, "linkbutton");
	    var _99 = _98.options;
	    $(_96).removeClass("l-btn-disabled l-btn-plain-disabled");
	    if (_97) {
	      _99.disabled = true;
	      var _9a = $(_96).attr("href");
	      if (_9a) {
	        _98.href = _9a;
	        $(_96).attr("href", "javascript:void(0)");
	      }
	      if (_96.onclick) {
	        _98.onclick = _96.onclick;
	        _96.onclick = null;
	      }
	      _99.plain ? $(_96).addClass("l-btn-disabled l-btn-plain-disabled") : $(_96).addClass("l-btn-disabled");
	    } else {
	      _99.disabled = false;
	      if (_98.href) {
	        $(_96).attr("href", _98.href);
	      }
	      if (_98.onclick) {
	        _96.onclick = _98.onclick;
	      }
	    }
	  };
	  $.fn.linkbutton = function (_9b, _9c) {
	    if (typeof _9b == "string") {
	      return $.fn.linkbutton.methods[_9b](this, _9c);
	    }
	    _9b = _9b || {};
	    return this.each(function () {
	      var _9d = $.data(this, "linkbutton");
	      if (_9d) {
	        $.extend(_9d.options, _9b);
	      } else {
	        $.data(this, "linkbutton", { options: $.extend({}, $.fn.linkbutton.defaults, $.fn.linkbutton.parseOptions(this), _9b) });
	        $(this).removeAttr("disabled");
	        $(this).bind("_resize", function (e, _9e) {
	          if ($(this).hasClass("easyui-fluid") || _9e) {
	            _84(this);
	          }
	          return false;
	        });
	      }
	      _8d(this);
	      _84(this);
	    });
	  };
	  $.fn.linkbutton.methods = { options: function options(jq) {
	      return $.data(jq[0], "linkbutton").options;
	    }, resize: function resize(jq, _9f) {
	      return jq.each(function () {
	        _84(this, _9f);
	      });
	    }, enable: function enable(jq) {
	      return jq.each(function () {
	        _92(this, false);
	      });
	    }, disable: function disable(jq) {
	      return jq.each(function () {
	        _92(this, true);
	      });
	    }, select: function select(jq) {
	      return jq.each(function () {
	        _91(this, true);
	      });
	    }, unselect: function unselect(jq) {
	      return jq.each(function () {
	        _91(this, false);
	      });
	    } };
	  $.fn.linkbutton.parseOptions = function (_a0) {
	    var t = $(_a0);
	    return $.extend({}, $.parser.parseOptions(_a0, ["id", "iconCls", "iconAlign", "group", "size", { plain: "boolean", toggle: "boolean", selected: "boolean", outline: "boolean" }]), { disabled: t.attr("disabled") ? true : undefined, text: $.trim(t.html()), iconCls: t.attr("icon") || t.attr("iconCls") });
	  };
	  $.fn.linkbutton.defaults = { id: null, disabled: false, toggle: false, selected: false, outline: false, group: null, plain: false, text: "", iconCls: null, iconAlign: "left", size: "small", onClick: function onClick() {} };
	})(jQuery);
	(function ($) {
	  function _a1(_a2) {
	    var _a3 = $.data(_a2, "pagination");
	    var _a4 = _a3.options;
	    var bb = _a3.bb = {};
	    var _a5 = $(_a2).addClass("pagination").html("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tr></tr></table>");
	    var tr = _a5.find("tr");
	    var aa = $.extend([], _a4.layout);
	    if (!_a4.showPageList) {
	      _a6(aa, "list");
	    }
	    if (!_a4.showRefresh) {
	      _a6(aa, "refresh");
	    }
	    if (aa[0] == "sep") {
	      aa.shift();
	    }
	    if (aa[aa.length - 1] == "sep") {
	      aa.pop();
	    }
	    for (var _a7 = 0; _a7 < aa.length; _a7++) {
	      var _a8 = aa[_a7];
	      if (_a8 == "list") {
	        var ps = $("<select class=\"pagination-page-list\"></select>");
	        ps.bind("change", function () {
	          _a4.pageSize = parseInt($(this).val());
	          _a4.onChangePageSize.call(_a2, _a4.pageSize);
	          _ae(_a2, _a4.pageNumber);
	        });
	        for (var i = 0; i < _a4.pageList.length; i++) {
	          $("<option></option>").text(_a4.pageList[i]).appendTo(ps);
	        }
	        $("<td></td>").append(ps).appendTo(tr);
	      } else {
	        if (_a8 == "sep") {
	          $("<td><div class=\"pagination-btn-separator\"></div></td>").appendTo(tr);
	        } else {
	          if (_a8 == "first") {
	            bb.first = _a9("first");
	          } else {
	            if (_a8 == "prev") {
	              bb.prev = _a9("prev");
	            } else {
	              if (_a8 == "next") {
	                bb.next = _a9("next");
	              } else {
	                if (_a8 == "last") {
	                  bb.last = _a9("last");
	                } else {
	                  if (_a8 == "manual") {
	                    $("<span style=\"padding-left:6px;\"></span>").html(_a4.beforePageText).appendTo(tr).wrap("<td></td>");
	                    bb.num = $("<input class=\"pagination-num\" type=\"text\" value=\"1\" size=\"2\">").appendTo(tr).wrap("<td></td>");
	                    bb.num.unbind(".pagination").bind("keydown.pagination", function (e) {
	                      if (e.keyCode == 13) {
	                        var _aa = parseInt($(this).val()) || 1;
	                        _ae(_a2, _aa);
	                        return false;
	                      }
	                    });
	                    bb.after = $("<span style=\"padding-right:6px;\"></span>").appendTo(tr).wrap("<td></td>");
	                  } else {
	                    if (_a8 == "refresh") {
	                      bb.refresh = _a9("refresh");
	                    } else {
	                      if (_a8 == "links") {
	                        $("<td class=\"pagination-links\"></td>").appendTo(tr);
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	    if (_a4.buttons) {
	      $("<td><div class=\"pagination-btn-separator\"></div></td>").appendTo(tr);
	      if ($.isArray(_a4.buttons)) {
	        for (var i = 0; i < _a4.buttons.length; i++) {
	          var btn = _a4.buttons[i];
	          if (btn == "-") {
	            $("<td><div class=\"pagination-btn-separator\"></div></td>").appendTo(tr);
	          } else {
	            var td = $("<td></td>").appendTo(tr);
	            var a = $("<a href=\"javascript:void(0)\"></a>").appendTo(td);
	            a[0].onclick = eval(btn.handler || function () {});
	            a.linkbutton($.extend({}, btn, { plain: true }));
	          }
	        }
	      } else {
	        var td = $("<td></td>").appendTo(tr);
	        $(_a4.buttons).appendTo(td).show();
	      }
	    }
	    $("<div class=\"pagination-info\"></div>").appendTo(_a5);
	    $("<div style=\"clear:both;\"></div>").appendTo(_a5);
	    function _a9(_ab) {
	      var btn = _a4.nav[_ab];
	      var a = $("<a href=\"javascript:void(0)\"></a>").appendTo(tr);
	      a.wrap("<td></td>");
	      a.linkbutton({ iconCls: btn.iconCls, plain: true }).unbind(".pagination").bind("click.pagination", function () {
	        btn.handler.call(_a2);
	      });
	      return a;
	    };
	    function _a6(aa, _ac) {
	      var _ad = $.inArray(_ac, aa);
	      if (_ad >= 0) {
	        aa.splice(_ad, 1);
	      }
	      return aa;
	    };
	  };
	  function _ae(_af, _b0) {
	    var _b1 = $.data(_af, "pagination").options;
	    _b2(_af, { pageNumber: _b0 });
	    _b1.onSelectPage.call(_af, _b1.pageNumber, _b1.pageSize);
	  };
	  function _b2(_b3, _b4) {
	    var _b5 = $.data(_b3, "pagination");
	    var _b6 = _b5.options;
	    var bb = _b5.bb;
	    $.extend(_b6, _b4 || {});
	    var ps = $(_b3).find("select.pagination-page-list");
	    if (ps.length) {
	      ps.val(_b6.pageSize + "");
	      _b6.pageSize = parseInt(ps.val());
	    }
	    var _b7 = Math.ceil(_b6.total / _b6.pageSize) || 1;
	    if (_b6.pageNumber < 1) {
	      _b6.pageNumber = 1;
	    }
	    if (_b6.pageNumber > _b7) {
	      _b6.pageNumber = _b7;
	    }
	    if (_b6.total == 0) {
	      _b6.pageNumber = 0;
	      _b7 = 0;
	    }
	    if (bb.num) {
	      bb.num.val(_b6.pageNumber);
	    }
	    if (bb.after) {
	      bb.after.html(_b6.afterPageText.replace(/{pages}/, _b7));
	    }
	    var td = $(_b3).find("td.pagination-links");
	    if (td.length) {
	      td.empty();
	      var _b8 = _b6.pageNumber - Math.floor(_b6.links / 2);
	      if (_b8 < 1) {
	        _b8 = 1;
	      }
	      var _b9 = _b8 + _b6.links - 1;
	      if (_b9 > _b7) {
	        _b9 = _b7;
	      }
	      _b8 = _b9 - _b6.links + 1;
	      if (_b8 < 1) {
	        _b8 = 1;
	      }
	      for (var i = _b8; i <= _b9; i++) {
	        var a = $("<a class=\"pagination-link\" href=\"javascript:void(0)\"></a>").appendTo(td);
	        a.linkbutton({ plain: true, text: i });
	        if (i == _b6.pageNumber) {
	          a.linkbutton("select");
	        } else {
	          a.unbind(".pagination").bind("click.pagination", { pageNumber: i }, function (e) {
	            _ae(_b3, e.data.pageNumber);
	          });
	        }
	      }
	    }
	    var _ba = _b6.displayMsg;
	    _ba = _ba.replace(/{from}/, _b6.total == 0 ? 0 : _b6.pageSize * (_b6.pageNumber - 1) + 1);
	    _ba = _ba.replace(/{to}/, Math.min(_b6.pageSize * _b6.pageNumber, _b6.total));
	    _ba = _ba.replace(/{total}/, _b6.total);
	    $(_b3).find("div.pagination-info").html(_ba);
	    if (bb.first) {
	      bb.first.linkbutton({ disabled: !_b6.total || _b6.pageNumber == 1 });
	    }
	    if (bb.prev) {
	      bb.prev.linkbutton({ disabled: !_b6.total || _b6.pageNumber == 1 });
	    }
	    if (bb.next) {
	      bb.next.linkbutton({ disabled: _b6.pageNumber == _b7 });
	    }
	    if (bb.last) {
	      bb.last.linkbutton({ disabled: _b6.pageNumber == _b7 });
	    }
	    _bb(_b3, _b6.loading);
	  };
	  function _bb(_bc, _bd) {
	    var _be = $.data(_bc, "pagination");
	    var _bf = _be.options;
	    _bf.loading = _bd;
	    if (_bf.showRefresh && _be.bb.refresh) {
	      _be.bb.refresh.linkbutton({ iconCls: _bf.loading ? "pagination-loading" : "pagination-load" });
	    }
	  };
	  $.fn.pagination = function (_c0, _c1) {
	    if (typeof _c0 == "string") {
	      return $.fn.pagination.methods[_c0](this, _c1);
	    }
	    _c0 = _c0 || {};
	    return this.each(function () {
	      var _c2;
	      var _c3 = $.data(this, "pagination");
	      if (_c3) {
	        _c2 = $.extend(_c3.options, _c0);
	      } else {
	        _c2 = $.extend({}, $.fn.pagination.defaults, $.fn.pagination.parseOptions(this), _c0);
	        $.data(this, "pagination", { options: _c2 });
	      }
	      _a1(this);
	      _b2(this);
	    });
	  };
	  $.fn.pagination.methods = { options: function options(jq) {
	      return $.data(jq[0], "pagination").options;
	    }, loading: function loading(jq) {
	      return jq.each(function () {
	        _bb(this, true);
	      });
	    }, loaded: function loaded(jq) {
	      return jq.each(function () {
	        _bb(this, false);
	      });
	    }, refresh: function refresh(jq, _c4) {
	      return jq.each(function () {
	        _b2(this, _c4);
	      });
	    }, select: function select(jq, _c5) {
	      return jq.each(function () {
	        _ae(this, _c5);
	      });
	    } };
	  $.fn.pagination.parseOptions = function (_c6) {
	    var t = $(_c6);
	    return $.extend({}, $.parser.parseOptions(_c6, [{ total: "number", pageSize: "number", pageNumber: "number", links: "number" }, { loading: "boolean", showPageList: "boolean", showRefresh: "boolean" }]), { pageList: t.attr("pageList") ? eval(t.attr("pageList")) : undefined });
	  };
	  $.fn.pagination.defaults = { total: 1, pageSize: 10, pageNumber: 1, pageList: [10, 20, 30, 50], loading: false, buttons: null, showPageList: true, showRefresh: true, links: 10, layout: ["list", "sep", "first", "prev", "sep", "manual", "sep", "next", "last", "sep", "refresh"], onSelectPage: function onSelectPage(_c7, _c8) {}, onBeforeRefresh: function onBeforeRefresh(_c9, _ca) {}, onRefresh: function onRefresh(_cb, _cc) {}, onChangePageSize: function onChangePageSize(_cd) {}, beforePageText: "页数", afterPageText: "of {pages}", displayMsg: "显示 {from} 到 {to} 中的 {total} 组项目", nav: { first: { iconCls: "pagination-first", handler: function handler() {
	          var _ce = $(this).pagination("options");
	          if (_ce.pageNumber > 1) {
	            $(this).pagination("select", 1);
	          }
	        } }, prev: { iconCls: "pagination-prev", handler: function handler() {
	          var _cf = $(this).pagination("options");
	          if (_cf.pageNumber > 1) {
	            $(this).pagination("select", _cf.pageNumber - 1);
	          }
	        } }, next: { iconCls: "pagination-next", handler: function handler() {
	          var _d0 = $(this).pagination("options");
	          var _d1 = Math.ceil(_d0.total / _d0.pageSize);
	          if (_d0.pageNumber < _d1) {
	            $(this).pagination("select", _d0.pageNumber + 1);
	          }
	        } }, last: { iconCls: "pagination-last", handler: function handler() {
	          var _d2 = $(this).pagination("options");
	          var _d3 = Math.ceil(_d2.total / _d2.pageSize);
	          if (_d2.pageNumber < _d3) {
	            $(this).pagination("select", _d3);
	          }
	        } }, refresh: { iconCls: "pagination-refresh", handler: function handler() {
	          var _d4 = $(this).pagination("options");
	          if (_d4.onBeforeRefresh.call(this, _d4.pageNumber, _d4.pageSize) != false) {
	            $(this).pagination("select", _d4.pageNumber);
	            _d4.onRefresh.call(this, _d4.pageNumber, _d4.pageSize);
	          }
	        } } } };
	})(jQuery);
	(function ($) {
	  function _d5(_d6) {
	    var _d7 = $(_d6);
	    _d7.addClass("tree");
	    return _d7;
	  };
	  function _d8(_d9) {
	    var _da = $.data(_d9, "tree").options;
	    $(_d9).unbind().bind("mouseover", function (e) {
	      var tt = $(e.target);
	      var _db = tt.closest("div.tree-node");
	      if (!_db.length) {
	        return;
	      }
	      _db.addClass("tree-node-hover");
	      if (tt.hasClass("tree-hit")) {
	        if (tt.hasClass("tree-expanded")) {
	          tt.addClass("tree-expanded-hover");
	        } else {
	          tt.addClass("tree-collapsed-hover");
	        }
	      }
	      e.stopPropagation();
	    }).bind("mouseout", function (e) {
	      var tt = $(e.target);
	      var _dc = tt.closest("div.tree-node");
	      if (!_dc.length) {
	        return;
	      }
	      _dc.removeClass("tree-node-hover");
	      if (tt.hasClass("tree-hit")) {
	        if (tt.hasClass("tree-expanded")) {
	          tt.removeClass("tree-expanded-hover");
	        } else {
	          tt.removeClass("tree-collapsed-hover");
	        }
	      }
	      e.stopPropagation();
	    }).bind("click", function (e) {
	      var tt = $(e.target);
	      var _dd = tt.closest("div.tree-node");
	      if (!_dd.length) {
	        return;
	      }
	      if (tt.hasClass("tree-hit")) {
	        _144(_d9, _dd[0]);
	        return false;
	      } else {
	        if (tt.hasClass("tree-checkbox")) {
	          _104(_d9, _dd[0]);
	          return false;
	        } else {
	          _18a(_d9, _dd[0]);
	          _da.onClick.call(_d9, _e0(_d9, _dd[0]));
	        }
	      }
	      e.stopPropagation();
	    }).bind("dblclick", function (e) {
	      var _de = $(e.target).closest("div.tree-node");
	      if (!_de.length) {
	        return;
	      }
	      _18a(_d9, _de[0]);
	      _da.onDblClick.call(_d9, _e0(_d9, _de[0]));
	      e.stopPropagation();
	    }).bind("contextmenu", function (e) {
	      var _df = $(e.target).closest("div.tree-node");
	      if (!_df.length) {
	        return;
	      }
	      _da.onContextMenu.call(_d9, e, _e0(_d9, _df[0]));
	      e.stopPropagation();
	    });
	  };
	  function _e1(_e2) {
	    var _e3 = $.data(_e2, "tree").options;
	    _e3.dnd = false;
	    var _e4 = $(_e2).find("div.tree-node");
	    _e4.draggable("disable");
	    _e4.css("cursor", "pointer");
	  };
	  function _e5(_e6) {
	    var _e7 = $.data(_e6, "tree");
	    var _e8 = _e7.options;
	    var _e9 = _e7.tree;
	    _e7.disabledNodes = [];
	    _e8.dnd = true;
	    _e9.find("div.tree-node").draggable({ disabled: false, revert: true, cursor: "pointer", proxy: function proxy(_ea) {
	        var p = $("<div class=\"tree-node-proxy\"></div>").appendTo("body");
	        p.html("<span class=\"tree-dnd-icon tree-dnd-no\">&nbsp;</span>" + $(_ea).find(".tree-title").html());
	        p.hide();
	        return p;
	      }, deltaX: 15, deltaY: 15, onBeforeDrag: function onBeforeDrag(e) {
	        if (_e8.onBeforeDrag.call(_e6, _e0(_e6, this)) == false) {
	          return false;
	        }
	        if ($(e.target).hasClass("tree-hit") || $(e.target).hasClass("tree-checkbox")) {
	          return false;
	        }
	        if (e.which != 1) {
	          return false;
	        }
	        $(this).next("ul").find("div.tree-node").droppable({ accept: "no-accept" });
	        var _eb = $(this).find("span.tree-indent");
	        if (_eb.length) {
	          e.data.offsetWidth -= _eb.length * _eb.width();
	        }
	      }, onStartDrag: function onStartDrag() {
	        $(this).draggable("proxy").css({ left: -10000, top: -10000 });
	        _e8.onStartDrag.call(_e6, _e0(_e6, this));
	        var _ec = _e0(_e6, this);
	        if (_ec.id == undefined) {
	          _ec.id = "easyui_tree_node_id_temp";
	          _127(_e6, _ec);
	        }
	        _e7.draggingNodeId = _ec.id;
	      }, onDrag: function onDrag(e) {
	        var x1 = e.pageX,
	            y1 = e.pageY,
	            x2 = e.data.startX,
	            y2 = e.data.startY;
	        var d = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
	        if (d > 3) {
	          $(this).draggable("proxy").show();
	        }
	        this.pageY = e.pageY;
	      }, onStopDrag: function onStopDrag() {
	        $(this).next("ul").find("div.tree-node").droppable({ accept: "div.tree-node" });
	        for (var i = 0; i < _e7.disabledNodes.length; i++) {
	          $(_e7.disabledNodes[i]).droppable("enable");
	        }
	        _e7.disabledNodes = [];
	        var _ed = _182(_e6, _e7.draggingNodeId);
	        if (_ed && _ed.id == "easyui_tree_node_id_temp") {
	          _ed.id = "";
	          _127(_e6, _ed);
	        }
	        _e8.onStopDrag.call(_e6, _ed);
	      } }).droppable({ accept: "div.tree-node", onDragEnter: function onDragEnter(e, _ee) {
	        if (_e8.onDragEnter.call(_e6, this, _ef(_ee)) == false) {
	          _f0(_ee, false);
	          $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
	          $(this).droppable("disable");
	          _e7.disabledNodes.push(this);
	        }
	      }, onDragOver: function onDragOver(e, _f1) {
	        if ($(this).droppable("options").disabled) {
	          return;
	        }
	        var _f2 = _f1.pageY;
	        var top = $(this).offset().top;
	        var _f3 = top + $(this).outerHeight();
	        _f0(_f1, true);
	        $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
	        if (_f2 > top + (_f3 - top) / 2) {
	          if (_f3 - _f2 < 5) {
	            $(this).addClass("tree-node-bottom");
	          } else {
	            $(this).addClass("tree-node-append");
	          }
	        } else {
	          if (_f2 - top < 5) {
	            $(this).addClass("tree-node-top");
	          } else {
	            $(this).addClass("tree-node-append");
	          }
	        }
	        if (_e8.onDragOver.call(_e6, this, _ef(_f1)) == false) {
	          _f0(_f1, false);
	          $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
	          $(this).droppable("disable");
	          _e7.disabledNodes.push(this);
	        }
	      }, onDragLeave: function onDragLeave(e, _f4) {
	        _f0(_f4, false);
	        $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
	        _e8.onDragLeave.call(_e6, this, _ef(_f4));
	      }, onDrop: function onDrop(e, _f5) {
	        var _f6 = this;
	        var _f7, _f8;
	        if ($(this).hasClass("tree-node-append")) {
	          _f7 = _f9;
	          _f8 = "append";
	        } else {
	          _f7 = _fa;
	          _f8 = $(this).hasClass("tree-node-top") ? "top" : "bottom";
	        }
	        if (_e8.onBeforeDrop.call(_e6, _f6, _ef(_f5), _f8) == false) {
	          $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
	          return;
	        }
	        _f7(_f5, _f6, _f8);
	        $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
	      } });
	    function _ef(_fb, pop) {
	      return $(_fb).closest("ul.tree").tree(pop ? "pop" : "getData", _fb);
	    };
	    function _f0(_fc, _fd) {
	      var _fe = $(_fc).draggable("proxy").find("span.tree-dnd-icon");
	      _fe.removeClass("tree-dnd-yes tree-dnd-no").addClass(_fd ? "tree-dnd-yes" : "tree-dnd-no");
	    };
	    function _f9(_ff, dest) {
	      if (_e0(_e6, dest).state == "closed") {
	        _13c(_e6, dest, function () {
	          _100();
	        });
	      } else {
	        _100();
	      }
	      function _100() {
	        var node = _ef(_ff, true);
	        $(_e6).tree("append", { parent: dest, data: [node] });
	        _e8.onDrop.call(_e6, dest, node, "append");
	      };
	    };
	    function _fa(_101, dest, _102) {
	      var _103 = {};
	      if (_102 == "top") {
	        _103.before = dest;
	      } else {
	        _103.after = dest;
	      }
	      var node = _ef(_101, true);
	      _103.data = node;
	      $(_e6).tree("insert", _103);
	      _e8.onDrop.call(_e6, dest, node, _102);
	    };
	  };
	  function _104(_105, _106, _107) {
	    var _108 = $.data(_105, "tree");
	    var opts = _108.options;
	    if (!opts.checkbox) {
	      return;
	    }
	    var _109 = _e0(_105, _106);
	    if (_107 == undefined) {
	      var ck = $(_106).find(".tree-checkbox");
	      if (ck.hasClass("tree-checkbox1")) {
	        _107 = false;
	      } else {
	        if (ck.hasClass("tree-checkbox0")) {
	          _107 = true;
	        } else {
	          if (_109._checked == undefined) {
	            _109._checked = $(_106).find(".tree-checkbox").hasClass("tree-checkbox1");
	          }
	          _107 = !_109._checked;
	        }
	      }
	    }
	    _109._checked = _107;
	    if (opts.onBeforeCheck.call(_105, _109, _107) == false) {
	      return;
	    }
	    if (opts.cascadeCheck) {
	      _10a(_109, _107);
	      _10b(_109, _107);
	    } else {
	      _10c($(_109.target), _107 ? "1" : "0");
	    }
	    opts.onCheck.call(_105, _109, _107);
	    function _10c(node, flag) {
	      var ck = node.find(".tree-checkbox");
	      ck.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");
	      ck.addClass("tree-checkbox" + flag);
	    };
	    function _10a(_10d, _10e) {
	      if (opts.deepCheck) {
	        var node = $("#" + _10d.domId);
	        var flag = _10e ? "1" : "0";
	        _10c(node, flag);
	        _10c(node.next(), flag);
	      } else {
	        _10f(_10d, _10e);
	        _12a(_10d.children || [], function (n) {
	          _10f(n, _10e);
	        });
	      }
	    };
	    function _10f(_110, _111) {
	      if (_110.hidden) {
	        return;
	      }
	      var cls = "tree-checkbox" + (_111 ? "1" : "0");
	      var node = $("#" + _110.domId);
	      _10c(node, _111 ? "1" : "0");
	      if (_110.children) {
	        for (var i = 0; i < _110.children.length; i++) {
	          if (_110.children[i].hidden) {
	            if (!$("#" + _110.children[i].domId).find("." + cls).length) {
	              _10c(node, "2");
	              var _112 = _14f(_105, node[0]);
	              while (_112) {
	                _10c($(_112.target), "2");
	                _112 = _14f(_105, _112[0]);
	              }
	              return;
	            }
	          }
	        }
	      }
	    };
	    function _10b(_113, _114) {
	      var node = $("#" + _113.domId);
	      var _115 = _14f(_105, node[0]);
	      if (_115) {
	        var flag = "";
	        if (_116(node, true)) {
	          flag = "1";
	        } else {
	          if (_116(node, false)) {
	            flag = "0";
	          } else {
	            flag = "2";
	          }
	        }
	        _10c($(_115.target), flag);
	        _10b(_115, _114);
	      }
	    };
	    function _116(node, _117) {
	      var cls = "tree-checkbox" + (_117 ? "1" : "0");
	      var ck = node.find(".tree-checkbox");
	      if (!ck.hasClass(cls)) {
	        return false;
	      }
	      var b = true;
	      node.parent().siblings().each(function () {
	        var ck = $(this).children("div.tree-node").children(".tree-checkbox");
	        if (ck.length && !ck.hasClass(cls)) {
	          b = false;
	          return false;
	        }
	      });
	      return b;
	    };
	  };
	  function _118(_119, _11a) {
	    var opts = $.data(_119, "tree").options;
	    if (!opts.checkbox) {
	      return;
	    }
	    var node = $(_11a);
	    if (_11b(_119, _11a)) {
	      var ck = node.find(".tree-checkbox");
	      if (ck.length) {
	        if (ck.hasClass("tree-checkbox1")) {
	          _104(_119, _11a, true);
	        } else {
	          _104(_119, _11a, false);
	        }
	      } else {
	        if (opts.onlyLeafCheck) {
	          $("<span class=\"tree-checkbox tree-checkbox0\"></span>").insertBefore(node.find(".tree-title"));
	        }
	      }
	    } else {
	      var ck = node.find(".tree-checkbox");
	      if (opts.onlyLeafCheck) {
	        ck.remove();
	      } else {
	        if (ck.hasClass("tree-checkbox1")) {
	          _104(_119, _11a, true);
	        } else {
	          if (ck.hasClass("tree-checkbox2")) {
	            var _11c = true;
	            var _11d = true;
	            var _11e = _11f(_119, _11a);
	            for (var i = 0; i < _11e.length; i++) {
	              if (_11e[i].checked) {
	                _11d = false;
	              } else {
	                _11c = false;
	              }
	            }
	            if (_11c) {
	              _104(_119, _11a, true);
	            }
	            if (_11d) {
	              _104(_119, _11a, false);
	            }
	          }
	        }
	      }
	    }
	  };
	  function _120(_121, ul, data, _122) {
	    var _123 = $.data(_121, "tree");
	    var opts = _123.options;
	    var _124 = $(ul).prevAll("div.tree-node:first");
	    data = opts.loadFilter.call(_121, data, _124[0]);
	    var _125 = _126(_121, "domId", _124.attr("id"));
	    if (!_122) {
	      _125 ? _125.children = data : _123.data = data;
	      $(ul).empty();
	    } else {
	      if (_125) {
	        _125.children ? _125.children = _125.children.concat(data) : _125.children = data;
	      } else {
	        _123.data = _123.data.concat(data);
	      }
	    }
	    opts.view.render.call(opts.view, _121, ul, data);
	    if (opts.dnd) {
	      _e5(_121);
	    }
	    if (_125) {
	      _127(_121, _125);
	    }
	    var _128 = [];
	    var _129 = [];
	    for (var i = 0; i < data.length; i++) {
	      var node = data[i];
	      if (!node.checked) {
	        _128.push(node);
	      }
	    }
	    _12a(data, function (node) {
	      if (node.checked) {
	        _129.push(node);
	      }
	    });
	    var _12b = opts.onCheck;
	    opts.onCheck = function () {};
	    if (_128.length) {
	      _104(_121, $("#" + _128[0].domId)[0], false);
	    }
	    for (var i = 0; i < _129.length; i++) {
	      _104(_121, $("#" + _129[i].domId)[0], true);
	    }
	    opts.onCheck = _12b;
	    setTimeout(function () {
	      _12c(_121, _121);
	    }, 0);
	    opts.onLoadSuccess.call(_121, _125, data);
	  };
	  function _12c(_12d, ul, _12e) {
	    var opts = $.data(_12d, "tree").options;
	    if (opts.lines) {
	      $(_12d).addClass("tree-lines");
	    } else {
	      $(_12d).removeClass("tree-lines");
	      return;
	    }
	    if (!_12e) {
	      _12e = true;
	      $(_12d).find("span.tree-indent").removeClass("tree-line tree-join tree-joinbottom");
	      $(_12d).find("div.tree-node").removeClass("tree-node-last tree-root-first tree-root-one");
	      var _12f = $(_12d).tree("getRoots");
	      if (_12f.length > 1) {
	        $(_12f[0].target).addClass("tree-root-first");
	      } else {
	        if (_12f.length == 1) {
	          $(_12f[0].target).addClass("tree-root-one");
	        }
	      }
	    }
	    $(ul).children("li").each(function () {
	      var node = $(this).children("div.tree-node");
	      var ul = node.next("ul");
	      if (ul.length) {
	        if ($(this).next().length) {
	          _130(node);
	        }
	        _12c(_12d, ul, _12e);
	      } else {
	        _131(node);
	      }
	    });
	    var _132 = $(ul).children("li:last").children("div.tree-node").addClass("tree-node-last");
	    _132.children("span.tree-join").removeClass("tree-join").addClass("tree-joinbottom");
	    function _131(node, _133) {
	      var icon = node.find("span.tree-icon");
	      icon.prev("span.tree-indent").addClass("tree-join");
	    };
	    function _130(node) {
	      var _134 = node.find("span.tree-indent, span.tree-hit").length;
	      node.next().find("div.tree-node").each(function () {
	        $(this).children("span:eq(" + (_134 - 1) + ")").addClass("tree-line");
	      });
	    };
	  };
	  function _135(_136, ul, _137, _138) {
	    var opts = $.data(_136, "tree").options;
	    _137 = $.extend({}, opts.queryParams, _137 || {});
	    var _139 = null;
	    if (_136 != ul) {
	      var node = $(ul).prev();
	      _139 = _e0(_136, node[0]);
	    }
	    if (opts.onBeforeLoad.call(_136, _139, _137) == false) {
	      return;
	    }
	    var _13a = $(ul).prev().children("span.tree-folder");
	    _13a.addClass("tree-loading");
	    var _13b = opts.loader.call(_136, _137, function (data) {
	      _13a.removeClass("tree-loading");
	      _120(_136, ul, data);
	      if (_138) {
	        _138();
	      }
	    }, function () {
	      _13a.removeClass("tree-loading");
	      opts.onLoadError.apply(_136, arguments);
	      if (_138) {
	        _138();
	      }
	    });
	    if (_13b == false) {
	      _13a.removeClass("tree-loading");
	    }
	  };
	  function _13c(_13d, _13e, _13f) {
	    var opts = $.data(_13d, "tree").options;
	    var hit = $(_13e).children("span.tree-hit");
	    if (hit.length == 0) {
	      return;
	    }
	    if (hit.hasClass("tree-expanded")) {
	      return;
	    }
	    var node = _e0(_13d, _13e);
	    if (opts.onBeforeExpand.call(_13d, node) == false) {
	      return;
	    }
	    hit.removeClass("tree-collapsed tree-collapsed-hover").addClass("tree-expanded");
	    hit.next().addClass("tree-folder-open");
	    var ul = $(_13e).next();
	    if (ul.length) {
	      if (opts.animate) {
	        ul.slideDown("normal", function () {
	          node.state = "open";
	          opts.onExpand.call(_13d, node);
	          if (_13f) {
	            _13f();
	          }
	        });
	      } else {
	        ul.css("display", "block");
	        node.state = "open";
	        opts.onExpand.call(_13d, node);
	        if (_13f) {
	          _13f();
	        }
	      }
	    } else {
	      var _140 = $("<ul style=\"display:none\"></ul>").insertAfter(_13e);
	      _135(_13d, _140[0], { id: node.id }, function () {
	        if (_140.is(":empty")) {
	          _140.remove();
	        }
	        if (opts.animate) {
	          _140.slideDown("normal", function () {
	            node.state = "open";
	            opts.onExpand.call(_13d, node);
	            if (_13f) {
	              _13f();
	            }
	          });
	        } else {
	          _140.css("display", "block");
	          node.state = "open";
	          opts.onExpand.call(_13d, node);
	          if (_13f) {
	            _13f();
	          }
	        }
	      });
	    }
	  };
	  function _141(_142, _143) {
	    var opts = $.data(_142, "tree").options;
	    var hit = $(_143).children("span.tree-hit");
	    if (hit.length == 0) {
	      return;
	    }
	    if (hit.hasClass("tree-collapsed")) {
	      return;
	    }
	    var node = _e0(_142, _143);
	    if (opts.onBeforeCollapse.call(_142, node) == false) {
	      return;
	    }
	    hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
	    hit.next().removeClass("tree-folder-open");
	    var ul = $(_143).next();
	    if (opts.animate) {
	      ul.slideUp("normal", function () {
	        node.state = "closed";
	        opts.onCollapse.call(_142, node);
	      });
	    } else {
	      ul.css("display", "none");
	      node.state = "closed";
	      opts.onCollapse.call(_142, node);
	    }
	  };
	  function _144(_145, _146) {
	    var hit = $(_146).children("span.tree-hit");
	    if (hit.length == 0) {
	      return;
	    }
	    if (hit.hasClass("tree-expanded")) {
	      _141(_145, _146);
	    } else {
	      _13c(_145, _146);
	    }
	  };
	  function _147(_148, _149) {
	    var _14a = _11f(_148, _149);
	    if (_149) {
	      _14a.unshift(_e0(_148, _149));
	    }
	    for (var i = 0; i < _14a.length; i++) {
	      _13c(_148, _14a[i].target);
	    }
	  };
	  function _14b(_14c, _14d) {
	    var _14e = [];
	    var p = _14f(_14c, _14d);
	    while (p) {
	      _14e.unshift(p);
	      p = _14f(_14c, p.target);
	    }
	    for (var i = 0; i < _14e.length; i++) {
	      _13c(_14c, _14e[i].target);
	    }
	  };
	  function _150(_151, _152) {
	    var c = $(_151).parent();
	    while (c[0].tagName != "BODY" && c.css("overflow-y") != "auto") {
	      c = c.parent();
	    }
	    var n = $(_152);
	    var ntop = n.offset().top;
	    if (c[0].tagName != "BODY") {
	      var ctop = c.offset().top;
	      if (ntop < ctop) {
	        c.scrollTop(c.scrollTop() + ntop - ctop);
	      } else {
	        if (ntop + n.outerHeight() > ctop + c.outerHeight() - 18) {
	          c.scrollTop(c.scrollTop() + ntop + n.outerHeight() - ctop - c.outerHeight() + 18);
	        }
	      }
	    } else {
	      c.scrollTop(ntop);
	    }
	  };
	  function _153(_154, _155) {
	    var _156 = _11f(_154, _155);
	    if (_155) {
	      _156.unshift(_e0(_154, _155));
	    }
	    for (var i = 0; i < _156.length; i++) {
	      _141(_154, _156[i].target);
	    }
	  };
	  function _157(_158, _159) {
	    var node = $(_159.parent);
	    var data = _159.data;
	    if (!data) {
	      return;
	    }
	    data = $.isArray(data) ? data : [data];
	    if (!data.length) {
	      return;
	    }
	    var ul;
	    if (node.length == 0) {
	      ul = $(_158);
	    } else {
	      if (_11b(_158, node[0])) {
	        var _15a = node.find("span.tree-icon");
	        _15a.removeClass("tree-file").addClass("tree-folder tree-folder-open");
	        var hit = $("<span class=\"tree-hit tree-expanded\"></span>").insertBefore(_15a);
	        if (hit.prev().length) {
	          hit.prev().remove();
	        }
	      }
	      ul = node.next();
	      if (!ul.length) {
	        ul = $("<ul></ul>").insertAfter(node);
	      }
	    }
	    _120(_158, ul[0], data, true);
	    _118(_158, ul.prev());
	  };
	  function _15b(_15c, _15d) {
	    var ref = _15d.before || _15d.after;
	    var _15e = _14f(_15c, ref);
	    var data = _15d.data;
	    if (!data) {
	      return;
	    }
	    data = $.isArray(data) ? data : [data];
	    if (!data.length) {
	      return;
	    }
	    _157(_15c, { parent: _15e ? _15e.target : null, data: data });
	    var _15f = _15e ? _15e.children : $(_15c).tree("getRoots");
	    for (var i = 0; i < _15f.length; i++) {
	      if (_15f[i].domId == $(ref).attr("id")) {
	        for (var j = data.length - 1; j >= 0; j--) {
	          _15f.splice(_15d.before ? i : i + 1, 0, data[j]);
	        }
	        _15f.splice(_15f.length - data.length, data.length);
	        break;
	      }
	    }
	    var li = $();
	    for (var i = 0; i < data.length; i++) {
	      li = li.add($("#" + data[i].domId).parent());
	    }
	    if (_15d.before) {
	      li.insertBefore($(ref).parent());
	    } else {
	      li.insertAfter($(ref).parent());
	    }
	  };
	  function _160(_161, _162) {
	    var _163 = del(_162);
	    $(_162).parent().remove();
	    if (_163) {
	      if (!_163.children || !_163.children.length) {
	        var node = $(_163.target);
	        node.find(".tree-icon").removeClass("tree-folder").addClass("tree-file");
	        node.find(".tree-hit").remove();
	        $("<span class=\"tree-indent\"></span>").prependTo(node);
	        node.next().remove();
	      }
	      _127(_161, _163);
	      _118(_161, _163.target);
	    }
	    _12c(_161, _161);
	    function del(_164) {
	      var id = $(_164).attr("id");
	      var _165 = _14f(_161, _164);
	      var cc = _165 ? _165.children : $.data(_161, "tree").data;
	      for (var i = 0; i < cc.length; i++) {
	        if (cc[i].domId == id) {
	          cc.splice(i, 1);
	          break;
	        }
	      }
	      return _165;
	    };
	  };
	  function _127(_166, _167) {
	    var opts = $.data(_166, "tree").options;
	    var node = $(_167.target);
	    var data = _e0(_166, _167.target);
	    var _168 = data.checked;
	    if (data.iconCls) {
	      node.find(".tree-icon").removeClass(data.iconCls);
	    }
	    $.extend(data, _167);
	    node.find(".tree-title").html(opts.formatter.call(_166, data));
	    if (data.iconCls) {
	      node.find(".tree-icon").addClass(data.iconCls);
	    }
	    if (_168 != data.checked) {
	      _104(_166, _167.target, data.checked);
	    }
	  };
	  function _169(_16a, _16b) {
	    if (_16b) {
	      var p = _14f(_16a, _16b);
	      while (p) {
	        _16b = p.target;
	        p = _14f(_16a, _16b);
	      }
	      return _e0(_16a, _16b);
	    } else {
	      var _16c = _16d(_16a);
	      return _16c.length ? _16c[0] : null;
	    }
	  };
	  function _16d(_16e) {
	    var _16f = $.data(_16e, "tree").data;
	    for (var i = 0; i < _16f.length; i++) {
	      _170(_16f[i]);
	    }
	    return _16f;
	  };
	  function _11f(_171, _172) {
	    var _173 = [];
	    var n = _e0(_171, _172);
	    var data = n ? n.children || [] : $.data(_171, "tree").data;
	    _12a(data, function (node) {
	      _173.push(_170(node));
	    });
	    return _173;
	  };
	  function _14f(_174, _175) {
	    var p = $(_175).closest("ul").prevAll("div.tree-node:first");
	    return _e0(_174, p[0]);
	  };
	  function _176(_177, _178) {
	    _178 = _178 || "checked";
	    if (!$.isArray(_178)) {
	      _178 = [_178];
	    }
	    var _179 = [];
	    for (var i = 0; i < _178.length; i++) {
	      var s = _178[i];
	      if (s == "checked") {
	        _179.push("span.tree-checkbox1");
	      } else {
	        if (s == "unchecked") {
	          _179.push("span.tree-checkbox0");
	        } else {
	          if (s == "indeterminate") {
	            _179.push("span.tree-checkbox2");
	          }
	        }
	      }
	    }
	    var _17a = [];
	    $(_177).find(_179.join(",")).each(function () {
	      var node = $(this).parent();
	      _17a.push(_e0(_177, node[0]));
	    });
	    return _17a;
	  };
	  function _17b(_17c) {
	    var node = $(_17c).find("div.tree-node-selected");
	    return node.length ? _e0(_17c, node[0]) : null;
	  };
	  function _17d(_17e, _17f) {
	    var data = _e0(_17e, _17f);
	    if (data && data.children) {
	      _12a(data.children, function (node) {
	        _170(node);
	      });
	    }
	    return data;
	  };
	  function _e0(_180, _181) {
	    return _126(_180, "domId", $(_181).attr("id"));
	  };
	  function _182(_183, id) {
	    return _126(_183, "id", id);
	  };
	  function _126(_184, _185, _186) {
	    var data = $.data(_184, "tree").data;
	    var _187 = null;
	    _12a(data, function (node) {
	      if (node[_185] == _186) {
	        _187 = _170(node);
	        return false;
	      }
	    });
	    return _187;
	  };
	  function _170(node) {
	    var d = $("#" + node.domId);
	    node.target = d[0];
	    node.checked = d.find(".tree-checkbox").hasClass("tree-checkbox1");
	    return node;
	  };
	  function _12a(data, _188) {
	    var _189 = [];
	    for (var i = 0; i < data.length; i++) {
	      _189.push(data[i]);
	    }
	    while (_189.length) {
	      var node = _189.shift();
	      if (_188(node) == false) {
	        return;
	      }
	      if (node.children) {
	        for (var i = node.children.length - 1; i >= 0; i--) {
	          _189.unshift(node.children[i]);
	        }
	      }
	    }
	  };
	  function _18a(_18b, _18c) {
	    var opts = $.data(_18b, "tree").options;
	    var node = _e0(_18b, _18c);
	    if (opts.onBeforeSelect.call(_18b, node) == false) {
	      return;
	    }
	    $(_18b).find("div.tree-node-selected").removeClass("tree-node-selected");
	    $(_18c).addClass("tree-node-selected");
	    opts.onSelect.call(_18b, node);
	  };
	  function _11b(_18d, _18e) {
	    return $(_18e).children("span.tree-hit").length == 0;
	  };
	  function _18f(_190, _191) {
	    var opts = $.data(_190, "tree").options;
	    var node = _e0(_190, _191);
	    if (opts.onBeforeEdit.call(_190, node) == false) {
	      return;
	    }
	    $(_191).css("position", "relative");
	    var nt = $(_191).find(".tree-title");
	    var _192 = nt.outerWidth();
	    nt.empty();
	    var _193 = $("<input class=\"tree-editor\">").appendTo(nt);
	    _193.val(node.text).focus();
	    _193.width(_192 + 20);
	    _193.height(document.compatMode == "CSS1Compat" ? 18 - (_193.outerHeight() - _193.height()) : 18);
	    _193.bind("click", function (e) {
	      return false;
	    }).bind("mousedown", function (e) {
	      e.stopPropagation();
	    }).bind("mousemove", function (e) {
	      e.stopPropagation();
	    }).bind("keydown", function (e) {
	      if (e.keyCode == 13) {
	        _194(_190, _191);
	        return false;
	      } else {
	        if (e.keyCode == 27) {
	          _198(_190, _191);
	          return false;
	        }
	      }
	    }).bind("blur", function (e) {
	      e.stopPropagation();
	      _194(_190, _191);
	    });
	  };
	  function _194(_195, _196) {
	    var opts = $.data(_195, "tree").options;
	    $(_196).css("position", "");
	    var _197 = $(_196).find("input.tree-editor");
	    var val = _197.val();
	    _197.remove();
	    var node = _e0(_195, _196);
	    node.text = val;
	    _127(_195, node);
	    opts.onAfterEdit.call(_195, node);
	  };
	  function _198(_199, _19a) {
	    var opts = $.data(_199, "tree").options;
	    $(_19a).css("position", "");
	    $(_19a).find("input.tree-editor").remove();
	    var node = _e0(_199, _19a);
	    _127(_199, node);
	    opts.onCancelEdit.call(_199, node);
	  };
	  function _19b(_19c, q) {
	    var _19d = $.data(_19c, "tree");
	    var opts = _19d.options;
	    var ids = {};
	    _12a(_19d.data, function (node) {
	      if (opts.filter.call(_19c, q, node)) {
	        $("#" + node.domId).removeClass("tree-node-hidden");
	        ids[node.domId] = 1;
	        node.hidden = false;
	      } else {
	        $("#" + node.domId).addClass("tree-node-hidden");
	        node.hidden = true;
	      }
	    });
	    for (var id in ids) {
	      _19e(id);
	    }
	    function _19e(_19f) {
	      var p = $(_19c).tree("getParent", $("#" + _19f)[0]);
	      while (p) {
	        $(p.target).removeClass("tree-node-hidden");
	        p.hidden = false;
	        p = $(_19c).tree("getParent", p.target);
	      }
	    };
	  };
	  $.fn.tree = function (_1a0, _1a1) {
	    if (typeof _1a0 == "string") {
	      return $.fn.tree.methods[_1a0](this, _1a1);
	    }
	    var _1a0 = _1a0 || {};
	    return this.each(function () {
	      var _1a2 = $.data(this, "tree");
	      var opts;
	      if (_1a2) {
	        opts = $.extend(_1a2.options, _1a0);
	        _1a2.options = opts;
	      } else {
	        opts = $.extend({}, $.fn.tree.defaults, $.fn.tree.parseOptions(this), _1a0);
	        $.data(this, "tree", { options: opts, tree: _d5(this), data: [] });
	        var data = $.fn.tree.parseData(this);
	        if (data.length) {
	          _120(this, this, data);
	        }
	      }
	      _d8(this);
	      if (opts.data) {
	        _120(this, this, $.extend(true, [], opts.data));
	      }
	      _135(this, this);
	    });
	  };
	  $.fn.tree.methods = { options: function options(jq) {
	      return $.data(jq[0], "tree").options;
	    }, loadData: function loadData(jq, data) {
	      return jq.each(function () {
	        _120(this, this, data);
	      });
	    }, getNode: function getNode(jq, _1a3) {
	      return _e0(jq[0], _1a3);
	    }, getData: function getData(jq, _1a4) {
	      return _17d(jq[0], _1a4);
	    }, reload: function reload(jq, _1a5) {
	      return jq.each(function () {
	        if (_1a5) {
	          var node = $(_1a5);
	          var hit = node.children("span.tree-hit");
	          hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
	          node.next().remove();
	          _13c(this, _1a5);
	        } else {
	          $(this).empty();
	          _135(this, this);
	        }
	      });
	    }, getRoot: function getRoot(jq, _1a6) {
	      return _169(jq[0], _1a6);
	    }, getRoots: function getRoots(jq) {
	      return _16d(jq[0]);
	    }, getParent: function getParent(jq, _1a7) {
	      return _14f(jq[0], _1a7);
	    }, getChildren: function getChildren(jq, _1a8) {
	      return _11f(jq[0], _1a8);
	    }, getChecked: function getChecked(jq, _1a9) {
	      return _176(jq[0], _1a9);
	    }, getSelected: function getSelected(jq) {
	      return _17b(jq[0]);
	    }, isLeaf: function isLeaf(jq, _1aa) {
	      return _11b(jq[0], _1aa);
	    }, find: function find(jq, id) {
	      return _182(jq[0], id);
	    }, select: function select(jq, _1ab) {
	      return jq.each(function () {
	        _18a(this, _1ab);
	      });
	    }, check: function check(jq, _1ac) {
	      return jq.each(function () {
	        _104(this, _1ac, true);
	      });
	    }, uncheck: function uncheck(jq, _1ad) {
	      return jq.each(function () {
	        _104(this, _1ad, false);
	      });
	    }, collapse: function collapse(jq, _1ae) {
	      return jq.each(function () {
	        _141(this, _1ae);
	      });
	    }, expand: function expand(jq, _1af) {
	      return jq.each(function () {
	        _13c(this, _1af);
	      });
	    }, collapseAll: function collapseAll(jq, _1b0) {
	      return jq.each(function () {
	        _153(this, _1b0);
	      });
	    }, expandAll: function expandAll(jq, _1b1) {
	      return jq.each(function () {
	        _147(this, _1b1);
	      });
	    }, expandTo: function expandTo(jq, _1b2) {
	      return jq.each(function () {
	        _14b(this, _1b2);
	      });
	    }, scrollTo: function scrollTo(jq, _1b3) {
	      return jq.each(function () {
	        _150(this, _1b3);
	      });
	    }, toggle: function toggle(jq, _1b4) {
	      return jq.each(function () {
	        _144(this, _1b4);
	      });
	    }, append: function append(jq, _1b5) {
	      return jq.each(function () {
	        _157(this, _1b5);
	      });
	    }, insert: function insert(jq, _1b6) {
	      return jq.each(function () {
	        _15b(this, _1b6);
	      });
	    }, remove: function remove(jq, _1b7) {
	      return jq.each(function () {
	        _160(this, _1b7);
	      });
	    }, pop: function pop(jq, _1b8) {
	      var node = jq.tree("getData", _1b8);
	      jq.tree("remove", _1b8);
	      return node;
	    }, update: function update(jq, _1b9) {
	      return jq.each(function () {
	        _127(this, _1b9);
	      });
	    }, enableDnd: function enableDnd(jq) {
	      return jq.each(function () {
	        _e5(this);
	      });
	    }, disableDnd: function disableDnd(jq) {
	      return jq.each(function () {
	        _e1(this);
	      });
	    }, beginEdit: function beginEdit(jq, _1ba) {
	      return jq.each(function () {
	        _18f(this, _1ba);
	      });
	    }, endEdit: function endEdit(jq, _1bb) {
	      return jq.each(function () {
	        _194(this, _1bb);
	      });
	    }, cancelEdit: function cancelEdit(jq, _1bc) {
	      return jq.each(function () {
	        _198(this, _1bc);
	      });
	    }, doFilter: function doFilter(jq, q) {
	      return jq.each(function () {
	        _19b(this, q);
	      });
	    } };
	  $.fn.tree.parseOptions = function (_1bd) {
	    var t = $(_1bd);
	    return $.extend({}, $.parser.parseOptions(_1bd, ["url", "method", { checkbox: "boolean", cascadeCheck: "boolean", onlyLeafCheck: "boolean" }, { animate: "boolean", lines: "boolean", dnd: "boolean" }]));
	  };
	  $.fn.tree.parseData = function (_1be) {
	    var data = [];
	    _1bf(data, $(_1be));
	    return data;
	    function _1bf(aa, tree) {
	      tree.children("li").each(function () {
	        var node = $(this);
	        var item = $.extend({}, $.parser.parseOptions(this, ["id", "iconCls", "state"]), { checked: node.attr("checked") ? true : undefined });
	        item.text = node.children("span").html();
	        if (!item.text) {
	          item.text = node.html();
	        }
	        var _1c0 = node.children("ul");
	        if (_1c0.length) {
	          item.children = [];
	          _1bf(item.children, _1c0);
	        }
	        aa.push(item);
	      });
	    };
	  };
	  var _1c1 = 1;
	  var _1c2 = { render: function render(_1c3, ul, data) {
	      var opts = $.data(_1c3, "tree").options;
	      var _1c4 = $(ul).prev("div.tree-node").find("span.tree-indent, span.tree-hit").length;
	      var cc = _1c5(_1c4, data);
	      $(ul).append(cc.join(""));
	      function _1c5(_1c6, _1c7) {
	        var cc = [];
	        for (var i = 0; i < _1c7.length; i++) {
	          var item = _1c7[i];
	          if (item.state != "open" && item.state != "closed") {
	            item.state = "open";
	          }
	          item.domId = "_easyui_tree_" + _1c1++;
	          cc.push("<li>");
	          cc.push("<div id=\"" + item.domId + "\" class=\"tree-node\">");
	          for (var j = 0; j < _1c6; j++) {
	            cc.push("<span class=\"tree-indent\"></span>");
	          }
	          var _1c8 = false;
	          if (item.state == "closed") {
	            cc.push("<span class=\"tree-hit tree-collapsed\"></span>");
	            cc.push("<span class=\"tree-icon tree-folder " + (item.iconCls ? item.iconCls : "") + "\"></span>");
	          } else {
	            if (item.children && item.children.length) {
	              cc.push("<span class=\"tree-hit tree-expanded\"></span>");
	              cc.push("<span class=\"tree-icon tree-folder tree-folder-open " + (item.iconCls ? item.iconCls : "") + "\"></span>");
	            } else {
	              cc.push("<span class=\"tree-indent\"></span>");
	              cc.push("<span class=\"tree-icon tree-file " + (item.iconCls ? item.iconCls : "") + "\"></span>");
	              _1c8 = true;
	            }
	          }
	          if (opts.checkbox) {
	            if (!opts.onlyLeafCheck || _1c8) {
	              cc.push("<span class=\"tree-checkbox tree-checkbox0\"></span>");
	            }
	          }
	          cc.push("<span class=\"tree-title\">" + opts.formatter.call(_1c3, item) + "</span>");
	          cc.push("</div>");
	          if (item.children && item.children.length) {
	            var tmp = _1c5(_1c6 + 1, item.children);
	            cc.push("<ul style=\"display:" + (item.state == "closed" ? "none" : "block") + "\">");
	            cc = cc.concat(tmp);
	            cc.push("</ul>");
	          }
	          cc.push("</li>");
	        }
	        return cc;
	      };
	    } };
	  $.fn.tree.defaults = { url: null, method: "post", animate: false, checkbox: false, cascadeCheck: true, onlyLeafCheck: false, lines: false, dnd: false, data: null, queryParams: {}, formatter: function formatter(node) {
	      return node.text;
	    }, filter: function filter(q, node) {
	      return node.text.toLowerCase().indexOf(q.toLowerCase()) >= 0;
	    }, loader: function loader(_1c9, _1ca, _1cb) {
	      var opts = $(this).tree("options");
	      if (!opts.url) {
	        return false;
	      }
	      $.ajax({ type: opts.method, url: opts.url, data: _1c9, dataType: "json", success: function success(data) {
	          _1ca(data);
	        }, error: function error() {
	          _1cb.apply(this, arguments);
	        } });
	    }, loadFilter: function loadFilter(data, _1cc) {
	      return data;
	    }, view: _1c2, onBeforeLoad: function onBeforeLoad(node, _1cd) {}, onLoadSuccess: function onLoadSuccess(node, data) {}, onLoadError: function onLoadError() {}, onClick: function onClick(node) {}, onDblClick: function onDblClick(node) {}, onBeforeExpand: function onBeforeExpand(node) {}, onExpand: function onExpand(node) {}, onBeforeCollapse: function onBeforeCollapse(node) {}, onCollapse: function onCollapse(node) {}, onBeforeCheck: function onBeforeCheck(node, _1ce) {}, onCheck: function onCheck(node, _1cf) {}, onBeforeSelect: function onBeforeSelect(node) {}, onSelect: function onSelect(node) {}, onContextMenu: function onContextMenu(e, node) {}, onBeforeDrag: function onBeforeDrag(node) {}, onStartDrag: function onStartDrag(node) {}, onStopDrag: function onStopDrag(node) {}, onDragEnter: function onDragEnter(_1d0, _1d1) {}, onDragOver: function onDragOver(_1d2, _1d3) {}, onDragLeave: function onDragLeave(_1d4, _1d5) {}, onBeforeDrop: function onBeforeDrop(_1d6, _1d7, _1d8) {}, onDrop: function onDrop(_1d9, _1da, _1db) {}, onBeforeEdit: function onBeforeEdit(node) {}, onAfterEdit: function onAfterEdit(node) {}, onCancelEdit: function onCancelEdit(node) {} };
	})(jQuery);
	(function ($) {
	  function init(_1dc) {
	    $(_1dc).addClass("progressbar");
	    $(_1dc).html("<div class=\"progressbar-text\"></div><div class=\"progressbar-value\"><div class=\"progressbar-text\"></div></div>");
	    $(_1dc).bind("_resize", function (e, _1dd) {
	      if ($(this).hasClass("easyui-fluid") || _1dd) {
	        _1de(_1dc);
	      }
	      return false;
	    });
	    return $(_1dc);
	  };
	  function _1de(_1df, _1e0) {
	    var opts = $.data(_1df, "progressbar").options;
	    var bar = $.data(_1df, "progressbar").bar;
	    if (_1e0) {
	      opts.width = _1e0;
	    }
	    bar._size(opts);
	    bar.find("div.progressbar-text").css("width", bar.width());
	    bar.find("div.progressbar-text,div.progressbar-value").css({ height: bar.height() + "px", lineHeight: bar.height() + "px" });
	  };
	  $.fn.progressbar = function (_1e1, _1e2) {
	    if (typeof _1e1 == "string") {
	      var _1e3 = $.fn.progressbar.methods[_1e1];
	      if (_1e3) {
	        return _1e3(this, _1e2);
	      }
	    }
	    _1e1 = _1e1 || {};
	    return this.each(function () {
	      var _1e4 = $.data(this, "progressbar");
	      if (_1e4) {
	        $.extend(_1e4.options, _1e1);
	      } else {
	        _1e4 = $.data(this, "progressbar", { options: $.extend({}, $.fn.progressbar.defaults, $.fn.progressbar.parseOptions(this), _1e1), bar: init(this) });
	      }
	      $(this).progressbar("setValue", _1e4.options.value);
	      _1de(this);
	    });
	  };
	  $.fn.progressbar.methods = { options: function options(jq) {
	      return $.data(jq[0], "progressbar").options;
	    }, resize: function resize(jq, _1e5) {
	      return jq.each(function () {
	        _1de(this, _1e5);
	      });
	    }, getValue: function getValue(jq) {
	      return $.data(jq[0], "progressbar").options.value;
	    }, setValue: function setValue(jq, _1e6) {
	      if (_1e6 < 0) {
	        _1e6 = 0;
	      }
	      if (_1e6 > 100) {
	        _1e6 = 100;
	      }
	      return jq.each(function () {
	        var opts = $.data(this, "progressbar").options;
	        var text = opts.text.replace(/{value}/, _1e6);
	        var _1e7 = opts.value;
	        opts.value = _1e6;
	        $(this).find("div.progressbar-value").width(_1e6 + "%");
	        $(this).find("div.progressbar-text").html(text);
	        if (_1e7 != _1e6) {
	          opts.onChange.call(this, _1e6, _1e7);
	        }
	      });
	    } };
	  $.fn.progressbar.parseOptions = function (_1e8) {
	    return $.extend({}, $.parser.parseOptions(_1e8, ["width", "height", "text", { value: "number" }]));
	  };
	  $.fn.progressbar.defaults = { width: "auto", height: 22, value: 0, text: "{value}%", onChange: function onChange(_1e9, _1ea) {} };
	})(jQuery);
	(function ($) {
	  function init(_1eb) {
	    $(_1eb).addClass("tooltip-f");
	  };
	  function _1ec(_1ed) {
	    var opts = $.data(_1ed, "tooltip").options;
	    $(_1ed).unbind(".tooltip").bind(opts.showEvent + ".tooltip", function (e) {
	      $(_1ed).tooltip("show", e);
	    }).bind(opts.hideEvent + ".tooltip", function (e) {
	      $(_1ed).tooltip("hide", e);
	    }).bind("mousemove.tooltip", function (e) {
	      if (opts.trackMouse) {
	        opts.trackMouseX = e.pageX;
	        opts.trackMouseY = e.pageY;
	        $(_1ed).tooltip("reposition");
	      }
	    });
	  };
	  function _1ee(_1ef) {
	    var _1f0 = $.data(_1ef, "tooltip");
	    if (_1f0.showTimer) {
	      clearTimeout(_1f0.showTimer);
	      _1f0.showTimer = null;
	    }
	    if (_1f0.hideTimer) {
	      clearTimeout(_1f0.hideTimer);
	      _1f0.hideTimer = null;
	    }
	  };
	  function _1f1(_1f2) {
	    var _1f3 = $.data(_1f2, "tooltip");
	    if (!_1f3 || !_1f3.tip) {
	      return;
	    }
	    var opts = _1f3.options;
	    var tip = _1f3.tip;
	    var pos = { left: -100000, top: -100000 };
	    if ($(_1f2).is(":visible")) {
	      pos = _1f4(opts.position);
	      if (opts.position == "top" && pos.top < 0) {
	        pos = _1f4("bottom");
	      } else {
	        if (opts.position == "bottom" && pos.top + tip._outerHeight() > $(window)._outerHeight() + $(document).scrollTop()) {
	          pos = _1f4("top");
	        }
	      }
	      if (pos.left < 0) {
	        if (opts.position == "left") {
	          pos = _1f4("right");
	        } else {
	          $(_1f2).tooltip("arrow").css("left", tip._outerWidth() / 2 + pos.left);
	          pos.left = 0;
	        }
	      } else {
	        if (pos.left + tip._outerWidth() > $(window)._outerWidth() + $(document)._scrollLeft()) {
	          if (opts.position == "right") {
	            pos = _1f4("left");
	          } else {
	            var left = pos.left;
	            pos.left = $(window)._outerWidth() + $(document)._scrollLeft() - tip._outerWidth();
	            $(_1f2).tooltip("arrow").css("left", tip._outerWidth() / 2 - (pos.left - left));
	          }
	        }
	      }
	    }
	    tip.css({ left: pos.left, top: pos.top, zIndex: opts.zIndex != undefined ? opts.zIndex : $.fn.window ? $.fn.window.defaults.zIndex++ : "" });
	    opts.onPosition.call(_1f2, pos.left, pos.top);
	    function _1f4(_1f5) {
	      opts.position = _1f5 || "bottom";
	      tip.removeClass("tooltip-top tooltip-bottom tooltip-left tooltip-right").addClass("tooltip-" + opts.position);
	      var left, top;
	      if (opts.trackMouse) {
	        t = $();
	        left = opts.trackMouseX + opts.deltaX;
	        top = opts.trackMouseY + opts.deltaY;
	      } else {
	        var t = $(_1f2);
	        left = t.offset().left + opts.deltaX;
	        top = t.offset().top + opts.deltaY;
	      }
	      switch (opts.position) {
	        case "right":
	          left += t._outerWidth() + 12 + (opts.trackMouse ? 12 : 0);
	          top -= (tip._outerHeight() - t._outerHeight()) / 2;
	          break;
	        case "left":
	          left -= tip._outerWidth() + 12 + (opts.trackMouse ? 12 : 0);
	          top -= (tip._outerHeight() - t._outerHeight()) / 2;
	          break;
	        case "top":
	          left -= (tip._outerWidth() - t._outerWidth()) / 2;
	          top -= tip._outerHeight() + 12 + (opts.trackMouse ? 12 : 0);
	          break;
	        case "bottom":
	          left -= (tip._outerWidth() - t._outerWidth()) / 2;
	          top += t._outerHeight() + 12 + (opts.trackMouse ? 12 : 0);
	          break;
	      }
	      return { left: left, top: top };
	    };
	  };
	  function _1f6(_1f7, e) {
	    var _1f8 = $.data(_1f7, "tooltip");
	    var opts = _1f8.options;
	    var tip = _1f8.tip;
	    if (!tip) {
	      tip = $("<div tabindex=\"-1\" class=\"tooltip\">" + "<div class=\"tooltip-content\"></div>" + "<div class=\"tooltip-arrow-outer\"></div>" + "<div class=\"tooltip-arrow\"></div>" + "</div>").appendTo("body");
	      _1f8.tip = tip;
	      _1f9(_1f7);
	    }
	    _1ee(_1f7);
	    _1f8.showTimer = setTimeout(function () {
	      $(_1f7).tooltip("reposition");
	      tip.show();
	      opts.onShow.call(_1f7, e);
	      var _1fa = tip.children(".tooltip-arrow-outer");
	      var _1fb = tip.children(".tooltip-arrow");
	      var bc = "border-" + opts.position + "-color";
	      _1fa.add(_1fb).css({ borderTopColor: "", borderBottomColor: "", borderLeftColor: "", borderRightColor: "" });
	      _1fa.css(bc, tip.css(bc));
	      _1fb.css(bc, tip.css("backgroundColor"));
	    }, opts.showDelay);
	  };
	  function _1fc(_1fd, e) {
	    var _1fe = $.data(_1fd, "tooltip");
	    if (_1fe && _1fe.tip) {
	      _1ee(_1fd);
	      _1fe.hideTimer = setTimeout(function () {
	        _1fe.tip.hide();
	        _1fe.options.onHide.call(_1fd, e);
	      }, _1fe.options.hideDelay);
	    }
	  };
	  function _1f9(_1ff, _200) {
	    var _201 = $.data(_1ff, "tooltip");
	    var opts = _201.options;
	    if (_200) {
	      opts.content = _200;
	    }
	    if (!_201.tip) {
	      return;
	    }
	    var cc = typeof opts.content == "function" ? opts.content.call(_1ff) : opts.content;
	    _201.tip.children(".tooltip-content").html(cc);
	    opts.onUpdate.call(_1ff, cc);
	  };
	  function _202(_203) {
	    var _204 = $.data(_203, "tooltip");
	    if (_204) {
	      _1ee(_203);
	      var opts = _204.options;
	      if (_204.tip) {
	        _204.tip.remove();
	      }
	      if (opts._title) {
	        $(_203).attr("title", opts._title);
	      }
	      $.removeData(_203, "tooltip");
	      $(_203).unbind(".tooltip").removeClass("tooltip-f");
	      opts.onDestroy.call(_203);
	    }
	  };
	  $.fn.tooltip = function (_205, _206) {
	    if (typeof _205 == "string") {
	      return $.fn.tooltip.methods[_205](this, _206);
	    }
	    _205 = _205 || {};
	    return this.each(function () {
	      var _207 = $.data(this, "tooltip");
	      if (_207) {
	        $.extend(_207.options, _205);
	      } else {
	        $.data(this, "tooltip", { options: $.extend({}, $.fn.tooltip.defaults, $.fn.tooltip.parseOptions(this), _205) });
	        init(this);
	      }
	      _1ec(this);
	      _1f9(this);
	    });
	  };
	  $.fn.tooltip.methods = { options: function options(jq) {
	      return $.data(jq[0], "tooltip").options;
	    }, tip: function tip(jq) {
	      return $.data(jq[0], "tooltip").tip;
	    }, arrow: function arrow(jq) {
	      return jq.tooltip("tip").children(".tooltip-arrow-outer,.tooltip-arrow");
	    }, show: function show(jq, e) {
	      return jq.each(function () {
	        _1f6(this, e);
	      });
	    }, hide: function hide(jq, e) {
	      return jq.each(function () {
	        _1fc(this, e);
	      });
	    }, update: function update(jq, _208) {
	      return jq.each(function () {
	        _1f9(this, _208);
	      });
	    }, reposition: function reposition(jq) {
	      return jq.each(function () {
	        _1f1(this);
	      });
	    }, destroy: function destroy(jq) {
	      return jq.each(function () {
	        _202(this);
	      });
	    } };
	  $.fn.tooltip.parseOptions = function (_209) {
	    var t = $(_209);
	    var opts = $.extend({}, $.parser.parseOptions(_209, ["position", "showEvent", "hideEvent", "content", { trackMouse: "boolean", deltaX: "number", deltaY: "number", showDelay: "number", hideDelay: "number" }]), { _title: t.attr("title") });
	    t.attr("title", "");
	    if (!opts.content) {
	      opts.content = opts._title;
	    }
	    return opts;
	  };
	  $.fn.tooltip.defaults = { position: "bottom", content: null, trackMouse: false, deltaX: 0, deltaY: 0, showEvent: "mouseenter", hideEvent: "mouseleave", showDelay: 200, hideDelay: 100, onShow: function onShow(e) {}, onHide: function onHide(e) {}, onUpdate: function onUpdate(_20a) {}, onPosition: function onPosition(left, top) {}, onDestroy: function onDestroy() {} };
	})(jQuery);
	(function ($) {
	  var _$$fn$panel$defaults;

	  $.fn._remove = function () {
	    return this.each(function () {
	      $(this).remove();
	      try {
	        this.outerHTML = "";
	      } catch (err) {}
	    });
	  };
	  function _20b(node) {
	    node._remove();
	  };
	  function _20c(_20d, _20e) {
	    var _20f = $.data(_20d, "panel");
	    var opts = _20f.options;
	    var _210 = _20f.panel;
	    var _211 = _210.children(".panel-header");
	    var _212 = _210.children(".panel-body");
	    var _213 = _210.children(".panel-footer");
	    if (_20e) {
	      $.extend(opts, { width: _20e.width, height: _20e.height, minWidth: _20e.minWidth, maxWidth: _20e.maxWidth, minHeight: _20e.minHeight, maxHeight: _20e.maxHeight, left: _20e.left, top: _20e.top });
	    }
	    _210._size(opts);
	    _211.add(_212)._outerWidth(_210.width());
	    if (!isNaN(parseInt(opts.height))) {
	      _212._outerHeight(_210.height() - _211._outerHeight() - _213._outerHeight());
	    } else {
	      _212.css("height", "");
	      var min = $.parser.parseValue("minHeight", opts.minHeight, _210.parent());
	      var max = $.parser.parseValue("maxHeight", opts.maxHeight, _210.parent());
	      var _214 = _211._outerHeight() + _213._outerHeight() + _210._outerHeight() - _210.height();
	      _212._size("minHeight", min ? min - _214 : "");
	      _212._size("maxHeight", max ? max - _214 : "");
	    }
	    _210.css({ height: "", minHeight: "", maxHeight: "", left: opts.left, top: opts.top });
	    opts.onResize.apply(_20d, [opts.width, opts.height]);
	    $(_20d).panel("doLayout");
	  };
	  function _215(_216, _217) {
	    var opts = $.data(_216, "panel").options;
	    var _218 = $.data(_216, "panel").panel;
	    if (_217) {
	      if (_217.left != null) {
	        opts.left = _217.left;
	      }
	      if (_217.top != null) {
	        opts.top = _217.top;
	      }
	    }
	    _218.css({ left: opts.left, top: opts.top });
	    opts.onMove.apply(_216, [opts.left, opts.top]);
	  };
	  function _219(_21a) {
	    $(_21a).addClass("panel-body")._size("clear");
	    var _21b = $("<div class=\"panel\"></div>").insertBefore(_21a);
	    _21b[0].appendChild(_21a);
	    _21b.bind("_resize", function (e, _21c) {
	      if ($(this).hasClass("easyui-fluid") || _21c) {
	        _20c(_21a);
	      }
	      return false;
	    });
	    return _21b;
	  };
	  function _21d(_21e) {
	    var _21f = $.data(_21e, "panel");
	    var opts = _21f.options;
	    var _220 = _21f.panel;
	    _220.css(opts.style);
	    _220.addClass(opts.cls);
	    _221();
	    _222();
	    var _223 = $(_21e).panel("header");
	    var body = $(_21e).panel("body");
	    var _224 = $(_21e).siblings(".panel-footer");
	    if (opts.border) {
	      _223.removeClass("panel-header-noborder");
	      body.removeClass("panel-body-noborder");
	      _224.removeClass("panel-footer-noborder");
	    } else {
	      _223.addClass("panel-header-noborder");
	      body.addClass("panel-body-noborder");
	      _224.addClass("panel-footer-noborder");
	    }
	    _223.addClass(opts.headerCls);
	    body.addClass(opts.bodyCls);
	    $(_21e).attr("id", opts.id || "");
	    if (opts.content) {
	      $(_21e).panel("clear");
	      $(_21e).html(opts.content);
	      $.parser.parse($(_21e));
	    }
	    function _221() {
	      if (opts.noheader || !opts.title && !opts.header) {
	        _20b(_220.children(".panel-header"));
	        _220.children(".panel-body").addClass("panel-body-noheader");
	      } else {
	        if (opts.header) {
	          $(opts.header).addClass("panel-header").prependTo(_220);
	        } else {
	          var _225 = _220.children(".panel-header");
	          if (!_225.length) {
	            _225 = $("<div class=\"panel-header\"></div>").prependTo(_220);
	          }
	          if (!$.isArray(opts.tools)) {
	            _225.find("div.panel-tool .panel-tool-a").appendTo(opts.tools);
	          }
	          _225.empty();
	          var _226 = $("<div class=\"panel-title\"></div>").html(opts.title).appendTo(_225);
	          if (opts.iconCls) {
	            _226.addClass("panel-with-icon");
	            $("<div class=\"panel-icon\"></div>").addClass(opts.iconCls).appendTo(_225);
	          }
	          var tool = $("<div class=\"panel-tool\"></div>").appendTo(_225);
	          tool.bind("click", function (e) {
	            e.stopPropagation();
	          });
	          if (opts.tools) {
	            if ($.isArray(opts.tools)) {
	              $.map(opts.tools, function (t) {
	                _227(tool, t.iconCls, eval(t.handler));
	              });
	            } else {
	              $(opts.tools).children().each(function () {
	                $(this).addClass($(this).attr("iconCls")).addClass("panel-tool-a").appendTo(tool);
	              });
	            }
	          }
	          if (opts.collapsible) {
	            _227(tool, "panel-tool-collapse", function () {
	              if (opts.collapsed == true) {
	                _245(_21e, true);
	              } else {
	                _238(_21e, true);
	              }
	            });
	          }
	          if (opts.minimizable) {
	            _227(tool, "panel-tool-min", function () {
	              _24b(_21e);
	            });
	          }
	          if (opts.maximizable) {
	            _227(tool, "panel-tool-max", function () {
	              if (opts.maximized == true) {
	                _24e(_21e);
	              } else {
	                _237(_21e);
	              }
	            });
	          }
	          if (opts.closable) {
	            _227(tool, "panel-tool-close", function () {
	              _239(_21e);
	            });
	          }
	        }
	        _220.children("div.panel-body").removeClass("panel-body-noheader");
	      }
	    };
	    function _227(c, icon, _228) {
	      var a = $("<a href=\"javascript:void(0)\"></a>").addClass(icon).appendTo(c);
	      a.bind("click", _228);
	    };
	    function _222() {
	      if (opts.footer) {
	        $(opts.footer).addClass("panel-footer").appendTo(_220);
	        $(_21e).addClass("panel-body-nobottom");
	      } else {
	        _220.children(".panel-footer").remove();
	        $(_21e).removeClass("panel-body-nobottom");
	      }
	    };
	  };
	  function _229(_22a, _22b) {
	    var _22c = $.data(_22a, "panel");
	    var opts = _22c.options;
	    if (_22d) {
	      opts.queryParams = _22b;
	    }
	    if (!opts.href) {
	      return;
	    }
	    if (!_22c.isLoaded || !opts.cache) {
	      var _22d = $.extend({}, opts.queryParams);
	      if (opts.onBeforeLoad.call(_22a, _22d) == false) {
	        return;
	      }
	      _22c.isLoaded = false;
	      $(_22a).panel("clear");
	      if (opts.loadingMessage) {
	        $(_22a).html($("<div class=\"panel-loading\"></div>").html(opts.loadingMessage));
	      }
	      opts.loader.call(_22a, _22d, function (data) {
	        var _22e = opts.extractor.call(_22a, data);
	        $(_22a).html(_22e);
	        $.parser.parse($(_22a));
	        opts.onLoad.apply(_22a, arguments);
	        _22c.isLoaded = true;
	      }, function () {
	        opts.onLoadError.apply(_22a, arguments);
	      });
	    }
	  };
	  function _22f(_230) {
	    var t = $(_230);
	    t.find(".combo-f").each(function () {
	      $(this).combo("destroy");
	    });
	    t.find(".m-btn").each(function () {
	      $(this).menubutton("destroy");
	    });
	    t.find(".s-btn").each(function () {
	      $(this).splitbutton("destroy");
	    });
	    t.find(".tooltip-f").each(function () {
	      $(this).tooltip("destroy");
	    });
	    t.children("div").each(function () {
	      $(this)._size("unfit");
	    });
	    t.empty();
	  };
	  function _231(_232) {
	    $(_232).panel("doLayout", true);
	  };
	  function _233(_234, _235) {
	    var opts = $.data(_234, "panel").options;
	    var _236 = $.data(_234, "panel").panel;
	    if (_235 != true) {
	      if (opts.onBeforeOpen.call(_234) == false) {
	        return;
	      }
	    }
	    _236.stop(true, true);
	    if ($.isFunction(opts.openAnimation)) {
	      opts.openAnimation.call(_234, cb);
	    } else {
	      switch (opts.openAnimation) {
	        case "slide":
	          _236.slideDown(opts.openDuration, cb);
	          break;
	        case "fade":
	          _236.fadeIn(opts.openDuration, cb);
	          break;
	        case "show":
	          _236.show(opts.openDuration, cb);
	          break;
	        default:
	          _236.show();
	          cb();
	      }
	    }
	    function cb() {
	      opts.closed = false;
	      opts.minimized = false;
	      var tool = _236.children(".panel-header").find("a.panel-tool-restore");
	      if (tool.length) {
	        opts.maximized = true;
	      }
	      opts.onOpen.call(_234);
	      if (opts.maximized == true) {
	        opts.maximized = false;
	        _237(_234);
	      }
	      if (opts.collapsed == true) {
	        opts.collapsed = false;
	        _238(_234);
	      }
	      if (!opts.collapsed) {
	        _229(_234);
	        _231(_234);
	      }
	    };
	  };
	  function _239(_23a, _23b) {
	    var opts = $.data(_23a, "panel").options;
	    var _23c = $.data(_23a, "panel").panel;
	    if (_23b != true) {
	      if (opts.onBeforeClose.call(_23a) == false) {
	        return;
	      }
	    }
	    _23c.stop(true, true);
	    _23c._size("unfit");
	    if ($.isFunction(opts.closeAnimation)) {
	      opts.closeAnimation.call(_23a, cb);
	    } else {
	      switch (opts.closeAnimation) {
	        case "slide":
	          _23c.slideUp(opts.closeDuration, cb);
	          break;
	        case "fade":
	          _23c.fadeOut(opts.closeDuration, cb);
	          break;
	        case "hide":
	          _23c.hide(opts.closeDuration, cb);
	          break;
	        default:
	          _23c.hide();
	          cb();
	      }
	    }
	    function cb() {
	      opts.closed = true;
	      opts.onClose.call(_23a);
	    };
	  };
	  function _23d(_23e, _23f) {
	    var _240 = $.data(_23e, "panel");
	    var opts = _240.options;
	    var _241 = _240.panel;
	    if (_23f != true) {
	      if (opts.onBeforeDestroy.call(_23e) == false) {
	        return;
	      }
	    }
	    $(_23e).panel("clear").panel("clear", "footer");
	    _20b(_241);
	    opts.onDestroy.call(_23e);
	  };
	  function _238(_242, _243) {
	    var opts = $.data(_242, "panel").options;
	    var _244 = $.data(_242, "panel").panel;
	    var body = _244.children(".panel-body");
	    var tool = _244.children(".panel-header").find("a.panel-tool-collapse");
	    if (opts.collapsed == true) {
	      return;
	    }
	    body.stop(true, true);
	    if (opts.onBeforeCollapse.call(_242) == false) {
	      return;
	    }
	    tool.addClass("panel-tool-expand");
	    if (_243 == true) {
	      body.slideUp("normal", function () {
	        opts.collapsed = true;
	        opts.onCollapse.call(_242);
	      });
	    } else {
	      body.hide();
	      opts.collapsed = true;
	      opts.onCollapse.call(_242);
	    }
	  };
	  function _245(_246, _247) {
	    var opts = $.data(_246, "panel").options;
	    var _248 = $.data(_246, "panel").panel;
	    var body = _248.children(".panel-body");
	    var tool = _248.children(".panel-header").find("a.panel-tool-collapse");
	    if (opts.collapsed == false) {
	      return;
	    }
	    body.stop(true, true);
	    if (opts.onBeforeExpand.call(_246) == false) {
	      return;
	    }
	    tool.removeClass("panel-tool-expand");
	    if (_247 == true) {
	      body.slideDown("normal", function () {
	        opts.collapsed = false;
	        opts.onExpand.call(_246);
	        _229(_246);
	        _231(_246);
	      });
	    } else {
	      body.show();
	      opts.collapsed = false;
	      opts.onExpand.call(_246);
	      _229(_246);
	      _231(_246);
	    }
	  };
	  function _237(_249) {
	    var opts = $.data(_249, "panel").options;
	    var _24a = $.data(_249, "panel").panel;
	    var tool = _24a.children(".panel-header").find("a.panel-tool-max");
	    if (opts.maximized == true) {
	      return;
	    }
	    tool.addClass("panel-tool-restore");
	    if (!$.data(_249, "panel").original) {
	      $.data(_249, "panel").original = { width: opts.width, height: opts.height, left: opts.left, top: opts.top, fit: opts.fit };
	    }
	    opts.left = 0;
	    opts.top = 0;
	    opts.fit = true;
	    _20c(_249);
	    opts.minimized = false;
	    opts.maximized = true;
	    opts.onMaximize.call(_249);
	  };
	  function _24b(_24c) {
	    var opts = $.data(_24c, "panel").options;
	    var _24d = $.data(_24c, "panel").panel;
	    _24d._size("unfit");
	    _24d.hide();
	    opts.minimized = true;
	    opts.maximized = false;
	    opts.onMinimize.call(_24c);
	  };
	  function _24e(_24f) {
	    var opts = $.data(_24f, "panel").options;
	    var _250 = $.data(_24f, "panel").panel;
	    var tool = _250.children(".panel-header").find("a.panel-tool-max");
	    if (opts.maximized == false) {
	      return;
	    }
	    _250.show();
	    tool.removeClass("panel-tool-restore");
	    $.extend(opts, $.data(_24f, "panel").original);
	    _20c(_24f);
	    opts.minimized = false;
	    opts.maximized = false;
	    $.data(_24f, "panel").original = null;
	    opts.onRestore.call(_24f);
	  };
	  function _251(_252, _253) {
	    $.data(_252, "panel").options.title = _253;
	    $(_252).panel("header").find("div.panel-title").html(_253);
	  };
	  var _254 = null;
	  $(window).unbind(".panel").bind("resize.panel", function () {
	    if (_254) {
	      clearTimeout(_254);
	    }
	    _254 = setTimeout(function () {
	      var _255 = $("body.layout");
	      if (_255.length) {
	        _255.layout("resize");
	        $("body").children(".easyui-fluid:visible").each(function () {
	          $(this).triggerHandler("_resize");
	        });
	      } else {
	        $("body").panel("doLayout");
	      }
	      _254 = null;
	    }, 100);
	  });
	  $.fn.panel = function (_256, _257) {
	    if (typeof _256 == "string") {
	      return $.fn.panel.methods[_256](this, _257);
	    }
	    _256 = _256 || {};
	    return this.each(function () {
	      var _258 = $.data(this, "panel");
	      var opts;
	      if (_258) {
	        opts = $.extend(_258.options, _256);
	        _258.isLoaded = false;
	      } else {
	        opts = $.extend({}, $.fn.panel.defaults, $.fn.panel.parseOptions(this), _256);
	        $(this).attr("title", "");
	        _258 = $.data(this, "panel", { options: opts, panel: _219(this), isLoaded: false });
	      }
	      _21d(this);
	      if (opts.doSize == true) {
	        _258.panel.css("display", "block");
	        _20c(this);
	      }
	      if (opts.closed == true || opts.minimized == true) {
	        _258.panel.hide();
	      } else {
	        _233(this);
	      }
	    });
	  };
	  $.fn.panel.methods = { options: function options(jq) {
	      return $.data(jq[0], "panel").options;
	    }, panel: function panel(jq) {
	      return $.data(jq[0], "panel").panel;
	    }, header: function header(jq) {
	      return $.data(jq[0], "panel").panel.children(".panel-header");
	    }, footer: function footer(jq) {
	      return jq.panel("panel").children(".panel-footer");
	    }, body: function body(jq) {
	      return $.data(jq[0], "panel").panel.children(".panel-body");
	    }, setTitle: function setTitle(jq, _259) {
	      return jq.each(function () {
	        _251(this, _259);
	      });
	    }, open: function open(jq, _25a) {
	      return jq.each(function () {
	        _233(this, _25a);
	      });
	    }, close: function close(jq, _25b) {
	      return jq.each(function () {
	        _239(this, _25b);
	      });
	    }, destroy: function destroy(jq, _25c) {
	      return jq.each(function () {
	        _23d(this, _25c);
	      });
	    }, clear: function clear(jq, type) {
	      return jq.each(function () {
	        _22f(type == "footer" ? $(this).panel("footer") : this);
	      });
	    }, refresh: function refresh(jq, href) {
	      return jq.each(function () {
	        var _25d = $.data(this, "panel");
	        _25d.isLoaded = false;
	        if (href) {
	          if (typeof href == "string") {
	            _25d.options.href = href;
	          } else {
	            _25d.options.queryParams = href;
	          }
	        }
	        _229(this);
	      });
	    }, resize: function resize(jq, _25e) {
	      return jq.each(function () {
	        _20c(this, _25e);
	      });
	    }, doLayout: function doLayout(jq, all) {
	      return jq.each(function () {
	        _25f(this, "body");
	        _25f($(this).siblings(".panel-footer")[0], "footer");
	        function _25f(_260, type) {
	          if (!_260) {
	            return;
	          }
	          var _261 = _260 == $("body")[0];
	          var s = $(_260).find("div.panel:visible,div.accordion:visible,div.tabs-container:visible,div.layout:visible,.easyui-fluid:visible").filter(function (_262, el) {
	            var p = $(el).parents(".panel-" + type + ":first");
	            return _261 ? p.length == 0 : p[0] == _260;
	          });
	          s.each(function () {
	            $(this).triggerHandler("_resize", [all || false]);
	          });
	        };
	      });
	    }, move: function move(jq, _263) {
	      return jq.each(function () {
	        _215(this, _263);
	      });
	    }, maximize: function maximize(jq) {
	      return jq.each(function () {
	        _237(this);
	      });
	    }, minimize: function minimize(jq) {
	      return jq.each(function () {
	        _24b(this);
	      });
	    }, restore: function restore(jq) {
	      return jq.each(function () {
	        _24e(this);
	      });
	    }, collapse: function collapse(jq, _264) {
	      return jq.each(function () {
	        _238(this, _264);
	      });
	    }, expand: function expand(jq, _265) {
	      return jq.each(function () {
	        _245(this, _265);
	      });
	    } };
	  $.fn.panel.parseOptions = function (_266) {
	    var t = $(_266);
	    var hh = t.children(".panel-header,header");
	    var ff = t.children(".panel-footer,footer");
	    return $.extend({}, $.parser.parseOptions(_266, ["id", "width", "height", "left", "top", "title", "iconCls", "cls", "headerCls", "bodyCls", "tools", "href", "method", "header", "footer", { cache: "boolean", fit: "boolean", border: "boolean", noheader: "boolean" }, { collapsible: "boolean", minimizable: "boolean", maximizable: "boolean" }, { closable: "boolean", collapsed: "boolean", minimized: "boolean", maximized: "boolean", closed: "boolean" }, "openAnimation", "closeAnimation", { openDuration: "number", closeDuration: "number" }]), { loadingMessage: t.attr("loadingMessage") != undefined ? t.attr("loadingMessage") : undefined, header: hh.length ? hh.removeClass("panel-header") : undefined, footer: ff.length ? ff.removeClass("panel-footer") : undefined });
	  };
	  $.fn.panel.defaults = (_$$fn$panel$defaults = { id: null, title: null, iconCls: null, width: "auto", height: "auto", left: null, top: null, cls: null, headerCls: null, bodyCls: null, style: {}, href: null, cache: true, fit: false, border: true, doSize: true, noheader: false, content: null, collapsible: false, minimizable: false, maximizable: false, closable: false, collapsed: false, minimized: false, maximized: false, closed: false, openAnimation: false, openDuration: 400, closeAnimation: false, closeDuration: 400, tools: null, footer: null, header: null, queryParams: {}, method: "get" }, _defineProperty(_$$fn$panel$defaults, "href", null), _defineProperty(_$$fn$panel$defaults, "loadingMessage", "Loading..."), _defineProperty(_$$fn$panel$defaults, "loader", function loader(_267, _268, _269) {
	    var opts = $(this).panel("options");
	    if (!opts.href) {
	      return false;
	    }
	    $.ajax({ type: opts.method, url: opts.href, cache: false, data: _267, dataType: "html", success: function success(data) {
	        _268(data);
	      }, error: function error() {
	        _269.apply(this, arguments);
	      } });
	  }), _defineProperty(_$$fn$panel$defaults, "extractor", function extractor(data) {
	    var _26a = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
	    var _26b = _26a.exec(data);
	    if (_26b) {
	      return _26b[1];
	    } else {
	      return data;
	    }
	  }), _defineProperty(_$$fn$panel$defaults, "onBeforeLoad", function onBeforeLoad(_26c) {}), _defineProperty(_$$fn$panel$defaults, "onLoad", function onLoad() {}), _defineProperty(_$$fn$panel$defaults, "onLoadError", function onLoadError() {}), _defineProperty(_$$fn$panel$defaults, "onBeforeOpen", function onBeforeOpen() {}), _defineProperty(_$$fn$panel$defaults, "onOpen", function onOpen() {}), _defineProperty(_$$fn$panel$defaults, "onBeforeClose", function onBeforeClose() {}), _defineProperty(_$$fn$panel$defaults, "onClose", function onClose() {}), _defineProperty(_$$fn$panel$defaults, "onBeforeDestroy", function onBeforeDestroy() {}), _defineProperty(_$$fn$panel$defaults, "onDestroy", function onDestroy() {}), _defineProperty(_$$fn$panel$defaults, "onResize", function onResize(_26d, _26e) {}), _defineProperty(_$$fn$panel$defaults, "onMove", function onMove(left, top) {}), _defineProperty(_$$fn$panel$defaults, "onMaximize", function onMaximize() {}), _defineProperty(_$$fn$panel$defaults, "onRestore", function onRestore() {}), _defineProperty(_$$fn$panel$defaults, "onMinimize", function onMinimize() {}), _defineProperty(_$$fn$panel$defaults, "onBeforeCollapse", function onBeforeCollapse() {}), _defineProperty(_$$fn$panel$defaults, "onBeforeExpand", function onBeforeExpand() {}), _defineProperty(_$$fn$panel$defaults, "onCollapse", function onCollapse() {}), _defineProperty(_$$fn$panel$defaults, "onExpand", function onExpand() {}), _$$fn$panel$defaults);
	})(jQuery);
	(function ($) {
	  function _26f(_270, _271) {
	    var _272 = $.data(_270, "window");
	    if (_271) {
	      if (_271.left != null) {
	        _272.options.left = _271.left;
	      }
	      if (_271.top != null) {
	        _272.options.top = _271.top;
	      }
	    }
	    $(_270).panel("move", _272.options);
	    if (_272.shadow) {
	      _272.shadow.css({ left: _272.options.left, top: _272.options.top });
	    }
	  };
	  function _273(_274, _275) {
	    var opts = $.data(_274, "window").options;
	    var pp = $(_274).window("panel");
	    var _276 = pp._outerWidth();
	    if (opts.inline) {
	      var _277 = pp.parent();
	      opts.left = Math.ceil((_277.width() - _276) / 2 + _277.scrollLeft());
	    } else {
	      opts.left = Math.ceil(($(window)._outerWidth() - _276) / 2 + $(document).scrollLeft());
	    }
	    if (_275) {
	      _26f(_274);
	    }
	  };
	  function _278(_279, _27a) {
	    var opts = $.data(_279, "window").options;
	    var pp = $(_279).window("panel");
	    var _27b = pp._outerHeight();
	    if (opts.inline) {
	      var _27c = pp.parent();
	      opts.top = Math.ceil((_27c.height() - _27b) / 2 + _27c.scrollTop());
	    } else {
	      opts.top = Math.ceil(($(window)._outerHeight() - _27b) / 2 + $(document).scrollTop());
	    }
	    if (_27a) {
	      _26f(_279);
	    }
	  };
	  function _27d(_27e) {
	    var _27f = $.data(_27e, "window");
	    var opts = _27f.options;
	    var win = $(_27e).panel($.extend({}, _27f.options, { border: false, doSize: true, closed: true, cls: "window", headerCls: "window-header", bodyCls: "window-body " + (opts.noheader ? "window-body-noheader" : ""), onBeforeDestroy: function onBeforeDestroy() {
	        if (opts.onBeforeDestroy.call(_27e) == false) {
	          return false;
	        }
	        if (_27f.shadow) {
	          _27f.shadow.remove();
	        }
	        if (_27f.mask) {
	          _27f.mask.remove();
	        }
	      }, onClose: function onClose() {
	        if (_27f.shadow) {
	          _27f.shadow.hide();
	        }
	        if (_27f.mask) {
	          _27f.mask.hide();
	        }
	        opts.onClose.call(_27e);
	      }, onOpen: function onOpen() {
	        if (_27f.mask) {
	          _27f.mask.css({ display: "block", zIndex: $.fn.window.defaults.zIndex++ });
	        }
	        if (_27f.shadow) {
	          _27f.shadow.css({ display: "block", zIndex: $.fn.window.defaults.zIndex++, left: opts.left, top: opts.top, width: _27f.window._outerWidth(), height: _27f.window._outerHeight() });
	        }
	        _27f.window.css("z-index", $.fn.window.defaults.zIndex++);
	        opts.onOpen.call(_27e);
	      }, onResize: function onResize(_280, _281) {
	        var _282 = $(this).panel("options");
	        $.extend(opts, { width: _282.width, height: _282.height, left: _282.left, top: _282.top });
	        if (_27f.shadow) {
	          _27f.shadow.css({ left: opts.left, top: opts.top, width: _27f.window._outerWidth(), height: _27f.window._outerHeight() });
	        }
	        opts.onResize.call(_27e, _280, _281);
	      }, onMinimize: function onMinimize() {
	        if (_27f.shadow) {
	          _27f.shadow.hide();
	        }
	        if (_27f.mask) {
	          _27f.mask.hide();
	        }
	        _27f.options.onMinimize.call(_27e);
	      }, onBeforeCollapse: function onBeforeCollapse() {
	        if (opts.onBeforeCollapse.call(_27e) == false) {
	          return false;
	        }
	        if (_27f.shadow) {
	          _27f.shadow.hide();
	        }
	      }, onExpand: function onExpand() {
	        if (_27f.shadow) {
	          _27f.shadow.show();
	        }
	        opts.onExpand.call(_27e);
	      } }));
	    _27f.window = win.panel("panel");
	    if (_27f.mask) {
	      _27f.mask.remove();
	    }
	    if (opts.modal == true) {
	      _27f.mask = $("<div class=\"window-mask\"></div>").insertAfter(_27f.window);
	      _27f.mask.css({ width: opts.inline ? _27f.mask.parent().width() : _283().width, height: opts.inline ? _27f.mask.parent().height() : _283().height, display: "none" });
	    }
	    if (_27f.shadow) {
	      _27f.shadow.remove();
	    }
	    if (opts.shadow == true) {
	      _27f.shadow = $("<div class=\"window-shadow\"></div>").insertAfter(_27f.window);
	      _27f.shadow.css({ display: "none" });
	    }
	    if (opts.left == null) {
	      _273(_27e);
	    }
	    if (opts.top == null) {
	      _278(_27e);
	    }
	    _26f(_27e);
	    if (!opts.closed) {
	      win.window("open");
	    }
	  };
	  function _284(_285) {
	    var _286 = $.data(_285, "window");
	    _286.window.draggable({ handle: ">div.panel-header>div.panel-title", disabled: _286.options.draggable == false, onStartDrag: function onStartDrag(e) {
	        if (_286.mask) {
	          _286.mask.css("z-index", $.fn.window.defaults.zIndex++);
	        }
	        if (_286.shadow) {
	          _286.shadow.css("z-index", $.fn.window.defaults.zIndex++);
	        }
	        _286.window.css("z-index", $.fn.window.defaults.zIndex++);
	        if (!_286.proxy) {
	          _286.proxy = $("<div class=\"window-proxy\"></div>").insertAfter(_286.window);
	        }
	        _286.proxy.css({ display: "none", zIndex: $.fn.window.defaults.zIndex++, left: e.data.left, top: e.data.top });
	        _286.proxy._outerWidth(_286.window._outerWidth());
	        _286.proxy._outerHeight(_286.window._outerHeight());
	        setTimeout(function () {
	          if (_286.proxy) {
	            _286.proxy.show();
	          }
	        }, 500);
	      }, onDrag: function onDrag(e) {
	        _286.proxy.css({ display: "block", left: e.data.left, top: e.data.top });
	        return false;
	      }, onStopDrag: function onStopDrag(e) {
	        _286.options.left = e.data.left;
	        _286.options.top = e.data.top;
	        $(_285).window("move");
	        _286.proxy.remove();
	        _286.proxy = null;
	      } });
	    _286.window.resizable({ disabled: _286.options.resizable == false, onStartResize: function onStartResize(e) {
	        if (_286.pmask) {
	          _286.pmask.remove();
	        }
	        _286.pmask = $("<div class=\"window-proxy-mask\"></div>").insertAfter(_286.window);
	        _286.pmask.css({ zIndex: $.fn.window.defaults.zIndex++, left: e.data.left, top: e.data.top, width: _286.window._outerWidth(), height: _286.window._outerHeight() });
	        if (_286.proxy) {
	          _286.proxy.remove();
	        }
	        _286.proxy = $("<div class=\"window-proxy\"></div>").insertAfter(_286.window);
	        _286.proxy.css({ zIndex: $.fn.window.defaults.zIndex++, left: e.data.left, top: e.data.top });
	        _286.proxy._outerWidth(e.data.width)._outerHeight(e.data.height);
	      }, onResize: function onResize(e) {
	        _286.proxy.css({ left: e.data.left, top: e.data.top });
	        _286.proxy._outerWidth(e.data.width);
	        _286.proxy._outerHeight(e.data.height);
	        return false;
	      }, onStopResize: function onStopResize(e) {
	        $(_285).window("resize", e.data);
	        _286.pmask.remove();
	        _286.pmask = null;
	        _286.proxy.remove();
	        _286.proxy = null;
	      } });
	  };
	  function _283() {
	    if (document.compatMode == "BackCompat") {
	      return { width: Math.max(document.body.scrollWidth, document.body.clientWidth), height: Math.max(document.body.scrollHeight, document.body.clientHeight) };
	    } else {
	      return { width: Math.max(document.documentElement.scrollWidth, document.documentElement.clientWidth), height: Math.max(document.documentElement.scrollHeight, document.documentElement.clientHeight) };
	    }
	  };
	  $(window).resize(function () {
	    $("body>div.window-mask").css({ width: $(window)._outerWidth(), height: $(window)._outerHeight() });
	    setTimeout(function () {
	      $("body>div.window-mask").css({ width: _283().width, height: _283().height });
	    }, 50);
	  });
	  $.fn.window = function (_287, _288) {
	    if (typeof _287 == "string") {
	      var _289 = $.fn.window.methods[_287];
	      if (_289) {
	        return _289(this, _288);
	      } else {
	        return this.panel(_287, _288);
	      }
	    }
	    _287 = _287 || {};
	    return this.each(function () {
	      var _28a = $.data(this, "window");
	      if (_28a) {
	        $.extend(_28a.options, _287);
	      } else {
	        _28a = $.data(this, "window", { options: $.extend({}, $.fn.window.defaults, $.fn.window.parseOptions(this), _287) });
	        if (!_28a.options.inline) {
	          document.body.appendChild(this);
	        }
	      }
	      _27d(this);
	      _284(this);
	    });
	  };
	  $.fn.window.methods = { options: function options(jq) {
	      var _28b = jq.panel("options");
	      var _28c = $.data(jq[0], "window").options;
	      return $.extend(_28c, { closed: _28b.closed, collapsed: _28b.collapsed, minimized: _28b.minimized, maximized: _28b.maximized });
	    }, window: function window(jq) {
	      return $.data(jq[0], "window").window;
	    }, move: function move(jq, _28d) {
	      return jq.each(function () {
	        _26f(this, _28d);
	      });
	    }, hcenter: function hcenter(jq) {
	      return jq.each(function () {
	        _273(this, true);
	      });
	    }, vcenter: function vcenter(jq) {
	      return jq.each(function () {
	        _278(this, true);
	      });
	    }, center: function center(jq) {
	      return jq.each(function () {
	        _273(this);
	        _278(this);
	        _26f(this);
	      });
	    } };
	  $.fn.window.parseOptions = function (_28e) {
	    return $.extend({}, $.fn.panel.parseOptions(_28e), $.parser.parseOptions(_28e, [{ draggable: "boolean", resizable: "boolean", shadow: "boolean", modal: "boolean", inline: "boolean" }]));
	  };
	  $.fn.window.defaults = $.extend({}, $.fn.panel.defaults, { zIndex: 9000, draggable: true, resizable: true, shadow: true, modal: false, inline: false, title: "New Window", collapsible: true, minimizable: true, maximizable: true, closable: true, closed: false });
	})(jQuery);
	(function ($) {
	  function _28f(_290) {
	    var opts = $.data(_290, "dialog").options;
	    opts.inited = false;
	    $(_290).window($.extend({}, opts, { onResize: function onResize(w, h) {
	        if (opts.inited) {
	          _295(this);
	          opts.onResize.call(this, w, h);
	        }
	      } }));
	    var win = $(_290).window("window");
	    if (opts.toolbar) {
	      if ($.isArray(opts.toolbar)) {
	        $(_290).siblings("div.dialog-toolbar").remove();
	        var _291 = $("<div class=\"dialog-toolbar\"><table cellspacing=\"0\" cellpadding=\"0\"><tr></tr></table></div>").appendTo(win);
	        var tr = _291.find("tr");
	        for (var i = 0; i < opts.toolbar.length; i++) {
	          var btn = opts.toolbar[i];
	          if (btn == "-") {
	            $("<td><div class=\"dialog-tool-separator\"></div></td>").appendTo(tr);
	          } else {
	            var td = $("<td></td>").appendTo(tr);
	            var tool = $("<a href=\"javascript:void(0)\"></a>").appendTo(td);
	            tool[0].onclick = eval(btn.handler || function () {});
	            tool.linkbutton($.extend({}, btn, { plain: true }));
	          }
	        }
	      } else {
	        $(opts.toolbar).addClass("dialog-toolbar").appendTo(win);
	        $(opts.toolbar).show();
	      }
	    } else {
	      $(_290).siblings("div.dialog-toolbar").remove();
	    }
	    if (opts.buttons) {
	      if ($.isArray(opts.buttons)) {
	        $(_290).siblings("div.dialog-button").remove();
	        var _292 = $("<div class=\"dialog-button\"></div>").appendTo(win);
	        for (var i = 0; i < opts.buttons.length; i++) {
	          var p = opts.buttons[i];
	          var _293 = $("<a href=\"javascript:void(0)\"></a>").appendTo(_292);
	          if (p.handler) {
	            _293[0].onclick = p.handler;
	          }
	          _293.linkbutton(p);
	        }
	      } else {
	        $(opts.buttons).addClass("dialog-button").appendTo(win);
	        $(opts.buttons).show();
	      }
	    } else {
	      $(_290).siblings("div.dialog-button").remove();
	    }
	    opts.inited = true;
	    var _294 = opts.closed;
	    win.show();
	    $(_290).window("resize");
	    if (_294) {
	      win.hide();
	    }
	  };
	  function _295(_296, _297) {
	    var t = $(_296);
	    var opts = t.dialog("options");
	    var _298 = opts.noheader;
	    var tb = t.siblings(".dialog-toolbar");
	    var bb = t.siblings(".dialog-button");
	    tb.insertBefore(_296).css({ position: "relative", borderTopWidth: _298 ? 1 : 0, top: _298 ? tb.length : 0 });
	    bb.insertAfter(_296).css({ position: "relative", top: -1 });
	    tb.add(bb)._outerWidth(t._outerWidth()).find(".easyui-fluid:visible").each(function () {
	      $(this).triggerHandler("_resize");
	    });
	    if (!isNaN(parseInt(opts.height))) {
	      t._outerHeight(t._outerHeight() - tb._outerHeight() - bb._outerHeight());
	    }
	    var _299 = $.data(_296, "window").shadow;
	    if (_299) {
	      var cc = t.panel("panel");
	      _299.css({ width: cc._outerWidth(), height: cc._outerHeight() });
	    }
	  };
	  $.fn.dialog = function (_29a, _29b) {
	    if (typeof _29a == "string") {
	      var _29c = $.fn.dialog.methods[_29a];
	      if (_29c) {
	        return _29c(this, _29b);
	      } else {
	        return this.window(_29a, _29b);
	      }
	    }
	    _29a = _29a || {};
	    return this.each(function () {
	      var _29d = $.data(this, "dialog");
	      if (_29d) {
	        $.extend(_29d.options, _29a);
	      } else {
	        $.data(this, "dialog", { options: $.extend({}, $.fn.dialog.defaults, $.fn.dialog.parseOptions(this), _29a) });
	      }
	      _28f(this);
	    });
	  };
	  $.fn.dialog.methods = { options: function options(jq) {
	      var _29e = $.data(jq[0], "dialog").options;
	      var _29f = jq.panel("options");
	      $.extend(_29e, { width: _29f.width, height: _29f.height, left: _29f.left, top: _29f.top, closed: _29f.closed, collapsed: _29f.collapsed, minimized: _29f.minimized, maximized: _29f.maximized });
	      return _29e;
	    }, dialog: function dialog(jq) {
	      return jq.window("window");
	    } };
	  $.fn.dialog.parseOptions = function (_2a0) {
	    var t = $(_2a0);
	    return $.extend({}, $.fn.window.parseOptions(_2a0), $.parser.parseOptions(_2a0, ["toolbar", "buttons"]), { toolbar: t.children(".dialog-toolbar").length ? t.children(".dialog-toolbar").removeClass("dialog-toolbar") : undefined, buttons: t.children(".dialog-button").length ? t.children(".dialog-button").removeClass("dialog-button") : undefined });
	  };
	  $.fn.dialog.defaults = $.extend({}, $.fn.window.defaults, { title: "New Dialog", collapsible: false, minimizable: false, maximizable: false, resizable: false, toolbar: null, buttons: null });
	})(jQuery);
	(function ($) {
	  function _2a1() {
	    $(document).unbind(".messager").bind("keydown.messager", function (e) {
	      if (e.keyCode == 27) {
	        $("body").children("div.messager-window").children("div.messager-body").each(function () {
	          $(this).window("close");
	        });
	      } else {
	        if (e.keyCode == 9) {
	          var win = $("body").children("div.messager-window").children("div.messager-body");
	          if (!win.length) {
	            return;
	          }
	          var _2a2 = win.find(".messager-input,.messager-button .l-btn");
	          for (var i = 0; i < _2a2.length; i++) {
	            if ($(_2a2[i]).is(":focus")) {
	              $(_2a2[i >= _2a2.length - 1 ? 0 : i + 1]).focus();
	              return false;
	            }
	          }
	        }
	      }
	    });
	  };
	  function _2a3() {
	    $(document).unbind(".messager");
	  };
	  function _2a4(_2a5) {
	    var opts = $.extend({}, $.messager.defaults, { modal: false, shadow: false, draggable: false, resizable: false, closed: true, style: { left: "", top: "", right: 0, zIndex: $.fn.window.defaults.zIndex++, bottom: -document.body.scrollTop - document.documentElement.scrollTop }, title: "", width: 250, height: 100, showType: "slide", showSpeed: 600, msg: "", timeout: 4000 }, _2a5);
	    var win = $("<div class=\"messager-body\"></div>").html(opts.msg).appendTo("body");
	    win.window($.extend({}, opts, { openAnimation: opts.showType, closeAnimation: opts.showType == "show" ? "hide" : opts.showType, openDuration: opts.showSpeed, closeDuration: opts.showSpeed, onOpen: function onOpen() {
	        win.window("window").hover(function () {
	          if (opts.timer) {
	            clearTimeout(opts.timer);
	          }
	        }, function () {
	          _2a6();
	        });
	        _2a6();
	        function _2a6() {
	          if (opts.timeout > 0) {
	            opts.timer = setTimeout(function () {
	              if (win.length && win.data("window")) {
	                win.window("close");
	              }
	            }, opts.timeout);
	          }
	        };
	        if (_2a5.onOpen) {
	          _2a5.onOpen.call(this);
	        } else {
	          opts.onOpen.call(this);
	        }
	      }, onClose: function onClose() {
	        if (opts.timer) {
	          clearTimeout(opts.timer);
	        }
	        if (_2a5.onClose) {
	          _2a5.onClose.call(this);
	        } else {
	          opts.onClose.call(this);
	        }
	        win.window("destroy");
	      } }));
	    win.window("window").css(opts.style);
	    win.window("open");
	    return win;
	  };
	  function _2a7(_2a8) {
	    _2a1();
	    var win = $("<div class=\"messager-body\"></div>").appendTo("body");
	    win.window($.extend({}, _2a8, { doSize: false, noheader: _2a8.title ? false : true, onClose: function onClose() {
	        _2a3();
	        if (_2a8.onClose) {
	          _2a8.onClose.call(this);
	        }
	        setTimeout(function () {
	          win.window("destroy");
	        }, 100);
	      } }));
	    if (_2a8.buttons && _2a8.buttons.length) {
	      var tb = $("<div class=\"messager-button\"></div>").appendTo(win);
	      $.map(_2a8.buttons, function (btn) {
	        $("<a href=\"javascript:void(0)\" style=\"margin-left:10px\"></a>").appendTo(tb).linkbutton(btn);
	      });
	    }
	    win.window("window").addClass("messager-window");
	    win.window("resize");
	    win.children("div.messager-button").children("a:first").focus();
	    return win;
	  };
	  $.messager = { show: function show(_2a9) {
	      return _2a4(_2a9);
	    }, alert: function alert(_2aa, msg, icon, fn) {
	      var opts = (typeof _2aa === "undefined" ? "undefined" : _typeof(_2aa)) == "object" ? _2aa : { title: _2aa, msg: msg, icon: icon, fn: fn };
	      var cls = opts.icon ? "messager-icon messager-" + opts.icon : "";
	      opts = $.extend({}, $.messager.defaults, { content: "<div class=\"" + cls + "\"></div>" + "<div>" + opts.msg + "</div>" + "<div style=\"clear:both;\"/>", buttons: [{ text: $.messager.defaults.ok, onClick: function onClick() {
	            win.window("close");
	            opts.fn();
	          } }] }, opts);
	      var win = _2a7(opts);
	      return win;
	    }, confirm: function confirm(_2ab, msg, fn) {
	      var opts = (typeof _2ab === "undefined" ? "undefined" : _typeof(_2ab)) == "object" ? _2ab : { title: _2ab, msg: msg, fn: fn };
	      opts = $.extend({}, $.messager.defaults, { content: "<div class=\"messager-icon messager-question\"></div>" + "<div>" + opts.msg + "</div>" + "<div style=\"clear:both;\"/>", buttons: [{ text: $.messager.defaults.ok, onClick: function onClick() {
	            win.window("close");
	            opts.fn(true);
	          } }, { text: $.messager.defaults.cancel, onClick: function onClick() {
	            win.window("close");
	            opts.fn(false);
	          } }] }, opts);
	      var win = _2a7(opts);
	      return win;
	    }, prompt: function prompt(_2ac, msg, fn) {
	      var opts = (typeof _2ac === "undefined" ? "undefined" : _typeof(_2ac)) == "object" ? _2ac : { title: _2ac, msg: msg, fn: fn };
	      opts = $.extend({}, $.messager.defaults, { content: "<div class=\"messager-icon messager-question\"></div>" + "<div>" + opts.msg + "</div>" + "<br/>" + "<div style=\"clear:both;\"/>" + "<div><input class=\"messager-input\" type=\"text\"/></div>", buttons: [{ text: $.messager.defaults.ok, onClick: function onClick() {
	            win.window("close");
	            opts.fn(win.find(".messager-input").val());
	          } }, { text: $.messager.defaults.cancel, onClick: function onClick() {
	            win.window("close");
	            opts.fn();
	          } }] }, opts);
	      var win = _2a7(opts);
	      win.find("input.messager-input").focus();
	      return win;
	    }, progress: function progress(_2ad) {
	      var _2ae = { bar: function bar() {
	          return $("body>div.messager-window").find("div.messager-p-bar");
	        }, close: function close() {
	          var win = $("body>div.messager-window>div.messager-body:has(div.messager-progress)");
	          if (win.length) {
	            win.window("close");
	          }
	        } };
	      if (typeof _2ad == "string") {
	        var _2af = _2ae[_2ad];
	        return _2af();
	      }
	      var opts = $.extend({}, { title: "", content: undefined, msg: "", text: undefined, interval: 300 }, _2ad || {});
	      var win = _2a7($.extend({}, $.messager.defaults, { content: "<div class=\"messager-progress\"><div class=\"messager-p-msg\">" + opts.msg + "</div><div class=\"messager-p-bar\"></div></div>", closable: false, doSize: false }, opts, { onClose: function onClose() {
	          if (this.timer) {
	            clearInterval(this.timer);
	          }
	          if (_2ad.onClose) {
	            _2ad.onClose.call(this);
	          } else {
	            $.messager.defaults.onClose.call(this);
	          }
	        } }));
	      var bar = win.find("div.messager-p-bar");
	      bar.progressbar({ text: opts.text });
	      win.window("resize");
	      if (opts.interval) {
	        win[0].timer = setInterval(function () {
	          var v = bar.progressbar("getValue");
	          v += 10;
	          if (v > 100) {
	            v = 0;
	          }
	          bar.progressbar("setValue", v);
	        }, opts.interval);
	      }
	      return win;
	    } };
	  $.messager.defaults = $.extend({}, $.fn.window.defaults, { ok: "Ok", cancel: "Cancel", width: 300, height: "auto", modal: true, collapsible: false, minimizable: false, maximizable: false, resizable: false, fn: function fn() {} });
	})(jQuery);
	(function ($) {
	  function _2b0(_2b1, _2b2) {
	    var _2b3 = $.data(_2b1, "accordion");
	    var opts = _2b3.options;
	    var _2b4 = _2b3.panels;
	    var cc = $(_2b1);
	    if (_2b2) {
	      $.extend(opts, { width: _2b2.width, height: _2b2.height });
	    }
	    cc._size(opts);
	    var _2b5 = 0;
	    var _2b6 = "auto";
	    var _2b7 = cc.find(">.panel>.accordion-header");
	    if (_2b7.length) {
	      _2b5 = $(_2b7[0]).css("height", "")._outerHeight();
	    }
	    if (!isNaN(parseInt(opts.height))) {
	      _2b6 = cc.height() - _2b5 * _2b7.length;
	    }
	    _2b8(true, _2b6 - _2b8(false) + 1);
	    function _2b8(_2b9, _2ba) {
	      var _2bb = 0;
	      for (var i = 0; i < _2b4.length; i++) {
	        var p = _2b4[i];
	        var h = p.panel("header")._outerHeight(_2b5);
	        if (p.panel("options").collapsible == _2b9) {
	          var _2bc = isNaN(_2ba) ? undefined : _2ba + _2b5 * h.length;
	          p.panel("resize", { width: cc.width(), height: _2b9 ? _2bc : undefined });
	          _2bb += p.panel("panel").outerHeight() - _2b5 * h.length;
	        }
	      }
	      return _2bb;
	    };
	  };
	  function _2bd(_2be, _2bf, _2c0, all) {
	    var _2c1 = $.data(_2be, "accordion").panels;
	    var pp = [];
	    for (var i = 0; i < _2c1.length; i++) {
	      var p = _2c1[i];
	      if (_2bf) {
	        if (p.panel("options")[_2bf] == _2c0) {
	          pp.push(p);
	        }
	      } else {
	        if (p[0] == $(_2c0)[0]) {
	          return i;
	        }
	      }
	    }
	    if (_2bf) {
	      return all ? pp : pp.length ? pp[0] : null;
	    } else {
	      return -1;
	    }
	  };
	  function _2c2(_2c3) {
	    return _2bd(_2c3, "collapsed", false, true);
	  };
	  function _2c4(_2c5) {
	    var pp = _2c2(_2c5);
	    return pp.length ? pp[0] : null;
	  };
	  function _2c6(_2c7, _2c8) {
	    return _2bd(_2c7, null, _2c8);
	  };
	  function _2c9(_2ca, _2cb) {
	    var _2cc = $.data(_2ca, "accordion").panels;
	    if (typeof _2cb == "number") {
	      if (_2cb < 0 || _2cb >= _2cc.length) {
	        return null;
	      } else {
	        return _2cc[_2cb];
	      }
	    }
	    return _2bd(_2ca, "title", _2cb);
	  };
	  function _2cd(_2ce) {
	    var opts = $.data(_2ce, "accordion").options;
	    var cc = $(_2ce);
	    if (opts.border) {
	      cc.removeClass("accordion-noborder");
	    } else {
	      cc.addClass("accordion-noborder");
	    }
	  };
	  function init(_2cf) {
	    var _2d0 = $.data(_2cf, "accordion");
	    var cc = $(_2cf);
	    cc.addClass("accordion");
	    _2d0.panels = [];
	    cc.children("div").each(function () {
	      var opts = $.extend({}, $.parser.parseOptions(this), { selected: $(this).attr("selected") ? true : undefined });
	      var pp = $(this);
	      _2d0.panels.push(pp);
	      _2d2(_2cf, pp, opts);
	    });
	    cc.bind("_resize", function (e, _2d1) {
	      if ($(this).hasClass("easyui-fluid") || _2d1) {
	        _2b0(_2cf);
	      }
	      return false;
	    });
	  };
	  function _2d2(_2d3, pp, _2d4) {
	    var opts = $.data(_2d3, "accordion").options;
	    pp.panel($.extend({}, { collapsible: true, minimizable: false, maximizable: false, closable: false, doSize: false, collapsed: true, headerCls: "accordion-header", bodyCls: "accordion-body" }, _2d4, { onBeforeExpand: function onBeforeExpand() {
	        if (_2d4.onBeforeExpand) {
	          if (_2d4.onBeforeExpand.call(this) == false) {
	            return false;
	          }
	        }
	        if (!opts.multiple) {
	          var all = $.grep(_2c2(_2d3), function (p) {
	            return p.panel("options").collapsible;
	          });
	          for (var i = 0; i < all.length; i++) {
	            _2dc(_2d3, _2c6(_2d3, all[i]));
	          }
	        }
	        var _2d5 = $(this).panel("header");
	        _2d5.addClass("accordion-header-selected");
	        _2d5.find(".accordion-collapse").removeClass("accordion-expand");
	      }, onExpand: function onExpand() {
	        if (_2d4.onExpand) {
	          _2d4.onExpand.call(this);
	        }
	        opts.onSelect.call(_2d3, $(this).panel("options").title, _2c6(_2d3, this));
	      }, onBeforeCollapse: function onBeforeCollapse() {
	        if (_2d4.onBeforeCollapse) {
	          if (_2d4.onBeforeCollapse.call(this) == false) {
	            return false;
	          }
	        }
	        var _2d6 = $(this).panel("header");
	        _2d6.removeClass("accordion-header-selected");
	        _2d6.find(".accordion-collapse").addClass("accordion-expand");
	      }, onCollapse: function onCollapse() {
	        if (_2d4.onCollapse) {
	          _2d4.onCollapse.call(this);
	        }
	        opts.onUnselect.call(_2d3, $(this).panel("options").title, _2c6(_2d3, this));
	      } }));
	    var _2d7 = pp.panel("header");
	    var tool = _2d7.children("div.panel-tool");
	    tool.children("a.panel-tool-collapse").hide();
	    var t = $("<a href=\"javascript:void(0)\"></a>").addClass("accordion-collapse accordion-expand").appendTo(tool);
	    t.bind("click", function () {
	      _2d8(pp);
	      return false;
	    });
	    pp.panel("options").collapsible ? t.show() : t.hide();
	    _2d7.click(function () {
	      _2d8(pp);
	      return false;
	    });
	    function _2d8(p) {
	      var _2d9 = p.panel("options");
	      if (_2d9.collapsible) {
	        var _2da = _2c6(_2d3, p);
	        if (_2d9.collapsed) {
	          _2db(_2d3, _2da);
	        } else {
	          _2dc(_2d3, _2da);
	        }
	      }
	    };
	  };
	  function _2db(_2dd, _2de) {
	    var p = _2c9(_2dd, _2de);
	    if (!p) {
	      return;
	    }
	    _2df(_2dd);
	    var opts = $.data(_2dd, "accordion").options;
	    p.panel("expand", opts.animate);
	  };
	  function _2dc(_2e0, _2e1) {
	    var p = _2c9(_2e0, _2e1);
	    if (!p) {
	      return;
	    }
	    _2df(_2e0);
	    var opts = $.data(_2e0, "accordion").options;
	    p.panel("collapse", opts.animate);
	  };
	  function _2e2(_2e3) {
	    var opts = $.data(_2e3, "accordion").options;
	    var p = _2bd(_2e3, "selected", true);
	    if (p) {
	      _2e4(_2c6(_2e3, p));
	    } else {
	      _2e4(opts.selected);
	    }
	    function _2e4(_2e5) {
	      var _2e6 = opts.animate;
	      opts.animate = false;
	      _2db(_2e3, _2e5);
	      opts.animate = _2e6;
	    };
	  };
	  function _2df(_2e7) {
	    var _2e8 = $.data(_2e7, "accordion").panels;
	    for (var i = 0; i < _2e8.length; i++) {
	      _2e8[i].stop(true, true);
	    }
	  };
	  function _add(_2e9, _2ea) {
	    var _2eb = $.data(_2e9, "accordion");
	    var opts = _2eb.options;
	    var _2ec = _2eb.panels;
	    if (_2ea.selected == undefined) {
	      _2ea.selected = true;
	    }
	    _2df(_2e9);
	    var pp = $("<div></div>").appendTo(_2e9);
	    _2ec.push(pp);
	    _2d2(_2e9, pp, _2ea);
	    _2b0(_2e9);
	    opts.onAdd.call(_2e9, _2ea.title, _2ec.length - 1);
	    if (_2ea.selected) {
	      _2db(_2e9, _2ec.length - 1);
	    }
	  };
	  function _2ed(_2ee, _2ef) {
	    var _2f0 = $.data(_2ee, "accordion");
	    var opts = _2f0.options;
	    var _2f1 = _2f0.panels;
	    _2df(_2ee);
	    var _2f2 = _2c9(_2ee, _2ef);
	    var _2f3 = _2f2.panel("options").title;
	    var _2f4 = _2c6(_2ee, _2f2);
	    if (!_2f2) {
	      return;
	    }
	    if (opts.onBeforeRemove.call(_2ee, _2f3, _2f4) == false) {
	      return;
	    }
	    _2f1.splice(_2f4, 1);
	    _2f2.panel("destroy");
	    if (_2f1.length) {
	      _2b0(_2ee);
	      var curr = _2c4(_2ee);
	      if (!curr) {
	        _2db(_2ee, 0);
	      }
	    }
	    opts.onRemove.call(_2ee, _2f3, _2f4);
	  };
	  $.fn.accordion = function (_2f5, _2f6) {
	    if (typeof _2f5 == "string") {
	      return $.fn.accordion.methods[_2f5](this, _2f6);
	    }
	    _2f5 = _2f5 || {};
	    return this.each(function () {
	      var _2f7 = $.data(this, "accordion");
	      if (_2f7) {
	        $.extend(_2f7.options, _2f5);
	      } else {
	        $.data(this, "accordion", { options: $.extend({}, $.fn.accordion.defaults, $.fn.accordion.parseOptions(this), _2f5), accordion: $(this).addClass("accordion"), panels: [] });
	        init(this);
	      }
	      _2cd(this);
	      _2b0(this);
	      _2e2(this);
	    });
	  };
	  $.fn.accordion.methods = { options: function options(jq) {
	      return $.data(jq[0], "accordion").options;
	    }, panels: function panels(jq) {
	      return $.data(jq[0], "accordion").panels;
	    }, resize: function resize(jq, _2f8) {
	      return jq.each(function () {
	        _2b0(this, _2f8);
	      });
	    }, getSelections: function getSelections(jq) {
	      return _2c2(jq[0]);
	    }, getSelected: function getSelected(jq) {
	      return _2c4(jq[0]);
	    }, getPanel: function getPanel(jq, _2f9) {
	      return _2c9(jq[0], _2f9);
	    }, getPanelIndex: function getPanelIndex(jq, _2fa) {
	      return _2c6(jq[0], _2fa);
	    }, select: function select(jq, _2fb) {
	      return jq.each(function () {
	        _2db(this, _2fb);
	      });
	    }, unselect: function unselect(jq, _2fc) {
	      return jq.each(function () {
	        _2dc(this, _2fc);
	      });
	    }, add: function add(jq, _2fd) {
	      return jq.each(function () {
	        _add(this, _2fd);
	      });
	    }, remove: function remove(jq, _2fe) {
	      return jq.each(function () {
	        _2ed(this, _2fe);
	      });
	    } };
	  $.fn.accordion.parseOptions = function (_2ff) {
	    var t = $(_2ff);
	    return $.extend({}, $.parser.parseOptions(_2ff, ["width", "height", { fit: "boolean", border: "boolean", animate: "boolean", multiple: "boolean", selected: "number" }]));
	  };
	  $.fn.accordion.defaults = { width: "auto", height: "auto", fit: false, border: true, animate: true, multiple: false, selected: 0, onSelect: function onSelect(_300, _301) {}, onUnselect: function onUnselect(_302, _303) {}, onAdd: function onAdd(_304, _305) {}, onBeforeRemove: function onBeforeRemove(_306, _307) {}, onRemove: function onRemove(_308, _309) {} };
	})(jQuery);
	(function ($) {
	  function _30a(c) {
	    var w = 0;
	    $(c).children().each(function () {
	      w += $(this).outerWidth(true);
	    });
	    return w;
	  };
	  function _30b(_30c) {
	    var opts = $.data(_30c, "tabs").options;
	    if (opts.tabPosition == "left" || opts.tabPosition == "right" || !opts.showHeader) {
	      return;
	    }
	    var _30d = $(_30c).children("div.tabs-header");
	    var tool = _30d.children("div.tabs-tool");
	    var _30e = _30d.children("div.tabs-scroller-left");
	    var _30f = _30d.children("div.tabs-scroller-right");
	    var wrap = _30d.children("div.tabs-wrap");
	    var _310 = _30d.outerHeight();
	    if (opts.plain) {
	      _310 -= _310 - _30d.height();
	    }
	    tool._outerHeight(_310);
	    var _311 = _30a(_30d.find("ul.tabs"));
	    var _312 = _30d.width() - tool._outerWidth();
	    if (_311 > _312) {
	      _30e.add(_30f).show()._outerHeight(_310);
	      if (opts.toolPosition == "left") {
	        tool.css({ left: _30e.outerWidth(), right: "" });
	        wrap.css({ marginLeft: _30e.outerWidth() + tool._outerWidth(), marginRight: _30f._outerWidth(), width: _312 - _30e.outerWidth() - _30f.outerWidth() });
	      } else {
	        tool.css({ left: "", right: _30f.outerWidth() });
	        wrap.css({ marginLeft: _30e.outerWidth(), marginRight: _30f.outerWidth() + tool._outerWidth(), width: _312 - _30e.outerWidth() - _30f.outerWidth() });
	      }
	    } else {
	      _30e.add(_30f).hide();
	      if (opts.toolPosition == "left") {
	        tool.css({ left: 0, right: "" });
	        wrap.css({ marginLeft: tool._outerWidth(), marginRight: 0, width: _312 });
	      } else {
	        tool.css({ left: "", right: 0 });
	        wrap.css({ marginLeft: 0, marginRight: tool._outerWidth(), width: _312 });
	      }
	    }
	  };
	  function _313(_314) {
	    var opts = $.data(_314, "tabs").options;
	    var _315 = $(_314).children("div.tabs-header");
	    if (opts.tools) {
	      if (typeof opts.tools == "string") {
	        $(opts.tools).addClass("tabs-tool").appendTo(_315);
	        $(opts.tools).show();
	      } else {
	        _315.children("div.tabs-tool").remove();
	        var _316 = $("<div class=\"tabs-tool\"><table cellspacing=\"0\" cellpadding=\"0\" style=\"height:100%\"><tr></tr></table></div>").appendTo(_315);
	        var tr = _316.find("tr");
	        for (var i = 0; i < opts.tools.length; i++) {
	          var td = $("<td></td>").appendTo(tr);
	          var tool = $("<a href=\"javascript:void(0);\"></a>").appendTo(td);
	          tool[0].onclick = eval(opts.tools[i].handler || function () {});
	          tool.linkbutton($.extend({}, opts.tools[i], { plain: true }));
	        }
	      }
	    } else {
	      _315.children("div.tabs-tool").remove();
	    }
	  };
	  function _317(_318, _319) {
	    var _31a = $.data(_318, "tabs");
	    var opts = _31a.options;
	    var cc = $(_318);
	    if (!opts.doSize) {
	      return;
	    }
	    if (_319) {
	      $.extend(opts, { width: _319.width, height: _319.height });
	    }
	    cc._size(opts);
	    var _31b = cc.children("div.tabs-header");
	    var _31c = cc.children("div.tabs-panels");
	    var wrap = _31b.find("div.tabs-wrap");
	    var ul = wrap.find(".tabs");
	    ul.children("li").removeClass("tabs-first tabs-last");
	    ul.children("li:first").addClass("tabs-first");
	    ul.children("li:last").addClass("tabs-last");
	    if (opts.tabPosition == "left" || opts.tabPosition == "right") {
	      _31b._outerWidth(opts.showHeader ? opts.headerWidth : 0);
	      _31c._outerWidth(cc.width() - _31b.outerWidth());
	      _31b.add(_31c)._outerHeight(opts.height);
	      wrap._outerWidth(_31b.width());
	      ul._outerWidth(wrap.width()).css("height", "");
	    } else {
	      _31b.children("div.tabs-scroller-left,div.tabs-scroller-right,div.tabs-tool").css("display", opts.showHeader ? "block" : "none");
	      _31b._outerWidth(cc.width()).css("height", "");
	      if (opts.showHeader) {
	        _31b.css("background-color", "");
	        wrap.css("height", "");
	      } else {
	        _31b.css("background-color", "transparent");
	        _31b._outerHeight(0);
	        wrap._outerHeight(0);
	      }
	      ul._outerHeight(opts.tabHeight).css("width", "");
	      ul._outerHeight(ul.outerHeight() - ul.height() - 1 + opts.tabHeight).css("width", "");
	      _31c._size("height", isNaN(opts.height) ? "" : opts.height - _31b.outerHeight());
	      _31c._size("width", isNaN(opts.width) ? "" : opts.width);
	    }
	    if (_31a.tabs.length) {
	      var d1 = ul.outerWidth(true) - ul.width();
	      var li = ul.children("li:first");
	      var d2 = li.outerWidth(true) - li.width();
	      var _31d = _31b.width() - _31b.children(".tabs-tool")._outerWidth();
	      var _31e = Math.floor((_31d - d1 - d2 * _31a.tabs.length) / _31a.tabs.length);
	      $.map(_31a.tabs, function (p) {
	        _31f(p, opts.justified && $.inArray(opts.tabPosition, ["top", "bottom"]) >= 0 ? _31e : undefined);
	      });
	      if (opts.justified && $.inArray(opts.tabPosition, ["top", "bottom"]) >= 0) {
	        var _320 = _31d - d1 - _30a(ul);
	        _31f(_31a.tabs[_31a.tabs.length - 1], _31e + _320);
	      }
	    }
	    _30b(_318);
	    function _31f(p, _321) {
	      var _322 = p.panel("options");
	      var p_t = _322.tab.find("a.tabs-inner");
	      var _321 = _321 ? _321 : parseInt(_322.tabWidth || opts.tabWidth || undefined);
	      if (_321) {
	        p_t._outerWidth(_321);
	      } else {
	        p_t.css("width", "");
	      }
	      p_t._outerHeight(opts.tabHeight);
	      p_t.css("lineHeight", p_t.height() + "px");
	      p_t.find(".easyui-fluid:visible").triggerHandler("_resize");
	    };
	  };
	  function _323(_324) {
	    var opts = $.data(_324, "tabs").options;
	    var tab = _325(_324);
	    if (tab) {
	      var _326 = $(_324).children("div.tabs-panels");
	      var _327 = opts.width == "auto" ? "auto" : _326.width();
	      var _328 = opts.height == "auto" ? "auto" : _326.height();
	      tab.panel("resize", { width: _327, height: _328 });
	    }
	  };
	  function _329(_32a) {
	    var tabs = $.data(_32a, "tabs").tabs;
	    var cc = $(_32a).addClass("tabs-container");
	    var _32b = $("<div class=\"tabs-panels\"></div>").insertBefore(cc);
	    cc.children("div").each(function () {
	      _32b[0].appendChild(this);
	    });
	    cc[0].appendChild(_32b[0]);
	    $("<div class=\"tabs-header\">" + "<div class=\"tabs-scroller-left\"></div>" + "<div class=\"tabs-scroller-right\"></div>" + "<div class=\"tabs-wrap\">" + "<ul class=\"tabs\"></ul>" + "</div>" + "</div>").prependTo(_32a);
	    cc.children("div.tabs-panels").children("div").each(function (i) {
	      var opts = $.extend({}, $.parser.parseOptions(this), { selected: $(this).attr("selected") ? true : undefined });
	      _338(_32a, opts, $(this));
	    });
	    cc.children("div.tabs-header").find(".tabs-scroller-left, .tabs-scroller-right").hover(function () {
	      $(this).addClass("tabs-scroller-over");
	    }, function () {
	      $(this).removeClass("tabs-scroller-over");
	    });
	    cc.bind("_resize", function (e, _32c) {
	      if ($(this).hasClass("easyui-fluid") || _32c) {
	        _317(_32a);
	        _323(_32a);
	      }
	      return false;
	    });
	  };
	  function _32d(_32e) {
	    var _32f = $.data(_32e, "tabs");
	    var opts = _32f.options;
	    $(_32e).children("div.tabs-header").unbind().bind("click", function (e) {
	      if ($(e.target).hasClass("tabs-scroller-left")) {
	        $(_32e).tabs("scrollBy", -opts.scrollIncrement);
	      } else {
	        if ($(e.target).hasClass("tabs-scroller-right")) {
	          $(_32e).tabs("scrollBy", opts.scrollIncrement);
	        } else {
	          var li = $(e.target).closest("li");
	          if (li.hasClass("tabs-disabled")) {
	            return false;
	          }
	          var a = $(e.target).closest("a.tabs-close");
	          if (a.length) {
	            _351(_32e, _330(li));
	          } else {
	            if (li.length) {
	              var _331 = _330(li);
	              var _332 = _32f.tabs[_331].panel("options");
	              if (_332.collapsible) {
	                _332.closed ? _348(_32e, _331) : _365(_32e, _331);
	              } else {
	                _348(_32e, _331);
	              }
	            }
	          }
	          return false;
	        }
	      }
	    }).bind("contextmenu", function (e) {
	      var li = $(e.target).closest("li");
	      if (li.hasClass("tabs-disabled")) {
	        return;
	      }
	      if (li.length) {
	        opts.onContextMenu.call(_32e, e, li.find("span.tabs-title").html(), _330(li));
	      }
	    });
	    function _330(li) {
	      var _333 = 0;
	      li.parent().children("li").each(function (i) {
	        if (li[0] == this) {
	          _333 = i;
	          return false;
	        }
	      });
	      return _333;
	    };
	  };
	  function _334(_335) {
	    var opts = $.data(_335, "tabs").options;
	    var _336 = $(_335).children("div.tabs-header");
	    var _337 = $(_335).children("div.tabs-panels");
	    _336.removeClass("tabs-header-top tabs-header-bottom tabs-header-left tabs-header-right");
	    _337.removeClass("tabs-panels-top tabs-panels-bottom tabs-panels-left tabs-panels-right");
	    if (opts.tabPosition == "top") {
	      _336.insertBefore(_337);
	    } else {
	      if (opts.tabPosition == "bottom") {
	        _336.insertAfter(_337);
	        _336.addClass("tabs-header-bottom");
	        _337.addClass("tabs-panels-top");
	      } else {
	        if (opts.tabPosition == "left") {
	          _336.addClass("tabs-header-left");
	          _337.addClass("tabs-panels-right");
	        } else {
	          if (opts.tabPosition == "right") {
	            _336.addClass("tabs-header-right");
	            _337.addClass("tabs-panels-left");
	          }
	        }
	      }
	    }
	    if (opts.plain == true) {
	      _336.addClass("tabs-header-plain");
	    } else {
	      _336.removeClass("tabs-header-plain");
	    }
	    _336.removeClass("tabs-header-narrow").addClass(opts.narrow ? "tabs-header-narrow" : "");
	    var tabs = _336.find(".tabs");
	    tabs.removeClass("tabs-pill").addClass(opts.pill ? "tabs-pill" : "");
	    tabs.removeClass("tabs-narrow").addClass(opts.narrow ? "tabs-narrow" : "");
	    tabs.removeClass("tabs-justified").addClass(opts.justified ? "tabs-justified" : "");
	    if (opts.border == true) {
	      _336.removeClass("tabs-header-noborder");
	      _337.removeClass("tabs-panels-noborder");
	    } else {
	      _336.addClass("tabs-header-noborder");
	      _337.addClass("tabs-panels-noborder");
	    }
	    opts.doSize = true;
	  };
	  function _338(_339, _33a, pp) {
	    _33a = _33a || {};
	    var _33b = $.data(_339, "tabs");
	    var tabs = _33b.tabs;
	    if (_33a.index == undefined || _33a.index > tabs.length) {
	      _33a.index = tabs.length;
	    }
	    if (_33a.index < 0) {
	      _33a.index = 0;
	    }
	    var ul = $(_339).children("div.tabs-header").find("ul.tabs");
	    var _33c = $(_339).children("div.tabs-panels");
	    var tab = $("<li>" + "<a href=\"javascript:void(0)\" class=\"tabs-inner\">" + "<span class=\"tabs-title\"></span>" + "<span class=\"tabs-icon\"></span>" + "</a>" + "</li>");
	    if (!pp) {
	      pp = $("<div></div>");
	    }
	    if (_33a.index >= tabs.length) {
	      tab.appendTo(ul);
	      pp.appendTo(_33c);
	      tabs.push(pp);
	    } else {
	      tab.insertBefore(ul.children("li:eq(" + _33a.index + ")"));
	      pp.insertBefore(_33c.children("div.panel:eq(" + _33a.index + ")"));
	      tabs.splice(_33a.index, 0, pp);
	    }
	    pp.panel($.extend({}, _33a, { tab: tab, border: false, noheader: true, closed: true, doSize: false, iconCls: _33a.icon ? _33a.icon : undefined, onLoad: function onLoad() {
	        if (_33a.onLoad) {
	          _33a.onLoad.call(this, arguments);
	        }
	        _33b.options.onLoad.call(_339, $(this));
	      }, onBeforeOpen: function onBeforeOpen() {
	        if (_33a.onBeforeOpen) {
	          if (_33a.onBeforeOpen.call(this) == false) {
	            return false;
	          }
	        }
	        var p = $(_339).tabs("getSelected");
	        if (p) {
	          if (p[0] != this) {
	            $(_339).tabs("unselect", _343(_339, p));
	            p = $(_339).tabs("getSelected");
	            if (p) {
	              return false;
	            }
	          } else {
	            _323(_339);
	            return false;
	          }
	        }
	        var _33d = $(this).panel("options");
	        _33d.tab.addClass("tabs-selected");
	        var wrap = $(_339).find(">div.tabs-header>div.tabs-wrap");
	        var left = _33d.tab.position().left;
	        var _33e = left + _33d.tab.outerWidth();
	        if (left < 0 || _33e > wrap.width()) {
	          var _33f = left - (wrap.width() - _33d.tab.width()) / 2;
	          $(_339).tabs("scrollBy", _33f);
	        } else {
	          $(_339).tabs("scrollBy", 0);
	        }
	        var _340 = $(this).panel("panel");
	        _340.css("display", "block");
	        _323(_339);
	        _340.css("display", "none");
	      }, onOpen: function onOpen() {
	        if (_33a.onOpen) {
	          _33a.onOpen.call(this);
	        }
	        var _341 = $(this).panel("options");
	        _33b.selectHis.push(_341.title);
	        _33b.options.onSelect.call(_339, _341.title, _343(_339, this));
	      }, onBeforeClose: function onBeforeClose() {
	        if (_33a.onBeforeClose) {
	          if (_33a.onBeforeClose.call(this) == false) {
	            return false;
	          }
	        }
	        $(this).panel("options").tab.removeClass("tabs-selected");
	      }, onClose: function onClose() {
	        if (_33a.onClose) {
	          _33a.onClose.call(this);
	        }
	        var _342 = $(this).panel("options");
	        _33b.options.onUnselect.call(_339, _342.title, _343(_339, this));
	      } }));
	    $(_339).tabs("update", { tab: pp, options: pp.panel("options"), type: "header" });
	  };
	  function _344(_345, _346) {
	    var _347 = $.data(_345, "tabs");
	    var opts = _347.options;
	    if (_346.selected == undefined) {
	      _346.selected = true;
	    }
	    _338(_345, _346);
	    opts.onAdd.call(_345, _346.title, _346.index);
	    if (_346.selected) {
	      _348(_345, _346.index);
	    }
	  };
	  function _349(_34a, _34b) {
	    _34b.type = _34b.type || "all";
	    var _34c = $.data(_34a, "tabs").selectHis;
	    var pp = _34b.tab;
	    var _34d = pp.panel("options").title;
	    if (_34b.type == "all" || _34b == "body") {
	      pp.panel($.extend({}, _34b.options, { iconCls: _34b.options.icon ? _34b.options.icon : undefined }));
	    }
	    if (_34b.type == "all" || _34b.type == "header") {
	      var opts = pp.panel("options");
	      var tab = opts.tab;
	      if (opts.header) {
	        tab.find(".tabs-inner").html($(opts.header));
	      } else {
	        var _34e = tab.find("span.tabs-title");
	        var _34f = tab.find("span.tabs-icon");
	        _34e.html(opts.title);
	        _34f.attr("class", "tabs-icon");
	        tab.find("a.tabs-close").remove();
	        if (opts.closable) {
	          _34e.addClass("tabs-closable");
	          $("<a href=\"javascript:void(0)\" class=\"tabs-close\"></a>").appendTo(tab);
	        } else {
	          _34e.removeClass("tabs-closable");
	        }
	        if (opts.iconCls) {
	          _34e.addClass("tabs-with-icon");
	          _34f.addClass(opts.iconCls);
	        } else {
	          _34e.removeClass("tabs-with-icon");
	        }
	        if (opts.tools) {
	          var _350 = tab.find("span.tabs-p-tool");
	          if (!_350.length) {
	            var _350 = $("<span class=\"tabs-p-tool\"></span>").insertAfter(tab.find("a.tabs-inner"));
	          }
	          if ($.isArray(opts.tools)) {
	            for (var i = 0; i < opts.tools.length; i++) {
	              var t = $("<a href=\"javascript:void(0)\"></a>").appendTo(_350);
	              t.addClass(opts.tools[i].iconCls);
	              if (opts.tools[i].handler) {
	                t.bind("click", { handler: opts.tools[i].handler }, function (e) {
	                  if ($(this).parents("li").hasClass("tabs-disabled")) {
	                    return;
	                  }
	                  e.data.handler.call(this);
	                });
	              }
	            }
	          } else {
	            $(opts.tools).children().appendTo(_350);
	          }
	          var pr = _350.children().length * 12;
	          if (opts.closable) {
	            pr += 8;
	          } else {
	            pr -= 3;
	            _350.css("right", "5px");
	          }
	          _34e.css("padding-right", pr + "px");
	        } else {
	          tab.find("span.tabs-p-tool").remove();
	          _34e.css("padding-right", "");
	        }
	      }
	      if (_34d != opts.title) {
	        for (var i = 0; i < _34c.length; i++) {
	          if (_34c[i] == _34d) {
	            _34c[i] = opts.title;
	          }
	        }
	      }
	    }
	    _317(_34a);
	    $.data(_34a, "tabs").options.onUpdate.call(_34a, opts.title, _343(_34a, pp));
	  };
	  function _351(_352, _353) {
	    var opts = $.data(_352, "tabs").options;
	    var tabs = $.data(_352, "tabs").tabs;
	    var _354 = $.data(_352, "tabs").selectHis;
	    if (!_355(_352, _353)) {
	      return;
	    }
	    var tab = _356(_352, _353);
	    var _357 = tab.panel("options").title;
	    var _358 = _343(_352, tab);
	    if (opts.onBeforeClose.call(_352, _357, _358) == false) {
	      return;
	    }
	    var tab = _356(_352, _353, true);
	    tab.panel("options").tab.remove();
	    tab.panel("destroy");
	    opts.onClose.call(_352, _357, _358);
	    _317(_352);
	    for (var i = 0; i < _354.length; i++) {
	      if (_354[i] == _357) {
	        _354.splice(i, 1);
	        i--;
	      }
	    }
	    var _359 = _354.pop();
	    if (_359) {
	      _348(_352, _359);
	    } else {
	      if (tabs.length) {
	        _348(_352, 0);
	      }
	    }
	  };
	  function _356(_35a, _35b, _35c) {
	    var tabs = $.data(_35a, "tabs").tabs;
	    if (typeof _35b == "number") {
	      if (_35b < 0 || _35b >= tabs.length) {
	        return null;
	      } else {
	        var tab = tabs[_35b];
	        if (_35c) {
	          tabs.splice(_35b, 1);
	        }
	        return tab;
	      }
	    }
	    for (var i = 0; i < tabs.length; i++) {
	      var tab = tabs[i];
	      if (tab.panel("options").title == _35b) {
	        if (_35c) {
	          tabs.splice(i, 1);
	        }
	        return tab;
	      }
	    }
	    return null;
	  };
	  function _343(_35d, tab) {
	    var tabs = $.data(_35d, "tabs").tabs;
	    for (var i = 0; i < tabs.length; i++) {
	      if (tabs[i][0] == $(tab)[0]) {
	        return i;
	      }
	    }
	    return -1;
	  };
	  function _325(_35e) {
	    var tabs = $.data(_35e, "tabs").tabs;
	    for (var i = 0; i < tabs.length; i++) {
	      var tab = tabs[i];
	      if (tab.panel("options").tab.hasClass("tabs-selected")) {
	        return tab;
	      }
	    }
	    return null;
	  };
	  function _35f(_360) {
	    var _361 = $.data(_360, "tabs");
	    var tabs = _361.tabs;
	    for (var i = 0; i < tabs.length; i++) {
	      if (tabs[i].panel("options").selected) {
	        _348(_360, i);
	        return;
	      }
	    }
	    _348(_360, _361.options.selected);
	  };
	  function _348(_362, _363) {
	    var p = _356(_362, _363);
	    if (p && !p.is(":visible")) {
	      _364(_362);
	      p.panel("open");
	    }
	  };
	  function _365(_366, _367) {
	    var p = _356(_366, _367);
	    if (p && p.is(":visible")) {
	      _364(_366);
	      p.panel("close");
	    }
	  };
	  function _364(_368) {
	    $(_368).children("div.tabs-panels").each(function () {
	      $(this).stop(true, true);
	    });
	  };
	  function _355(_369, _36a) {
	    return _356(_369, _36a) != null;
	  };
	  function _36b(_36c, _36d) {
	    var opts = $.data(_36c, "tabs").options;
	    opts.showHeader = _36d;
	    $(_36c).tabs("resize");
	  };
	  $.fn.tabs = function (_36e, _36f) {
	    if (typeof _36e == "string") {
	      return $.fn.tabs.methods[_36e](this, _36f);
	    }
	    _36e = _36e || {};
	    return this.each(function () {
	      var _370 = $.data(this, "tabs");
	      if (_370) {
	        $.extend(_370.options, _36e);
	      } else {
	        $.data(this, "tabs", { options: $.extend({}, $.fn.tabs.defaults, $.fn.tabs.parseOptions(this), _36e), tabs: [], selectHis: [] });
	        _329(this);
	      }
	      _313(this);
	      _334(this);
	      _317(this);
	      _32d(this);
	      _35f(this);
	    });
	  };
	  $.fn.tabs.methods = { options: function options(jq) {
	      var cc = jq[0];
	      var opts = $.data(cc, "tabs").options;
	      var s = _325(cc);
	      opts.selected = s ? _343(cc, s) : -1;
	      return opts;
	    }, tabs: function tabs(jq) {
	      return $.data(jq[0], "tabs").tabs;
	    }, resize: function resize(jq, _371) {
	      return jq.each(function () {
	        _317(this, _371);
	        _323(this);
	      });
	    }, add: function add(jq, _372) {
	      return jq.each(function () {
	        _344(this, _372);
	      });
	    }, close: function close(jq, _373) {
	      return jq.each(function () {
	        _351(this, _373);
	      });
	    }, getTab: function getTab(jq, _374) {
	      return _356(jq[0], _374);
	    }, getTabIndex: function getTabIndex(jq, tab) {
	      return _343(jq[0], tab);
	    }, getSelected: function getSelected(jq) {
	      return _325(jq[0]);
	    }, select: function select(jq, _375) {
	      return jq.each(function () {
	        _348(this, _375);
	      });
	    }, unselect: function unselect(jq, _376) {
	      return jq.each(function () {
	        _365(this, _376);
	      });
	    }, exists: function exists(jq, _377) {
	      return _355(jq[0], _377);
	    }, update: function update(jq, _378) {
	      return jq.each(function () {
	        _349(this, _378);
	      });
	    }, enableTab: function enableTab(jq, _379) {
	      return jq.each(function () {
	        $(this).tabs("getTab", _379).panel("options").tab.removeClass("tabs-disabled");
	      });
	    }, disableTab: function disableTab(jq, _37a) {
	      return jq.each(function () {
	        $(this).tabs("getTab", _37a).panel("options").tab.addClass("tabs-disabled");
	      });
	    }, showHeader: function showHeader(jq) {
	      return jq.each(function () {
	        _36b(this, true);
	      });
	    }, hideHeader: function hideHeader(jq) {
	      return jq.each(function () {
	        _36b(this, false);
	      });
	    }, scrollBy: function scrollBy(jq, _37b) {
	      return jq.each(function () {
	        var opts = $(this).tabs("options");
	        var wrap = $(this).find(">div.tabs-header>div.tabs-wrap");
	        var pos = Math.min(wrap._scrollLeft() + _37b, _37c());
	        wrap.animate({ scrollLeft: pos }, opts.scrollDuration);
	        function _37c() {
	          var w = 0;
	          var ul = wrap.children("ul");
	          ul.children("li").each(function () {
	            w += $(this).outerWidth(true);
	          });
	          return w - wrap.width() + (ul.outerWidth() - ul.width());
	        };
	      });
	    } };
	  $.fn.tabs.parseOptions = function (_37d) {
	    return $.extend({}, $.parser.parseOptions(_37d, ["tools", "toolPosition", "tabPosition", { fit: "boolean", border: "boolean", plain: "boolean" }, { headerWidth: "number", tabWidth: "number", tabHeight: "number", selected: "number" }, { showHeader: "boolean", justified: "boolean", narrow: "boolean", pill: "boolean" }]));
	  };
	  $.fn.tabs.defaults = { width: "auto", height: "auto", headerWidth: 150, tabWidth: "auto", tabHeight: 27, selected: 0, showHeader: true, plain: false, fit: false, border: true, justified: false, narrow: false, pill: false, tools: null, toolPosition: "right", tabPosition: "top", scrollIncrement: 100, scrollDuration: 400, onLoad: function onLoad(_37e) {}, onSelect: function onSelect(_37f, _380) {}, onUnselect: function onUnselect(_381, _382) {}, onBeforeClose: function onBeforeClose(_383, _384) {}, onClose: function onClose(_385, _386) {}, onAdd: function onAdd(_387, _388) {}, onUpdate: function onUpdate(_389, _38a) {}, onContextMenu: function onContextMenu(e, _38b, _38c) {} };
	})(jQuery);
	(function ($) {
	  var _38d = false;
	  function _38e(_38f, _390) {
	    var _391 = $.data(_38f, "layout");
	    var opts = _391.options;
	    var _392 = _391.panels;
	    var cc = $(_38f);
	    if (_390) {
	      $.extend(opts, { width: _390.width, height: _390.height });
	    }
	    if (_38f.tagName.toLowerCase() == "body") {
	      cc._size("fit");
	    } else {
	      cc._size(opts);
	    }
	    var cpos = { top: 0, left: 0, width: cc.width(), height: cc.height() };
	    _393(_394(_392.expandNorth) ? _392.expandNorth : _392.north, "n");
	    _393(_394(_392.expandSouth) ? _392.expandSouth : _392.south, "s");
	    _395(_394(_392.expandEast) ? _392.expandEast : _392.east, "e");
	    _395(_394(_392.expandWest) ? _392.expandWest : _392.west, "w");
	    _392.center.panel("resize", cpos);
	    function _393(pp, type) {
	      if (!pp.length || !_394(pp)) {
	        return;
	      }
	      var opts = pp.panel("options");
	      pp.panel("resize", { width: cc.width(), height: opts.height });
	      var _396 = pp.panel("panel").outerHeight();
	      pp.panel("move", { left: 0, top: type == "n" ? 0 : cc.height() - _396 });
	      cpos.height -= _396;
	      if (type == "n") {
	        cpos.top += _396;
	        if (!opts.split && opts.border) {
	          cpos.top--;
	        }
	      }
	      if (!opts.split && opts.border) {
	        cpos.height++;
	      }
	    };
	    function _395(pp, type) {
	      if (!pp.length || !_394(pp)) {
	        return;
	      }
	      var opts = pp.panel("options");
	      pp.panel("resize", { width: opts.width, height: cpos.height });
	      var _397 = pp.panel("panel").outerWidth();
	      pp.panel("move", { left: type == "e" ? cc.width() - _397 : 0, top: cpos.top });
	      cpos.width -= _397;
	      if (type == "w") {
	        cpos.left += _397;
	        if (!opts.split && opts.border) {
	          cpos.left--;
	        }
	      }
	      if (!opts.split && opts.border) {
	        cpos.width++;
	      }
	    };
	  };
	  function init(_398) {
	    var cc = $(_398);
	    cc.addClass("layout");
	    function _399(cc) {
	      cc.children("div").each(function () {
	        var opts = $.fn.layout.parsePanelOptions(this);
	        if ("north,south,east,west,center".indexOf(opts.region) >= 0) {
	          _39b(_398, opts, this);
	        }
	      });
	    };
	    cc.children("form").length ? _399(cc.children("form")) : _399(cc);
	    cc.append("<div class=\"layout-split-proxy-h\"></div><div class=\"layout-split-proxy-v\"></div>");
	    cc.bind("_resize", function (e, _39a) {
	      if ($(this).hasClass("easyui-fluid") || _39a) {
	        _38e(_398);
	      }
	      return false;
	    });
	  };
	  function _39b(_39c, _39d, el) {
	    _39d.region = _39d.region || "center";
	    var _39e = $.data(_39c, "layout").panels;
	    var cc = $(_39c);
	    var dir = _39d.region;
	    if (_39e[dir].length) {
	      return;
	    }
	    var pp = $(el);
	    if (!pp.length) {
	      pp = $("<div></div>").appendTo(cc);
	    }
	    var _39f = $.extend({}, $.fn.layout.paneldefaults, { width: pp.length ? parseInt(pp[0].style.width) || pp.outerWidth() : "auto", height: pp.length ? parseInt(pp[0].style.height) || pp.outerHeight() : "auto", doSize: false, collapsible: true, cls: "layout-panel layout-panel-" + dir, bodyCls: "layout-body", onOpen: function onOpen() {
	        var tool = $(this).panel("header").children("div.panel-tool");
	        tool.children("a.panel-tool-collapse").hide();
	        var _3a0 = { north: "up", south: "down", east: "right", west: "left" };
	        if (!_3a0[dir]) {
	          return;
	        }
	        var _3a1 = "layout-button-" + _3a0[dir];
	        var t = tool.children("a." + _3a1);
	        if (!t.length) {
	          t = $("<a href=\"javascript:void(0)\"></a>").addClass(_3a1).appendTo(tool);
	          t.bind("click", { dir: dir }, function (e) {
	            _3ad(_39c, e.data.dir);
	            return false;
	          });
	        }
	        $(this).panel("options").collapsible ? t.show() : t.hide();
	      } }, _39d);
	    pp.panel(_39f);
	    _39e[dir] = pp;
	    var _3a2 = { north: "s", south: "n", east: "w", west: "e" };
	    var _3a3 = pp.panel("panel");
	    if (pp.panel("options").split) {
	      _3a3.addClass("layout-split-" + dir);
	    }
	    _3a3.resizable($.extend({}, { handles: _3a2[dir] || "", disabled: !pp.panel("options").split, onStartResize: function onStartResize(e) {
	        _38d = true;
	        if (dir == "north" || dir == "south") {
	          var _3a4 = $(">div.layout-split-proxy-v", _39c);
	        } else {
	          var _3a4 = $(">div.layout-split-proxy-h", _39c);
	        }
	        var top = 0,
	            left = 0,
	            _3a5 = 0,
	            _3a6 = 0;
	        var pos = { display: "block" };
	        if (dir == "north") {
	          pos.top = parseInt(_3a3.css("top")) + _3a3.outerHeight() - _3a4.height();
	          pos.left = parseInt(_3a3.css("left"));
	          pos.width = _3a3.outerWidth();
	          pos.height = _3a4.height();
	        } else {
	          if (dir == "south") {
	            pos.top = parseInt(_3a3.css("top"));
	            pos.left = parseInt(_3a3.css("left"));
	            pos.width = _3a3.outerWidth();
	            pos.height = _3a4.height();
	          } else {
	            if (dir == "east") {
	              pos.top = parseInt(_3a3.css("top")) || 0;
	              pos.left = parseInt(_3a3.css("left")) || 0;
	              pos.width = _3a4.width();
	              pos.height = _3a3.outerHeight();
	            } else {
	              if (dir == "west") {
	                pos.top = parseInt(_3a3.css("top")) || 0;
	                pos.left = _3a3.outerWidth() - _3a4.width();
	                pos.width = _3a4.width();
	                pos.height = _3a3.outerHeight();
	              }
	            }
	          }
	        }
	        _3a4.css(pos);
	        $("<div class=\"layout-mask\"></div>").css({ left: 0, top: 0, width: cc.width(), height: cc.height() }).appendTo(cc);
	      }, onResize: function onResize(e) {
	        if (dir == "north" || dir == "south") {
	          var _3a7 = $(">div.layout-split-proxy-v", _39c);
	          _3a7.css("top", e.pageY - $(_39c).offset().top - _3a7.height() / 2);
	        } else {
	          var _3a7 = $(">div.layout-split-proxy-h", _39c);
	          _3a7.css("left", e.pageX - $(_39c).offset().left - _3a7.width() / 2);
	        }
	        return false;
	      }, onStopResize: function onStopResize(e) {
	        cc.children("div.layout-split-proxy-v,div.layout-split-proxy-h").hide();
	        pp.panel("resize", e.data);
	        _38e(_39c);
	        _38d = false;
	        cc.find(">div.layout-mask").remove();
	      } }, _39d));
	  };
	  function _3a8(_3a9, _3aa) {
	    var _3ab = $.data(_3a9, "layout").panels;
	    if (_3ab[_3aa].length) {
	      _3ab[_3aa].panel("destroy");
	      _3ab[_3aa] = $();
	      var _3ac = "expand" + _3aa.substring(0, 1).toUpperCase() + _3aa.substring(1);
	      if (_3ab[_3ac]) {
	        _3ab[_3ac].panel("destroy");
	        _3ab[_3ac] = undefined;
	      }
	    }
	  };
	  function _3ad(_3ae, _3af, _3b0) {
	    if (_3b0 == undefined) {
	      _3b0 = "normal";
	    }
	    var _3b1 = $.data(_3ae, "layout").panels;
	    var p = _3b1[_3af];
	    var _3b2 = p.panel("options");
	    if (_3b2.onBeforeCollapse.call(p) == false) {
	      return;
	    }
	    var _3b3 = "expand" + _3af.substring(0, 1).toUpperCase() + _3af.substring(1);
	    if (!_3b1[_3b3]) {
	      _3b1[_3b3] = _3b4(_3af);
	      _3b1[_3b3].panel("panel").bind("click", function () {
	        p.panel("expand", false).panel("open");
	        var _3b5 = _3b6();
	        p.panel("resize", _3b5.collapse);
	        p.panel("panel").animate(_3b5.expand, function () {
	          $(this).unbind(".layout").bind("mouseleave.layout", { region: _3af }, function (e) {
	            if (_38d == true) {
	              return;
	            }
	            if ($("body>div.combo-p>div.combo-panel:visible").length) {
	              return;
	            }
	            _3ad(_3ae, e.data.region);
	          });
	        });
	        return false;
	      });
	    }
	    var _3b7 = _3b6();
	    if (!_394(_3b1[_3b3])) {
	      _3b1.center.panel("resize", _3b7.resizeC);
	    }
	    p.panel("panel").animate(_3b7.collapse, _3b0, function () {
	      p.panel("collapse", false).panel("close");
	      _3b1[_3b3].panel("open").panel("resize", _3b7.expandP);
	      $(this).unbind(".layout");
	    });
	    function _3b4(dir) {
	      var icon;
	      if (dir == "east") {
	        icon = "layout-button-left";
	      } else {
	        if (dir == "west") {
	          icon = "layout-button-right";
	        } else {
	          if (dir == "north") {
	            icon = "layout-button-down";
	          } else {
	            if (dir == "south") {
	              icon = "layout-button-up";
	            }
	          }
	        }
	      }
	      var p = $("<div></div>").appendTo(_3ae);
	      p.panel($.extend({}, $.fn.layout.paneldefaults, { cls: "layout-expand layout-expand-" + dir, title: "&nbsp;", closed: true, minWidth: 0, minHeight: 0, doSize: false, tools: [{ iconCls: icon, handler: function handler() {
	            _3bd(_3ae, _3af);
	            return false;
	          } }] }));
	      p.panel("panel").hover(function () {
	        $(this).addClass("layout-expand-over");
	      }, function () {
	        $(this).removeClass("layout-expand-over");
	      });
	      return p;
	    };
	    function _3b6() {
	      var cc = $(_3ae);
	      var _3b8 = _3b1.center.panel("options");
	      var _3b9 = _3b2.collapsedSize;
	      if (_3af == "east") {
	        var _3ba = p.panel("panel")._outerWidth();
	        var _3bb = _3b8.width + _3ba - _3b9;
	        if (_3b2.split || !_3b2.border) {
	          _3bb++;
	        }
	        return { resizeC: { width: _3bb }, expand: { left: cc.width() - _3ba }, expandP: { top: _3b8.top, left: cc.width() - _3b9, width: _3b9, height: _3b8.height }, collapse: { left: cc.width(), top: _3b8.top, height: _3b8.height } };
	      } else {
	        if (_3af == "west") {
	          var _3ba = p.panel("panel")._outerWidth();
	          var _3bb = _3b8.width + _3ba - _3b9;
	          if (_3b2.split || !_3b2.border) {
	            _3bb++;
	          }
	          return { resizeC: { width: _3bb, left: _3b9 - 1 }, expand: { left: 0 }, expandP: { left: 0, top: _3b8.top, width: _3b9, height: _3b8.height }, collapse: { left: -_3ba, top: _3b8.top, height: _3b8.height } };
	        } else {
	          if (_3af == "north") {
	            var _3bc = p.panel("panel")._outerHeight();
	            var hh = _3b8.height;
	            if (!_394(_3b1.expandNorth)) {
	              hh += _3bc - _3b9 + (_3b2.split || !_3b2.border ? 1 : 0);
	            }
	            _3b1.east.add(_3b1.west).add(_3b1.expandEast).add(_3b1.expandWest).panel("resize", { top: _3b9 - 1, height: hh });
	            return { resizeC: { top: _3b9 - 1, height: hh }, expand: { top: 0 }, expandP: { top: 0, left: 0, width: cc.width(), height: _3b9 }, collapse: { top: -_3bc, width: cc.width() } };
	          } else {
	            if (_3af == "south") {
	              var _3bc = p.panel("panel")._outerHeight();
	              var hh = _3b8.height;
	              if (!_394(_3b1.expandSouth)) {
	                hh += _3bc - _3b9 + (_3b2.split || !_3b2.border ? 1 : 0);
	              }
	              _3b1.east.add(_3b1.west).add(_3b1.expandEast).add(_3b1.expandWest).panel("resize", { height: hh });
	              return { resizeC: { height: hh }, expand: { top: cc.height() - _3bc }, expandP: { top: cc.height() - _3b9, left: 0, width: cc.width(), height: _3b9 }, collapse: { top: cc.height(), width: cc.width() } };
	            }
	          }
	        }
	      }
	    };
	  };
	  function _3bd(_3be, _3bf) {
	    var _3c0 = $.data(_3be, "layout").panels;
	    var p = _3c0[_3bf];
	    var _3c1 = p.panel("options");
	    if (_3c1.onBeforeExpand.call(p) == false) {
	      return;
	    }
	    var _3c2 = "expand" + _3bf.substring(0, 1).toUpperCase() + _3bf.substring(1);
	    if (_3c0[_3c2]) {
	      _3c0[_3c2].panel("close");
	      p.panel("panel").stop(true, true);
	      p.panel("expand", false).panel("open");
	      var _3c3 = _3c4();
	      p.panel("resize", _3c3.collapse);
	      p.panel("panel").animate(_3c3.expand, function () {
	        _38e(_3be);
	      });
	    }
	    function _3c4() {
	      var cc = $(_3be);
	      var _3c5 = _3c0.center.panel("options");
	      if (_3bf == "east" && _3c0.expandEast) {
	        return { collapse: { left: cc.width(), top: _3c5.top, height: _3c5.height }, expand: { left: cc.width() - p.panel("panel")._outerWidth() } };
	      } else {
	        if (_3bf == "west" && _3c0.expandWest) {
	          return { collapse: { left: -p.panel("panel")._outerWidth(), top: _3c5.top, height: _3c5.height }, expand: { left: 0 } };
	        } else {
	          if (_3bf == "north" && _3c0.expandNorth) {
	            return { collapse: { top: -p.panel("panel")._outerHeight(), width: cc.width() }, expand: { top: 0 } };
	          } else {
	            if (_3bf == "south" && _3c0.expandSouth) {
	              return { collapse: { top: cc.height(), width: cc.width() }, expand: { top: cc.height() - p.panel("panel")._outerHeight() } };
	            }
	          }
	        }
	      }
	    };
	  };
	  function _394(pp) {
	    if (!pp) {
	      return false;
	    }
	    if (pp.length) {
	      return pp.panel("panel").is(":visible");
	    } else {
	      return false;
	    }
	  };
	  function _3c6(_3c7) {
	    var _3c8 = $.data(_3c7, "layout").panels;
	    _3c9("east");
	    _3c9("west");
	    _3c9("north");
	    _3c9("south");
	    function _3c9(_3ca) {
	      var p = _3c8[_3ca];
	      if (p.length && p.panel("options").collapsed) {
	        _3ad(_3c7, _3ca, 0);
	      }
	    };
	  };
	  function _3cb(_3cc, _3cd, _3ce) {
	    var p = $(_3cc).layout("panel", _3cd);
	    p.panel("options").split = _3ce;
	    var cls = "layout-split-" + _3cd;
	    var _3cf = p.panel("panel").removeClass(cls);
	    if (_3ce) {
	      _3cf.addClass(cls);
	    }
	    _3cf.resizable({ disabled: !_3ce });
	    _38e(_3cc);
	  };
	  $.fn.layout = function (_3d0, _3d1) {
	    if (typeof _3d0 == "string") {
	      return $.fn.layout.methods[_3d0](this, _3d1);
	    }
	    _3d0 = _3d0 || {};
	    return this.each(function () {
	      var _3d2 = $.data(this, "layout");
	      if (_3d2) {
	        $.extend(_3d2.options, _3d0);
	      } else {
	        var opts = $.extend({}, $.fn.layout.defaults, $.fn.layout.parseOptions(this), _3d0);
	        $.data(this, "layout", { options: opts, panels: { center: $(), north: $(), south: $(), east: $(), west: $() } });
	        init(this);
	      }
	      _38e(this);
	      _3c6(this);
	    });
	  };
	  $.fn.layout.methods = { options: function options(jq) {
	      return $.data(jq[0], "layout").options;
	    }, resize: function resize(jq, _3d3) {
	      return jq.each(function () {
	        _38e(this, _3d3);
	      });
	    }, panel: function panel(jq, _3d4) {
	      return $.data(jq[0], "layout").panels[_3d4];
	    }, collapse: function collapse(jq, _3d5) {
	      return jq.each(function () {
	        _3ad(this, _3d5);
	      });
	    }, expand: function expand(jq, _3d6) {
	      return jq.each(function () {
	        _3bd(this, _3d6);
	      });
	    }, add: function add(jq, _3d7) {
	      return jq.each(function () {
	        _39b(this, _3d7);
	        _38e(this);
	        if ($(this).layout("panel", _3d7.region).panel("options").collapsed) {
	          _3ad(this, _3d7.region, 0);
	        }
	      });
	    }, remove: function remove(jq, _3d8) {
	      return jq.each(function () {
	        _3a8(this, _3d8);
	        _38e(this);
	      });
	    }, split: function split(jq, _3d9) {
	      return jq.each(function () {
	        _3cb(this, _3d9, true);
	      });
	    }, unsplit: function unsplit(jq, _3da) {
	      return jq.each(function () {
	        _3cb(this, _3da, false);
	      });
	    } };
	  $.fn.layout.parseOptions = function (_3db) {
	    return $.extend({}, $.parser.parseOptions(_3db, [{ fit: "boolean" }]));
	  };
	  $.fn.layout.defaults = { fit: false };
	  $.fn.layout.parsePanelOptions = function (_3dc) {
	    var t = $(_3dc);
	    return $.extend({}, $.fn.panel.parseOptions(_3dc), $.parser.parseOptions(_3dc, ["region", { split: "boolean", collpasedSize: "number", minWidth: "number", minHeight: "number", maxWidth: "number", maxHeight: "number" }]));
	  };
	  $.fn.layout.paneldefaults = $.extend({}, $.fn.panel.defaults, { region: null, split: false, collapsedSize: 28, minWidth: 10, minHeight: 10, maxWidth: 10000, maxHeight: 10000 });
	})(jQuery);
	(function ($) {
	  $(function () {
	    $(document).unbind(".menu").bind("mousedown.menu", function (e) {
	      var m = $(e.target).closest("div.menu,div.combo-p");
	      if (m.length) {
	        return;
	      }
	      $("body>div.menu-top:visible").not(".menu-inline").menu("hide");
	      _3dd($("body>div.menu:visible").not(".menu-inline"));
	    });
	  });
	  function init(_3de) {
	    var opts = $.data(_3de, "menu").options;
	    $(_3de).addClass("menu-top");
	    opts.inline ? $(_3de).addClass("menu-inline") : $(_3de).appendTo("body");
	    $(_3de).bind("_resize", function (e, _3df) {
	      if ($(this).hasClass("easyui-fluid") || _3df) {
	        $(_3de).menu("resize", _3de);
	      }
	      return false;
	    });
	    var _3e0 = _3e1($(_3de));
	    for (var i = 0; i < _3e0.length; i++) {
	      _3e2(_3e0[i]);
	    }
	    function _3e1(menu) {
	      var _3e3 = [];
	      menu.addClass("menu");
	      _3e3.push(menu);
	      if (!menu.hasClass("menu-content")) {
	        menu.children("div").each(function () {
	          var _3e4 = $(this).children("div");
	          if (_3e4.length) {
	            _3e4.appendTo("body");
	            this.submenu = _3e4;
	            var mm = _3e1(_3e4);
	            _3e3 = _3e3.concat(mm);
	          }
	        });
	      }
	      return _3e3;
	    };
	    function _3e2(menu) {
	      var wh = $.parser.parseOptions(menu[0], ["width", "height"]);
	      menu[0].originalHeight = wh.height || 0;
	      if (menu.hasClass("menu-content")) {
	        menu[0].originalWidth = wh.width || menu._outerWidth();
	      } else {
	        menu[0].originalWidth = wh.width || 0;
	        menu.children("div").each(function () {
	          var item = $(this);
	          var _3e5 = $.extend({}, $.parser.parseOptions(this, ["name", "iconCls", "href", { separator: "boolean" }]), { disabled: item.attr("disabled") ? true : undefined });
	          if (_3e5.separator) {
	            item.addClass("menu-sep");
	          }
	          if (!item.hasClass("menu-sep")) {
	            item[0].itemName = _3e5.name || "";
	            item[0].itemHref = _3e5.href || "";
	            var text = item.addClass("menu-item").html();
	            item.empty().append($("<div class=\"menu-text\"></div>").html(text));
	            if (_3e5.iconCls) {
	              $("<div class=\"menu-icon\"></div>").addClass(_3e5.iconCls).appendTo(item);
	            }
	            if (_3e5.disabled) {
	              _3e6(_3de, item[0], true);
	            }
	            if (item[0].submenu) {
	              $("<div class=\"menu-rightarrow\"></div>").appendTo(item);
	            }
	            _3e7(_3de, item);
	          }
	        });
	        $("<div class=\"menu-line\"></div>").prependTo(menu);
	      }
	      _3e8(_3de, menu);
	      if (!menu.hasClass("menu-inline")) {
	        menu.hide();
	      }
	      _3e9(_3de, menu);
	    };
	  };
	  function _3e8(_3ea, menu) {
	    var opts = $.data(_3ea, "menu").options;
	    var _3eb = menu.attr("style") || "";
	    menu.css({ display: "block", left: -10000, height: "auto", overflow: "hidden" });
	    menu.find(".menu-item").each(function () {
	      $(this)._outerHeight(opts.itemHeight);
	      $(this).find(".menu-text").css({ height: opts.itemHeight - 2 + "px", lineHeight: opts.itemHeight - 2 + "px" });
	    });
	    menu.removeClass("menu-noline").addClass(opts.noline ? "menu-noline" : "");
	    var _3ec = menu[0].originalWidth || "auto";
	    if (isNaN(parseInt(_3ec))) {
	      _3ec = 0;
	      menu.find("div.menu-text").each(function () {
	        if (_3ec < $(this)._outerWidth()) {
	          _3ec = $(this)._outerWidth();
	        }
	      });
	      _3ec += 40;
	    }
	    var _3ed = menu.outerHeight();
	    var _3ee = menu[0].originalHeight || "auto";
	    if (isNaN(parseInt(_3ee))) {
	      _3ee = _3ed;
	      if (menu.hasClass("menu-top") && opts.alignTo) {
	        var at = $(opts.alignTo);
	        var h1 = at.offset().top - $(document).scrollTop();
	        var h2 = $(window)._outerHeight() + $(document).scrollTop() - at.offset().top - at._outerHeight();
	        _3ee = Math.min(_3ee, Math.max(h1, h2));
	      } else {
	        if (_3ee > $(window)._outerHeight()) {
	          _3ee = $(window).height();
	        }
	      }
	    }
	    menu.attr("style", _3eb);
	    menu._size({ fit: menu[0] == _3ea ? opts.fit : false, width: _3ec, minWidth: opts.minWidth, height: _3ee });
	    menu.css("overflow", menu.outerHeight() < _3ed ? "auto" : "hidden");
	    menu.children("div.menu-line")._outerHeight(_3ed - 2);
	  };
	  function _3e9(_3ef, menu) {
	    if (menu.hasClass("menu-inline")) {
	      return;
	    }
	    var _3f0 = $.data(_3ef, "menu");
	    menu.unbind(".menu").bind("mouseenter.menu", function () {
	      if (_3f0.timer) {
	        clearTimeout(_3f0.timer);
	        _3f0.timer = null;
	      }
	    }).bind("mouseleave.menu", function () {
	      if (_3f0.options.hideOnUnhover) {
	        _3f0.timer = setTimeout(function () {
	          _3f1(_3ef, $(_3ef).hasClass("menu-inline"));
	        }, _3f0.options.duration);
	      }
	    });
	  };
	  function _3e7(_3f2, item) {
	    if (!item.hasClass("menu-item")) {
	      return;
	    }
	    item.unbind(".menu");
	    item.bind("click.menu", function () {
	      if ($(this).hasClass("menu-item-disabled")) {
	        return;
	      }
	      if (!this.submenu) {
	        _3f1(_3f2, $(_3f2).hasClass("menu-inline"));
	        var href = this.itemHref;
	        if (href) {
	          location.href = href;
	        }
	      }
	      $(this).trigger("mouseenter");
	      var item = $(_3f2).menu("getItem", this);
	      $.data(_3f2, "menu").options.onClick.call(_3f2, item);
	    }).bind("mouseenter.menu", function (e) {
	      item.siblings().each(function () {
	        if (this.submenu) {
	          _3dd(this.submenu);
	        }
	        $(this).removeClass("menu-active");
	      });
	      item.addClass("menu-active");
	      if ($(this).hasClass("menu-item-disabled")) {
	        item.addClass("menu-active-disabled");
	        return;
	      }
	      var _3f3 = item[0].submenu;
	      if (_3f3) {
	        $(_3f2).menu("show", { menu: _3f3, parent: item });
	      }
	    }).bind("mouseleave.menu", function (e) {
	      item.removeClass("menu-active menu-active-disabled");
	      var _3f4 = item[0].submenu;
	      if (_3f4) {
	        if (e.pageX >= parseInt(_3f4.css("left"))) {
	          item.addClass("menu-active");
	        } else {
	          _3dd(_3f4);
	        }
	      } else {
	        item.removeClass("menu-active");
	      }
	    });
	  };
	  function _3f1(_3f5, _3f6) {
	    var _3f7 = $.data(_3f5, "menu");
	    if (_3f7) {
	      if ($(_3f5).is(":visible")) {
	        _3dd($(_3f5));
	        if (_3f6) {
	          $(_3f5).show();
	        } else {
	          _3f7.options.onHide.call(_3f5);
	        }
	      }
	    }
	    return false;
	  };
	  function _3f8(_3f9, _3fa) {
	    var left, top;
	    _3fa = _3fa || {};
	    var menu = $(_3fa.menu || _3f9);
	    $(_3f9).menu("resize", menu[0]);
	    if (menu.hasClass("menu-top")) {
	      var opts = $.data(_3f9, "menu").options;
	      $.extend(opts, _3fa);
	      left = opts.left;
	      top = opts.top;
	      if (opts.alignTo) {
	        var at = $(opts.alignTo);
	        left = at.offset().left;
	        top = at.offset().top + at._outerHeight();
	        if (opts.align == "right") {
	          left += at.outerWidth() - menu.outerWidth();
	        }
	      }
	      if (left + menu.outerWidth() > $(window)._outerWidth() + $(document)._scrollLeft()) {
	        left = $(window)._outerWidth() + $(document).scrollLeft() - menu.outerWidth() - 5;
	      }
	      if (left < 0) {
	        left = 0;
	      }
	      top = _3fb(top, opts.alignTo);
	    } else {
	      var _3fc = _3fa.parent;
	      left = _3fc.offset().left + _3fc.outerWidth() - 2;
	      if (left + menu.outerWidth() + 5 > $(window)._outerWidth() + $(document).scrollLeft()) {
	        left = _3fc.offset().left - menu.outerWidth() + 2;
	      }
	      top = _3fb(_3fc.offset().top - 3);
	    }
	    function _3fb(top, _3fd) {
	      if (top + menu.outerHeight() > $(window)._outerHeight() + $(document).scrollTop()) {
	        if (_3fd) {
	          top = $(_3fd).offset().top - menu._outerHeight();
	        } else {
	          top = $(window)._outerHeight() + $(document).scrollTop() - menu.outerHeight();
	        }
	      }
	      if (top < 0) {
	        top = 0;
	      }
	      return top;
	    };
	    menu.css({ left: left, top: top });
	    menu.show(0, function () {
	      if (!menu[0].shadow) {
	        menu[0].shadow = $("<div class=\"menu-shadow\"></div>").insertAfter(menu);
	      }
	      menu[0].shadow.css({ display: menu.hasClass("menu-inline") ? "none" : "block", zIndex: $.fn.menu.defaults.zIndex++, left: menu.css("left"), top: menu.css("top"), width: menu.outerWidth(), height: menu.outerHeight() });
	      menu.css("z-index", $.fn.menu.defaults.zIndex++);
	      if (menu.hasClass("menu-top")) {
	        $.data(menu[0], "menu").options.onShow.call(menu[0]);
	      }
	    });
	  };
	  function _3dd(menu) {
	    if (menu && menu.length) {
	      _3fe(menu);
	      menu.find("div.menu-item").each(function () {
	        if (this.submenu) {
	          _3dd(this.submenu);
	        }
	        $(this).removeClass("menu-active");
	      });
	    }
	    function _3fe(m) {
	      m.stop(true, true);
	      if (m[0].shadow) {
	        m[0].shadow.hide();
	      }
	      m.hide();
	    };
	  };
	  function _3ff(_400, text) {
	    var _401 = null;
	    var tmp = $("<div></div>");
	    function find(menu) {
	      menu.children("div.menu-item").each(function () {
	        var item = $(_400).menu("getItem", this);
	        var s = tmp.empty().html(item.text).text();
	        if (text == $.trim(s)) {
	          _401 = item;
	        } else {
	          if (this.submenu && !_401) {
	            find(this.submenu);
	          }
	        }
	      });
	    };
	    find($(_400));
	    tmp.remove();
	    return _401;
	  };
	  function _3e6(_402, _403, _404) {
	    var t = $(_403);
	    if (!t.hasClass("menu-item")) {
	      return;
	    }
	    if (_404) {
	      t.addClass("menu-item-disabled");
	      if (_403.onclick) {
	        _403.onclick1 = _403.onclick;
	        _403.onclick = null;
	      }
	    } else {
	      t.removeClass("menu-item-disabled");
	      if (_403.onclick1) {
	        _403.onclick = _403.onclick1;
	        _403.onclick1 = null;
	      }
	    }
	  };
	  function _405(_406, _407) {
	    var opts = $.data(_406, "menu").options;
	    var menu = $(_406);
	    if (_407.parent) {
	      if (!_407.parent.submenu) {
	        var _408 = $("<div class=\"menu\"><div class=\"menu-line\"></div></div>").appendTo("body");
	        _408.hide();
	        _407.parent.submenu = _408;
	        $("<div class=\"menu-rightarrow\"></div>").appendTo(_407.parent);
	      }
	      menu = _407.parent.submenu;
	    }
	    if (_407.separator) {
	      var item = $("<div class=\"menu-sep\"></div>").appendTo(menu);
	    } else {
	      var item = $("<div class=\"menu-item\"></div>").appendTo(menu);
	      $("<div class=\"menu-text\"></div>").html(_407.text).appendTo(item);
	    }
	    if (_407.iconCls) {
	      $("<div class=\"menu-icon\"></div>").addClass(_407.iconCls).appendTo(item);
	    }
	    if (_407.id) {
	      item.attr("id", _407.id);
	    }
	    if (_407.name) {
	      item[0].itemName = _407.name;
	    }
	    if (_407.href) {
	      item[0].itemHref = _407.href;
	    }
	    if (_407.onclick) {
	      if (typeof _407.onclick == "string") {
	        item.attr("onclick", _407.onclick);
	      } else {
	        item[0].onclick = eval(_407.onclick);
	      }
	    }
	    if (_407.handler) {
	      item[0].onclick = eval(_407.handler);
	    }
	    if (_407.disabled) {
	      _3e6(_406, item[0], true);
	    }
	    _3e7(_406, item);
	    _3e9(_406, menu);
	    _3e8(_406, menu);
	  };
	  function _409(_40a, _40b) {
	    function _40c(el) {
	      if (el.submenu) {
	        el.submenu.children("div.menu-item").each(function () {
	          _40c(this);
	        });
	        var _40d = el.submenu[0].shadow;
	        if (_40d) {
	          _40d.remove();
	        }
	        el.submenu.remove();
	      }
	      $(el).remove();
	    };
	    var menu = $(_40b).parent();
	    _40c(_40b);
	    _3e8(_40a, menu);
	  };
	  function _40e(_40f, _410, _411) {
	    var menu = $(_410).parent();
	    if (_411) {
	      $(_410).show();
	    } else {
	      $(_410).hide();
	    }
	    _3e8(_40f, menu);
	  };
	  function _412(_413) {
	    $(_413).children("div.menu-item").each(function () {
	      _409(_413, this);
	    });
	    if (_413.shadow) {
	      _413.shadow.remove();
	    }
	    $(_413).remove();
	  };
	  $.fn.menu = function (_414, _415) {
	    if (typeof _414 == "string") {
	      return $.fn.menu.methods[_414](this, _415);
	    }
	    _414 = _414 || {};
	    return this.each(function () {
	      var _416 = $.data(this, "menu");
	      if (_416) {
	        $.extend(_416.options, _414);
	      } else {
	        _416 = $.data(this, "menu", { options: $.extend({}, $.fn.menu.defaults, $.fn.menu.parseOptions(this), _414) });
	        init(this);
	      }
	      $(this).css({ left: _416.options.left, top: _416.options.top });
	    });
	  };
	  $.fn.menu.methods = { options: function options(jq) {
	      return $.data(jq[0], "menu").options;
	    }, show: function show(jq, pos) {
	      return jq.each(function () {
	        _3f8(this, pos);
	      });
	    }, hide: function hide(jq) {
	      return jq.each(function () {
	        _3f1(this);
	      });
	    }, destroy: function destroy(jq) {
	      return jq.each(function () {
	        _412(this);
	      });
	    }, setText: function setText(jq, _417) {
	      return jq.each(function () {
	        $(_417.target).children("div.menu-text").html(_417.text);
	      });
	    }, setIcon: function setIcon(jq, _418) {
	      return jq.each(function () {
	        $(_418.target).children("div.menu-icon").remove();
	        if (_418.iconCls) {
	          $("<div class=\"menu-icon\"></div>").addClass(_418.iconCls).appendTo(_418.target);
	        }
	      });
	    }, getItem: function getItem(jq, _419) {
	      var t = $(_419);
	      var item = { target: _419, id: t.attr("id"), text: $.trim(t.children("div.menu-text").html()), disabled: t.hasClass("menu-item-disabled"), name: _419.itemName, href: _419.itemHref, onclick: _419.onclick };
	      var icon = t.children("div.menu-icon");
	      if (icon.length) {
	        var cc = [];
	        var aa = icon.attr("class").split(" ");
	        for (var i = 0; i < aa.length; i++) {
	          if (aa[i] != "menu-icon") {
	            cc.push(aa[i]);
	          }
	        }
	        item.iconCls = cc.join(" ");
	      }
	      return item;
	    }, findItem: function findItem(jq, text) {
	      return _3ff(jq[0], text);
	    }, appendItem: function appendItem(jq, _41a) {
	      return jq.each(function () {
	        _405(this, _41a);
	      });
	    }, removeItem: function removeItem(jq, _41b) {
	      return jq.each(function () {
	        _409(this, _41b);
	      });
	    }, enableItem: function enableItem(jq, _41c) {
	      return jq.each(function () {
	        _3e6(this, _41c, false);
	      });
	    }, disableItem: function disableItem(jq, _41d) {
	      return jq.each(function () {
	        _3e6(this, _41d, true);
	      });
	    }, showItem: function showItem(jq, _41e) {
	      return jq.each(function () {
	        _40e(this, _41e, true);
	      });
	    }, hideItem: function hideItem(jq, _41f) {
	      return jq.each(function () {
	        _40e(this, _41f, false);
	      });
	    }, resize: function resize(jq, _420) {
	      return jq.each(function () {
	        _3e8(this, $(_420));
	      });
	    } };
	  $.fn.menu.parseOptions = function (_421) {
	    return $.extend({}, $.parser.parseOptions(_421, [{ minWidth: "number", itemHeight: "number", duration: "number", hideOnUnhover: "boolean" }, { fit: "boolean", inline: "boolean", noline: "boolean" }]));
	  };
	  $.fn.menu.defaults = { zIndex: 110000, left: 0, top: 0, alignTo: null, align: "left", minWidth: 120, itemHeight: 22, duration: 100, hideOnUnhover: true, inline: false, fit: false, noline: false, onShow: function onShow() {}, onHide: function onHide() {}, onClick: function onClick(item) {} };
	})(jQuery);
	(function ($) {
	  function init(_422) {
	    var opts = $.data(_422, "menubutton").options;
	    var btn = $(_422);
	    btn.linkbutton(opts);
	    if (opts.hasDownArrow) {
	      btn.removeClass(opts.cls.btn1 + " " + opts.cls.btn2).addClass("m-btn");
	      btn.removeClass("m-btn-small m-btn-medium m-btn-large").addClass("m-btn-" + opts.size);
	      var _423 = btn.find(".l-btn-left");
	      $("<span></span>").addClass(opts.cls.arrow).appendTo(_423);
	      $("<span></span>").addClass("m-btn-line").appendTo(_423);
	    }
	    $(_422).menubutton("resize");
	    if (opts.menu) {
	      $(opts.menu).menu({ duration: opts.duration });
	      var _424 = $(opts.menu).menu("options");
	      var _425 = _424.onShow;
	      var _426 = _424.onHide;
	      $.extend(_424, { onShow: function onShow() {
	          var _427 = $(this).menu("options");
	          var btn = $(_427.alignTo);
	          var opts = btn.menubutton("options");
	          btn.addClass(opts.plain == true ? opts.cls.btn2 : opts.cls.btn1);
	          _425.call(this);
	        }, onHide: function onHide() {
	          var _428 = $(this).menu("options");
	          var btn = $(_428.alignTo);
	          var opts = btn.menubutton("options");
	          btn.removeClass(opts.plain == true ? opts.cls.btn2 : opts.cls.btn1);
	          _426.call(this);
	        } });
	    }
	  };
	  function _429(_42a) {
	    var opts = $.data(_42a, "menubutton").options;
	    var btn = $(_42a);
	    var t = btn.find("." + opts.cls.trigger);
	    if (!t.length) {
	      t = btn;
	    }
	    t.unbind(".menubutton");
	    var _42b = null;
	    t.bind("click.menubutton", function () {
	      if (!_42c()) {
	        _42d(_42a);
	        return false;
	      }
	    }).bind("mouseenter.menubutton", function () {
	      if (!_42c()) {
	        _42b = setTimeout(function () {
	          _42d(_42a);
	        }, opts.duration);
	        return false;
	      }
	    }).bind("mouseleave.menubutton", function () {
	      if (_42b) {
	        clearTimeout(_42b);
	      }
	      $(opts.menu).triggerHandler("mouseleave");
	    });
	    function _42c() {
	      return $(_42a).linkbutton("options").disabled;
	    };
	  };
	  function _42d(_42e) {
	    var opts = $(_42e).menubutton("options");
	    if (opts.disabled || !opts.menu) {
	      return;
	    }
	    $("body>div.menu-top").menu("hide");
	    var btn = $(_42e);
	    var mm = $(opts.menu);
	    if (mm.length) {
	      mm.menu("options").alignTo = btn;
	      mm.menu("show", { alignTo: btn, align: opts.menuAlign });
	    }
	    btn.blur();
	  };
	  $.fn.menubutton = function (_42f, _430) {
	    if (typeof _42f == "string") {
	      var _431 = $.fn.menubutton.methods[_42f];
	      if (_431) {
	        return _431(this, _430);
	      } else {
	        return this.linkbutton(_42f, _430);
	      }
	    }
	    _42f = _42f || {};
	    return this.each(function () {
	      var _432 = $.data(this, "menubutton");
	      if (_432) {
	        $.extend(_432.options, _42f);
	      } else {
	        $.data(this, "menubutton", { options: $.extend({}, $.fn.menubutton.defaults, $.fn.menubutton.parseOptions(this), _42f) });
	        $(this).removeAttr("disabled");
	      }
	      init(this);
	      _429(this);
	    });
	  };
	  $.fn.menubutton.methods = { options: function options(jq) {
	      var _433 = jq.linkbutton("options");
	      return $.extend($.data(jq[0], "menubutton").options, { toggle: _433.toggle, selected: _433.selected, disabled: _433.disabled });
	    }, destroy: function destroy(jq) {
	      return jq.each(function () {
	        var opts = $(this).menubutton("options");
	        if (opts.menu) {
	          $(opts.menu).menu("destroy");
	        }
	        $(this).remove();
	      });
	    } };
	  $.fn.menubutton.parseOptions = function (_434) {
	    var t = $(_434);
	    return $.extend({}, $.fn.linkbutton.parseOptions(_434), $.parser.parseOptions(_434, ["menu", { plain: "boolean", hasDownArrow: "boolean", duration: "number" }]));
	  };
	  $.fn.menubutton.defaults = $.extend({}, $.fn.linkbutton.defaults, { plain: true, hasDownArrow: true, menu: null, menuAlign: "left", duration: 100, cls: { btn1: "m-btn-active", btn2: "m-btn-plain-active", arrow: "m-btn-downarrow", trigger: "m-btn" } });
	})(jQuery);
	(function ($) {
	  function init(_435) {
	    var opts = $.data(_435, "splitbutton").options;
	    $(_435).menubutton(opts);
	    $(_435).addClass("s-btn");
	  };
	  $.fn.splitbutton = function (_436, _437) {
	    if (typeof _436 == "string") {
	      var _438 = $.fn.splitbutton.methods[_436];
	      if (_438) {
	        return _438(this, _437);
	      } else {
	        return this.menubutton(_436, _437);
	      }
	    }
	    _436 = _436 || {};
	    return this.each(function () {
	      var _439 = $.data(this, "splitbutton");
	      if (_439) {
	        $.extend(_439.options, _436);
	      } else {
	        $.data(this, "splitbutton", { options: $.extend({}, $.fn.splitbutton.defaults, $.fn.splitbutton.parseOptions(this), _436) });
	        $(this).removeAttr("disabled");
	      }
	      init(this);
	    });
	  };
	  $.fn.splitbutton.methods = { options: function options(jq) {
	      var _43a = jq.menubutton("options");
	      var _43b = $.data(jq[0], "splitbutton").options;
	      $.extend(_43b, { disabled: _43a.disabled, toggle: _43a.toggle, selected: _43a.selected });
	      return _43b;
	    } };
	  $.fn.splitbutton.parseOptions = function (_43c) {
	    var t = $(_43c);
	    return $.extend({}, $.fn.linkbutton.parseOptions(_43c), $.parser.parseOptions(_43c, ["menu", { plain: "boolean", duration: "number" }]));
	  };
	  $.fn.splitbutton.defaults = $.extend({}, $.fn.linkbutton.defaults, { plain: true, menu: null, duration: 100, cls: { btn1: "m-btn-active s-btn-active", btn2: "m-btn-plain-active s-btn-plain-active", arrow: "m-btn-downarrow", trigger: "m-btn-line" } });
	})(jQuery);
	(function ($) {
	  function init(_43d) {
	    $(_43d).addClass("validatebox-text");
	  };
	  function _43e(_43f) {
	    var _440 = $.data(_43f, "validatebox");
	    _440.validating = false;
	    if (_440.timer) {
	      clearTimeout(_440.timer);
	    }
	    $(_43f).tooltip("destroy");
	    $(_43f).unbind();
	    $(_43f).remove();
	  };
	  function _441(_442) {
	    var opts = $.data(_442, "validatebox").options;
	    var box = $(_442);
	    box.unbind(".validatebox");
	    if (opts.novalidate || box.is(":disabled")) {
	      return;
	    }
	    for (var _443 in opts.events) {
	      $(_442).bind(_443 + ".validatebox", { target: _442 }, opts.events[_443]);
	    }
	  };
	  function _444(e) {
	    var _445 = e.data.target;
	    var _446 = $.data(_445, "validatebox");
	    var box = $(_445);
	    if ($(_445).attr("readonly")) {
	      return;
	    }
	    _446.validating = true;
	    _446.value = undefined;
	    (function () {
	      if (_446.validating) {
	        if (_446.value != box.val()) {
	          _446.value = box.val();
	          if (_446.timer) {
	            clearTimeout(_446.timer);
	          }
	          _446.timer = setTimeout(function () {
	            $(_445).validatebox("validate");
	          }, _446.options.delay);
	        } else {
	          _447(_445);
	        }
	        setTimeout(arguments.callee, 200);
	      }
	    })();
	  };
	  function _448(e) {
	    var _449 = e.data.target;
	    var _44a = $.data(_449, "validatebox");
	    if (_44a.timer) {
	      clearTimeout(_44a.timer);
	      _44a.timer = undefined;
	    }
	    _44a.validating = false;
	    _44b(_449);
	  };
	  function _44c(e) {
	    var _44d = e.data.target;
	    if ($(_44d).hasClass("validatebox-invalid")) {
	      _44e(_44d);
	    }
	  };
	  function _44f(e) {
	    var _450 = e.data.target;
	    var _451 = $.data(_450, "validatebox");
	    if (!_451.validating) {
	      _44b(_450);
	    }
	  };
	  function _44e(_452) {
	    var _453 = $.data(_452, "validatebox");
	    var opts = _453.options;
	    $(_452).tooltip($.extend({}, opts.tipOptions, { content: _453.message, position: opts.tipPosition, deltaX: opts.deltaX })).tooltip("show");
	    _453.tip = true;
	  };
	  function _447(_454) {
	    var _455 = $.data(_454, "validatebox");
	    if (_455 && _455.tip) {
	      $(_454).tooltip("reposition");
	    }
	  };
	  function _44b(_456) {
	    var _457 = $.data(_456, "validatebox");
	    _457.tip = false;
	    $(_456).tooltip("hide");
	  };
	  function _458(_459) {
	    var _45a = $.data(_459, "validatebox");
	    var opts = _45a.options;
	    var box = $(_459);
	    opts.onBeforeValidate.call(_459);
	    var _45b = _45c();
	    opts.onValidate.call(_459, _45b);
	    return _45b;
	    function _45d(msg) {
	      _45a.message = msg;
	    };
	    function _45e(_45f, _460) {
	      var _461 = box.val();
	      var _462 = /([a-zA-Z_]+)(.*)/.exec(_45f);
	      var rule = opts.rules[_462[1]];
	      if (rule && _461) {
	        var _463 = _460 || opts.validParams || eval(_462[2]);
	        if (!rule["validator"].call(_459, _461, _463)) {
	          box.addClass("validatebox-invalid");
	          var _464 = rule["message"];
	          if (_463) {
	            for (var i = 0; i < _463.length; i++) {
	              _464 = _464.replace(new RegExp("\\{" + i + "\\}", "g"), _463[i]);
	            }
	          }
	          _45d(opts.invalidMessage || _464);
	          if (_45a.validating) {
	            _44e(_459);
	          }
	          return false;
	        }
	      }
	      return true;
	    };
	    function _45c() {
	      box.removeClass("validatebox-invalid");
	      _44b(_459);
	      if (opts.novalidate || box.is(":disabled")) {
	        return true;
	      }
	      if (opts.required) {
	        if (box.val() == "") {
	          box.addClass("validatebox-invalid");
	          _45d(opts.missingMessage);
	          if (_45a.validating) {
	            _44e(_459);
	          }
	          return false;
	        }
	      }
	      if (opts.validType) {
	        if ($.isArray(opts.validType)) {
	          for (var i = 0; i < opts.validType.length; i++) {
	            if (!_45e(opts.validType[i])) {
	              return false;
	            }
	          }
	        } else {
	          if (typeof opts.validType == "string") {
	            if (!_45e(opts.validType)) {
	              return false;
	            }
	          } else {
	            for (var _465 in opts.validType) {
	              var _466 = opts.validType[_465];
	              if (!_45e(_465, _466)) {
	                return false;
	              }
	            }
	          }
	        }
	      }
	      return true;
	    };
	  };
	  function _467(_468, _469) {
	    var opts = $.data(_468, "validatebox").options;
	    if (_469 != undefined) {
	      opts.novalidate = _469;
	    }
	    if (opts.novalidate) {
	      $(_468).removeClass("validatebox-invalid");
	      _44b(_468);
	    }
	    _458(_468);
	    _441(_468);
	  };
	  $.fn.validatebox = function (_46a, _46b) {
	    if (typeof _46a == "string") {
	      return $.fn.validatebox.methods[_46a](this, _46b);
	    }
	    _46a = _46a || {};
	    return this.each(function () {
	      var _46c = $.data(this, "validatebox");
	      if (_46c) {
	        $.extend(_46c.options, _46a);
	      } else {
	        init(this);
	        $.data(this, "validatebox", { options: $.extend({}, $.fn.validatebox.defaults, $.fn.validatebox.parseOptions(this), _46a) });
	      }
	      _467(this);
	      _458(this);
	    });
	  };
	  $.fn.validatebox.methods = { options: function options(jq) {
	      return $.data(jq[0], "validatebox").options;
	    }, destroy: function destroy(jq) {
	      return jq.each(function () {
	        _43e(this);
	      });
	    }, validate: function validate(jq) {
	      return jq.each(function () {
	        _458(this);
	      });
	    }, isValid: function isValid(jq) {
	      return _458(jq[0]);
	    }, enableValidation: function enableValidation(jq) {
	      return jq.each(function () {
	        _467(this, false);
	      });
	    }, disableValidation: function disableValidation(jq) {
	      return jq.each(function () {
	        _467(this, true);
	      });
	    } };
	  $.fn.validatebox.parseOptions = function (_46d) {
	    var t = $(_46d);
	    return $.extend({}, $.parser.parseOptions(_46d, ["validType", "missingMessage", "invalidMessage", "tipPosition", { delay: "number", deltaX: "number" }]), { required: t.attr("required") ? true : undefined, novalidate: t.attr("novalidate") != undefined ? true : undefined });
	  };
	  $.fn.validatebox.defaults = { required: false, validType: null, validParams: null, delay: 200, missingMessage: "This field is required.", invalidMessage: null, tipPosition: "right", deltaX: 0, novalidate: false, events: { focus: _444, blur: _448, mouseenter: _44c, mouseleave: _44f, click: function click(e) {
	        var t = $(e.data.target);
	        if (!t.is(":focus")) {
	          t.trigger("focus");
	        }
	      } }, tipOptions: { showEvent: "none", hideEvent: "none", showDelay: 0, hideDelay: 0, zIndex: "", onShow: function onShow() {
	        $(this).tooltip("tip").css({ color: "#000", borderColor: "#CC9933", backgroundColor: "#FFFFCC" });
	      }, onHide: function onHide() {
	        $(this).tooltip("destroy");
	      } }, rules: { email: { validator: function validator(_46e) {
	          return (/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(_46e)
	          );
	        }, message: "请填写一个正确的邮箱地址." }, url: { validator: function validator(_46f) {
	          return (/^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(_46f)
	          );
	        }, message: "Please enter a valid URL." }, length: { validator: function validator(_470, _471) {
	          var len = $.trim(_470).length;
	          return len >= _471[0] && len <= _471[1];
	        }, message: "请填写一串数字在 {0} 位数" }, remote: { validator: function validator(_472, _473) {
	          var data = {};
	          data[_473[1]] = _472;
	          var _474 = $.ajax({ url: _473[0], dataType: "json", data: data, async: false, cache: false, type: "post" }).responseText;
	          return _474 == "true";
	        }, message: "Please fix this field." } }, onBeforeValidate: function onBeforeValidate() {}, onValidate: function onValidate(_475) {} };
	})(jQuery);
	(function ($) {
	  function init(_476) {
	    $(_476).addClass("textbox-f").hide();
	    var span = $("<span class=\"textbox\">" + "<input class=\"textbox-text\" autocomplete=\"off\">" + "<input type=\"hidden\" class=\"textbox-value\">" + "</span>").insertAfter(_476);
	    var name = $(_476).attr("name");
	    if (name) {
	      span.find("input.textbox-value").attr("name", name);
	      $(_476).removeAttr("name").attr("textboxName", name);
	    }
	    return span;
	  };
	  function _477(_478) {
	    var _479 = $.data(_478, "textbox");
	    var opts = _479.options;
	    var tb = _479.textbox;
	    tb.find(".textbox-text").remove();
	    if (opts.multiline) {
	      $("<textarea class=\"textbox-text\" autocomplete=\"off\"></textarea>").prependTo(tb);
	    } else {
	      $("<input type=\"" + opts.type + "\" class=\"textbox-text\" autocomplete=\"off\">").prependTo(tb);
	    }
	    tb.find(".textbox-addon").remove();
	    var bb = opts.icons ? $.extend(true, [], opts.icons) : [];
	    if (opts.iconCls) {
	      bb.push({ iconCls: opts.iconCls, disabled: true });
	    }
	    if (bb.length) {
	      var bc = $("<span class=\"textbox-addon\"></span>").prependTo(tb);
	      bc.addClass("textbox-addon-" + opts.iconAlign);
	      for (var i = 0; i < bb.length; i++) {
	        bc.append("<a href=\"javascript:void(0)\" class=\"textbox-icon " + bb[i].iconCls + "\" icon-index=\"" + i + "\" tabindex=\"-1\"></a>");
	      }
	    }
	    tb.find(".textbox-button").remove();
	    if (opts.buttonText || opts.buttonIcon) {
	      var btn = $("<a href=\"javascript:void(0)\" class=\"textbox-button\"></a>").prependTo(tb);
	      btn.addClass("textbox-button-" + opts.buttonAlign).linkbutton({ text: opts.buttonText, iconCls: opts.buttonIcon });
	    }
	    _47a(_478, opts.disabled);
	    _47b(_478, opts.readonly);
	  };
	  function _47c(_47d) {
	    var tb = $.data(_47d, "textbox").textbox;
	    tb.find(".textbox-text").validatebox("destroy");
	    tb.remove();
	    $(_47d).remove();
	  };
	  function _47e(_47f, _480) {
	    var _481 = $.data(_47f, "textbox");
	    var opts = _481.options;
	    var tb = _481.textbox;
	    var _482 = tb.parent();
	    if (_480) {
	      opts.width = _480;
	    }
	    if (isNaN(parseInt(opts.width))) {
	      var c = $(_47f).clone();
	      c.css("visibility", "hidden");
	      c.insertAfter(_47f);
	      opts.width = c.outerWidth();
	      c.remove();
	    }
	    var _483 = tb.is(":visible");
	    if (!_483) {
	      tb.appendTo("body");
	    }
	    var _484 = tb.find(".textbox-text");
	    var btn = tb.find(".textbox-button");
	    var _485 = tb.find(".textbox-addon");
	    var _486 = _485.find(".textbox-icon");
	    tb._size(opts, _482);
	    btn.linkbutton("resize", { height: tb.height() });
	    btn.css({ left: opts.buttonAlign == "left" ? 0 : "", right: opts.buttonAlign == "right" ? 0 : "" });
	    _485.css({ left: opts.iconAlign == "left" ? opts.buttonAlign == "left" ? btn._outerWidth() : 0 : "", right: opts.iconAlign == "right" ? opts.buttonAlign == "right" ? btn._outerWidth() : 0 : "" });
	    _486.css({ width: opts.iconWidth + "px", height: tb.height() + "px" });
	    _484.css({ paddingLeft: _47f.style.paddingLeft || "", paddingRight: _47f.style.paddingRight || "", marginLeft: _487("left"), marginRight: _487("right") });
	    if (opts.multiline) {
	      _484.css({ paddingTop: _47f.style.paddingTop || "", paddingBottom: _47f.style.paddingBottom || "" });
	      _484._outerHeight(tb.height());
	    } else {
	      var _488 = Math.floor((tb.height() - _484.height()) / 2);
	      _484.css({ paddingTop: _488 + "px", paddingBottom: _488 + "px" });
	    }
	    _484._outerWidth(tb.width() - _486.length * opts.iconWidth - btn._outerWidth());
	    if (!_483) {
	      tb.insertAfter(_47f);
	    }
	    opts.onResize.call(_47f, opts.width, opts.height);
	    function _487(_489) {
	      return (opts.iconAlign == _489 ? _485._outerWidth() : 0) + (opts.buttonAlign == _489 ? btn._outerWidth() : 0);
	    };
	  };
	  function _48a(_48b) {
	    var opts = $(_48b).textbox("options");
	    var _48c = $(_48b).textbox("textbox");
	    _48c.validatebox($.extend({}, opts, { deltaX: $(_48b).textbox("getTipX"), onBeforeValidate: function onBeforeValidate() {
	        var box = $(this);
	        if (!box.is(":focus")) {
	          opts.oldInputValue = box.val();
	          box.val(opts.value);
	        }
	      }, onValidate: function onValidate(_48d) {
	        var box = $(this);
	        if (opts.oldInputValue != undefined) {
	          box.val(opts.oldInputValue);
	          opts.oldInputValue = undefined;
	        }
	        var tb = box.parent();
	        if (_48d) {
	          tb.removeClass("textbox-invalid");
	        } else {
	          tb.addClass("textbox-invalid");
	        }
	      } }));
	  };
	  function _48e(_48f) {
	    var _490 = $.data(_48f, "textbox");
	    var opts = _490.options;
	    var tb = _490.textbox;
	    var _491 = tb.find(".textbox-text");
	    _491.attr("placeholder", opts.prompt);
	    _491.unbind(".textbox");
	    if (!opts.disabled && !opts.readonly) {
	      _491.bind("blur.textbox", function (e) {
	        if (!tb.hasClass("textbox-focused")) {
	          return;
	        }
	        opts.value = $(this).val();
	        if (opts.value == "") {
	          $(this).val(opts.prompt).addClass("textbox-prompt");
	        } else {
	          $(this).removeClass("textbox-prompt");
	        }
	        tb.removeClass("textbox-focused");
	      }).bind("focus.textbox", function (e) {
	        if (tb.hasClass("textbox-focused")) {
	          return;
	        }
	        if ($(this).val() != opts.value) {
	          $(this).val(opts.value);
	        }
	        $(this).removeClass("textbox-prompt");
	        tb.addClass("textbox-focused");
	      });
	      for (var _492 in opts.inputEvents) {
	        _491.bind(_492 + ".textbox", { target: _48f }, opts.inputEvents[_492]);
	      }
	    }
	    var _493 = tb.find(".textbox-addon");
	    _493.unbind().bind("click", { target: _48f }, function (e) {
	      var icon = $(e.target).closest("a.textbox-icon:not(.textbox-icon-disabled)");
	      if (icon.length) {
	        var _494 = parseInt(icon.attr("icon-index"));
	        var conf = opts.icons[_494];
	        if (conf && conf.handler) {
	          conf.handler.call(icon[0], e);
	          opts.onClickIcon.call(_48f, _494);
	        }
	      }
	    });
	    _493.find(".textbox-icon").each(function (_495) {
	      var conf = opts.icons[_495];
	      var icon = $(this);
	      if (!conf || conf.disabled || opts.disabled || opts.readonly) {
	        icon.addClass("textbox-icon-disabled");
	      } else {
	        icon.removeClass("textbox-icon-disabled");
	      }
	    });
	    var btn = tb.find(".textbox-button");
	    btn.unbind(".textbox").bind("click.textbox", function () {
	      if (!btn.linkbutton("options").disabled) {
	        opts.onClickButton.call(_48f);
	      }
	    });
	    btn.linkbutton(opts.disabled || opts.readonly ? "disable" : "enable");
	    tb.unbind(".textbox").bind("_resize.textbox", function (e, _496) {
	      if ($(this).hasClass("easyui-fluid") || _496) {
	        _47e(_48f);
	      }
	      return false;
	    });
	  };
	  function _47a(_497, _498) {
	    var _499 = $.data(_497, "textbox");
	    var opts = _499.options;
	    var tb = _499.textbox;
	    if (_498) {
	      opts.disabled = true;
	      $(_497).attr("disabled", "disabled");
	      tb.addClass("textbox-disabled");
	      tb.find(".textbox-text,.textbox-value").attr("disabled", "disabled");
	    } else {
	      opts.disabled = false;
	      tb.removeClass("textbox-disabled");
	      $(_497).removeAttr("disabled");
	      tb.find(".textbox-text,.textbox-value").removeAttr("disabled");
	    }
	  };
	  function _47b(_49a, mode) {
	    var _49b = $.data(_49a, "textbox");
	    var opts = _49b.options;
	    opts.readonly = mode == undefined ? true : mode;
	    _49b.textbox.removeClass("textbox-readonly").addClass(opts.readonly ? "textbox-readonly" : "");
	    var _49c = _49b.textbox.find(".textbox-text");
	    _49c.removeAttr("readonly");
	    if (opts.readonly || !opts.editable) {
	      _49c.attr("readonly", "readonly");
	    }
	  };
	  $.fn.textbox = function (_49d, _49e) {
	    if (typeof _49d == "string") {
	      var _49f = $.fn.textbox.methods[_49d];
	      if (_49f) {
	        return _49f(this, _49e);
	      } else {
	        return this.each(function () {
	          var _4a0 = $(this).textbox("textbox");
	          _4a0.validatebox(_49d, _49e);
	        });
	      }
	    }
	    _49d = _49d || {};
	    return this.each(function () {
	      var _4a1 = $.data(this, "textbox");
	      if (_4a1) {
	        $.extend(_4a1.options, _49d);
	        if (_49d.value != undefined) {
	          _4a1.options.originalValue = _49d.value;
	        }
	      } else {
	        _4a1 = $.data(this, "textbox", { options: $.extend({}, $.fn.textbox.defaults, $.fn.textbox.parseOptions(this), _49d), textbox: init(this) });
	        _4a1.options.originalValue = _4a1.options.value;
	      }
	      _477(this);
	      _48e(this);
	      _47e(this);
	      _48a(this);
	      $(this).textbox("initValue", _4a1.options.value);
	    });
	  };
	  $.fn.textbox.methods = { options: function options(jq) {
	      return $.data(jq[0], "textbox").options;
	    }, cloneFrom: function cloneFrom(jq, from) {
	      return jq.each(function () {
	        var t = $(this);
	        if (t.data("textbox")) {
	          return;
	        }
	        if (!$(from).data("textbox")) {
	          $(from).textbox();
	        }
	        var name = t.attr("name") || "";
	        t.addClass("textbox-f").hide();
	        t.removeAttr("name").attr("textboxName", name);
	        var span = $(from).next().clone().insertAfter(t);
	        span.find("input.textbox-value").attr("name", name);
	        $.data(this, "textbox", { options: $.extend(true, {}, $(from).textbox("options")), textbox: span });
	        var _4a2 = $(from).textbox("button");
	        if (_4a2.length) {
	          t.textbox("button").linkbutton($.extend(true, {}, _4a2.linkbutton("options")));
	        }
	        _48e(this);
	        _48a(this);
	      });
	    }, textbox: function textbox(jq) {
	      return $.data(jq[0], "textbox").textbox.find(".textbox-text");
	    }, button: function button(jq) {
	      return $.data(jq[0], "textbox").textbox.find(".textbox-button");
	    }, destroy: function destroy(jq) {
	      return jq.each(function () {
	        _47c(this);
	      });
	    }, resize: function resize(jq, _4a3) {
	      return jq.each(function () {
	        _47e(this, _4a3);
	      });
	    }, disable: function disable(jq) {
	      return jq.each(function () {
	        _47a(this, true);
	        _48e(this);
	      });
	    }, enable: function enable(jq) {
	      return jq.each(function () {
	        _47a(this, false);
	        _48e(this);
	      });
	    }, readonly: function readonly(jq, mode) {
	      return jq.each(function () {
	        _47b(this, mode);
	        _48e(this);
	      });
	    }, isValid: function isValid(jq) {
	      return jq.textbox("textbox").validatebox("isValid");
	    }, clear: function clear(jq) {
	      return jq.each(function () {
	        $(this).textbox("setValue", "");
	      });
	    }, setText: function setText(jq, _4a4) {
	      return jq.each(function () {
	        var opts = $(this).textbox("options");
	        var _4a5 = $(this).textbox("textbox");
	        if ($(this).textbox("getText") != _4a4) {
	          opts.value = _4a4;
	          _4a5.val(_4a4);
	        }
	        if (!_4a5.is(":focus")) {
	          if (_4a4) {
	            _4a5.removeClass("textbox-prompt");
	          } else {
	            _4a5.val(opts.prompt).addClass("textbox-prompt");
	          }
	        }
	        $(this).textbox("validate");
	      });
	    }, initValue: function initValue(jq, _4a6) {
	      return jq.each(function () {
	        var _4a7 = $.data(this, "textbox");
	        _4a7.options.value = "";
	        $(this).textbox("setText", _4a6);
	        _4a7.textbox.find(".textbox-value").val(_4a6);
	        $(this).val(_4a6);
	      });
	    }, setValue: function setValue(jq, _4a8) {
	      return jq.each(function () {
	        var opts = $.data(this, "textbox").options;
	        var _4a9 = $(this).textbox("getValue");
	        $(this).textbox("initValue", _4a8);
	        if (_4a9 != _4a8) {
	          opts.onChange.call(this, _4a8, _4a9);
	          $(this).closest("form").trigger("_change", [this]);
	        }
	      });
	    }, getText: function getText(jq) {
	      var _4aa = jq.textbox("textbox");
	      if (_4aa.is(":focus")) {
	        return _4aa.val();
	      } else {
	        return jq.textbox("options").value;
	      }
	    }, getValue: function getValue(jq) {
	      return jq.data("textbox").textbox.find(".textbox-value").val();
	    }, reset: function reset(jq) {
	      return jq.each(function () {
	        var opts = $(this).textbox("options");
	        $(this).textbox("setValue", opts.originalValue);
	      });
	    }, getIcon: function getIcon(jq, _4ab) {
	      return jq.data("textbox").textbox.find(".textbox-icon:eq(" + _4ab + ")");
	    }, getTipX: function getTipX(jq) {
	      var _4ac = jq.data("textbox");
	      var opts = _4ac.options;
	      var tb = _4ac.textbox;
	      var _4ad = tb.find(".textbox-text");
	      var _4ae = tb.find(".textbox-addon")._outerWidth();
	      var _4af = tb.find(".textbox-button")._outerWidth();
	      if (opts.tipPosition == "right") {
	        return (opts.iconAlign == "right" ? _4ae : 0) + (opts.buttonAlign == "right" ? _4af : 0) + 1;
	      } else {
	        if (opts.tipPosition == "left") {
	          return (opts.iconAlign == "left" ? -_4ae : 0) + (opts.buttonAlign == "left" ? -_4af : 0) - 1;
	        } else {
	          return _4ae / 2 * (opts.iconAlign == "right" ? 1 : -1);
	        }
	      }
	    } };
	  $.fn.textbox.parseOptions = function (_4b0) {
	    var t = $(_4b0);
	    return $.extend({}, $.fn.validatebox.parseOptions(_4b0), $.parser.parseOptions(_4b0, ["prompt", "iconCls", "iconAlign", "buttonText", "buttonIcon", "buttonAlign", { multiline: "boolean", editable: "boolean", iconWidth: "number" }]), { value: t.val() || undefined, type: t.attr("type") ? t.attr("type") : undefined, disabled: t.attr("disabled") ? true : undefined, readonly: t.attr("readonly") ? true : undefined });
	  };
	  $.fn.textbox.defaults = $.extend({}, $.fn.validatebox.defaults, { width: "auto", height: 22, prompt: "", value: "", type: "text", multiline: false, editable: true, disabled: false, readonly: false, icons: [], iconCls: null, iconAlign: "right", iconWidth: 18, buttonText: "", buttonIcon: null, buttonAlign: "right", inputEvents: { blur: function blur(e) {
	        var t = $(e.data.target);
	        var opts = t.textbox("options");
	        t.textbox("setValue", opts.value);
	      }, keydown: function keydown(e) {
	        if (e.keyCode == 13) {
	          var t = $(e.data.target);
	          t.textbox("setValue", t.textbox("getText"));
	        }
	      } }, onChange: function onChange(_4b1, _4b2) {}, onResize: function onResize(_4b3, _4b4) {}, onClickButton: function onClickButton() {}, onClickIcon: function onClickIcon(_4b5) {} });
	})(jQuery);
	(function ($) {
	  var _4b6 = 0;
	  function _4b7(_4b8) {
	    var _4b9 = $.data(_4b8, "filebox");
	    var opts = _4b9.options;
	    var id = "filebox_file_id_" + ++_4b6;
	    $(_4b8).addClass("filebox-f").textbox(opts);
	    $(_4b8).textbox("textbox").attr("readonly", "readonly");
	    _4b9.filebox = $(_4b8).next().addClass("filebox");
	    _4b9.filebox.find(".textbox-value").remove();
	    opts.oldValue = "";
	    var file = $("<input type=\"file\" class=\"textbox-value\">").appendTo(_4b9.filebox);
	    file.attr("id", id).attr("name", $(_4b8).attr("textboxName") || "");
	    file.change(function () {
	      $(_4b8).filebox("setText", this.value);
	      opts.onChange.call(_4b8, this.value, opts.oldValue);
	      opts.oldValue = this.value;
	    });
	    var btn = $(_4b8).filebox("button");
	    if (btn.length) {
	      $("<label class=\"filebox-label\" for=\"" + id + "\"></label>").appendTo(btn);
	      if (btn.linkbutton("options").disabled) {
	        file.attr("disabled", "disabled");
	      } else {
	        file.removeAttr("disabled");
	      }
	    }
	  };
	  $.fn.filebox = function (_4ba, _4bb) {
	    if (typeof _4ba == "string") {
	      var _4bc = $.fn.filebox.methods[_4ba];
	      if (_4bc) {
	        return _4bc(this, _4bb);
	      } else {
	        return this.textbox(_4ba, _4bb);
	      }
	    }
	    _4ba = _4ba || {};
	    return this.each(function () {
	      var _4bd = $.data(this, "filebox");
	      if (_4bd) {
	        $.extend(_4bd.options, _4ba);
	      } else {
	        $.data(this, "filebox", { options: $.extend({}, $.fn.filebox.defaults, $.fn.filebox.parseOptions(this), _4ba) });
	      }
	      _4b7(this);
	    });
	  };
	  $.fn.filebox.methods = { options: function options(jq) {
	      var opts = jq.textbox("options");
	      return $.extend($.data(jq[0], "filebox").options, { width: opts.width, value: opts.value, originalValue: opts.originalValue, disabled: opts.disabled, readonly: opts.readonly });
	    } };
	  $.fn.filebox.parseOptions = function (_4be) {
	    return $.extend({}, $.fn.textbox.parseOptions(_4be), {});
	  };
	  $.fn.filebox.defaults = $.extend({}, $.fn.textbox.defaults, { buttonIcon: null, buttonText: "Choose File", buttonAlign: "right", inputEvents: {} });
	})(jQuery);
	(function ($) {
	  function _4bf(_4c0) {
	    var _4c1 = $.data(_4c0, "searchbox");
	    var opts = _4c1.options;
	    var _4c2 = $.extend(true, [], opts.icons);
	    _4c2.push({ iconCls: "searchbox-button", handler: function handler(e) {
	        var t = $(e.data.target);
	        var opts = t.searchbox("options");
	        opts.searcher.call(e.data.target, t.searchbox("getValue"), t.searchbox("getName"));
	      } });
	    _4c3();
	    var _4c4 = _4c5();
	    $(_4c0).addClass("searchbox-f").textbox($.extend({}, opts, { icons: _4c2, buttonText: _4c4 ? _4c4.text : "" }));
	    $(_4c0).attr("searchboxName", $(_4c0).attr("textboxName"));
	    _4c1.searchbox = $(_4c0).next();
	    _4c1.searchbox.addClass("searchbox");
	    _4c6(_4c4);
	    function _4c3() {
	      if (opts.menu) {
	        _4c1.menu = $(opts.menu).menu();
	        var _4c7 = _4c1.menu.menu("options");
	        var _4c8 = _4c7.onClick;
	        _4c7.onClick = function (item) {
	          _4c6(item);
	          _4c8.call(this, item);
	        };
	      } else {
	        if (_4c1.menu) {
	          _4c1.menu.menu("destroy");
	        }
	        _4c1.menu = null;
	      }
	    };
	    function _4c5() {
	      if (_4c1.menu) {
	        var item = _4c1.menu.children("div.menu-item:first");
	        _4c1.menu.children("div.menu-item").each(function () {
	          var _4c9 = $.extend({}, $.parser.parseOptions(this), { selected: $(this).attr("selected") ? true : undefined });
	          if (_4c9.selected) {
	            item = $(this);
	            return false;
	          }
	        });
	        return _4c1.menu.menu("getItem", item[0]);
	      } else {
	        return null;
	      }
	    };
	    function _4c6(item) {
	      if (!item) {
	        return;
	      }
	      $(_4c0).textbox("button").menubutton({ text: item.text, iconCls: item.iconCls || null, menu: _4c1.menu, menuAlign: opts.buttonAlign, plain: false });
	      _4c1.searchbox.find("input.textbox-value").attr("name", item.name || item.text);
	      $(_4c0).searchbox("resize");
	    };
	  };
	  $.fn.searchbox = function (_4ca, _4cb) {
	    if (typeof _4ca == "string") {
	      var _4cc = $.fn.searchbox.methods[_4ca];
	      if (_4cc) {
	        return _4cc(this, _4cb);
	      } else {
	        return this.textbox(_4ca, _4cb);
	      }
	    }
	    _4ca = _4ca || {};
	    return this.each(function () {
	      var _4cd = $.data(this, "searchbox");
	      if (_4cd) {
	        $.extend(_4cd.options, _4ca);
	      } else {
	        $.data(this, "searchbox", { options: $.extend({}, $.fn.searchbox.defaults, $.fn.searchbox.parseOptions(this), _4ca) });
	      }
	      _4bf(this);
	    });
	  };
	  $.fn.searchbox.methods = { options: function options(jq) {
	      var opts = jq.textbox("options");
	      return $.extend($.data(jq[0], "searchbox").options, { width: opts.width, value: opts.value, originalValue: opts.originalValue, disabled: opts.disabled, readonly: opts.readonly });
	    }, menu: function menu(jq) {
	      return $.data(jq[0], "searchbox").menu;
	    }, getName: function getName(jq) {
	      return $.data(jq[0], "searchbox").searchbox.find("input.textbox-value").attr("name");
	    }, selectName: function selectName(jq, name) {
	      return jq.each(function () {
	        var menu = $.data(this, "searchbox").menu;
	        if (menu) {
	          menu.children("div.menu-item").each(function () {
	            var item = menu.menu("getItem", this);
	            if (item.name == name) {
	              $(this).triggerHandler("click");
	              return false;
	            }
	          });
	        }
	      });
	    }, destroy: function destroy(jq) {
	      return jq.each(function () {
	        var menu = $(this).searchbox("menu");
	        if (menu) {
	          menu.menu("destroy");
	        }
	        $(this).textbox("destroy");
	      });
	    } };
	  $.fn.searchbox.parseOptions = function (_4ce) {
	    var t = $(_4ce);
	    return $.extend({}, $.fn.textbox.parseOptions(_4ce), $.parser.parseOptions(_4ce, ["menu"]), { searcher: t.attr("searcher") ? eval(t.attr("searcher")) : undefined });
	  };
	  $.fn.searchbox.defaults = $.extend({}, $.fn.textbox.defaults, { inputEvents: $.extend({}, $.fn.textbox.defaults.inputEvents, { keydown: function keydown(e) {
	        if (e.keyCode == 13) {
	          e.preventDefault();
	          var t = $(e.data.target);
	          var opts = t.searchbox("options");
	          t.searchbox("setValue", $(this).val());
	          opts.searcher.call(e.data.target, t.searchbox("getValue"), t.searchbox("getName"));
	          return false;
	        }
	      } }), buttonAlign: "left", menu: null, searcher: function searcher(_4cf, name) {} });
	})(jQuery);
	(function ($) {
	  function _4d0(_4d1, _4d2) {
	    var opts = $.data(_4d1, "form").options;
	    $.extend(opts, _4d2 || {});
	    var _4d3 = $.extend({}, opts.queryParams);
	    if (opts.onSubmit.call(_4d1, _4d3) == false) {
	      return;
	    }
	    $(_4d1).find(".textbox-text:focus").blur();
	    var _4d4 = "easyui_frame_" + new Date().getTime();
	    var _4d5 = $("<iframe id=" + _4d4 + " name=" + _4d4 + "></iframe>").appendTo("body");
	    _4d5.attr("src", window.ActiveXObject ? "javascript:false" : "about:blank");
	    _4d5.css({ position: "absolute", top: -1000, left: -1000 });
	    _4d5.bind("load", cb);
	    _4d6(_4d3);
	    function _4d6(_4d7) {
	      var form = $(_4d1);
	      if (opts.url) {
	        form.attr("action", opts.url);
	      }
	      var t = form.attr("target"),
	          a = form.attr("action");
	      form.attr("target", _4d4);
	      var _4d8 = $();
	      try {
	        for (var n in _4d7) {
	          var _4d9 = $("<input type=\"hidden\" name=\"" + n + "\">").val(_4d7[n]).appendTo(form);
	          _4d8 = _4d8.add(_4d9);
	        }
	        _4da();
	        form[0].submit();
	      } finally {
	        form.attr("action", a);
	        t ? form.attr("target", t) : form.removeAttr("target");
	        _4d8.remove();
	      }
	    };
	    function _4da() {
	      var f = $("#" + _4d4);
	      if (!f.length) {
	        return;
	      }
	      try {
	        var s = f.contents()[0].readyState;
	        if (s && s.toLowerCase() == "uninitialized") {
	          setTimeout(_4da, 100);
	        }
	      } catch (e) {
	        cb();
	      }
	    };
	    var _4db = 10;
	    function cb() {
	      var f = $("#" + _4d4);
	      if (!f.length) {
	        return;
	      }
	      f.unbind();
	      var data = "";
	      try {
	        var body = f.contents().find("body");
	        data = body.html();
	        if (data == "") {
	          if (--_4db) {
	            setTimeout(cb, 100);
	            return;
	          }
	        }
	        var ta = body.find(">textarea");
	        if (ta.length) {
	          data = ta.val();
	        } else {
	          var pre = body.find(">pre");
	          if (pre.length) {
	            data = pre.html();
	          }
	        }
	      } catch (e) {}
	      opts.success(data);
	      setTimeout(function () {
	        f.unbind();
	        f.remove();
	      }, 100);
	    };
	  };
	  function _load(_4dc, data) {
	    var opts = $.data(_4dc, "form").options;
	    if (typeof data == "string") {
	      var _4dd = {};
	      if (opts.onBeforeLoad.call(_4dc, _4dd) == false) {
	        return;
	      }
	      $.ajax({ url: data, data: _4dd, dataType: "json", success: function success(data) {
	          _4de(data);
	        }, error: function error() {
	          opts.onLoadError.apply(_4dc, arguments);
	        } });
	    } else {
	      _4de(data);
	    }
	    function _4de(data) {
	      var form = $(_4dc);
	      for (var name in data) {
	        var val = data[name];
	        if (!_4df(name, val)) {
	          if (!_4e0(name, val)) {
	            form.find("input[name=\"" + name + "\"]").val(val);
	            form.find("textarea[name=\"" + name + "\"]").val(val);
	            form.find("select[name=\"" + name + "\"]").val(val);
	          }
	        }
	      }
	      opts.onLoadSuccess.call(_4dc, data);
	      form.form("validate");
	    };
	    function _4df(name, val) {
	      var cc = $(_4dc).find("input[name=\"" + name + "\"][type=radio], input[name=\"" + name + "\"][type=checkbox]");
	      if (cc.length) {
	        cc._propAttr("checked", false);
	        cc.each(function () {
	          var f = $(this);
	          if (f.val() == String(val) || $.inArray(f.val(), $.isArray(val) ? val : [val]) >= 0) {
	            f._propAttr("checked", true);
	          }
	        });
	        return true;
	      }
	      return false;
	    };
	    function _4e0(name, val) {
	      var _4e1 = $(_4dc).find("[textboxName=\"" + name + "\"],[sliderName=\"" + name + "\"]");
	      if (_4e1.length) {
	        for (var i = 0; i < opts.fieldTypes.length; i++) {
	          var type = opts.fieldTypes[i];
	          var _4e2 = _4e1.data(type);
	          if (_4e2) {
	            if (_4e2.options.multiple || _4e2.options.range) {
	              _4e1[type]("setValues", val);
	            } else {
	              _4e1[type]("setValue", val);
	            }
	            return true;
	          }
	        }
	      }
	      return false;
	    };
	  };
	  function _4e3(_4e4) {
	    $("input,select,textarea", _4e4).each(function () {
	      var t = this.type,
	          tag = this.tagName.toLowerCase();
	      if (t == "text" || t == "hidden" || t == "password" || tag == "textarea") {
	        this.value = "";
	      } else {
	        if (t == "file") {
	          var file = $(this);
	          if (!file.hasClass("textbox-value")) {
	            var _4e5 = file.clone().val("");
	            _4e5.insertAfter(file);
	            if (file.data("validatebox")) {
	              file.validatebox("destroy");
	              _4e5.validatebox();
	            } else {
	              file.remove();
	            }
	          }
	        } else {
	          if (t == "checkbox" || t == "radio") {
	            this.checked = false;
	          } else {
	            if (tag == "select") {
	              this.selectedIndex = -1;
	            }
	          }
	        }
	      }
	    });
	    var form = $(_4e4);
	    var opts = $.data(_4e4, "form").options;
	    for (var i = opts.fieldTypes.length - 1; i >= 0; i--) {
	      var type = opts.fieldTypes[i];
	      var _4e6 = form.find("." + type + "-f");
	      if (_4e6.length && _4e6[type]) {
	        _4e6[type]("clear");
	      }
	    }
	    form.form("validate");
	  };
	  function _4e7(_4e8) {
	    _4e8.reset();
	    var form = $(_4e8);
	    var opts = $.data(_4e8, "form").options;
	    for (var i = opts.fieldTypes.length - 1; i >= 0; i--) {
	      var type = opts.fieldTypes[i];
	      var _4e9 = form.find("." + type + "-f");
	      if (_4e9.length && _4e9[type]) {
	        _4e9[type]("reset");
	      }
	    }
	    form.form("validate");
	  };
	  function _4ea(_4eb) {
	    var _4ec = $.data(_4eb, "form").options;
	    $(_4eb).unbind(".form");
	    if (_4ec.ajax) {
	      $(_4eb).bind("submit.form", function () {
	        setTimeout(function () {
	          _4d0(_4eb, _4ec);
	        }, 0);
	        return false;
	      });
	    }
	    $(_4eb).bind("_change.form", function (e, t) {
	      _4ec.onChange.call(this, t);
	    }).bind("change.form", function (e) {
	      var t = e.target;
	      if (!$(t).hasClass("textbox-text")) {
	        _4ec.onChange.call(this, t);
	      }
	    });
	    _4ed(_4eb, _4ec.novalidate);
	  };
	  function _4ee(_4ef, _4f0) {
	    _4f0 = _4f0 || {};
	    var _4f1 = $.data(_4ef, "form");
	    if (_4f1) {
	      $.extend(_4f1.options, _4f0);
	    } else {
	      $.data(_4ef, "form", { options: $.extend({}, $.fn.form.defaults, $.fn.form.parseOptions(_4ef), _4f0) });
	    }
	  };
	  function _4f2(_4f3) {
	    if ($.fn.validatebox) {
	      var t = $(_4f3);
	      t.find(".validatebox-text:not(:disabled)").validatebox("validate");
	      var _4f4 = t.find(".validatebox-invalid");
	      _4f4.filter(":not(:disabled):first").focus();
	      return _4f4.length == 0;
	    }
	    return true;
	  };
	  function _4ed(_4f5, _4f6) {
	    var opts = $.data(_4f5, "form").options;
	    opts.novalidate = _4f6;
	    $(_4f5).find(".validatebox-text:not(:disabled)").validatebox(_4f6 ? "disableValidation" : "enableValidation");
	  };
	  $.fn.form = function (_4f7, _4f8) {
	    if (typeof _4f7 == "string") {
	      this.each(function () {
	        _4ee(this);
	      });
	      return $.fn.form.methods[_4f7](this, _4f8);
	    }
	    return this.each(function () {
	      _4ee(this, _4f7);
	      _4ea(this);
	    });
	  };
	  $.fn.form.methods = { options: function options(jq) {
	      return $.data(jq[0], "form").options;
	    }, submit: function submit(jq, _4f9) {
	      return jq.each(function () {
	        _4d0(this, _4f9);
	      });
	    }, load: function load(jq, data) {
	      return jq.each(function () {
	        _load(this, data);
	      });
	    }, clear: function clear(jq) {
	      return jq.each(function () {
	        _4e3(this);
	      });
	    }, reset: function reset(jq) {
	      return jq.each(function () {
	        _4e7(this);
	      });
	    }, validate: function validate(jq) {
	      return _4f2(jq[0]);
	    }, disableValidation: function disableValidation(jq) {
	      return jq.each(function () {
	        _4ed(this, true);
	      });
	    }, enableValidation: function enableValidation(jq) {
	      return jq.each(function () {
	        _4ed(this, false);
	      });
	    } };
	  $.fn.form.parseOptions = function (_4fa) {
	    var t = $(_4fa);
	    return $.extend({}, $.parser.parseOptions(_4fa, [{ ajax: "boolean" }]), { url: t.attr("action") ? t.attr("action") : undefined });
	  };
	  $.fn.form.defaults = { fieldTypes: ["combobox", "combotree", "combogrid", "datetimebox", "datebox", "combo", "datetimespinner", "timespinner", "numberspinner", "spinner", "slider", "searchbox", "numberbox", "textbox"], novalidate: false, ajax: true, url: null, queryParams: {}, onSubmit: function onSubmit(_4fb) {
	      return $(this).form("validate");
	    }, success: function success(data) {}, onBeforeLoad: function onBeforeLoad(_4fc) {}, onLoadSuccess: function onLoadSuccess(data) {}, onLoadError: function onLoadError() {}, onChange: function onChange(_4fd) {} };
	})(jQuery);
	(function ($) {
	  function _4fe(_4ff) {
	    var _500 = $.data(_4ff, "numberbox");
	    var opts = _500.options;
	    $(_4ff).addClass("numberbox-f").textbox(opts);
	    $(_4ff).textbox("textbox").css({ imeMode: "disabled" });
	    $(_4ff).attr("numberboxName", $(_4ff).attr("textboxName"));
	    _500.numberbox = $(_4ff).next();
	    _500.numberbox.addClass("numberbox");
	    var _501 = opts.parser.call(_4ff, opts.value);
	    var _502 = opts.formatter.call(_4ff, _501);
	    $(_4ff).numberbox("initValue", _501).numberbox("setText", _502);
	  };
	  function _503(_504, _505) {
	    var _506 = $.data(_504, "numberbox");
	    var opts = _506.options;
	    var _505 = opts.parser.call(_504, _505);
	    var text = opts.formatter.call(_504, _505);
	    opts.value = _505;
	    $(_504).textbox("setText", text).textbox("setValue", _505);
	    text = opts.formatter.call(_504, $(_504).textbox("getValue"));
	    $(_504).textbox("setText", text);
	  };
	  $.fn.numberbox = function (_507, _508) {
	    if (typeof _507 == "string") {
	      var _509 = $.fn.numberbox.methods[_507];
	      if (_509) {
	        return _509(this, _508);
	      } else {
	        return this.textbox(_507, _508);
	      }
	    }
	    _507 = _507 || {};
	    return this.each(function () {
	      var _50a = $.data(this, "numberbox");
	      if (_50a) {
	        $.extend(_50a.options, _507);
	      } else {
	        _50a = $.data(this, "numberbox", { options: $.extend({}, $.fn.numberbox.defaults, $.fn.numberbox.parseOptions(this), _507) });
	      }
	      _4fe(this);
	    });
	  };
	  $.fn.numberbox.methods = { options: function options(jq) {
	      var opts = jq.data("textbox") ? jq.textbox("options") : {};
	      return $.extend($.data(jq[0], "numberbox").options, { width: opts.width, originalValue: opts.originalValue, disabled: opts.disabled, readonly: opts.readonly });
	    }, fix: function fix(jq) {
	      return jq.each(function () {
	        $(this).numberbox("setValue", $(this).numberbox("getText"));
	      });
	    }, setValue: function setValue(jq, _50b) {
	      return jq.each(function () {
	        _503(this, _50b);
	      });
	    }, clear: function clear(jq) {
	      return jq.each(function () {
	        $(this).textbox("clear");
	        $(this).numberbox("options").value = "";
	      });
	    }, reset: function reset(jq) {
	      return jq.each(function () {
	        $(this).textbox("reset");
	        $(this).numberbox("setValue", $(this).numberbox("getValue"));
	      });
	    } };
	  $.fn.numberbox.parseOptions = function (_50c) {
	    var t = $(_50c);
	    return $.extend({}, $.fn.textbox.parseOptions(_50c), $.parser.parseOptions(_50c, ["decimalSeparator", "groupSeparator", "suffix", { min: "number", max: "number", precision: "number" }]), { prefix: t.attr("prefix") ? t.attr("prefix") : undefined });
	  };
	  $.fn.numberbox.defaults = $.extend({}, $.fn.textbox.defaults, { inputEvents: { keypress: function keypress(e) {
	        var _50d = e.data.target;
	        var opts = $(_50d).numberbox("options");
	        return opts.filter.call(_50d, e);
	      }, blur: function blur(e) {
	        var _50e = e.data.target;
	        $(_50e).numberbox("setValue", $(_50e).numberbox("getText"));
	      }, keydown: function keydown(e) {
	        if (e.keyCode == 13) {
	          var _50f = e.data.target;
	          $(_50f).numberbox("setValue", $(_50f).numberbox("getText"));
	        }
	      } }, min: null, max: null, precision: 0, decimalSeparator: ".", groupSeparator: "", prefix: "", suffix: "", filter: function filter(e) {
	      var opts = $(this).numberbox("options");
	      var s = $(this).numberbox("getText");
	      if (e.which == 13) {
	        return true;
	      }
	      if (e.which == 45) {
	        return s.indexOf("-") == -1 ? true : false;
	      }
	      var c = String.fromCharCode(e.which);
	      if (c == opts.decimalSeparator) {
	        return s.indexOf(c) == -1 ? true : false;
	      } else {
	        if (c == opts.groupSeparator) {
	          return true;
	        } else {
	          if (e.which >= 48 && e.which <= 57 && e.ctrlKey == false && e.shiftKey == false || e.which == 0 || e.which == 8) {
	            return true;
	          } else {
	            if (e.ctrlKey == true && (e.which == 99 || e.which == 118)) {
	              return true;
	            } else {
	              return false;
	            }
	          }
	        }
	      }
	    }, formatter: function formatter(_510) {
	      if (!_510) {
	        return _510;
	      }
	      _510 = _510 + "";
	      var opts = $(this).numberbox("options");
	      var s1 = _510,
	          s2 = "";
	      var dpos = _510.indexOf(".");
	      if (dpos >= 0) {
	        s1 = _510.substring(0, dpos);
	        s2 = _510.substring(dpos + 1, _510.length);
	      }
	      if (opts.groupSeparator) {
	        var p = /(\d+)(\d{3})/;
	        while (p.test(s1)) {
	          s1 = s1.replace(p, "$1" + opts.groupSeparator + "$2");
	        }
	      }
	      if (s2) {
	        return opts.prefix + s1 + opts.decimalSeparator + s2 + opts.suffix;
	      } else {
	        return opts.prefix + s1 + opts.suffix;
	      }
	    }, parser: function parser(s) {
	      s = s + "";
	      var opts = $(this).numberbox("options");
	      if (parseFloat(s) != s) {
	        if (opts.prefix) {
	          s = $.trim(s.replace(new RegExp("\\" + $.trim(opts.prefix), "g"), ""));
	        }
	        if (opts.suffix) {
	          s = $.trim(s.replace(new RegExp("\\" + $.trim(opts.suffix), "g"), ""));
	        }
	        if (opts.groupSeparator) {
	          s = $.trim(s.replace(new RegExp("\\" + opts.groupSeparator, "g"), ""));
	        }
	        if (opts.decimalSeparator) {
	          s = $.trim(s.replace(new RegExp("\\" + opts.decimalSeparator, "g"), "."));
	        }
	        s = s.replace(/\s/g, "");
	      }
	      var val = parseFloat(s).toFixed(opts.precision);
	      if (isNaN(val)) {
	        val = "";
	      } else {
	        if (typeof opts.min == "number" && val < opts.min) {
	          val = opts.min.toFixed(opts.precision);
	        } else {
	          if (typeof opts.max == "number" && val > opts.max) {
	            val = opts.max.toFixed(opts.precision);
	          }
	        }
	      }
	      return val;
	    } });
	})(jQuery);
	(function ($) {
	  function _511(_512, _513) {
	    var opts = $.data(_512, "calendar").options;
	    var t = $(_512);
	    if (_513) {
	      $.extend(opts, { width: _513.width, height: _513.height });
	    }
	    t._size(opts, t.parent());
	    t.find(".calendar-body")._outerHeight(t.height() - t.find(".calendar-header")._outerHeight());
	    if (t.find(".calendar-menu").is(":visible")) {
	      _514(_512);
	    }
	  };
	  function init(_515) {
	    $(_515).addClass("calendar").html("<div class=\"calendar-header\">" + "<div class=\"calendar-nav calendar-prevmonth\"></div>" + "<div class=\"calendar-nav calendar-nextmonth\"></div>" + "<div class=\"calendar-nav calendar-prevyear\"></div>" + "<div class=\"calendar-nav calendar-nextyear\"></div>" + "<div class=\"calendar-title\">" + "<span class=\"calendar-text\"></span>" + "</div>" + "</div>" + "<div class=\"calendar-body\">" + "<div class=\"calendar-menu\">" + "<div class=\"calendar-menu-year-inner\">" + "<span class=\"calendar-nav calendar-menu-prev\"></span>" + "<span><input class=\"calendar-menu-year\" type=\"text\"></input></span>" + "<span class=\"calendar-nav calendar-menu-next\"></span>" + "</div>" + "<div class=\"calendar-menu-month-inner\">" + "</div>" + "</div>" + "</div>");
	    $(_515).bind("_resize", function (e, _516) {
	      if ($(this).hasClass("easyui-fluid") || _516) {
	        _511(_515);
	      }
	      return false;
	    });
	  };
	  function _517(_518) {
	    var opts = $.data(_518, "calendar").options;
	    var menu = $(_518).find(".calendar-menu");
	    menu.find(".calendar-menu-year").unbind(".calendar").bind("keypress.calendar", function (e) {
	      if (e.keyCode == 13) {
	        _519(true);
	      }
	    });
	    $(_518).unbind(".calendar").bind("mouseover.calendar", function (e) {
	      var t = _51a(e.target);
	      if (t.hasClass("calendar-nav") || t.hasClass("calendar-text") || t.hasClass("calendar-day") && !t.hasClass("calendar-disabled")) {
	        t.addClass("calendar-nav-hover");
	      }
	    }).bind("mouseout.calendar", function (e) {
	      var t = _51a(e.target);
	      if (t.hasClass("calendar-nav") || t.hasClass("calendar-text") || t.hasClass("calendar-day") && !t.hasClass("calendar-disabled")) {
	        t.removeClass("calendar-nav-hover");
	      }
	    }).bind("click.calendar", function (e) {
	      var t = _51a(e.target);
	      if (t.hasClass("calendar-menu-next") || t.hasClass("calendar-nextyear")) {
	        _51b(1);
	      } else {
	        if (t.hasClass("calendar-menu-prev") || t.hasClass("calendar-prevyear")) {
	          _51b(-1);
	        } else {
	          if (t.hasClass("calendar-menu-month")) {
	            menu.find(".calendar-selected").removeClass("calendar-selected");
	            t.addClass("calendar-selected");
	            _519(true);
	          } else {
	            if (t.hasClass("calendar-prevmonth")) {
	              _51c(-1);
	            } else {
	              if (t.hasClass("calendar-nextmonth")) {
	                _51c(1);
	              } else {
	                if (t.hasClass("calendar-text")) {
	                  if (menu.is(":visible")) {
	                    menu.hide();
	                  } else {
	                    _514(_518);
	                  }
	                } else {
	                  if (t.hasClass("calendar-day")) {
	                    if (t.hasClass("calendar-disabled")) {
	                      return;
	                    }
	                    var _51d = opts.current;
	                    t.closest("div.calendar-body").find(".calendar-selected").removeClass("calendar-selected");
	                    t.addClass("calendar-selected");
	                    var _51e = t.attr("abbr").split(",");
	                    var y = parseInt(_51e[0]);
	                    var m = parseInt(_51e[1]);
	                    var d = parseInt(_51e[2]);
	                    opts.current = new Date(y, m - 1, d);
	                    opts.onSelect.call(_518, opts.current);
	                    if (!_51d || _51d.getTime() != opts.current.getTime()) {
	                      opts.onChange.call(_518, opts.current, _51d);
	                    }
	                    if (opts.year != y || opts.month != m) {
	                      opts.year = y;
	                      opts.month = m;
	                      show(_518);
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    });
	    function _51a(t) {
	      var day = $(t).closest(".calendar-day");
	      if (day.length) {
	        return day;
	      } else {
	        return $(t);
	      }
	    };
	    function _519(_51f) {
	      var menu = $(_518).find(".calendar-menu");
	      var year = menu.find(".calendar-menu-year").val();
	      var _520 = menu.find(".calendar-selected").attr("abbr");
	      if (!isNaN(year)) {
	        opts.year = parseInt(year);
	        opts.month = parseInt(_520);
	        show(_518);
	      }
	      if (_51f) {
	        menu.hide();
	      }
	    };
	    function _51b(_521) {
	      opts.year += _521;
	      show(_518);
	      menu.find(".calendar-menu-year").val(opts.year);
	    };
	    function _51c(_522) {
	      opts.month += _522;
	      if (opts.month > 12) {
	        opts.year++;
	        opts.month = 1;
	      } else {
	        if (opts.month < 1) {
	          opts.year--;
	          opts.month = 12;
	        }
	      }
	      show(_518);
	      menu.find("td.calendar-selected").removeClass("calendar-selected");
	      menu.find("td:eq(" + (opts.month - 1) + ")").addClass("calendar-selected");
	    };
	  };
	  function _514(_523) {
	    var opts = $.data(_523, "calendar").options;
	    $(_523).find(".calendar-menu").show();
	    if ($(_523).find(".calendar-menu-month-inner").is(":empty")) {
	      $(_523).find(".calendar-menu-month-inner").empty();
	      var t = $("<table class=\"calendar-mtable\"></table>").appendTo($(_523).find(".calendar-menu-month-inner"));
	      var idx = 0;
	      for (var i = 0; i < 3; i++) {
	        var tr = $("<tr></tr>").appendTo(t);
	        for (var j = 0; j < 4; j++) {
	          $("<td class=\"calendar-nav calendar-menu-month\"></td>").html(opts.months[idx++]).attr("abbr", idx).appendTo(tr);
	        }
	      }
	    }
	    var body = $(_523).find(".calendar-body");
	    var sele = $(_523).find(".calendar-menu");
	    var _524 = sele.find(".calendar-menu-year-inner");
	    var _525 = sele.find(".calendar-menu-month-inner");
	    _524.find("input").val(opts.year).focus();
	    _525.find("td.calendar-selected").removeClass("calendar-selected");
	    _525.find("td:eq(" + (opts.month - 1) + ")").addClass("calendar-selected");
	    sele._outerWidth(body._outerWidth());
	    sele._outerHeight(body._outerHeight());
	    _525._outerHeight(sele.height() - _524._outerHeight());
	  };
	  function _526(_527, year, _528) {
	    var opts = $.data(_527, "calendar").options;
	    var _529 = [];
	    var _52a = new Date(year, _528, 0).getDate();
	    for (var i = 1; i <= _52a; i++) {
	      _529.push([year, _528, i]);
	    }
	    var _52b = [],
	        week = [];
	    var _52c = -1;
	    while (_529.length > 0) {
	      var date = _529.shift();
	      week.push(date);
	      var day = new Date(date[0], date[1] - 1, date[2]).getDay();
	      if (_52c == day) {
	        day = 0;
	      } else {
	        if (day == (opts.firstDay == 0 ? 7 : opts.firstDay) - 1) {
	          _52b.push(week);
	          week = [];
	        }
	      }
	      _52c = day;
	    }
	    if (week.length) {
	      _52b.push(week);
	    }
	    var _52d = _52b[0];
	    if (_52d.length < 7) {
	      while (_52d.length < 7) {
	        var _52e = _52d[0];
	        var date = new Date(_52e[0], _52e[1] - 1, _52e[2] - 1);
	        _52d.unshift([date.getFullYear(), date.getMonth() + 1, date.getDate()]);
	      }
	    } else {
	      var _52e = _52d[0];
	      var week = [];
	      for (var i = 1; i <= 7; i++) {
	        var date = new Date(_52e[0], _52e[1] - 1, _52e[2] - i);
	        week.unshift([date.getFullYear(), date.getMonth() + 1, date.getDate()]);
	      }
	      _52b.unshift(week);
	    }
	    var _52f = _52b[_52b.length - 1];
	    while (_52f.length < 7) {
	      var _530 = _52f[_52f.length - 1];
	      var date = new Date(_530[0], _530[1] - 1, _530[2] + 1);
	      _52f.push([date.getFullYear(), date.getMonth() + 1, date.getDate()]);
	    }
	    if (_52b.length < 6) {
	      var _530 = _52f[_52f.length - 1];
	      var week = [];
	      for (var i = 1; i <= 7; i++) {
	        var date = new Date(_530[0], _530[1] - 1, _530[2] + i);
	        week.push([date.getFullYear(), date.getMonth() + 1, date.getDate()]);
	      }
	      _52b.push(week);
	    }
	    return _52b;
	  };
	  function show(_531) {
	    var opts = $.data(_531, "calendar").options;
	    if (opts.current && !opts.validator.call(_531, opts.current)) {
	      opts.current = null;
	    }
	    var now = new Date();
	    var _532 = now.getFullYear() + "," + (now.getMonth() + 1) + "," + now.getDate();
	    var _533 = opts.current ? opts.current.getFullYear() + "," + (opts.current.getMonth() + 1) + "," + opts.current.getDate() : "";
	    var _534 = 6 - opts.firstDay;
	    var _535 = _534 + 1;
	    if (_534 >= 7) {
	      _534 -= 7;
	    }
	    if (_535 >= 7) {
	      _535 -= 7;
	    }
	    $(_531).find(".calendar-title span").html(opts.months[opts.month - 1] + " " + opts.year);
	    var body = $(_531).find("div.calendar-body");
	    body.children("table").remove();
	    var data = ["<table class=\"calendar-dtable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">"];
	    data.push("<thead><tr>");
	    for (var i = opts.firstDay; i < opts.weeks.length; i++) {
	      data.push("<th>" + opts.weeks[i] + "</th>");
	    }
	    for (var i = 0; i < opts.firstDay; i++) {
	      data.push("<th>" + opts.weeks[i] + "</th>");
	    }
	    data.push("</tr></thead>");
	    data.push("<tbody>");
	    var _536 = _526(_531, opts.year, opts.month);
	    for (var i = 0; i < _536.length; i++) {
	      var week = _536[i];
	      var cls = "";
	      if (i == 0) {
	        cls = "calendar-first";
	      } else {
	        if (i == _536.length - 1) {
	          cls = "calendar-last";
	        }
	      }
	      data.push("<tr class=\"" + cls + "\">");
	      for (var j = 0; j < week.length; j++) {
	        var day = week[j];
	        var s = day[0] + "," + day[1] + "," + day[2];
	        var _537 = new Date(day[0], parseInt(day[1]) - 1, day[2]);
	        var d = opts.formatter.call(_531, _537);
	        var css = opts.styler.call(_531, _537);
	        var _538 = "";
	        var _539 = "";
	        if (typeof css == "string") {
	          _539 = css;
	        } else {
	          if (css) {
	            _538 = css["class"] || "";
	            _539 = css["style"] || "";
	          }
	        }
	        var cls = "calendar-day";
	        if (!(opts.year == day[0] && opts.month == day[1])) {
	          cls += " calendar-other-month";
	        }
	        if (s == _532) {
	          cls += " calendar-today";
	        }
	        if (s == _533) {
	          cls += " calendar-selected";
	        }
	        if (j == _534) {
	          cls += " calendar-saturday";
	        } else {
	          if (j == _535) {
	            cls += " calendar-sunday";
	          }
	        }
	        if (j == 0) {
	          cls += " calendar-first";
	        } else {
	          if (j == week.length - 1) {
	            cls += " calendar-last";
	          }
	        }
	        cls += " " + _538;
	        if (!opts.validator.call(_531, _537)) {
	          cls += " calendar-disabled";
	        }
	        data.push("<td class=\"" + cls + "\" abbr=\"" + s + "\" style=\"" + _539 + "\">" + d + "</td>");
	      }
	      data.push("</tr>");
	    }
	    data.push("</tbody>");
	    data.push("</table>");
	    body.append(data.join(""));
	    body.children("table.calendar-dtable").prependTo(body);
	    opts.onNavigate.call(_531, opts.year, opts.month);
	  };
	  $.fn.calendar = function (_53a, _53b) {
	    if (typeof _53a == "string") {
	      return $.fn.calendar.methods[_53a](this, _53b);
	    }
	    _53a = _53a || {};
	    return this.each(function () {
	      var _53c = $.data(this, "calendar");
	      if (_53c) {
	        $.extend(_53c.options, _53a);
	      } else {
	        _53c = $.data(this, "calendar", { options: $.extend({}, $.fn.calendar.defaults, $.fn.calendar.parseOptions(this), _53a) });
	        init(this);
	      }
	      if (_53c.options.border == false) {
	        $(this).addClass("calendar-noborder");
	      }
	      _511(this);
	      _517(this);
	      show(this);
	      $(this).find("div.calendar-menu").hide();
	    });
	  };
	  $.fn.calendar.methods = { options: function options(jq) {
	      return $.data(jq[0], "calendar").options;
	    }, resize: function resize(jq, _53d) {
	      return jq.each(function () {
	        _511(this, _53d);
	      });
	    }, moveTo: function moveTo(jq, date) {
	      return jq.each(function () {
	        if (!date) {
	          var now = new Date();
	          $(this).calendar({ year: now.getFullYear(), month: now.getMonth() + 1, current: date });
	          return;
	        }
	        var opts = $(this).calendar("options");
	        if (opts.validator.call(this, date)) {
	          var _53e = opts.current;
	          $(this).calendar({ year: date.getFullYear(), month: date.getMonth() + 1, current: date });
	          if (!_53e || _53e.getTime() != date.getTime()) {
	            opts.onChange.call(this, opts.current, _53e);
	          }
	        }
	      });
	    } };
	  $.fn.calendar.parseOptions = function (_53f) {
	    var t = $(_53f);
	    return $.extend({}, $.parser.parseOptions(_53f, [{ firstDay: "number", fit: "boolean", border: "boolean" }]));
	  };
	  $.fn.calendar.defaults = { width: 180, height: 180, fit: false, border: true, firstDay: 0, weeks: ["日", "一", "二", "三", "四", "五", "六"], months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], year: new Date().getFullYear(), month: new Date().getMonth() + 1, current: function () {
	      var d = new Date();
	      return new Date(d.getFullYear(), d.getMonth(), d.getDate());
	    }(), formatter: function formatter(date) {
	      return date.getDate();
	    }, styler: function styler(date) {
	      return "";
	    }, validator: function validator(date) {
	      return true;
	    }, onSelect: function onSelect(date) {}, onChange: function onChange(_540, _541) {}, onNavigate: function onNavigate(year, _542) {} };
	})(jQuery);
	(function ($) {
	  function _543(_544) {
	    var _545 = $.data(_544, "spinner");
	    var opts = _545.options;
	    var _546 = $.extend(true, [], opts.icons);
	    _546.push({ iconCls: "spinner-arrow", handler: function handler(e) {
	        _547(e);
	      } });
	    $(_544).addClass("spinner-f").textbox($.extend({}, opts, { icons: _546 }));
	    var _548 = $(_544).textbox("getIcon", _546.length - 1);
	    _548.append("<a href=\"javascript:void(0)\" class=\"spinner-arrow-up\" tabindex=\"-1\"></a>");
	    _548.append("<a href=\"javascript:void(0)\" class=\"spinner-arrow-down\" tabindex=\"-1\"></a>");
	    $(_544).attr("spinnerName", $(_544).attr("textboxName"));
	    _545.spinner = $(_544).next();
	    _545.spinner.addClass("spinner");
	  };
	  function _547(e) {
	    var _549 = e.data.target;
	    var opts = $(_549).spinner("options");
	    var up = $(e.target).closest("a.spinner-arrow-up");
	    if (up.length) {
	      opts.spin.call(_549, false);
	      opts.onSpinUp.call(_549);
	      $(_549).spinner("validate");
	    }
	    var down = $(e.target).closest("a.spinner-arrow-down");
	    if (down.length) {
	      opts.spin.call(_549, true);
	      opts.onSpinDown.call(_549);
	      $(_549).spinner("validate");
	    }
	  };
	  $.fn.spinner = function (_54a, _54b) {
	    if (typeof _54a == "string") {
	      var _54c = $.fn.spinner.methods[_54a];
	      if (_54c) {
	        return _54c(this, _54b);
	      } else {
	        return this.textbox(_54a, _54b);
	      }
	    }
	    _54a = _54a || {};
	    return this.each(function () {
	      var _54d = $.data(this, "spinner");
	      if (_54d) {
	        $.extend(_54d.options, _54a);
	      } else {
	        _54d = $.data(this, "spinner", { options: $.extend({}, $.fn.spinner.defaults, $.fn.spinner.parseOptions(this), _54a) });
	      }
	      _543(this);
	    });
	  };
	  $.fn.spinner.methods = { options: function options(jq) {
	      var opts = jq.textbox("options");
	      return $.extend($.data(jq[0], "spinner").options, { width: opts.width, value: opts.value, originalValue: opts.originalValue, disabled: opts.disabled, readonly: opts.readonly });
	    } };
	  $.fn.spinner.parseOptions = function (_54e) {
	    return $.extend({}, $.fn.textbox.parseOptions(_54e), $.parser.parseOptions(_54e, ["min", "max", { increment: "number" }]));
	  };
	  $.fn.spinner.defaults = $.extend({}, $.fn.textbox.defaults, { min: null, max: null, increment: 1, spin: function spin(down) {}, onSpinUp: function onSpinUp() {}, onSpinDown: function onSpinDown() {} });
	})(jQuery);
	(function ($) {
	  function _54f(_550) {
	    $(_550).addClass("numberspinner-f");
	    var opts = $.data(_550, "numberspinner").options;
	    $(_550).numberbox(opts).spinner(opts);
	    $(_550).numberbox("setValue", opts.value);
	  };
	  function _551(_552, down) {
	    var opts = $.data(_552, "numberspinner").options;
	    var v = parseFloat($(_552).numberbox("getValue") || opts.value) || 0;
	    if (down) {
	      v -= opts.increment;
	    } else {
	      v += opts.increment;
	    }
	    $(_552).numberbox("setValue", v);
	  };
	  $.fn.numberspinner = function (_553, _554) {
	    if (typeof _553 == "string") {
	      var _555 = $.fn.numberspinner.methods[_553];
	      if (_555) {
	        return _555(this, _554);
	      } else {
	        return this.numberbox(_553, _554);
	      }
	    }
	    _553 = _553 || {};
	    return this.each(function () {
	      var _556 = $.data(this, "numberspinner");
	      if (_556) {
	        $.extend(_556.options, _553);
	      } else {
	        $.data(this, "numberspinner", { options: $.extend({}, $.fn.numberspinner.defaults, $.fn.numberspinner.parseOptions(this), _553) });
	      }
	      _54f(this);
	    });
	  };
	  $.fn.numberspinner.methods = { options: function options(jq) {
	      var opts = jq.numberbox("options");
	      return $.extend($.data(jq[0], "numberspinner").options, { width: opts.width, value: opts.value, originalValue: opts.originalValue, disabled: opts.disabled, readonly: opts.readonly });
	    } };
	  $.fn.numberspinner.parseOptions = function (_557) {
	    return $.extend({}, $.fn.spinner.parseOptions(_557), $.fn.numberbox.parseOptions(_557), {});
	  };
	  $.fn.numberspinner.defaults = $.extend({}, $.fn.spinner.defaults, $.fn.numberbox.defaults, { spin: function spin(down) {
	      _551(this, down);
	    } });
	})(jQuery);
	(function ($) {
	  function _558(_559) {
	    var _55a = 0;
	    if (_559.selectionStart) {
	      _55a = _559.selectionStart;
	    } else {
	      if (_559.createTextRange) {
	        var _55b = _559.createTextRange();
	        var s = document.selection.createRange();
	        s.setEndPoint("StartToStart", _55b);
	        _55a = s.text.length;
	      }
	    }
	    return _55a;
	  };
	  function _55c(_55d, _55e, end) {
	    if (_55d.selectionStart) {
	      _55d.setSelectionRange(_55e, end);
	    } else {
	      if (_55d.createTextRange) {
	        var _55f = _55d.createTextRange();
	        _55f.collapse();
	        _55f.moveEnd("character", end);
	        _55f.moveStart("character", _55e);
	        _55f.select();
	      }
	    }
	  };
	  function _560(_561) {
	    var opts = $.data(_561, "timespinner").options;
	    $(_561).addClass("timespinner-f").spinner(opts);
	    var _562 = opts.formatter.call(_561, opts.parser.call(_561, opts.value));
	    $(_561).timespinner("initValue", _562);
	  };
	  function _563(e) {
	    var _564 = e.data.target;
	    var opts = $.data(_564, "timespinner").options;
	    var _565 = _558(this);
	    for (var i = 0; i < opts.selections.length; i++) {
	      var _566 = opts.selections[i];
	      if (_565 >= _566[0] && _565 <= _566[1]) {
	        _567(_564, i);
	        return;
	      }
	    }
	  };
	  function _567(_568, _569) {
	    var opts = $.data(_568, "timespinner").options;
	    if (_569 != undefined) {
	      opts.highlight = _569;
	    }
	    var _56a = opts.selections[opts.highlight];
	    if (_56a) {
	      var tb = $(_568).timespinner("textbox");
	      _55c(tb[0], _56a[0], _56a[1]);
	      tb.focus();
	    }
	  };
	  function _56b(_56c, _56d) {
	    var opts = $.data(_56c, "timespinner").options;
	    var _56d = opts.parser.call(_56c, _56d);
	    var text = opts.formatter.call(_56c, _56d);
	    $(_56c).spinner("setValue", text);
	  };
	  function _56e(_56f, down) {
	    var opts = $.data(_56f, "timespinner").options;
	    var s = $(_56f).timespinner("getValue");
	    var _570 = opts.selections[opts.highlight];
	    var s1 = s.substring(0, _570[0]);
	    var s2 = s.substring(_570[0], _570[1]);
	    var s3 = s.substring(_570[1]);
	    var v = s1 + ((parseInt(s2) || 0) + opts.increment * (down ? -1 : 1)) + s3;
	    $(_56f).timespinner("setValue", v);
	    _567(_56f);
	  };
	  $.fn.timespinner = function (_571, _572) {
	    if (typeof _571 == "string") {
	      var _573 = $.fn.timespinner.methods[_571];
	      if (_573) {
	        return _573(this, _572);
	      } else {
	        return this.spinner(_571, _572);
	      }
	    }
	    _571 = _571 || {};
	    return this.each(function () {
	      var _574 = $.data(this, "timespinner");
	      if (_574) {
	        $.extend(_574.options, _571);
	      } else {
	        $.data(this, "timespinner", { options: $.extend({}, $.fn.timespinner.defaults, $.fn.timespinner.parseOptions(this), _571) });
	      }
	      _560(this);
	    });
	  };
	  $.fn.timespinner.methods = { options: function options(jq) {
	      var opts = jq.data("spinner") ? jq.spinner("options") : {};
	      return $.extend($.data(jq[0], "timespinner").options, { width: opts.width, value: opts.value, originalValue: opts.originalValue, disabled: opts.disabled, readonly: opts.readonly });
	    }, setValue: function setValue(jq, _575) {
	      return jq.each(function () {
	        _56b(this, _575);
	      });
	    }, getHours: function getHours(jq) {
	      var opts = $.data(jq[0], "timespinner").options;
	      var vv = jq.timespinner("getValue").split(opts.separator);
	      return parseInt(vv[0], 10);
	    }, getMinutes: function getMinutes(jq) {
	      var opts = $.data(jq[0], "timespinner").options;
	      var vv = jq.timespinner("getValue").split(opts.separator);
	      return parseInt(vv[1], 10);
	    }, getSeconds: function getSeconds(jq) {
	      var opts = $.data(jq[0], "timespinner").options;
	      var vv = jq.timespinner("getValue").split(opts.separator);
	      return parseInt(vv[2], 10) || 0;
	    } };
	  $.fn.timespinner.parseOptions = function (_576) {
	    return $.extend({}, $.fn.spinner.parseOptions(_576), $.parser.parseOptions(_576, ["separator", { showSeconds: "boolean", highlight: "number" }]));
	  };
	  $.fn.timespinner.defaults = $.extend({}, $.fn.spinner.defaults, { inputEvents: $.extend({}, $.fn.spinner.defaults.inputEvents, { click: function click(e) {
	        _563.call(this, e);
	      }, blur: function blur(e) {
	        var t = $(e.data.target);
	        t.timespinner("setValue", t.timespinner("getText"));
	      }, keydown: function keydown(e) {
	        if (e.keyCode == 13) {
	          var t = $(e.data.target);
	          t.timespinner("setValue", t.timespinner("getText"));
	        }
	      } }), formatter: function formatter(date) {
	      if (!date) {
	        return "";
	      }
	      var opts = $(this).timespinner("options");
	      var tt = [_577(date.getHours()), _577(date.getMinutes())];
	      if (opts.showSeconds) {
	        tt.push(_577(date.getSeconds()));
	      }
	      return tt.join(opts.separator);
	      function _577(_578) {
	        return (_578 < 10 ? "0" : "") + _578;
	      };
	    }, parser: function parser(s) {
	      var opts = $(this).timespinner("options");
	      var date = _579(s);
	      if (date) {
	        var min = _579(opts.min);
	        var max = _579(opts.max);
	        if (min && min > date) {
	          date = min;
	        }
	        if (max && max < date) {
	          date = max;
	        }
	      }
	      return date;
	      function _579(s) {
	        if (!s) {
	          return null;
	        }
	        var tt = s.split(opts.separator);
	        return new Date(1900, 0, 0, parseInt(tt[0], 10) || 0, parseInt(tt[1], 10) || 0, parseInt(tt[2], 10) || 0);
	      };
	      if (!s) {
	        return null;
	      }
	      var tt = s.split(opts.separator);
	      return new Date(1900, 0, 0, parseInt(tt[0], 10) || 0, parseInt(tt[1], 10) || 0, parseInt(tt[2], 10) || 0);
	    }, selections: [[0, 2], [3, 5], [6, 8]], separator: ":", showSeconds: false, highlight: 0, spin: function spin(down) {
	      _56e(this, down);
	    } });
	})(jQuery);
	(function ($) {
	  function _57a(_57b) {
	    var opts = $.data(_57b, "datetimespinner").options;
	    $(_57b).addClass("datetimespinner-f").timespinner(opts);
	  };
	  $.fn.datetimespinner = function (_57c, _57d) {
	    if (typeof _57c == "string") {
	      var _57e = $.fn.datetimespinner.methods[_57c];
	      if (_57e) {
	        return _57e(this, _57d);
	      } else {
	        return this.timespinner(_57c, _57d);
	      }
	    }
	    _57c = _57c || {};
	    return this.each(function () {
	      var _57f = $.data(this, "datetimespinner");
	      if (_57f) {
	        $.extend(_57f.options, _57c);
	      } else {
	        $.data(this, "datetimespinner", { options: $.extend({}, $.fn.datetimespinner.defaults, $.fn.datetimespinner.parseOptions(this), _57c) });
	      }
	      _57a(this);
	    });
	  };
	  $.fn.datetimespinner.methods = { options: function options(jq) {
	      var opts = jq.timespinner("options");
	      return $.extend($.data(jq[0], "datetimespinner").options, { width: opts.width, value: opts.value, originalValue: opts.originalValue, disabled: opts.disabled, readonly: opts.readonly });
	    } };
	  $.fn.datetimespinner.parseOptions = function (_580) {
	    return $.extend({}, $.fn.timespinner.parseOptions(_580), $.parser.parseOptions(_580, []));
	  };
	  $.fn.datetimespinner.defaults = $.extend({}, $.fn.timespinner.defaults, { formatter: function formatter(date) {
	      if (!date) {
	        return "";
	      }
	      return $.fn.datebox.defaults.formatter.call(this, date) + " " + $.fn.timespinner.defaults.formatter.call(this, date);
	    }, parser: function parser(s) {
	      s = $.trim(s);
	      if (!s) {
	        return null;
	      }
	      var dt = s.split(" ");
	      var _581 = $.fn.datebox.defaults.parser.call(this, dt[0]);
	      if (dt.length < 2) {
	        return _581;
	      }
	      var _582 = $.fn.timespinner.defaults.parser.call(this, dt[1]);
	      return new Date(_581.getFullYear(), _581.getMonth(), _581.getDate(), _582.getHours(), _582.getMinutes(), _582.getSeconds());
	    }, selections: [[0, 2], [3, 5], [6, 10], [11, 13], [14, 16], [17, 19]] });
	})(jQuery);
	(function ($) {
	  var _583 = 0;
	  function _584(a, o) {
	    for (var i = 0, len = a.length; i < len; i++) {
	      if (a[i] == o) {
	        return i;
	      }
	    }
	    return -1;
	  };
	  function _585(a, o, id) {
	    if (typeof o == "string") {
	      for (var i = 0, len = a.length; i < len; i++) {
	        if (a[i][o] == id) {
	          a.splice(i, 1);
	          return;
	        }
	      }
	    } else {
	      var _586 = _584(a, o);
	      if (_586 != -1) {
	        a.splice(_586, 1);
	      }
	    }
	  };
	  function _587(a, o, r) {
	    for (var i = 0, len = a.length; i < len; i++) {
	      if (a[i][o] == r[o]) {
	        return;
	      }
	    }
	    a.push(r);
	  };
	  function _588(_589, aa) {
	    return $.data(_589, "treegrid") ? aa.slice(1) : aa;
	  };
	  function _58a(_58b) {
	    var _58c = $.data(_58b, "datagrid");
	    var opts = _58c.options;
	    var _58d = _58c.panel;
	    var dc = _58c.dc;
	    var ss = null;
	    if (opts.sharedStyleSheet) {
	      ss = typeof opts.sharedStyleSheet == "boolean" ? "head" : opts.sharedStyleSheet;
	    } else {
	      ss = _58d.closest("div.datagrid-view");
	      if (!ss.length) {
	        ss = dc.view;
	      }
	    }
	    var cc = $(ss);
	    var _58e = $.data(cc[0], "ss");
	    if (!_58e) {
	      _58e = $.data(cc[0], "ss", { cache: {}, dirty: [] });
	    }
	    return { add: function add(_58f) {
	        var ss = ["<style type=\"text/css\" easyui=\"true\">"];
	        for (var i = 0; i < _58f.length; i++) {
	          _58e.cache[_58f[i][0]] = { width: _58f[i][1] };
	        }
	        var _590 = 0;
	        for (var s in _58e.cache) {
	          var item = _58e.cache[s];
	          item.index = _590++;
	          ss.push(s + "{width:" + item.width + "}");
	        }
	        ss.push("</style>");
	        $(ss.join("\n")).appendTo(cc);
	        cc.children("style[easyui]:not(:last)").remove();
	      }, getRule: function getRule(_591) {
	        var _592 = cc.children("style[easyui]:last")[0];
	        var _593 = _592.styleSheet ? _592.styleSheet : _592.sheet || document.styleSheets[document.styleSheets.length - 1];
	        var _594 = _593.cssRules || _593.rules;
	        return _594[_591];
	      }, set: function set(_595, _596) {
	        var item = _58e.cache[_595];
	        if (item) {
	          item.width = _596;
	          var rule = this.getRule(item.index);
	          if (rule) {
	            rule.style["width"] = _596;
	          }
	        }
	      }, remove: function remove(_597) {
	        var tmp = [];
	        for (var s in _58e.cache) {
	          if (s.indexOf(_597) == -1) {
	            tmp.push([s, _58e.cache[s].width]);
	          }
	        }
	        _58e.cache = {};
	        this.add(tmp);
	      }, dirty: function dirty(_598) {
	        if (_598) {
	          _58e.dirty.push(_598);
	        }
	      }, clean: function clean() {
	        for (var i = 0; i < _58e.dirty.length; i++) {
	          this.remove(_58e.dirty[i]);
	        }
	        _58e.dirty = [];
	      } };
	  };
	  function _599(_59a, _59b) {
	    var _59c = $.data(_59a, "datagrid");
	    var opts = _59c.options;
	    var _59d = _59c.panel;
	    if (_59b) {
	      $.extend(opts, _59b);
	    }
	    if (opts.fit == true) {
	      var p = _59d.panel("panel").parent();
	      opts.width = p.width();
	      opts.height = p.height();
	    }
	    _59d.panel("resize", opts);
	  };
	  function _59e(_59f) {
	    var _5a0 = $.data(_59f, "datagrid");
	    var opts = _5a0.options;
	    var dc = _5a0.dc;
	    var wrap = _5a0.panel;
	    var _5a1 = wrap.width();
	    var _5a2 = wrap.height();
	    var view = dc.view;
	    var _5a3 = dc.view1;
	    var _5a4 = dc.view2;
	    var _5a5 = _5a3.children("div.datagrid-header");
	    var _5a6 = _5a4.children("div.datagrid-header");
	    var _5a7 = _5a5.find("table");
	    var _5a8 = _5a6.find("table");
	    view.width(_5a1);
	    var _5a9 = _5a5.children("div.datagrid-header-inner").show();
	    _5a3.width(_5a9.find("table").width());
	    if (!opts.showHeader) {
	      _5a9.hide();
	    }
	    _5a4.width(_5a1 - _5a3._outerWidth());
	    _5a3.children()._outerWidth(_5a3.width());
	    _5a4.children()._outerWidth(_5a4.width());
	    var all = _5a5.add(_5a6).add(_5a7).add(_5a8);
	    all.css("height", "");
	    var hh = Math.max(_5a7.height(), _5a8.height());
	    all._outerHeight(hh);
	    dc.body1.add(dc.body2).children("table.datagrid-btable-frozen").css({ position: "absolute", top: dc.header2._outerHeight() });
	    var _5aa = dc.body2.children("table.datagrid-btable-frozen")._outerHeight();
	    var _5ab = _5aa + _5a6._outerHeight() + _5a4.children(".datagrid-footer")._outerHeight();
	    wrap.children(":not(.datagrid-view)").each(function () {
	      _5ab += $(this)._outerHeight();
	    });
	    var _5ac = wrap.outerHeight() - wrap.height();
	    var _5ad = wrap._size("minHeight") || "";
	    var _5ae = wrap._size("maxHeight") || "";
	    _5a3.add(_5a4).children("div.datagrid-body").css({ marginTop: _5aa, height: isNaN(parseInt(opts.height)) ? "" : _5a2 - _5ab, minHeight: _5ad ? _5ad - _5ac - _5ab : "", maxHeight: _5ae ? _5ae - _5ac - _5ab : "" });
	    view.height(_5a4.height());
	  };
	  function _5af(_5b0, _5b1, _5b2) {
	    var rows = $.data(_5b0, "datagrid").data.rows;
	    var opts = $.data(_5b0, "datagrid").options;
	    var dc = $.data(_5b0, "datagrid").dc;
	    if (!dc.body1.is(":empty") && (!opts.nowrap || opts.autoRowHeight || _5b2)) {
	      if (_5b1 != undefined) {
	        var tr1 = opts.finder.getTr(_5b0, _5b1, "body", 1);
	        var tr2 = opts.finder.getTr(_5b0, _5b1, "body", 2);
	        _5b3(tr1, tr2);
	      } else {
	        var tr1 = opts.finder.getTr(_5b0, 0, "allbody", 1);
	        var tr2 = opts.finder.getTr(_5b0, 0, "allbody", 2);
	        _5b3(tr1, tr2);
	        if (opts.showFooter) {
	          var tr1 = opts.finder.getTr(_5b0, 0, "allfooter", 1);
	          var tr2 = opts.finder.getTr(_5b0, 0, "allfooter", 2);
	          _5b3(tr1, tr2);
	        }
	      }
	    }
	    _59e(_5b0);
	    if (opts.height == "auto") {
	      var _5b4 = dc.body1.parent();
	      var _5b5 = dc.body2;
	      var _5b6 = _5b7(_5b5);
	      var _5b8 = _5b6.height;
	      if (_5b6.width > _5b5.width()) {
	        _5b8 += 18;
	      }
	      _5b8 -= parseInt(_5b5.css("marginTop")) || 0;
	      _5b4.height(_5b8);
	      _5b5.height(_5b8);
	      dc.view.height(dc.view2.height());
	    }
	    dc.body2.triggerHandler("scroll");
	    function _5b3(trs1, trs2) {
	      for (var i = 0; i < trs2.length; i++) {
	        var tr1 = $(trs1[i]);
	        var tr2 = $(trs2[i]);
	        tr1.css("height", "");
	        tr2.css("height", "");
	        var _5b9 = Math.max(tr1.height(), tr2.height());
	        tr1.css("height", _5b9);
	        tr2.css("height", _5b9);
	      }
	    };
	    function _5b7(cc) {
	      var _5ba = 0;
	      var _5bb = 0;
	      $(cc).children().each(function () {
	        var c = $(this);
	        if (c.is(":visible")) {
	          _5bb += c._outerHeight();
	          if (_5ba < c._outerWidth()) {
	            _5ba = c._outerWidth();
	          }
	        }
	      });
	      return { width: _5ba, height: _5bb };
	    };
	  };
	  function _5bc(_5bd, _5be) {
	    var _5bf = $.data(_5bd, "datagrid");
	    var opts = _5bf.options;
	    var dc = _5bf.dc;
	    if (!dc.body2.children("table.datagrid-btable-frozen").length) {
	      dc.body1.add(dc.body2).prepend("<table class=\"datagrid-btable datagrid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
	    }
	    _5c0(true);
	    _5c0(false);
	    _59e(_5bd);
	    function _5c0(_5c1) {
	      var _5c2 = _5c1 ? 1 : 2;
	      var tr = opts.finder.getTr(_5bd, _5be, "body", _5c2);
	      (_5c1 ? dc.body1 : dc.body2).children("table.datagrid-btable-frozen").append(tr);
	    };
	  };
	  function _5c3(_5c4, _5c5) {
	    function _5c6() {
	      var _5c7 = [];
	      var _5c8 = [];
	      $(_5c4).children("thead").each(function () {
	        var opt = $.parser.parseOptions(this, [{ frozen: "boolean" }]);
	        $(this).find("tr").each(function () {
	          var cols = [];
	          $(this).find("th").each(function () {
	            var th = $(this);
	            var col = $.extend({}, $.parser.parseOptions(this, ["field", "align", "halign", "order", "width", { sortable: "boolean", checkbox: "boolean", resizable: "boolean", fixed: "boolean" }, { rowspan: "number", colspan: "number" }]), { title: th.html() || undefined, hidden: th.attr("hidden") ? true : undefined, formatter: th.attr("formatter") ? eval(th.attr("formatter")) : undefined, styler: th.attr("styler") ? eval(th.attr("styler")) : undefined, sorter: th.attr("sorter") ? eval(th.attr("sorter")) : undefined });
	            if (col.width && String(col.width).indexOf("%") == -1) {
	              col.width = parseInt(col.width);
	            }
	            if (th.attr("editor")) {
	              var s = $.trim(th.attr("editor"));
	              if (s.substr(0, 1) == "{") {
	                col.editor = eval("(" + s + ")");
	              } else {
	                col.editor = s;
	              }
	            }
	            cols.push(col);
	          });
	          opt.frozen ? _5c7.push(cols) : _5c8.push(cols);
	        });
	      });
	      return [_5c7, _5c8];
	    };
	    var _5c9 = $("<div class=\"datagrid-wrap\">" + "<div class=\"datagrid-view\">" + "<div class=\"datagrid-view1\">" + "<div class=\"datagrid-header\">" + "<div class=\"datagrid-header-inner\"></div>" + "</div>" + "<div class=\"datagrid-body\">" + "<div class=\"datagrid-body-inner\"></div>" + "</div>" + "<div class=\"datagrid-footer\">" + "<div class=\"datagrid-footer-inner\"></div>" + "</div>" + "</div>" + "<div class=\"datagrid-view2\">" + "<div class=\"datagrid-header\">" + "<div class=\"datagrid-header-inner\"></div>" + "</div>" + "<div class=\"datagrid-body\"></div>" + "<div class=\"datagrid-footer\">" + "<div class=\"datagrid-footer-inner\"></div>" + "</div>" + "</div>" + "</div>" + "</div>").insertAfter(_5c4);
	    _5c9.panel({ doSize: false, cls: "datagrid" });
	    $(_5c4).addClass("datagrid-f").hide().appendTo(_5c9.children("div.datagrid-view"));
	    var cc = _5c6();
	    var view = _5c9.children("div.datagrid-view");
	    var _5ca = view.children("div.datagrid-view1");
	    var _5cb = view.children("div.datagrid-view2");
	    return { panel: _5c9, frozenColumns: cc[0], columns: cc[1], dc: { view: view, view1: _5ca, view2: _5cb, header1: _5ca.children("div.datagrid-header").children("div.datagrid-header-inner"), header2: _5cb.children("div.datagrid-header").children("div.datagrid-header-inner"), body1: _5ca.children("div.datagrid-body").children("div.datagrid-body-inner"), body2: _5cb.children("div.datagrid-body"), footer1: _5ca.children("div.datagrid-footer").children("div.datagrid-footer-inner"), footer2: _5cb.children("div.datagrid-footer").children("div.datagrid-footer-inner") } };
	  };
	  function _5cc(_5cd) {
	    var _5ce = $.data(_5cd, "datagrid");
	    var opts = _5ce.options;
	    var dc = _5ce.dc;
	    var _5cf = _5ce.panel;
	    _5ce.ss = $(_5cd).datagrid("createStyleSheet");
	    _5cf.panel($.extend({}, opts, { id: null, doSize: false, onResize: function onResize(_5d0, _5d1) {
	        if ($.data(_5cd, "datagrid")) {
	          _59e(_5cd);
	          $(_5cd).datagrid("fitColumns");
	          opts.onResize.call(_5cf, _5d0, _5d1);
	        }
	      }, onExpand: function onExpand() {
	        _5af(_5cd);
	        opts.onExpand.call(_5cf);
	      } }));
	    _5ce.rowIdPrefix = "datagrid-row-r" + ++_583;
	    _5ce.cellClassPrefix = "datagrid-cell-c" + _583;
	    _5d2(dc.header1, opts.frozenColumns, true);
	    _5d2(dc.header2, opts.columns, false);
	    _5d3();
	    dc.header1.add(dc.header2).css("display", opts.showHeader ? "block" : "none");
	    dc.footer1.add(dc.footer2).css("display", opts.showFooter ? "block" : "none");
	    if (opts.toolbar) {
	      if ($.isArray(opts.toolbar)) {
	        $("div.datagrid-toolbar", _5cf).remove();
	        var tb = $("<div class=\"datagrid-toolbar\"><table cellspacing=\"0\" cellpadding=\"0\"><tr></tr></table></div>").prependTo(_5cf);
	        var tr = tb.find("tr");
	        for (var i = 0; i < opts.toolbar.length; i++) {
	          var btn = opts.toolbar[i];
	          if (btn == "-") {
	            $("<td><div class=\"datagrid-btn-separator\"></div></td>").appendTo(tr);
	          } else {
	            var td = $("<td></td>").appendTo(tr);
	            var tool = $("<a href=\"javascript:void(0)\"></a>").appendTo(td);
	            tool[0].onclick = eval(btn.handler || function () {});
	            tool.linkbutton($.extend({}, btn, { plain: true }));
	          }
	        }
	      } else {
	        $(opts.toolbar).addClass("datagrid-toolbar").prependTo(_5cf);
	        $(opts.toolbar).show();
	      }
	    } else {
	      $("div.datagrid-toolbar", _5cf).remove();
	    }
	    $("div.datagrid-pager", _5cf).remove();
	    if (opts.pagination) {
	      var _5d4 = $("<div class=\"datagrid-pager\"></div>");
	      if (opts.pagePosition == "bottom") {
	        _5d4.appendTo(_5cf);
	      } else {
	        if (opts.pagePosition == "top") {
	          _5d4.addClass("datagrid-pager-top").prependTo(_5cf);
	        } else {
	          var ptop = $("<div class=\"datagrid-pager datagrid-pager-top\"></div>").prependTo(_5cf);
	          _5d4.appendTo(_5cf);
	          _5d4 = _5d4.add(ptop);
	        }
	      }
	      _5d4.pagination({ total: opts.pageNumber * opts.pageSize, pageNumber: opts.pageNumber, pageSize: opts.pageSize, pageList: opts.pageList, onSelectPage: function onSelectPage(_5d5, _5d6) {
	          opts.pageNumber = _5d5 || 1;
	          opts.pageSize = _5d6;
	          _5d4.pagination("refresh", { pageNumber: _5d5, pageSize: _5d6 });
	          _611(_5cd);
	        } });
	      opts.pageSize = _5d4.pagination("options").pageSize;
	    }
	    function _5d2(_5d7, _5d8, _5d9) {
	      if (!_5d8) {
	        return;
	      }
	      $(_5d7).show();
	      $(_5d7).empty();
	      var _5da = [];
	      var _5db = [];
	      if (opts.sortName) {
	        _5da = opts.sortName.split(",");
	        _5db = opts.sortOrder.split(",");
	      }
	      var t = $("<table class=\"datagrid-htable\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody></tbody></table>").appendTo(_5d7);
	      for (var i = 0; i < _5d8.length; i++) {
	        var tr = $("<tr class=\"datagrid-header-row\"></tr>").appendTo($("tbody", t));
	        var cols = _5d8[i];
	        for (var j = 0; j < cols.length; j++) {
	          var col = cols[j];
	          var attr = "";
	          if (col.rowspan) {
	            attr += "rowspan=\"" + col.rowspan + "\" ";
	          }
	          if (col.colspan) {
	            attr += "colspan=\"" + col.colspan + "\" ";
	          }
	          var td = $("<td " + attr + "></td>").appendTo(tr);
	          if (col.checkbox) {
	            td.attr("field", col.field);
	            $("<div class=\"datagrid-header-check\"></div>").html("<input type=\"checkbox\"/>").appendTo(td);
	          } else {
	            if (col.field) {
	              td.attr("field", col.field);
	              td.append("<div class=\"datagrid-cell\"><span></span><span class=\"datagrid-sort-icon\"></span></div>");
	              $("span", td).html(col.title);
	              $("span.datagrid-sort-icon", td).html("&nbsp;");
	              var cell = td.find("div.datagrid-cell");
	              var pos = _584(_5da, col.field);
	              if (pos >= 0) {
	                cell.addClass("datagrid-sort-" + _5db[pos]);
	              }
	              if (col.resizable == false) {
	                cell.attr("resizable", "false");
	              }
	              if (col.width) {
	                var _5dc = $.parser.parseValue("width", col.width, dc.view, opts.scrollbarSize);
	                cell._outerWidth(_5dc - 1);
	                col.boxWidth = parseInt(cell[0].style.width);
	                col.deltaWidth = _5dc - col.boxWidth;
	              } else {
	                col.auto = true;
	              }
	              cell.css("text-align", col.halign || col.align || "");
	              col.cellClass = _5ce.cellClassPrefix + "-" + col.field.replace(/[\.|\s]/g, "-");
	              cell.addClass(col.cellClass).css("width", "");
	            } else {
	              $("<div class=\"datagrid-cell-group\"></div>").html(col.title).appendTo(td);
	            }
	          }
	          if (col.hidden) {
	            td.hide();
	          }
	        }
	      }
	      if (_5d9 && opts.rownumbers) {
	        var td = $("<td rowspan=\"" + opts.frozenColumns.length + "\"><div class=\"datagrid-header-rownumber\"></div></td>");
	        if ($("tr", t).length == 0) {
	          td.wrap("<tr class=\"datagrid-header-row\"></tr>").parent().appendTo($("tbody", t));
	        } else {
	          td.prependTo($("tr:first", t));
	        }
	      }
	    };
	    function _5d3() {
	      var _5dd = [];
	      var _5de = _5df(_5cd, true).concat(_5df(_5cd));
	      for (var i = 0; i < _5de.length; i++) {
	        var col = _5e0(_5cd, _5de[i]);
	        if (col && !col.checkbox) {
	          _5dd.push(["." + col.cellClass, col.boxWidth ? col.boxWidth + "px" : "auto"]);
	        }
	      }
	      _5ce.ss.add(_5dd);
	      _5ce.ss.dirty(_5ce.cellSelectorPrefix);
	      _5ce.cellSelectorPrefix = "." + _5ce.cellClassPrefix;
	    };
	  };
	  function _5e1(_5e2) {
	    var _5e3 = $.data(_5e2, "datagrid");
	    var _5e4 = _5e3.panel;
	    var opts = _5e3.options;
	    var dc = _5e3.dc;
	    var _5e5 = dc.header1.add(dc.header2);
	    _5e5.find("input[type=checkbox]").unbind(".datagrid").bind("click.datagrid", function (e) {
	      if (opts.singleSelect && opts.selectOnCheck) {
	        return false;
	      }
	      if ($(this).is(":checked")) {
	        _67b(_5e2);
	      } else {
	        _681(_5e2);
	      }
	      e.stopPropagation();
	    });
	    var _5e6 = _5e5.find("div.datagrid-cell");
	    _5e6.closest("td").unbind(".datagrid").bind("mouseenter.datagrid", function () {
	      if (_5e3.resizing) {
	        return;
	      }
	      $(this).addClass("datagrid-header-over");
	    }).bind("mouseleave.datagrid", function () {
	      $(this).removeClass("datagrid-header-over");
	    }).bind("contextmenu.datagrid", function (e) {
	      var _5e7 = $(this).attr("field");
	      opts.onHeaderContextMenu.call(_5e2, e, _5e7);
	    });
	    _5e6.unbind(".datagrid").bind("click.datagrid", function (e) {
	      var p1 = $(this).offset().left + 5;
	      var p2 = $(this).offset().left + $(this)._outerWidth() - 5;
	      if (e.pageX < p2 && e.pageX > p1) {
	        _606(_5e2, $(this).parent().attr("field"));
	      }
	    }).bind("dblclick.datagrid", function (e) {
	      var p1 = $(this).offset().left + 5;
	      var p2 = $(this).offset().left + $(this)._outerWidth() - 5;
	      var cond = opts.resizeHandle == "right" ? e.pageX > p2 : opts.resizeHandle == "left" ? e.pageX < p1 : e.pageX < p1 || e.pageX > p2;
	      if (cond) {
	        var _5e8 = $(this).parent().attr("field");
	        var col = _5e0(_5e2, _5e8);
	        if (col.resizable == false) {
	          return;
	        }
	        $(_5e2).datagrid("autoSizeColumn", _5e8);
	        col.auto = false;
	      }
	    });
	    var _5e9 = opts.resizeHandle == "right" ? "e" : opts.resizeHandle == "left" ? "w" : "e,w";
	    _5e6.each(function () {
	      $(this).resizable({ handles: _5e9, disabled: $(this).attr("resizable") ? $(this).attr("resizable") == "false" : false, minWidth: 25, onStartResize: function onStartResize(e) {
	          _5e3.resizing = true;
	          _5e5.css("cursor", $("body").css("cursor"));
	          if (!_5e3.proxy) {
	            _5e3.proxy = $("<div class=\"datagrid-resize-proxy\"></div>").appendTo(dc.view);
	          }
	          _5e3.proxy.css({ left: e.pageX - $(_5e4).offset().left - 1, display: "none" });
	          setTimeout(function () {
	            if (_5e3.proxy) {
	              _5e3.proxy.show();
	            }
	          }, 500);
	        }, onResize: function onResize(e) {
	          _5e3.proxy.css({ left: e.pageX - $(_5e4).offset().left - 1, display: "block" });
	          return false;
	        }, onStopResize: function onStopResize(e) {
	          _5e5.css("cursor", "");
	          $(this).css("height", "");
	          var _5ea = $(this).parent().attr("field");
	          var col = _5e0(_5e2, _5ea);
	          col.width = $(this)._outerWidth();
	          col.boxWidth = col.width - col.deltaWidth;
	          col.auto = undefined;
	          $(this).css("width", "");
	          $(_5e2).datagrid("fixColumnSize", _5ea);
	          _5e3.proxy.remove();
	          _5e3.proxy = null;
	          if ($(this).parents("div:first.datagrid-header").parent().hasClass("datagrid-view1")) {
	            _59e(_5e2);
	          }
	          $(_5e2).datagrid("fitColumns");
	          opts.onResizeColumn.call(_5e2, _5ea, col.width);
	          setTimeout(function () {
	            _5e3.resizing = false;
	          }, 0);
	        } });
	    });
	    var bb = dc.body1.add(dc.body2);
	    bb.unbind();
	    for (var _5eb in opts.rowEvents) {
	      bb.bind(_5eb, opts.rowEvents[_5eb]);
	    }
	    dc.body1.bind("mousewheel DOMMouseScroll", function (e) {
	      var e1 = e.originalEvent || window.event;
	      var _5ec = e1.wheelDelta || e1.detail * -1;
	      var dg = $(e.target).closest("div.datagrid-view").children(".datagrid-f");
	      var dc = dg.data("datagrid").dc;
	      dc.body2.scrollTop(dc.body2.scrollTop() - _5ec);
	    });
	    dc.body2.bind("scroll", function () {
	      var b1 = dc.view1.children("div.datagrid-body");
	      b1.scrollTop($(this).scrollTop());
	      var c1 = dc.body1.children(":first");
	      var c2 = dc.body2.children(":first");
	      if (c1.length && c2.length) {
	        var top1 = c1.offset().top;
	        var top2 = c2.offset().top;
	        if (top1 != top2) {
	          b1.scrollTop(b1.scrollTop() + top1 - top2);
	        }
	      }
	      dc.view2.children("div.datagrid-header,div.datagrid-footer")._scrollLeft($(this)._scrollLeft());
	      dc.body2.children("table.datagrid-btable-frozen").css("left", -$(this)._scrollLeft());
	    });
	  };
	  function _5ed(_5ee) {
	    return function (e) {
	      var tr = _5ef(e.target);
	      if (!tr) {
	        return;
	      }
	      var _5f0 = _5f1(tr);
	      if ($.data(_5f0, "datagrid").resizing) {
	        return;
	      }
	      var _5f2 = _5f3(tr);
	      if (_5ee) {
	        _5f4(_5f0, _5f2);
	      } else {
	        var opts = $.data(_5f0, "datagrid").options;
	        opts.finder.getTr(_5f0, _5f2).removeClass("datagrid-row-over");
	      }
	    };
	  };
	  function _5f5(e) {
	    var tr = _5ef(e.target);
	    if (!tr) {
	      return;
	    }
	    var _5f6 = _5f1(tr);
	    var opts = $.data(_5f6, "datagrid").options;
	    var _5f7 = _5f3(tr);
	    var tt = $(e.target);
	    if (tt.parent().hasClass("datagrid-cell-check")) {
	      if (opts.singleSelect && opts.selectOnCheck) {
	        tt._propAttr("checked", !tt.is(":checked"));
	        _5f8(_5f6, _5f7);
	      } else {
	        if (tt.is(":checked")) {
	          tt._propAttr("checked", false);
	          _5f8(_5f6, _5f7);
	        } else {
	          tt._propAttr("checked", true);
	          _5f9(_5f6, _5f7);
	        }
	      }
	    } else {
	      var row = opts.finder.getRow(_5f6, _5f7);
	      var td = tt.closest("td[field]", tr);
	      if (td.length) {
	        var _5fa = td.attr("field");
	        opts.onClickCell.call(_5f6, _5f7, _5fa, row[_5fa]);
	      }
	      if (opts.singleSelect == true) {
	        _5fb(_5f6, _5f7);
	      } else {
	        if (opts.ctrlSelect) {
	          if (e.ctrlKey) {
	            if (tr.hasClass("datagrid-row-selected")) {
	              _5fc(_5f6, _5f7);
	            } else {
	              _5fb(_5f6, _5f7);
	            }
	          } else {
	            if (e.shiftKey) {
	              $(_5f6).datagrid("clearSelections");
	              var _5fd = Math.min(opts.lastSelectedIndex || 0, _5f7);
	              var _5fe = Math.max(opts.lastSelectedIndex || 0, _5f7);
	              for (var i = _5fd; i <= _5fe; i++) {
	                _5fb(_5f6, i);
	              }
	            } else {
	              $(_5f6).datagrid("clearSelections");
	              _5fb(_5f6, _5f7);
	              opts.lastSelectedIndex = _5f7;
	            }
	          }
	        } else {
	          if (tr.hasClass("datagrid-row-selected")) {
	            _5fc(_5f6, _5f7);
	          } else {
	            _5fb(_5f6, _5f7);
	          }
	        }
	      }
	      opts.onClickRow.apply(_5f6, _588(_5f6, [_5f7, row]));
	    }
	  };
	  function _5ff(e) {
	    var tr = _5ef(e.target);
	    if (!tr) {
	      return;
	    }
	    var _600 = _5f1(tr);
	    var opts = $.data(_600, "datagrid").options;
	    var _601 = _5f3(tr);
	    var row = opts.finder.getRow(_600, _601);
	    var td = $(e.target).closest("td[field]", tr);
	    if (td.length) {
	      var _602 = td.attr("field");
	      opts.onDblClickCell.call(_600, _601, _602, row[_602]);
	    }
	    opts.onDblClickRow.apply(_600, _588(_600, [_601, row]));
	  };
	  function _603(e) {
	    var tr = _5ef(e.target);
	    if (!tr) {
	      return;
	    }
	    var _604 = _5f1(tr);
	    var opts = $.data(_604, "datagrid").options;
	    var _605 = _5f3(tr);
	    var row = opts.finder.getRow(_604, _605);
	    opts.onRowContextMenu.call(_604, e, _605, row);
	  };
	  function _5f1(t) {
	    return $(t).closest("div.datagrid-view").children(".datagrid-f")[0];
	  };
	  function _5ef(t) {
	    var tr = $(t).closest("tr.datagrid-row");
	    if (tr.length && tr.parent().length) {
	      return tr;
	    } else {
	      return undefined;
	    }
	  };
	  function _5f3(tr) {
	    if (tr.attr("datagrid-row-index")) {
	      return parseInt(tr.attr("datagrid-row-index"));
	    } else {
	      return tr.attr("node-id");
	    }
	  };
	  function _606(_607, _608) {
	    var _609 = $.data(_607, "datagrid");
	    var opts = _609.options;
	    _608 = _608 || {};
	    var _60a = { sortName: opts.sortName, sortOrder: opts.sortOrder };
	    if ((typeof _608 === "undefined" ? "undefined" : _typeof(_608)) == "object") {
	      $.extend(_60a, _608);
	    }
	    var _60b = [];
	    var _60c = [];
	    if (_60a.sortName) {
	      _60b = _60a.sortName.split(",");
	      _60c = _60a.sortOrder.split(",");
	    }
	    if (typeof _608 == "string") {
	      var _60d = _608;
	      var col = _5e0(_607, _60d);
	      if (!col.sortable || _609.resizing) {
	        return;
	      }
	      var _60e = col.order || "asc";
	      var pos = _584(_60b, _60d);
	      if (pos >= 0) {
	        var _60f = _60c[pos] == "asc" ? "desc" : "asc";
	        if (opts.multiSort && _60f == _60e) {
	          _60b.splice(pos, 1);
	          _60c.splice(pos, 1);
	        } else {
	          _60c[pos] = _60f;
	        }
	      } else {
	        if (opts.multiSort) {
	          _60b.push(_60d);
	          _60c.push(_60e);
	        } else {
	          _60b = [_60d];
	          _60c = [_60e];
	        }
	      }
	      _60a.sortName = _60b.join(",");
	      _60a.sortOrder = _60c.join(",");
	    }
	    if (opts.onBeforeSortColumn.call(_607, _60a.sortName, _60a.sortOrder) == false) {
	      return;
	    }
	    $.extend(opts, _60a);
	    var dc = _609.dc;
	    var _610 = dc.header1.add(dc.header2);
	    _610.find("div.datagrid-cell").removeClass("datagrid-sort-asc datagrid-sort-desc");
	    for (var i = 0; i < _60b.length; i++) {
	      var col = _5e0(_607, _60b[i]);
	      _610.find("div." + col.cellClass).addClass("datagrid-sort-" + _60c[i]);
	    }
	    if (opts.remoteSort) {
	      _611(_607);
	    } else {
	      _612(_607, $(_607).datagrid("getData"));
	    }
	    opts.onSortColumn.call(_607, opts.sortName, opts.sortOrder);
	  };
	  function _613(_614) {
	    var _615 = $.data(_614, "datagrid");
	    var opts = _615.options;
	    var dc = _615.dc;
	    var _616 = dc.view2.children("div.datagrid-header");
	    dc.body2.css("overflow-x", "");
	    _617();
	    _618();
	    _619();
	    _617(true);
	    if (_616.width() >= _616.find("table").width()) {
	      dc.body2.css("overflow-x", "hidden");
	    }
	    function _619() {
	      if (!opts.fitColumns) {
	        return;
	      }
	      if (!_615.leftWidth) {
	        _615.leftWidth = 0;
	      }
	      var _61a = 0;
	      var cc = [];
	      var _61b = _5df(_614, false);
	      for (var i = 0; i < _61b.length; i++) {
	        var col = _5e0(_614, _61b[i]);
	        if (_61c(col)) {
	          _61a += col.width;
	          cc.push({ field: col.field, col: col, addingWidth: 0 });
	        }
	      }
	      if (!_61a) {
	        return;
	      }
	      cc[cc.length - 1].addingWidth -= _615.leftWidth;
	      var _61d = _616.children("div.datagrid-header-inner").show();
	      var _61e = _616.width() - _616.find("table").width() - opts.scrollbarSize + _615.leftWidth;
	      var rate = _61e / _61a;
	      if (!opts.showHeader) {
	        _61d.hide();
	      }
	      for (var i = 0; i < cc.length; i++) {
	        var c = cc[i];
	        var _61f = parseInt(c.col.width * rate);
	        c.addingWidth += _61f;
	        _61e -= _61f;
	      }
	      cc[cc.length - 1].addingWidth += _61e;
	      for (var i = 0; i < cc.length; i++) {
	        var c = cc[i];
	        if (c.col.boxWidth + c.addingWidth > 0) {
	          c.col.boxWidth += c.addingWidth;
	          c.col.width += c.addingWidth;
	        }
	      }
	      _615.leftWidth = _61e;
	      $(_614).datagrid("fixColumnSize");
	    };
	    function _618() {
	      var _620 = false;
	      var _621 = _5df(_614, true).concat(_5df(_614, false));
	      $.map(_621, function (_622) {
	        var col = _5e0(_614, _622);
	        if (String(col.width || "").indexOf("%") >= 0) {
	          var _623 = $.parser.parseValue("width", col.width, dc.view, opts.scrollbarSize) - col.deltaWidth;
	          if (_623 > 0) {
	            col.boxWidth = _623;
	            _620 = true;
	          }
	        }
	      });
	      if (_620) {
	        $(_614).datagrid("fixColumnSize");
	      }
	    };
	    function _617(fit) {
	      var _624 = dc.header1.add(dc.header2).find(".datagrid-cell-group");
	      if (_624.length) {
	        _624.each(function () {
	          $(this)._outerWidth(fit ? $(this).parent().width() : 10);
	        });
	        if (fit) {
	          _59e(_614);
	        }
	      }
	    };
	    function _61c(col) {
	      if (String(col.width || "").indexOf("%") >= 0) {
	        return false;
	      }
	      if (!col.hidden && !col.checkbox && !col.auto && !col.fixed) {
	        return true;
	      }
	    };
	  };
	  function _625(_626, _627) {
	    var _628 = $.data(_626, "datagrid");
	    var opts = _628.options;
	    var dc = _628.dc;
	    var tmp = $("<div class=\"datagrid-cell\" style=\"position:absolute;left:-9999px\"></div>").appendTo("body");
	    if (_627) {
	      _599(_627);
	      if (opts.fitColumns) {
	        _59e(_626);
	        $(_626).datagrid("fitColumns");
	      }
	    } else {
	      var _629 = false;
	      var _62a = _5df(_626, true).concat(_5df(_626, false));
	      for (var i = 0; i < _62a.length; i++) {
	        var _627 = _62a[i];
	        var col = _5e0(_626, _627);
	        if (col.auto) {
	          _599(_627);
	          _629 = true;
	        }
	      }
	      if (_629 && opts.fitColumns) {
	        _59e(_626);
	        $(_626).datagrid("fitColumns");
	      }
	    }
	    tmp.remove();
	    function _599(_62b) {
	      var _62c = dc.view.find("div.datagrid-header td[field=\"" + _62b + "\"] div.datagrid-cell");
	      _62c.css("width", "");
	      var col = $(_626).datagrid("getColumnOption", _62b);
	      col.width = undefined;
	      col.boxWidth = undefined;
	      col.auto = true;
	      $(_626).datagrid("fixColumnSize", _62b);
	      var _62d = Math.max(_62e("header"), _62e("allbody"), _62e("allfooter")) + 1;
	      _62c._outerWidth(_62d - 1);
	      col.width = _62d;
	      col.boxWidth = parseInt(_62c[0].style.width);
	      col.deltaWidth = _62d - col.boxWidth;
	      _62c.css("width", "");
	      $(_626).datagrid("fixColumnSize", _62b);
	      opts.onResizeColumn.call(_626, _62b, col.width);
	      function _62e(type) {
	        var _62f = 0;
	        if (type == "header") {
	          _62f = _630(_62c);
	        } else {
	          opts.finder.getTr(_626, 0, type).find("td[field=\"" + _62b + "\"] div.datagrid-cell").each(function () {
	            var w = _630($(this));
	            if (_62f < w) {
	              _62f = w;
	            }
	          });
	        }
	        return _62f;
	        function _630(cell) {
	          return cell.is(":visible") ? cell._outerWidth() : tmp.html(cell.html())._outerWidth();
	        };
	      };
	    };
	  };
	  function _631(_632, _633) {
	    var _634 = $.data(_632, "datagrid");
	    var opts = _634.options;
	    var dc = _634.dc;
	    var _635 = dc.view.find("table.datagrid-btable,table.datagrid-ftable");
	    _635.css("table-layout", "fixed");
	    if (_633) {
	      fix(_633);
	    } else {
	      var ff = _5df(_632, true).concat(_5df(_632, false));
	      for (var i = 0; i < ff.length; i++) {
	        fix(ff[i]);
	      }
	    }
	    _635.css("table-layout", "");
	    _636(_632);
	    _5af(_632);
	    _637(_632);
	    function fix(_638) {
	      var col = _5e0(_632, _638);
	      if (col.cellClass) {
	        _634.ss.set("." + col.cellClass, col.boxWidth ? col.boxWidth + "px" : "auto");
	      }
	    };
	  };
	  function _636(_639) {
	    var dc = $.data(_639, "datagrid").dc;
	    dc.view.find("td.datagrid-td-merged").each(function () {
	      var td = $(this);
	      var _63a = td.attr("colspan") || 1;
	      var col = _5e0(_639, td.attr("field"));
	      var _63b = col.boxWidth + col.deltaWidth - 1;
	      for (var i = 1; i < _63a; i++) {
	        td = td.next();
	        col = _5e0(_639, td.attr("field"));
	        _63b += col.boxWidth + col.deltaWidth;
	      }
	      $(this).children("div.datagrid-cell")._outerWidth(_63b);
	    });
	  };
	  function _637(_63c) {
	    var dc = $.data(_63c, "datagrid").dc;
	    dc.view.find("div.datagrid-editable").each(function () {
	      var cell = $(this);
	      var _63d = cell.parent().attr("field");
	      var col = $(_63c).datagrid("getColumnOption", _63d);
	      cell._outerWidth(col.boxWidth + col.deltaWidth - 1);
	      var ed = $.data(this, "datagrid.editor");
	      if (ed.actions.resize) {
	        ed.actions.resize(ed.target, cell.width());
	      }
	    });
	  };
	  function _5e0(_63e, _63f) {
	    function find(_640) {
	      if (_640) {
	        for (var i = 0; i < _640.length; i++) {
	          var cc = _640[i];
	          for (var j = 0; j < cc.length; j++) {
	            var c = cc[j];
	            if (c.field == _63f) {
	              return c;
	            }
	          }
	        }
	      }
	      return null;
	    };
	    var opts = $.data(_63e, "datagrid").options;
	    var col = find(opts.columns);
	    if (!col) {
	      col = find(opts.frozenColumns);
	    }
	    return col;
	  };
	  function _5df(_641, _642) {
	    var opts = $.data(_641, "datagrid").options;
	    var _643 = _642 == true ? opts.frozenColumns || [[]] : opts.columns;
	    if (_643.length == 0) {
	      return [];
	    }
	    var aa = [];
	    var _644 = _645();
	    for (var i = 0; i < _643.length; i++) {
	      aa[i] = new Array(_644);
	    }
	    for (var _646 = 0; _646 < _643.length; _646++) {
	      $.map(_643[_646], function (col) {
	        var _647 = _648(aa[_646]);
	        if (_647 >= 0) {
	          var _649 = col.field || "";
	          for (var c = 0; c < (col.colspan || 1); c++) {
	            for (var r = 0; r < (col.rowspan || 1); r++) {
	              aa[_646 + r][_647] = _649;
	            }
	            _647++;
	          }
	        }
	      });
	    }
	    return aa[aa.length - 1];
	    function _645() {
	      var _64a = 0;
	      $.map(_643[0], function (col) {
	        _64a += col.colspan || 1;
	      });
	      return _64a;
	    };
	    function _648(a) {
	      for (var i = 0; i < a.length; i++) {
	        if (a[i] == undefined) {
	          return i;
	        }
	      }
	      return -1;
	    };
	  };
	  function _612(_64b, data) {
	    var _64c = $.data(_64b, "datagrid");
	    var opts = _64c.options;
	    var dc = _64c.dc;
	    data = opts.loadFilter.call(_64b, data);
	    data.total = parseInt(data.total);
	    _64c.data = data;
	    if (data.footer) {
	      _64c.footer = data.footer;
	    }
	    if (!opts.remoteSort && opts.sortName) {
	      var _64d = opts.sortName.split(",");
	      var _64e = opts.sortOrder.split(",");
	      data.rows.sort(function (r1, r2) {
	        var r = 0;
	        for (var i = 0; i < _64d.length; i++) {
	          var sn = _64d[i];
	          var so = _64e[i];
	          var col = _5e0(_64b, sn);
	          var _64f = col.sorter || function (a, b) {
	            return a == b ? 0 : a > b ? 1 : -1;
	          };
	          r = _64f(r1[sn], r2[sn]) * (so == "asc" ? 1 : -1);
	          if (r != 0) {
	            return r;
	          }
	        }
	        return r;
	      });
	    }
	    if (opts.view.onBeforeRender) {
	      opts.view.onBeforeRender.call(opts.view, _64b, data.rows);
	    }
	    opts.view.render.call(opts.view, _64b, dc.body2, false);
	    opts.view.render.call(opts.view, _64b, dc.body1, true);
	    if (opts.showFooter) {
	      opts.view.renderFooter.call(opts.view, _64b, dc.footer2, false);
	      opts.view.renderFooter.call(opts.view, _64b, dc.footer1, true);
	    }
	    if (opts.view.onAfterRender) {
	      opts.view.onAfterRender.call(opts.view, _64b);
	    }
	    _64c.ss.clean();
	    var _650 = $(_64b).datagrid("getPager");
	    if (_650.length) {
	      var _651 = _650.pagination("options");
	      if (_651.total != data.total) {
	        _650.pagination("refresh", { total: data.total });
	        if (opts.pageNumber != _651.pageNumber && _651.pageNumber > 0) {
	          opts.pageNumber = _651.pageNumber;
	          _611(_64b);
	        }
	      }
	    }
	    _5af(_64b);
	    dc.body2.triggerHandler("scroll");
	    $(_64b).datagrid("setSelectionState");
	    $(_64b).datagrid("autoSizeColumn");
	    opts.onLoadSuccess.call(_64b, data);
	  };
	  function _652(_653) {
	    var _654 = $.data(_653, "datagrid");
	    var opts = _654.options;
	    var dc = _654.dc;
	    dc.header1.add(dc.header2).find("input[type=checkbox]")._propAttr("checked", false);
	    if (opts.idField) {
	      var _655 = $.data(_653, "treegrid") ? true : false;
	      var _656 = opts.onSelect;
	      var _657 = opts.onCheck;
	      opts.onSelect = opts.onCheck = function () {};
	      var rows = opts.finder.getRows(_653);
	      for (var i = 0; i < rows.length; i++) {
	        var row = rows[i];
	        var _658 = _655 ? row[opts.idField] : i;
	        if (_659(_654.selectedRows, row)) {
	          _5fb(_653, _658, true);
	        }
	        if (_659(_654.checkedRows, row)) {
	          _5f8(_653, _658, true);
	        }
	      }
	      opts.onSelect = _656;
	      opts.onCheck = _657;
	    }
	    function _659(a, r) {
	      for (var i = 0; i < a.length; i++) {
	        if (a[i][opts.idField] == r[opts.idField]) {
	          a[i] = r;
	          return true;
	        }
	      }
	      return false;
	    };
	  };
	  function _65a(_65b, row) {
	    var _65c = $.data(_65b, "datagrid");
	    var opts = _65c.options;
	    var rows = _65c.data.rows;
	    if ((typeof row === "undefined" ? "undefined" : _typeof(row)) == "object") {
	      return _584(rows, row);
	    } else {
	      for (var i = 0; i < rows.length; i++) {
	        if (rows[i][opts.idField] == row) {
	          return i;
	        }
	      }
	      return -1;
	    }
	  };
	  function _65d(_65e) {
	    var _65f = $.data(_65e, "datagrid");
	    var opts = _65f.options;
	    var data = _65f.data;
	    if (opts.idField) {
	      return _65f.selectedRows;
	    } else {
	      var rows = [];
	      opts.finder.getTr(_65e, "", "selected", 2).each(function () {
	        rows.push(opts.finder.getRow(_65e, $(this)));
	      });
	      return rows;
	    }
	  };
	  function _660(_661) {
	    var _662 = $.data(_661, "datagrid");
	    var opts = _662.options;
	    if (opts.idField) {
	      return _662.checkedRows;
	    } else {
	      var rows = [];
	      opts.finder.getTr(_661, "", "checked", 2).each(function () {
	        rows.push(opts.finder.getRow(_661, $(this)));
	      });
	      return rows;
	    }
	  };
	  function _663(_664, _665) {
	    var _666 = $.data(_664, "datagrid");
	    var dc = _666.dc;
	    var opts = _666.options;
	    var tr = opts.finder.getTr(_664, _665);
	    if (tr.length) {
	      if (tr.closest("table").hasClass("datagrid-btable-frozen")) {
	        return;
	      }
	      var _667 = dc.view2.children("div.datagrid-header")._outerHeight();
	      var _668 = dc.body2;
	      var _669 = _668.outerHeight(true) - _668.outerHeight();
	      var top = tr.position().top - _667 - _669;
	      if (top < 0) {
	        _668.scrollTop(_668.scrollTop() + top);
	      } else {
	        if (top + tr._outerHeight() > _668.height() - 18) {
	          _668.scrollTop(_668.scrollTop() + top + tr._outerHeight() - _668.height() + 18);
	        }
	      }
	    }
	  };
	  function _5f4(_66a, _66b) {
	    var _66c = $.data(_66a, "datagrid");
	    var opts = _66c.options;
	    opts.finder.getTr(_66a, _66c.highlightIndex).removeClass("datagrid-row-over");
	    opts.finder.getTr(_66a, _66b).addClass("datagrid-row-over");
	    _66c.highlightIndex = _66b;
	  };
	  function _5fb(_66d, _66e, _66f) {
	    var _670 = $.data(_66d, "datagrid");
	    var opts = _670.options;
	    var row = opts.finder.getRow(_66d, _66e);
	    if (opts.onBeforeSelect.apply(_66d, _588(_66d, [_66e, row])) == false) {
	      return;
	    }
	    if (opts.singleSelect) {
	      _671(_66d, true);
	      _670.selectedRows = [];
	    }
	    if (!_66f && opts.checkOnSelect) {
	      _5f8(_66d, _66e, true);
	    }
	    if (opts.idField) {
	      _587(_670.selectedRows, opts.idField, row);
	    }
	    opts.finder.getTr(_66d, _66e).addClass("datagrid-row-selected");
	    opts.onSelect.apply(_66d, _588(_66d, [_66e, row]));
	    _663(_66d, _66e);
	  };
	  function _5fc(_672, _673, _674) {
	    var _675 = $.data(_672, "datagrid");
	    var dc = _675.dc;
	    var opts = _675.options;
	    var row = opts.finder.getRow(_672, _673);
	    if (opts.onBeforeUnselect.apply(_672, _588(_672, [_673, row])) == false) {
	      return;
	    }
	    if (!_674 && opts.checkOnSelect) {
	      _5f9(_672, _673, true);
	    }
	    opts.finder.getTr(_672, _673).removeClass("datagrid-row-selected");
	    if (opts.idField) {
	      _585(_675.selectedRows, opts.idField, row[opts.idField]);
	    }
	    opts.onUnselect.apply(_672, _588(_672, [_673, row]));
	  };
	  function _676(_677, _678) {
	    var _679 = $.data(_677, "datagrid");
	    var opts = _679.options;
	    var rows = opts.finder.getRows(_677);
	    var _67a = $.data(_677, "datagrid").selectedRows;
	    if (!_678 && opts.checkOnSelect) {
	      _67b(_677, true);
	    }
	    opts.finder.getTr(_677, "", "allbody").addClass("datagrid-row-selected");
	    if (opts.idField) {
	      for (var _67c = 0; _67c < rows.length; _67c++) {
	        _587(_67a, opts.idField, rows[_67c]);
	      }
	    }
	    opts.onSelectAll.call(_677, rows);
	  };
	  function _671(_67d, _67e) {
	    var _67f = $.data(_67d, "datagrid");
	    var opts = _67f.options;
	    var rows = opts.finder.getRows(_67d);
	    var _680 = $.data(_67d, "datagrid").selectedRows;
	    if (!_67e && opts.checkOnSelect) {
	      _681(_67d, true);
	    }
	    opts.finder.getTr(_67d, "", "selected").removeClass("datagrid-row-selected");
	    if (opts.idField) {
	      for (var _682 = 0; _682 < rows.length; _682++) {
	        _585(_680, opts.idField, rows[_682][opts.idField]);
	      }
	    }
	    opts.onUnselectAll.call(_67d, rows);
	  };
	  function _5f8(_683, _684, _685) {
	    var _686 = $.data(_683, "datagrid");
	    var opts = _686.options;
	    var row = opts.finder.getRow(_683, _684);
	    if (opts.onBeforeCheck.apply(_683, _588(_683, [_684, row])) == false) {
	      return;
	    }
	    if (opts.singleSelect && opts.selectOnCheck) {
	      _681(_683, true);
	      _686.checkedRows = [];
	    }
	    if (!_685 && opts.selectOnCheck) {
	      _5fb(_683, _684, true);
	    }
	    var tr = opts.finder.getTr(_683, _684).addClass("datagrid-row-checked");
	    tr.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", true);
	    tr = opts.finder.getTr(_683, "", "checked", 2);
	    if (tr.length == opts.finder.getRows(_683).length) {
	      var dc = _686.dc;
	      dc.header1.add(dc.header2).find("input[type=checkbox]")._propAttr("checked", true);
	    }
	    if (opts.idField) {
	      _587(_686.checkedRows, opts.idField, row);
	    }
	    opts.onCheck.apply(_683, _588(_683, [_684, row]));
	  };
	  function _5f9(_687, _688, _689) {
	    var _68a = $.data(_687, "datagrid");
	    var opts = _68a.options;
	    var row = opts.finder.getRow(_687, _688);
	    if (opts.onBeforeUncheck.apply(_687, _588(_687, [_688, row])) == false) {
	      return;
	    }
	    if (!_689 && opts.selectOnCheck) {
	      _5fc(_687, _688, true);
	    }
	    var tr = opts.finder.getTr(_687, _688).removeClass("datagrid-row-checked");
	    tr.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", false);
	    var dc = _68a.dc;
	    var _68b = dc.header1.add(dc.header2);
	    _68b.find("input[type=checkbox]")._propAttr("checked", false);
	    if (opts.idField) {
	      _585(_68a.checkedRows, opts.idField, row[opts.idField]);
	    }
	    opts.onUncheck.apply(_687, _588(_687, [_688, row]));
	  };
	  function _67b(_68c, _68d) {
	    var _68e = $.data(_68c, "datagrid");
	    var opts = _68e.options;
	    var rows = opts.finder.getRows(_68c);
	    if (!_68d && opts.selectOnCheck) {
	      _676(_68c, true);
	    }
	    var dc = _68e.dc;
	    var hck = dc.header1.add(dc.header2).find("input[type=checkbox]");
	    var bck = opts.finder.getTr(_68c, "", "allbody").addClass("datagrid-row-checked").find("div.datagrid-cell-check input[type=checkbox]");
	    hck.add(bck)._propAttr("checked", true);
	    if (opts.idField) {
	      for (var i = 0; i < rows.length; i++) {
	        _587(_68e.checkedRows, opts.idField, rows[i]);
	      }
	    }
	    opts.onCheckAll.call(_68c, rows);
	  };
	  function _681(_68f, _690) {
	    var _691 = $.data(_68f, "datagrid");
	    var opts = _691.options;
	    var rows = opts.finder.getRows(_68f);
	    if (!_690 && opts.selectOnCheck) {
	      _671(_68f, true);
	    }
	    var dc = _691.dc;
	    var hck = dc.header1.add(dc.header2).find("input[type=checkbox]");
	    var bck = opts.finder.getTr(_68f, "", "checked").removeClass("datagrid-row-checked").find("div.datagrid-cell-check input[type=checkbox]");
	    hck.add(bck)._propAttr("checked", false);
	    if (opts.idField) {
	      for (var i = 0; i < rows.length; i++) {
	        _585(_691.checkedRows, opts.idField, rows[i][opts.idField]);
	      }
	    }
	    opts.onUncheckAll.call(_68f, rows);
	  };
	  function _692(_693, _694) {
	    var opts = $.data(_693, "datagrid").options;
	    var tr = opts.finder.getTr(_693, _694);
	    var row = opts.finder.getRow(_693, _694);
	    if (tr.hasClass("datagrid-row-editing")) {
	      return;
	    }
	    if (opts.onBeforeEdit.apply(_693, _588(_693, [_694, row])) == false) {
	      return;
	    }
	    tr.addClass("datagrid-row-editing");
	    _695(_693, _694);
	    _637(_693);
	    tr.find("div.datagrid-editable").each(function () {
	      var _696 = $(this).parent().attr("field");
	      var ed = $.data(this, "datagrid.editor");
	      ed.actions.setValue(ed.target, row[_696]);
	    });
	    _697(_693, _694);
	    opts.onBeginEdit.apply(_693, _588(_693, [_694, row]));
	  };
	  function _698(_699, _69a, _69b) {
	    var _69c = $.data(_699, "datagrid");
	    var opts = _69c.options;
	    var _69d = _69c.updatedRows;
	    var _69e = _69c.insertedRows;
	    var tr = opts.finder.getTr(_699, _69a);
	    var row = opts.finder.getRow(_699, _69a);
	    if (!tr.hasClass("datagrid-row-editing")) {
	      return;
	    }
	    if (!_69b) {
	      if (!_697(_699, _69a)) {
	        return;
	      }
	      var _69f = false;
	      var _6a0 = {};
	      tr.find("div.datagrid-editable").each(function () {
	        var _6a1 = $(this).parent().attr("field");
	        var ed = $.data(this, "datagrid.editor");
	        var t = $(ed.target);
	        var _6a2 = t.data("textbox") ? t.textbox("textbox") : t;
	        _6a2.triggerHandler("blur");
	        var _6a3 = ed.actions.getValue(ed.target);
	        if (row[_6a1] != _6a3) {
	          row[_6a1] = _6a3;
	          _69f = true;
	          _6a0[_6a1] = _6a3;
	        }
	      });
	      if (_69f) {
	        if (_584(_69e, row) == -1) {
	          if (_584(_69d, row) == -1) {
	            _69d.push(row);
	          }
	        }
	      }
	      opts.onEndEdit.apply(_699, _588(_699, [_69a, row, _6a0]));
	    }
	    tr.removeClass("datagrid-row-editing");
	    _6a4(_699, _69a);
	    $(_699).datagrid("refreshRow", _69a);
	    if (!_69b) {
	      opts.onAfterEdit.apply(_699, _588(_699, [_69a, row, _6a0]));
	    } else {
	      opts.onCancelEdit.apply(_699, _588(_699, [_69a, row]));
	    }
	  };
	  function _6a5(_6a6, _6a7) {
	    var opts = $.data(_6a6, "datagrid").options;
	    var tr = opts.finder.getTr(_6a6, _6a7);
	    var _6a8 = [];
	    tr.children("td").each(function () {
	      var cell = $(this).find("div.datagrid-editable");
	      if (cell.length) {
	        var ed = $.data(cell[0], "datagrid.editor");
	        _6a8.push(ed);
	      }
	    });
	    return _6a8;
	  };
	  function _6a9(_6aa, _6ab) {
	    var _6ac = _6a5(_6aa, _6ab.index != undefined ? _6ab.index : _6ab.id);
	    for (var i = 0; i < _6ac.length; i++) {
	      if (_6ac[i].field == _6ab.field) {
	        return _6ac[i];
	      }
	    }
	    return null;
	  };
	  function _695(_6ad, _6ae) {
	    var opts = $.data(_6ad, "datagrid").options;
	    var tr = opts.finder.getTr(_6ad, _6ae);
	    tr.children("td").each(function () {
	      var cell = $(this).find("div.datagrid-cell");
	      var _6af = $(this).attr("field");
	      var col = _5e0(_6ad, _6af);
	      if (col && col.editor) {
	        var _6b0, _6b1;
	        if (typeof col.editor == "string") {
	          _6b0 = col.editor;
	        } else {
	          _6b0 = col.editor.type;
	          _6b1 = col.editor.options;
	        }
	        var _6b2 = opts.editors[_6b0];
	        if (_6b2) {
	          var _6b3 = cell.html();
	          var _6b4 = cell._outerWidth();
	          cell.addClass("datagrid-editable");
	          cell._outerWidth(_6b4);
	          cell.html("<table border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td></td></tr></table>");
	          cell.children("table").bind("click dblclick contextmenu", function (e) {
	            e.stopPropagation();
	          });
	          $.data(cell[0], "datagrid.editor", { actions: _6b2, target: _6b2.init(cell.find("td"), _6b1), field: _6af, type: _6b0, oldHtml: _6b3 });
	        }
	      }
	    });
	    _5af(_6ad, _6ae, true);
	  };
	  function _6a4(_6b5, _6b6) {
	    var opts = $.data(_6b5, "datagrid").options;
	    var tr = opts.finder.getTr(_6b5, _6b6);
	    tr.children("td").each(function () {
	      var cell = $(this).find("div.datagrid-editable");
	      if (cell.length) {
	        var ed = $.data(cell[0], "datagrid.editor");
	        if (ed.actions.destroy) {
	          ed.actions.destroy(ed.target);
	        }
	        cell.html(ed.oldHtml);
	        $.removeData(cell[0], "datagrid.editor");
	        cell.removeClass("datagrid-editable");
	        cell.css("width", "");
	      }
	    });
	  };
	  function _697(_6b7, _6b8) {
	    var tr = $.data(_6b7, "datagrid").options.finder.getTr(_6b7, _6b8);
	    if (!tr.hasClass("datagrid-row-editing")) {
	      return true;
	    }
	    var vbox = tr.find(".validatebox-text");
	    vbox.validatebox("validate");
	    vbox.trigger("mouseleave");
	    var _6b9 = tr.find(".validatebox-invalid");
	    return _6b9.length == 0;
	  };
	  function _6ba(_6bb, _6bc) {
	    var _6bd = $.data(_6bb, "datagrid").insertedRows;
	    var _6be = $.data(_6bb, "datagrid").deletedRows;
	    var _6bf = $.data(_6bb, "datagrid").updatedRows;
	    if (!_6bc) {
	      var rows = [];
	      rows = rows.concat(_6bd);
	      rows = rows.concat(_6be);
	      rows = rows.concat(_6bf);
	      return rows;
	    } else {
	      if (_6bc == "inserted") {
	        return _6bd;
	      } else {
	        if (_6bc == "deleted") {
	          return _6be;
	        } else {
	          if (_6bc == "updated") {
	            return _6bf;
	          }
	        }
	      }
	    }
	    return [];
	  };
	  function _6c0(_6c1, _6c2) {
	    var _6c3 = $.data(_6c1, "datagrid");
	    var opts = _6c3.options;
	    var data = _6c3.data;
	    var _6c4 = _6c3.insertedRows;
	    var _6c5 = _6c3.deletedRows;
	    $(_6c1).datagrid("cancelEdit", _6c2);
	    var row = opts.finder.getRow(_6c1, _6c2);
	    if (_584(_6c4, row) >= 0) {
	      _585(_6c4, row);
	    } else {
	      _6c5.push(row);
	    }
	    _585(_6c3.selectedRows, opts.idField, row[opts.idField]);
	    _585(_6c3.checkedRows, opts.idField, row[opts.idField]);
	    opts.view.deleteRow.call(opts.view, _6c1, _6c2);
	    if (opts.height == "auto") {
	      _5af(_6c1);
	    }
	    $(_6c1).datagrid("getPager").pagination("refresh", { total: data.total });
	  };
	  function _6c6(_6c7, _6c8) {
	    var data = $.data(_6c7, "datagrid").data;
	    var view = $.data(_6c7, "datagrid").options.view;
	    var _6c9 = $.data(_6c7, "datagrid").insertedRows;
	    view.insertRow.call(view, _6c7, _6c8.index, _6c8.row);
	    _6c9.push(_6c8.row);
	    $(_6c7).datagrid("getPager").pagination("refresh", { total: data.total });
	  };
	  function _6ca(_6cb, row) {
	    var data = $.data(_6cb, "datagrid").data;
	    var view = $.data(_6cb, "datagrid").options.view;
	    var _6cc = $.data(_6cb, "datagrid").insertedRows;
	    view.insertRow.call(view, _6cb, null, row);
	    _6cc.push(row);
	    $(_6cb).datagrid("getPager").pagination("refresh", { total: data.total });
	  };
	  function _6cd(_6ce) {
	    var _6cf = $.data(_6ce, "datagrid");
	    var data = _6cf.data;
	    var rows = data.rows;
	    var _6d0 = [];
	    for (var i = 0; i < rows.length; i++) {
	      _6d0.push($.extend({}, rows[i]));
	    }
	    _6cf.originalRows = _6d0;
	    _6cf.updatedRows = [];
	    _6cf.insertedRows = [];
	    _6cf.deletedRows = [];
	  };
	  function _6d1(_6d2) {
	    var data = $.data(_6d2, "datagrid").data;
	    var ok = true;
	    for (var i = 0, len = data.rows.length; i < len; i++) {
	      if (_697(_6d2, i)) {
	        $(_6d2).datagrid("endEdit", i);
	      } else {
	        ok = false;
	      }
	    }
	    if (ok) {
	      _6cd(_6d2);
	    }
	  };
	  function _6d3(_6d4) {
	    var _6d5 = $.data(_6d4, "datagrid");
	    var opts = _6d5.options;
	    var _6d6 = _6d5.originalRows;
	    var _6d7 = _6d5.insertedRows;
	    var _6d8 = _6d5.deletedRows;
	    var _6d9 = _6d5.selectedRows;
	    var _6da = _6d5.checkedRows;
	    var data = _6d5.data;
	    function _6db(a) {
	      var ids = [];
	      for (var i = 0; i < a.length; i++) {
	        ids.push(a[i][opts.idField]);
	      }
	      return ids;
	    };
	    function _6dc(ids, _6dd) {
	      for (var i = 0; i < ids.length; i++) {
	        var _6de = _65a(_6d4, ids[i]);
	        if (_6de >= 0) {
	          (_6dd == "s" ? _5fb : _5f8)(_6d4, _6de, true);
	        }
	      }
	    };
	    for (var i = 0; i < data.rows.length; i++) {
	      $(_6d4).datagrid("cancelEdit", i);
	    }
	    var _6df = _6db(_6d9);
	    var _6e0 = _6db(_6da);
	    _6d9.splice(0, _6d9.length);
	    _6da.splice(0, _6da.length);
	    data.total += _6d8.length - _6d7.length;
	    data.rows = _6d6;
	    _612(_6d4, data);
	    _6dc(_6df, "s");
	    _6dc(_6e0, "c");
	    _6cd(_6d4);
	  };
	  function _611(_6e1, _6e2) {
	    var opts = $.data(_6e1, "datagrid").options;
	    if (_6e2) {
	      opts.queryParams = _6e2;
	    }
	    var _6e3 = $.extend({}, opts.queryParams);
	    if (opts.pagination) {
	      $.extend(_6e3, { page: opts.pageNumber || 1, rows: opts.pageSize });
	    }
	    if (opts.sortName) {
	      $.extend(_6e3, { sort: opts.sortName, order: opts.sortOrder });
	    }
	    if (opts.onBeforeLoad.call(_6e1, _6e3) == false) {
	      return;
	    }
	    $(_6e1).datagrid("loading");
	    var _6e4 = opts.loader.call(_6e1, _6e3, function (data) {
	      $(_6e1).datagrid("loaded");
	      $(_6e1).datagrid("loadData", data);
	    }, function () {
	      $(_6e1).datagrid("loaded");
	      opts.onLoadError.apply(_6e1, arguments);
	    });
	    if (_6e4 == false) {
	      $(_6e1).datagrid("loaded");
	    }
	  };
	  function _6e5(_6e6, _6e7) {
	    var opts = $.data(_6e6, "datagrid").options;
	    _6e7.type = _6e7.type || "body";
	    _6e7.rowspan = _6e7.rowspan || 1;
	    _6e7.colspan = _6e7.colspan || 1;
	    if (_6e7.rowspan == 1 && _6e7.colspan == 1) {
	      return;
	    }
	    var tr = opts.finder.getTr(_6e6, _6e7.index != undefined ? _6e7.index : _6e7.id, _6e7.type);
	    if (!tr.length) {
	      return;
	    }
	    var td = tr.find("td[field=\"" + _6e7.field + "\"]");
	    td.attr("rowspan", _6e7.rowspan).attr("colspan", _6e7.colspan);
	    td.addClass("datagrid-td-merged");
	    _6e8(td.next(), _6e7.colspan - 1);
	    for (var i = 1; i < _6e7.rowspan; i++) {
	      tr = tr.next();
	      if (!tr.length) {
	        break;
	      }
	      td = tr.find("td[field=\"" + _6e7.field + "\"]");
	      _6e8(td, _6e7.colspan);
	    }
	    _636(_6e6);
	    function _6e8(td, _6e9) {
	      for (var i = 0; i < _6e9; i++) {
	        td.hide();
	        td = td.next();
	      }
	    };
	  };
	  $.fn.datagrid = function (_6ea, _6eb) {
	    if (typeof _6ea == "string") {
	      return $.fn.datagrid.methods[_6ea](this, _6eb);
	    }
	    _6ea = _6ea || {};
	    return this.each(function () {
	      var _6ec = $.data(this, "datagrid");
	      var opts;
	      if (_6ec) {
	        opts = $.extend(_6ec.options, _6ea);
	        _6ec.options = opts;
	      } else {
	        opts = $.extend({}, $.extend({}, $.fn.datagrid.defaults, { queryParams: {} }), $.fn.datagrid.parseOptions(this), _6ea);
	        $(this).css("width", "").css("height", "");
	        var _6ed = _5c3(this, opts.rownumbers);
	        if (!opts.columns) {
	          opts.columns = _6ed.columns;
	        }
	        if (!opts.frozenColumns) {
	          opts.frozenColumns = _6ed.frozenColumns;
	        }
	        opts.columns = $.extend(true, [], opts.columns);
	        opts.frozenColumns = $.extend(true, [], opts.frozenColumns);
	        opts.view = $.extend({}, opts.view);
	        $.data(this, "datagrid", { options: opts, panel: _6ed.panel, dc: _6ed.dc, ss: null, selectedRows: [], checkedRows: [], data: { total: 0, rows: [] }, originalRows: [], updatedRows: [], insertedRows: [], deletedRows: [] });
	      }
	      _5cc(this);
	      _5e1(this);
	      _599(this);
	      if (opts.data) {
	        _612(this, opts.data);
	        _6cd(this);
	      } else {
	        var data = $.fn.datagrid.parseData(this);
	        if (data.total > 0) {
	          _612(this, data);
	          _6cd(this);
	        } else {
	          opts.view.renderEmptyRow(this);
	        }
	      }
	      _611(this);
	    });
	  };
	  function _6ee(_6ef) {
	    var _6f0 = {};
	    $.map(_6ef, function (name) {
	      _6f0[name] = _6f1(name);
	    });
	    return _6f0;
	    function _6f1(name) {
	      function isA(_6f2) {
	        return $.data($(_6f2)[0], name) != undefined;
	      };
	      return { init: function init(_6f3, _6f4) {
	          var _6f5 = $("<input type=\"text\" class=\"datagrid-editable-input\">").appendTo(_6f3);
	          if (_6f5[name] && name != "text") {
	            return _6f5[name](_6f4);
	          } else {
	            return _6f5;
	          }
	        }, destroy: function destroy(_6f6) {
	          if (isA(_6f6, name)) {
	            $(_6f6)[name]("destroy");
	          }
	        }, getValue: function getValue(_6f7) {
	          if (isA(_6f7, name)) {
	            var opts = $(_6f7)[name]("options");
	            if (opts.multiple) {
	              return $(_6f7)[name]("getValues").join(opts.separator);
	            } else {
	              return $(_6f7)[name]("getValue");
	            }
	          } else {
	            return $(_6f7).val();
	          }
	        }, setValue: function setValue(_6f8, _6f9) {
	          if (isA(_6f8, name)) {
	            var opts = $(_6f8)[name]("options");
	            if (opts.multiple) {
	              if (_6f9) {
	                $(_6f8)[name]("setValues", _6f9.split(opts.separator));
	              } else {
	                $(_6f8)[name]("clear");
	              }
	            } else {
	              $(_6f8)[name]("setValue", _6f9);
	            }
	          } else {
	            $(_6f8).val(_6f9);
	          }
	        }, resize: function resize(_6fa, _6fb) {
	          if (isA(_6fa, name)) {
	            $(_6fa)[name]("resize", _6fb);
	          } else {
	            $(_6fa)._outerWidth(_6fb)._outerHeight(22);
	          }
	        } };
	    };
	  };
	  var _6fc = $.extend({}, _6ee(["text", "textbox", "numberbox", "numberspinner", "combobox", "combotree", "combogrid", "datebox", "datetimebox", "timespinner", "datetimespinner"]), { textarea: { init: function init(_6fd, _6fe) {
	        var _6ff = $("<textarea class=\"datagrid-editable-input\"></textarea>").appendTo(_6fd);
	        return _6ff;
	      }, getValue: function getValue(_700) {
	        return $(_700).val();
	      }, setValue: function setValue(_701, _702) {
	        $(_701).val(_702);
	      }, resize: function resize(_703, _704) {
	        $(_703)._outerWidth(_704);
	      } }, checkbox: { init: function init(_705, _706) {
	        var _707 = $("<input type=\"checkbox\">").appendTo(_705);
	        _707.val(_706.on);
	        _707.attr("offval", _706.off);
	        return _707;
	      }, getValue: function getValue(_708) {
	        if ($(_708).is(":checked")) {
	          return $(_708).val();
	        } else {
	          return $(_708).attr("offval");
	        }
	      }, setValue: function setValue(_709, _70a) {
	        var _70b = false;
	        if ($(_709).val() == _70a) {
	          _70b = true;
	        }
	        $(_709)._propAttr("checked", _70b);
	      } }, validatebox: { init: function init(_70c, _70d) {
	        var _70e = $("<input type=\"text\" class=\"datagrid-editable-input\">").appendTo(_70c);
	        _70e.validatebox(_70d);
	        return _70e;
	      }, destroy: function destroy(_70f) {
	        $(_70f).validatebox("destroy");
	      }, getValue: function getValue(_710) {
	        return $(_710).val();
	      }, setValue: function setValue(_711, _712) {
	        $(_711).val(_712);
	      }, resize: function resize(_713, _714) {
	        $(_713)._outerWidth(_714)._outerHeight(22);
	      } } });
	  $.fn.datagrid.methods = { options: function options(jq) {
	      var _715 = $.data(jq[0], "datagrid").options;
	      var _716 = $.data(jq[0], "datagrid").panel.panel("options");
	      var opts = $.extend(_715, { width: _716.width, height: _716.height, closed: _716.closed, collapsed: _716.collapsed, minimized: _716.minimized, maximized: _716.maximized });
	      return opts;
	    }, setSelectionState: function setSelectionState(jq) {
	      return jq.each(function () {
	        _652(this);
	      });
	    }, createStyleSheet: function createStyleSheet(jq) {
	      return _58a(jq[0]);
	    }, getPanel: function getPanel(jq) {
	      return $.data(jq[0], "datagrid").panel;
	    }, getPager: function getPager(jq) {
	      return $.data(jq[0], "datagrid").panel.children("div.datagrid-pager");
	    }, getColumnFields: function getColumnFields(jq, _717) {
	      return _5df(jq[0], _717);
	    }, getColumnOption: function getColumnOption(jq, _718) {
	      return _5e0(jq[0], _718);
	    }, resize: function resize(jq, _719) {
	      return jq.each(function () {
	        _599(this, _719);
	      });
	    }, load: function load(jq, _71a) {
	      return jq.each(function () {
	        var opts = $(this).datagrid("options");
	        if (typeof _71a == "string") {
	          opts.url = _71a;
	          _71a = null;
	        }
	        opts.pageNumber = 1;
	        var _71b = $(this).datagrid("getPager");
	        _71b.pagination("refresh", { pageNumber: 1 });
	        _611(this, _71a);
	      });
	    }, reload: function reload(jq, _71c) {
	      return jq.each(function () {
	        var opts = $(this).datagrid("options");
	        if (typeof _71c == "string") {
	          opts.url = _71c;
	          _71c = null;
	        }
	        _611(this, _71c);
	      });
	    }, reloadFooter: function reloadFooter(jq, _71d) {
	      return jq.each(function () {
	        var opts = $.data(this, "datagrid").options;
	        var dc = $.data(this, "datagrid").dc;
	        if (_71d) {
	          $.data(this, "datagrid").footer = _71d;
	        }
	        if (opts.showFooter) {
	          opts.view.renderFooter.call(opts.view, this, dc.footer2, false);
	          opts.view.renderFooter.call(opts.view, this, dc.footer1, true);
	          if (opts.view.onAfterRender) {
	            opts.view.onAfterRender.call(opts.view, this);
	          }
	          $(this).datagrid("fixRowHeight");
	        }
	      });
	    }, loading: function loading(jq) {
	      return jq.each(function () {
	        var opts = $.data(this, "datagrid").options;
	        $(this).datagrid("getPager").pagination("loading");
	        if (opts.loadMsg) {
	          var _71e = $(this).datagrid("getPanel");
	          if (!_71e.children("div.datagrid-mask").length) {
	            $("<div class=\"datagrid-mask\" style=\"display:block\"></div>").appendTo(_71e);
	            var msg = $("<div class=\"datagrid-mask-msg\" style=\"display:block;left:50%\"></div>").html(opts.loadMsg).appendTo(_71e);
	            msg._outerHeight(40);
	            msg.css({ marginLeft: -msg.outerWidth() / 2, lineHeight: msg.height() + "px" });
	          }
	        }
	      });
	    }, loaded: function loaded(jq) {
	      return jq.each(function () {
	        $(this).datagrid("getPager").pagination("loaded");
	        var _71f = $(this).datagrid("getPanel");
	        _71f.children("div.datagrid-mask-msg").remove();
	        _71f.children("div.datagrid-mask").remove();
	      });
	    }, fitColumns: function fitColumns(jq) {
	      return jq.each(function () {
	        _613(this);
	      });
	    }, fixColumnSize: function fixColumnSize(jq, _720) {
	      return jq.each(function () {
	        _631(this, _720);
	      });
	    }, fixRowHeight: function fixRowHeight(jq, _721) {
	      return jq.each(function () {
	        _5af(this, _721);
	      });
	    }, freezeRow: function freezeRow(jq, _722) {
	      return jq.each(function () {
	        _5bc(this, _722);
	      });
	    }, autoSizeColumn: function autoSizeColumn(jq, _723) {
	      return jq.each(function () {
	        _625(this, _723);
	      });
	    }, loadData: function loadData(jq, data) {
	      return jq.each(function () {
	        _612(this, data);
	        _6cd(this);
	      });
	    }, getData: function getData(jq) {
	      return $.data(jq[0], "datagrid").data;
	    }, getRows: function getRows(jq) {
	      return $.data(jq[0], "datagrid").data.rows;
	    }, getFooterRows: function getFooterRows(jq) {
	      return $.data(jq[0], "datagrid").footer;
	    }, getRowIndex: function getRowIndex(jq, id) {
	      return _65a(jq[0], id);
	    }, getChecked: function getChecked(jq) {
	      return _660(jq[0]);
	    }, getSelected: function getSelected(jq) {
	      var rows = _65d(jq[0]);
	      return rows.length > 0 ? rows[0] : null;
	    }, getSelections: function getSelections(jq) {
	      return _65d(jq[0]);
	    }, clearSelections: function clearSelections(jq) {
	      return jq.each(function () {
	        var _724 = $.data(this, "datagrid");
	        var _725 = _724.selectedRows;
	        var _726 = _724.checkedRows;
	        _725.splice(0, _725.length);
	        _671(this);
	        if (_724.options.checkOnSelect) {
	          _726.splice(0, _726.length);
	        }
	      });
	    }, clearChecked: function clearChecked(jq) {
	      return jq.each(function () {
	        var _727 = $.data(this, "datagrid");
	        var _728 = _727.selectedRows;
	        var _729 = _727.checkedRows;
	        _729.splice(0, _729.length);
	        _681(this);
	        if (_727.options.selectOnCheck) {
	          _728.splice(0, _728.length);
	        }
	      });
	    }, scrollTo: function scrollTo(jq, _72a) {
	      return jq.each(function () {
	        _663(this, _72a);
	      });
	    }, highlightRow: function highlightRow(jq, _72b) {
	      return jq.each(function () {
	        _5f4(this, _72b);
	        _663(this, _72b);
	      });
	    }, selectAll: function selectAll(jq) {
	      return jq.each(function () {
	        _676(this);
	      });
	    }, unselectAll: function unselectAll(jq) {
	      return jq.each(function () {
	        _671(this);
	      });
	    }, selectRow: function selectRow(jq, _72c) {
	      return jq.each(function () {
	        _5fb(this, _72c);
	      });
	    }, selectRecord: function selectRecord(jq, id) {
	      return jq.each(function () {
	        var opts = $.data(this, "datagrid").options;
	        if (opts.idField) {
	          var _72d = _65a(this, id);
	          if (_72d >= 0) {
	            $(this).datagrid("selectRow", _72d);
	          }
	        }
	      });
	    }, unselectRow: function unselectRow(jq, _72e) {
	      return jq.each(function () {
	        _5fc(this, _72e);
	      });
	    }, checkRow: function checkRow(jq, _72f) {
	      return jq.each(function () {
	        _5f8(this, _72f);
	      });
	    }, uncheckRow: function uncheckRow(jq, _730) {
	      return jq.each(function () {
	        _5f9(this, _730);
	      });
	    }, checkAll: function checkAll(jq) {
	      return jq.each(function () {
	        _67b(this);
	      });
	    }, uncheckAll: function uncheckAll(jq) {
	      return jq.each(function () {
	        _681(this);
	      });
	    }, beginEdit: function beginEdit(jq, _731) {
	      return jq.each(function () {
	        _692(this, _731);
	      });
	    }, endEdit: function endEdit(jq, _732) {
	      return jq.each(function () {
	        _698(this, _732, false);
	      });
	    }, cancelEdit: function cancelEdit(jq, _733) {
	      return jq.each(function () {
	        _698(this, _733, true);
	      });
	    }, getEditors: function getEditors(jq, _734) {
	      return _6a5(jq[0], _734);
	    }, getEditor: function getEditor(jq, _735) {
	      return _6a9(jq[0], _735);
	    }, refreshRow: function refreshRow(jq, _736) {
	      return jq.each(function () {
	        var opts = $.data(this, "datagrid").options;
	        opts.view.refreshRow.call(opts.view, this, _736);
	      });
	    }, validateRow: function validateRow(jq, _737) {
	      return _697(jq[0], _737);
	    }, updateRow: function updateRow(jq, _738) {
	      return jq.each(function () {
	        var opts = $.data(this, "datagrid").options;
	        opts.view.updateRow.call(opts.view, this, _738.index, _738.row);
	      });
	    }, appendRow: function appendRow(jq, row) {
	      return jq.each(function () {
	        _6ca(this, row);
	      });
	    }, insertRow: function insertRow(jq, _739) {
	      return jq.each(function () {
	        _6c6(this, _739);
	      });
	    }, deleteRow: function deleteRow(jq, _73a) {
	      return jq.each(function () {
	        _6c0(this, _73a);
	      });
	    }, getChanges: function getChanges(jq, _73b) {
	      return _6ba(jq[0], _73b);
	    }, acceptChanges: function acceptChanges(jq) {
	      return jq.each(function () {
	        _6d1(this);
	      });
	    }, rejectChanges: function rejectChanges(jq) {
	      return jq.each(function () {
	        _6d3(this);
	      });
	    }, mergeCells: function mergeCells(jq, _73c) {
	      return jq.each(function () {
	        _6e5(this, _73c);
	      });
	    }, showColumn: function showColumn(jq, _73d) {
	      return jq.each(function () {
	        var _73e = $(this).datagrid("getPanel");
	        _73e.find("td[field=\"" + _73d + "\"]").show();
	        $(this).datagrid("getColumnOption", _73d).hidden = false;
	        $(this).datagrid("fitColumns");
	      });
	    }, hideColumn: function hideColumn(jq, _73f) {
	      return jq.each(function () {
	        var _740 = $(this).datagrid("getPanel");
	        _740.find("td[field=\"" + _73f + "\"]").hide();
	        $(this).datagrid("getColumnOption", _73f).hidden = true;
	        $(this).datagrid("fitColumns");
	      });
	    }, sort: function sort(jq, _741) {
	      return jq.each(function () {
	        _606(this, _741);
	      });
	    } };
	  $.fn.datagrid.parseOptions = function (_742) {
	    var t = $(_742);
	    return $.extend({}, $.fn.panel.parseOptions(_742), $.parser.parseOptions(_742, ["url", "toolbar", "idField", "sortName", "sortOrder", "pagePosition", "resizeHandle", { sharedStyleSheet: "boolean", fitColumns: "boolean", autoRowHeight: "boolean", striped: "boolean", nowrap: "boolean" }, { rownumbers: "boolean", singleSelect: "boolean", ctrlSelect: "boolean", checkOnSelect: "boolean", selectOnCheck: "boolean" }, { pagination: "boolean", pageSize: "number", pageNumber: "number" }, { multiSort: "boolean", remoteSort: "boolean", showHeader: "boolean", showFooter: "boolean" }, { scrollbarSize: "number" }]), { pageList: t.attr("pageList") ? eval(t.attr("pageList")) : undefined, loadMsg: t.attr("loadMsg") != undefined ? t.attr("loadMsg") : undefined, rowStyler: t.attr("rowStyler") ? eval(t.attr("rowStyler")) : undefined });
	  };
	  $.fn.datagrid.parseData = function (_743) {
	    var t = $(_743);
	    var data = { total: 0, rows: [] };
	    var _744 = t.datagrid("getColumnFields", true).concat(t.datagrid("getColumnFields", false));
	    t.find("tbody tr").each(function () {
	      data.total++;
	      var row = {};
	      $.extend(row, $.parser.parseOptions(this, ["iconCls", "state"]));
	      for (var i = 0; i < _744.length; i++) {
	        row[_744[i]] = $(this).find("td:eq(" + i + ")").html();
	      }
	      data.rows.push(row);
	    });
	    return data;
	  };
	  var _745 = { render: function render(_746, _747, _748) {
	      var rows = $(_746).datagrid("getRows");
	      $(_747).html(this.renderTable(_746, 0, rows, _748));
	    }, renderFooter: function renderFooter(_749, _74a, _74b) {
	      var opts = $.data(_749, "datagrid").options;
	      var rows = $.data(_749, "datagrid").footer || [];
	      var _74c = $(_749).datagrid("getColumnFields", _74b);
	      var _74d = ["<table class=\"datagrid-ftable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
	      for (var i = 0; i < rows.length; i++) {
	        _74d.push("<tr class=\"datagrid-row\" datagrid-row-index=\"" + i + "\">");
	        _74d.push(this.renderRow.call(this, _749, _74c, _74b, i, rows[i]));
	        _74d.push("</tr>");
	      }
	      _74d.push("</tbody></table>");
	      $(_74a).html(_74d.join(""));
	    }, renderTable: function renderTable(_74e, _74f, rows, _750) {
	      var _751 = $.data(_74e, "datagrid");
	      var opts = _751.options;
	      if (_750) {
	        if (!(opts.rownumbers || opts.frozenColumns && opts.frozenColumns.length)) {
	          return "";
	        }
	      }
	      var _752 = $(_74e).datagrid("getColumnFields", _750);
	      var _753 = ["<table class=\"datagrid-btable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
	      for (var i = 0; i < rows.length; i++) {
	        var row = rows[i];
	        var css = opts.rowStyler ? opts.rowStyler.call(_74e, _74f, row) : "";
	        var _754 = "";
	        var _755 = "";
	        if (typeof css == "string") {
	          _755 = css;
	        } else {
	          if (css) {
	            _754 = css["class"] || "";
	            _755 = css["style"] || "";
	          }
	        }
	        var cls = "class=\"datagrid-row " + (_74f % 2 && opts.striped ? "datagrid-row-alt " : " ") + _754 + "\"";
	        var _756 = _755 ? "style=\"" + _755 + "\"" : "";
	        var _757 = _751.rowIdPrefix + "-" + (_750 ? 1 : 2) + "-" + _74f;
	        _753.push("<tr id=\"" + _757 + "\" datagrid-row-index=\"" + _74f + "\" " + cls + " " + _756 + ">");
	        _753.push(this.renderRow.call(this, _74e, _752, _750, _74f, row));
	        _753.push("</tr>");
	        _74f++;
	      }
	      _753.push("</tbody></table>");
	      return _753.join("");
	    }, renderRow: function renderRow(_758, _759, _75a, _75b, _75c) {
	      var opts = $.data(_758, "datagrid").options;
	      var cc = [];
	      if (_75a && opts.rownumbers) {
	        var _75d = _75b + 1;
	        if (opts.pagination) {
	          _75d += (opts.pageNumber - 1) * opts.pageSize;
	        }
	        cc.push("<td class=\"datagrid-td-rownumber\"><div class=\"datagrid-cell-rownumber\">" + _75d + "</div></td>");
	      }
	      for (var i = 0; i < _759.length; i++) {
	        var _75e = _759[i];
	        var col = $(_758).datagrid("getColumnOption", _75e);
	        if (col) {
	          var _75f = _75c[_75e];
	          var css = col.styler ? col.styler(_75f, _75c, _75b) || "" : "";
	          var _760 = "";
	          var _761 = "";
	          if (typeof css == "string") {
	            _761 = css;
	          } else {
	            if (css) {
	              _760 = css["class"] || "";
	              _761 = css["style"] || "";
	            }
	          }
	          var cls = _760 ? "class=\"" + _760 + "\"" : "";
	          var _762 = col.hidden ? "style=\"display:none;" + _761 + "\"" : _761 ? "style=\"" + _761 + "\"" : "";
	          cc.push("<td field=\"" + _75e + "\" " + cls + " " + _762 + ">");
	          var _762 = "";
	          if (!col.checkbox) {
	            if (col.align) {
	              _762 += "text-align:" + col.align + ";";
	            }
	            if (!opts.nowrap) {
	              _762 += "white-space:normal;height:auto;";
	            } else {
	              if (opts.autoRowHeight) {
	                _762 += "height:auto;";
	              }
	            }
	          }
	          cc.push("<div style=\"" + _762 + "\" ");
	          cc.push(col.checkbox ? "class=\"datagrid-cell-check\"" : "class=\"datagrid-cell " + col.cellClass + "\"");
	          cc.push(">");
	          if (col.checkbox) {
	            cc.push("<input type=\"checkbox\" " + (_75c.checked ? "checked=\"checked\"" : ""));
	            cc.push(" name=\"" + _75e + "\" value=\"" + (_75f != undefined ? _75f : "") + "\">");
	          } else {
	            if (col.formatter) {
	              cc.push(col.formatter(_75f, _75c, _75b));
	            } else {
	              cc.push(_75f);
	            }
	          }
	          cc.push("</div>");
	          cc.push("</td>");
	        }
	      }
	      return cc.join("");
	    }, refreshRow: function refreshRow(_763, _764) {
	      this.updateRow.call(this, _763, _764, {});
	    }, updateRow: function updateRow(_765, _766, row) {
	      var opts = $.data(_765, "datagrid").options;
	      var rows = $(_765).datagrid("getRows");
	      var _767 = _768(_766);
	      $.extend(rows[_766], row);
	      var _769 = _768(_766);
	      var _76a = _767.c;
	      var _76b = _769.s;
	      var _76c = "datagrid-row " + (_766 % 2 && opts.striped ? "datagrid-row-alt " : " ") + _769.c;
	      function _768(_76d) {
	        var css = opts.rowStyler ? opts.rowStyler.call(_765, _76d, rows[_76d]) : "";
	        var _76e = "";
	        var _76f = "";
	        if (typeof css == "string") {
	          _76f = css;
	        } else {
	          if (css) {
	            _76e = css["class"] || "";
	            _76f = css["style"] || "";
	          }
	        }
	        return { c: _76e, s: _76f };
	      };
	      function _770(_771) {
	        var _772 = $(_765).datagrid("getColumnFields", _771);
	        var tr = opts.finder.getTr(_765, _766, "body", _771 ? 1 : 2);
	        var _773 = tr.find("div.datagrid-cell-check input[type=checkbox]").is(":checked");
	        tr.html(this.renderRow.call(this, _765, _772, _771, _766, rows[_766]));
	        tr.attr("style", _76b).removeClass(_76a).addClass(_76c);
	        if (_773) {
	          tr.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", true);
	        }
	      };
	      _770.call(this, true);
	      _770.call(this, false);
	      $(_765).datagrid("fixRowHeight", _766);
	    }, insertRow: function insertRow(_774, _775, row) {
	      var _776 = $.data(_774, "datagrid");
	      var opts = _776.options;
	      var dc = _776.dc;
	      var data = _776.data;
	      if (_775 == undefined || _775 == null) {
	        _775 = data.rows.length;
	      }
	      if (_775 > data.rows.length) {
	        _775 = data.rows.length;
	      }
	      function _777(_778) {
	        var _779 = _778 ? 1 : 2;
	        for (var i = data.rows.length - 1; i >= _775; i--) {
	          var tr = opts.finder.getTr(_774, i, "body", _779);
	          tr.attr("datagrid-row-index", i + 1);
	          tr.attr("id", _776.rowIdPrefix + "-" + _779 + "-" + (i + 1));
	          if (_778 && opts.rownumbers) {
	            var _77a = i + 2;
	            if (opts.pagination) {
	              _77a += (opts.pageNumber - 1) * opts.pageSize;
	            }
	            tr.find("div.datagrid-cell-rownumber").html(_77a);
	          }
	          if (opts.striped) {
	            tr.removeClass("datagrid-row-alt").addClass((i + 1) % 2 ? "datagrid-row-alt" : "");
	          }
	        }
	      };
	      function _77b(_77c) {
	        var _77d = _77c ? 1 : 2;
	        var _77e = $(_774).datagrid("getColumnFields", _77c);
	        var _77f = _776.rowIdPrefix + "-" + _77d + "-" + _775;
	        var tr = "<tr id=\"" + _77f + "\" class=\"datagrid-row\" datagrid-row-index=\"" + _775 + "\"></tr>";
	        if (_775 >= data.rows.length) {
	          if (data.rows.length) {
	            opts.finder.getTr(_774, "", "last", _77d).after(tr);
	          } else {
	            var cc = _77c ? dc.body1 : dc.body2;
	            cc.html("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>" + tr + "</tbody></table>");
	          }
	        } else {
	          opts.finder.getTr(_774, _775 + 1, "body", _77d).before(tr);
	        }
	      };
	      _777.call(this, true);
	      _777.call(this, false);
	      _77b.call(this, true);
	      _77b.call(this, false);
	      data.total += 1;
	      data.rows.splice(_775, 0, row);
	      this.refreshRow.call(this, _774, _775);
	    }, deleteRow: function deleteRow(_780, _781) {
	      var _782 = $.data(_780, "datagrid");
	      var opts = _782.options;
	      var data = _782.data;
	      function _783(_784) {
	        var _785 = _784 ? 1 : 2;
	        for (var i = _781 + 1; i < data.rows.length; i++) {
	          var tr = opts.finder.getTr(_780, i, "body", _785);
	          tr.attr("datagrid-row-index", i - 1);
	          tr.attr("id", _782.rowIdPrefix + "-" + _785 + "-" + (i - 1));
	          if (_784 && opts.rownumbers) {
	            var _786 = i;
	            if (opts.pagination) {
	              _786 += (opts.pageNumber - 1) * opts.pageSize;
	            }
	            tr.find("div.datagrid-cell-rownumber").html(_786);
	          }
	          if (opts.striped) {
	            tr.removeClass("datagrid-row-alt").addClass((i - 1) % 2 ? "datagrid-row-alt" : "");
	          }
	        }
	      };
	      opts.finder.getTr(_780, _781).remove();
	      _783.call(this, true);
	      _783.call(this, false);
	      data.total -= 1;
	      data.rows.splice(_781, 1);
	    }, onBeforeRender: function onBeforeRender(_787, rows) {}, onAfterRender: function onAfterRender(_788) {
	      var _789 = $.data(_788, "datagrid");
	      var opts = _789.options;
	      if (opts.showFooter) {
	        var _78a = $(_788).datagrid("getPanel").find("div.datagrid-footer");
	        _78a.find("div.datagrid-cell-rownumber,div.datagrid-cell-check").css("visibility", "hidden");
	      }
	      if (opts.finder.getRows(_788).length == 0) {
	        this.renderEmptyRow(_788);
	      }
	    }, renderEmptyRow: function renderEmptyRow(_78b) {
	      var dc = $.data(_78b, "datagrid").dc;
	      dc.body2.html(this.renderTable(_78b, 0, [{}], false));
	      dc.body2.find(".datagrid-row").removeClass("datagrid-row").removeAttr("datagrid-row-index");
	      dc.body2.find("tbody *").css({ height: 1, borderColor: "transparent", background: "transparent" });
	    } };
	  $.fn.datagrid.defaults = $.extend({}, $.fn.panel.defaults, { sharedStyleSheet: false, frozenColumns: undefined, columns: undefined, fitColumns: false, resizeHandle: "right", autoRowHeight: true, toolbar: null, striped: false, method: "post", nowrap: true, idField: null, url: null, data: null, loadMsg: "Processing, please wait ...", rownumbers: false, singleSelect: false, ctrlSelect: false, selectOnCheck: true, checkOnSelect: true, pagination: false, pagePosition: "bottom", pageNumber: 1, pageSize: 10, pageList: [10, 20, 30, 40, 50], queryParams: {}, sortName: null, sortOrder: "asc", multiSort: false, remoteSort: true, showHeader: true, showFooter: false, scrollbarSize: 18, rowEvents: { mouseover: _5ed(true), mouseout: _5ed(false), click: _5f5, dblclick: _5ff, contextmenu: _603 }, rowStyler: function rowStyler(_78c, _78d) {}, loader: function loader(_78e, _78f, _790) {
	      var opts = $(this).datagrid("options");
	      if (!opts.url) {
	        return false;
	      }
	      $.ajax({ type: opts.method, url: opts.url, data: _78e, dataType: "json", success: function success(data) {
	          _78f(data);
	        }, error: function error() {
	          _790.apply(this, arguments);
	        } });
	    }, loadFilter: function loadFilter(data) {
	      if (typeof data.length == "number" && typeof data.splice == "function") {
	        return { total: data.length, rows: data };
	      } else {
	        return data;
	      }
	    }, editors: _6fc, finder: { getTr: function getTr(_791, _792, type, _793) {
	        type = type || "body";
	        _793 = _793 || 0;
	        var _794 = $.data(_791, "datagrid");
	        var dc = _794.dc;
	        var opts = _794.options;
	        if (_793 == 0) {
	          var tr1 = opts.finder.getTr(_791, _792, type, 1);
	          var tr2 = opts.finder.getTr(_791, _792, type, 2);
	          return tr1.add(tr2);
	        } else {
	          if (type == "body") {
	            var tr = $("#" + _794.rowIdPrefix + "-" + _793 + "-" + _792);
	            if (!tr.length) {
	              tr = (_793 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr[datagrid-row-index=" + _792 + "]");
	            }
	            return tr;
	          } else {
	            if (type == "footer") {
	              return (_793 == 1 ? dc.footer1 : dc.footer2).find(">table>tbody>tr[datagrid-row-index=" + _792 + "]");
	            } else {
	              if (type == "selected") {
	                return (_793 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-selected");
	              } else {
	                if (type == "highlight") {
	                  return (_793 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-over");
	                } else {
	                  if (type == "checked") {
	                    return (_793 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-checked");
	                  } else {
	                    if (type == "editing") {
	                      return (_793 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-editing");
	                    } else {
	                      if (type == "last") {
	                        return (_793 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr[datagrid-row-index]:last");
	                      } else {
	                        if (type == "allbody") {
	                          return (_793 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr[datagrid-row-index]");
	                        } else {
	                          if (type == "allfooter") {
	                            return (_793 == 1 ? dc.footer1 : dc.footer2).find(">table>tbody>tr[datagrid-row-index]");
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }, getRow: function getRow(_795, p) {
	        var _796 = (typeof p === "undefined" ? "undefined" : _typeof(p)) == "object" ? p.attr("datagrid-row-index") : p;
	        return $.data(_795, "datagrid").data.rows[parseInt(_796)];
	      }, getRows: function getRows(_797) {
	        return $(_797).datagrid("getRows");
	      } }, view: _745, onBeforeLoad: function onBeforeLoad(_798) {}, onLoadSuccess: function onLoadSuccess() {}, onLoadError: function onLoadError() {}, onClickRow: function onClickRow(_799, _79a) {}, onDblClickRow: function onDblClickRow(_79b, _79c) {}, onClickCell: function onClickCell(_79d, _79e, _79f) {}, onDblClickCell: function onDblClickCell(_7a0, _7a1, _7a2) {}, onBeforeSortColumn: function onBeforeSortColumn(sort, _7a3) {}, onSortColumn: function onSortColumn(sort, _7a4) {}, onResizeColumn: function onResizeColumn(_7a5, _7a6) {}, onBeforeSelect: function onBeforeSelect(_7a7, _7a8) {}, onSelect: function onSelect(_7a9, _7aa) {}, onBeforeUnselect: function onBeforeUnselect(_7ab, _7ac) {}, onUnselect: function onUnselect(_7ad, _7ae) {}, onSelectAll: function onSelectAll(rows) {}, onUnselectAll: function onUnselectAll(rows) {}, onBeforeCheck: function onBeforeCheck(_7af, _7b0) {}, onCheck: function onCheck(_7b1, _7b2) {}, onBeforeUncheck: function onBeforeUncheck(_7b3, _7b4) {}, onUncheck: function onUncheck(_7b5, _7b6) {}, onCheckAll: function onCheckAll(rows) {}, onUncheckAll: function onUncheckAll(rows) {}, onBeforeEdit: function onBeforeEdit(_7b7, _7b8) {}, onBeginEdit: function onBeginEdit(_7b9, _7ba) {}, onEndEdit: function onEndEdit(_7bb, _7bc, _7bd) {}, onAfterEdit: function onAfterEdit(_7be, _7bf, _7c0) {}, onCancelEdit: function onCancelEdit(_7c1, _7c2) {}, onHeaderContextMenu: function onHeaderContextMenu(e, _7c3) {}, onRowContextMenu: function onRowContextMenu(e, _7c4, _7c5) {} });
	})(jQuery);
	(function ($) {
	  var _7c6;
	  $(document).unbind(".propertygrid").bind("mousedown.propertygrid", function (e) {
	    var p = $(e.target).closest("div.datagrid-view,div.combo-panel");
	    if (p.length) {
	      return;
	    }
	    _7c7(_7c6);
	    _7c6 = undefined;
	  });
	  function _7c8(_7c9) {
	    var _7ca = $.data(_7c9, "propertygrid");
	    var opts = $.data(_7c9, "propertygrid").options;
	    $(_7c9).datagrid($.extend({}, opts, { cls: "propertygrid", view: opts.showGroup ? opts.groupView : opts.view, onBeforeEdit: function onBeforeEdit(_7cb, row) {
	        if (opts.onBeforeEdit.call(_7c9, _7cb, row) == false) {
	          return false;
	        }
	        var dg = $(this);
	        var row = dg.datagrid("getRows")[_7cb];
	        var col = dg.datagrid("getColumnOption", "value");
	        col.editor = row.editor;
	      }, onClickCell: function onClickCell(_7cc, _7cd, _7ce) {
	        if (_7c6 != this) {
	          _7c7(_7c6);
	          _7c6 = this;
	        }
	        if (opts.editIndex != _7cc) {
	          _7c7(_7c6);
	          $(this).datagrid("beginEdit", _7cc);
	          var ed = $(this).datagrid("getEditor", { index: _7cc, field: _7cd });
	          if (!ed) {
	            ed = $(this).datagrid("getEditor", { index: _7cc, field: "value" });
	          }
	          if (ed) {
	            var t = $(ed.target);
	            var _7cf = t.data("textbox") ? t.textbox("textbox") : t;
	            _7cf.focus();
	            opts.editIndex = _7cc;
	          }
	        }
	        opts.onClickCell.call(_7c9, _7cc, _7cd, _7ce);
	      }, loadFilter: function loadFilter(data) {
	        _7c7(this);
	        return opts.loadFilter.call(this, data);
	      } }));
	  };
	  function _7c7(_7d0) {
	    var t = $(_7d0);
	    if (!t.length) {
	      return;
	    }
	    var opts = $.data(_7d0, "propertygrid").options;
	    opts.finder.getTr(_7d0, null, "editing").each(function () {
	      var _7d1 = parseInt($(this).attr("datagrid-row-index"));
	      if (t.datagrid("validateRow", _7d1)) {
	        t.datagrid("endEdit", _7d1);
	      } else {
	        t.datagrid("cancelEdit", _7d1);
	      }
	    });
	    opts.editIndex = undefined;
	  };
	  $.fn.propertygrid = function (_7d2, _7d3) {
	    if (typeof _7d2 == "string") {
	      var _7d4 = $.fn.propertygrid.methods[_7d2];
	      if (_7d4) {
	        return _7d4(this, _7d3);
	      } else {
	        return this.datagrid(_7d2, _7d3);
	      }
	    }
	    _7d2 = _7d2 || {};
	    return this.each(function () {
	      var _7d5 = $.data(this, "propertygrid");
	      if (_7d5) {
	        $.extend(_7d5.options, _7d2);
	      } else {
	        var opts = $.extend({}, $.fn.propertygrid.defaults, $.fn.propertygrid.parseOptions(this), _7d2);
	        opts.frozenColumns = $.extend(true, [], opts.frozenColumns);
	        opts.columns = $.extend(true, [], opts.columns);
	        $.data(this, "propertygrid", { options: opts });
	      }
	      _7c8(this);
	    });
	  };
	  $.fn.propertygrid.methods = { options: function options(jq) {
	      return $.data(jq[0], "propertygrid").options;
	    } };
	  $.fn.propertygrid.parseOptions = function (_7d6) {
	    return $.extend({}, $.fn.datagrid.parseOptions(_7d6), $.parser.parseOptions(_7d6, [{ showGroup: "boolean" }]));
	  };
	  var _7d7 = $.extend({}, $.fn.datagrid.defaults.view, { render: function render(_7d8, _7d9, _7da) {
	      var _7db = [];
	      var _7dc = this.groups;
	      for (var i = 0; i < _7dc.length; i++) {
	        _7db.push(this.renderGroup.call(this, _7d8, i, _7dc[i], _7da));
	      }
	      $(_7d9).html(_7db.join(""));
	    }, renderGroup: function renderGroup(_7dd, _7de, _7df, _7e0) {
	      var _7e1 = $.data(_7dd, "datagrid");
	      var opts = _7e1.options;
	      var _7e2 = $(_7dd).datagrid("getColumnFields", _7e0);
	      var _7e3 = [];
	      _7e3.push("<div class=\"datagrid-group\" group-index=" + _7de + ">");
	      _7e3.push("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"height:100%\"><tbody>");
	      _7e3.push("<tr>");
	      if (_7e0 && (opts.rownumbers || opts.frozenColumns.length) || !_7e0 && !(opts.rownumbers || opts.frozenColumns.length)) {
	        _7e3.push("<td style=\"border:0;text-align:center;width:25px\"><span class=\"datagrid-row-expander datagrid-row-collapse\" style=\"display:inline-block;width:16px;height:16px;cursor:pointer\">&nbsp;</span></td>");
	      }
	      _7e3.push("<td style=\"border:0;\">");
	      if (!_7e0) {
	        _7e3.push("<span class=\"datagrid-group-title\">");
	        _7e3.push(opts.groupFormatter.call(_7dd, _7df.value, _7df.rows));
	        _7e3.push("</span>");
	      }
	      _7e3.push("</td>");
	      _7e3.push("</tr>");
	      _7e3.push("</tbody></table>");
	      _7e3.push("</div>");
	      _7e3.push("<table class=\"datagrid-btable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>");
	      var _7e4 = _7df.startIndex;
	      for (var j = 0; j < _7df.rows.length; j++) {
	        var css = opts.rowStyler ? opts.rowStyler.call(_7dd, _7e4, _7df.rows[j]) : "";
	        var _7e5 = "";
	        var _7e6 = "";
	        if (typeof css == "string") {
	          _7e6 = css;
	        } else {
	          if (css) {
	            _7e5 = css["class"] || "";
	            _7e6 = css["style"] || "";
	          }
	        }
	        var cls = "class=\"datagrid-row " + (_7e4 % 2 && opts.striped ? "datagrid-row-alt " : " ") + _7e5 + "\"";
	        var _7e7 = _7e6 ? "style=\"" + _7e6 + "\"" : "";
	        var _7e8 = _7e1.rowIdPrefix + "-" + (_7e0 ? 1 : 2) + "-" + _7e4;
	        _7e3.push("<tr id=\"" + _7e8 + "\" datagrid-row-index=\"" + _7e4 + "\" " + cls + " " + _7e7 + ">");
	        _7e3.push(this.renderRow.call(this, _7dd, _7e2, _7e0, _7e4, _7df.rows[j]));
	        _7e3.push("</tr>");
	        _7e4++;
	      }
	      _7e3.push("</tbody></table>");
	      return _7e3.join("");
	    }, bindEvents: function bindEvents(_7e9) {
	      var _7ea = $.data(_7e9, "datagrid");
	      var dc = _7ea.dc;
	      var body = dc.body1.add(dc.body2);
	      var _7eb = ($.data(body[0], "events") || $._data(body[0], "events")).click[0].handler;
	      body.unbind("click").bind("click", function (e) {
	        var tt = $(e.target);
	        var _7ec = tt.closest("span.datagrid-row-expander");
	        if (_7ec.length) {
	          var _7ed = _7ec.closest("div.datagrid-group").attr("group-index");
	          if (_7ec.hasClass("datagrid-row-collapse")) {
	            $(_7e9).datagrid("collapseGroup", _7ed);
	          } else {
	            $(_7e9).datagrid("expandGroup", _7ed);
	          }
	        } else {
	          _7eb(e);
	        }
	        e.stopPropagation();
	      });
	    }, onBeforeRender: function onBeforeRender(_7ee, rows) {
	      var _7ef = $.data(_7ee, "datagrid");
	      var opts = _7ef.options;
	      _7f0();
	      var _7f1 = [];
	      for (var i = 0; i < rows.length; i++) {
	        var row = rows[i];
	        var _7f2 = _7f3(row[opts.groupField]);
	        if (!_7f2) {
	          _7f2 = { value: row[opts.groupField], rows: [row] };
	          _7f1.push(_7f2);
	        } else {
	          _7f2.rows.push(row);
	        }
	      }
	      var _7f4 = 0;
	      var _7f5 = [];
	      for (var i = 0; i < _7f1.length; i++) {
	        var _7f2 = _7f1[i];
	        _7f2.startIndex = _7f4;
	        _7f4 += _7f2.rows.length;
	        _7f5 = _7f5.concat(_7f2.rows);
	      }
	      _7ef.data.rows = _7f5;
	      this.groups = _7f1;
	      var that = this;
	      setTimeout(function () {
	        that.bindEvents(_7ee);
	      }, 0);
	      function _7f3(_7f6) {
	        for (var i = 0; i < _7f1.length; i++) {
	          var _7f7 = _7f1[i];
	          if (_7f7.value == _7f6) {
	            return _7f7;
	          }
	        }
	        return null;
	      };
	      function _7f0() {
	        if (!$("#datagrid-group-style").length) {
	          $("head").append("<style id=\"datagrid-group-style\">" + ".datagrid-group{height:25px;overflow:hidden;font-weight:bold;border-bottom:1px solid #ccc;}" + "</style>");
	        }
	      };
	    } });
	  $.extend($.fn.datagrid.methods, { expandGroup: function expandGroup(jq, _7f8) {
	      return jq.each(function () {
	        var view = $.data(this, "datagrid").dc.view;
	        var _7f9 = view.find(_7f8 != undefined ? "div.datagrid-group[group-index=\"" + _7f8 + "\"]" : "div.datagrid-group");
	        var _7fa = _7f9.find("span.datagrid-row-expander");
	        if (_7fa.hasClass("datagrid-row-expand")) {
	          _7fa.removeClass("datagrid-row-expand").addClass("datagrid-row-collapse");
	          _7f9.next("table").show();
	        }
	        $(this).datagrid("fixRowHeight");
	      });
	    }, collapseGroup: function collapseGroup(jq, _7fb) {
	      return jq.each(function () {
	        var view = $.data(this, "datagrid").dc.view;
	        var _7fc = view.find(_7fb != undefined ? "div.datagrid-group[group-index=\"" + _7fb + "\"]" : "div.datagrid-group");
	        var _7fd = _7fc.find("span.datagrid-row-expander");
	        if (_7fd.hasClass("datagrid-row-collapse")) {
	          _7fd.removeClass("datagrid-row-collapse").addClass("datagrid-row-expand");
	          _7fc.next("table").hide();
	        }
	        $(this).datagrid("fixRowHeight");
	      });
	    } });
	  $.extend(_7d7, { refreshGroupTitle: function refreshGroupTitle(_7fe, _7ff) {
	      var _800 = $.data(_7fe, "datagrid");
	      var opts = _800.options;
	      var dc = _800.dc;
	      var _801 = this.groups[_7ff];
	      var span = dc.body2.children("div.datagrid-group[group-index=" + _7ff + "]").find("span.datagrid-group-title");
	      span.html(opts.groupFormatter.call(_7fe, _801.value, _801.rows));
	    }, insertRow: function insertRow(_802, _803, row) {
	      var _804 = $.data(_802, "datagrid");
	      var opts = _804.options;
	      var dc = _804.dc;
	      var _805 = null;
	      var _806;
	      for (var i = 0; i < this.groups.length; i++) {
	        if (this.groups[i].value == row[opts.groupField]) {
	          _805 = this.groups[i];
	          _806 = i;
	          break;
	        }
	      }
	      if (_805) {
	        if (_803 == undefined || _803 == null) {
	          _803 = _804.data.rows.length;
	        }
	        if (_803 < _805.startIndex) {
	          _803 = _805.startIndex;
	        } else {
	          if (_803 > _805.startIndex + _805.rows.length) {
	            _803 = _805.startIndex + _805.rows.length;
	          }
	        }
	        $.fn.datagrid.defaults.view.insertRow.call(this, _802, _803, row);
	        if (_803 >= _805.startIndex + _805.rows.length) {
	          _807(_803, true);
	          _807(_803, false);
	        }
	        _805.rows.splice(_803 - _805.startIndex, 0, row);
	      } else {
	        _805 = { value: row[opts.groupField], rows: [row], startIndex: _804.data.rows.length };
	        _806 = this.groups.length;
	        dc.body1.append(this.renderGroup.call(this, _802, _806, _805, true));
	        dc.body2.append(this.renderGroup.call(this, _802, _806, _805, false));
	        this.groups.push(_805);
	        _804.data.rows.push(row);
	      }
	      this.refreshGroupTitle(_802, _806);
	      function _807(_808, _809) {
	        var _80a = _809 ? 1 : 2;
	        var _80b = opts.finder.getTr(_802, _808 - 1, "body", _80a);
	        var tr = opts.finder.getTr(_802, _808, "body", _80a);
	        tr.insertAfter(_80b);
	      };
	    }, updateRow: function updateRow(_80c, _80d, row) {
	      var opts = $.data(_80c, "datagrid").options;
	      $.fn.datagrid.defaults.view.updateRow.call(this, _80c, _80d, row);
	      var tb = opts.finder.getTr(_80c, _80d, "body", 2).closest("table.datagrid-btable");
	      var _80e = parseInt(tb.prev().attr("group-index"));
	      this.refreshGroupTitle(_80c, _80e);
	    }, deleteRow: function deleteRow(_80f, _810) {
	      var _811 = $.data(_80f, "datagrid");
	      var opts = _811.options;
	      var dc = _811.dc;
	      var body = dc.body1.add(dc.body2);
	      var tb = opts.finder.getTr(_80f, _810, "body", 2).closest("table.datagrid-btable");
	      var _812 = parseInt(tb.prev().attr("group-index"));
	      $.fn.datagrid.defaults.view.deleteRow.call(this, _80f, _810);
	      var _813 = this.groups[_812];
	      if (_813.rows.length > 1) {
	        _813.rows.splice(_810 - _813.startIndex, 1);
	        this.refreshGroupTitle(_80f, _812);
	      } else {
	        body.children("div.datagrid-group[group-index=" + _812 + "]").remove();
	        for (var i = _812 + 1; i < this.groups.length; i++) {
	          body.children("div.datagrid-group[group-index=" + i + "]").attr("group-index", i - 1);
	        }
	        this.groups.splice(_812, 1);
	      }
	      var _810 = 0;
	      for (var i = 0; i < this.groups.length; i++) {
	        var _813 = this.groups[i];
	        _813.startIndex = _810;
	        _810 += _813.rows.length;
	      }
	    } });
	  $.fn.propertygrid.defaults = $.extend({}, $.fn.datagrid.defaults, { singleSelect: true, remoteSort: false, fitColumns: true, loadMsg: "", frozenColumns: [[{ field: "f", width: 16, resizable: false }]], columns: [[{ field: "name", title: "Name", width: 100, sortable: true }, { field: "value", title: "Value", width: 100, resizable: false }]], showGroup: false, groupView: _7d7, groupField: "group", groupFormatter: function groupFormatter(_814, rows) {
	      return _814;
	    } });
	})(jQuery);
	(function ($) {
	  function _815(_816) {
	    var _817 = $.data(_816, "treegrid");
	    var opts = _817.options;
	    $(_816).datagrid($.extend({}, opts, { url: null, data: null, loader: function loader() {
	        return false;
	      }, onBeforeLoad: function onBeforeLoad() {
	        return false;
	      }, onLoadSuccess: function onLoadSuccess() {}, onResizeColumn: function onResizeColumn(_818, _819) {
	        _826(_816);
	        opts.onResizeColumn.call(_816, _818, _819);
	      }, onBeforeSortColumn: function onBeforeSortColumn(sort, _81a) {
	        if (opts.onBeforeSortColumn.call(_816, sort, _81a) == false) {
	          return false;
	        }
	      }, onSortColumn: function onSortColumn(sort, _81b) {
	        opts.sortName = sort;
	        opts.sortOrder = _81b;
	        if (opts.remoteSort) {
	          _825(_816);
	        } else {
	          var data = $(_816).treegrid("getData");
	          _83c(_816, 0, data);
	        }
	        opts.onSortColumn.call(_816, sort, _81b);
	      }, onClickCell: function onClickCell(_81c, _81d) {
	        opts.onClickCell.call(_816, _81d, _find(_816, _81c));
	      }, onDblClickCell: function onDblClickCell(_81e, _81f) {
	        opts.onDblClickCell.call(_816, _81f, _find(_816, _81e));
	      }, onRowContextMenu: function onRowContextMenu(e, _820) {
	        opts.onContextMenu.call(_816, e, _find(_816, _820));
	      } }));
	    var _821 = $.data(_816, "datagrid").options;
	    opts.columns = _821.columns;
	    opts.frozenColumns = _821.frozenColumns;
	    _817.dc = $.data(_816, "datagrid").dc;
	    if (opts.pagination) {
	      var _822 = $(_816).datagrid("getPager");
	      _822.pagination({ pageNumber: opts.pageNumber, pageSize: opts.pageSize, pageList: opts.pageList, onSelectPage: function onSelectPage(_823, _824) {
	          opts.pageNumber = _823;
	          opts.pageSize = _824;
	          _825(_816);
	        } });
	      opts.pageSize = _822.pagination("options").pageSize;
	    }
	  };
	  function _826(_827, _828) {
	    var opts = $.data(_827, "datagrid").options;
	    var dc = $.data(_827, "datagrid").dc;
	    if (!dc.body1.is(":empty") && (!opts.nowrap || opts.autoRowHeight)) {
	      if (_828 != undefined) {
	        var _829 = _82a(_827, _828);
	        for (var i = 0; i < _829.length; i++) {
	          _82b(_829[i][opts.idField]);
	        }
	      }
	    }
	    $(_827).datagrid("fixRowHeight", _828);
	    function _82b(_82c) {
	      var tr1 = opts.finder.getTr(_827, _82c, "body", 1);
	      var tr2 = opts.finder.getTr(_827, _82c, "body", 2);
	      tr1.css("height", "");
	      tr2.css("height", "");
	      var _82d = Math.max(tr1.height(), tr2.height());
	      tr1.css("height", _82d);
	      tr2.css("height", _82d);
	    };
	  };
	  function _82e(_82f) {
	    var dc = $.data(_82f, "datagrid").dc;
	    var opts = $.data(_82f, "treegrid").options;
	    if (!opts.rownumbers) {
	      return;
	    }
	    dc.body1.find("div.datagrid-cell-rownumber").each(function (i) {
	      $(this).html(i + 1);
	    });
	  };
	  function _830(_831) {
	    return function (e) {
	      $.fn.datagrid.defaults.rowEvents[_831 ? "mouseover" : "mouseout"](e);
	      var tt = $(e.target);
	      var fn = _831 ? "addClass" : "removeClass";
	      if (tt.hasClass("tree-hit")) {
	        tt.hasClass("tree-expanded") ? tt[fn]("tree-expanded-hover") : tt[fn]("tree-collapsed-hover");
	      }
	    };
	  };
	  function _832(e) {
	    var tt = $(e.target);
	    if (tt.hasClass("tree-hit")) {
	      var tr = tt.closest("tr.datagrid-row");
	      var _833 = tr.closest("div.datagrid-view").children(".datagrid-f")[0];
	      _834(_833, tr.attr("node-id"));
	    } else {
	      $.fn.datagrid.defaults.rowEvents.click(e);
	    }
	  };
	  function _835(_836, _837) {
	    var opts = $.data(_836, "treegrid").options;
	    var tr1 = opts.finder.getTr(_836, _837, "body", 1);
	    var tr2 = opts.finder.getTr(_836, _837, "body", 2);
	    var _838 = $(_836).datagrid("getColumnFields", true).length + (opts.rownumbers ? 1 : 0);
	    var _839 = $(_836).datagrid("getColumnFields", false).length;
	    _83a(tr1, _838);
	    _83a(tr2, _839);
	    function _83a(tr, _83b) {
	      $("<tr class=\"treegrid-tr-tree\">" + "<td style=\"border:0px\" colspan=\"" + _83b + "\">" + "<div></div>" + "</td>" + "</tr>").insertAfter(tr);
	    };
	  };
	  function _83c(_83d, _83e, data, _83f) {
	    var _840 = $.data(_83d, "treegrid");
	    var opts = _840.options;
	    var dc = _840.dc;
	    data = opts.loadFilter.call(_83d, data, _83e);
	    var node = _find(_83d, _83e);
	    if (node) {
	      var _841 = opts.finder.getTr(_83d, _83e, "body", 1);
	      var _842 = opts.finder.getTr(_83d, _83e, "body", 2);
	      var cc1 = _841.next("tr.treegrid-tr-tree").children("td").children("div");
	      var cc2 = _842.next("tr.treegrid-tr-tree").children("td").children("div");
	      if (!_83f) {
	        node.children = [];
	      }
	    } else {
	      var cc1 = dc.body1;
	      var cc2 = dc.body2;
	      if (!_83f) {
	        _840.data = [];
	      }
	    }
	    if (!_83f) {
	      cc1.empty();
	      cc2.empty();
	    }
	    if (opts.view.onBeforeRender) {
	      opts.view.onBeforeRender.call(opts.view, _83d, _83e, data);
	    }
	    opts.view.render.call(opts.view, _83d, cc1, true);
	    opts.view.render.call(opts.view, _83d, cc2, false);
	    if (opts.showFooter) {
	      opts.view.renderFooter.call(opts.view, _83d, dc.footer1, true);
	      opts.view.renderFooter.call(opts.view, _83d, dc.footer2, false);
	    }
	    if (opts.view.onAfterRender) {
	      opts.view.onAfterRender.call(opts.view, _83d);
	    }
	    if (!_83e && opts.pagination) {
	      var _843 = $.data(_83d, "treegrid").total;
	      var _844 = $(_83d).datagrid("getPager");
	      if (_844.pagination("options").total != _843) {
	        _844.pagination({ total: _843 });
	      }
	    }
	    _826(_83d);
	    _82e(_83d);
	    $(_83d).treegrid("showLines");
	    $(_83d).treegrid("setSelectionState");
	    $(_83d).treegrid("autoSizeColumn");
	    opts.onLoadSuccess.call(_83d, node, data);
	  };
	  function _825(_845, _846, _847, _848, _849) {
	    var opts = $.data(_845, "treegrid").options;
	    var body = $(_845).datagrid("getPanel").find("div.datagrid-body");
	    if (_847) {
	      opts.queryParams = _847;
	    }
	    var _84a = $.extend({}, opts.queryParams);
	    if (opts.pagination) {
	      $.extend(_84a, { page: opts.pageNumber, rows: opts.pageSize });
	    }
	    if (opts.sortName) {
	      $.extend(_84a, { sort: opts.sortName, order: opts.sortOrder });
	    }
	    var row = _find(_845, _846);
	    if (opts.onBeforeLoad.call(_845, row, _84a) == false) {
	      return;
	    }
	    var _84b = body.find("tr[node-id=\"" + _846 + "\"] span.tree-folder");
	    _84b.addClass("tree-loading");
	    $(_845).treegrid("loading");
	    var _84c = opts.loader.call(_845, _84a, function (data) {
	      _84b.removeClass("tree-loading");
	      $(_845).treegrid("loaded");
	      _83c(_845, _846, data, _848);
	      if (_849) {
	        _849();
	      }
	    }, function () {
	      _84b.removeClass("tree-loading");
	      $(_845).treegrid("loaded");
	      opts.onLoadError.apply(_845, arguments);
	      if (_849) {
	        _849();
	      }
	    });
	    if (_84c == false) {
	      _84b.removeClass("tree-loading");
	      $(_845).treegrid("loaded");
	    }
	  };
	  function _84d(_84e) {
	    var rows = _84f(_84e);
	    if (rows.length) {
	      return rows[0];
	    } else {
	      return null;
	    }
	  };
	  function _84f(_850) {
	    return $.data(_850, "treegrid").data;
	  };
	  function _851(_852, _853) {
	    var row = _find(_852, _853);
	    if (row._parentId) {
	      return _find(_852, row._parentId);
	    } else {
	      return null;
	    }
	  };
	  function _82a(_854, _855) {
	    var opts = $.data(_854, "treegrid").options;
	    var body = $(_854).datagrid("getPanel").find("div.datagrid-view2 div.datagrid-body");
	    var _856 = [];
	    if (_855) {
	      _857(_855);
	    } else {
	      var _858 = _84f(_854);
	      for (var i = 0; i < _858.length; i++) {
	        _856.push(_858[i]);
	        _857(_858[i][opts.idField]);
	      }
	    }
	    function _857(_859) {
	      var _85a = _find(_854, _859);
	      if (_85a && _85a.children) {
	        for (var i = 0, len = _85a.children.length; i < len; i++) {
	          var _85b = _85a.children[i];
	          _856.push(_85b);
	          _857(_85b[opts.idField]);
	        }
	      }
	    };
	    return _856;
	  };
	  function _85c(_85d, _85e) {
	    if (!_85e) {
	      return 0;
	    }
	    var opts = $.data(_85d, "treegrid").options;
	    var view = $(_85d).datagrid("getPanel").children("div.datagrid-view");
	    var node = view.find("div.datagrid-body tr[node-id=\"" + _85e + "\"]").children("td[field=\"" + opts.treeField + "\"]");
	    return node.find("span.tree-indent,span.tree-hit").length;
	  };
	  function _find(_85f, _860) {
	    var opts = $.data(_85f, "treegrid").options;
	    var data = $.data(_85f, "treegrid").data;
	    var cc = [data];
	    while (cc.length) {
	      var c = cc.shift();
	      for (var i = 0; i < c.length; i++) {
	        var node = c[i];
	        if (node[opts.idField] == _860) {
	          return node;
	        } else {
	          if (node["children"]) {
	            cc.push(node["children"]);
	          }
	        }
	      }
	    }
	    return null;
	  };
	  function _861(_862, _863) {
	    var opts = $.data(_862, "treegrid").options;
	    var row = _find(_862, _863);
	    var tr = opts.finder.getTr(_862, _863);
	    var hit = tr.find("span.tree-hit");
	    if (hit.length == 0) {
	      return;
	    }
	    if (hit.hasClass("tree-collapsed")) {
	      return;
	    }
	    if (opts.onBeforeCollapse.call(_862, row) == false) {
	      return;
	    }
	    hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
	    hit.next().removeClass("tree-folder-open");
	    row.state = "closed";
	    tr = tr.next("tr.treegrid-tr-tree");
	    var cc = tr.children("td").children("div");
	    if (opts.animate) {
	      cc.slideUp("normal", function () {
	        $(_862).treegrid("autoSizeColumn");
	        _826(_862, _863);
	        opts.onCollapse.call(_862, row);
	      });
	    } else {
	      cc.hide();
	      $(_862).treegrid("autoSizeColumn");
	      _826(_862, _863);
	      opts.onCollapse.call(_862, row);
	    }
	  };
	  function _864(_865, _866) {
	    var opts = $.data(_865, "treegrid").options;
	    var tr = opts.finder.getTr(_865, _866);
	    var hit = tr.find("span.tree-hit");
	    var row = _find(_865, _866);
	    if (hit.length == 0) {
	      return;
	    }
	    if (hit.hasClass("tree-expanded")) {
	      return;
	    }
	    if (opts.onBeforeExpand.call(_865, row) == false) {
	      return;
	    }
	    hit.removeClass("tree-collapsed tree-collapsed-hover").addClass("tree-expanded");
	    hit.next().addClass("tree-folder-open");
	    var _867 = tr.next("tr.treegrid-tr-tree");
	    if (_867.length) {
	      var cc = _867.children("td").children("div");
	      _868(cc);
	    } else {
	      _835(_865, row[opts.idField]);
	      var _867 = tr.next("tr.treegrid-tr-tree");
	      var cc = _867.children("td").children("div");
	      cc.hide();
	      var _869 = $.extend({}, opts.queryParams || {});
	      _869.id = row[opts.idField];
	      _825(_865, row[opts.idField], _869, true, function () {
	        if (cc.is(":empty")) {
	          _867.remove();
	        } else {
	          _868(cc);
	        }
	      });
	    }
	    function _868(cc) {
	      row.state = "open";
	      if (opts.animate) {
	        cc.slideDown("normal", function () {
	          $(_865).treegrid("autoSizeColumn");
	          _826(_865, _866);
	          opts.onExpand.call(_865, row);
	        });
	      } else {
	        cc.show();
	        $(_865).treegrid("autoSizeColumn");
	        _826(_865, _866);
	        opts.onExpand.call(_865, row);
	      }
	    };
	  };
	  function _834(_86a, _86b) {
	    var opts = $.data(_86a, "treegrid").options;
	    var tr = opts.finder.getTr(_86a, _86b);
	    var hit = tr.find("span.tree-hit");
	    if (hit.hasClass("tree-expanded")) {
	      _861(_86a, _86b);
	    } else {
	      _864(_86a, _86b);
	    }
	  };
	  function _86c(_86d, _86e) {
	    var opts = $.data(_86d, "treegrid").options;
	    var _86f = _82a(_86d, _86e);
	    if (_86e) {
	      _86f.unshift(_find(_86d, _86e));
	    }
	    for (var i = 0; i < _86f.length; i++) {
	      _861(_86d, _86f[i][opts.idField]);
	    }
	  };
	  function _870(_871, _872) {
	    var opts = $.data(_871, "treegrid").options;
	    var _873 = _82a(_871, _872);
	    if (_872) {
	      _873.unshift(_find(_871, _872));
	    }
	    for (var i = 0; i < _873.length; i++) {
	      _864(_871, _873[i][opts.idField]);
	    }
	  };
	  function _874(_875, _876) {
	    var opts = $.data(_875, "treegrid").options;
	    var ids = [];
	    var p = _851(_875, _876);
	    while (p) {
	      var id = p[opts.idField];
	      ids.unshift(id);
	      p = _851(_875, id);
	    }
	    for (var i = 0; i < ids.length; i++) {
	      _864(_875, ids[i]);
	    }
	  };
	  function _877(_878, _879) {
	    var opts = $.data(_878, "treegrid").options;
	    if (_879.parent) {
	      var tr = opts.finder.getTr(_878, _879.parent);
	      if (tr.next("tr.treegrid-tr-tree").length == 0) {
	        _835(_878, _879.parent);
	      }
	      var cell = tr.children("td[field=\"" + opts.treeField + "\"]").children("div.datagrid-cell");
	      var _87a = cell.children("span.tree-icon");
	      if (_87a.hasClass("tree-file")) {
	        _87a.removeClass("tree-file").addClass("tree-folder tree-folder-open");
	        var hit = $("<span class=\"tree-hit tree-expanded\"></span>").insertBefore(_87a);
	        if (hit.prev().length) {
	          hit.prev().remove();
	        }
	      }
	    }
	    _83c(_878, _879.parent, _879.data, true);
	  };
	  function _87b(_87c, _87d) {
	    var ref = _87d.before || _87d.after;
	    var opts = $.data(_87c, "treegrid").options;
	    var _87e = _851(_87c, ref);
	    _877(_87c, { parent: _87e ? _87e[opts.idField] : null, data: [_87d.data] });
	    var _87f = _87e ? _87e.children : $(_87c).treegrid("getRoots");
	    for (var i = 0; i < _87f.length; i++) {
	      if (_87f[i][opts.idField] == ref) {
	        var _880 = _87f[_87f.length - 1];
	        _87f.splice(_87d.before ? i : i + 1, 0, _880);
	        _87f.splice(_87f.length - 1, 1);
	        break;
	      }
	    }
	    _881(true);
	    _881(false);
	    _82e(_87c);
	    $(_87c).treegrid("showLines");
	    function _881(_882) {
	      var _883 = _882 ? 1 : 2;
	      var tr = opts.finder.getTr(_87c, _87d.data[opts.idField], "body", _883);
	      var _884 = tr.closest("table.datagrid-btable");
	      tr = tr.parent().children();
	      var dest = opts.finder.getTr(_87c, ref, "body", _883);
	      if (_87d.before) {
	        tr.insertBefore(dest);
	      } else {
	        var sub = dest.next("tr.treegrid-tr-tree");
	        tr.insertAfter(sub.length ? sub : dest);
	      }
	      _884.remove();
	    };
	  };
	  function _885(_886, _887) {
	    var _888 = $.data(_886, "treegrid");
	    $(_886).datagrid("deleteRow", _887);
	    _82e(_886);
	    _888.total -= 1;
	    $(_886).datagrid("getPager").pagination("refresh", { total: _888.total });
	    $(_886).treegrid("showLines");
	  };
	  function _889(_88a) {
	    var t = $(_88a);
	    var opts = t.treegrid("options");
	    if (opts.lines) {
	      t.treegrid("getPanel").addClass("tree-lines");
	    } else {
	      t.treegrid("getPanel").removeClass("tree-lines");
	      return;
	    }
	    t.treegrid("getPanel").find("span.tree-indent").removeClass("tree-line tree-join tree-joinbottom");
	    t.treegrid("getPanel").find("div.datagrid-cell").removeClass("tree-node-last tree-root-first tree-root-one");
	    var _88b = t.treegrid("getRoots");
	    if (_88b.length > 1) {
	      _88c(_88b[0]).addClass("tree-root-first");
	    } else {
	      if (_88b.length == 1) {
	        _88c(_88b[0]).addClass("tree-root-one");
	      }
	    }
	    _88d(_88b);
	    _88e(_88b);
	    function _88d(_88f) {
	      $.map(_88f, function (node) {
	        if (node.children && node.children.length) {
	          _88d(node.children);
	        } else {
	          var cell = _88c(node);
	          cell.find(".tree-icon").prev().addClass("tree-join");
	        }
	      });
	      if (_88f.length) {
	        var cell = _88c(_88f[_88f.length - 1]);
	        cell.addClass("tree-node-last");
	        cell.find(".tree-join").removeClass("tree-join").addClass("tree-joinbottom");
	      }
	    };
	    function _88e(_890) {
	      $.map(_890, function (node) {
	        if (node.children && node.children.length) {
	          _88e(node.children);
	        }
	      });
	      for (var i = 0; i < _890.length - 1; i++) {
	        var node = _890[i];
	        var _891 = t.treegrid("getLevel", node[opts.idField]);
	        var tr = opts.finder.getTr(_88a, node[opts.idField]);
	        var cc = tr.next().find("tr.datagrid-row td[field=\"" + opts.treeField + "\"] div.datagrid-cell");
	        cc.find("span:eq(" + (_891 - 1) + ")").addClass("tree-line");
	      }
	    };
	    function _88c(node) {
	      var tr = opts.finder.getTr(_88a, node[opts.idField]);
	      var cell = tr.find("td[field=\"" + opts.treeField + "\"] div.datagrid-cell");
	      return cell;
	    };
	  };
	  $.fn.treegrid = function (_892, _893) {
	    if (typeof _892 == "string") {
	      var _894 = $.fn.treegrid.methods[_892];
	      if (_894) {
	        return _894(this, _893);
	      } else {
	        return this.datagrid(_892, _893);
	      }
	    }
	    _892 = _892 || {};
	    return this.each(function () {
	      var _895 = $.data(this, "treegrid");
	      if (_895) {
	        $.extend(_895.options, _892);
	      } else {
	        _895 = $.data(this, "treegrid", { options: $.extend({}, $.fn.treegrid.defaults, $.fn.treegrid.parseOptions(this), _892), data: [] });
	      }
	      _815(this);
	      if (_895.options.data) {
	        $(this).treegrid("loadData", _895.options.data);
	      }
	      _825(this);
	    });
	  };
	  $.fn.treegrid.methods = { options: function options(jq) {
	      return $.data(jq[0], "treegrid").options;
	    }, resize: function resize(jq, _896) {
	      return jq.each(function () {
	        $(this).datagrid("resize", _896);
	      });
	    }, fixRowHeight: function fixRowHeight(jq, _897) {
	      return jq.each(function () {
	        _826(this, _897);
	      });
	    }, loadData: function loadData(jq, data) {
	      return jq.each(function () {
	        _83c(this, data.parent, data);
	      });
	    }, load: function load(jq, _898) {
	      return jq.each(function () {
	        $(this).treegrid("options").pageNumber = 1;
	        $(this).treegrid("getPager").pagination({ pageNumber: 1 });
	        $(this).treegrid("reload", _898);
	      });
	    }, reload: function reload(jq, id) {
	      return jq.each(function () {
	        var opts = $(this).treegrid("options");
	        var _899 = {};
	        if ((typeof id === "undefined" ? "undefined" : _typeof(id)) == "object") {
	          _899 = id;
	        } else {
	          _899 = $.extend({}, opts.queryParams);
	          _899.id = id;
	        }
	        if (_899.id) {
	          var node = $(this).treegrid("find", _899.id);
	          if (node.children) {
	            node.children.splice(0, node.children.length);
	          }
	          opts.queryParams = _899;
	          var tr = opts.finder.getTr(this, _899.id);
	          tr.next("tr.treegrid-tr-tree").remove();
	          tr.find("span.tree-hit").removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
	          _864(this, _899.id);
	        } else {
	          _825(this, null, _899);
	        }
	      });
	    }, reloadFooter: function reloadFooter(jq, _89a) {
	      return jq.each(function () {
	        var opts = $.data(this, "treegrid").options;
	        var dc = $.data(this, "datagrid").dc;
	        if (_89a) {
	          $.data(this, "treegrid").footer = _89a;
	        }
	        if (opts.showFooter) {
	          opts.view.renderFooter.call(opts.view, this, dc.footer1, true);
	          opts.view.renderFooter.call(opts.view, this, dc.footer2, false);
	          if (opts.view.onAfterRender) {
	            opts.view.onAfterRender.call(opts.view, this);
	          }
	          $(this).treegrid("fixRowHeight");
	        }
	      });
	    }, getData: function getData(jq) {
	      return $.data(jq[0], "treegrid").data;
	    }, getFooterRows: function getFooterRows(jq) {
	      return $.data(jq[0], "treegrid").footer;
	    }, getRoot: function getRoot(jq) {
	      return _84d(jq[0]);
	    }, getRoots: function getRoots(jq) {
	      return _84f(jq[0]);
	    }, getParent: function getParent(jq, id) {
	      return _851(jq[0], id);
	    }, getChildren: function getChildren(jq, id) {
	      return _82a(jq[0], id);
	    }, getLevel: function getLevel(jq, id) {
	      return _85c(jq[0], id);
	    }, find: function find(jq, id) {
	      return _find(jq[0], id);
	    }, isLeaf: function isLeaf(jq, id) {
	      var opts = $.data(jq[0], "treegrid").options;
	      var tr = opts.finder.getTr(jq[0], id);
	      var hit = tr.find("span.tree-hit");
	      return hit.length == 0;
	    }, select: function select(jq, id) {
	      return jq.each(function () {
	        $(this).datagrid("selectRow", id);
	      });
	    }, unselect: function unselect(jq, id) {
	      return jq.each(function () {
	        $(this).datagrid("unselectRow", id);
	      });
	    }, collapse: function collapse(jq, id) {
	      return jq.each(function () {
	        _861(this, id);
	      });
	    }, expand: function expand(jq, id) {
	      return jq.each(function () {
	        _864(this, id);
	      });
	    }, toggle: function toggle(jq, id) {
	      return jq.each(function () {
	        _834(this, id);
	      });
	    }, collapseAll: function collapseAll(jq, id) {
	      return jq.each(function () {
	        _86c(this, id);
	      });
	    }, expandAll: function expandAll(jq, id) {
	      return jq.each(function () {
	        _870(this, id);
	      });
	    }, expandTo: function expandTo(jq, id) {
	      return jq.each(function () {
	        _874(this, id);
	      });
	    }, append: function append(jq, _89b) {
	      return jq.each(function () {
	        _877(this, _89b);
	      });
	    }, insert: function insert(jq, _89c) {
	      return jq.each(function () {
	        _87b(this, _89c);
	      });
	    }, remove: function remove(jq, id) {
	      return jq.each(function () {
	        _885(this, id);
	      });
	    }, pop: function pop(jq, id) {
	      var row = jq.treegrid("find", id);
	      jq.treegrid("remove", id);
	      return row;
	    }, refresh: function refresh(jq, id) {
	      return jq.each(function () {
	        var opts = $.data(this, "treegrid").options;
	        opts.view.refreshRow.call(opts.view, this, id);
	      });
	    }, update: function update(jq, _89d) {
	      return jq.each(function () {
	        var opts = $.data(this, "treegrid").options;
	        opts.view.updateRow.call(opts.view, this, _89d.id, _89d.row);
	      });
	    }, beginEdit: function beginEdit(jq, id) {
	      return jq.each(function () {
	        $(this).datagrid("beginEdit", id);
	        $(this).treegrid("fixRowHeight", id);
	      });
	    }, endEdit: function endEdit(jq, id) {
	      return jq.each(function () {
	        $(this).datagrid("endEdit", id);
	      });
	    }, cancelEdit: function cancelEdit(jq, id) {
	      return jq.each(function () {
	        $(this).datagrid("cancelEdit", id);
	      });
	    }, showLines: function showLines(jq) {
	      return jq.each(function () {
	        _889(this);
	      });
	    } };
	  $.fn.treegrid.parseOptions = function (_89e) {
	    return $.extend({}, $.fn.datagrid.parseOptions(_89e), $.parser.parseOptions(_89e, ["treeField", { animate: "boolean" }]));
	  };
	  var _89f = $.extend({}, $.fn.datagrid.defaults.view, { render: function render(_8a0, _8a1, _8a2) {
	      var opts = $.data(_8a0, "treegrid").options;
	      var _8a3 = $(_8a0).datagrid("getColumnFields", _8a2);
	      var _8a4 = $.data(_8a0, "datagrid").rowIdPrefix;
	      if (_8a2) {
	        if (!(opts.rownumbers || opts.frozenColumns && opts.frozenColumns.length)) {
	          return;
	        }
	      }
	      var view = this;
	      if (this.treeNodes && this.treeNodes.length) {
	        var _8a5 = _8a6(_8a2, this.treeLevel, this.treeNodes);
	        $(_8a1).append(_8a5.join(""));
	      }
	      function _8a6(_8a7, _8a8, _8a9) {
	        var _8aa = $(_8a0).treegrid("getParent", _8a9[0][opts.idField]);
	        var _8ab = (_8aa ? _8aa.children.length : $(_8a0).treegrid("getRoots").length) - _8a9.length;
	        var _8ac = ["<table class=\"datagrid-btable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
	        for (var i = 0; i < _8a9.length; i++) {
	          var row = _8a9[i];
	          if (row.state != "open" && row.state != "closed") {
	            row.state = "open";
	          }
	          var css = opts.rowStyler ? opts.rowStyler.call(_8a0, row) : "";
	          var _8ad = "";
	          var _8ae = "";
	          if (typeof css == "string") {
	            _8ae = css;
	          } else {
	            if (css) {
	              _8ad = css["class"] || "";
	              _8ae = css["style"] || "";
	            }
	          }
	          var cls = "class=\"datagrid-row " + (_8ab++ % 2 && opts.striped ? "datagrid-row-alt " : " ") + _8ad + "\"";
	          var _8af = _8ae ? "style=\"" + _8ae + "\"" : "";
	          var _8b0 = _8a4 + "-" + (_8a7 ? 1 : 2) + "-" + row[opts.idField];
	          _8ac.push("<tr id=\"" + _8b0 + "\" node-id=\"" + row[opts.idField] + "\" " + cls + " " + _8af + ">");
	          _8ac = _8ac.concat(view.renderRow.call(view, _8a0, _8a3, _8a7, _8a8, row));
	          _8ac.push("</tr>");
	          if (row.children && row.children.length) {
	            var tt = _8a6(_8a7, _8a8 + 1, row.children);
	            var v = row.state == "closed" ? "none" : "block";
	            _8ac.push("<tr class=\"treegrid-tr-tree\"><td style=\"border:0px\" colspan=" + (_8a3.length + (opts.rownumbers ? 1 : 0)) + "><div style=\"display:" + v + "\">");
	            _8ac = _8ac.concat(tt);
	            _8ac.push("</div></td></tr>");
	          }
	        }
	        _8ac.push("</tbody></table>");
	        return _8ac;
	      };
	    }, renderFooter: function renderFooter(_8b1, _8b2, _8b3) {
	      var opts = $.data(_8b1, "treegrid").options;
	      var rows = $.data(_8b1, "treegrid").footer || [];
	      var _8b4 = $(_8b1).datagrid("getColumnFields", _8b3);
	      var _8b5 = ["<table class=\"datagrid-ftable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
	      for (var i = 0; i < rows.length; i++) {
	        var row = rows[i];
	        row[opts.idField] = row[opts.idField] || "foot-row-id" + i;
	        _8b5.push("<tr class=\"datagrid-row\" node-id=\"" + row[opts.idField] + "\">");
	        _8b5.push(this.renderRow.call(this, _8b1, _8b4, _8b3, 0, row));
	        _8b5.push("</tr>");
	      }
	      _8b5.push("</tbody></table>");
	      $(_8b2).html(_8b5.join(""));
	    }, renderRow: function renderRow(_8b6, _8b7, _8b8, _8b9, row) {
	      var opts = $.data(_8b6, "treegrid").options;
	      var cc = [];
	      if (_8b8 && opts.rownumbers) {
	        cc.push("<td class=\"datagrid-td-rownumber\"><div class=\"datagrid-cell-rownumber\">0</div></td>");
	      }
	      for (var i = 0; i < _8b7.length; i++) {
	        var _8ba = _8b7[i];
	        var col = $(_8b6).datagrid("getColumnOption", _8ba);
	        if (col) {
	          var css = col.styler ? col.styler(row[_8ba], row) || "" : "";
	          var _8bb = "";
	          var _8bc = "";
	          if (typeof css == "string") {
	            _8bc = css;
	          } else {
	            if (cc) {
	              _8bb = css["class"] || "";
	              _8bc = css["style"] || "";
	            }
	          }
	          var cls = _8bb ? "class=\"" + _8bb + "\"" : "";
	          var _8bd = col.hidden ? "style=\"display:none;" + _8bc + "\"" : _8bc ? "style=\"" + _8bc + "\"" : "";
	          cc.push("<td field=\"" + _8ba + "\" " + cls + " " + _8bd + ">");
	          var _8bd = "";
	          if (!col.checkbox) {
	            if (col.align) {
	              _8bd += "text-align:" + col.align + ";";
	            }
	            if (!opts.nowrap) {
	              _8bd += "white-space:normal;height:auto;";
	            } else {
	              if (opts.autoRowHeight) {
	                _8bd += "height:auto;";
	              }
	            }
	          }
	          cc.push("<div style=\"" + _8bd + "\" ");
	          if (col.checkbox) {
	            cc.push("class=\"datagrid-cell-check ");
	          } else {
	            cc.push("class=\"datagrid-cell " + col.cellClass);
	          }
	          cc.push("\">");
	          if (col.checkbox) {
	            if (row.checked) {
	              cc.push("<input type=\"checkbox\" checked=\"checked\"");
	            } else {
	              cc.push("<input type=\"checkbox\"");
	            }
	            cc.push(" name=\"" + _8ba + "\" value=\"" + (row[_8ba] != undefined ? row[_8ba] : "") + "\">");
	          } else {
	            var val = null;
	            if (col.formatter) {
	              val = col.formatter(row[_8ba], row);
	            } else {
	              val = row[_8ba];
	            }
	            if (_8ba == opts.treeField) {
	              for (var j = 0; j < _8b9; j++) {
	                cc.push("<span class=\"tree-indent\"></span>");
	              }
	              if (row.state == "closed") {
	                cc.push("<span class=\"tree-hit tree-collapsed\"></span>");
	                cc.push("<span class=\"tree-icon tree-folder " + (row.iconCls ? row.iconCls : "") + "\"></span>");
	              } else {
	                if (row.children && row.children.length) {
	                  cc.push("<span class=\"tree-hit tree-expanded\"></span>");
	                  cc.push("<span class=\"tree-icon tree-folder tree-folder-open " + (row.iconCls ? row.iconCls : "") + "\"></span>");
	                } else {
	                  cc.push("<span class=\"tree-indent\"></span>");
	                  cc.push("<span class=\"tree-icon tree-file " + (row.iconCls ? row.iconCls : "") + "\"></span>");
	                }
	              }
	              cc.push("<span class=\"tree-title\">" + val + "</span>");
	            } else {
	              cc.push(val);
	            }
	          }
	          cc.push("</div>");
	          cc.push("</td>");
	        }
	      }
	      return cc.join("");
	    }, refreshRow: function refreshRow(_8be, id) {
	      this.updateRow.call(this, _8be, id, {});
	    }, updateRow: function updateRow(_8bf, id, row) {
	      var opts = $.data(_8bf, "treegrid").options;
	      var _8c0 = $(_8bf).treegrid("find", id);
	      $.extend(_8c0, row);
	      var _8c1 = $(_8bf).treegrid("getLevel", id) - 1;
	      var _8c2 = opts.rowStyler ? opts.rowStyler.call(_8bf, _8c0) : "";
	      var _8c3 = $.data(_8bf, "datagrid").rowIdPrefix;
	      var _8c4 = _8c0[opts.idField];
	      function _8c5(_8c6) {
	        var _8c7 = $(_8bf).treegrid("getColumnFields", _8c6);
	        var tr = opts.finder.getTr(_8bf, id, "body", _8c6 ? 1 : 2);
	        var _8c8 = tr.find("div.datagrid-cell-rownumber").html();
	        var _8c9 = tr.find("div.datagrid-cell-check input[type=checkbox]").is(":checked");
	        tr.html(this.renderRow(_8bf, _8c7, _8c6, _8c1, _8c0));
	        tr.attr("style", _8c2 || "");
	        tr.find("div.datagrid-cell-rownumber").html(_8c8);
	        if (_8c9) {
	          tr.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", true);
	        }
	        if (_8c4 != id) {
	          tr.attr("id", _8c3 + "-" + (_8c6 ? 1 : 2) + "-" + _8c4);
	          tr.attr("node-id", _8c4);
	        }
	      };
	      _8c5.call(this, true);
	      _8c5.call(this, false);
	      $(_8bf).treegrid("fixRowHeight", id);
	    }, deleteRow: function deleteRow(_8ca, id) {
	      var opts = $.data(_8ca, "treegrid").options;
	      var tr = opts.finder.getTr(_8ca, id);
	      tr.next("tr.treegrid-tr-tree").remove();
	      tr.remove();
	      var _8cb = del(id);
	      if (_8cb) {
	        if (_8cb.children.length == 0) {
	          tr = opts.finder.getTr(_8ca, _8cb[opts.idField]);
	          tr.next("tr.treegrid-tr-tree").remove();
	          var cell = tr.children("td[field=\"" + opts.treeField + "\"]").children("div.datagrid-cell");
	          cell.find(".tree-icon").removeClass("tree-folder").addClass("tree-file");
	          cell.find(".tree-hit").remove();
	          $("<span class=\"tree-indent\"></span>").prependTo(cell);
	        }
	      }
	      function del(id) {
	        var cc;
	        var _8cc = $(_8ca).treegrid("getParent", id);
	        if (_8cc) {
	          cc = _8cc.children;
	        } else {
	          cc = $(_8ca).treegrid("getData");
	        }
	        for (var i = 0; i < cc.length; i++) {
	          if (cc[i][opts.idField] == id) {
	            cc.splice(i, 1);
	            break;
	          }
	        }
	        return _8cc;
	      };
	    }, onBeforeRender: function onBeforeRender(_8cd, _8ce, data) {
	      if ($.isArray(_8ce)) {
	        data = { total: _8ce.length, rows: _8ce };
	        _8ce = null;
	      }
	      if (!data) {
	        return false;
	      }
	      var _8cf = $.data(_8cd, "treegrid");
	      var opts = _8cf.options;
	      if (data.length == undefined) {
	        if (data.footer) {
	          _8cf.footer = data.footer;
	        }
	        if (data.total) {
	          _8cf.total = data.total;
	        }
	        data = this.transfer(_8cd, _8ce, data.rows);
	      } else {
	        (function () {
	          var _8d0 = function _8d0(_8d1, _8d2) {
	            for (var i = 0; i < _8d1.length; i++) {
	              var row = _8d1[i];
	              row._parentId = _8d2;
	              if (row.children && row.children.length) {
	                _8d0(row.children, row[opts.idField]);
	              }
	            }
	          };

	          ;
	          _8d0(data, _8ce);
	        })();
	      }
	      var node = _find(_8cd, _8ce);
	      if (node) {
	        if (node.children) {
	          node.children = node.children.concat(data);
	        } else {
	          node.children = data;
	        }
	      } else {
	        _8cf.data = _8cf.data.concat(data);
	      }
	      this.sort(_8cd, data);
	      this.treeNodes = data;
	      this.treeLevel = $(_8cd).treegrid("getLevel", _8ce);
	    }, sort: function sort(_8d3, data) {
	      var opts = $.data(_8d3, "treegrid").options;
	      if (!opts.remoteSort && opts.sortName) {
	        var _8d4 = opts.sortName.split(",");
	        var _8d5 = opts.sortOrder.split(",");
	        _8d6(data);
	      }
	      function _8d6(rows) {
	        rows.sort(function (r1, r2) {
	          var r = 0;
	          for (var i = 0; i < _8d4.length; i++) {
	            var sn = _8d4[i];
	            var so = _8d5[i];
	            var col = $(_8d3).treegrid("getColumnOption", sn);
	            var _8d7 = col.sorter || function (a, b) {
	              return a == b ? 0 : a > b ? 1 : -1;
	            };
	            r = _8d7(r1[sn], r2[sn]) * (so == "asc" ? 1 : -1);
	            if (r != 0) {
	              return r;
	            }
	          }
	          return r;
	        });
	        for (var i = 0; i < rows.length; i++) {
	          var _8d8 = rows[i].children;
	          if (_8d8 && _8d8.length) {
	            _8d6(_8d8);
	          }
	        }
	      };
	    }, transfer: function transfer(_8d9, _8da, data) {
	      var opts = $.data(_8d9, "treegrid").options;
	      var rows = [];
	      for (var i = 0; i < data.length; i++) {
	        rows.push(data[i]);
	      }
	      var _8db = [];
	      for (var i = 0; i < rows.length; i++) {
	        var row = rows[i];
	        if (!_8da) {
	          if (!row._parentId) {
	            _8db.push(row);
	            rows.splice(i, 1);
	            i--;
	          }
	        } else {
	          if (row._parentId == _8da) {
	            _8db.push(row);
	            rows.splice(i, 1);
	            i--;
	          }
	        }
	      }
	      var toDo = [];
	      for (var i = 0; i < _8db.length; i++) {
	        toDo.push(_8db[i]);
	      }
	      while (toDo.length) {
	        var node = toDo.shift();
	        for (var i = 0; i < rows.length; i++) {
	          var row = rows[i];
	          if (row._parentId == node[opts.idField]) {
	            if (node.children) {
	              node.children.push(row);
	            } else {
	              node.children = [row];
	            }
	            toDo.push(row);
	            rows.splice(i, 1);
	            i--;
	          }
	        }
	      }
	      return _8db;
	    } });
	  $.fn.treegrid.defaults = $.extend({}, $.fn.datagrid.defaults, { treeField: null, lines: false, animate: false, singleSelect: true, view: _89f, rowEvents: $.extend({}, $.fn.datagrid.defaults.rowEvents, { mouseover: _830(true), mouseout: _830(false), click: _832 }), loader: function loader(_8dc, _8dd, _8de) {
	      var opts = $(this).treegrid("options");
	      if (!opts.url) {
	        return false;
	      }
	      $.ajax({ type: opts.method, url: opts.url, data: _8dc, dataType: "json", success: function success(data) {
	          _8dd(data);
	        }, error: function error() {
	          _8de.apply(this, arguments);
	        } });
	    }, loadFilter: function loadFilter(data, _8df) {
	      return data;
	    }, finder: { getTr: function getTr(_8e0, id, type, _8e1) {
	        type = type || "body";
	        _8e1 = _8e1 || 0;
	        var dc = $.data(_8e0, "datagrid").dc;
	        if (_8e1 == 0) {
	          var opts = $.data(_8e0, "treegrid").options;
	          var tr1 = opts.finder.getTr(_8e0, id, type, 1);
	          var tr2 = opts.finder.getTr(_8e0, id, type, 2);
	          return tr1.add(tr2);
	        } else {
	          if (type == "body") {
	            var tr = $("#" + $.data(_8e0, "datagrid").rowIdPrefix + "-" + _8e1 + "-" + id);
	            if (!tr.length) {
	              tr = (_8e1 == 1 ? dc.body1 : dc.body2).find("tr[node-id=\"" + id + "\"]");
	            }
	            return tr;
	          } else {
	            if (type == "footer") {
	              return (_8e1 == 1 ? dc.footer1 : dc.footer2).find("tr[node-id=\"" + id + "\"]");
	            } else {
	              if (type == "selected") {
	                return (_8e1 == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-selected");
	              } else {
	                if (type == "highlight") {
	                  return (_8e1 == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-over");
	                } else {
	                  if (type == "checked") {
	                    return (_8e1 == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-checked");
	                  } else {
	                    if (type == "last") {
	                      return (_8e1 == 1 ? dc.body1 : dc.body2).find("tr:last[node-id]");
	                    } else {
	                      if (type == "allbody") {
	                        return (_8e1 == 1 ? dc.body1 : dc.body2).find("tr[node-id]");
	                      } else {
	                        if (type == "allfooter") {
	                          return (_8e1 == 1 ? dc.footer1 : dc.footer2).find("tr[node-id]");
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }, getRow: function getRow(_8e2, p) {
	        var id = (typeof p === "undefined" ? "undefined" : _typeof(p)) == "object" ? p.attr("node-id") : p;
	        return $(_8e2).treegrid("find", id);
	      }, getRows: function getRows(_8e3) {
	        return $(_8e3).treegrid("getChildren");
	      } }, onBeforeLoad: function onBeforeLoad(row, _8e4) {}, onLoadSuccess: function onLoadSuccess(row, data) {}, onLoadError: function onLoadError() {}, onBeforeCollapse: function onBeforeCollapse(row) {}, onCollapse: function onCollapse(row) {}, onBeforeExpand: function onBeforeExpand(row) {}, onExpand: function onExpand(row) {}, onClickRow: function onClickRow(row) {}, onDblClickRow: function onDblClickRow(row) {}, onClickCell: function onClickCell(_8e5, row) {}, onDblClickCell: function onDblClickCell(_8e6, row) {}, onContextMenu: function onContextMenu(e, row) {}, onBeforeEdit: function onBeforeEdit(row) {}, onAfterEdit: function onAfterEdit(row, _8e7) {}, onCancelEdit: function onCancelEdit(row) {} });
	})(jQuery);
	(function ($) {
	  function _8e8(_8e9) {
	    var opts = $.data(_8e9, "datalist").options;
	    $(_8e9).datagrid($.extend({}, opts, { cls: "datalist" + (opts.lines ? " datalist-lines" : ""), frozenColumns: opts.frozenColumns && opts.frozenColumns.length ? opts.frozenColumns : opts.checkbox ? [[{ field: "_ck", checkbox: true }]] : undefined, columns: opts.columns && opts.columns.length ? opts.columns : [[{ field: opts.textField, width: "100%", formatter: function formatter(_8ea, row, _8eb) {
	          return opts.textFormatter ? opts.textFormatter(_8ea, row, _8eb) : _8ea;
	        } }]] }));
	  };
	  var _8ec = $.extend({}, $.fn.datagrid.defaults.view, { render: function render(_8ed, _8ee, _8ef) {
	      var _8f0 = $.data(_8ed, "datagrid");
	      var opts = _8f0.options;
	      if (opts.groupField) {
	        var g = this.groupRows(_8ed, _8f0.data.rows);
	        this.groups = g.groups;
	        _8f0.data.rows = g.rows;
	        var _8f1 = [];
	        for (var i = 0; i < g.groups.length; i++) {
	          _8f1.push(this.renderGroup.call(this, _8ed, i, g.groups[i], _8ef));
	        }
	        $(_8ee).html(_8f1.join(""));
	      } else {
	        $(_8ee).html(this.renderTable(_8ed, 0, _8f0.data.rows, _8ef));
	      }
	    }, renderGroup: function renderGroup(_8f2, _8f3, _8f4, _8f5) {
	      var _8f6 = $.data(_8f2, "datagrid");
	      var opts = _8f6.options;
	      var _8f7 = $(_8f2).datagrid("getColumnFields", _8f5);
	      var _8f8 = [];
	      _8f8.push("<div class=\"datagrid-group\" group-index=" + _8f3 + ">");
	      if (!_8f5) {
	        _8f8.push("<span class=\"datagrid-group-title\">");
	        _8f8.push(opts.groupFormatter.call(_8f2, _8f4.value, _8f4.rows));
	        _8f8.push("</span>");
	      }
	      _8f8.push("</div>");
	      _8f8.push(this.renderTable(_8f2, _8f4.startIndex, _8f4.rows, _8f5));
	      return _8f8.join("");
	    }, groupRows: function groupRows(_8f9, rows) {
	      var _8fa = $.data(_8f9, "datagrid");
	      var opts = _8fa.options;
	      var _8fb = [];
	      for (var i = 0; i < rows.length; i++) {
	        var row = rows[i];
	        var _8fc = _8fd(row[opts.groupField]);
	        if (!_8fc) {
	          _8fc = { value: row[opts.groupField], rows: [row] };
	          _8fb.push(_8fc);
	        } else {
	          _8fc.rows.push(row);
	        }
	      }
	      var _8fe = 0;
	      var rows = [];
	      for (var i = 0; i < _8fb.length; i++) {
	        var _8fc = _8fb[i];
	        _8fc.startIndex = _8fe;
	        _8fe += _8fc.rows.length;
	        rows = rows.concat(_8fc.rows);
	      }
	      return { groups: _8fb, rows: rows };
	      function _8fd(_8ff) {
	        for (var i = 0; i < _8fb.length; i++) {
	          var _900 = _8fb[i];
	          if (_900.value == _8ff) {
	            return _900;
	          }
	        }
	        return null;
	      };
	    } });
	  $.fn.datalist = function (_901, _902) {
	    if (typeof _901 == "string") {
	      var _903 = $.fn.datalist.methods[_901];
	      if (_903) {
	        return _903(this, _902);
	      } else {
	        return this.datagrid(_901, _902);
	      }
	    }
	    _901 = _901 || {};
	    return this.each(function () {
	      var _904 = $.data(this, "datalist");
	      if (_904) {
	        $.extend(_904.options, _901);
	      } else {
	        var opts = $.extend({}, $.fn.datalist.defaults, $.fn.datalist.parseOptions(this), _901);
	        opts.columns = $.extend(true, [], opts.columns);
	        _904 = $.data(this, "datalist", { options: opts });
	      }
	      _8e8(this);
	      if (!_904.options.data) {
	        var data = $.fn.datalist.parseData(this);
	        if (data.total) {
	          $(this).datalist("loadData", data);
	        }
	      }
	    });
	  };
	  $.fn.datalist.methods = { options: function options(jq) {
	      return $.data(jq[0], "datalist").options;
	    } };
	  $.fn.datalist.parseOptions = function (_905) {
	    return $.extend({}, $.fn.datagrid.parseOptions(_905), $.parser.parseOptions(_905, ["valueField", "textField", "groupField", { checkbox: "boolean", lines: "boolean" }]));
	  };
	  $.fn.datalist.parseData = function (_906) {
	    var opts = $.data(_906, "datalist").options;
	    var data = { total: 0, rows: [] };
	    $(_906).children().each(function () {
	      var _907 = $.parser.parseOptions(this, ["value", "group"]);
	      var row = {};
	      var html = $(this).html();
	      row[opts.valueField] = _907.value != undefined ? _907.value : html;
	      row[opts.textField] = html;
	      if (opts.groupField) {
	        row[opts.groupField] = _907.group;
	      }
	      data.total++;
	      data.rows.push(row);
	    });
	    return data;
	  };
	  $.fn.datalist.defaults = $.extend({}, $.fn.datagrid.defaults, { fitColumns: true, singleSelect: true, showHeader: false, checkbox: false, lines: false, valueField: "value", textField: "text", groupField: "", view: _8ec, textFormatter: function textFormatter(_908, row) {
	      return _908;
	    }, groupFormatter: function groupFormatter(_909, rows) {
	      return _909;
	    } });
	})(jQuery);
	(function ($) {
	  $(function () {
	    $(document).unbind(".combo").bind("mousedown.combo mousewheel.combo", function (e) {
	      var p = $(e.target).closest("span.combo,div.combo-p,div.menu");
	      if (p.length) {
	        _90a(p);
	        return;
	      }
	      $("body>div.combo-p>div.combo-panel:visible").panel("close");
	    });
	  });
	  function _90b(_90c) {
	    var _90d = $.data(_90c, "combo");
	    var opts = _90d.options;
	    if (!_90d.panel) {
	      _90d.panel = $("<div class=\"combo-panel\"></div>").appendTo("body");
	      _90d.panel.panel({ minWidth: opts.panelMinWidth, maxWidth: opts.panelMaxWidth, minHeight: opts.panelMinHeight, maxHeight: opts.panelMaxHeight, doSize: false, closed: true, cls: "combo-p", style: { position: "absolute", zIndex: 10 }, onOpen: function onOpen() {
	          var _90e = $(this).panel("options").comboTarget;
	          var _90f = $.data(_90e, "combo");
	          if (_90f) {
	            _90f.options.onShowPanel.call(_90e);
	          }
	        }, onBeforeClose: function onBeforeClose() {
	          _90a(this);
	        }, onClose: function onClose() {
	          var _910 = $(this).panel("options").comboTarget;
	          var _911 = $(_910).data("combo");
	          if (_911) {
	            _911.options.onHidePanel.call(_910);
	          }
	        } });
	    }
	    var _912 = $.extend(true, [], opts.icons);
	    if (opts.hasDownArrow) {
	      _912.push({ iconCls: "combo-arrow", handler: function handler(e) {
	          _916(e.data.target);
	        } });
	    }
	    $(_90c).addClass("combo-f").textbox($.extend({}, opts, { icons: _912, onChange: function onChange() {} }));
	    $(_90c).attr("comboName", $(_90c).attr("textboxName"));
	    _90d.combo = $(_90c).next();
	    _90d.combo.addClass("combo");
	  };
	  function _913(_914) {
	    var _915 = $.data(_914, "combo");
	    var opts = _915.options;
	    var p = _915.panel;
	    if (p.is(":visible")) {
	      p.panel("close");
	    }
	    if (!opts.cloned) {
	      p.panel("destroy");
	    }
	    $(_914).textbox("destroy");
	  };
	  function _916(_917) {
	    var _918 = $.data(_917, "combo").panel;
	    if (_918.is(":visible")) {
	      _919(_917);
	    } else {
	      var p = $(_917).closest("div.combo-panel");
	      $("div.combo-panel:visible").not(_918).not(p).panel("close");
	      $(_917).combo("showPanel");
	    }
	    $(_917).combo("textbox").focus();
	  };
	  function _90a(_91a) {
	    $(_91a).find(".combo-f").each(function () {
	      var p = $(this).combo("panel");
	      if (p.is(":visible")) {
	        p.panel("close");
	      }
	    });
	  };
	  function _91b(e) {
	    var _91c = e.data.target;
	    var _91d = $.data(_91c, "combo");
	    var opts = _91d.options;
	    var _91e = _91d.panel;
	    if (!opts.editable) {
	      _916(_91c);
	    } else {
	      var p = $(_91c).closest("div.combo-panel");
	      $("div.combo-panel:visible").not(_91e).not(p).panel("close");
	    }
	  };
	  function _91f(e) {
	    var _920 = e.data.target;
	    var t = $(_920);
	    var _921 = t.data("combo");
	    var opts = t.combo("options");
	    switch (e.keyCode) {
	      case 38:
	        opts.keyHandler.up.call(_920, e);
	        break;
	      case 40:
	        opts.keyHandler.down.call(_920, e);
	        break;
	      case 37:
	        opts.keyHandler.left.call(_920, e);
	        break;
	      case 39:
	        opts.keyHandler.right.call(_920, e);
	        break;
	      case 13:
	        e.preventDefault();
	        opts.keyHandler.enter.call(_920, e);
	        return false;
	      case 9:
	      case 27:
	        _919(_920);
	        break;
	      default:
	        if (opts.editable) {
	          if (_921.timer) {
	            clearTimeout(_921.timer);
	          }
	          _921.timer = setTimeout(function () {
	            var q = t.combo("getText");
	            if (_921.previousText != q) {
	              _921.previousText = q;
	              t.combo("showPanel");
	              opts.keyHandler.query.call(_920, q, e);
	              t.combo("validate");
	            }
	          }, opts.delay);
	        }
	    }
	  };
	  function _922(_923) {
	    var _924 = $.data(_923, "combo");
	    var _925 = _924.combo;
	    var _926 = _924.panel;
	    var opts = $(_923).combo("options");
	    var _927 = _926.panel("options");
	    _927.comboTarget = _923;
	    if (_927.closed) {
	      _926.panel("panel").show().css({ zIndex: $.fn.menu ? $.fn.menu.defaults.zIndex++ : $.fn.window.defaults.zIndex++, left: -999999 });
	      _926.panel("resize", { width: opts.panelWidth ? opts.panelWidth : _925._outerWidth(), height: opts.panelHeight });
	      _926.panel("panel").hide();
	      _926.panel("open");
	    }
	    (function () {
	      if (_926.is(":visible")) {
	        _926.panel("move", { left: _928(), top: _929() });
	        setTimeout(arguments.callee, 200);
	      }
	    })();
	    function _928() {
	      var left = _925.offset().left;
	      if (opts.panelAlign == "right") {
	        left += _925._outerWidth() - _926._outerWidth();
	      }
	      if (left + _926._outerWidth() > $(window)._outerWidth() + $(document).scrollLeft()) {
	        left = $(window)._outerWidth() + $(document).scrollLeft() - _926._outerWidth();
	      }
	      if (left < 0) {
	        left = 0;
	      }
	      return left;
	    };
	    function _929() {
	      var top = _925.offset().top + _925._outerHeight();
	      if (top + _926._outerHeight() > $(window)._outerHeight() + $(document).scrollTop()) {
	        top = _925.offset().top - _926._outerHeight();
	      }
	      if (top < $(document).scrollTop()) {
	        top = _925.offset().top + _925._outerHeight();
	      }
	      return top;
	    };
	  };
	  function _919(_92a) {
	    var _92b = $.data(_92a, "combo").panel;
	    _92b.panel("close");
	  };
	  function _92c(_92d, text) {
	    var _92e = $.data(_92d, "combo");
	    var _92f = $(_92d).textbox("getText");
	    if (_92f != text) {
	      $(_92d).textbox("setText", text);
	      _92e.previousText = text;
	    }
	  };
	  function _930(_931) {
	    var _932 = [];
	    var _933 = $.data(_931, "combo").combo;
	    _933.find(".textbox-value").each(function () {
	      _932.push($(this).val());
	    });
	    return _932;
	  };
	  function _934(_935, _936) {
	    var _937 = $.data(_935, "combo");
	    var opts = _937.options;
	    var _938 = _937.combo;
	    if (!$.isArray(_936)) {
	      _936 = _936.split(opts.separator);
	    }
	    var _939 = _930(_935);
	    _938.find(".textbox-value").remove();
	    var name = $(_935).attr("textboxName") || "";
	    for (var i = 0; i < _936.length; i++) {
	      var _93a = $("<input type=\"hidden\" class=\"textbox-value\">").appendTo(_938);
	      _93a.attr("name", name);
	      if (opts.disabled) {
	        _93a.attr("disabled", "disabled");
	      }
	      _93a.val(_936[i]);
	    }
	    var _93b = function () {
	      if (_939.length != _936.length) {
	        return true;
	      }
	      var a1 = $.extend(true, [], _939);
	      var a2 = $.extend(true, [], _936);
	      a1.sort();
	      a2.sort();
	      for (var i = 0; i < a1.length; i++) {
	        if (a1[i] != a2[i]) {
	          return true;
	        }
	      }
	      return false;
	    }();
	    if (_93b) {
	      if (opts.multiple) {
	        opts.onChange.call(_935, _936, _939);
	      } else {
	        opts.onChange.call(_935, _936[0], _939[0]);
	      }
	      $(_935).closest("form").trigger("_change", [_935]);
	    }
	  };
	  function _93c(_93d) {
	    var _93e = _930(_93d);
	    return _93e[0];
	  };
	  function _93f(_940, _941) {
	    _934(_940, [_941]);
	  };
	  function _942(_943) {
	    var opts = $.data(_943, "combo").options;
	    var _944 = opts.onChange;
	    opts.onChange = function () {};
	    if (opts.multiple) {
	      _934(_943, opts.value ? opts.value : []);
	    } else {
	      _93f(_943, opts.value);
	    }
	    opts.onChange = _944;
	  };
	  $.fn.combo = function (_945, _946) {
	    if (typeof _945 == "string") {
	      var _947 = $.fn.combo.methods[_945];
	      if (_947) {
	        return _947(this, _946);
	      } else {
	        return this.textbox(_945, _946);
	      }
	    }
	    _945 = _945 || {};
	    return this.each(function () {
	      var _948 = $.data(this, "combo");
	      if (_948) {
	        $.extend(_948.options, _945);
	        if (_945.value != undefined) {
	          _948.options.originalValue = _945.value;
	        }
	      } else {
	        _948 = $.data(this, "combo", { options: $.extend({}, $.fn.combo.defaults, $.fn.combo.parseOptions(this), _945), previousText: "" });
	        _948.options.originalValue = _948.options.value;
	      }
	      _90b(this);
	      _942(this);
	    });
	  };
	  $.fn.combo.methods = { options: function options(jq) {
	      var opts = jq.textbox("options");
	      return $.extend($.data(jq[0], "combo").options, { width: opts.width, height: opts.height, disabled: opts.disabled, readonly: opts.readonly });
	    }, cloneFrom: function cloneFrom(jq, from) {
	      return jq.each(function () {
	        $(this).textbox("cloneFrom", from);
	        $.data(this, "combo", { options: $.extend(true, { cloned: true }, $(from).combo("options")), combo: $(this).next(), panel: $(from).combo("panel") });
	        $(this).addClass("combo-f").attr("comboName", $(this).attr("textboxName"));
	      });
	    }, panel: function panel(jq) {
	      return $.data(jq[0], "combo").panel;
	    }, destroy: function destroy(jq) {
	      return jq.each(function () {
	        _913(this);
	      });
	    }, showPanel: function showPanel(jq) {
	      return jq.each(function () {
	        _922(this);
	      });
	    }, hidePanel: function hidePanel(jq) {
	      return jq.each(function () {
	        _919(this);
	      });
	    }, clear: function clear(jq) {
	      return jq.each(function () {
	        $(this).textbox("setText", "");
	        var opts = $.data(this, "combo").options;
	        if (opts.multiple) {
	          $(this).combo("setValues", []);
	        } else {
	          $(this).combo("setValue", "");
	        }
	      });
	    }, reset: function reset(jq) {
	      return jq.each(function () {
	        var opts = $.data(this, "combo").options;
	        if (opts.multiple) {
	          $(this).combo("setValues", opts.originalValue);
	        } else {
	          $(this).combo("setValue", opts.originalValue);
	        }
	      });
	    }, setText: function setText(jq, text) {
	      return jq.each(function () {
	        _92c(this, text);
	      });
	    }, getValues: function getValues(jq) {
	      return _930(jq[0]);
	    }, setValues: function setValues(jq, _949) {
	      return jq.each(function () {
	        _934(this, _949);
	      });
	    }, getValue: function getValue(jq) {
	      return _93c(jq[0]);
	    }, setValue: function setValue(jq, _94a) {
	      return jq.each(function () {
	        _93f(this, _94a);
	      });
	    } };
	  $.fn.combo.parseOptions = function (_94b) {
	    var t = $(_94b);
	    return $.extend({}, $.fn.textbox.parseOptions(_94b), $.parser.parseOptions(_94b, ["separator", "panelAlign", { panelWidth: "number", hasDownArrow: "boolean", delay: "number", selectOnNavigation: "boolean" }, { panelMinWidth: "number", panelMaxWidth: "number", panelMinHeight: "number", panelMaxHeight: "number" }]), { panelHeight: t.attr("panelHeight") == "auto" ? "auto" : parseInt(t.attr("panelHeight")) || undefined, multiple: t.attr("multiple") ? true : undefined });
	  };
	  $.fn.combo.defaults = $.extend({}, $.fn.textbox.defaults, { inputEvents: { click: _91b, keydown: _91f, paste: _91f, drop: _91f }, panelWidth: null, panelHeight: 200, panelMinWidth: null, panelMaxWidth: null, panelMinHeight: null, panelMaxHeight: null, panelAlign: "left", multiple: false, selectOnNavigation: true, separator: ",", hasDownArrow: true, delay: 200, keyHandler: { up: function up(e) {}, down: function down(e) {}, left: function left(e) {}, right: function right(e) {}, enter: function enter(e) {}, query: function query(q, e) {} }, onShowPanel: function onShowPanel() {}, onHidePanel: function onHidePanel() {}, onChange: function onChange(_94c, _94d) {} });
	})(jQuery);
	(function ($) {
	  var _94e = 0;
	  function _94f(_950, _951) {
	    var _952 = $.data(_950, "combobox");
	    var opts = _952.options;
	    var data = _952.data;
	    for (var i = 0; i < data.length; i++) {
	      if (data[i][opts.valueField] == _951) {
	        return i;
	      }
	    }
	    return -1;
	  };
	  function _953(_954, _955) {
	    var opts = $.data(_954, "combobox").options;
	    var _956 = $(_954).combo("panel");
	    var item = opts.finder.getEl(_954, _955);
	    if (item.length) {
	      if (item.position().top <= 0) {
	        var h = _956.scrollTop() + item.position().top;
	        _956.scrollTop(h);
	      } else {
	        if (item.position().top + item.outerHeight() > _956.height()) {
	          var h = _956.scrollTop() + item.position().top + item.outerHeight() - _956.height();
	          _956.scrollTop(h);
	        }
	      }
	    }
	  };
	  function nav(_957, dir) {
	    var opts = $.data(_957, "combobox").options;
	    var _958 = $(_957).combobox("panel");
	    var item = _958.children("div.combobox-item-hover");
	    if (!item.length) {
	      item = _958.children("div.combobox-item-selected");
	    }
	    item.removeClass("combobox-item-hover");
	    var _959 = "div.combobox-item:visible:not(.combobox-item-disabled):first";
	    var _95a = "div.combobox-item:visible:not(.combobox-item-disabled):last";
	    if (!item.length) {
	      item = _958.children(dir == "next" ? _959 : _95a);
	    } else {
	      if (dir == "next") {
	        item = item.nextAll(_959);
	        if (!item.length) {
	          item = _958.children(_959);
	        }
	      } else {
	        item = item.prevAll(_959);
	        if (!item.length) {
	          item = _958.children(_95a);
	        }
	      }
	    }
	    if (item.length) {
	      item.addClass("combobox-item-hover");
	      var row = opts.finder.getRow(_957, item);
	      if (row) {
	        _953(_957, row[opts.valueField]);
	        if (opts.selectOnNavigation) {
	          _95b(_957, row[opts.valueField]);
	        }
	      }
	    }
	  };
	  function _95b(_95c, _95d) {
	    var opts = $.data(_95c, "combobox").options;
	    var _95e = $(_95c).combo("getValues");
	    if ($.inArray(_95d + "", _95e) == -1) {
	      if (opts.multiple) {
	        _95e.push(_95d);
	      } else {
	        _95e = [_95d];
	      }
	      _95f(_95c, _95e);
	      opts.onSelect.call(_95c, opts.finder.getRow(_95c, _95d));
	    }
	  };
	  function _960(_961, _962) {
	    var opts = $.data(_961, "combobox").options;
	    var _963 = $(_961).combo("getValues");
	    var _964 = $.inArray(_962 + "", _963);
	    if (_964 >= 0) {
	      _963.splice(_964, 1);
	      _95f(_961, _963);
	      opts.onUnselect.call(_961, opts.finder.getRow(_961, _962));
	    }
	  };
	  function _95f(_965, _966, _967) {
	    var opts = $.data(_965, "combobox").options;
	    var _968 = $(_965).combo("panel");
	    if (!$.isArray(_966)) {
	      _966 = _966.split(opts.separator);
	    }
	    _968.find("div.combobox-item-selected").removeClass("combobox-item-selected");
	    var vv = [],
	        ss = [];
	    for (var i = 0; i < _966.length; i++) {
	      var v = _966[i];
	      var s = v;
	      opts.finder.getEl(_965, v).addClass("combobox-item-selected");
	      var row = opts.finder.getRow(_965, v);
	      if (row) {
	        s = row[opts.textField];
	      }
	      vv.push(v);
	      ss.push(s);
	    }
	    if (!_967) {
	      $(_965).combo("setText", ss.join(opts.separator));
	    }
	    $(_965).combo("setValues", vv);
	  };
	  function _969(_96a, data, _96b) {
	    var _96c = $.data(_96a, "combobox");
	    var opts = _96c.options;
	    _96c.data = opts.loadFilter.call(_96a, data);
	    _96c.groups = [];
	    data = _96c.data;
	    var _96d = $(_96a).combobox("getValues");
	    var dd = [];
	    var _96e = undefined;
	    for (var i = 0; i < data.length; i++) {
	      var row = data[i];
	      var v = row[opts.valueField] + "";
	      var s = row[opts.textField];
	      var g = row[opts.groupField];
	      if (g) {
	        if (_96e != g) {
	          _96e = g;
	          _96c.groups.push(g);
	          dd.push("<div id=\"" + (_96c.groupIdPrefix + "_" + (_96c.groups.length - 1)) + "\" class=\"combobox-group\">");
	          dd.push(opts.groupFormatter ? opts.groupFormatter.call(_96a, g) : g);
	          dd.push("</div>");
	        }
	      } else {
	        _96e = undefined;
	      }
	      var cls = "combobox-item" + (row.disabled ? " combobox-item-disabled" : "") + (g ? " combobox-gitem" : "");
	      dd.push("<div id=\"" + (_96c.itemIdPrefix + "_" + i) + "\" class=\"" + cls + "\">");
	      dd.push(opts.formatter ? opts.formatter.call(_96a, row) : s);
	      dd.push("</div>");
	      if (row["selected"] && $.inArray(v, _96d) == -1) {
	        _96d.push(v);
	      }
	    }
	    $(_96a).combo("panel").html(dd.join(""));
	    if (opts.multiple) {
	      _95f(_96a, _96d, _96b);
	    } else {
	      _95f(_96a, _96d.length ? [_96d[_96d.length - 1]] : [], _96b);
	    }
	    opts.onLoadSuccess.call(_96a, data);
	  };
	  function _96f(_970, url, _971, _972) {
	    var opts = $.data(_970, "combobox").options;
	    if (url) {
	      opts.url = url;
	    }
	    _971 = $.extend({}, opts.queryParams, _971 || {});
	    if (opts.onBeforeLoad.call(_970, _971) == false) {
	      return;
	    }
	    opts.loader.call(_970, _971, function (data) {
	      _969(_970, data, _972);
	    }, function () {
	      opts.onLoadError.apply(this, arguments);
	    });
	  };
	  function _973(_974, q) {
	    var _975 = $.data(_974, "combobox");
	    var opts = _975.options;
	    var qq = opts.multiple ? q.split(opts.separator) : [q];
	    if (opts.mode == "remote") {
	      _976(qq);
	      _96f(_974, null, { q: q }, true);
	    } else {
	      var _977 = $(_974).combo("panel");
	      _977.find("div.combobox-item-selected,div.combobox-item-hover").removeClass("combobox-item-selected combobox-item-hover");
	      _977.find("div.combobox-item,div.combobox-group").hide();
	      var data = _975.data;
	      var vv = [];
	      $.map(qq, function (q) {
	        q = $.trim(q);
	        var _978 = q;
	        var _979 = undefined;
	        for (var i = 0; i < data.length; i++) {
	          var row = data[i];
	          if (opts.filter.call(_974, q, row)) {
	            var v = row[opts.valueField];
	            var s = row[opts.textField];
	            var g = row[opts.groupField];
	            var item = opts.finder.getEl(_974, v).show();
	            if (s.toLowerCase() == q.toLowerCase()) {
	              _978 = v;
	              item.addClass("combobox-item-selected");
	            }
	            if (opts.groupField && _979 != g) {
	              $("#" + _975.groupIdPrefix + "_" + $.inArray(g, _975.groups)).show();
	              _979 = g;
	            }
	          }
	        }
	        vv.push(_978);
	      });
	      _976(vv);
	    }
	    function _976(vv) {
	      _95f(_974, opts.multiple ? q ? vv : [] : vv, true);
	    };
	  };
	  function _97a(_97b) {
	    var t = $(_97b);
	    var opts = t.combobox("options");
	    var _97c = t.combobox("panel");
	    var item = _97c.children("div.combobox-item-hover");
	    if (item.length) {
	      var row = opts.finder.getRow(_97b, item);
	      var _97d = row[opts.valueField];
	      if (opts.multiple) {
	        if (item.hasClass("combobox-item-selected")) {
	          t.combobox("unselect", _97d);
	        } else {
	          t.combobox("select", _97d);
	        }
	      } else {
	        t.combobox("select", _97d);
	      }
	    }
	    var vv = [];
	    $.map(t.combobox("getValues"), function (v) {
	      if (_94f(_97b, v) >= 0) {
	        vv.push(v);
	      }
	    });
	    t.combobox("setValues", vv);
	    if (!opts.multiple) {
	      t.combobox("hidePanel");
	    }
	  };
	  function _97e(_97f) {
	    var _980 = $.data(_97f, "combobox");
	    var opts = _980.options;
	    _94e++;
	    _980.itemIdPrefix = "_easyui_combobox_i" + _94e;
	    _980.groupIdPrefix = "_easyui_combobox_g" + _94e;
	    $(_97f).addClass("combobox-f");
	    $(_97f).combo($.extend({}, opts, { onShowPanel: function onShowPanel() {
	        $(_97f).combo("panel").find("div.combobox-item,div.combobox-group").show();
	        _953(_97f, $(_97f).combobox("getValue"));
	        opts.onShowPanel.call(_97f);
	      } }));
	    $(_97f).combo("panel").unbind().bind("mouseover", function (e) {
	      $(this).children("div.combobox-item-hover").removeClass("combobox-item-hover");
	      var item = $(e.target).closest("div.combobox-item");
	      if (!item.hasClass("combobox-item-disabled")) {
	        item.addClass("combobox-item-hover");
	      }
	      e.stopPropagation();
	    }).bind("mouseout", function (e) {
	      $(e.target).closest("div.combobox-item").removeClass("combobox-item-hover");
	      e.stopPropagation();
	    }).bind("click", function (e) {
	      var item = $(e.target).closest("div.combobox-item");
	      if (!item.length || item.hasClass("combobox-item-disabled")) {
	        return;
	      }
	      var row = opts.finder.getRow(_97f, item);
	      if (!row) {
	        return;
	      }
	      var _981 = row[opts.valueField];
	      if (opts.multiple) {
	        if (item.hasClass("combobox-item-selected")) {
	          _960(_97f, _981);
	        } else {
	          _95b(_97f, _981);
	        }
	      } else {
	        _95b(_97f, _981);
	        $(_97f).combo("hidePanel");
	      }
	      e.stopPropagation();
	    });
	  };
	  $.fn.combobox = function (_982, _983) {
	    if (typeof _982 == "string") {
	      var _984 = $.fn.combobox.methods[_982];
	      if (_984) {
	        return _984(this, _983);
	      } else {
	        return this.combo(_982, _983);
	      }
	    }
	    _982 = _982 || {};
	    return this.each(function () {
	      var _985 = $.data(this, "combobox");
	      if (_985) {
	        $.extend(_985.options, _982);
	        _97e(this);
	      } else {
	        _985 = $.data(this, "combobox", { options: $.extend({}, $.fn.combobox.defaults, $.fn.combobox.parseOptions(this), _982), data: [] });
	        _97e(this);
	        var data = $.fn.combobox.parseData(this);
	        if (data.length) {
	          _969(this, data);
	        }
	      }
	      if (_985.options.data) {
	        _969(this, _985.options.data);
	      }
	      _96f(this);
	    });
	  };
	  $.fn.combobox.methods = { options: function options(jq) {
	      var _986 = jq.combo("options");
	      return $.extend($.data(jq[0], "combobox").options, { width: _986.width, height: _986.height, originalValue: _986.originalValue, disabled: _986.disabled, readonly: _986.readonly });
	    }, getData: function getData(jq) {
	      return $.data(jq[0], "combobox").data;
	    }, setValues: function setValues(jq, _987) {
	      return jq.each(function () {
	        _95f(this, _987);
	      });
	    }, setValue: function setValue(jq, _988) {
	      return jq.each(function () {
	        _95f(this, [_988]);
	      });
	    }, clear: function clear(jq) {
	      return jq.each(function () {
	        $(this).combo("clear");
	        var _989 = $(this).combo("panel");
	        _989.find("div.combobox-item-selected").removeClass("combobox-item-selected");
	      });
	    }, reset: function reset(jq) {
	      return jq.each(function () {
	        var opts = $(this).combobox("options");
	        if (opts.multiple) {
	          $(this).combobox("setValues", opts.originalValue);
	        } else {
	          $(this).combobox("setValue", opts.originalValue);
	        }
	      });
	    }, loadData: function loadData(jq, data) {
	      return jq.each(function () {
	        _969(this, data);
	      });
	    }, reload: function reload(jq, url) {
	      return jq.each(function () {
	        if (typeof url == "string") {
	          _96f(this, url);
	        } else {
	          if (url) {
	            var opts = $(this).combobox("options");
	            opts.queryParams = url;
	          }
	          _96f(this);
	        }
	      });
	    }, select: function select(jq, _98a) {
	      return jq.each(function () {
	        _95b(this, _98a);
	      });
	    }, unselect: function unselect(jq, _98b) {
	      return jq.each(function () {
	        _960(this, _98b);
	      });
	    } };
	  $.fn.combobox.parseOptions = function (_98c) {
	    var t = $(_98c);
	    return $.extend({}, $.fn.combo.parseOptions(_98c), $.parser.parseOptions(_98c, ["valueField", "textField", "groupField", "mode", "method", "url"]));
	  };
	  $.fn.combobox.parseData = function (_98d) {
	    var data = [];
	    var opts = $(_98d).combobox("options");
	    $(_98d).children().each(function () {
	      if (this.tagName.toLowerCase() == "optgroup") {
	        var _98e = $(this).attr("label");
	        $(this).children().each(function () {
	          _98f(this, _98e);
	        });
	      } else {
	        _98f(this);
	      }
	    });
	    return data;
	    function _98f(el, _990) {
	      var t = $(el);
	      var row = {};
	      row[opts.valueField] = t.attr("value") != undefined ? t.attr("value") : t.text();
	      row[opts.textField] = t.text();
	      row["selected"] = t.is(":selected");
	      row["disabled"] = t.is(":disabled");
	      if (_990) {
	        opts.groupField = opts.groupField || "group";
	        row[opts.groupField] = _990;
	      }
	      data.push(row);
	    };
	  };
	  $.fn.combobox.defaults = $.extend({}, $.fn.combo.defaults, { valueField: "value", textField: "text", groupField: null, groupFormatter: function groupFormatter(_991) {
	      return _991;
	    }, mode: "local", method: "post", url: null, data: null, queryParams: {}, keyHandler: { up: function up(e) {
	        nav(this, "prev");
	        e.preventDefault();
	      }, down: function down(e) {
	        nav(this, "next");
	        e.preventDefault();
	      }, left: function left(e) {}, right: function right(e) {}, enter: function enter(e) {
	        _97a(this);
	      }, query: function query(q, e) {
	        _973(this, q);
	      } }, filter: function filter(q, row) {
	      var opts = $(this).combobox("options");
	      return row[opts.textField].toLowerCase().indexOf(q.toLowerCase()) == 0;
	    }, formatter: function formatter(row) {
	      var opts = $(this).combobox("options");
	      return row[opts.textField];
	    }, loader: function loader(_992, _993, _994) {
	      var opts = $(this).combobox("options");
	      if (!opts.url) {
	        return false;
	      }
	      $.ajax({ type: opts.method, url: opts.url, data: _992, dataType: "json", success: function success(data) {
	          _993(data);
	        }, error: function error() {
	          _994.apply(this, arguments);
	        } });
	    }, loadFilter: function loadFilter(data) {
	      return data;
	    }, finder: { getEl: function getEl(_995, _996) {
	        var _997 = _94f(_995, _996);
	        var id = $.data(_995, "combobox").itemIdPrefix + "_" + _997;
	        return $("#" + id);
	      }, getRow: function getRow(_998, p) {
	        var _999 = $.data(_998, "combobox");
	        var _99a = p instanceof jQuery ? p.attr("id").substr(_999.itemIdPrefix.length + 1) : _94f(_998, p);
	        return _999.data[parseInt(_99a)];
	      } }, onBeforeLoad: function onBeforeLoad(_99b) {}, onLoadSuccess: function onLoadSuccess() {}, onLoadError: function onLoadError() {}, onSelect: function onSelect(_99c) {}, onUnselect: function onUnselect(_99d) {} });
	})(jQuery);
	(function ($) {
	  function _99e(_99f) {
	    var _9a0 = $.data(_99f, "combotree");
	    var opts = _9a0.options;
	    var tree = _9a0.tree;
	    $(_99f).addClass("combotree-f");
	    $(_99f).combo(opts);
	    var _9a1 = $(_99f).combo("panel");
	    if (!tree) {
	      tree = $("<ul></ul>").appendTo(_9a1);
	      $.data(_99f, "combotree").tree = tree;
	    }
	    tree.tree($.extend({}, opts, { checkbox: opts.multiple, onLoadSuccess: function onLoadSuccess(node, data) {
	        var _9a2 = $(_99f).combotree("getValues");
	        if (opts.multiple) {
	          var _9a3 = tree.tree("getChecked");
	          for (var i = 0; i < _9a3.length; i++) {
	            var id = _9a3[i].id;
	            (function () {
	              for (var i = 0; i < _9a2.length; i++) {
	                if (id == _9a2[i]) {
	                  return;
	                }
	              }
	              _9a2.push(id);
	            })();
	          }
	        }
	        $(_99f).combotree("setValues", _9a2);
	        opts.onLoadSuccess.call(this, node, data);
	      }, onClick: function onClick(node) {
	        if (opts.multiple) {
	          $(this).tree(node.checked ? "uncheck" : "check", node.target);
	        } else {
	          $(_99f).combo("hidePanel");
	        }
	        _9a5(_99f);
	        opts.onClick.call(this, node);
	      }, onCheck: function onCheck(node, _9a4) {
	        _9a5(_99f);
	        opts.onCheck.call(this, node, _9a4);
	      } }));
	  };
	  function _9a5(_9a6) {
	    var _9a7 = $.data(_9a6, "combotree");
	    var opts = _9a7.options;
	    var tree = _9a7.tree;
	    var vv = [],
	        ss = [];
	    if (opts.multiple) {
	      var _9a8 = tree.tree("getChecked");
	      for (var i = 0; i < _9a8.length; i++) {
	        vv.push(_9a8[i].id);
	        ss.push(_9a8[i].text);
	      }
	    } else {
	      var node = tree.tree("getSelected");
	      if (node) {
	        vv.push(node.id);
	        ss.push(node.text);
	      }
	    }
	    $(_9a6).combo("setText", ss.join(opts.separator)).combo("setValues", opts.multiple ? vv : vv.length ? vv : [""]);
	  };
	  function _9a9(_9aa, _9ab) {
	    var _9ac = $.data(_9aa, "combotree");
	    var opts = _9ac.options;
	    var tree = _9ac.tree;
	    var _9ad = tree.tree("options");
	    var _9ae = _9ad.onCheck;
	    var _9af = _9ad.onSelect;
	    _9ad.onCheck = _9ad.onSelect = function () {};
	    tree.find("span.tree-checkbox").addClass("tree-checkbox0").removeClass("tree-checkbox1 tree-checkbox2");
	    if (!$.isArray(_9ab)) {
	      _9ab = _9ab.split(opts.separator);
	    }
	    var vv = $.map(_9ab, function (_9b0) {
	      return String(_9b0);
	    });
	    var ss = [];
	    $.map(vv, function (v) {
	      var node = tree.tree("find", v);
	      if (node) {
	        tree.tree("check", node.target).tree("select", node.target);
	        ss.push(node.text);
	      } else {
	        ss.push(v);
	      }
	    });
	    if (opts.multiple) {
	      var _9b1 = tree.tree("getChecked");
	      $.map(_9b1, function (node) {
	        var id = String(node.id);
	        if ($.inArray(id, vv) == -1) {
	          vv.push(id);
	          ss.push(node.text);
	        }
	      });
	    }
	    _9ad.onCheck = _9ae;
	    _9ad.onSelect = _9af;
	    $(_9aa).combo("setText", ss.join(opts.separator)).combo("setValues", opts.multiple ? vv : vv.length ? vv : [""]);
	  };
	  $.fn.combotree = function (_9b2, _9b3) {
	    if (typeof _9b2 == "string") {
	      var _9b4 = $.fn.combotree.methods[_9b2];
	      if (_9b4) {
	        return _9b4(this, _9b3);
	      } else {
	        return this.combo(_9b2, _9b3);
	      }
	    }
	    _9b2 = _9b2 || {};
	    return this.each(function () {
	      var _9b5 = $.data(this, "combotree");
	      if (_9b5) {
	        $.extend(_9b5.options, _9b2);
	      } else {
	        $.data(this, "combotree", { options: $.extend({}, $.fn.combotree.defaults, $.fn.combotree.parseOptions(this), _9b2) });
	      }
	      _99e(this);
	    });
	  };
	  $.fn.combotree.methods = { options: function options(jq) {
	      var _9b6 = jq.combo("options");
	      return $.extend($.data(jq[0], "combotree").options, { width: _9b6.width, height: _9b6.height, originalValue: _9b6.originalValue, disabled: _9b6.disabled, readonly: _9b6.readonly });
	    }, clone: function clone(jq, _9b7) {
	      var t = jq.combo("clone", _9b7);
	      t.data("combotree", { options: $.extend(true, {}, jq.combotree("options")), tree: jq.combotree("tree") });
	      return t;
	    }, tree: function tree(jq) {
	      return $.data(jq[0], "combotree").tree;
	    }, loadData: function loadData(jq, data) {
	      return jq.each(function () {
	        var opts = $.data(this, "combotree").options;
	        opts.data = data;
	        var tree = $.data(this, "combotree").tree;
	        tree.tree("loadData", data);
	      });
	    }, reload: function reload(jq, url) {
	      return jq.each(function () {
	        var opts = $.data(this, "combotree").options;
	        var tree = $.data(this, "combotree").tree;
	        if (url) {
	          opts.url = url;
	        }
	        tree.tree({ url: opts.url });
	      });
	    }, setValues: function setValues(jq, _9b8) {
	      return jq.each(function () {
	        _9a9(this, _9b8);
	      });
	    }, setValue: function setValue(jq, _9b9) {
	      return jq.each(function () {
	        _9a9(this, [_9b9]);
	      });
	    }, clear: function clear(jq) {
	      return jq.each(function () {
	        var tree = $.data(this, "combotree").tree;
	        tree.find("div.tree-node-selected").removeClass("tree-node-selected");
	        var cc = tree.tree("getChecked");
	        for (var i = 0; i < cc.length; i++) {
	          tree.tree("uncheck", cc[i].target);
	        }
	        $(this).combo("clear");
	      });
	    }, reset: function reset(jq) {
	      return jq.each(function () {
	        var opts = $(this).combotree("options");
	        if (opts.multiple) {
	          $(this).combotree("setValues", opts.originalValue);
	        } else {
	          $(this).combotree("setValue", opts.originalValue);
	        }
	      });
	    } };
	  $.fn.combotree.parseOptions = function (_9ba) {
	    return $.extend({}, $.fn.combo.parseOptions(_9ba), $.fn.tree.parseOptions(_9ba));
	  };
	  $.fn.combotree.defaults = $.extend({}, $.fn.combo.defaults, $.fn.tree.defaults, { editable: false });
	})(jQuery);
	(function ($) {
	  function _9bb(_9bc) {
	    var _9bd = $.data(_9bc, "combogrid");
	    var opts = _9bd.options;
	    var grid = _9bd.grid;
	    $(_9bc).addClass("combogrid-f").combo($.extend({}, opts, { onShowPanel: function onShowPanel() {
	        var p = $(this).combogrid("panel");
	        var _9be = p.outerHeight() - p.height();
	        var _9bf = p._size("minHeight");
	        var _9c0 = p._size("maxHeight");
	        var dg = $(this).combogrid("grid");
	        dg.datagrid("resize", { width: "100%", height: isNaN(parseInt(opts.panelHeight)) ? "auto" : "100%", minHeight: _9bf ? _9bf - _9be : "", maxHeight: _9c0 ? _9c0 - _9be : "" });
	        var row = dg.datagrid("getSelected");
	        if (row) {
	          dg.datagrid("scrollTo", dg.datagrid("getRowIndex", row));
	        }
	        opts.onShowPanel.call(this);
	      } }));
	    var _9c1 = $(_9bc).combo("panel");
	    if (!grid) {
	      grid = $("<table></table>").appendTo(_9c1);
	      _9bd.grid = grid;
	    }
	    grid.datagrid($.extend({}, opts, { border: false, singleSelect: !opts.multiple, onLoadSuccess: function onLoadSuccess(data) {
	        var _9c2 = $(_9bc).combo("getValues");
	        var _9c3 = opts.onSelect;
	        opts.onSelect = function () {};
	        _9cd(_9bc, _9c2, _9bd.remainText);
	        opts.onSelect = _9c3;
	        opts.onLoadSuccess.apply(_9bc, arguments);
	      }, onClickRow: _9c4, onSelect: function onSelect(_9c5, row) {
	        _9c6();
	        opts.onSelect.call(this, _9c5, row);
	      }, onUnselect: function onUnselect(_9c7, row) {
	        _9c6();
	        opts.onUnselect.call(this, _9c7, row);
	      }, onSelectAll: function onSelectAll(rows) {
	        _9c6();
	        opts.onSelectAll.call(this, rows);
	      }, onUnselectAll: function onUnselectAll(rows) {
	        if (opts.multiple) {
	          _9c6();
	        }
	        opts.onUnselectAll.call(this, rows);
	      } }));
	    function _9c4(_9c8, row) {
	      _9bd.remainText = false;
	      _9c6();
	      if (!opts.multiple) {
	        $(_9bc).combo("hidePanel");
	      }
	      opts.onClickRow.call(this, _9c8, row);
	    };
	    function _9c6() {
	      var rows = grid.datagrid("getSelections");
	      var vv = [],
	          ss = [];
	      for (var i = 0; i < rows.length; i++) {
	        vv.push(rows[i][opts.idField]);
	        ss.push(rows[i][opts.textField]);
	      }
	      if (!opts.multiple) {
	        $(_9bc).combo("setValues", vv.length ? vv : [""]);
	      } else {
	        $(_9bc).combo("setValues", vv);
	      }
	      if (!_9bd.remainText) {
	        $(_9bc).combo("setText", ss.join(opts.separator));
	      }
	    };
	  };
	  function nav(_9c9, dir) {
	    var _9ca = $.data(_9c9, "combogrid");
	    var opts = _9ca.options;
	    var grid = _9ca.grid;
	    var _9cb = grid.datagrid("getRows").length;
	    if (!_9cb) {
	      return;
	    }
	    var tr = opts.finder.getTr(grid[0], null, "highlight");
	    if (!tr.length) {
	      tr = opts.finder.getTr(grid[0], null, "selected");
	    }
	    var _9cc;
	    if (!tr.length) {
	      _9cc = dir == "next" ? 0 : _9cb - 1;
	    } else {
	      var _9cc = parseInt(tr.attr("datagrid-row-index"));
	      _9cc += dir == "next" ? 1 : -1;
	      if (_9cc < 0) {
	        _9cc = _9cb - 1;
	      }
	      if (_9cc >= _9cb) {
	        _9cc = 0;
	      }
	    }
	    grid.datagrid("highlightRow", _9cc);
	    if (opts.selectOnNavigation) {
	      _9ca.remainText = false;
	      grid.datagrid("selectRow", _9cc);
	    }
	  };
	  function _9cd(_9ce, _9cf, _9d0) {
	    var _9d1 = $.data(_9ce, "combogrid");
	    var opts = _9d1.options;
	    var grid = _9d1.grid;
	    var rows = grid.datagrid("getRows");
	    var ss = [];
	    var _9d2 = $(_9ce).combo("getValues");
	    var _9d3 = $(_9ce).combo("options");
	    var _9d4 = _9d3.onChange;
	    _9d3.onChange = function () {};
	    grid.datagrid("clearSelections");
	    if (!$.isArray(_9cf)) {
	      _9cf = _9cf.split(opts.separator);
	    }
	    for (var i = 0; i < _9cf.length; i++) {
	      var _9d5 = grid.datagrid("getRowIndex", _9cf[i]);
	      if (_9d5 >= 0) {
	        grid.datagrid("selectRow", _9d5);
	        ss.push(rows[_9d5][opts.textField]);
	      } else {
	        ss.push(_9cf[i]);
	      }
	    }
	    $(_9ce).combo("setValues", _9d2);
	    _9d3.onChange = _9d4;
	    if (!_9d0) {
	      var s = ss.join(opts.separator);
	      if ($(_9ce).combo("getText") != s) {
	        $(_9ce).combo("setText", s);
	      }
	    }
	    $(_9ce).combo("setValues", _9cf);
	  };
	  function _9d6(_9d7, q) {
	    var _9d8 = $.data(_9d7, "combogrid");
	    var opts = _9d8.options;
	    var grid = _9d8.grid;
	    _9d8.remainText = true;
	    if (opts.multiple && !q) {
	      _9cd(_9d7, [], true);
	    } else {
	      _9cd(_9d7, [q], true);
	    }
	    if (opts.mode == "remote") {
	      grid.datagrid("clearSelections");
	      grid.datagrid("load", $.extend({}, opts.queryParams, { q: q }));
	    } else {
	      if (!q) {
	        return;
	      }
	      grid.datagrid("clearSelections").datagrid("highlightRow", -1);
	      var rows = grid.datagrid("getRows");
	      var qq = opts.multiple ? q.split(opts.separator) : [q];
	      $.map(qq, function (q) {
	        q = $.trim(q);
	        if (q) {
	          $.map(rows, function (row, i) {
	            if (q == row[opts.textField]) {
	              grid.datagrid("selectRow", i);
	            } else {
	              if (opts.filter.call(_9d7, q, row)) {
	                grid.datagrid("highlightRow", i);
	              }
	            }
	          });
	        }
	      });
	    }
	  };
	  function _9d9(_9da) {
	    var _9db = $.data(_9da, "combogrid");
	    var opts = _9db.options;
	    var grid = _9db.grid;
	    var tr = opts.finder.getTr(grid[0], null, "highlight");
	    _9db.remainText = false;
	    if (tr.length) {
	      var _9dc = parseInt(tr.attr("datagrid-row-index"));
	      if (opts.multiple) {
	        if (tr.hasClass("datagrid-row-selected")) {
	          grid.datagrid("unselectRow", _9dc);
	        } else {
	          grid.datagrid("selectRow", _9dc);
	        }
	      } else {
	        grid.datagrid("selectRow", _9dc);
	      }
	    }
	    var vv = [];
	    $.map(grid.datagrid("getSelections"), function (row) {
	      vv.push(row[opts.idField]);
	    });
	    $(_9da).combogrid("setValues", vv);
	    if (!opts.multiple) {
	      $(_9da).combogrid("hidePanel");
	    }
	  };
	  $.fn.combogrid = function (_9dd, _9de) {
	    if (typeof _9dd == "string") {
	      var _9df = $.fn.combogrid.methods[_9dd];
	      if (_9df) {
	        return _9df(this, _9de);
	      } else {
	        return this.combo(_9dd, _9de);
	      }
	    }
	    _9dd = _9dd || {};
	    return this.each(function () {
	      var _9e0 = $.data(this, "combogrid");
	      if (_9e0) {
	        $.extend(_9e0.options, _9dd);
	      } else {
	        _9e0 = $.data(this, "combogrid", { options: $.extend({}, $.fn.combogrid.defaults, $.fn.combogrid.parseOptions(this), _9dd) });
	      }
	      _9bb(this);
	    });
	  };
	  $.fn.combogrid.methods = { options: function options(jq) {
	      var _9e1 = jq.combo("options");
	      return $.extend($.data(jq[0], "combogrid").options, { width: _9e1.width, height: _9e1.height, originalValue: _9e1.originalValue, disabled: _9e1.disabled, readonly: _9e1.readonly });
	    }, grid: function grid(jq) {
	      return $.data(jq[0], "combogrid").grid;
	    }, setValues: function setValues(jq, _9e2) {
	      return jq.each(function () {
	        _9cd(this, _9e2);
	      });
	    }, setValue: function setValue(jq, _9e3) {
	      return jq.each(function () {
	        _9cd(this, [_9e3]);
	      });
	    }, clear: function clear(jq) {
	      return jq.each(function () {
	        $(this).combogrid("grid").datagrid("clearSelections");
	        $(this).combo("clear");
	      });
	    }, reset: function reset(jq) {
	      return jq.each(function () {
	        var opts = $(this).combogrid("options");
	        if (opts.multiple) {
	          $(this).combogrid("setValues", opts.originalValue);
	        } else {
	          $(this).combogrid("setValue", opts.originalValue);
	        }
	      });
	    } };
	  $.fn.combogrid.parseOptions = function (_9e4) {
	    var t = $(_9e4);
	    return $.extend({}, $.fn.combo.parseOptions(_9e4), $.fn.datagrid.parseOptions(_9e4), $.parser.parseOptions(_9e4, ["idField", "textField", "mode"]));
	  };
	  $.fn.combogrid.defaults = $.extend({}, $.fn.combo.defaults, $.fn.datagrid.defaults, { height: 22, loadMsg: null, idField: null, textField: null, mode: "local", keyHandler: { up: function up(e) {
	        nav(this, "prev");
	        e.preventDefault();
	      }, down: function down(e) {
	        nav(this, "next");
	        e.preventDefault();
	      }, left: function left(e) {}, right: function right(e) {}, enter: function enter(e) {
	        _9d9(this);
	      }, query: function query(q, e) {
	        _9d6(this, q);
	      } }, filter: function filter(q, row) {
	      var opts = $(this).combogrid("options");
	      return row[opts.textField].toLowerCase().indexOf(q.toLowerCase()) == 0;
	    } });
	})(jQuery);
	(function ($) {
	  function _9e5(_9e6) {
	    var _9e7 = $.data(_9e6, "datebox");
	    var opts = _9e7.options;
	    $(_9e6).addClass("datebox-f").combo($.extend({}, opts, { onShowPanel: function onShowPanel() {
	        _9e8(this);
	        _9e9(this);
	        _9ea(this);
	        _9f8(this, $(this).datebox("getText"), true);
	        opts.onShowPanel.call(this);
	      } }));
	    if (!_9e7.calendar) {
	      var _9eb = $(_9e6).combo("panel").css("overflow", "hidden");
	      _9eb.panel("options").onBeforeDestroy = function () {
	        var c = $(this).find(".calendar-shared");
	        if (c.length) {
	          c.insertBefore(c[0].pholder);
	        }
	      };
	      var cc = $("<div class=\"datebox-calendar-inner\"></div>").prependTo(_9eb);
	      if (opts.sharedCalendar) {
	        var c = $(opts.sharedCalendar);
	        if (!c[0].pholder) {
	          c[0].pholder = $("<div class=\"calendar-pholder\" style=\"display:none\"></div>").insertAfter(c);
	        }
	        c.addClass("calendar-shared").appendTo(cc);
	        if (!c.hasClass("calendar")) {
	          c.calendar();
	        }
	        _9e7.calendar = c;
	      } else {
	        _9e7.calendar = $("<div></div>").appendTo(cc).calendar();
	      }
	      $.extend(_9e7.calendar.calendar("options"), { fit: true, border: false, onSelect: function onSelect(date) {
	          var _9ec = this.target;
	          var opts = $(_9ec).datebox("options");
	          _9f8(_9ec, opts.formatter.call(_9ec, date));
	          $(_9ec).combo("hidePanel");
	          opts.onSelect.call(_9ec, date);
	        } });
	    }
	    $(_9e6).combo("textbox").parent().addClass("datebox");
	    $(_9e6).datebox("initValue", opts.value);
	    function _9e8(_9ed) {
	      var opts = $(_9ed).datebox("options");
	      var _9ee = $(_9ed).combo("panel");
	      _9ee.unbind(".datebox").bind("click.datebox", function (e) {
	        if ($(e.target).hasClass("datebox-button-a")) {
	          var _9ef = parseInt($(e.target).attr("datebox-button-index"));
	          opts.buttons[_9ef].handler.call(e.target, _9ed);
	        }
	      });
	    };
	    function _9e9(_9f0) {
	      var _9f1 = $(_9f0).combo("panel");
	      if (_9f1.children("div.datebox-button").length) {
	        return;
	      }
	      var _9f2 = $("<div class=\"datebox-button\"><table cellspacing=\"0\" cellpadding=\"0\" style=\"width:100%\"><tr></tr></table></div>").appendTo(_9f1);
	      var tr = _9f2.find("tr");
	      for (var i = 0; i < opts.buttons.length; i++) {
	        var td = $("<td></td>").appendTo(tr);
	        var btn = opts.buttons[i];
	        var t = $("<a class=\"datebox-button-a\" href=\"javascript:void(0)\"></a>").html($.isFunction(btn.text) ? btn.text(_9f0) : btn.text).appendTo(td);
	        t.attr("datebox-button-index", i);
	      }
	      tr.find("td").css("width", 100 / opts.buttons.length + "%");
	    };
	    function _9ea(_9f3) {
	      var _9f4 = $(_9f3).combo("panel");
	      var cc = _9f4.children("div.datebox-calendar-inner");
	      _9f4.children()._outerWidth(_9f4.width());
	      _9e7.calendar.appendTo(cc);
	      _9e7.calendar[0].target = _9f3;
	      if (opts.panelHeight != "auto") {
	        var _9f5 = _9f4.height();
	        _9f4.children().not(cc).each(function () {
	          _9f5 -= $(this).outerHeight();
	        });
	        cc._outerHeight(_9f5);
	      }
	      _9e7.calendar.calendar("resize");
	    };
	  };
	  function _9f6(_9f7, q) {
	    _9f8(_9f7, q, true);
	  };
	  function _9f9(_9fa) {
	    var _9fb = $.data(_9fa, "datebox");
	    var opts = _9fb.options;
	    var _9fc = _9fb.calendar.calendar("options").current;
	    if (_9fc) {
	      _9f8(_9fa, opts.formatter.call(_9fa, _9fc));
	      $(_9fa).combo("hidePanel");
	    }
	  };
	  function _9f8(_9fd, _9fe, _9ff) {
	    var _a00 = $.data(_9fd, "datebox");
	    var opts = _a00.options;
	    var _a01 = _a00.calendar;
	    _a01.calendar("moveTo", opts.parser.call(_9fd, _9fe));
	    if (_9ff) {
	      $(_9fd).combo("setValue", _9fe);
	    } else {
	      if (_9fe) {
	        _9fe = opts.formatter.call(_9fd, _a01.calendar("options").current);
	      }
	      $(_9fd).combo("setText", _9fe).combo("setValue", _9fe);
	    }
	  };
	  $.fn.datebox = function (_a02, _a03) {
	    if (typeof _a02 == "string") {
	      var _a04 = $.fn.datebox.methods[_a02];
	      if (_a04) {
	        return _a04(this, _a03);
	      } else {
	        return this.combo(_a02, _a03);
	      }
	    }
	    _a02 = _a02 || {};
	    return this.each(function () {
	      var _a05 = $.data(this, "datebox");
	      if (_a05) {
	        $.extend(_a05.options, _a02);
	      } else {
	        $.data(this, "datebox", { options: $.extend({}, $.fn.datebox.defaults, $.fn.datebox.parseOptions(this), _a02) });
	      }
	      _9e5(this);
	    });
	  };
	  $.fn.datebox.methods = { options: function options(jq) {
	      var _a06 = jq.combo("options");
	      return $.extend($.data(jq[0], "datebox").options, { width: _a06.width, height: _a06.height, originalValue: _a06.originalValue, disabled: _a06.disabled, readonly: _a06.readonly });
	    }, cloneFrom: function cloneFrom(jq, from) {
	      return jq.each(function () {
	        $(this).combo("cloneFrom", from);
	        $.data(this, "datebox", { options: $.extend(true, {}, $(from).datebox("options")), calendar: $(from).datebox("calendar") });
	        $(this).addClass("datebox-f");
	      });
	    }, calendar: function calendar(jq) {
	      return $.data(jq[0], "datebox").calendar;
	    }, initValue: function initValue(jq, _a07) {
	      return jq.each(function () {
	        var opts = $(this).datebox("options");
	        var _a08 = opts.value;
	        if (_a08) {
	          _a08 = opts.formatter.call(this, opts.parser.call(this, _a08));
	        }
	        $(this).combo("initValue", _a08).combo("setText", _a08);
	      });
	    }, setValue: function setValue(jq, _a09) {
	      return jq.each(function () {
	        _9f8(this, _a09);
	      });
	    }, reset: function reset(jq) {
	      return jq.each(function () {
	        var opts = $(this).datebox("options");
	        $(this).datebox("setValue", opts.originalValue);
	      });
	    } };
	  $.fn.datebox.parseOptions = function (_a0a) {
	    return $.extend({}, $.fn.combo.parseOptions(_a0a), $.parser.parseOptions(_a0a, ["sharedCalendar"]));
	  };
	  $.fn.datebox.defaults = $.extend({}, $.fn.combo.defaults, { panelWidth: 180, panelHeight: "auto", sharedCalendar: null, keyHandler: { up: function up(e) {}, down: function down(e) {}, left: function left(e) {}, right: function right(e) {}, enter: function enter(e) {
	        _9f9(this);
	      }, query: function query(q, e) {
	        _9f6(this, q);
	      } }, currentText: "今天", closeText: "关闭", okText: "Ok", buttons: [{ text: function text(_a0b) {
	        return $(_a0b).datebox("options").currentText;
	      }, handler: function handler(_a0c) {
	        var now = new Date();
	        $(_a0c).datebox("calendar").calendar({ year: now.getFullYear(), month: now.getMonth() + 1, current: new Date(now.getFullYear(), now.getMonth(), now.getDate()) });
	        _9f9(_a0c);
	      } }, { text: function text(_a0d) {
	        return $(_a0d).datebox("options").closeText;
	      }, handler: function handler(_a0e) {
	        $(this).closest("div.combo-panel").panel("close");
	      } }], formatter: function formatter(date) {
	      var y = date.getFullYear();
	      var m = date.getMonth() + 1;
	      var d = date.getDate();
	      return (m < 10 ? "0" + m : m) + "-" + (d < 10 ? "0" + d : d) + "-" + y;
	    }, parser: function parser(s) {
	      if (!s) {
	        return new Date();
	      }
	      var ss = s.split("-");
	      var m = parseInt(ss[0], 10);
	      var d = parseInt(ss[1], 10);
	      var y = parseInt(ss[2], 10);
	      if (!isNaN(y) && !isNaN(m) && !isNaN(d)) {
	        return new Date(y, m - 1, d);
	      } else {
	        return new Date();
	      }
	    }, onSelect: function onSelect(date) {} });
	})(jQuery);
	(function ($) {
	  function _a0f(_a10) {
	    var _a11 = $.data(_a10, "datetimebox");
	    var opts = _a11.options;
	    $(_a10).datebox($.extend({}, opts, { onShowPanel: function onShowPanel() {
	        var _a12 = $(this).datetimebox("getValue");
	        _a18(this, _a12, true);
	        opts.onShowPanel.call(this);
	      }, formatter: $.fn.datebox.defaults.formatter, parser: $.fn.datebox.defaults.parser }));
	    $(_a10).removeClass("datebox-f").addClass("datetimebox-f");
	    $(_a10).datebox("calendar").calendar({ onSelect: function onSelect(date) {
	        opts.onSelect.call(this.target, date);
	      } });
	    if (!_a11.spinner) {
	      var _a13 = $(_a10).datebox("panel");
	      var p = $("<div style=\"padding:2px\"><input></div>").insertAfter(_a13.children("div.datebox-calendar-inner"));
	      _a11.spinner = p.children("input");
	    }
	    _a11.spinner.timespinner({ width: opts.spinnerWidth, showSeconds: opts.showSeconds, separator: opts.timeSeparator });
	    $(_a10).datetimebox("initValue", opts.value);
	  };
	  function _a14(_a15) {
	    var c = $(_a15).datetimebox("calendar");
	    var t = $(_a15).datetimebox("spinner");
	    var date = c.calendar("options").current;
	    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), t.timespinner("getHours"), t.timespinner("getMinutes"), t.timespinner("getSeconds"));
	  };
	  function _a16(_a17, q) {
	    _a18(_a17, q, true);
	  };
	  function _a19(_a1a) {
	    var opts = $.data(_a1a, "datetimebox").options;
	    var date = _a14(_a1a);
	    _a18(_a1a, opts.formatter.call(_a1a, date));
	    $(_a1a).combo("hidePanel");
	  };
	  function _a18(_a1b, _a1c, _a1d) {
	    var opts = $.data(_a1b, "datetimebox").options;
	    $(_a1b).combo("setValue", _a1c);
	    if (!_a1d) {
	      if (_a1c) {
	        var date = opts.parser.call(_a1b, _a1c);
	        $(_a1b).combo("setText", opts.formatter.call(_a1b, date));
	        $(_a1b).combo("setValue", opts.formatter.call(_a1b, date));
	      } else {
	        $(_a1b).combo("setText", _a1c);
	      }
	    }
	    var date = opts.parser.call(_a1b, _a1c);
	    $(_a1b).datetimebox("calendar").calendar("moveTo", date);
	    $(_a1b).datetimebox("spinner").timespinner("setValue", _a1e(date));
	    function _a1e(date) {
	      function _a1f(_a20) {
	        return (_a20 < 10 ? "0" : "") + _a20;
	      };
	      var tt = [_a1f(date.getHours()), _a1f(date.getMinutes())];
	      if (opts.showSeconds) {
	        tt.push(_a1f(date.getSeconds()));
	      }
	      return tt.join($(_a1b).datetimebox("spinner").timespinner("options").separator);
	    };
	  };
	  $.fn.datetimebox = function (_a21, _a22) {
	    if (typeof _a21 == "string") {
	      var _a23 = $.fn.datetimebox.methods[_a21];
	      if (_a23) {
	        return _a23(this, _a22);
	      } else {
	        return this.datebox(_a21, _a22);
	      }
	    }
	    _a21 = _a21 || {};
	    return this.each(function () {
	      var _a24 = $.data(this, "datetimebox");
	      if (_a24) {
	        $.extend(_a24.options, _a21);
	      } else {
	        $.data(this, "datetimebox", { options: $.extend({}, $.fn.datetimebox.defaults, $.fn.datetimebox.parseOptions(this), _a21) });
	      }
	      _a0f(this);
	    });
	  };
	  $.fn.datetimebox.methods = { options: function options(jq) {
	      var _a25 = jq.datebox("options");
	      return $.extend($.data(jq[0], "datetimebox").options, { originalValue: _a25.originalValue, disabled: _a25.disabled, readonly: _a25.readonly });
	    }, cloneFrom: function cloneFrom(jq, from) {
	      return jq.each(function () {
	        $(this).datebox("cloneFrom", from);
	        $.data(this, "datetimebox", { options: $.extend(true, {}, $(from).datetimebox("options")), spinner: $(from).datetimebox("spinner") });
	        $(this).removeClass("datebox-f").addClass("datetimebox-f");
	      });
	    }, spinner: function spinner(jq) {
	      return $.data(jq[0], "datetimebox").spinner;
	    }, initValue: function initValue(jq, _a26) {
	      return jq.each(function () {
	        var opts = $(this).datetimebox("options");
	        var _a27 = opts.value;
	        if (_a27) {
	          _a27 = opts.formatter.call(this, opts.parser.call(this, _a27));
	        }
	        $(this).combo("initValue", _a27).combo("setText", _a27);
	      });
	    }, setValue: function setValue(jq, _a28) {
	      return jq.each(function () {
	        _a18(this, _a28);
	      });
	    }, reset: function reset(jq) {
	      return jq.each(function () {
	        var opts = $(this).datetimebox("options");
	        $(this).datetimebox("setValue", opts.originalValue);
	      });
	    } };
	  $.fn.datetimebox.parseOptions = function (_a29) {
	    var t = $(_a29);
	    return $.extend({}, $.fn.datebox.parseOptions(_a29), $.parser.parseOptions(_a29, ["timeSeparator", "spinnerWidth", { showSeconds: "boolean" }]));
	  };
	  $.fn.datetimebox.defaults = $.extend({}, $.fn.datebox.defaults, { spinnerWidth: "100%", showSeconds: true, timeSeparator: ":", keyHandler: { up: function up(e) {}, down: function down(e) {}, left: function left(e) {}, right: function right(e) {}, enter: function enter(e) {
	        _a19(this);
	      }, query: function query(q, e) {
	        _a16(this, q);
	      } }, buttons: [{ text: function text(_a2a) {
	        return $(_a2a).datetimebox("options").currentText;
	      }, handler: function handler(_a2b) {
	        var opts = $(_a2b).datetimebox("options");
	        _a18(_a2b, opts.formatter.call(_a2b, new Date()));
	        $(_a2b).datetimebox("hidePanel");
	      } }, { text: function text(_a2c) {
	        return $(_a2c).datetimebox("options").okText;
	      }, handler: function handler(_a2d) {
	        _a19(_a2d);
	      } }, { text: function text(_a2e) {
	        return $(_a2e).datetimebox("options").closeText;
	      }, handler: function handler(_a2f) {
	        $(_a2f).datetimebox("hidePanel");
	      } }], formatter: function formatter(date) {
	      var h = date.getHours();
	      var M = date.getMinutes();
	      var s = date.getSeconds();
	      function _a30(_a31) {
	        return (_a31 < 10 ? "0" : "") + _a31;
	      };
	      var _a32 = $(this).datetimebox("spinner").timespinner("options").separator;
	      var r = $.fn.datebox.defaults.formatter(date) + " " + _a30(h) + _a32 + _a30(M);
	      if ($(this).datetimebox("options").showSeconds) {
	        r += _a32 + _a30(s);
	      }
	      return r;
	    }, parser: function parser(s) {
	      if ($.trim(s) == "") {
	        return new Date();
	      }
	      var dt = s.split(" ");
	      var d = $.fn.datebox.defaults.parser(dt[0]);
	      if (dt.length < 2) {
	        return d;
	      }
	      var _a33 = $(this).datetimebox("spinner").timespinner("options").separator;
	      var tt = dt[1].split(_a33);
	      var hour = parseInt(tt[0], 10) || 0;
	      var _a34 = parseInt(tt[1], 10) || 0;
	      var _a35 = parseInt(tt[2], 10) || 0;
	      return new Date(d.getFullYear(), d.getMonth(), d.getDate(), hour, _a34, _a35);
	    } });
	})(jQuery);
	(function ($) {
	  function init(_a36) {
	    var _a37 = $("<div class=\"slider\">" + "<div class=\"slider-inner\">" + "<a href=\"javascript:void(0)\" class=\"slider-handle\"></a>" + "<span class=\"slider-tip\"></span>" + "</div>" + "<div class=\"slider-rule\"></div>" + "<div class=\"slider-rulelabel\"></div>" + "<div style=\"clear:both\"></div>" + "<input type=\"hidden\" class=\"slider-value\">" + "</div>").insertAfter(_a36);
	    var t = $(_a36);
	    t.addClass("slider-f").hide();
	    var name = t.attr("name");
	    if (name) {
	      _a37.find("input.slider-value").attr("name", name);
	      t.removeAttr("name").attr("sliderName", name);
	    }
	    _a37.bind("_resize", function (e, _a38) {
	      if ($(this).hasClass("easyui-fluid") || _a38) {
	        _a39(_a36);
	      }
	      return false;
	    });
	    return _a37;
	  };
	  function _a39(_a3a, _a3b) {
	    var _a3c = $.data(_a3a, "slider");
	    var opts = _a3c.options;
	    var _a3d = _a3c.slider;
	    if (_a3b) {
	      if (_a3b.width) {
	        opts.width = _a3b.width;
	      }
	      if (_a3b.height) {
	        opts.height = _a3b.height;
	      }
	    }
	    _a3d._size(opts);
	    if (opts.mode == "h") {
	      _a3d.css("height", "");
	      _a3d.children("div").css("height", "");
	    } else {
	      _a3d.css("width", "");
	      _a3d.children("div").css("width", "");
	      _a3d.children("div.slider-rule,div.slider-rulelabel,div.slider-inner")._outerHeight(_a3d._outerHeight());
	    }
	    _a3e(_a3a);
	  };
	  function _a3f(_a40) {
	    var _a41 = $.data(_a40, "slider");
	    var opts = _a41.options;
	    var _a42 = _a41.slider;
	    var aa = opts.mode == "h" ? opts.rule : opts.rule.slice(0).reverse();
	    if (opts.reversed) {
	      aa = aa.slice(0).reverse();
	    }
	    _a43(aa);
	    function _a43(aa) {
	      var rule = _a42.find("div.slider-rule");
	      var _a44 = _a42.find("div.slider-rulelabel");
	      rule.empty();
	      _a44.empty();
	      for (var i = 0; i < aa.length; i++) {
	        var _a45 = i * 100 / (aa.length - 1) + "%";
	        var span = $("<span></span>").appendTo(rule);
	        span.css(opts.mode == "h" ? "left" : "top", _a45);
	        if (aa[i] != "|") {
	          span = $("<span></span>").appendTo(_a44);
	          span.html(aa[i]);
	          if (opts.mode == "h") {
	            span.css({ left: _a45, marginLeft: -Math.round(span.outerWidth() / 2) });
	          } else {
	            span.css({ top: _a45, marginTop: -Math.round(span.outerHeight() / 2) });
	          }
	        }
	      }
	    };
	  };
	  function _a46(_a47) {
	    var _a48 = $.data(_a47, "slider");
	    var opts = _a48.options;
	    var _a49 = _a48.slider;
	    _a49.removeClass("slider-h slider-v slider-disabled");
	    _a49.addClass(opts.mode == "h" ? "slider-h" : "slider-v");
	    _a49.addClass(opts.disabled ? "slider-disabled" : "");
	    var _a4a = _a49.find(".slider-inner");
	    _a4a.html("<a href=\"javascript:void(0)\" class=\"slider-handle\"></a>" + "<span class=\"slider-tip\"></span>");
	    if (opts.range) {
	      _a4a.append("<a href=\"javascript:void(0)\" class=\"slider-handle\"></a>" + "<span class=\"slider-tip\"></span>");
	    }
	    _a49.find("a.slider-handle").draggable({ axis: opts.mode, cursor: "pointer", disabled: opts.disabled, onDrag: function onDrag(e) {
	        var left = e.data.left;
	        var _a4b = _a49.width();
	        if (opts.mode != "h") {
	          left = e.data.top;
	          _a4b = _a49.height();
	        }
	        if (left < 0 || left > _a4b) {
	          return false;
	        } else {
	          _a4c(left);
	          return false;
	        }
	      }, onBeforeDrag: function onBeforeDrag() {
	        _a48.isDragging = true;
	      }, onStartDrag: function onStartDrag() {
	        opts.onSlideStart.call(_a47, opts.value);
	      }, onStopDrag: function onStopDrag(e) {
	        _a4c(opts.mode == "h" ? e.data.left : e.data.top);
	        opts.onSlideEnd.call(_a47, opts.value);
	        opts.onComplete.call(_a47, opts.value);
	        _a48.isDragging = false;
	      } });
	    _a49.find("div.slider-inner").unbind(".slider").bind("mousedown.slider", function (e) {
	      if (_a48.isDragging || opts.disabled) {
	        return;
	      }
	      var pos = $(this).offset();
	      _a4c(opts.mode == "h" ? e.pageX - pos.left : e.pageY - pos.top);
	      opts.onComplete.call(_a47, opts.value);
	    });
	    function _a4c(pos) {
	      var _a4d = _a4e(_a47, pos);
	      var s = Math.abs(_a4d % opts.step);
	      if (s < opts.step / 2) {
	        _a4d -= s;
	      } else {
	        _a4d = _a4d - s + opts.step;
	      }
	      if (opts.range) {
	        var v1 = opts.value[0];
	        var v2 = opts.value[1];
	        var m = parseFloat((v1 + v2) / 2);
	        if (_a4d < v1) {
	          v1 = _a4d;
	        } else {
	          if (_a4d > v2) {
	            v2 = _a4d;
	          } else {
	            _a4d < m ? v1 = _a4d : v2 = _a4d;
	          }
	        }
	        $(_a47).slider("setValues", [v1, v2]);
	      } else {
	        $(_a47).slider("setValue", _a4d);
	      }
	    };
	  };
	  function _a4f(_a50, _a51) {
	    var _a52 = $.data(_a50, "slider");
	    var opts = _a52.options;
	    var _a53 = _a52.slider;
	    var _a54 = $.isArray(opts.value) ? opts.value : [opts.value];
	    var _a55 = [];
	    if (!$.isArray(_a51)) {
	      _a51 = $.map(String(_a51).split(opts.separator), function (v) {
	        return parseFloat(v);
	      });
	    }
	    _a53.find(".slider-value").remove();
	    var name = $(_a50).attr("sliderName") || "";
	    for (var i = 0; i < _a51.length; i++) {
	      var _a56 = _a51[i];
	      if (_a56 < opts.min) {
	        _a56 = opts.min;
	      }
	      if (_a56 > opts.max) {
	        _a56 = opts.max;
	      }
	      var _a57 = $("<input type=\"hidden\" class=\"slider-value\">").appendTo(_a53);
	      _a57.attr("name", name);
	      _a57.val(_a56);
	      _a55.push(_a56);
	      var _a58 = _a53.find(".slider-handle:eq(" + i + ")");
	      var tip = _a58.next();
	      var pos = _a59(_a50, _a56);
	      if (opts.showTip) {
	        tip.show();
	        tip.html(opts.tipFormatter.call(_a50, _a56));
	      } else {
	        tip.hide();
	      }
	      if (opts.mode == "h") {
	        var _a5a = "left:" + pos + "px;";
	        _a58.attr("style", _a5a);
	        tip.attr("style", _a5a + "margin-left:" + -Math.round(tip.outerWidth() / 2) + "px");
	      } else {
	        var _a5a = "top:" + pos + "px;";
	        _a58.attr("style", _a5a);
	        tip.attr("style", _a5a + "margin-left:" + -Math.round(tip.outerWidth()) + "px");
	      }
	    }
	    opts.value = opts.range ? _a55 : _a55[0];
	    $(_a50).val(opts.range ? _a55.join(opts.separator) : _a55[0]);
	    if (_a54.join(",") != _a55.join(",")) {
	      opts.onChange.call(_a50, opts.value, opts.range ? _a54 : _a54[0]);
	    }
	  };
	  function _a3e(_a5b) {
	    var opts = $.data(_a5b, "slider").options;
	    var fn = opts.onChange;
	    opts.onChange = function () {};
	    _a4f(_a5b, opts.value);
	    opts.onChange = fn;
	  };
	  function _a59(_a5c, _a5d) {
	    var _a5e = $.data(_a5c, "slider");
	    var opts = _a5e.options;
	    var _a5f = _a5e.slider;
	    var size = opts.mode == "h" ? _a5f.width() : _a5f.height();
	    var pos = opts.converter.toPosition.call(_a5c, _a5d, size);
	    if (opts.mode == "v") {
	      pos = _a5f.height() - pos;
	    }
	    if (opts.reversed) {
	      pos = size - pos;
	    }
	    return pos.toFixed(0);
	  };
	  function _a4e(_a60, pos) {
	    var _a61 = $.data(_a60, "slider");
	    var opts = _a61.options;
	    var _a62 = _a61.slider;
	    var size = opts.mode == "h" ? _a62.width() : _a62.height();
	    var _a63 = opts.converter.toValue.call(_a60, opts.mode == "h" ? opts.reversed ? size - pos : pos : size - pos, size);
	    return _a63.toFixed(0);
	  };
	  $.fn.slider = function (_a64, _a65) {
	    if (typeof _a64 == "string") {
	      return $.fn.slider.methods[_a64](this, _a65);
	    }
	    _a64 = _a64 || {};
	    return this.each(function () {
	      var _a66 = $.data(this, "slider");
	      if (_a66) {
	        $.extend(_a66.options, _a64);
	      } else {
	        _a66 = $.data(this, "slider", { options: $.extend({}, $.fn.slider.defaults, $.fn.slider.parseOptions(this), _a64), slider: init(this) });
	        $(this).removeAttr("disabled");
	      }
	      var opts = _a66.options;
	      opts.min = parseFloat(opts.min);
	      opts.max = parseFloat(opts.max);
	      if (opts.range) {
	        if (!$.isArray(opts.value)) {
	          opts.value = $.map(String(opts.value).split(opts.separator), function (v) {
	            return parseFloat(v);
	          });
	        }
	        if (opts.value.length < 2) {
	          opts.value.push(opts.max);
	        }
	      } else {
	        opts.value = parseFloat(opts.value);
	      }
	      opts.step = parseFloat(opts.step);
	      opts.originalValue = opts.value;
	      _a46(this);
	      _a3f(this);
	      _a39(this);
	    });
	  };
	  $.fn.slider.methods = { options: function options(jq) {
	      return $.data(jq[0], "slider").options;
	    }, destroy: function destroy(jq) {
	      return jq.each(function () {
	        $.data(this, "slider").slider.remove();
	        $(this).remove();
	      });
	    }, resize: function resize(jq, _a67) {
	      return jq.each(function () {
	        _a39(this, _a67);
	      });
	    }, getValue: function getValue(jq) {
	      return jq.slider("options").value;
	    }, getValues: function getValues(jq) {
	      return jq.slider("options").value;
	    }, setValue: function setValue(jq, _a68) {
	      return jq.each(function () {
	        _a4f(this, [_a68]);
	      });
	    }, setValues: function setValues(jq, _a69) {
	      return jq.each(function () {
	        _a4f(this, _a69);
	      });
	    }, clear: function clear(jq) {
	      return jq.each(function () {
	        var opts = $(this).slider("options");
	        _a4f(this, opts.range ? [opts.min, opts.max] : [opts.min]);
	      });
	    }, reset: function reset(jq) {
	      return jq.each(function () {
	        var opts = $(this).slider("options");
	        $(this).slider(opts.range ? "setValues" : "setValue", opts.originalValue);
	      });
	    }, enable: function enable(jq) {
	      return jq.each(function () {
	        $.data(this, "slider").options.disabled = false;
	        _a46(this);
	      });
	    }, disable: function disable(jq) {
	      return jq.each(function () {
	        $.data(this, "slider").options.disabled = true;
	        _a46(this);
	      });
	    } };
	  $.fn.slider.parseOptions = function (_a6a) {
	    var t = $(_a6a);
	    return $.extend({}, $.parser.parseOptions(_a6a, ["width", "height", "mode", { reversed: "boolean", showTip: "boolean", range: "boolean", min: "number", max: "number", step: "number" }]), { value: t.val() || undefined, disabled: t.attr("disabled") ? true : undefined, rule: t.attr("rule") ? eval(t.attr("rule")) : undefined });
	  };
	  $.fn.slider.defaults = { width: "auto", height: "auto", mode: "h", reversed: false, showTip: false, disabled: false, range: false, value: 0, separator: ",", min: 0, max: 100, step: 1, rule: [], tipFormatter: function tipFormatter(_a6b) {
	      return _a6b;
	    }, converter: { toPosition: function toPosition(_a6c, size) {
	        var opts = $(this).slider("options");
	        return (_a6c - opts.min) / (opts.max - opts.min) * size;
	      }, toValue: function toValue(pos, size) {
	        var opts = $(this).slider("options");
	        return opts.min + (opts.max - opts.min) * (pos / size);
	      } }, onChange: function onChange(_a6d, _a6e) {}, onSlideStart: function onSlideStart(_a6f) {}, onSlideEnd: function onSlideEnd(_a70) {}, onComplete: function onComplete(_a71) {} };
	})(jQuery);

	$(function () {
	  $(".fzhujicaidan").removeClass("fzhujicaidan");
	});

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.CommonComponentBox = undefined;

	var _ref;

	var _public_var = __webpack_require__(67);

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var CommonComponentBox = exports.CommonComponentBox = {
	    "SEND_ADDRESS1": {
	        title: "送货地址",
	        href: _public_var.publicVar.authManage,
	        param: _public_var.publicVar.param,
	        wheres: [(_ref = {
	            name_cn: "国家(IOS)",
	            name: "COUNTRY",
	            type: "text"
	        }, _defineProperty(_ref, "type", "select"), _defineProperty(_ref, "selectValue", [{
	            id: 1,
	            text: "123"
	        }, {
	            id: 2,
	            text: "123"
	        }]), _ref), {
	            name_cn: "省(直辖市)",
	            name: "PROVINCE",
	            type: "text"
	        }, {
	            name_cn: "城市",
	            name: "CITY",
	            type: "text"
	        }, {
	            name_cn: "区",
	            name: "ZONE",
	            type: "text"
	        }, {
	            name_cn: "邮编",
	            name: "POST_CODE",
	            type: "text"
	        }, {
	            name_cn: "地址1",
	            name: "ADDRESS1",
	            type: "text"
	        }, {
	            name_cn: "地标",
	            name: "ADDRESS_MARK",
	            type: "text"
	        }, {
	            name_cn: "商圈",
	            name: "BUSINESS_ZONE",
	            type: "text"
	        }],
	        columns: [{ field: 'No_0', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }]
	    },
	    "PUR_ORG": {
	        title: "销售组织",
	        href: _public_var.publicVar.mainUrl.pms001,
	        param: _public_var.publicVar.param,
	        wheres: [{
	            name_cn: "组织编码",
	            name: "ORG_CODE",
	            type: "text"
	        }, {
	            name_cn: "组织名称",
	            name: "ORG_NAME",
	            type: "text"
	        }, {
	            name_cn: "上级机构",
	            name: "PARENT_ORG_NAME",
	            type: "text"
	        }, {
	            name_cn: "层级",
	            name: "LEVEL_NAME",
	            type: "select",
	            selectValue: [{
	                "id": "1",
	                "text": "集团"
	            }, {
	                "id": "2",
	                "text": "公司"
	            }, {
	                "id": "3",
	                "text": "部门"
	            }, {
	                "id": "4",
	                "text": "办事处"
	            }]
	        }, {
	            name_cn: "销售组织",
	            name: "IS_SALES_ORG_NAME",
	            type: "select",
	            selectValue: [{
	                "id": "1",
	                "text": "是"
	            }, {
	                "id": "2",
	                "text": "否"
	            }]
	        }, {
	            name_cn: "采购组织",
	            name: "IS_INVENTORY_ORG_NAME",
	            type: "select",
	            selectValue: [{
	                "id": "1",
	                "text": "是"
	            }, {
	                "id": "2",
	                "text": "否"
	            }]
	        }, {
	            name_cn: "库存组织",
	            name: "IS_INVENTORY_ORG_NAME",
	            type: "select",
	            selectValue: [{
	                "id": "1",
	                "text": "是"
	            }, {
	                "id": "2",
	                "text": "否"
	            }]
	        }, {
	            name_cn: "财务组织",
	            name: "IS_FINANCE_ORG_NAME",
	            type: "select",
	            selectValue: [{
	                "id": "1",
	                "text": "是"
	            }, {
	                "id": "2",
	                "text": "否"
	            }]
	        }],

	        columns: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }]
	    },
	    "PUR_MAN": {
	        title: "销售人员",
	        href: _public_var.publicVar.mainUrl.pms001,
	        param: _public_var.publicVar.param,
	        wheres: [{
	            name_cn: "员工编号",
	            name: "EMPLOYEE_CODE",
	            type: "text"
	        }, {
	            name_cn: "员工中文姓名",
	            name: "NAME_CN",
	            type: "text"
	        }, {
	            name_cn: "员工英文姓名",
	            name: "NAME_EN",
	            type: "text"
	        }, {
	            name_cn: "所属部门",
	            name: "ORG_NAME",
	            type: "text"
	        }],
	        columns: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }, { field: 'createPersonId', title: '创建人', width: 150, align: 'center', editor: 'datebox', sortable: true }, { field: 'updatePersonId', title: '更新人', width: 150, align: 'center', editor: 'datebox', sortable: true }, { field: 'updateTime', title: '更新时间', width: 150, align: 'center', editor: 'datebox', sortable: true }]
	    },
	    "LINE_TYPE_NAME": {
	        title: "业务行类型",
	        href: _public_var.publicVar.mainUrl.pms001,
	        param: _public_var.publicVar.param,
	        wheres: [{
	            name_cn: "编号",
	            name: "LINE_TYPE_CODE",
	            type: "text"
	        }, {
	            name_cn: "名称",
	            name: "LINE_TYPE_NAME",
	            type: "text"
	        }],
	        columns: [{ field: '', title: '', checkbox: 'true' }, { field: 'id', title: '权限ID', width: 150, align: 'center', editor: 'textbox', hidden: 'true' }, { field: 'code', title: '权限编码', width: 180, align: 'center', editor: 'textbox' }, { field: 'statesName', title: '状态', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'name', title: '权限名称', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'route', title: '权限路由', width: 200, align: 'center', editor: 'textbox', sortable: true }, { field: 'parentAuthName', title: '父级权限', width: 80, align: 'center', editor: 'textbox', sortable: true }, { field: 'sortName', title: '权限类别', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'typeName', title: '权限类型', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'menuCls', title: '图标样式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'createTime', title: '创建时间', width: 150, align: 'center', editor: 'textbox', sortable: true }, { field: 'openModeName', title: '打开模式', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'orders', title: '同级排序', width: 80, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'level', title: '层级', width: 150, align: 'center', editor: 'textbox', hidden: 'true', sortable: true }, { field: 'productName', title: '所属产品', width: 150, align: 'center', editor: 'datebox', hidden: 'true', sortable: true }]
	    },
	    "detaildialog": {
	        title: "权限详情",
	        inputs: [{
	            names: "权限名称",
	            key: "name"
	        }, {
	            names: "权限路由",
	            key: "route"
	        }, {
	            names: "权限类别",
	            key: "sortName"
	        }, {
	            names: "权限类型",
	            key: "typeName"
	        }, {
	            names: "父级权限",
	            key: "parentAuthName"
	        }, {
	            names: "菜单图标",
	            key: "menuCls"
	        }, {
	            names: "打开方式",
	            key: "openModeName"
	        }, {
	            names: "排序号",
	            key: "orders"
	        }, {
	            names: "状态",
	            key: "statesName"
	        }, {
	            names: "创建人",
	            key: "createPersonName"
	        }, {
	            names: "创建时间",
	            key: "createTime"
	        }, {
	            names: "更新人",
	            key: "updatePersonName"
	        }, {
	            names: "更新时间",
	            key: "updateTime"
	        }]
	    },

	    "LongParentAuthId": {
	        title: "父级权限",
	        href: _public_var.publicVar.pms001,
	        param: _public_var.publicVar.param
	    }
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(72);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(47)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept(72, function() {
				var newContent = __webpack_require__(72);
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(30)();
	// imports


	// module
	exports.push([module.id, ".panel-data {\n  text-align: left; }\n\n.panel-data .btn {\n  width: 70px;\n  height: 30px;\n  padding: 0;\n  margin: 10px 5px 8px; }\n\n.panel-data .btn:nth-child(1) {\n  margin: 10px 5px 8px 20px; }\n\n._grid {\n  border-top: 5px solid #64B7E6;\n  margin: 0 30px 0 5px; }\n\n._grid .datagrid-body td {\n  border-bottom: 1px #FFFFFF solid;\n  border-right: 1px #FFFFFF solid;\n  margin: 0;\n  padding: 0;\n  height: 0px; }\n\n._grid .datagrid-cell {\n  line-height: normal; }\n\n._grid .tree-title {\n  font-size: 14px;\n  display: inline-block;\n  text-decoration: none;\n  vertical-align: middle;\n  white-space: nowrap;\n  padding-left: 5px;\n  height: 27px;\n  line-height: 27px;\n  color: #000; }\n\n._grid .tree-expanded,\n._grid .tree-collapsed,\n._grid .tree-folder,\n._grid .tree-file {\n  display: inline-block;\n  width: 16px;\n  height: 18px;\n  vertical-align: top;\n  overflow: hidden; }\n\n._grid .tree-expanded {\n  background: url(" + __webpack_require__(73) + ") no-repeat -18px 0px; }\n\n._grid .tree-expanded-hover {\n  background: url(" + __webpack_require__(73) + ") no-repeat -50px 0px; }\n\n._grid .tree-collapsed {\n  background: url(" + __webpack_require__(73) + ") no-repeat 0px 0px; }\n\n._grid .tree-collapsed-hover {\n  background: url(" + __webpack_require__(73) + ") no-repeat -32px 0px; }\n\n._grid .tree-folder {\n  background: url(" + __webpack_require__(73) + ") no-repeat -208px 0; }\n\n._grid .tree-folder-open {\n  background: url(" + __webpack_require__(73) + ") no-repeat -224px 0; }\n\n._grid .tree-file {\n  background: url(" + __webpack_require__(73) + ") no-repeat -240px 0; }\n\n.title {\n  padding: 10px 0 0 20px;\n  text-align: left; }\n\n.glyphicon-search:before, .glyphicon-list:before {\n  content: '';\n  display: block;\n  width: 16px;\n  height: 16px; }\n\n.glyphicon-search:before, .glyphicon-list:before {\n  background: url(" + __webpack_require__(74) + ");\n  background-size: 100% 100%; }\n\n.glyphicon-list:before {\n  background: url(" + __webpack_require__(75) + ");\n  background-size: 100% 100%; }\n\n.btn-primary {\n  background: #64B7E6;\n  border: #64B7E6; }\n\n.datagrid-header-inner {\n  background: #fff; }\n\n.datagrid-header td {\n  height: 25px !important;\n  border: 0; }\n\n.datagrid-header .datagrid-cell span {\n  color: #646464;\n  font-size: 14px;\n  font-family: \"Microsoft YaHei[Regular]\"; }\n\n.datagrid-body .datagrid-cell span {\n  color: #646464;\n  font-size: 14px;\n  font-family: \"Microsoft YaHei[Regular]\"; }\n\n.datagrid-btable {\n  width: 100%; }\n\n.showPanel {\n  animation-name: show;\n  animation-duration: 0.5s;\n  animation-delay: 0;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  /*Safari and Chrome*/\n  -webkit-animation-name: show;\n  -webkit-animation-duration: 0.5s;\n  -webkit-animation-delay: 0;\n  -webkit-animation-iteration-count: 1;\n  -webkit-animation-fill-mode: forwards; }\n\n.hidePanel {\n  animation-name: hide;\n  animation-duration: 0.5s;\n  animation-delay: 0;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  /*Safari and Chrome*/\n  -webkit-animation-name: hide;\n  -webkit-animation-duration: 0.5s;\n  -webkit-animation-delay: 0;\n  -webkit-animation-iteration-count: 1;\n  -webkit-animation-fill-mode: forwards; }\n\n@keyframes show {\n  0% {\n    top: -600px; }\n  100% {\n    top: 100px; } }\n\n@-webkit-keyframes show {\n  0% {\n    top: -600px; }\n  100% {\n    top: 100px; } }\n\n@keyframes hide {\n  0% {\n    top: 100px; }\n  100% {\n    top: -600px; } }\n\n@-webkit-keyframes hide {\n  0% {\n    top: 100px; }\n  100% {\n    top: -600px; } }\n", ""]);

	// exports


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "b9bff72489b9aaec37b4ed3077220603.png";

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "dd2851bddf1ed4a60935a4fe637461af.png";

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "b6f16360b0257d686a9f00376b17368a.png";

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _customerInformationManagerAddComponent = __webpack_require__(77);

	var _customerInformationManagerAddComponent2 = _interopRequireDefault(_customerInformationManagerAddComponent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var customerInformationManagerAddModule = angular.module("customerAddComponent", []).component("customerAddComponent", _customerInformationManagerAddComponent2.default);

	exports.default = customerInformationManagerAddModule;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _customerInformationManagerAdd = __webpack_require__(78);

	var _customerInformationManagerAdd2 = _interopRequireDefault(_customerInformationManagerAdd);

	var _select = __webpack_require__(79);

	var _select2 = _interopRequireDefault(_select);

	var _global_val = __webpack_require__(70);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var customerInformationManagerAddComponent = {
	    template: _customerInformationManagerAdd2.default,
	    bindings: {
	        resolve: '<',
	        close: '&',
	        dismiss: '&'
	    },
	    style: _select2.default,
	    controller: function controller($scope, $http, $uibModal, ajaxService) {
	        var ctrl = this,
	            param = {
	            "RequestID": "9999",
	            "RequestFormat": "JSON",
	            "SessionKey": "38e2aa43-fb68-4c7f-a815-f0b2607856c0",
	            "SessionTimeout": "60",
	            "Version": "1.0",
	            "DBRequest": {
	                "Field": [{
	                    "UDF_CODE": ["CUSTOMER_TYPE", "INVOICE_TYPE", "TAX_TYPE", "IMPORTANCE_DEGREE", "TRADE", "AREA", "CHANNEL"]
	                }, "UDF_ID", "UDF_ITEM_NAME"],
	                "Page": {
	                    "Start": "1",
	                    "End": "30"
	                }
	            }
	        };

	        ctrl.$onInit = function () {
	            $scope.customer = ctrl.resolve.customer || {};
	            $scope.customer.PUR_ORG = {};
	            $scope.customer.PUR_ORG.ORG_NAME = $scope.customer.ORG_NAME;
	            $scope.customer.PUR_MAN = {};
	            $scope.customer.PUR_MAN.NAME_CN = $scope.customer.SALES_NAME_CN;
	            $scope.buttonType = ctrl.resolve.buttonType;
	            console.log($scope.customer);
	        };

	        param = JSON.stringify(param);

	        ajaxService.getAjaxPost("http://10.99.2.61/SCMC/SystemBase/Udf/getmutiUdf", param).then(function (res) {
	            ctrl.CUSTOMER_TYPE = res.DBData.CUSTOMER_TYPE;
	            ctrl.INVOICE_TYPE = res.DBData.INVOICE_TYPE;
	            ctrl.TAX_TYPE = res.DBData.TAX_TYPE;
	            ctrl.IMPORTANCE_DEGREE = res.DBData.IMPORTANCE_DEGREE;
	            ctrl.TRADE = res.DBData.TRADE;
	            ctrl.AREA = res.DBData.AREA;
	            ctrl.CHANNEL = res.DBData.CHANNEL;

	            if ($scope.customer.CUSTOMER_TYPE) {
	                $scope.customer.CUSTOMER_TYPE = ctrl.CUSTOMER_TYPE.filter(function (res) {
	                    return res.id == $scope.customer.CUSTOMER_TYPE;
	                })[0];
	            }
	            if ($scope.customer.INVOICE_TYPE) {
	                $scope.customer.INVOICE_TYPE = ctrl.INVOICE_TYPE.filter(function (res) {
	                    return res.id == $scope.customer.INVOICE_TYPE;
	                })[0];
	            }
	        });

	        ctrl.CUSTOMER_STATUS = [{ "id": "1", "text": "启用" }, { "id": "2", "text": "禁用" }];

	        $scope.today = function () {
	            $scope.dt = new Date();
	        };

	        $scope.today();

	        $scope.clear = function () {
	            $scope.dt = null;
	        };

	        $scope.inlineOptions = {
	            minDate: new Date(),
	            showWeeks: true
	        };

	        $scope.dateOptions = {
	            formatYear: 'yy',
	            maxDate: new Date(2030, 5, 22),
	            minDate: new Date(1970, 5, 22),
	            startingDay: 1
	        };

	        $scope.open = function (val) {
	            console.log($scope.myForm);
	            $scope.popup[val].opened = true;
	        };

	        $scope.setDate = function (year, month, day) {
	            $scope.dt = new Date(year, month, day);
	        };

	        $scope.popup = [{
	            opened: false
	        }, {
	            opened: false
	        }, {
	            opened: false
	        }];

	        ctrl.openModal = function (val) {
	            var modalInstance = $uibModal.open({
	                animation: true,
	                size: "lg",
	                component: 'commonBoxComponent',
	                resolve: {
	                    option: function option() {
	                        return _global_val.CommonComponentBox[val];
	                    }
	                }
	            });

	            modalInstance.result.then(function (selectedItem) {
	                $scope.myForm[val] = selectedItem.entity;
	                if ($scope.myForm.$$success.commonBox) {
	                    $scope.myForm.$$success.commonBox[val] = selectedItem.entity;
	                    $scope.customer[val] = selectedItem.entity;
	                } else {
	                    $scope.myForm.$$success.commonBox = {};
	                    $scope.myForm.$$success.commonBox[val] = selectedItem.entity;
	                    $scope.customer[val] = selectedItem.entity;
	                }
	                console.log($scope.myForm[val]);
	            }, function ($scope) {
	                $log.info('modal-component dismissed at: ' + new Date());
	            });
	        };

	        ctrl.save = function () {
	            console.log($scope.myForm);
	            console.log("保存");

	            if ($scope.myForm.$valid) {
	                (function () {

	                    var data = {};

	                    $scope.myForm.$$success.parse.map(function (res) {
	                        data[res.$name] = res.$viewValue;
	                    });

	                    for (var key in $scope.myForm.$$success.commonBox) {
	                        data[key] = $scope.myForm.$$success.commonBox[key][key];
	                    }

	                    console.log(data);
	                    console.log(JSON.stringify(data));

	                    var param = {
	                        "RequestID": "9999",
	                        "RequestFormat": "JSON",
	                        "SessionKey": "38e2aa43-fb68-4c7f-a815-f0b2607856c0",
	                        "SessionTimeout": "60",
	                        "Version": "1.0",
	                        "DBRequest": {
	                            "Field": [data],
	                            "Page": {
	                                "Start": "1",
	                                "End": "30"
	                            }
	                        }
	                    };

	                    ajaxService.getAjaxPost("http://10.99.2.61/SCMC/CRM/CUSTOMER/insertCustomer", param).then(function (res) {
	                        console.log(res);
	                        ctrl.close({ $value: "success" });
	                    });
	                })();
	            } else {
	                console.log("验证未通过");
	            }
	        };

	        ctrl.modify = function () {
	            console.log("修改");

	            if ($scope.myForm.$valid) {
	                (function () {

	                    var data = {};

	                    if ($scope.myForm.$$success.parse) {
	                        $scope.myForm.$$success.parse.map(function (res) {
	                            console.log(_typeof(res.$viewValue));
	                            if (_typeof(res.$viewValue) === "object") {
	                                data[res.$name] = res.$viewValue.id;
	                            } else {
	                                data[res.$name] = res.$viewValue;
	                            }
	                        });
	                    }

	                    if ($scope.myForm.$$success.commonBox) {
	                        for (var key in $scope.myForm.$$success.commonBox) {
	                            var valueKey = document.querySelector("input[key=" + key + "]").getAttribute("keyText");
	                            data[key] = $scope.myForm.$$success.commonBox[key][valueKey];
	                        }
	                    }

	                    console.log(data);
	                    console.log(JSON.stringify(data));

	                    var param = {
	                        "RequestID": "9999",
	                        "RequestFormat": "JSON",
	                        "SessionKey": "38e2aa43-fb68-4c7f-a815-f0b2607856c0",
	                        "SessionTimeout": "60",
	                        "Version": "1.0",
	                        "DBRequest": {
	                            "Field": data,
	                            "Where": " GID = " + $scope.customer.GID + " "
	                        }
	                    };

	                    console.log(param);

	                    ajaxService.getAjaxPost("http://10.99.2.61/SCMC/CRM/CUSTOMER/updateCustomer", param).then(function (res) {
	                        console.log(res);
	                        ctrl.close({ $value: "success" });
	                    });
	                })();
	            } else {
	                console.log("验证未通过");
	            }
	        };

	        ctrl.cancel = function () {
	            ctrl.dismiss({ $value: 'cancel' });
	        };
	    }
	};

	exports.default = customerInformationManagerAddComponent;

/***/ },
/* 78 */
/***/ function(module, exports) {

	module.exports = "<div class=\"modal-header\" xmlns=\"http://www.w3.org/1999/html\">\n    <h3 class=\"modal-title\" id=\"modal-title\">客户信息新增</h3>\n</div>\n<div class=\"modal-body\" id=\"modal-body\">\n    <div class=\"row\">\n        <form role=\"form\" name=\"myForm\" ng-submit=\"submitForm(myForm.$valid)\" class=\"form-horizontal\" novalidate>\n            <div class=\"col-md-12\">\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>客户编号：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" name=\"customer_no\" class=\"form-control\" placeholder=\"客户编号\" disabled=\"disabled\" ng-model=\"customer.CUSTOMER_CODE\" value=\"customer.CUSTOMER_CODE\"/>\n                        <span class=\"glyphicon glyphicon-ok form-control-feedback\" style=\"padding-right:20px\"\n                              ng-show=\"myForm.customer_no.$dirty && myForm.customer_no.$valid\"></span>\n                    </div>\n\n                    <div class=\"col-md-2\">\n                        <small><strong>中文名称：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\" ng-class=\"{'has-error' : myForm.NAME_CN.$invalid}\">\n                        <input type=\"text\" class=\"form-control\" name=\"NAME_CN\" required placeholder=\"中文名称\" ng-model=\"customer.NAME_CN\" value=\"customer.NAME_CN\"\n                               uib-tooltip=\"必输\"\n                               tooltip-placement=\"left\"\n                               tooltip-trigger=\"'mouseenter'\"\n                               tooltip-enable=\"!inputModel\"\n                        />\n                        <span class=\"glyphicon glyphicon-ok form-control-feedback\" style=\"padding-right:20px\"\n                              ng-show=\"myForm.NAME_CN.$dirty && myForm.NAME_CN.$valid\"></span>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>英文名称：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\" ng-class=\"{'has-error' : myForm.NAME_EN.$invalid}\">\n                        <input type=\"text\" class=\"form-control\" name=\"NAME_EN\" placeholder=\"英文名称\" required ng-model=\"customer.NAME_EN\"\n                               uib-tooltip=\"必输\"\n                               tooltip-placement=\"left\"\n                               tooltip-trigger=\"'mouseenter'\"\n                               tooltip-enable=\"!inputModel\"\n                        />\n                        <span class=\"glyphicon glyphicon-ok form-control-feedback\" style=\"padding-right:20px\"\n                              ng-show=\"myForm.NAME_EN.$dirty && myForm.NAME_EN.$valid\"></span>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>法人姓名：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\" ng-class=\"{'has-error' : myForm.LEGAL_PERSON.$invalid}\">\n                        <input type=\"text\" class=\"form-control\" name=\"LEGAL_PERSON\" ng-model=\"customer.LEGAL_PERSON\" placeholder=\"法人姓名\"\n                               required\n                               uib-tooltip=\"必输\"\n                               tooltip-placement=\"left\"\n                               tooltip-trigger=\"'mouseenter'\"\n                               tooltip-enable=\"!inputModel\"\n                        />\n                        <span class=\"glyphicon glyphicon-ok form-control-feedback\" style=\"padding-right:20px\"\n                              ng-show=\"myForm.LEGAL_PERSON.$dirty && myForm.LEGAL_PERSON.$valid\"></span>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>税号：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" class=\"form-control\" name=\"TAX\" placeholder=\"税号\" ng-model=\"customer.TAX\"/>\n                        <span class=\"glyphicon glyphicon-ok form-control-feedback\" style=\"padding-right:20px\"\n                              ng-show=\"myForm.TAX.$dirty && myForm.TAX.$valid\"></span>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>企业类型：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\" ng-class=\"{'has-error' : myForm.CUSTOMER_TYPE.$invalid}\">\n                        <ui-select ng-model=\"customer.CUSTOMER_TYPE\" name=\"CUSTOMER_TYPE\" theme=\"select2\" style=\"min-width: 200px;\" title=\"Choose a person\" >\n                            <ui-select-match placeholder=\"请选择\">{{$select.selected.text}}</ui-select-match>\n                            <ui-select-choices repeat=\"cust in $ctrl.CUSTOMER_TYPE | propsFilter: {id: $select.search, text: $select.search}\">\n                                <div>{{cust.text}}</div>\n                                <small>\n                                    id: {{cust.id}}\n                                    text: <span>{{cust.text}}</span>\n                                </small>\n                            </ui-select-choices>\n                        </ui-select>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>营业日期：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" placeholder=\"yyyy-mm-dd\" class=\"form-control\" uib-datepicker-popup name=\"BUSINESS_DATE\" ng-model=\"customer.BUSINESS_DATE\" is-open=\"popup[0].opened\" datepicker-options=\"dateOptions\" close-text=\"Close\" ng-click=\"open(0)\"/>\n                        <span class=\"glyphicon glyphicon-calendar form-control-feedback\" style=\"padding-right:20px\"></span>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>信用额度：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" class=\"form-control\" name=\"CREDIT_LIMIT\" placeholder=\"信用额度\" ng-model=\"customer.CREDIT_LIMIT\"/>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>已用额度：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" class=\"form-control\" name=\"CREDIT\" placeholder=\"已用额度\" ng-model=\"customer.CREDIT\"/>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>发票种类：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <ui-select ng-model=\"customer.INVOICE_TYPE\" name=\"INVOICE_TYPE\" theme=\"select2\" style=\"min-width:200px\" title=\"Choose a person\">\n                            <ui-select-match placeholder=\"请选择\">{{$select.selected.text}}</ui-select-match>\n                            <ui-select-choices repeat=\"invoice in $ctrl.INVOICE_TYPE | propsFilter: {id: $select.search}\">\n                                <div>{{invoice.text}}</div>\n                                <small>\n                                    id: {{invoice.id}}\n                                    text: <span>{{invoice.text}}</span>\n                                </small>\n                            </ui-select-choices>\n                        </ui-select>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>信用额度控制：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"checkbox\" name=\"IS_CREDIT\" placeholder=\"信用额度\" ng-model=\"customer.IS_CREDIT\"/>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>往来户：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" ng-click=\"$ctrl.openModal('CONTACT_CUST')\"  ng-model=\"myForm.CONTACT_CUST.NAME_CN\" value=\"{{myForm.CONTACT_CUST.NAME_CN}}\" class=\"form-control\" name=\"CONTACT_CUST_NAME_CN\" placeholder=\"请选择\"/>\n                        <span class=\"glyphicon glyphicon-th-list form-control-feedback\" style=\"padding-right:20px\"></span>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>寄售客户：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"checkbox\" name=\"IS_CONSIGN\" placeholder=\"寄售客户\" ng-model=\"customer.IS_CONSIGN\"/>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>营业执照：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" class=\"form-control\" name=\"BUSINESS_LICENCE\" placeholder=\"营业执照\" ng-model=\"customer.BUSINESS_LICENCE\"/>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>经营许可证：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" class=\"form-control\" name=\"PERMIT\" placeholder=\"经营许可证\" ng-model=\"customer.PERMIT\"/>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>停业日期：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" placeholder=\"yyyy-mm-dd\" class=\"form-control\" uib-datepicker-popup name=\"END_DATE\" ng-model=\"customer.END_DATE\" is-open=\"popup[1].opened\" datepicker-options=\"dateOptions\" close-text=\"Close\" ng-click=\"open(1)\"/>\n                        <span class=\"glyphicon glyphicon-calendar form-control-feedback\" style=\"padding-right:20px\"></span>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>最近交易日期：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" placeholder=\"yyyy-mm-dd\" class=\"form-control\" uib-datepicker-popup name=\"RECENCY_DATE\" ng-model=\"customer.RECENCY_DATE\" is-open=\"popup[2].opened\" datepicker-options=\"dateOptions\" close-text=\"Close\" ng-click=\"open(2)\"/>\n                        <span class=\"glyphicon glyphicon-calendar form-control-feedback\" style=\"padding-right:20px\"></span>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>付款银行：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" class=\"form-control\" name=\"BANK\" placeholder=\"付款银行\" ng-model=\"customer.BANK\"/>\n                        <span class=\"glyphicon glyphicon-euro form-control-feedback\" style=\"padding-right:20px\"></span>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>税种：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <ui-select ng-model=\"customer.TAX_TYPE\" name=\"TAX_TYPE\" theme=\"select2\" style=\"min-width:200px\" title=\"Choose a person\">\n                            <ui-select-match placeholder=\"请选择\">{{$select.selected.text}}</ui-select-match>\n                            <ui-select-choices repeat=\"tax in $ctrl.TAX_TYPE | propsFilter: {id: $select.search, text: $select.search}\">\n                                <div>{{tax.text}}</div>\n                                <small>\n                                    id: {{tax.id}}\n                                    text: <span>{{tax.text}}</span>\n                                </small>\n                            </ui-select-choices>\n                        </ui-select>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>付款条件：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" ng-click=\"$ctrl.openModal('PAY_CON_NAME')\" ng-model=\"myForm.PAY_CON_NAME.PAY_CON_NAME\" value=\"{{myForm.PAY_CON_NAME.PAY_CON_NAME}}\" class=\"form-control\" name=\"PAY_CON_NAME\" placeholder=\"请选择\"/>\n                        <span class=\"glyphicon glyphicon-th-list form-control-feedback\" style=\"padding-right:20px\"></span>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>注册地址：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" class=\"form-control\" name=\"ADDRESS\" placeholder=\"注册地址\" ng-model=\"customer.ADDRESS\"/>\n                        <span class=\"glyphicon glyphicon-home form-control-feedback\" style=\"padding-right:20px\"></span>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>客户重要程度：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <ui-select ng-model=\"customer.IMPORTANCE_DEGREE\" name=\"IMPORTANCE_DEGREE\" theme=\"select2\" style=\"min-width:200px\" title=\"Choose a person\">\n                            <ui-select-match placeholder=\"请选择\">{{$select.selected.text}}</ui-select-match>\n                            <ui-select-choices repeat=\"importance in $ctrl.IMPORTANCE_DEGREE | propsFilter: {id: $select.search, text: $select.search}\">\n                                <div>{{importance.text}}</div>\n                                <small>\n                                    id: {{importance.id}}\n                                    text: <span>{{importance.text}}</span>\n                                </small>\n                            </ui-select-choices>\n                        </ui-select>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>发票地址：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" ng-click=\"$ctrl.openModal('INVOICE_ADDRESS1')\" ng-model=\"myForm.INVOICE_ADDRESS1.ADDRESS1\" value=\"{{myForm.INVOICE_ADDRESS1.ADDRESS1}}\" class=\"form-control\" name=\"INVOICE_ADDRESS1\" placeholder=\"请选择\"/>\n                        <span class=\"glyphicon glyphicon-th-list form-control-feedback\" style=\"padding-right:20px\"></span>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>客户状态：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <ui-select ng-model=\"customer.CUSTOMER_STATUS\" name=\"CUSTOMER_STATUS\" theme=\"select2\" style=\"min-width:200px\" title=\"Choose a person\">\n                            <ui-select-match placeholder=\"请选择\">{{$select.selected.text}}</ui-select-match>\n                            <ui-select-choices repeat=\"customer in $ctrl.CUSTOMER_STATUS | propsFilter: {id: $select.search, text: $select.search}\">\n                                <div>{{customer.text}}</div>\n                                <small>\n                                    id: {{customer.id}}\n                                    text: <span>{{customer.text}}</span>\n                                </small>\n                            </ui-select-choices>\n                        </ui-select>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>行业：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <ui-select ng-model=\"customer.TRADE\" name=\"TRADE\" theme=\"select2\" style=\"min-width:200px\" title=\"Choose a person\">\n                            <ui-select-match placeholder=\"请选择\">{{$select.selected.text}}</ui-select-match>\n                            <ui-select-choices repeat=\"trade in $ctrl.TRADE | propsFilter: {id: $select.search, text: $select.search}\">\n                                <div>{{trade.text}}</div>\n                                <small>\n                                    id: {{trade.id}}\n                                    text: <span>{{trade.text}}</span>\n                                </small>\n                            </ui-select-choices>\n                        </ui-select>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>送货地址：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" class=\"form-control\" ng-click=\"$ctrl.openModal('SEND_ADDRESS1')\" ng-model=\"myForm.SEND_ADDRESS1.ADDRESS1\" value=\"{{myForm.SEND_ADDRESS1.ADDRESS1}}\" name=\"SEND_ADDRESS1\" placeholder=\"请选择\"/>\n                        <span class=\"glyphicon glyphicon-th-list form-control-feedback\" style=\"padding-right:20px\"></span>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>联系人：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\" ng-class=\"{'has-error' : myForm.CONTACTS.$invalid}\">\n                        <input type=\"text\" class=\"form-control\" name=\"CONTACTS\" placeholder=\"联系人\" required ng-model=\"customer.CONTACTS\"\n                               uib-tooltip=\"必输\"\n                               tooltip-placement=\"left\"\n                               tooltip-trigger=\"'mouseenter'\"\n                               tooltip-enable=\"!inputModel\"\n                        />\n                        <span class=\"glyphicon glyphicon-ok form-control-feedback\" style=\"padding-right:20px\"\n                              ng-show=\"myForm.CONTACTS.$dirty && myForm.CONTACTS.$valid\"></span>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>电话座机：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\" ng-class=\"{'has-error' : myForm.TEL.$invalid}\">\n                        <input type=\"text\" class=\"form-control\" name=\"TEL\" placeholder=\"电话座机\" required ng-model=\"customer.TEL\"\n                               uib-tooltip=\"必输\"\n                               tooltip-placement=\"left\"\n                               tooltip-trigger=\"'mouseenter'\"\n                               tooltip-enable=\"!inputModel\"\n                        />\n                        <span class=\"glyphicon glyphicon-ok form-control-feedback\" style=\"padding-right:20px\"\n                              ng-show=\"myForm.TEL.$dirty && myForm.TEL.$valid\"></span>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>手机号码：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\" ng-class=\"{'has-error' : myForm.MOBILE.$invalid}\">\n                        <input type=\"text\" class=\"form-control\" name=\"MOBILE\" placeholder=\"手机号码\" required ng-model=\"customer.MOBILE\"\n                               uib-tooltip=\"必输\"\n                               tooltip-placement=\"left\"\n                               tooltip-trigger=\"'mouseenter'\"\n                               tooltip-enable=\"!inputModel\"\n                        />\n                        <span class=\"glyphicon glyphicon-ok form-control-feedback\" style=\"padding-right:20px\"\n                              ng-show=\"myForm.MOBILE.$dirty && myForm.MOBILE.$valid\"></span>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>销售组织：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\" ng-class=\"{'has-error' : myForm.PUR_ORG.$invalid}\">\n                        <input type=\"text\" ng-click=\"$ctrl.openModal('PUR_ORG')\" ng-model=\"customer.PUR_ORG.ORG_NAME\" value=\"{{customer.PUR_ORG.ORG_NAME}}\" class=\"form-control\" name=\"PUR_ORG\" placeholder=\"请选择\"\n                               required\n                               uib-tooltip=\"必输\"\n                               tooltip-placement=\"left\"\n                               tooltip-trigger=\"'mouseenter'\"\n                               tooltip-enable=\"!inputModel\"\n                               key=\"PUR_ORG\"\n                               keyText = \"ORG_ID\"\n                        />\n                        <span class=\"glyphicon glyphicon-th-list form-control-feedback\" style=\"padding-right:20px\"></span>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>销售人员：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\" ng-class=\"{'has-error' : myForm.PUR_MAN.$invalid}\">\n                        <input type=\"text\" ng-click=\"$ctrl.openModal('PUR_MAN')\" ng-model=\"customer.PUR_MAN.NAME_CN\" value=\"{{customer.PUR_MAN.NAME_CN}}\" class=\"form-control\" name=\"PUR_MAN\" placeholder=\"销售人员\"\n                               required\n                               uib-tooltip=\"必输\"\n                               tooltip-placement=\"left\"\n                               tooltip-trigger=\"'mouseenter'\"\n                               tooltip-enable=\"!inputModel\"\n                               key=\"PUR_MAN\"\n                               keyText = \"SALESPERSON_ID\"\n                        />\n                        <span class=\"glyphicon glyphicon-th-list form-control-feedback\" style=\"padding-right:20px\"></span>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>销售手机号码：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" class=\"form-control\" name=\"PUR_MAN_TEL\" placeholder=\"销售手机号码\" ng-model=\"customer.PUR_MAN_TEL\"/>\n                        <span class=\"glyphicon glyphicon-ok form-control-feedback\" style=\"padding-right:20px\"\n                              ng-show=\"myForm.PUR_MAN_TEL.$dirty && myForm.PUR_MAN_TEL.$valid\"></span>\n                    </div>\n                </div>\n\n                <div class=\"form-group has-feedback\">\n                    <div class=\"col-md-2\">\n                        <small><strong>地区：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <ui-select ng-model=\"customer.AREA\" name=\"AREA\" theme=\"select2\" style=\"min-width:200px\" title=\"Choose a person\">\n                            <ui-select-match placeholder=\"请选择\">{{$select.selected.text}}</ui-select-match>\n                            <ui-select-choices repeat=\"area in $ctrl.AREA | propsFilter: {id: $select.search, text: $select.search}\">\n                                <div>{{area.text}}</div>\n                                <small>\n                                    id: {{area.id}}\n                                    text: <span>{{area.text}}</span>\n                                </small>\n                            </ui-select-choices>\n                        </ui-select>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <small><strong>渠道：</strong></small>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <ui-select ng-model=\"customer.CHANNEL\" name=\"CHANNEL\" theme=\"select2\" style=\"min-width:200px\" title=\"Choose a person\">\n                            <ui-select-match placeholder=\"请选择\">{{$select.selected.text}}</ui-select-match>\n                            <ui-select-choices repeat=\"channel in $ctrl.CHANNEL | propsFilter: {id: $select.search, text: $select.search}\">\n                                <div>{{channel.text}}</div>\n                                <small>\n                                    id: {{channel.id}}\n                                    text: <span>{{channel.text}}</span>\n                                </small>\n                            </ui-select-choices>\n                        </ui-select>\n                    </div>\n                </div>\n\n            </div>\n        </form>\n    </div>\n</div>\n<div class=\"modal-footer\">\n    <button ng-if=\"buttonType =='add'\" class=\"btn btn-primary\" type=\"button\" ng-click=\"$ctrl.save()\">保存</button>\n    <button  ng-if=\"buttonType =='modify'\" class=\"btn btn-primary\" type=\"button\" ng-click=\"$ctrl.modify()\">修改</button>\n    <button class=\"btn btn-warning\" type=\"button\" ng-click=\"$ctrl.cancel()\">取消</button>\n</div>";

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(80);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(47)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept(80, function() {
				var newContent = __webpack_require__(80);
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(30)();
	// imports


	// module
	exports.push([module.id, "/*!\n * ui-select\n * http://github.com/angular-ui/ui-select\n * Version: 0.19.3 - 2016-08-17T06:24:46.066Z\n * License: MIT\n */\n\n\n/* Style when highlighting a search. */\n.ui-select-highlight {\n    font-weight: bold;\n}\n\n.ui-select-offscreen {\n    clip: rect(0 0 0 0) !important;\n    width: 1px !important;\n    height: 1px !important;\n    border: 0 !important;\n    margin: 0 !important;\n    padding: 0 !important;\n    overflow: hidden !important;\n    position: absolute !important;\n    outline: 0 !important;\n    left: 0px !important;\n    top: 0px !important;\n}\n\n\n.ui-select-choices-row:hover {\n    background-color: #f5f5f5;\n}\n\n/* Select2 theme */\n\n/* Mark invalid Select2 */\n.ng-dirty.ng-invalid > a.select2-choice {\n    border-color: #D44950;\n}\n\n.select2-result-single {\n    padding-left: 0;\n}\n\n.select2-locked > .select2-search-choice-close{\n    display:none;\n}\n\n.select-locked > .ui-select-match-close{\n    display:none;\n}\n\nbody > .select2-container.open {\n    z-index: 9999; /* The z-index Select2 applies to the select2-drop */\n}\n\n/* Handle up direction Select2 */\n.ui-select-container[theme=\"select2\"].direction-up .ui-select-match,\n.ui-select-container.select2.direction-up .ui-select-match {\n    border-radius: 4px; /* FIXME hardcoded value :-/ */\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n}\n.ui-select-container[theme=\"select2\"].direction-up .ui-select-dropdown,\n.ui-select-container.select2.direction-up .ui-select-dropdown {\n    border-radius: 4px; /* FIXME hardcoded value :-/ */\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n\n    border-top-width: 1px;  /* FIXME hardcoded value :-/ */\n    border-top-style: solid;\n\n    box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.25);\n\n    margin-top: -4px; /* FIXME hardcoded value :-/ */\n}\n.ui-select-container[theme=\"select2\"].direction-up .ui-select-dropdown .select2-search,\n.ui-select-container.select2.direction-up .ui-select-dropdown .select2-search {\n    margin-top: 4px; /* FIXME hardcoded value :-/ */\n}\n.ui-select-container[theme=\"select2\"].direction-up.select2-dropdown-open .ui-select-match,\n.ui-select-container.select2.direction-up.select2-dropdown-open .ui-select-match {\n    border-bottom-color: #5897fb;\n}\n\n.ui-select-container[theme=\"select2\"] .ui-select-dropdown .ui-select-search-hidden,\n.ui-select-container[theme=\"select2\"] .ui-select-dropdown .ui-select-search-hidden input{\n    opacity: 0;\n    height: 0;\n    min-height: 0;\n    padding: 0;\n    margin: 0;\n    border:0;\n}\n\n/* Selectize theme */\n\n/* Helper class to show styles when focus */\n.selectize-input.selectize-focus{\n    border-color: #007FBB !important;\n}\n\n/* Fix input width for Selectize theme */\n.selectize-control > .selectize-input > input {\n    width: 100%;\n}\n\n/* Fix dropdown width for Selectize theme */\n.selectize-control > .selectize-dropdown {\n    width: 100%;\n}\n\n/* Mark invalid Selectize */\n.ng-dirty.ng-invalid > div.selectize-input {\n    border-color: #D44950;\n}\n\n/* Handle up direction Selectize */\n.ui-select-container[theme=\"selectize\"].direction-up .ui-select-dropdown {\n    box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.25);\n    margin-top: -2px; /* FIXME hardcoded value :-/ */\n}\n\n.ui-select-container[theme=\"selectize\"] input.ui-select-search-hidden{\n    opacity: 0;\n    height: 0;\n    min-height: 0;\n    padding: 0;\n    margin: 0;\n    border:0;\n    width: 0;\n}\n\n/* Bootstrap theme */\n\n/* Helper class to show styles when focus */\n.btn-default-focus {\n    color: #333;\n    background-color: #EBEBEB;\n    border-color: #ADADAD;\n    text-decoration: none;\n    outline: 5px auto -webkit-focus-ring-color;\n    outline-offset: -2px;\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\n}\n\n.ui-select-bootstrap .ui-select-toggle {\n    position: relative;\n}\n\n.ui-select-bootstrap .ui-select-toggle > .caret {\n    position: absolute;\n    height: 10px;\n    top: 50%;\n    right: 10px;\n    margin-top: -2px;\n}\n\n/* Fix Bootstrap dropdown position when inside a input-group */\n.input-group > .ui-select-bootstrap.dropdown {\n    /* Instead of relative */\n    position: static;\n}\n\n.input-group > .ui-select-bootstrap > input.ui-select-search.form-control {\n    border-radius: 4px; /* FIXME hardcoded value :-/ */\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n}\n.input-group > .ui-select-bootstrap > input.ui-select-search.form-control.direction-up {\n    border-radius: 4px !important; /* FIXME hardcoded value :-/ */\n    border-top-right-radius: 0 !important;\n    border-bottom-right-radius: 0 !important;\n}\n\n.ui-select-bootstrap .ui-select-search-hidden{\n    opacity: 0;\n    height: 0;\n    min-height: 0;\n    padding: 0;\n    margin: 0;\n    border:0;\n}\n\n.ui-select-bootstrap > .ui-select-match > .btn{\n    /* Instead of center because of .btn */\n    text-align: left !important;\n}\n\n.ui-select-bootstrap > .ui-select-match > .caret {\n    position: absolute;\n    top: 45%;\n    right: 15px;\n}\n\n/* See Scrollable Menu with Bootstrap 3 http://stackoverflow.com/questions/19227496 */\n.ui-select-bootstrap > .ui-select-choices ,.ui-select-bootstrap > .ui-select-no-choice {\n    width: 100%;\n    height: auto;\n    max-height: 200px;\n    overflow-x: hidden;\n    margin-top: -1px;\n}\n\nbody > .ui-select-bootstrap.open {\n    z-index: 1000; /* Standard Bootstrap dropdown z-index */\n}\n\n.ui-select-multiple.ui-select-bootstrap {\n    height: auto;\n    padding: 3px 3px 0 3px;\n}\n\n.ui-select-multiple.ui-select-bootstrap input.ui-select-search {\n    background-color: transparent !important; /* To prevent double background when disabled */\n    border: none;\n    outline: none;\n    height: 1.666666em;\n    margin-bottom: 3px;\n}\n\n.ui-select-multiple.ui-select-bootstrap .ui-select-match .close {\n    font-size: 1.6em;\n    line-height: 0.75;\n}\n\n.ui-select-multiple.ui-select-bootstrap .ui-select-match-item {\n    outline: 0;\n    margin: 0 3px 3px 0;\n}\n\n.ui-select-multiple .ui-select-match-item {\n    position: relative;\n}\n\n.ui-select-multiple .ui-select-match-item.dropping .ui-select-match-close {\n    pointer-events: none;\n}\n\n.ui-select-multiple:hover .ui-select-match-item.dropping-before:before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 100%;\n    height: 100%;\n    margin-right: 2px;\n    border-left: 1px solid #428bca;\n}\n\n.ui-select-multiple:hover .ui-select-match-item.dropping-after:after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 100%;\n    height: 100%;\n    margin-left: 2px;\n    border-right: 1px solid #428bca;\n}\n\n.ui-select-bootstrap .ui-select-choices-row>span {\n    cursor: pointer;\n    display: block;\n    padding: 3px 20px;\n    clear: both;\n    font-weight: 400;\n    line-height: 1.42857143;\n    color: #333;\n    white-space: nowrap;\n}\n\n.ui-select-bootstrap .ui-select-choices-row>span:hover, .ui-select-bootstrap .ui-select-choices-row>span:focus {\n    text-decoration: none;\n    color: #262626;\n    background-color: #f5f5f5;\n}\n\n.ui-select-bootstrap .ui-select-choices-row.active>span {\n    color: #fff;\n    text-decoration: none;\n    outline: 0;\n    background-color: #428bca;\n}\n\n.ui-select-bootstrap .ui-select-choices-row.disabled>span,\n.ui-select-bootstrap .ui-select-choices-row.active.disabled>span {\n    color: #777;\n    cursor: not-allowed;\n    background-color: #fff;\n}\n\n/* fix hide/show angular animation */\n.ui-select-match.ng-hide-add,\n.ui-select-search.ng-hide-add {\n    display: none !important;\n}\n\n/* Mark invalid Bootstrap */\n.ui-select-bootstrap.ng-dirty.ng-invalid > button.btn.ui-select-match {\n    border-color: #D44950;\n}\n\n/* Handle up direction Bootstrap */\n.ui-select-container[theme=\"bootstrap\"].direction-up .ui-select-dropdown {\n    box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.25);\n}\n\n.ui-select-bootstrap .ui-select-match-text {\n    width: 100%;\n    padding-right: 1em;\n}\n.ui-select-bootstrap .ui-select-match-text span {\n    display: inline-block;\n    width: 100%;\n    overflow: hidden;\n}\n.ui-select-bootstrap .ui-select-toggle > a.btn {\n    position: absolute;\n    height: 10px;\n    right: 10px;\n    margin-top: -2px;\n}", ""]);

	// exports


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _pms = __webpack_require__(82);

	var _pms2 = _interopRequireDefault(_pms);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var pms001Module = angular.module("pms001module", []).component("pms001", _pms2.default);

	exports.default = pms001Module;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _pms = __webpack_require__(83);

	var _pms2 = _interopRequireDefault(_pms);

	__webpack_require__(84);

	var _global_val = __webpack_require__(70);

	var _public_var = __webpack_require__(67);

	var _public = __webpack_require__(68);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var pms001component = {
	    template: _pms2.default,
	    bindings: {
	        resolve: '<',
	        close: '&',
	        dismiss: '&',
	        identify: '<'
	    },
	    controller: function controller($scope, $http, $uibModal, ajaxService, $timeout) {
	        $scope.identify = this.identify;
	        $scope.tab = $scope.$parent.$parent.$parent.$parent.tab;
	        $scope.dialogpanel = false;
	        $scope.dialogtree = false;
	        $scope.RMS = {};
	        $scope.$on("pup_add", function (e, obj) {
	            $scope.title = obj.title;
	            $scope.buttonType = obj.buttonType;
	        });
	        $scope.$on("setModifyData", function (e, obj) {
	            $scope.title = obj.title;
	            $scope.buttonType = obj.buttonType;
	            console.log(obj.modifyData);
	            $scope.RMS = obj.modifyData;
	        });
	        $scope.openModal = function (popupType) {
	            switch (popupType) {
	                case "LINE_TYPE_NAME":
	                    $scope.dialogpanel = true;
	                    $scope.$broadcast("dialogContent", {
	                        boxContent: _global_val.CommonComponentBox[popupType],
	                        tab: $scope.tab
	                    });
	                    break;
	                case "LongParentAuthId":
	                    $scope.dialogtree = true;
	                    $scope.$broadcast("dialogTree", {
	                        boxContent: _global_val.CommonComponentBox[popupType]
	                    });
	                    break;
	            }
	        };
	        $scope.$on("row", function (e, val) {
	            $scope.dialogpanel = false;
	        });
	        $scope.$on("tree", function (e, val) {
	            $scope.RMS.parentAuthName = val.name;
	            $scope.RMS.parentAuthId = val.id;
	            $scope.dialogtree = false;
	        });
	        $scope.$on("del", function (e, val) {
	            $scope.dialogpanel = false;
	            $scope.dialogtree = false;
	        });

	        /*
	        * 授权管理--权限管理--新增 hujing
	        * */
	        this.save = function () {
	            var data = {
	                href: _public_var.publicVar.pms001.save,
	                column: _public_var.publicVar.Columns.pms001,
	                param: _public.publicFunction.deepCopy(_public_var.publicVar.param)
	            };
	            data.param.records = [$scope.RMS];
	            ajaxService.getAjaxPost(data.href, data.param).then(function (res) {
	                console.log(res);
	                $scope.$emit("cancel", true);
	                data.href = _public_var.publicVar.mainUrl.pms001;
	                $scope.$emit("toparent-refresh", data);
	            });
	        };

	        /**
	         * 修改 function
	         */
	        $scope.modify = function () {
	            var href = _public_var.publicVar.pms001.save,
	                param = _public.publicFunction.deepCopy(_public_var.publicVar.param);
	            param.records = [$scope.RMS];
	            ajaxService.getAjaxPost(href, param).then(function (res) {
	                console.log(res);
	            });
	        };

	        $scope.cancel = function () {
	            $scope.$emit("cancel", true);
	        };

	        $scope.PrivilegeClass = [{
	            "id": 1,
	            "text": "页面级"
	        }, {
	            "id": 2,
	            "text": "功能级"
	        }];
	        $scope.RMS.sort = $scope.PrivilegeClass[0].id;

	        $scope.PermissionType = [{
	            "id": 1,
	            "text": "系统"
	        }, {
	            "id": 2,
	            "text": "客户"
	        }, {
	            "id": 3,
	            "text": "供应商"
	        }];
	        $scope.RMS.type = $scope.PermissionType[0].id;

	        $scope.openMode = [{
	            "id": 1,
	            "text": "本窗口"
	        }, {
	            "id": 2,
	            "text": "父窗口"
	        }, {
	            "id": 3,
	            "text": "顶窗口"
	        }, {
	            "id": 4,
	            "text": "新窗口"
	        }];
	        $scope.RMS.openMode = $scope.openMode[0].id;
	    }
	};

	exports.default = pms001component;

/***/ },
/* 83 */
/***/ function(module, exports) {

	module.exports = "<!--@@@@@@@新增弹框@@@@@@-->\r\n<div class=\"movePanel\" move-directive>\r\n    <div class=\"panel panel-info dialog_level_1\">\r\n        <div class=\"panel-heading\">\r\n            <h4 class=\"modal-title\">{{title}}</h4>\r\n        </div>\r\n        <div class=\"panel-body\" style=\"height:200px;\">\r\n            <form role=\"form\" name=\"myForm\" ng-submit=\"submitForm(myForm.$valid)\" class=\"form-horizontal\" novalidate>\r\n                <li>\r\n                    <span><small>权限名称</small></span>\r\n                    <input type=\"text\" ng-model=\"RMS.name\" class=\"form-control\" placeholder=\"请输入\"/>\r\n\r\n                </li>\r\n                <li>\r\n                    <small>权限路由</small>\r\n                    <input type=\"text\" ng-model=\"RMS.route\" class=\"form-control\" placeholder=\"请输入\"/>\r\n\r\n                </li>\r\n                <li>\r\n                    <small>权限类别</small>\r\n                    <select class=\"form-control\" style=\"width: 170px;\" ng-model=\"RMS.sort\" ng-options=\"item.id as item.text for item in PrivilegeClass\"></select>\r\n                </li>\r\n                <li>\r\n                    <small>权限类型</small>\r\n                    <select class=\"form-control\" style=\"width: 170px;\" ng-model=\"RMS.type\" ng-options=\"item.id as item.text for item in PermissionType\"></select>\r\n                </li>\r\n                <li>\r\n                    <span><small>菜单图标</small></span>\r\n                    <input type=\"text\" ng-model=\"RMS.menuCls\" class=\"form-control\" placeholder=\"请输入\"/>\r\n\r\n                </li>\r\n                <li>\r\n                    <small>父级权限</small>\r\n                    <input type=\"text\" ng-click=\"openModal('LongParentAuthId')\" ng-model=\"RMS.parentAuthName\" value=\"{{RMS.parentAuthId}}\" class=\"form-control\" name=\"LINE_TYPE_NAME\" placeholder=\"请选择\"/>\r\n                    <span class=\"glyphicon glyphicon-th-list form-control-feedback\"></span>\r\n                </li>\r\n                <li>\r\n                    <small>打开方式</small>\r\n                        <select class=\"form-control\" style=\"width: 170px;\" ng-model=\"RMS.openMode\" ng-options=\"item.id as item.text for item in openMode\"></select>\r\n                </li>\r\n                <li>\r\n                    <small>排序号</small>\r\n                    <input type=\"text\" ng-model=\"RMS.orders\" class=\"form-control\" placeholder=\"请选择\"/>\r\n\r\n                </li>\r\n            </form>\r\n        </div>\r\n        <div class=\"panel-footer\">\r\n            <button ng-if=\"buttonType =='add'\" class=\"btn btn-primary\" type=\"button\" ng-click=\"save()\">保存</button>\r\n            <button  ng-if=\"buttonType =='modify'\" class=\"btn btn-primary\" type=\"button\" ng-click=\"modify()\">修改</button>\r\n            <button class=\"btn btn-warning\" type=\"button\" ng-click=\"cancel()\">取消</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n<!--@@@@@@@二级弹框@@@@@@-->\r\n<div ng-show=\"dialogpanel\" ng-class=\"{showDialog:dialogpanel,hideDialog:!dialogpanel}\" style=\"position:absolute;\">\r\n    <pop-up></pop-up>\r\n</div>\r\n<div ng-show=\"dialogtree\" ng-class=\"{showDialog:dialogtree,hideDialog:!dialogtree}\" style=\"position:absolute;\">\r\n    <common-box-tree></common-box-tree>\r\n</div>\r\n";

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(85);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(47)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept(85, function() {
				var newContent = __webpack_require__(85);
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(30)();
	// imports


	// module
	exports.push([module.id, ".dialog_level_1 {\n  width: 900px; }\n  .dialog_level_1 .panel-body {\n    padding-top: 20px; }\n    .dialog_level_1 .panel-body form {\n      width: 870px;\n      margin: 0 auto; }\n      .dialog_level_1 .panel-body form li {\n        position: relative;\n        list-style: none;\n        width: 290px;\n        text-align: right;\n        float: left;\n        margin-bottom: 8px; }\n        .dialog_level_1 .panel-body form li span {\n          display: inline-block;\n          width: 100px;\n          margin-right: 6px; }\n        .dialog_level_1 .panel-body form li .form-control {\n          width: auto;\n          display: inline-block; }\n        .dialog_level_1 .panel-body form li span.glyphicon-th-list {\n          position: absolute;\n          top: 1px;\n          right: 25px;\n          width: 0;\n          height: 0;\n          padding: 0;\n          margin: 0; }\n  .dialog_level_1 .panel-footer {\n    border: 0; }\n    .dialog_level_1 .panel-footer .btn {\n      margin: 10px 5px 8px 20px; }\n\n.form-group {\n  margin-right: 0;\n  margin-left: 0; }\n  .form-group small {\n    display: block;\n    height: 34px;\n    line-height: 34px; }\n\n.showDialog {\n  animation-name: dialogIn;\n  animation-duration: 0.5s;\n  animation-delay: 0;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  /*Safari and Chrome*/\n  -webkit-animation-name: dialogIn;\n  -webkit-animation-duration: 0.5s;\n  -webkit-animation-delay: 0;\n  -webkit-animation-iteration-count: 1;\n  -webkit-animation-fill-mode: forwards; }\n\n.hideDialog {\n  animation-name: dialogOut;\n  animation-duration: 0.5s;\n  animation-delay: 0;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  /*Safari and Chrome*/\n  -webkit-animation-name: dialogOut;\n  -webkit-animation-duration: 0.5s;\n  -webkit-animation-delay: 0;\n  -webkit-animation-iteration-count: 1;\n  -webkit-animation-fill-mode: forwards; }\n\n@keyframes dialogIn {\n  0% {\n    top: -900px; }\n  100% {\n    top: 0px; } }\n\n@-webkit-keyframes dialogIn {\n  0% {\n    top: -900px; }\n  100% {\n    top: 0px; } }\n\n@keyframes dialogOut {\n  0% {\n    top: 0px; }\n  100% {\n    top: -900px; } }\n\n@-webkit-keyframes dialogOut {\n  0% {\n    top: 0px; }\n  100% {\n    top: -900px; } }\n", ""]);

	// exports


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _purgroupInformationManagerAddComponent = __webpack_require__(87);

	var _purgroupInformationManagerAddComponent2 = _interopRequireDefault(_purgroupInformationManagerAddComponent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var purgroupInformationManagerAddModule = angular.module("purgroupAddcomponent", []).component("purgroupAddcomponent", _purgroupInformationManagerAddComponent2.default);

	exports.default = purgroupInformationManagerAddModule;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _purgroupInformationManagerAdd = __webpack_require__(88);

	var _purgroupInformationManagerAdd2 = _interopRequireDefault(_purgroupInformationManagerAdd);

	__webpack_require__(89);

	var _global_val = __webpack_require__(70);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var purgroupInformationManagerAddComponent = {
	    template: _purgroupInformationManagerAdd2.default,
	    bindings: {
	        resolve: '<',
	        close: '&',
	        dismiss: '&',
	        identify: '<'
	    },
	    controller: function controller($scope, $http, $uibModal, ajaxService, $timeout) {

	        var param = { //下拉暂时使用
	            "RequestID": "9999",
	            "RequestFormat": "JSON",
	            "SessionKey": "e7265144-1b82-4a01-87b2-2f19b3d539e3",
	            "SessionTimeout": "60",
	            "Version": "1.0",
	            "DBRequest": {
	                "Field": [{
	                    "UDF_CODE": ["CUSTOMER_TYPE", "INVOICE_TYPE", "TAX_TYPE", "IMPORTANCE_DEGREE", "TRADE", "AREA", "CHANNEL"]
	                }, "UDF_ID", "UDF_ITEM_NAME"],
	                "Page": {
	                    "Start": "1",
	                    "End": "30"
	                }
	            }
	        };
	        $scope.$on("refreshDetail", function (e, row) {
	            $scope.customer = {};
	            ajaxService.getAjaxselect("http://10.99.2.61/SCMC/SystemBase/Udf/getmutiUdf", param).then(function (res) {
	                $scope.INVOICE_TYPE = res.DBData.INVOICE_TYPE;
	                if ($scope.customer.INVOICE_TYPE) {
	                    $scope.customer.INVOICE_TYPE = $scope.INVOICE_TYPE.filter(function (res) {
	                        return res.id == $scope.customer.INVOICE_TYPE;
	                    })[0];
	                }
	            });
	        });
	        $scope.identify = this.identify;
	        $scope.tab = $scope.$parent.$parent.$parent.$parent.tab;
	        $scope.dialogpanel = false;
	        $scope.openModal = function (popupType) {
	            $scope.dialogpanel = true;
	            $scope.$broadcast("dialogContent", {
	                boxContent: _global_val.CommonComponentBox[popupType],
	                tab: $scope.tab
	            });
	        };
	        $scope.$on("row", function (e, val) {
	            console.log(val.row);
	            $scope.dialogpanel = false;
	        });
	        $scope.$on("del", function (e, val) {
	            $scope.dialogpanel = false;
	        });
	        this.cancel = function () {
	            $scope.$emit("cancel", true);
	        };

	        /*$scope.dialogpanel=true;
	        $scope.openclick=function(values){
	            $scope.dialogpanel=false;
	            $scope.wheres=CommonComponentBox[values].wheres;
	            $scope.title=CommonComponentBox[values].title;
	        }*/

	        /* let ctrl = this,
	             param = {
	                 "requestId":"9999",
	                 "page":{"start":1,"pageSize":10},
	                 "order":[{"field":"GID","type":"2"}],
	                 "conditions":[{"field":"","value":"","option":"6"}]
	             };
	           ctrl.$onInit = function(){
	             $scope.buttonType = ctrl.resolve.buttonType;
	           }*/

	        /*
	        
	                $scope.today = function() {
	                    $scope.dt = new Date();
	                };
	        
	                $scope.today();
	        
	                $scope.clear = function() {
	                    $scope.dt = null;
	                };
	        
	                $scope.inlineOptions = {
	                    minDate: new Date(),
	                    showWeeks: true
	                };
	        
	                $scope.dateOptions = {
	                    formatYear: 'yy',
	                    maxDate: new Date(2030, 5, 22),
	                    minDate: new Date(1970,5,22),
	                    startingDay: 1
	                };
	        
	        
	                $scope.setDate = function(year, month, day) {
	                    $scope.dt = new Date(year, month, day);
	                };
	        */

	        //弹窗
	        /* ctrl.openModal = val =>{
	             var modalInstance = $uibModal.open({
	                 animation: true,
	                 size : "lg",
	                 component: 'commonBoxComponent',
	                 resolve: {
	                     option : function(){
	                         return CommonComponentBox[val];
	                     }
	                 }
	             });
	               modalInstance.result.then(selectedItem=>{
	                 $scope.myForm[val] = selectedItem.entity;
	                 if($scope.myForm.$$success.commonBox){
	                     $scope.myForm.$$success.commonBox[val] = selectedItem.entity;
	                     $scope.customer[val] = selectedItem.entity;
	                 }else{
	                     $scope.myForm.$$success.commonBox = {};
	                     $scope.myForm.$$success.commonBox[val] = selectedItem.entity;
	                     $scope.customer[val] = selectedItem.entity;
	                 }
	                 console.log($scope.myForm[val]);
	             }, function ($scope) {
	                 $log.info('modal-component dismissed at: ' + new Date());
	             });
	         }
	           ctrl.save = ()=> {
	             console.log($scope.myForm);
	             console.log("保存");
	               if($scope.myForm.$valid){
	                   let data ={};
	                   $scope.myForm.$$success.parse.map(res=>{
	                     data[res.$name] = res.$viewValue
	                 })
	                   for(let key in $scope.myForm.$$success.commonBox){
	                     data[key] = $scope.myForm.$$success.commonBox[key][key];
	                 }
	                   console.log(data);
	                 console.log(JSON.stringify(data));
	                   let param = {
	                     "RequestID":"9999",
	                     "RequestFormat":"JSON",
	                     "SessionKey":"38e2aa43-fb68-4c7f-a815-f0b2607856c0",
	                     "SessionTimeout":"60",
	                     "Version":"1.0",
	                     "DBRequest":{
	                         "Field":[
	                             data
	                         ],
	                         "Page":{
	                             "Start":"1",
	                             "End":"30"
	                         }
	                     }
	                 };
	                   ajaxService.getAjaxPost("http://10.99.2.61/SCMC/CRM/CUSTOMER/insertCustomer",param)
	                     .then(res=>{
	                         console.log(res);
	                         ctrl.close({$value: "success"});
	                     });
	             }else{
	                 console.log("验证未通过");
	             }
	         }
	           ctrl.modify = ()=>{
	             console.log("修改");
	               if($scope.myForm.$valid){
	                   let data ={};
	                   if($scope.myForm.$$success.parse){
	                     $scope.myForm.$$success.parse.map(res=>{
	                         console.log(typeof res.$viewValue);
	                         if(typeof res.$viewValue === "object"){
	                             data[res.$name] = res.$viewValue.id
	                         }else{
	                             data[res.$name] = res.$viewValue
	                         }
	                     })
	                 }
	                   if($scope.myForm.$$success.commonBox){
	                     for(let key in $scope.myForm.$$success.commonBox){
	                         let valueKey = document.querySelector(`input[key=${key}]`).getAttribute("keyText");
	                         data[key] = $scope.myForm.$$success.commonBox[key][valueKey];
	                     }
	                 }
	                   console.log(data);
	                 console.log(JSON.stringify(data));
	                   let param = {
	                     "RequestID":"9999",
	                     "RequestFormat":"JSON",
	                     "SessionKey":"38e2aa43-fb68-4c7f-a815-f0b2607856c0",
	                     "SessionTimeout":"60",
	                     "Version":"1.0",
	                     "DBRequest":{
	                         "Field": data,
	                         "Where" :` GID = ${$scope.customer.GID} `
	                     }
	                 };
	                   console.log(param);
	                   ajaxService.getAjaxPost("http://10.99.2.61/SCMC/CRM/CUSTOMER/updateCustomer",param)
	                     .then(res=>{
	                         console.log(res);
	                         ctrl.close({$value: "success"});
	                     });
	             }else{
	                 console.log("验证未通过");
	             }
	         }*/

	        $scope.cancel = function () {
	            $scope.$parent.$parent.mypanel = false;
	        };
	    }
	};

	exports.default = purgroupInformationManagerAddComponent;

/***/ },
/* 88 */
/***/ function(module, exports) {

	module.exports = "<!--@@@@@@@新增弹框@@@@@@-->\r\n<div class=\"movePanel\" move-directive>\r\n    <div class=\"panel panel-info dialog_level_1\">\r\n        <div class=\"panel-heading\">\r\n            <h4 class=\"modal-title\">业务类型新增</h4>\r\n        </div>\r\n        <div class=\"panel-body\" style=\"height:200px;\">\r\n            <form role=\"form\" name=\"myForm\" ng-submit=\"submitForm(myForm.$valid)\" class=\"form-horizontal\" novalidate>\r\n                <li>\r\n                    <span><small>送货地址</small></span>\r\n                    <input type=\"text\" ng-click=\"openModal('SEND_ADDRESS1')\" ng-model=\"myForm.PUR_PERSON_NAME.PUR_PERSON_NAME\" value=\"{{myForm.PUR_PERSON_NAME.PUR_PERSON_NAME}}\" class=\"form-control\" name=\"PUR_PERSON_NAME\" placeholder=\"请选择\"/>\r\n                    <span class=\"glyphicon glyphicon-th-list form-control-feedback\"></span>\r\n                </li>\r\n                <li>\r\n                    <small>销售组织</small>\r\n                    <input type=\"text\" ng-click=\"openModal('PUR_ORG')\" ng-model=\"myForm.LINE_TYPE_NAME.LINE_TYPE_NAME\" value=\"{{myForm.LINE_TYPE_NAME.LINE_TYPE_NAME}}\" class=\"form-control\" name=\"LINE_TYPE_NAME\" placeholder=\"请选择\"/>\r\n                    <span class=\"glyphicon glyphicon-th-list form-control-feedback\"></span>\r\n                </li>\r\n                <li>\r\n                    <small>发票种类</small>\r\n                    <ui-select ng-model=\"customer.INVOICE_TYPE\" name=\"INVOICE_TYPE\" theme=\"select2\" style=\"min-width:200px\" title=\"Choose a person\">\r\n                        <ui-select-match placeholder=\"请选择\">{{$select.selected.text}}</ui-select-match>\r\n                        <ui-select-choices repeat=\"invoice in INVOICE_TYPE | propsFilter: {id: $select.search}\">\r\n                            <div>{{invoice.text}}</div>\r\n                        </ui-select-choices>\r\n                    </ui-select>\r\n                </li>\r\n                <li>\r\n                    <small>信用额度控制</small>\r\n                    <input type=\"checkbox\" name=\"IS_CREDIT\" placeholder=\"信用额度\" ng-model=\"customer.IS_CREDIT\"/>\r\n                </li>\r\n            </form>\r\n        </div>\r\n        <div class=\"panel-footer\">\r\n            <button ng-if=\"buttonType =='add'\" class=\"btn btn-primary\" type=\"button\" ng-click=\"$ctrl.save()\">保存</button>\r\n            <button  ng-if=\"buttonType =='modify'\" class=\"btn btn-primary\" type=\"button\" ng-click=\"$ctrl.modify()\">修改</button>\r\n            <button class=\"btn btn-warning\" type=\"button\" ng-click=\"$ctrl.cancel()\">取消</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n<pop-up ng-show=\"dialogpanel\"></pop-up>\r\n\r\n\r\n\r\n\r\n";

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(90);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(47)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept(90, function() {
				var newContent = __webpack_require__(90);
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(30)();
	// imports


	// module
	exports.push([module.id, ".dialog_level_1 {\n  width: 900px; }\n  .dialog_level_1 .panel-body {\n    padding-top: 20px; }\n    .dialog_level_1 .panel-body form {\n      width: 870px;\n      margin: 0 auto; }\n      .dialog_level_1 .panel-body form li {\n        position: relative;\n        list-style: none;\n        width: 290px;\n        text-align: right;\n        float: left;\n        margin-bottom: 8px; }\n        .dialog_level_1 .panel-body form li span {\n          display: inline-block;\n          width: 100px;\n          margin-right: 6px; }\n        .dialog_level_1 .panel-body form li .form-control {\n          width: auto;\n          display: inline-block; }\n        .dialog_level_1 .panel-body form li span.glyphicon-th-list {\n          position: absolute;\n          top: 1px;\n          right: 25px;\n          width: 0;\n          height: 0;\n          padding: 0;\n          margin: 0; }\n  .dialog_level_1 .panel-footer {\n    border: 0; }\n    .dialog_level_1 .panel-footer .btn {\n      margin: 10px 5px 8px 20px; }\n\n.form-group {\n  margin-right: 0;\n  margin-left: 0; }\n  .form-group small {\n    display: block;\n    height: 34px;\n    line-height: 34px;\n    margin-left: 35px; }\n\n.popUp {\n  width: 900px;\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  margin-left: -300px; }\n", ""]);

	// exports


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _pms = __webpack_require__(92);

	var _pms2 = _interopRequireDefault(_pms);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var pms003Module = angular.module("pms003", []).component("pms003", _pms2.default);

	exports.default = pms003Module;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _pms = __webpack_require__(93);

	var _pms2 = _interopRequireDefault(_pms);

	var _public_var = __webpack_require__(67);

	__webpack_require__(94);

	var _global_val = __webpack_require__(70);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var pms003 = {
	    template: _pms2.default,
	    bindings: {
	        option: "<"
	    },
	    controller: function controller($scope, $http, $uibModal, ajaxService, $timeout) {
	        $scope.tab = $scope.$parent.$parent.$parent.$parent.tab;
	        //初始化明细表
	        $scope.$on("refreshDetail", function (e, row) {
	            refreshDetailTable(_public_var.publicVar.mainUrl.pms003, _public_var.publicVar.Columns.pms003, _public_var.publicVar.param);
	        });
	        //二级弹框弹出的标识
	        $scope.dialogpanel = false;
	        $scope.openModal = function (popupType) {
	            $scope.dialogpanel = true;
	            $scope.$broadcast("dialogContent", {
	                boxContent: _global_val.CommonComponentBox[popupType],
	                tab: $scope.tab
	            });
	        };
	        function refreshDetailTable(href, column, param) {
	            if (param) {
	                ajaxService.getAjaxPost(href, param).then(function (res) {
	                    if (res.data) {
	                        $("#" + $scope.tab.page.id + ' .detail_table').treegrid({
	                            data: res.data,
	                            idField: 'id',
	                            treeField: 'name',
	                            width: 900,
	                            height: 200,
	                            rownumbers: true,
	                            pagination: true,
	                            singleSelect: false,
	                            pagePosition: 'bottom', //页面的位置
	                            columns: [column]
	                        });
	                    }
	                });
	            }
	        };
	        //二级弹框保存
	        $scope.$on("row", function (e, val) {
	            console.log(val.row);
	            $scope.dialogpanel = false;
	        });
	        //二级弹框取消
	        $scope.$on("del", function (e, val) {
	            $scope.dialogpanel = false;
	        });
	        //一级弹框取消
	        this.cancel = function () {
	            $scope.$emit("cancel", true);
	        };
	    }
	};
	exports.default = pms003;

/***/ },
/* 93 */
/***/ function(module, exports) {

	module.exports = "<!--@@@@@@@新增弹框@@@@@@-->\r\n<div class=\"movePanel level-1\" move-directive>\r\n    <div class=\"panel panel-info dialog_level_1\">\r\n        <div class=\"panel-heading\">\r\n            <h4 class=\"modal-title\">pms003</h4>\r\n        </div>\r\n        <div class=\"panel-body\">\r\n            <form role=\"form\" name=\"myForm\" ng-submit=\"submitForm(myForm.$valid)\" class=\"form-horizontal\" novalidate>\r\n                <li>\r\n                    <span><small>业务类型</small></span>\r\n                    <input type=\"text\" ng-click=\"openModal('PUR_MAN')\" ng-model=\"myForm.PUR_PERSON_NAME.PUR_PERSON_NAME\" value=\"{{myForm.PUR_PERSON_NAME.PUR_PERSON_NAME}}\" class=\"form-control\" name=\"PUR_PERSON_NAME\" placeholder=\"请选择\"/>\r\n                    <span class=\"glyphicon glyphicon-th-list form-control-feedback\"></span>\r\n                </li>\r\n                <li>\r\n                    <small>业务行类型</small>\r\n                    <input type=\"text\" ng-click=\"openModal('LINE_TYPE_NAME')\" ng-model=\"myForm.LINE_TYPE_NAME.LINE_TYPE_NAME\" value=\"{{myForm.LINE_TYPE_NAME.LINE_TYPE_NAME}}\" class=\"form-control\" name=\"LINE_TYPE_NAME\" placeholder=\"请选择\"/>\r\n                    <span class=\"glyphicon glyphicon-th-list form-control-feedback\"></span>\r\n                </li>\r\n                <li class=\"btn-box\">\r\n                    <button type=\"buttom\" class=\"button\" ng-click=\"\">保存</button>\r\n                </li>\r\n            </form>\r\n            <br style=\"clear:both\">\r\n            <div class=\"detail_list\">\r\n                <div class=\"title\">明细列表</div>\r\n                <div class=\"btn_list\">\r\n                    <button type=\"button\" class=\"btn\" ng-click=\"\">新增</button>\r\n                    <button type=\"button\" class=\"btn\" ng-click=\"\">修改</button>\r\n                    <button type=\"button\" class=\"btn\" ng-click=\"\">删除</button>\r\n                </div>\r\n                <div class=\"detail_table\"></div>\r\n            </div>\r\n        </div>\r\n        <div class=\"panel-footer\">\r\n            <button ng-if=\"buttonType =='add'\" class=\"btn btn-primary\" type=\"button\" ng-click=\"$ctrl.save()\">保存</button>\r\n            <button  ng-if=\"buttonType =='modify'\" class=\"btn btn-primary\" type=\"button\" ng-click=\"$ctrl.modify()\">修改</button>\r\n            <button class=\"btn btn-warning\" type=\"button\" ng-click=\"$ctrl.cancel()\">取消</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n<!--@@@@@@@二级弹框@@@@@@-->\r\n<div ng-show=\"dialogpanel\" ng-class=\"{showDialog:dialogpanel,hideDialog:!dialogpanel}\" style=\"position:absolute;\">\r\n    <pop-up></pop-up>\r\n</div>\r\n\r\n\r\n";

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(95);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(47)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept(95, function() {
				var newContent = __webpack_require__(95);
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(30)();
	// imports


	// module
	exports.push([module.id, ".detail_list {\n  width: 900px;\n  height: 300px; }\n  .detail_list .title {\n    width: 900px;\n    height: 50px;\n    text-align: left; }\n  .detail_list .btn_list {\n    width: 900px;\n    height: 50px;\n    text-align: left; }\n    .detail_list .btn_list .btn-box {\n      float: left; }\n    .detail_list .btn_list .btn {\n      margin: 10px 5px 8px 20px; }\n\nform .button {\n  margin: 0;\n  padding: 4px 30px; }\n", ""]);

	// exports


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _commonBoxComponent = __webpack_require__(97);

	var _commonBoxComponent2 = _interopRequireDefault(_commonBoxComponent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var commonBoxModule = angular.module("commonBoxComponent", []).component("commonBoxComponent", _commonBoxComponent2.default);

	exports.default = commonBoxModule;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _commonBoxComponent = __webpack_require__(98);

	var _commonBoxComponent2 = _interopRequireDefault(_commonBoxComponent);

	var _global_val = __webpack_require__(70);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var commonBoxComponent = {
	    template: _commonBoxComponent2.default,
	    bindings: {
	        resolve: "<",
	        close: '&',
	        dismiss: '&'
	    },
	    controller: function controller($scope, $log, $http, $timeout, i18nService, ajaxService) {
	        // $scope.title=CommonComponentBox.LINE_TYPE_NAME.title;

	        /*let ctrl = this,
	            option = ctrl.resolve.option || {},
	            href = option.href,
	            lang = option.lang || "zh-cn",
	            gridOption = option.gridOptions || {},
	            param = option.param;
	          ctrl.select = {};
	        ctrl.textdata = {};
	          ctrl.$onInit = function(){
	            i18nService.setCurrentLang(lang);
	              ctrl.title = option.title || "往来户";
	            ctrl.wheres = option.wheres || {};
	            ctrl.selectRow = {};
	            ctrl.gridOptions = gridOption;
	            ctrl.gridOptions.enableCellEditOnFocus = gridOption.enableCellEditOnFocus || true;
	            ctrl.gridOptions.enableGridMenu = gridOption.enableGridMenu || true;
	            ctrl.gridOptions.paginationPageSizes = gridOption.paginationPageSizes || [5, 10, 20];
	            ctrl.gridOptions.paginationPageSize = gridOption.paginationPageSize || 5;
	            ctrl.gridOptions.multiSelect = gridOption.multiSelect || false;
	            ctrl.gridOptions.enableSelectAll = gridOption.enableSelectAll || false;
	            ctrl.gridOptions.columnDefs = gridOption.columnDefs || [];
	            ctrl.gridOptions.onRegisterApi = function(gridApi){
	                gridApi.selection.on.rowSelectionChanged($scope,function(row){
	                    if(row.isSelected){
	                        ctrl.selectRow = row;
	                    }else{
	                        ctrl.selectRow = {};
	                    }
	                });
	            };
	              ajaxService.getAjaxPost(href,param)
	                .then(res=>{
	                    ctrl.gridOptions.data = res.records;
	                })
	        }
	          $scope.look = function(event){
	        }
	          ctrl.search = () => {
	              let data ={};
	              for(var key in ctrl.textdata){
	                data[key]=ctrl.textdata[key];
	              }
	              for(let key in ctrl.select){
	                if($scope.select[key]){
	                    data[key] = ctrl.select[key].id;
	                }
	            }
	              ajaxService.searchCommonBox(data,href,param)
	                .then(res=>{
	                    $timeout(()=>{ctrl.gridOptions.data = res.records},10)
	                    //param.conditions = oldWhere;
	                })
	        };
	          ctrl.save = ()=> {
	            ctrl.close({$value: ctrl.selectRow});
	        }
	          ctrl.cancel = ()=>{
	            ctrl.dismiss({$value: 'cancel'});
	        }*/

	    }
	};

	exports.default = commonBoxComponent;

/***/ },
/* 98 */
/***/ function(module, exports) {

	module.exports = "<div class=\"panel panel-info\">\n    <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">{{$ctrl.title}}</h3>\n    </div>\n    <div class=\"panel-body\">\n\n        <fieldset ng-if=\"$ctrl.wheres\">\n            <legend>数据筛选</legend>\n            <form class=\"navbar-form row\" role=\"search\">\n                <div class=\"col-md-12 form-group\">\n                    <div  class=\"col-md-4\" ng-repeat=\"where in $ctrl.wheres\">\n                        <div>\n                            <span><small>{{where.name_cn}}</small></span>\n                        </div>\n                        <input  style=\"min-width:180px;\" ng-if=\"where.type == 'text'\" ng-model=\"$ctrl.textdata[where.name]\" type=\"text\" class=\"form-control\" placeholder=\"{{where.name_cn}}\">\n                        <select style=\"min-width:180px;\" ng-if=\"where.type == 'select'\" ng-click=\"look(this)\" ng-model=\"select[where.name]\" class=\"form-control\" value=\"\" ng-options=\"item as item.text for item in where.selectValue track by item.id\"><option></option></select>\n                    </div>\n                </div>\n\n                <div class=\"text-center\">\n                    <button type=\"submit\" class=\"btn btn-default\" style=\"margin-top: 10px\" ng-click=\"$ctrl.search()\">查询</button>\n                </div>\n            </form>\n        </fieldset>\n\n        <hr style=\"border-top:1px solid #e5e5e5\"/>\n\n        <div ui-grid=\"$ctrl.gridOptions\" ui-grid-edit  ui-grid-selection ui-grid-pagination ui-grid-cellnav class=\"grid\"></div>\n    </div>\n    <div class=\"modal-footer\">\n        <button class=\"btn btn-primary\" type=\"button\" ng-click=\"$ctrl.save()\">确定</button>\n        <button class=\"btn btn-warning\" type=\"button\" ng-click=\"$ctrl.cancel()\">取消</button>\n    </div>\n</div>";

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _headComponent = __webpack_require__(100);

	var _headComponent2 = _interopRequireDefault(_headComponent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var headModule = angular.module("scmHead", []).component("scmHead", _headComponent2.default);

	exports.default = headModule;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	__webpack_require__(101);

	var _head = __webpack_require__(106);

	var _head2 = _interopRequireDefault(_head);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var headComponent = {
	    template: _head2.default,
	    controller: function controller($scope) {
	        $scope.hidelogout = true;
	        $scope.loginBtn = function () {
	            $scope.hidelogout = false;
	        };

	        //获取当前时间：
	        var now = new Date(),
	            year = now.getFullYear(),
	            //年
	        month = now.getMonth() + 1,
	            //月
	        day = now.getDate(),
	            //日
	        weekArr = new Array("星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六");
	        $scope.datetime = year + "-";
	        if (month < 10) $scope.datetime += "0";
	        $scope.datetime += month + "-";
	        if (day < 10) $scope.datetime += "0";
	        $scope.datetime += day + " ";
	        $scope.week = weekArr[now.getDay()]; //当前星期
	    }

	};

	exports.default = headComponent;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(102);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(47)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept(102, function() {
				var newContent = __webpack_require__(102);
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(30)();
	// imports


	// module
	exports.push([module.id, ".mesTop_bg {\n  width: 100%;\n  height: 60px;\n  background: url(" + __webpack_require__(103) + ") no-repeat;\n  background-size: 214px 40px;\n  background-position: 10px 10px; }\n  .mesTop_bg .messager, .mesTop_bg .setting {\n    position: relative;\n    float: right;\n    padding: 16px 20px 16px 0;\n    display: inline-block;\n    cursor: pointer; }\n  .mesTop_bg .messager i {\n    width: 22px;\n    height: 27px;\n    display: inline-block;\n    background: url(" + __webpack_require__(104) + ") no-repeat; }\n  .mesTop_bg .setting i {\n    width: 29px;\n    height: 27px;\n    display: inline-block;\n    background: url(" + __webpack_require__(105) + ") no-repeat; }\n  .mesTop_bg .setting ol {\n    position: absolute;\n    top: 50px;\n    right: 0px;\n    width: 160px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    overflow: hidden;\n    zoom: 1;\n    z-index: 1; }\n    .mesTop_bg .setting ol li {\n      float: left;\n      height: 30px;\n      width: 160px;\n      line-height: 30px;\n      font-size: 16px;\n      text-align: center;\n      list-style: none;\n      cursor: pointer; }\n    .mesTop_bg .setting ol li:hover {\n      background-color: #ddd; }\n  .mesTop_bg .dateText {\n    float: right;\n    line-height: 25px;\n    margin: 17px 20px 17px 0; }\n", ""]);

	// exports


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "041cdd2357bb5bb9a145a5078c828fd2.png";

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "03fcfcf844c4e44c3b52c5df29a39f39.png";

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "79d7fcedc9442264a0ef614eccd7fc50.png";

/***/ },
/* 106 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row aosTopLayout\" style=\"margin:0;background:#fff;\">\n    <div class=\"mesTop_bg\">\n        <span class=\"messager\"><i></i></span>\n        <span class=\"setting\" ng-click=\"loginBtn()\">\n            <i></i>\n            <ol ng-hide=\"hidelogout\"  ng-mouseleave=\"hidelogout = true\" style=\"padding:0;\">\n                <li onclick=\"loginOut()\">退出登录</li>\n            </ol>\n        </span>\n        <span class=\"dateText\">{{datetime+' '+week}}</span>\n    </div>\n</div>\n<script>\n    function loginOut(){\n        window.location.href = \"../../../../../Web/src/js/components/login/html/scm_login.html\";\n\n    }\n</script>";

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _popupComponent = __webpack_require__(108);

	var _popupComponent2 = _interopRequireDefault(_popupComponent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var popupModule = angular.module('popUp', ['ui.bootstrap']).component('popUp', _popupComponent2.default);

	exports.default = popupModule;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	__webpack_require__(109);

	var _popup = __webpack_require__(111);

	var _popup2 = _interopRequireDefault(_popup);

	var _global_val = __webpack_require__(70);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var popupComponent = {
	    template: _popup2.default,
	    bindings: {
	        type: "<"
	    },
	    controller: function controller($scope, ajaxService) {
	        $scope.$on("dialogContent", function (e, obj) {
	            refreshTable(obj.boxContent.href, obj.boxContent.columns, obj.boxContent.param, obj.tab.page.id);
	            $scope.title = obj.boxContent.title;
	            $scope.wheres = obj.boxContent.wheres;
	        });
	        //刷新二级弹框列表
	        function refreshTable(href, column, param, tabId) {
	            if (param) {
	                ajaxService.getAjaxPost(href, param).then(function (res) {
	                    if (res.data) {
	                        $("#" + tabId + ' .dialog_table').treegrid({
	                            data: res.data,
	                            idField: 'id',
	                            treeField: 'name',
	                            rownumbers: true,
	                            pagination: true,
	                            singleSelect: false,
	                            pagePosition: 'bottom', //页面的位置
	                            columns: [column]
	                        });
	                    }
	                });
	            }
	        };
	        //保存，将数据传到父控制器
	        this.save = function () {
	            $scope.$emit("row", { "row": "一条数据", "type": this.type });
	        };
	        //取消，传参到父控制器关闭当前弹窗
	        this.cancel = function () {
	            $scope.$emit("del", this.type);
	        };
	    }
	};

	exports.default = popupComponent;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(110);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(47)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept(110, function() {
				var newContent = __webpack_require__(110);
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(30)();
	// imports


	// module
	exports.push([module.id, ".movePanel {\n  z-index: 100;\n  width: 900px;\n  height: 50px;\n  position: absolute;\n  float: left; }\n\n.dialog_level_2 .panel-body {\n  height: 400px; }\n  .dialog_level_2 .panel-body .dataList {\n    height: 200px;\n    overflow: scroll; }\n  .dialog_level_2 .panel-body .whereInput {\n    width: 290px;\n    text-align: right;\n    float: left;\n    margin-bottom: 8px; }\n    .dialog_level_2 .panel-body .whereInput span {\n      display: inline-block;\n      width: 100px;\n      margin-right: 6px; }\n    .dialog_level_2 .panel-body .whereInput .button {\n      margin: 0;\n      padding: 4px 30px; }\n  .dialog_level_2 .panel-body .btn-box:nth-child(3n) {\n    width: 290px; }\n  .dialog_level_2 .panel-body .btn-box:nth-child(3n+1) {\n    width: 870px; }\n  .dialog_level_2 .panel-body .btn-box:nth-child(3n+2) {\n    width: 580px; }\n\n.dialog_level_2 .panel-footer {\n  border: 0; }\n  .dialog_level_2 .panel-footer .btn {\n    margin: 10px 5px 8px 20px; }\n", ""]);

	// exports


/***/ },
/* 111 */
/***/ function(module, exports) {

	module.exports = "<div class=\"movePanel\" move-directive>\r\n    <div class=\"panel panel-info dialog_level_2\">\r\n        <div class=\"panel-heading\">\r\n            <h3 class=\"panel-title\">{{title}}</h3>\r\n        </div>\r\n        <div class=\"panel-body\">\r\n            <fieldset>\r\n                <legend>数据筛选</legend>\r\n                <form class=\"navbar-form row\" role=\"search\">\r\n                    <div class=\"whereInput\" ng-repeat=\"where in wheres\">\r\n                        <span><small>{{where.name_cn}}</small></span>\r\n                        <input  style=\"min-width:180px;\" ng-if=\"where.type == 'text'\" ng-model=\"$ctrl.textdata[where.name]\" type=\"text\" class=\"form-control\" placeholder=\"{{where.name_cn}}\">\r\n                        <select style=\"min-width:180px;\" ng-if=\"where.type == 'select'\" ng-click=\"look(this)\" ng-model=\"select[where.name]\" class=\"form-control\" value=\"\" ng-options=\"item as item.text for item in where.selectValue track by item.id\"><option></option></select>\r\n                    </div>\r\n                    <div class=\"whereInput btn-box\">\r\n                        <button type=\"submit\" class=\"button\" ng-click=\"$ctrl.search()\">查询</button>\r\n                    </div>\r\n                </form>\r\n            </fieldset>\r\n\r\n            <hr style=\"border-top:1px solid #e5e5e5\"/>\r\n            <div class=\"dataList\">\r\n                <div class=\"easyui-datagrid dialog_table\"></div>\r\n            </div>\r\n        </div>\r\n        <div class=\"panel-footer\">\r\n            <button class=\"btn btn-primary\" type=\"button\" ng-click=\"$ctrl.save()\">确定</button>\r\n            <button class=\"btn btn-warning\" type=\"button\" ng-click=\"$ctrl.cancel()\">取消</button>\r\n        </div>\r\n    </div>\r\n</div>";

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _commonBoxTree = __webpack_require__(113);

	var _commonBoxTree2 = _interopRequireDefault(_commonBoxTree);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var commonBoxTreeModule = angular.module("commonBoxTree", []).component("commonBoxTree", _commonBoxTree2.default);

	exports.default = commonBoxTreeModule;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _commonBoxTreeComponent = __webpack_require__(114);

	var _commonBoxTreeComponent2 = _interopRequireDefault(_commonBoxTreeComponent);

	__webpack_require__(115);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var commonBoxTree = {
	    template: _commonBoxTreeComponent2.default,
	    bindings: {
	        resolve: "<",
	        close: "&",
	        dismiss: "&"
	    },
	    controller: function controller($scope, ajaxService) {
	        var _this = this;

	        $scope.$on("dialogTree", function (e, obj) {
	            $scope.title = obj.boxContent.title;
	            $scope.refreshTree(obj.boxContent.href.getTreeListByStatus);
	            //refreshTable(obj.boxContent.href ,obj.boxContent.columns ,obj.boxContent.param , obj.tab.page.id );
	            //$scope.title = obj.boxContent.title;
	            //$scope.wheres = obj.boxContent.wheres;
	        });

	        $scope.refreshTree = function (url) {
	            ajaxService.getAjaxPost(url).then(function (res) {
	                org_Ztree(res.data);
	                console.log(res);
	            });
	        };

	        function org_Ztree(data) {
	            var zTreeObj, nodes;
	            var setting = {
	                view: {
	                    selectedMulti: false,
	                    showLine: false
	                },
	                check: {
	                    enable: true,
	                    chkStyle: "radio",
	                    radioType: "all",
	                    chkboxType: { "Y": "", "N": "" }
	                },
	                data: {
	                    key: {
	                        url: "www.baidu.com"
	                    }
	                }
	            };
	            var zTreeNodes = data;

	            var zTreeObj = $.fn.zTree.init($("#tree"), setting, zTreeNodes);
	        };

	        $scope.save = function () {
	            var treeObj = $.fn.zTree.getZTreeObj("tree"),
	                nodes = treeObj.getChangeCheckedNodes();
	            $scope.$emit("tree", nodes[0]);
	        };

	        $scope.cancel = function () {
	            $scope.$emit("del", _this.type);
	        };
	    }
	};

	exports.default = commonBoxTree;

/***/ },
/* 114 */
/***/ function(module, exports) {

	module.exports = "<div class=\"treePanel\" move-directive>\r\n    <div class=\"panel panel-info dialog_level_2\">\r\n        <div class=\"panel-heading\">\r\n            <h3 class=\"panel-title\">{{title}}</h3>\r\n        </div>\r\n        <div class=\"panel-body\">\r\n            <div class=\"\" style=\"margin: 20px\">\r\n                <ul id=\"tree\" class=\"ztree\" style=\"width:230px; overflow:auto;\"></ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"panel-footer\">\r\n            <button class=\"btn btn-primary\" type=\"button\" ng-click=\"save()\">确定</button>\r\n            <button class=\"btn btn-warning\" type=\"button\" ng-click=\"cancel()\">取消</button>\r\n        </div>\r\n    </div>\r\n</div>";

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(116);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(47)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept(116, function() {
				var newContent = __webpack_require__(116);
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(30)();
	// imports


	// module
	exports.push([module.id, ".treePanel {\n  z-index: 101;\n  width: 500px;\n  height: 50px;\n  position: absolute;\n  left: 200px;\n  float: left; }\n\n.dialog_level_2 .panel-body {\n  height: 400px; }\n  .dialog_level_2 .panel-body .dataList {\n    height: 200px;\n    overflow: scroll; }\n  .dialog_level_2 .panel-body .whereInput {\n    width: 290px;\n    text-align: right;\n    float: left;\n    margin-bottom: 8px; }\n    .dialog_level_2 .panel-body .whereInput span {\n      display: inline-block;\n      width: 100px;\n      margin-right: 6px; }\n    .dialog_level_2 .panel-body .whereInput .button {\n      margin: 0;\n      padding: 4px 30px; }\n  .dialog_level_2 .panel-body .btn-box:nth-child(3n) {\n    width: 290px; }\n  .dialog_level_2 .panel-body .btn-box:nth-child(3n+1) {\n    width: 870px; }\n  .dialog_level_2 .panel-body .btn-box:nth-child(3n+2) {\n    width: 580px; }\n\n.dialog_level_2 .panel-footer {\n  border: 0; }\n  .dialog_level_2 .panel-footer .btn {\n    margin: 10px 5px 8px 20px; }\n", ""]);

	// exports


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _permissionComponent = __webpack_require__(118);

	var _permissionComponent2 = _interopRequireDefault(_permissionComponent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var permissionModule = angular.module('perMission', ['ui.bootstrap']).component('perMission', _permissionComponent2.default);

	exports.default = permissionModule;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	__webpack_require__(119);

	var _permission = __webpack_require__(121);

	var _permission2 = _interopRequireDefault(_permission);

	var _public = __webpack_require__(68);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var permissionComponent = {
	    template: _permission2.default,
	    bindings: {
	        resolve: '<',
	        close: '&',
	        dismiss: '&',
	        identify: '<'
	    },
	    controller: function controller($scope, ajaxService) {
	        $scope.$on("detaildialog", function (e, obj) {
	            $scope.inputs = obj.boxContent.inputs;
	            $scope.names = obj.boxContent.names;
	            $scope.key = obj.boxContent.key;
	            _public.publicFunction.setFormDataForObject(obj.boxdata);
	        });

	        //取消，传参到父控制器关闭当前弹窗
	        $scope.closed = function () {
	            $scope.$emit("closed", true);
	        };
	    }
	};

	exports.default = permissionComponent;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(120);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(47)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept(120, function() {
				var newContent = __webpack_require__(120);
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(30)();
	// imports


	// module
	exports.push([module.id, ".dialog_level_1 {\n  width: 900px; }\n  .dialog_level_1 .panel-body {\n    padding-top: 20px; }\n    .dialog_level_1 .panel-body form {\n      width: 870px;\n      margin: 0 auto; }\n      .dialog_level_1 .panel-body form li {\n        position: relative;\n        list-style: none;\n        width: 290px;\n        text-align: right;\n        float: left;\n        margin-bottom: 8px; }\n        .dialog_level_1 .panel-body form li span {\n          display: inline-block;\n          width: 100px;\n          margin-right: 6px; }\n        .dialog_level_1 .panel-body form li .form-control {\n          width: auto;\n          display: inline-block; }\n        .dialog_level_1 .panel-body form li span.glyphicon-th-list {\n          position: absolute;\n          top: 1px;\n          right: 25px;\n          width: 0;\n          height: 0;\n          padding: 0;\n          margin: 0; }\n  .dialog_level_1 .panel-footer {\n    border: 0; }\n    .dialog_level_1 .panel-footer .btn {\n      margin: 10px 5px 8px 20px; }\n\n.form-group {\n  margin-right: 0;\n  margin-left: 0; }\n  .form-group small {\n    display: block;\n    height: 34px;\n    line-height: 34px; }\n\n.showDialog {\n  animation-name: dialogIn;\n  animation-duration: 0.5s;\n  animation-delay: 0;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  /*Safari and Chrome*/\n  -webkit-animation-name: dialogIn;\n  -webkit-animation-duration: 0.5s;\n  -webkit-animation-delay: 0;\n  -webkit-animation-iteration-count: 1;\n  -webkit-animation-fill-mode: forwards; }\n\n.hideDialog {\n  animation-name: dialogOut;\n  animation-duration: 0.5s;\n  animation-delay: 0;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  /*Safari and Chrome*/\n  -webkit-animation-name: dialogOut;\n  -webkit-animation-duration: 0.5s;\n  -webkit-animation-delay: 0;\n  -webkit-animation-iteration-count: 1;\n  -webkit-animation-fill-mode: forwards; }\n\n@keyframes dialogIn {\n  0% {\n    top: -900px; }\n  100% {\n    top: 0px; } }\n\n@-webkit-keyframes dialogIn {\n  0% {\n    top: -900px; }\n  100% {\n    top: 0px; } }\n\n@keyframes dialogOut {\n  0% {\n    top: 0px; }\n  100% {\n    top: -900px; } }\n\n@-webkit-keyframes dialogOut {\n  0% {\n    top: 0px; }\n  100% {\n    top: -900px; } }\n", ""]);

	// exports


/***/ },
/* 121 */
/***/ function(module, exports) {

	module.exports = "<!--@@@@@@@权限详情@@@@@@-->\r\n<div class=\"movePanel\" move-directive>\r\n    <div class=\"panel panel-info dialog_level_1\">\r\n        <div class=\"panel-heading\">\r\n            <h4 class=\"modal-title\">权限详情</h4>\r\n        </div>\r\n        <div class=\"panel-body\" style=\"height:240px;\">\r\n            <form role=\"form\" name=\"myForm\" class=\"form-horizontal\" novalidate>\r\n                <li ng-repeat=\"where in inputs\">\r\n                    <span><small>{{where.names}}</small></span>\r\n                    <input type=\"text\" class=\"form-control {{where.key}}\" key={{where.key}} disabled>\r\n\r\n                </li>\r\n               <!-- <li>\r\n                    <span><small>权限名称</small></span>\r\n                    <input type=\"text\" ng-model=\"RMS.name\" class=\"form-control\" />\r\n\r\n                </li>\r\n                <li>\r\n                    <small>权限路由</small>\r\n                    <input type=\"text\" ng-model=\"RMS.route\" class=\"form-control\" />\r\n\r\n                </li>\r\n                <li>\r\n                    <small>权限类别</small>\r\n                    <select class=\"form-control\" style=\"width: 170px;\" ng-model=\"RMS.sort\" ng-options=\"item.id as item.text for item in PrivilegeClass\"></select>\r\n                </li>\r\n                <li>\r\n                    <small>权限类型</small>\r\n                    <select class=\"form-control\" style=\"width: 170px;\" ng-model=\"RMS.type\" ng-options=\"item.id as item.text for item in PermissionType\"></select>\r\n                </li>\r\n                <li>\r\n                    <small>父级权限</small>\r\n                    <input type=\"text\" ng-click=\"openModal('LongParentAuthId')\" ng-model=\"RMS.parentAuthName\" value=\"{{RMS.parentAuthId}}\" class=\"form-control\" name=\"LINE_TYPE_NAME\" />\r\n                    <span class=\"glyphicon glyphicon-th-list form-control-feedback\"></span>\r\n                </li>\r\n                <li>\r\n                    <span><small>菜单图标</small></span>\r\n                    <input type=\"text\" ng-model=\"RMS.menuCls\" class=\"form-control\"/>\r\n\r\n                </li>\r\n\r\n                <li>\r\n                    <small>打开方式</small>\r\n                    <select class=\"form-control\" style=\"width: 170px;\" ng-model=\"RMS.openMode\" ng-options=\"item.id as item.text for item in openMode\"></select>\r\n                </li>\r\n                <li>\r\n                    <small>排序号</small>\r\n                    <input type=\"text\" ng-model=\"RMS.orders\" class=\"form-control\" />\r\n\r\n                </li>\r\n                <li>\r\n                    <small>状态</small>\r\n                    <input type=\"text\" ng-model=\"RMS.orders\" class=\"form-control\" />\r\n\r\n                </li>\r\n                <li>\r\n                    <small>创建人</small>\r\n                    <input type=\"text\" ng-model=\"RMS.orders\" class=\"form-control\" />\r\n\r\n                </li>\r\n                <li>\r\n                    <small>创建时间</small>\r\n                    <input type=\"text\" ng-model=\"RMS.orders\" class=\"form-control\" />\r\n\r\n                </li>\r\n                <li>\r\n                    <small>更新人</small>\r\n                    <input type=\"text\" ng-model=\"RMS.orders\" class=\"form-control\" />\r\n\r\n                </li>\r\n                <li>\r\n                    <small>更新时间</small>\r\n                    <input type=\"text\" ng-model=\"RMS.orders\" class=\"form-control\"/>\r\n\r\n                </li>-->\r\n            </form>\r\n        </div>\r\n        <div class=\"panel-footer\">\r\n            <button class=\"btn btn-primary\" type=\"button\" ng-click=\"closed()\">关闭</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n";

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _ajax = __webpack_require__(123);

	var _ajax2 = _interopRequireDefault(_ajax);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * 公共服务，包含service,module,provider,factory
	 */
	var ServiceModule = angular.module("serviceCommon", []).service("ajaxService", _ajax2.default);

	exports.default = ServiceModule;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _public = __webpack_require__(68);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ajaxService = function () {
	    function ajaxService($http) {
	        _classCallCheck(this, ajaxService);

	        this.$http = $http;
	    }

	    _createClass(ajaxService, [{
	        key: "getAjaxJsonp",
	        value: function getAjaxJsonp(href, param) {
	            if ((typeof param === "undefined" ? "undefined" : _typeof(param)) === "object") {
	                param = JSON.stringify(param);
	            }
	            return this.$http.jsonp(href + "?callback=JSON_CALLBACK&param=" + param);
	        }
	    }, {
	        key: "getAjaxPost",
	        value: function getAjaxPost(href, param) {

	            var param = JSON.stringify(param);
	            console.log(param);
	            return new Promise(function (resolve, reject) {
	                $.ajax({
	                    type: "post",
	                    data: param,
	                    dataType: 'json',
	                    url: href,
	                    contentType: 'application/json;charset="utf-8"',
	                    success: function success(res) {
	                        return resolve(res);
	                    },
	                    error: function error(res) {
	                        return reject(res);
	                    }
	                });
	            });
	        }
	    }, {
	        key: "getAjaxselect",
	        value: function getAjaxselect(href, param) {
	            //下拉暂时使用

	            var param = { "param": JSON.stringify(param) };
	            param["key"] = _public.publicFunction.getSessionKey;
	            return new Promise(function (resolve, reject) {
	                if (param.requestId) {
	                    param.requestId = _public.publicFunction.getRequestId;
	                }
	                $.ajax({
	                    type: "post",
	                    data: param,
	                    dataType: 'json',
	                    url: href,
	                    success: function success(res) {
	                        return resolve(res);
	                    },
	                    error: function error(res) {
	                        return reject(res);
	                    }
	                });
	            });
	        }
	    }, {
	        key: "searchCommonBox",
	        value: function searchCommonBox(val, href, param) {

	            for (var key in val) {
	                if (val[key]) {
	                    param.conditions = [{ "field": "" + key, "value": "" + val[key], "option": "LIKE" }];
	                }
	            }

	            return this.getAjaxPost(href, param);
	        }
	    }]);

	    return ajaxService;
	}();

	exports.default = ajaxService;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _props = __webpack_require__(125);

	var _props2 = _interopRequireDefault(_props);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * 公共服务，包含service,module,provider,factory
	 */
	var FilterModule = angular.module("filterCommon", []).filter("propsFilter", function () {
	  return _props2.default;
	});

	exports.default = FilterModule;

/***/ },
/* 125 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	exports.default = function (items, props) {
	    var out = [];
	    if (angular.isArray(items)) {
	        var keys = Object.keys(props);

	        items.forEach(function (item) {
	            var itemMatches = false;

	            for (var i = 0; i < keys.length; i++) {
	                var prop = keys[i];
	                var text = props[prop].toLowerCase();
	                if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
	                    itemMatches = true;
	                    break;
	                }
	            }

	            if (itemMatches) {
	                out.push(item);
	            }
	        });
	    } else {
	        // Let the output be the input untouched
	        out = items;
	    }

	    return out;
	};

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _move = __webpack_require__(127);

	var _move2 = _interopRequireDefault(_move);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var DirectiveModule = angular.module("DirectiveSet", []).directive("moveDirective", _move2.default);

	exports.default = DirectiveModule;

/***/ },
/* 127 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function moveDirective() {
	    return {
	        restrict: 'ECMA',
	        link: function link(scope, element, attr) {
	            // element.on("click",function(){
	            //     console.log("cccc");
	            // });
	            element[0].onmousedown = function (e) {
	                var oEvent = e || window.event,
	                    disL = oEvent.clientX - element[0].offsetLeft,
	                    disT = oEvent.clientY - element[0].offsetTop,
	                    maxL = document.documentElement.clientWidth - element[0].offsetWidth,
	                    maxT = document.documentElement.clientHeight - element[0].offsetHeight;

	                element[0].onmousemove = function (e) {
	                    var oEvent = e || window.event,
	                        disX = oEvent.clientX - disL,
	                        disY = oEvent.clientY - disT;

	                    //console.log(disX);
	                    // if(disX <=0){ disX =0}
	                    // if(disY <=0){ disY =0}
	                    // if(disX >=maxL){ disX =maxL}
	                    // if(disY >=maxT){ disY =maxT}
	                    element[0].style.left = disX + 'px';
	                    element[0].style.top = disY + 'px';
	                };
	            };
	            element[0].onmouseup = function () {
	                element[0].onmousemove = null;
	            };
	            //阻止父元素的事件
	            element[0].children[0].children[1].onmousedown = function (e) {
	                if (e && e.stopPropagation) {
	                    //非IE浏览器
	                    e.stopPropagation();
	                }
	            };
	            element[0].children[0].children[2].onmousedown = function (e) {
	                if (e && e.stopPropagation) {
	                    //非IE浏览器
	                    e.stopPropagation();
	                }
	            };
	            // if (e && e.stopPropagation) {//非IE浏览器
	            //     e.stopPropagation();
	            // }
	            // element.onmousedown = function(e){
	            //     console.log("jjjj");
	            //     var oEvent =e || window.event,
	            //         disL = oEvent.clientX - oBox.offsetLeft,
	            //         disT = oEvent.clientY - oBox.offsetTop,
	            //         maxL = document.documentElement.clientWidth - oBox.offsetWidth,
	            //         maxT = document.documentElement.clientHeight - oBox.offsetHeight;
	            //
	            //     document.onmousemove = function(e){
	            //         var oEvent = e || window.event,
	            //             disX = oEvent.clientX - disL,
	            //             disY = oEvent.clientY - disT;
	            //
	            //         //console.log(disX);
	            //         if(disX <=0){ disX =0}
	            //         if(disY <=0){ disY =0}
	            //         if(disX >=maxL){ disX =maxL}
	            //         if(disY >=maxT){ disY =maxT}
	            //         oBox.style.left = disX+'px';
	            //         oBox.style.top = disY+'px';
	            //     }
	            //
	            // }
	        }
	    };
	}

	exports.default = moveDirective;

/***/ }
/******/ ]);